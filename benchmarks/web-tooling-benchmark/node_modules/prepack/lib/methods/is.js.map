{"version":3,"sources":["../../src/methods/is.js"],"names":["IsConcatSpreadable","IsGenericDescriptor","IsAccessorDescriptor","IsDataDescriptor","OrdinaryIsExtensible","IsExtensible","IsCallable","IsConstructor","IsInteger","IsPropertyKey","IsArray","IsInTailPosition","IsRegExp","IsIdentifierRef","IsFunctionDefinition","IsAnonymousFunctionDefinition","IsArrayIndex","IsPromise","IsDetachedBuffer","IsIntrospectionError","IsStatic","IsStatement","realm","O","mightBeObject","throwIfNotObject","spreadable","intrinsics","SymbolIsConcatSpreadable","mightBeUndefined","ToBooleanPartial","throwIfNotConcrete","Desc","getExtensible","$IsExtensible","func","isSimpleObject","throwIfNotConcreteObject","$Call","argument","$Construct","isNaN","Infinity","Math","floor","abs","arg","reportIntrospectionError","ArrayPrototype","$ProxyHandler","createErrorThrowCompletion","TypeError","target","$ProxyTarget","node","isRegExp","SymbolMatch","undefined","$RegExpMatcher","type","Error","hasName","P","key","value","i","ToUint32","pow","ToString","x","$PromiseState","arrayBuffer","$ArrayBufferData","$GetPrototypeOf","__IntrospectionErrorPrototype","classElement","static"],"mappings":"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","file":"is.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FatalError } from \"../errors.js\";\nimport type { PropertyKeyValue } from \"../types.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor } from \"../types.js\";\nimport { Get } from \"./get.js\";\nimport {\n  FunctionValue,\n  NullValue,\n  ProxyValue,\n  ArrayValue,\n  StringValue,\n  SymbolValue,\n  ObjectValue,\n  NumberValue,\n  AbstractValue,\n  AbstractObjectValue,\n} from \"../values/index.js\";\nimport { To } from \"../singletons.js\";\nimport { Value } from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { HasName, HasCompatibleType } from \"./has.js\";\nimport type { BabelNodeExpression, BabelNodeCallExpression, BabelNodeLVal, BabelNodeClassMethod } from \"babel-types\";\nimport { BabelNode } from \"babel-types\";\n\n// ECMA262 22.1.3.1.1\nexport function IsConcatSpreadable(realm: Realm, O: Value): boolean {\n  // 1. If Type(O) is not Object, return false.\n  if (!O.mightBeObject()) return false;\n  O = O.throwIfNotObject();\n\n  // 2. Let spreadable be ? Get(O, @@isConcatSpreadable).\n  let spreadable = Get(realm, O, realm.intrinsics.SymbolIsConcatSpreadable);\n\n  // 3. If spreadable is not undefined, return ToBoolean(spreadable).\n  if (!spreadable.mightBeUndefined()) return To.ToBooleanPartial(realm, spreadable);\n  spreadable.throwIfNotConcrete();\n\n  // 4. Return ? IsArray(O).\n  return IsArray(realm, O);\n}\n\n// ECMA262 6.2.4.3\nexport function IsGenericDescriptor(realm: Realm, Desc: ?Descriptor): boolean {\n  // 1. If Desc is undefined, return false.\n  if (!Desc) return false;\n\n  // 2. If IsAccessorDescriptor(Desc) and IsDataDescriptor(Desc) are both false, return true.\n  if (!IsAccessorDescriptor(realm, Desc) && !IsDataDescriptor(realm, Desc)) return true;\n\n  // 3. Return false.\n  return false;\n}\n\n// ECMA262 6.2.4.1\nexport function IsAccessorDescriptor(realm: Realm, Desc: ?Descriptor): boolean {\n  // 1. If Desc is undefined, return false.\n  if (!Desc) return false;\n\n  // 2. If both Desc.[[Get]] and Desc.[[Set]] are absent, return false.\n  if (!(\"get\" in Desc) && !(\"set\" in Desc)) return false;\n\n  // 3. Return true.\n  return true;\n}\n\n// ECMA262 6.2.4.2\nexport function IsDataDescriptor(realm: Realm, Desc: ?Descriptor): boolean {\n  // If Desc is undefined, return false.\n  if (!Desc) return false;\n\n  // If both Desc.[[Value]] and Desc.[[Writable]] are absent, return false.\n  if (!(\"value\" in Desc) && !(\"writable\" in Desc)) return false;\n\n  // Return true.\n  return true;\n}\n\n// ECMA262 9.1.3.1\nexport function OrdinaryIsExtensible(realm: Realm, O: ObjectValue): boolean {\n  // 1. Return the value of the [[Extensible]] internal slot of O.\n  return O.getExtensible();\n}\n\n// ECMA262 7.2.5\nexport function IsExtensible(realm: Realm, O: ObjectValue | AbstractObjectValue): boolean {\n  // 1. Assert: Type(O) is Object.\n\n  // 2. Return ? O.[[IsExtensible]]().\n  return O.$IsExtensible();\n}\n\n// ECMA262 7.2.3\nexport function IsCallable(realm: Realm, func: Value): boolean {\n  // 1. If Type(argument) is not Object, return false.\n  if (!func.mightBeObject()) return false;\n  if (HasCompatibleType(func, FunctionValue)) return true;\n  if (func.isSimpleObject()) return false;\n\n  // 2. If argument has a [[Call]] internal method, return true.\n  func = func.throwIfNotConcreteObject();\n  if (func.$Call) return true;\n\n  // 3. Return false.\n  return false;\n}\n\n// ECMA262 7.2.4\nexport function IsConstructor(realm: Realm, argument: Value): boolean {\n  // 1. If Type(argument) is not Object, return false.\n  if (!argument.mightBeObject()) return false;\n\n  // 2. If argument has a [[Construct]] internal method, return true.\n  argument = argument.throwIfNotConcreteObject();\n  if (argument.$Construct) return true;\n\n  // 3. Return false.\n  return false;\n}\n\n// ECMA262 7.2.6\nexport function IsInteger(realm: Realm, argument: number): boolean {\n  // 1. If Type(argument) is not Number, return false.\n  invariant(typeof argument === \"number\", \"Type(argument) is not number\");\n\n  // 2. If argument is NaN, +∞, or -∞, return false.\n  if (isNaN(argument) || argument === +Infinity || argument === -Infinity) return false;\n\n  // 3. If floor(abs(argument)) ≠ abs(argument), return false.\n  if (Math.floor(Math.abs(argument)) !== Math.abs(argument)) return false;\n\n  // 4. Return true.\n  return true;\n}\n\n// ECMA262 7.2.7\nexport function IsPropertyKey(realm: Realm, arg: string | Value): boolean {\n  // We allow native strings to be passed around to avoid constructing a StringValue\n  if (typeof arg === \"string\") return true;\n\n  // 1. If Type(argument) is String, return true.\n  if (arg instanceof StringValue) return true;\n\n  // 2. If Type(argument) is Symbol, return true.\n  if (arg instanceof SymbolValue) return true;\n\n  if (arg instanceof AbstractValue) {\n    AbstractValue.reportIntrospectionError(arg);\n    throw new FatalError();\n  }\n\n  // 3. Return false.\n  return false;\n}\n\n// ECMA262 7.2.2\nexport function IsArray(realm: Realm, argument: Value): boolean {\n  // 1. If Type(argument) is not Object, return false.\n  if (!argument.mightBeObject()) return false;\n\n  // 2. If argument is an Array exotic object, return true.\n  if (argument instanceof ArrayValue || argument === realm.intrinsics.ArrayPrototype) return true;\n\n  // 3. If argument is a Proxy exotic object, then\n  if (argument instanceof ProxyValue) {\n    // a. If the value of the [[ProxyHandler]] internal slot of argument is null, throw a TypeError exception.\n    if (!argument.$ProxyHandler || argument.$ProxyHandler instanceof NullValue) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // b. Let target be the value of the [[ProxyTarget]] internal slot of argument.\n    let target = argument.$ProxyTarget;\n\n    // c. Return ? IsArray(target).\n    return IsArray(realm, target);\n  }\n\n  // 4. Return false.\n  if (!argument.isSimpleObject()) argument.throwIfNotConcrete();\n  return false;\n}\n\n// ECMA262 14.6.1\nexport function IsInTailPosition(realm: Realm, node: BabelNodeCallExpression): boolean {\n  // TODO #1008: implement tail calls\n  return false;\n}\n\n// ECMA262 7.2.8\nexport function IsRegExp(realm: Realm, argument: Value): boolean {\n  // 1. If Type(argument) is not Object, return false.\n  if (!argument.mightBeObject()) return false;\n  argument = argument.throwIfNotObject();\n\n  // 2. Let isRegExp be ? Get(argument, @@match).\n  let isRegExp = Get(realm, argument, realm.intrinsics.SymbolMatch);\n\n  // 3. If isRegExp is not undefined, return ToBoolean(isRegExp).\n  if (isRegExp !== undefined) return To.ToBooleanPartial(realm, isRegExp) === true;\n\n  // 4. If argument has a [[RegExpMatcher]] internal slot, return true.\n  if (argument.$RegExpMatcher) return true;\n\n  // 5. Return false.\n  return false;\n}\n\n// ECMA262 12.2.1.4 Static Semantics: IsIdentifierRef\n// ECMA262 12.3.1.4 Static Semantics: IsIdentifierRef\nexport function IsIdentifierRef(realm: Realm, node: BabelNodeLVal): boolean {\n  switch (node.type) {\n    // ECMA262 12.2.1.4 Static Semantics: IsIdentifierRef\n    case \"Identifier\":\n      return true;\n    // ECMA262 12.3.1.4 Static Semantics: IsIdentifierRef\n    case \"MemberExpression\":\n      return false;\n    default:\n      throw Error(\"Unexpected AST form : \" + node.type);\n  }\n}\n\n// 12.2.1.3 Static Semantics: IsFunctionDefinition\n// 12.2.1.3 Static Semantics: IsFunctionDefinition\n// 12.13 Binary Logical Operators\n// 12.3.1.2 Static Semantics: IsFunctionDefinition\n// 12.15.2 Static Semantics: IsFunctionDefinition\nexport function IsFunctionDefinition(realm: Realm, node: BabelNodeExpression): boolean {\n  switch (node.type) {\n    // 12.2.1.3 Static Semantics: IsFunctionDefinition\n    case \"ThisExpression\":\n    case \"Identifier\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"BooleanLiteral\":\n    case \"NullLiteral\":\n    case \"RegExpLiteral\":\n    case \"ArrayExpression\":\n    case \"ObjectExpression\":\n    case \"TemplateLiteral\":\n    case \"ConditionalExpression\":\n      return false;\n    // 12.2.1.3 Static Semantics: IsFunctionDefinition\n    case \"UpdateExpression\":\n      return false;\n    // 12.13 Binary Logical Operators\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n      return false;\n    // 12.3.1.2 Static Semantics: IsFunctionDefinition\n    case \"MemberExpression\":\n    case \"CallExpression\":\n    case \"NewExpression\":\n    case \"MetaProperty\":\n    case \"TaggedTemplateExpression\":\n      return false;\n    //12.5.1 Static Semantics: IsFunctionDefinition\n    case \"UnaryExpression\":\n      return false;\n    //12.15.2 Static Semantics: IsFunctionDefinition\n    case \"AssignmentExpression\":\n      return false;\n    //12.16.1 Static Semantics: IsFunctionDefinition\n    case \"SequenceExpression\":\n      return false;\n    case \"ArrowFunctionExpression\":\n    case \"FunctionExpression\":\n      return true;\n    // 14.5.8 Static Semantics: IsFunctionDefinition\n    case \"ClassExpression\":\n      return true;\n    // JSX Extensions: http://facebook.github.io/jsx/\n    case \"JSXElement\":\n      return false;\n    default:\n      throw Error(\"Unexpected AST form : \" + node.type);\n  }\n}\n\n// ECMA262 14.1.10\nexport function IsAnonymousFunctionDefinition(realm: Realm, node: BabelNodeExpression): boolean {\n  // 1. If IsFunctionDefinition of production is false, return false.\n  if (!IsFunctionDefinition(realm, node)) return false;\n\n  // 2. Let hasName be the result of HasName of production.\n  let hasName = HasName(realm, node);\n\n  // 3. If hasName is true, return false.\n  if (hasName === true) return false;\n\n  // 4. Return true.\n  return true;\n}\n\n// ECMA262 9.4.2\nexport function IsArrayIndex(realm: Realm, P: PropertyKeyValue): boolean {\n  let key;\n  if (typeof P === \"string\") {\n    key = P;\n  } else if (P instanceof StringValue) {\n    key = P.value;\n  } else {\n    return false;\n  }\n\n  let i = To.ToUint32(realm, new StringValue(realm, key));\n  return i !== Math.pow(2, 32) - 1 && To.ToString(realm, new NumberValue(realm, i)) === key;\n}\n\n// ECMA262 25.4.1.6\nexport function IsPromise(realm: Realm, x: Value): boolean {\n  // 1. If Type(x) is not Object, return false.\n  if (!x.mightBeObject()) return false;\n\n  // 2. If x does not have a [[PromiseState]] internal slot, return false.\n  x = x.throwIfNotConcreteObject();\n  if (!x.$PromiseState) return false;\n\n  // 3. Return true.\n  return true;\n}\n\n// ECMA262 24.1.1.2\nexport function IsDetachedBuffer(realm: Realm, arrayBuffer: ObjectValue): boolean {\n  // 1. Assert: Type(arrayBuffer) is Object and it has an [[ArrayBufferData]] internal slot.\n  invariant(arrayBuffer instanceof ObjectValue && \"$ArrayBufferData\" in arrayBuffer);\n\n  // 2. If arrayBuffer's [[ArrayBufferData]] internal slot is null, return true.\n  if (arrayBuffer.$ArrayBufferData === null) return true;\n\n  // 3. Return false.\n  return false;\n}\n\nexport function IsIntrospectionError(realm: Realm, value: Value): boolean {\n  if (!value.mightBeObject()) return false;\n  value = value.throwIfNotConcreteObject();\n  return value.$GetPrototypeOf() === realm.intrinsics.__IntrospectionErrorPrototype;\n}\n\nexport function IsStatic(classElement: BabelNodeClassMethod): boolean {\n  // $FlowFixMe need to backport static property to BabelNodeClassMethod\n  return classElement.static;\n}\n\nexport function IsStatement(node: BabelNode): boolean {\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"ReturnStatement\":\n    case \"SwitchStatement\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"VariableDeclaration\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareVariable\":\n    case \"InterfaceDeclaration\":\n    case \"TypeAlias\":\n    case \"ForAwaitStatement\":\n      return true;\n    default:\n      return false;\n  }\n}\n"]}