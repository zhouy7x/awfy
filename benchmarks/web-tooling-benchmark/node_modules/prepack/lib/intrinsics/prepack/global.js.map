{"version":3,"sources":["../../../src/intrinsics/prepack/global.js"],"names":["createAbstractFunction","realm","global","$GlobalObject","$DefineOwnProperty","value","context","args","console","log","map","arg","serialize","writable","enumerable","configurable","intrinsics","null","undefined","ObjectPrototype","additonalFunctionUid","functionValue","assignToGlobal","t","memberExpression","identifier","react","enabled","reactComponentRootUid","component","config","hasValidComponent","hasValidConfig","diagnostic","currentLocation","handleError","reactComponentTree","$Set","$Call","functionCall","evaluatePure","deriveNativeFunctionValue","unsafe","typeNameOrTemplate","f","useAbstractInterpretation","createErrorThrowCompletion","TypeError","type","template","isTypeCompatibleWith","constructor","isResidual","isUnsafeResidual","result","createTemporalFromBuildFunction","concat","nodes","callExpression","slice","makePartial","values","Set","generator","rebuildNestedProperties","getIdentifier","name","object","option","makeSimple","propertyName","invariantOptions","key","ToStringPartial","propertyIdentifier","getAsPropertyNameExpression","computed","isIdentifier","emitConcreteModel","accessedPropertyOf","objectNode","inExpressionOf","unaryExpression","binaryExpression","stringLiteral","invariantOptionString","condition","valueNode","logicalExpression","valueToNode","emitInvariant","objnode","emitFullInvariant","intrinsicName","rebuildObjectProperty","$Realm","__IntrospectionError","additionalValues"],"mappings":"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","file":"global.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  IntegralValue,\n  NativeFunctionValue,\n  ObjectValue,\n  StringValue,\n  Value,\n} from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { ValuesDomain } from \"../../domains/index.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeExpression, BabelNodeSpreadElement } from \"babel-types\";\nimport invariant from \"../../invariant.js\";\nimport { createAbstract, parseTypeNameOrTemplate } from \"./utils.js\";\nimport { valueIsKnownReactAbstraction } from \"../../react/utils.js\";\nimport { CompilerDiagnostic, FatalError } from \"../../errors.js\";\n\nexport function createAbstractFunction(realm: Realm, ...additionalValues: Array<ConcreteValue>): NativeFunctionValue {\n  return new NativeFunctionValue(realm, \"global.__abstract\", \"__abstract\", 0, (context, [typeNameOrTemplate, name]) => {\n    if (name instanceof StringValue) name = name.value;\n    if (name !== undefined && typeof name !== \"string\") {\n      throw new TypeError(\"intrinsic name argument is not a string\");\n    }\n    return createAbstract(realm, typeNameOrTemplate, name, ...additionalValues);\n  });\n}\n\nexport default function(realm: Realm): void {\n  let global = realm.$GlobalObject;\n\n  global.$DefineOwnProperty(\"dump\", {\n    value: new NativeFunctionValue(realm, \"global.dump\", \"dump\", 0, (context, args) => {\n      console.log(\"dump\", args.map(arg => arg.serialize()));\n      return context;\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function to model values that are obtained from the environment,\n  // and whose concrete values are not known at Prepack-time.\n  // __abstract(typeNameOrTemplate, name, options) creates a new abstract value\n  // where typeNameOrTemplate can be...\n  // - 'string', 'boolean', 'number', 'object', 'function' or\n  // - ':string', ':boolean', ':number', ':object', ':function' to indicate that\n  //   the abstract value represents a function that only returns values of the specified type, or\n  // - an actual object defining known properties.\n  // If the abstract value gets somehow embedded in the final heap,\n  // it will be referred to by the supplied name in the generated code.\n  global.$DefineOwnProperty(\"__abstract\", {\n    value: createAbstractFunction(realm),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__abstractOrNull\", {\n    value: createAbstractFunction(realm, realm.intrinsics.null),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__abstractOrNullOrUndefined\", {\n    value: createAbstractFunction(realm, realm.intrinsics.null, realm.intrinsics.undefined),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__abstractOrUndefined\", {\n    value: createAbstractFunction(realm, realm.intrinsics.undefined),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__additionalFunctions\", {\n    value: new ObjectValue(realm, realm.intrinsics.ObjectPrototype, \"__additionalFunctions\", true),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  let additonalFunctionUid = 0;\n  // Allows dynamically registering additional functions.\n  // WARNING: these functions will get exposed at global scope and called there.\n  // NB: If we interpret one of these calls in an evaluateForEffects context\n  //     that is not subsequently applied, the function will not be registered\n  //     (because prepack won't have a correct value for the FunctionValue itself)\n  global.$DefineOwnProperty(\"__registerAdditionalFunctionToPrepack\", {\n    value: new NativeFunctionValue(\n      realm,\n      \"global.__registerAdditionalFunctionToPrepack\",\n      \"__registerAdditionalFunctionToPrepack\",\n      0,\n      (context, [functionValue]) => {\n        invariant(functionValue instanceof ECMAScriptSourceFunctionValue);\n        realm.assignToGlobal(\n          t.memberExpression(\n            t.memberExpression(t.identifier(\"global\"), t.identifier(\"__additionalFunctions\")),\n            t.identifier(\"\" + additonalFunctionUid++)\n          ),\n          functionValue\n        );\n        return realm.intrinsics.undefined;\n      }\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  if (realm.react.enabled) {\n    global.$DefineOwnProperty(\"__reactComponentTrees\", {\n      value: new ObjectValue(realm, realm.intrinsics.ObjectPrototype, \"__reactComponentTrees\", true),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n    let reactComponentRootUid = 0;\n    global.$DefineOwnProperty(\"__optimizeReactComponentTree\", {\n      value: new NativeFunctionValue(\n        realm,\n        \"global.__optimizeReactComponentTree\",\n        \"__optimizeReactComponentTree\",\n        0,\n        (context, [component, config]) => {\n          let hasValidComponent =\n            component instanceof ECMAScriptSourceFunctionValue || valueIsKnownReactAbstraction(realm, component);\n          let hasValidConfig =\n            config instanceof ObjectValue || config === realm.intrinsics.undefined || config === undefined;\n\n          if (!hasValidComponent || !hasValidConfig) {\n            let diagnostic = new CompilerDiagnostic(\n              \"__optimizeReactComponentTree(rootComponent, config) has been called with invalid arguments\",\n              realm.currentLocation,\n              \"PP0024\",\n              \"FatalError\"\n            );\n            realm.handleError(diagnostic);\n            if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n          }\n          let reactComponentTree = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n          reactComponentTree.$Set(\"rootComponent\", component, reactComponentTree);\n          reactComponentTree.$Set(\"config\", config || realm.intrinsics.undefined, reactComponentTree);\n\n          realm.assignToGlobal(\n            t.memberExpression(\n              t.memberExpression(t.identifier(\"global\"), t.identifier(\"__reactComponentTrees\")),\n              t.identifier(\"\" + reactComponentRootUid++)\n            ),\n            reactComponentTree\n          );\n          return component;\n        }\n      ),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n  }\n\n  global.$DefineOwnProperty(\"__evaluatePureFunction\", {\n    value: new NativeFunctionValue(\n      realm,\n      \"global.__evaluatePureFunction\",\n      \"__evaluatePureFunction\",\n      0,\n      (context, [functionValue]) => {\n        invariant(functionValue instanceof ECMAScriptSourceFunctionValue);\n        invariant(typeof functionValue.$Call === \"function\");\n        let functionCall: Function = functionValue.$Call;\n        return realm.evaluatePure(() => functionCall(realm.intrinsics.undefined, []));\n      }\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Maps from initialized moduleId to exports object\n  // NB: Changes to this shouldn't ever be serialized\n  global.$DefineOwnProperty(\"__initializedModules\", {\n    value: new ObjectValue(realm, realm.intrinsics.ObjectPrototype, \"__initializedModules\", true),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function used to instatiate a residual function\n  function deriveNativeFunctionValue(unsafe: boolean): NativeFunctionValue {\n    return new NativeFunctionValue(\n      realm,\n      \"global.__residual\",\n      \"__residual\",\n      2,\n      (context, [typeNameOrTemplate, f, ...args]) => {\n        if (!realm.useAbstractInterpretation) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"realm is not partial\");\n        }\n\n        let { type, template } = parseTypeNameOrTemplate(realm, typeNameOrTemplate);\n\n        if (!Value.isTypeCompatibleWith(f.constructor, FunctionValue)) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"cannot determine residual function\");\n        }\n        invariant(f instanceof FunctionValue);\n        f.isResidual = true;\n        if (unsafe) f.isUnsafeResidual = true;\n        let result = AbstractValue.createTemporalFromBuildFunction(realm, type, [f].concat(args), nodes =>\n          t.callExpression(nodes[0], ((nodes.slice(1): any): Array<BabelNodeExpression | BabelNodeSpreadElement>))\n        );\n        if (template) {\n          invariant(\n            result instanceof AbstractValue,\n            \"the nested properties should only be rebuilt for an abstract value\"\n          );\n          template.makePartial();\n          result.values = new ValuesDomain(new Set([template]));\n          invariant(realm.generator);\n          realm.rebuildNestedProperties(result, result.getIdentifier().name);\n        }\n        return result;\n      }\n    );\n  }\n\n  // Helper function that identifies a computation that must remain part of the residual program and cannot be partially evaluated,\n  // e.g. because it contains a loop over abstract values.\n  // __residual(typeNameOrTemplate, function, arg0, arg1, ...) creates a new abstract value\n  // that is computed by invoking function(arg0, arg1, ...) in the residual program and\n  // where typeNameOrTemplate either either 'string', 'boolean', 'number', 'object', or an actual object defining known properties.\n  // The function must not have side effects, and it must not access any state (besides the supplied arguments).\n  global.$DefineOwnProperty(\"__residual\", {\n    value: deriveNativeFunctionValue(false),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function that identifies a variant of the residual function that has implicit dependencies. This version of residual will infer the dependencies\n  // and rewrite the function body to do the same thing as the original residual function.\n  global.$DefineOwnProperty(\"__residual_unsafe\", {\n    value: deriveNativeFunctionValue(true),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // TODO #1023: Remove this property. It's just here as some existing internal test cases assume that the __annotate property is exists and is readable.\n  global.$DefineOwnProperty(\"__annotate\", {\n    value: realm.intrinsics.undefined,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Internal helper function for tests.\n  // __isAbstract(value) checks if a given value is abstract.\n  global.$DefineOwnProperty(\"__isAbstract\", {\n    value: new NativeFunctionValue(realm, \"global.__isAbstract\", \"__isAbstract\", 1, (context, [value]) => {\n      return new BooleanValue(realm, value instanceof AbstractValue);\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // __makePartial(object) marks an (abstract) object as partial.\n  global.$DefineOwnProperty(\"__makePartial\", {\n    value: new NativeFunctionValue(realm, \"global.__makePartial\", \"__makePartial\", 1, (context, [object]) => {\n      if (object instanceof AbstractObjectValue || object instanceof ObjectValue) {\n        object.makePartial();\n        return object;\n      }\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an (abstract) object\");\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // __makeSimple(object) marks an (abstract) object as one that has no getters or setters.\n  global.$DefineOwnProperty(\"__makeSimple\", {\n    value: new NativeFunctionValue(realm, \"global.__makeSimple\", \"__makeSimple\", 1, (context, [object, option]) => {\n      if (object instanceof AbstractObjectValue || object instanceof ObjectValue) {\n        object.makeSimple(option);\n        return object;\n      }\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an (abstract) object\");\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function that emits a check whether a given object property has a particular value.\n  global.$DefineOwnProperty(\"__assumeDataProperty\", {\n    value: new NativeFunctionValue(\n      realm,\n      \"global.__assumeDataProperty\",\n      \"__assumeDataProperty\",\n      3,\n      (context, [object, propertyName, value, invariantOptions]) => {\n        if (!realm.useAbstractInterpretation) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"realm is not partial\");\n        }\n\n        if (object instanceof AbstractObjectValue || object instanceof ObjectValue) {\n          let generator = realm.generator;\n          invariant(generator);\n\n          let key = To.ToStringPartial(realm, propertyName);\n          let propertyIdentifier = generator.getAsPropertyNameExpression(key);\n          let computed = !t.isIdentifier(propertyIdentifier);\n\n          if (realm.emitConcreteModel) {\n            generator.emitConcreteModel(key, value);\n          } else {\n            let accessedPropertyOf = objectNode => t.memberExpression(objectNode, propertyIdentifier, computed);\n            let inExpressionOf = objectNode =>\n              t.unaryExpression(\"!\", t.binaryExpression(\"in\", t.stringLiteral(key), objectNode), true);\n\n            let invariantOptionString = invariantOptions\n              ? To.ToStringPartial(realm, invariantOptions)\n              : \"FULL_INVARIANT\";\n            switch (invariantOptionString) {\n              // checks (!property in object || object.property === undefined)\n              case \"VALUE_DEFINED_INVARIANT\":\n                let condition = ([objectNode, valueNode]) =>\n                  t.logicalExpression(\n                    \"||\",\n                    inExpressionOf(objectNode),\n                    t.binaryExpression(\"===\", accessedPropertyOf(objectNode), t.valueToNode(undefined))\n                  );\n                generator.emitInvariant([object, value, object], condition, objnode => accessedPropertyOf(objnode));\n                break;\n              case \"SKIP_INVARIANT\":\n                break;\n              case \"FULL_INVARIANT\":\n                generator.emitFullInvariant((object: any), key, value);\n                break;\n              default:\n                invariant(false, \"Invalid invariantOption \" + invariantOptionString);\n            }\n          }\n          realm.generator = undefined; // don't emit code during the following $Set call\n          // casting to due to Flow workaround above\n          (object: any).$Set(key, value, object);\n          realm.generator = generator;\n          if (object.intrinsicName) realm.rebuildObjectProperty(object, key, value, object.intrinsicName);\n          return context.$Realm.intrinsics.undefined;\n        }\n\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an (abstract) object\");\n      }\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__IntrospectionError\", {\n    value: realm.intrinsics.__IntrospectionError,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__isIntegral\", {\n    value: new NativeFunctionValue(realm, \"global.__isIntegral\", \"__isIntegral\", 1, (context, [value]) => {\n      return new BooleanValue(realm, value instanceof IntegralValue);\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n}\n"]}