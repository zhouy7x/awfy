{"version":3,"sources":["../../../src/intrinsics/ecma262/Array.js"],"names":["realm","func","context","items","argCount","NewTarget","numberOfArgs","newTarget","undefined","proto","ArrayCreate","array","len","intLen","mightBeNumber","defineStatus","CreateDataProperty","ToUint32","throwIfNotConcreteNumber","value","createErrorThrowCompletion","intrinsics","RangeError","Set","k","Pk","ToString","itemK","length","throwIfNotConcrete","defineNativeMethod","arg","isCompatibleWith","MOBILE_JSC_VERSION","C","A","kValue","CreateDataPropertyOrThrow","mapfn","thisArg","mapping","T","mightBeUndefined","TypeError","usingIterator","SymbolIterator","iterator","Math","pow","error","next","nextValue","mappedValue","mappedValueCompletion","completion","arrayLike","ToObject","ToLength","defineNativeGetter","SymbolSpecies"],"mappings":"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","file":"Array.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  NumberValue,\n  UndefinedValue,\n  StringValue,\n  ObjectValue,\n} from \"../../values/index.js\";\nimport {\n  Construct,\n  Call,\n  Get,\n  GetPrototypeFromConstructor,\n  GetMethod,\n  IsArray,\n  IsConstructor,\n  IsCallable,\n} from \"../../methods/index.js\";\nimport { GetIterator, IteratorClose, IteratorStep, IteratorValue } from \"../../methods/iterator.js\";\nimport { Create, Properties, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, \"Array\", \"Array\", 1, (context, [...items], argCount, NewTarget) => {\n    if (argCount === 0) {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 0.\n      invariant(numberOfArgs === 0, \"numberOfArgs = 0\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Return ArrayCreate(0, proto).\n      return Create.ArrayCreate(realm, 0, proto);\n    } else if (argCount === 1) {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 1.\n      invariant(numberOfArgs === 1, \"numberOfArgs = 1\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Let array be ArrayCreate(0, proto).\n      let array = Create.ArrayCreate(realm, 0, proto);\n\n      // 6. If Type(len) is not Number, then\n      let len = items[0];\n      invariant(len !== undefined);\n      let intLen;\n      if (!len.mightBeNumber()) {\n        // a. Let defineStatus be CreateDataProperty(array, \"0\", len).\n        let defineStatus = Create.CreateDataProperty(realm, array, \"0\", len);\n\n        // b. Assert: defineStatus is true.\n        invariant(defineStatus, \"defineStatus is true\");\n\n        // c. Let intLen be 1.\n        intLen = 1;\n      } else {\n        // 7. Else,\n\n        // a. Let intLen be ToUint32(len).\n        intLen = To.ToUint32(realm, len.throwIfNotConcreteNumber());\n\n        // b If intLen ≠ len, throw a RangeError exception.\n        if (intLen !== len.value) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"intLen ≠ len\");\n        }\n      }\n\n      // 8. Perform ! Set(array, \"length\", intLen, true).\n      Properties.Set(realm, array, \"length\", new NumberValue(realm, intLen), true);\n\n      // 9. Return array.\n      return array;\n    } else {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs ≥ 2.\n      invariant(numberOfArgs >= 2, \"numberOfArgs >= 2\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Let array be ? ArrayCreate(numberOfArgs, proto).\n      let array = Create.ArrayCreate(realm, numberOfArgs, proto);\n\n      // 6. Let k be 0.\n      let k = 0;\n\n      // 7. Let items be a zero-origined List containing the argument items in order.\n      items;\n\n      // 8. Repeat, while k < numberOfArgs\n      while (k < numberOfArgs) {\n        // a. Let Pk be ! ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // b. Let itemK be items[k].\n        let itemK = items[k];\n        invariant(itemK !== undefined);\n\n        // c. Let defineStatus be CreateDataProperty(array, Pk, itemK).\n        let defineStatus = Create.CreateDataProperty(realm, array, Pk, itemK);\n\n        // d. Assert: defineStatus is true.\n        invariant(defineStatus, \"defineStatus is true\");\n\n        // e. Increase k by 1.\n        k += 1;\n      }\n\n      // 9. Assert: the value of array's length property is numberOfArgs.\n      let length = Get(realm, array, \"length\").throwIfNotConcrete();\n      invariant(length instanceof NumberValue);\n      invariant(length.value === numberOfArgs, \"the value of array's length property is numberOfArgs\");\n\n      // 10. Return array.\n      return array;\n    }\n  });\n\n  // ECMA262 22.1.2.2\n  func.defineNativeMethod(\"isArray\", 1, (context, [arg]) => {\n    // 1. Return ? IsArray(arg).\n    return new BooleanValue(realm, IsArray(realm, arg));\n  });\n\n  // ECMA262 22.1.2.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"of\", 0, (context, [...items], argCount) => {\n      // 1. Let len be the actual number of arguments passed to this function.\n      let len = argCount;\n\n      // 2. Let items be the List of arguments passed to this function.\n      items;\n\n      // 3. Let C be the this value.\n      let C = context;\n\n      // 4. If IsConstructor(C) is true, then\n      let A;\n      if (IsConstructor(realm, C)) {\n        invariant(C instanceof ObjectValue);\n        // a. Let A be ? Construct(C, « len »).\n        A = Construct(realm, C, [new NumberValue(realm, len)]);\n      } else {\n        // 5. Else,\n        // a. Let A be ? ArrayCreate(len).\n        A = Create.ArrayCreate(realm, len);\n      }\n\n      // 6. Let k be 0.\n      let k = 0;\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let kValue be items[k].\n        let kValue = items[k];\n\n        // b. Let Pk be ! To.ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // c. Perform ? CreateDataPropertyOrThrow(A, Pk, kValue).\n        Create.CreateDataPropertyOrThrow(realm, A, Pk, kValue);\n\n        // d. Increase k by 1.\n        k += 1;\n      }\n\n      // 8. Perform ? Set(A, \"length\", len, true).\n      Properties.Set(realm, A, \"length\", new NumberValue(realm, len), true);\n\n      // 9. Return A.\n      return A;\n    });\n\n  // ECMA262 22.1.2.1\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"from\", 1, (context, [items, mapfn, thisArg], argCount) => {\n      // 1. Let C be the this value.\n      let C = context;\n\n      let mapping, T;\n      // 2. If mapfn is undefined, let mapping be false.\n      if (!mapfn || mapfn instanceof UndefinedValue) {\n        mapping = false;\n      } else if (mapfn.mightBeUndefined()) {\n        invariant(mapfn instanceof AbstractValue);\n        mapfn.throwIfNotConcrete();\n      } else {\n        // 3. Else,\n        // a. If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (IsCallable(realm, mapfn) === false) {\n          mapfn.throwIfNotConcrete();\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsCallable(mapfn) is false\");\n        }\n\n        // b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        T = thisArg !== undefined ? thisArg : realm.intrinsics.undefined;\n\n        // c. Let mapping be true.\n        mapping = true;\n      }\n\n      // 4. Let usingIterator be ? GetMethod(items, @@iterator).\n      let usingIterator = GetMethod(realm, items, realm.intrinsics.SymbolIterator);\n\n      // 5. If usingIterator is not undefined, then\n      if (!usingIterator.mightBeUndefined()) {\n        let A;\n        // a. If IsConstructor(C) is true, then\n        if (IsConstructor(realm, C)) {\n          invariant(C instanceof ObjectValue);\n          // i. Let A be ? Construct(C).\n          A = Construct(realm, C);\n        } else {\n          // b. Else,\n          // i. Let A be ArrayCreate(0).\n          A = Create.ArrayCreate(realm, 0);\n        }\n\n        // c. Let iterator be ? GetIterator(items, usingIterator).\n        let iterator = GetIterator(realm, items, usingIterator);\n\n        // d. Let k be 0.\n        let k = 0;\n\n        // e. Repeat\n        while (true) {\n          // i. If k ≥ 2^53-1, then\n          if (k >= Math.pow(2, 53) - 1) {\n            // 1. Let error be Completion{[[Type]]: throw, [[Value]]: a newly created TypeError object, [[Target]]: empty}.\n            let error = realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"k >= 2^53 - 1\");\n\n            // 2. Return ? IteratorClose(iterator, error).\n            throw IteratorClose(realm, iterator, error);\n          }\n\n          // ii. Let Pk be ! ToString(k).\n          let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n          // iii. Let next be ? IteratorStep(iterator).\n          let next = IteratorStep(realm, iterator);\n\n          // iv. If next is false, then\n          if (next === false) {\n            // 1. Perform ? Set(A, \"length\", k, true).\n            Properties.Set(realm, A, \"length\", new NumberValue(realm, k), true);\n\n            // 2. Return A.\n            return A;\n          }\n\n          // v. Let nextValue be ? IteratorValue(next).\n          let nextValue = IteratorValue(realm, next);\n\n          let mappedValue;\n          // vi. If mapping is true, then\n          if (mapping === true) {\n            // 1. Let mappedValue be Call(mapfn, T, « nextValue, k »).\n            try {\n              invariant(T !== undefined);\n              mappedValue = Call(realm, mapfn, T, [nextValue, new NumberValue(realm, k)]);\n            } catch (mappedValueCompletion) {\n              if (mappedValueCompletion instanceof AbruptCompletion) {\n                // 2. If mappedValue is an abrupt completion, return ? IteratorClose(iterator, mappedValue).\n                throw IteratorClose(realm, iterator, mappedValueCompletion);\n              } else {\n                throw mappedValueCompletion;\n              }\n            }\n            // 3. Let mappedValue be mappedValue.[[Value]].\n          } else {\n            // vii. Else, let mappedValue be nextValue.\n            mappedValue = nextValue;\n          }\n\n          // viii. Let defineStatus be CreateDataPropertyOrThrow(A, Pk, mappedValue).\n          try {\n            Create.CreateDataPropertyOrThrow(realm, A, Pk, mappedValue);\n          } catch (completion) {\n            if (completion instanceof AbruptCompletion) {\n              // ix. If defineStatus is an abrupt completion, return ? IteratorClose(iterator, defineStatus).\n              throw IteratorClose(realm, iterator, completion);\n            } else throw completion;\n          }\n\n          // x. Increase k by 1.\n          k = k + 1;\n        }\n      } else {\n        usingIterator.throwIfNotConcrete();\n      }\n\n      // 6. NOTE: items is not an Iterable so assume it is an array-like object.\n      items = items.throwIfNotConcrete();\n      invariant(items instanceof ObjectValue);\n\n      // 7. Let arrayLike be ! ToObject(items).\n      let arrayLike = To.ToObject(realm, items);\n\n      // 8. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n      let len = To.ToLength(realm, Get(realm, arrayLike, \"length\"));\n\n      let A;\n      // 9. If IsConstructor(C) is true, then\n      if (IsConstructor(realm, C)) {\n        invariant(C instanceof ObjectValue);\n        // a. Let A be ? Construct(C, « len »).\n        A = Construct(realm, C, [new NumberValue(realm, len)]);\n      } else {\n        // 10. Else,\n        // a. Let A be ? ArrayCreate(len).\n        A = Create.ArrayCreate(realm, len);\n      }\n\n      // 11. Let k be 0.\n      let k = 0;\n\n      // 12. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        let Pk = To.ToString(realm, new NumberValue(realm, k));\n\n        // b. Let kValue be ? Get(arrayLike, Pk).\n        let kValue = Get(realm, arrayLike, Pk);\n\n        let mappedValue;\n        // c. If mapping is true, then\n        if (mapping === true) {\n          // i. Let mappedValue be ? Call(mapfn, T, « kValue, k »).\n          invariant(T !== undefined);\n          mappedValue = Call(realm, mapfn, T, [kValue, new NumberValue(realm, k)]);\n        } else {\n          // d. Else, let mappedValue be kValue.\n          mappedValue = kValue;\n        }\n\n        // e. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n        Create.CreateDataPropertyOrThrow(realm, A, new StringValue(realm, Pk), mappedValue);\n\n        // f. Increase k by 1.\n        k = k + 1;\n      }\n\n      // 13. Perform ? Set(A, \"length\", len, true).\n      Properties.Set(realm, A, \"length\", new NumberValue(realm, len), true);\n\n      // 14. Return A.\n      return A;\n    });\n\n  // ECMA262 22.1.2.5\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}