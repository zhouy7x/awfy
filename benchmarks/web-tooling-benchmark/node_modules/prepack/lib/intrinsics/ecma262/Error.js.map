{"version":3,"sources":["../../../src/intrinsics/ecma262/Error.js"],"names":["realm","build","describeLocation","callerFn","env","loc","locString","displayName","name","$Get","mightBeUndefined","ToStringPartial","throwIfNotConcrete","$NewTarget","start","line","column","source","undefined","buildStack","context","$ErrorData","stack","contextStack","intrinsics","lines","header","msg","executionContext","reverse","caller","function","lexicalEnvironment","push","join","inheritError","func","message","argLength","NewTarget","newTarget","O","OrdinaryCreateFromConstructor","slice","locationData","stackDesc","value","enumerable","configurable","writable","DefinePropertyOrThrow","getType","ToStringValue","msgDesc","$Prototype","Error"],"mappings":"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","file":"Error.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport type { LexicalEnvironment } from \"../../environment.js\";\nimport { ObjectValue, FunctionValue, NativeFunctionValue, StringValue } from \"../../values/index.js\";\nimport { Get } from \"../../methods/index.js\";\nimport { Create, Properties, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  return build(\"Error\", realm, false);\n}\n\nexport function describeLocation(\n  realm: Realm,\n  callerFn: ?FunctionValue,\n  env: ?LexicalEnvironment,\n  loc: ?BabelNodeSourceLocation\n): void | string {\n  let locString = \"\";\n  let displayName = \"\";\n\n  if (callerFn) {\n    if (callerFn instanceof NativeFunctionValue) {\n      locString = \"native\";\n    }\n\n    let name = callerFn.$Get(\"name\", callerFn);\n    if (!name.mightBeUndefined()) displayName = To.ToStringPartial(realm, name);\n    else name.throwIfNotConcrete();\n\n    if (env && env.$NewTarget) displayName = `new ${displayName}`;\n  }\n\n  if (!locString) {\n    if (loc) {\n      locString = `${loc.start.line}:${loc.start.column + 1}`;\n      if (loc.source) locString = `${loc.source}:${locString}`;\n    } else {\n      locString = (loc ? loc.source : undefined) || \"unknown\";\n      if (!displayName) return undefined;\n    }\n  }\n\n  if (displayName) {\n    return `at ${displayName} (${locString})`;\n  } else {\n    return `at ${locString}`;\n  }\n}\n\nfunction buildStack(realm: Realm, context: ObjectValue) {\n  invariant(context.$ErrorData);\n\n  let stack = context.$ErrorData.contextStack;\n  if (!stack) return realm.intrinsics.undefined;\n\n  let lines = [];\n  let header = \"\";\n\n  header += To.ToStringPartial(realm, Get(realm, context, \"name\"));\n\n  let msg = Get(realm, context, \"message\");\n  if (!msg.mightBeUndefined()) {\n    msg = To.ToStringPartial(realm, msg);\n    if (msg) header += `: ${msg}`;\n  } else {\n    msg.throwIfNotConcrete();\n  }\n\n  for (let executionContext of stack.reverse()) {\n    let caller = executionContext.caller;\n    let locString = describeLocation(\n      realm,\n      caller ? caller.function : undefined,\n      caller ? caller.lexicalEnvironment : undefined,\n      executionContext.loc\n    );\n    if (locString !== undefined) lines.push(locString);\n  }\n\n  return new StringValue(realm, `${header}\\n    ${lines.join(\"\\n    \")}`);\n}\n\nexport function build(name: string, realm: Realm, inheritError?: boolean = true): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, name, name, 1, (context, [message], argLength, NewTarget) => {\n    // 1. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n    let newTarget = NewTarget || func;\n\n    // 2. Let O be ? OrdinaryCreateFromConstructor(newTarget, \"%ErrorPrototype%\", « [[ErrorData]] »).\n    let O = Create.OrdinaryCreateFromConstructor(realm, newTarget, `${name}Prototype`, { $ErrorData: undefined });\n    O.$ErrorData = {\n      contextStack: realm.contextStack.slice(1),\n      locationData: undefined,\n    };\n\n    // Build a text description of the stack.\n    let stackDesc = {\n      value: buildStack(realm, O),\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    };\n    Properties.DefinePropertyOrThrow(realm, O, \"stack\", stackDesc);\n\n    // 3. If message is not undefined, then\n    if (!message.mightBeUndefined()) {\n      // a. Let msg be ? ToString(message).\n      let msg = message.getType() === StringValue ? message : To.ToStringValue(realm, message);\n\n      // b. Let msgDesc be the PropertyDescriptor{[[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\n      let msgDesc = {\n        value: msg,\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      };\n\n      // c. Perform ! DefinePropertyOrThrow(O, \"message\", msgDesc).\n      Properties.DefinePropertyOrThrow(realm, O, \"message\", msgDesc);\n    } else {\n      message.throwIfNotConcrete();\n    }\n\n    // 4. Return O.\n    return O;\n  });\n\n  if (inheritError) {\n    func.$Prototype = realm.intrinsics.Error;\n  }\n\n  return func;\n}\n"]}