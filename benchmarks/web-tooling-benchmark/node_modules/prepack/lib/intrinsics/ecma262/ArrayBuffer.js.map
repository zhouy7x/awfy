{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayBuffer.js"],"names":["realm","func","context","length","argCount","NewTarget","createErrorThrowCompletion","intrinsics","TypeError","byteLength","ToIndexPartial","defineNativeMethod","arg","mightBeObject","false","throwIfNotConcreteObject","true","defineNativeGetter","SymbolSpecies"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,OAAO,+BACTD,KADS,EAET,aAFS,EAGT,aAHS,EAIT,CAJS,EAKT,CAACE,OAAD,EAAU,CAACC,MAAD,CAAV,EAAoBC,QAApB,EAA8BC,SAA9B,KAA4C;AAC1C;AACA,QAAI,CAACA,SAAL,EAAgB;AACd,YAAML,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,aAAa,eAAGC,cAAH,CAAkBV,KAAlB,EAAyBG,MAAzB,CAAjB;;AAEA;AACA,WAAO,sCAAoBH,KAApB,EAA2BK,SAA3B,EAAsCI,UAAtC,CAAP;AACD,GAhBQ,CAAX;;AAmBA;AACAR,OAAKU,kBAAL,CAAwB,QAAxB,EAAkC,CAAlC,EAAqC,CAACT,OAAD,EAAU,CAACU,GAAD,CAAV,KAAoB;AACvD;AACA,QAAI,CAACA,IAAIC,aAAJ,EAAL,EAA0B,OAAOb,MAAMO,UAAN,CAAiBO,KAAxB;;AAE1B;AACAF,UAAMA,IAAIG,wBAAJ,EAAN;AACA,QAAI,wBAAwBH,GAA5B,EAAiC,OAAOZ,MAAMO,UAAN,CAAiBS,IAAxB;;AAEjC;AACA,WAAOhB,MAAMO,UAAN,CAAiBO,KAAxB;AACD,GAVD;;AAYA;AACAb,OAAKgB,kBAAL,CAAwBjB,MAAMO,UAAN,CAAiBW,aAAzC,EAAwDhB,WAAW;AACjE;AACA,WAAOA,OAAP;AACD,GAHD;;AAKA,SAAOD,IAAP;AACD,C;;AA7CD;;AACA;;AACA","file":"ArrayBuffer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { AllocateArrayBuffer } from \"../../methods/arraybuffer.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 24.1.2.1\n  let func = new NativeFunctionValue(\n    realm,\n    \"ArrayBuffer\",\n    \"ArrayBuffer\",\n    1,\n    (context, [length], argCount, NewTarget) => {\n      // 1. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 2. Let byteLength be ToIndex(numberLength).\n      let byteLength = To.ToIndexPartial(realm, length);\n\n      // 3. Return ? AllocateArrayBuffer(NewTarget, byteLength).\n      return AllocateArrayBuffer(realm, NewTarget, byteLength);\n    }\n  );\n\n  // ECMA262 24.1.3.1\n  func.defineNativeMethod(\"isView\", 1, (context, [arg]) => {\n    // 1. If Type(arg) is not Object, return false.\n    if (!arg.mightBeObject()) return realm.intrinsics.false;\n\n    // 2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n    arg = arg.throwIfNotConcreteObject();\n    if (\"$ViewedArrayBuffer\" in arg) return realm.intrinsics.true;\n\n    // 3. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 24.1.3.3\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}