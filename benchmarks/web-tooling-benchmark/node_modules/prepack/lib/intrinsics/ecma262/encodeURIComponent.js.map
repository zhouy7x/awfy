{"version":3,"sources":["../../../src/intrinsics/ecma262/encodeURIComponent.js"],"names":["realm","name","context","uriComponent","argCount","NewTarget","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcrete","componentString","ToString","encodeURIComponent","e","URIError","message"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,OAAO,oBAAX;AACA,SAAO,+BAAwBD,KAAxB,EAA+BC,IAA/B,EAAqCA,IAArC,EAA2C,CAA3C,EAA8C,CAACC,OAAD,EAAU,CAACC,YAAD,CAAV,EAA0BC,QAA1B,EAAoCC,SAApC,KAAkD;AACrG,QAAIA,SAAJ,EAAe,MAAML,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA8D,GAAEP,IAAK,uBAArE,CAAN;;AAEfE,mBAAeA,aAAaM,kBAAb,EAAf;;AAEA;AACA,QAAIC,kBAAkB,eAAGC,QAAH,CAAYX,KAAZ,EAAmBG,YAAnB,CAAtB;;AAEA;AACA;AACA,QAAI;AACF,aAAO,uBAAgBH,KAAhB,EAAuBY,mBAAmBF,eAAnB,CAAvB,CAAP;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,YAAMb,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBO,QAAlD,EAA4DD,EAAEE,OAA9D,CAAN;AACD;AACF,GAfM,CAAP;AAgBD,C;;AAvBD;;AACA","file":"encodeURIComponent.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { StringValue } from \"../../values/index.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.6.5\n  let name = \"encodeURIComponent\";\n  return new NativeFunctionValue(realm, name, name, 1, (context, [uriComponent], argCount, NewTarget) => {\n    if (NewTarget) throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, `${name} is not a constructor`);\n\n    uriComponent = uriComponent.throwIfNotConcrete();\n\n    // 1. Let componentString be ? ToString(uri).\n    let componentString = To.ToString(realm, uriComponent);\n\n    // 2. Let unescapedURIComponentSet be a String containing one instance of each code unit valid in uriUnescaped.\n    // 3. Return ? Encode(componentString, unescapedURIComponentSet).\n    try {\n      return new StringValue(realm, encodeURIComponent(componentString));\n    } catch (e) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.URIError, e.message);\n    }\n  });\n}\n"]}