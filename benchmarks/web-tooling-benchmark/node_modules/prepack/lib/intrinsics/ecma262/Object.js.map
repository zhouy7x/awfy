{"version":3,"sources":["../../../src/intrinsics/ecma262/Object.js"],"names":["realm","func","context","value","argCount","NewTarget","OrdinaryCreateFromConstructor","ObjectCreate","intrinsics","ObjectPrototype","ToObjectPartial","ObjectAssign","defineNativeMethod","target","sources","to","to_must_be_partial","length","nextSource","keys","frm","frm_was_partial","isPartialObject","isSimpleObject","reportIntrospectionError","makeNotPartial","createTemporalFromBuildFunction","methodNode","targetNode","sourceNode","t","callExpression","makeFinal","$OwnPropertyKeys","makePartial","to_keys","nextKey","desc","$GetOwnProperty","enumerable","ThrowIfMightHaveBeenDeleted","propValue","Set","makeSimple","O","Properties","createErrorThrowCompletion","TypeError","obj","throwIfNotConcrete","mightBeUndefined","ObjectDefineProperties","P","Attributes","mightBeObject","throwIfNotObject","key","ToPropertyKey","ToPropertyDescriptor","DefinePropertyOrThrow","throwIfNotConcreteObject","status","FromPropertyDescriptor","ToObject","ownKeys","descriptors","undefined","descriptor","CreateDataProperty","$GetPrototypeOf","value1","value2","false","true","nameList","CreateArrayFromList","isCompatibleWith","MOBILE_JSC_VERSION","$PreventExtensions","proto","$SetPrototypeOf"],"mappings":"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","file":"Object.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FatalError } from \"../../errors.js\";\nimport { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport {\n  AbstractValue,\n  AbstractObjectValue,\n  ObjectValue,\n  NullValue,\n  UndefinedValue,\n  StringValue,\n  BooleanValue,\n  SymbolValue,\n} from \"../../values/index.js\";\nimport {\n  IsExtensible,\n  EnumerableOwnProperties,\n  GetOwnPropertyKeys,\n  Get,\n  RequireObjectCoercible,\n  SameValuePartial,\n  TestIntegrityLevel,\n  SetIntegrityLevel,\n  HasSomeCompatibleType,\n} from \"../../methods/index.js\";\nimport { Create, Properties as Props, To } from \"../../singletons.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport * as t from \"babel-types\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 19.1.1.1\n  let func = new NativeFunctionValue(realm, \"Object\", \"Object\", 1, (context, [value], argCount, NewTarget) => {\n    // 1. If NewTarget is neither undefined nor the active function, then\n    if (NewTarget && NewTarget !== func) {\n      // a. Return ? OrdinaryCreateFromConstructor(NewTarget, \"%ObjectPrototype%\").\n      return Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"ObjectPrototype\");\n    }\n\n    // 2. If value is null, undefined or not supplied, return ObjectCreate(%ObjectPrototype%).\n    if (HasSomeCompatibleType(value, NullValue, UndefinedValue)) {\n      return Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n    }\n\n    // 3. Return ToObject(value).\n    return To.ToObjectPartial(realm, value);\n  });\n\n  // ECMA262 19.1.2.1\n  let ObjectAssign = func.defineNativeMethod(\"assign\", 2, (context, [target, ...sources]) => {\n    // 1. Let to be ? ToObject(target).\n    let to = To.ToObjectPartial(realm, target);\n    let to_must_be_partial = false;\n\n    // 2. If only one argument was passed, return to.\n    if (!sources.length) return to;\n\n    // 3. Let sources be the List of argument values starting with the second argument.\n    sources;\n\n    // 4. For each element nextSource of sources, in ascending index order,\n    for (let nextSource of sources) {\n      let keys, frm;\n\n      // a. If nextSource is undefined or null, let keys be a new empty List.\n      if (HasSomeCompatibleType(nextSource, NullValue, UndefinedValue)) {\n        continue;\n      } else {\n        // b. Else,\n        // i. Let from be ToObject(nextSource).\n        frm = To.ToObjectPartial(realm, nextSource);\n\n        let frm_was_partial = frm.isPartialObject();\n        if (frm_was_partial) {\n          if (!frm.isSimpleObject()) {\n            // If this is not a simple object, it may have getters on it that can\n            // mutate any state as a result. We don't yet support this.\n            AbstractValue.reportIntrospectionError(nextSource);\n            throw new FatalError();\n          }\n\n          to_must_be_partial = true;\n          // Make this temporally not partial\n          // so that we can call frm.$OwnPropertyKeys below.\n          frm.makeNotPartial();\n        }\n\n        if (to_must_be_partial) {\n          // Generate a residual Object.assign call that copies the\n          // partial properties that we don't know about.\n          AbstractValue.createTemporalFromBuildFunction(\n            realm,\n            ObjectValue,\n            [ObjectAssign, target, nextSource],\n            ([methodNode, targetNode, sourceNode]: Array<BabelNodeExpression>) => {\n              return t.callExpression(methodNode, [targetNode, sourceNode]);\n            }\n          );\n\n          if (frm instanceof ObjectValue || frm instanceof AbstractObjectValue) {\n            // At this point any further mutations to the source would be unsafe\n            // because the Object.assign() call operates on the snapshot of the\n            // object at this point in time. We can't mutate that snapshot.\n            frm.makeFinal();\n          }\n        }\n\n        // ii. Let keys be ? from.[[OwnPropertyKeys]]().\n        keys = frm.$OwnPropertyKeys();\n        if (frm_was_partial) frm.makePartial();\n      }\n\n      if (to_must_be_partial) {\n        // Only OK if to is an empty object because nextSource might have\n        // properties at runtime that will overwrite current properties in to.\n        // For now, just throw if this happens.\n        let to_keys = to.$OwnPropertyKeys();\n        if (to_keys.length !== 0) {\n          AbstractValue.reportIntrospectionError(nextSource);\n          throw new FatalError();\n        }\n        // If `to` is going to be a partial, we are emitting Object.assign()\n        // calls for each argument. At this point we should not be trying to\n        // assign keys below because that will change the order of the keys on\n        // the resulting object (i.e. the keys assigned later would already be\n        // on the serialized version from the heap).\n        continue;\n      }\n\n      invariant(frm, \"from required\");\n      invariant(keys, \"keys required\");\n\n      // c. Repeat for each element nextKey of keys in List order,\n      for (let nextKey of keys) {\n        // i. Let desc be ? from.[[GetOwnProperty]](nextKey).\n        let desc = frm.$GetOwnProperty(nextKey);\n\n        // ii. If desc is not undefined and desc.[[Enumerable]] is true, then\n        if (desc && desc.enumerable) {\n          Props.ThrowIfMightHaveBeenDeleted(desc.value);\n\n          // 1. Let propValue be ? Get(from, nextKey).\n          let propValue = Get(realm, frm, nextKey);\n\n          // 2. Perform ? Set(to, nextKey, propValue, true).\n          Props.Set(realm, to, nextKey, propValue, true);\n        }\n      }\n    }\n\n    // 5. Return to.\n    if (to_must_be_partial) {\n      // We allow partial simple sources (and make `to` partial)\n      // only if `to` has no keys. Therefore, it must also be simple.\n      invariant(to.isSimpleObject());\n\n      to.makePartial();\n\n      // Partial objects (and `to` is now partial) can't be calculated to be\n      // simple because we can't iterate over all of their properties.\n      // We already established above that `to` is simple,\n      // so set the `_isSimple` flag.\n      to.makeSimple();\n\n      if (to instanceof ObjectValue || to instanceof AbstractObjectValue) {\n        // At this point any further mutations to the target would be unsafe\n        // because the Object.assign() call operates on the snapshot of the\n        // object at this point in time. We can't mutate that snapshot.\n        to.makeFinal();\n      }\n    }\n    return to;\n  });\n\n  // ECMA262 19.1.2.2\n  func.defineNativeMethod(\"create\", 2, (context, [O, Properties]) => {\n    // 1. If Type(O) is neither Object nor Null, throw a TypeError exception.\n    if (!HasSomeCompatibleType(O, ObjectValue, NullValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let obj be ObjectCreate(O).\n    let obj = Create.ObjectCreate(realm, ((O.throwIfNotConcrete(): any): ObjectValue | NullValue));\n\n    // 3. If Properties is not undefined, then\n    if (!Properties.mightBeUndefined()) {\n      // a. Return ? ObjectDefineProperties(obj, Properties).\n      return Props.ObjectDefineProperties(realm, obj, Properties);\n    }\n    Properties.throwIfNotConcrete();\n\n    // 4. Return obj.\n    return obj;\n  });\n\n  // ECMA262 19.1.2.3\n  func.defineNativeMethod(\"defineProperties\", 2, (context, [O, Properties]) => {\n    // 1. Return ? ObjectDefineProperties(O, Properties).\n    return Props.ObjectDefineProperties(realm, O, Properties);\n  });\n\n  // ECMA262 19.1.2.4\n  func.defineNativeMethod(\"defineProperty\", 3, (context, [O, P, Attributes]) => {\n    // 1. If Type(O) is not Object, throw a TypeError exception.\n    if (!O.mightBeObject()) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    O = O.throwIfNotObject();\n\n    // 2. Let key be ? ToPropertyKey(P).\n    let key = To.ToPropertyKey(realm, P.throwIfNotConcrete());\n\n    // 3. Let desc be ? ToPropertyDescriptor(Attributes).\n    let desc = To.ToPropertyDescriptor(realm, Attributes);\n\n    // 4. Perform ? DefinePropertyOrThrow(O, key, desc).\n    Props.DefinePropertyOrThrow(realm, (O: any), key, desc);\n\n    // 4. Return O.\n    return O;\n  });\n\n  // ECMA262 19.1.2.5\n  func.defineNativeMethod(\"freeze\", 1, (context, [O]) => {\n    // 1. If Type(O) is not Object, return O.\n    if (!O.mightBeObject()) return O;\n\n    // 2. Let status be ? SetIntegrityLevel(O, \"frozen\").\n    O = O.throwIfNotConcreteObject();\n    let status = SetIntegrityLevel(realm, O, \"frozen\");\n\n    // 3. If status is false, throw a TypeError exception.\n    if (status === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Return O.\n    return O;\n  });\n\n  // ECMA262 19.1.2.6\n  func.defineNativeMethod(\"getOwnPropertyDescriptor\", 2, (context, [O, P]) => {\n    // 1. Let obj be ? ToObject(O).\n    let obj = To.ToObjectPartial(realm, O);\n\n    // 2. Let key be ? ToPropertyKey(P).\n    let key = To.ToPropertyKey(realm, P.throwIfNotConcrete());\n\n    // 3. Let desc be ? obj.[[GetOwnProperty]](key).\n    let desc = obj.$GetOwnProperty(key);\n\n    // 4. Return FromPropertyDescriptor(desc).\n    return Props.FromPropertyDescriptor(realm, desc);\n  });\n\n  // ECMA262 19.1.2.7\n  func.defineNativeMethod(\"getOwnPropertyNames\", 1, (context, [O]) => {\n    // 1. Return ? GetOwnPropertyKeys(O, String).\n    return GetOwnPropertyKeys(realm, O, StringValue);\n  });\n\n  // ECMA262 19.1.2.8\n  func.defineNativeMethod(\"getOwnPropertyDescriptors\", 1, (context, [O]) => {\n    // 1. Let obj be ? ToObject(O).\n    let obj = To.ToObject(realm, O.throwIfNotConcrete());\n\n    // 2. Let ownKeys be ? obj.[[OwnPropertyKeys]]().\n    let ownKeys = obj.$OwnPropertyKeys();\n\n    // 3. Let descriptors be ! ObjectCreate(%ObjectPrototype%).\n    let descriptors = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n    // 4. Repeat, for each element key of ownKeys in List order,\n    for (let key of ownKeys) {\n      // a. Let desc be ? obj.[[GetOwnProperty]](key).\n      let desc = obj.$GetOwnProperty(key);\n      if (desc !== undefined) Props.ThrowIfMightHaveBeenDeleted(desc.value);\n\n      // b. Let descriptor be ! FromPropertyDescriptor(desc).\n      let descriptor = Props.FromPropertyDescriptor(realm, desc);\n\n      // c. If descriptor is not undefined, perform ! CreateDataProperty(descriptors, key, descriptor).\n      if (!(descriptor instanceof UndefinedValue)) Create.CreateDataProperty(realm, descriptors, key, descriptor);\n    }\n\n    // 5. Return descriptors.\n    return descriptors;\n  });\n\n  // ECMA262 19.1.2.9\n  func.defineNativeMethod(\"getOwnPropertySymbols\", 1, (context, [O]) => {\n    // Return ? GetOwnPropertyKeys(O, Symbol).\n    return GetOwnPropertyKeys(realm, O, SymbolValue);\n  });\n\n  // ECMA262 19.1.2.10\n  func.defineNativeMethod(\"getPrototypeOf\", 1, (context, [O]) => {\n    // 1. Let obj be ? ToObject(O).\n    let obj = To.ToObject(realm, O.throwIfNotConcrete());\n\n    // 2. Return ? obj.[[GetPrototypeOf]]().\n    return obj.$GetPrototypeOf();\n  });\n\n  // ECMA262 19.1.2.11\n  func.defineNativeMethod(\"is\", 2, (context, [value1, value2]) => {\n    // 1. Return SameValue(value1, value2).\n    return new BooleanValue(realm, SameValuePartial(realm, value1, value2));\n  });\n\n  // ECMA262 19.1.2.12\n  func.defineNativeMethod(\"isExtensible\", 1, (context, [O]) => {\n    // 1. If Type(O) is not Object, return false.\n    if (!O.mightBeObject()) return realm.intrinsics.false;\n    O = O.throwIfNotObject();\n\n    // 2. Return ? IsExtensible(O).\n    return new BooleanValue(realm, IsExtensible(realm, O));\n  });\n\n  // ECMA262 19.1.2.13\n  func.defineNativeMethod(\"isFrozen\", 1, (context, [O]) => {\n    // 1. If Type(O) is not Object, return true.\n    if (!O.mightBeObject()) return realm.intrinsics.true;\n\n    // 2. Return ? TestIntegrityLevel(O, \"frozen\").\n    O = O.throwIfNotConcreteObject();\n    return new BooleanValue(realm, TestIntegrityLevel(realm, O, \"frozen\"));\n  });\n\n  // ECMA262 19.1.2.14\n  func.defineNativeMethod(\"isSealed\", 1, (context, [O]) => {\n    // 1. If Type(O) is not Object, return true.\n    if (!O.mightBeObject()) return realm.intrinsics.true;\n\n    // 2. Return ? TestIntegrityLevel(O, \"sealed\").\n    O = O.throwIfNotConcreteObject();\n    return new BooleanValue(realm, TestIntegrityLevel(realm, O, \"sealed\"));\n  });\n\n  // ECMA262 19.1.2.15\n  func.defineNativeMethod(\"keys\", 1, (context, [O]) => {\n    // 1. Let obj be ? ToObject(O).\n    let obj = To.ToObject(realm, O.throwIfNotConcrete());\n\n    // 2. Let nameList be ? EnumerableOwnProperties(obj, \"key\").\n    let nameList = EnumerableOwnProperties(realm, obj, \"key\");\n\n    // 3. Return CreateArrayFromList(nameList).\n    return Create.CreateArrayFromList(realm, nameList);\n  });\n\n  // ECMA262 9.1.2.16\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"values\", 1, (context, [O]) => {\n      // 1. Let obj be ? ToObject(O).\n      let obj = To.ToObject(realm, O.throwIfNotConcrete());\n\n      // 2. Let nameList be ? EnumerableOwnProperties(obj, \"value\").\n      let nameList = EnumerableOwnProperties(realm, obj, \"value\");\n\n      // 3. Return CreateArrayFromList(nameList).\n      return Create.CreateArrayFromList(realm, nameList);\n    });\n\n  // ECMA262 19.1.2.17\n  func.defineNativeMethod(\"entries\", 1, (context, [O]) => {\n    // 1. Let obj be ? ToObject(O).\n    let obj = To.ToObject(realm, O.throwIfNotConcrete());\n\n    // 2. Let nameList be ? EnumerableOwnProperties(obj, \"key+value\").\n    let nameList = EnumerableOwnProperties(realm, obj, \"key+value\");\n\n    // 3. Return CreateArrayFromList(nameList).\n    return Create.CreateArrayFromList(realm, nameList);\n  });\n\n  // ECMA262 19.1.2.18\n  func.defineNativeMethod(\"preventExtensions\", 1, (context, [O]) => {\n    // 1. If Type(O) is not Object, return O.\n    if (!O.mightBeObject()) return O;\n\n    // 2. Let status be ? O.[[PreventExtensions]]().\n    O = O.throwIfNotConcreteObject();\n    let status = O.$PreventExtensions();\n\n    // 3. If status is false, throw a TypeError exception.\n    if (status === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Return O.\n    return O;\n  });\n\n  // ECMA262 19.1.2.19\n  func.defineNativeMethod(\"seal\", 1, (context, [O]) => {\n    // 1. If Type(O) is not Object, return O.\n    if (!O.mightBeObject()) return O;\n\n    // 2. Let status be ? SetIntegrityLevel(O, \"sealed\").\n    O = O.throwIfNotConcreteObject();\n    let status = SetIntegrityLevel(realm, O, \"sealed\");\n\n    // 3. If status is false, throw a TypeError exception.\n    if (status === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Return O.\n    return O;\n  });\n\n  // ECMA262 19.1.2.20\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"setPrototypeOf\", 2, (context, [O, proto]) => {\n      // 1. Let O be ? RequireObjectCoercible(O).\n      O = RequireObjectCoercible(realm, O);\n\n      // 2. If Type(proto) is neither Object nor Null, throw a TypeError exception.\n      if (!HasSomeCompatibleType(proto, ObjectValue, NullValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 3. If Type(O) is not Object, return O.\n      O = O.throwIfNotConcrete();\n      if (!(O instanceof ObjectValue)) return O;\n\n      // 4. Let status be ? O.[[SetPrototypeOf]](proto).\n      let status = O.$SetPrototypeOf(((proto: any): ObjectValue | NullValue));\n\n      // 5. If status is false, throw a TypeError exception.\n      if (status === false) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 6. Return O.\n      return O;\n    });\n\n  return func;\n}\n"]}