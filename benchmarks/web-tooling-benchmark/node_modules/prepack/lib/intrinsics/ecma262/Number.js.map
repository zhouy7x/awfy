{"version":3,"sources":["../../../src/intrinsics/ecma262/Number.js"],"names":["realm","func","context","value","argCount","NewTarget","n","intrinsics","zero","ToNumber","O","OrdinaryCreateFromConstructor","$NumberData","undefined","defineNativeConstant","isCompatibleWith","MOBILE_JSC_VERSION","defineNativeMethod","number","mightBeNumber","false","throwIfNotConcreteNumber","isNaN","Infinity","true","integer","ToInteger","Math","abs","pow","NaN","negativeInfinity","defineNativeProperty","parseFloat","parseInt"],"mappings":"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","file":"Number.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NumberValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 20.1.1\n  let func = new NativeFunctionValue(realm, \"Number\", \"Number\", 1, (context, [value], argCount, NewTarget) => {\n    let n;\n\n    // 1. If no arguments were passed to this function invocation, let n be +0.\n    if (argCount === 0) {\n      n = realm.intrinsics.zero;\n    } else {\n      // 2. Else, let n be ? ToNumber(value).\n      n = new NumberValue(realm, To.ToNumber(realm, value));\n    }\n\n    // 3. If NewTarget is undefined, return n.\n    if (!NewTarget) return n;\n\n    // 4. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%NumberPrototype%\", « [[NumberData]] »).\n    let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"NumberPrototype\", { $NumberData: undefined });\n\n    // 5. Set the value of O's [[NumberData]] internal slot to n.\n    O.$NumberData = n;\n\n    // 6. Return O.\n    return O;\n  });\n\n  // ECMA262 20.1.2.1\n  func.defineNativeConstant(\"EPSILON\", new NumberValue(realm, 2.220446049250313e-16));\n\n  // ECMA262 20.1.2.2\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isFinite\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Otherwise, return true.\n      return realm.intrinsics.true;\n    });\n\n  // ECMA262 20.1.2.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isInteger\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Let integer be ToInteger(number).\n      let integer = To.ToInteger(realm, number);\n\n      // 4. If integer is not equal to number, return false.\n      if (integer !== number.value) return realm.intrinsics.false;\n\n      // 5. Otherwise, return true.\n      return realm.intrinsics.true;\n    });\n\n  // ECMA262 20.1.2.4\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isNaN\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, return true.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value)) return realm.intrinsics.true;\n\n      // 3. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 20.1.2.5\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"isSafeInteger\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Let integer be ToInteger(number).\n      let integer = To.ToInteger(realm, number);\n\n      // 4. If integer is not equal to number, return false.\n      if (integer !== number.value) return realm.intrinsics.false;\n\n      // 5. If abs(integer) ≤ 2^53-1, return true.\n      if (Math.abs(integer) <= Math.pow(2, 53) - 1) return realm.intrinsics.true;\n\n      // 6. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 20.1.2.6\n  func.defineNativeConstant(\"MAX_SAFE_INTEGER\", new NumberValue(realm, 9007199254740991));\n\n  // ECMA262 20.1.2.7\n  func.defineNativeConstant(\"MAX_VALUE\", new NumberValue(realm, 1.7976931348623157e308));\n\n  // ECMA262 20.1.2.8\n  func.defineNativeConstant(\"MIN_SAFE_INTEGER\", new NumberValue(realm, -9007199254740991));\n\n  // ECMA262 20.1.2.9\n  func.defineNativeConstant(\"MIN_VALUE\", new NumberValue(realm, 5e-324));\n\n  // ECMA262 20.1.2.10\n  func.defineNativeConstant(\"NaN\", realm.intrinsics.NaN);\n\n  // ECMA262 20.1.2.11\n  func.defineNativeConstant(\"NEGATIVE_INFINITY\", realm.intrinsics.negativeInfinity);\n\n  // ECMA262 20.1.2.12\n  func.defineNativeProperty(\"parseFloat\", realm.intrinsics.parseFloat);\n\n  // ECMA262 20.1.2.13\n  func.defineNativeProperty(\"parseInt\", realm.intrinsics.parseInt);\n\n  // ECMA262 20.1.2.14\n  func.defineNativeConstant(\"POSITIVE_INFINITY\", realm.intrinsics.Infinity);\n\n  return func;\n}\n"]}