{"version":3,"sources":["../../../src/intrinsics/fb-www/relay-mocks.js"],"names":["createMockReactRelay","t","createReactRelayContainer","realm","reactRelay","containerName","$DefineOwnProperty","value","undefined","context","args","types","values","$Realm","generator","derive","_args","reactRelayIdent","otherArgs","callExpression","memberExpression","identifier","react","abstractHints","set","writable","enumerable","configurable","relayRequireName","intrinsics","ObjectPrototype","queryRendererComponent","CreateDataPropertyOrThrow","graphql","reactRelayContainers","reactRelayContainer","commitLocalUpdate","commitMutation","fetchQuery","requestSubscription","refuseSerialization"],"mappings":"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","file":"relay-mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, NativeFunctionValue, FunctionValue } from \"../../values/index.js\";\nimport { Create } from \"../../singletons.js\";\nimport { createAbstract } from \"../prepack/utils.js\";\nimport * as t from \"babel-types\";\nimport { TypesDomain, ValuesDomain } from \"../../domains/index.js\";\nimport invariant from \"../../invariant\";\nimport { createReactHintObject } from \"../../react/utils.js\";\n\nfunction createReactRelayContainer(realm: Realm, reactRelay: ObjectValue, containerName: string) {\n  // we create a ReactRelay container function that returns an abstract object\n  // allowing us to reconstruct this ReactReact.createSomeContainer(...) again\n  // we also pass a reactHint so the reconciler can properly deal with this\n  reactRelay.$DefineOwnProperty(containerName, {\n    value: new NativeFunctionValue(realm, undefined, containerName, 0, (context, args) => {\n      let types = new TypesDomain(FunctionValue);\n      let values = new ValuesDomain();\n      invariant(context.$Realm.generator);\n      let value = context.$Realm.generator.derive(types, values, [reactRelay, ...args], _args => {\n        let [reactRelayIdent, ...otherArgs] = _args;\n\n        return t.callExpression(\n          t.memberExpression(reactRelayIdent, t.identifier(containerName)),\n          ((otherArgs: any): Array<any>)\n        );\n      });\n      realm.react.abstractHints.set(value, createReactHintObject(reactRelay, containerName, args));\n      return value;\n    }),\n    writable: false,\n    enumerable: false,\n    configurable: true,\n  });\n}\n\nexport function createMockReactRelay(realm: Realm, relayRequireName: string): ObjectValue {\n  // we set refuseSerialization to true so we don't serialize the below properties straight away\n  let reactRelay = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, `require(\"${relayRequireName}\")`, true);\n  // for QueryRenderer, we want to leave the component alone but process it's \"render\" prop\n  let queryRendererComponent = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").QueryRenderer`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"QueryRenderer\", queryRendererComponent);\n\n  let graphql = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").graphql`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"graphql\", graphql);\n\n  let reactRelayContainers = [\"createFragmentContainer\", \"createPaginationContainer\", \"createRefetchContainer\"];\n  for (let reactRelayContainer of reactRelayContainers) {\n    createReactRelayContainer(realm, reactRelay, reactRelayContainer);\n  }\n\n  let commitLocalUpdate = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").commitLocalUpdate`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"commitLocalUpdate\", commitLocalUpdate);\n\n  let commitMutation = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").commitMutation`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"commitMutation\", commitMutation);\n\n  let fetchQuery = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").fetchQuery`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"fetchQuery\", fetchQuery);\n\n  let requestSubscription = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").requestSubscription`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"requestSubscription\", requestSubscription);\n\n  // we set refuseSerialization back to false\n  reactRelay.refuseSerialization = false;\n  return reactRelay;\n}\n"]}