{"version":3,"sources":["../src/prepack-cli.js"],"names":["run","Object","Array","console","JSON","process","prepackStdin","prepackFileSync","FatalError","CompatibilityValues","fs","HELP_STR","map","v","join","args","from","argv","splice","inputFilenames","outputFilename","check","compatibility","mathRandomSeed","inputSourceMap","outputSourceMap","statsFileName","maxStackDepth","timeout","additionalFunctions","debugIdentifiers","lazyObjectsRuntime","heapGraphFilePath","debugInFilePath","debugOutFilePath","reactOutput","reproFilePath","flags","initializeMoreModules","trace","debugNames","omitInvariants","emitConcreteModel","inlineExpressions","simpleClosures","abstractEffectsInAdditionalFunctions","logStatistics","logModules","delayInitializations","delayUnsupportedRequires","accelerateUnsupportedRequires","internalDebug","debugScopes","serialize","residual","profile","reactEnabled","reproArguments","reproFileNames","inputFile","fileName","push","basename","length","arg","shift","startsWith","slice","includes","error","exit","value","isNaN","parseInt","toString","seconds","additionalFunctionsString","split","debugIdentifiersString","range","unshift","pair","Number","MAX_SAFE_INTEGER","start","isInteger","count","options","flag","keys","log","option","undefined","zip","content","readFileSync","file","a","data","generate","base64","compression","writeFileSync","resolvedOptions","assign","inputSourceMapFilename","errorHandler","sourceMaps","heapGraphFormat","errors","Map","errorList","diagnostic","location","set","printDiagnostics","foundFatal","size","printError","locString","severity","errorCode","message","callStack","eolPos","indexOf","substring","loc","sourceMessage","source","line","column","processSerializedCode","serialized","err","stack","code","statistics","timingStats","stats","SerializerStatistics","TimingStatistics","MemoryStatistics","getHeapStatistics","stringify","heapGraph","__residual"],"mappings":"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","file":"prepack-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* eslint-disable no-shadow */\n\nimport { CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"./errors.js\";\nimport { type Compatibility, CompatibilityValues, type ReactOutputTypes, ReactOutputValues } from \"./options.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { prepackStdin, prepackFileSync } from \"./prepack-node.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport fs from \"fs\";\nimport v8 from \"v8\";\nimport { version } from \"../package.json\";\nimport invariant from \"./invariant\";\nimport zipFactory from \"node-zip\";\nimport path from \"path\";\n\n// Prepack helper\ndeclare var __residual: any;\n\nfunction run(\n  Object,\n  Array,\n  console,\n  JSON,\n  process,\n  prepackStdin,\n  prepackFileSync,\n  FatalError,\n  CompatibilityValues,\n  fs\n) {\n  let HELP_STR = `\n    input                    The name of the file to run Prepack over (for web please provide the single js bundle file)\n    --out                    The name of the output file\n    --compatibility          The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(\", \")}]\n    --mathRandomSeed         If you want Prepack to evaluate Math.random() calls, please provide a seed.\n    --srcmapIn               The input sourcemap filename. If present, Prepack will output a sourcemap that maps from\n                             the original file (pre-input sourcemap) to Prepack's output\n    --srcmapOut              The output sourcemap filename.\n    --maxStackDepth          Specify the maximum call stack depth.\n    --timeout                The amount of time in seconds until Prepack should time out.\n    --additionalFunctions    Additional functions that should be prepacked (comma separated).\n    --abstractEffectsInAdditionalFunctions Experimental flag to allow abstract effectful function calls.\n    --lazyObjectsRuntime     Enable lazy objects feature and specify the JS runtime that support this feature.\n    --debugNames             Changes the output of Prepack so that for named functions and variables that get emitted into\n                             Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n    --speculate              Enable speculative initialization of modules (for the module system Prepack has builtin\n                             knowledge about). Prepack will try to execute all factory functions it is able to.\n    --trace                  Traces the order of module initialization.\n    --serialize              Serializes the partially evaluated global environment as a program that recreates it.\n                             (default = true)\n    --check [start[, count]] Check residual functions for diagnostic messages. Do not serialize or produce residual code.\n    --residual               Produces the residual program that results after constant folding.\n    --profile                Enables console logging of profile information of different phases of prepack.\n    --statsFile              The name of the output file where statistics will be written to.\n    --heapGraphFilePath      The name of the output file where heap graph will be written to.\n    --inlineExpressions      When generating code, tells prepack to avoid naming expressions when they are only used once,\n                             and instead inline them where they are used.\n    --simpleClosures         When generating code, tells prepack to not defer initializing closures\n    --omitInvariants         When generating code, tells prepack to omit writing invariants. (Invariants generated by default.)\n    --emitConcreteModel      Synthesize concrete model values for abstract models(defined by __assumeDataProperty).\n    --version                Output the version number.\n    --repro                  Create a zip file with all information needed to reproduce a Prepack run\"\n  `;\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  let inputFilenames = [];\n  let outputFilename;\n  let check: void | Array<number>;\n  let compatibility: Compatibility;\n  let mathRandomSeed;\n  let inputSourceMap;\n  let outputSourceMap;\n  let statsFileName;\n  let maxStackDepth: number;\n  let timeout: number;\n  let additionalFunctions: void | Array<string>;\n  let debugIdentifiers: void | Array<string>;\n  let lazyObjectsRuntime: string;\n  let heapGraphFilePath: void | string;\n  let debugInFilePath: string;\n  let debugOutFilePath: string;\n  let reactOutput: ReactOutputTypes = \"create-element\";\n  let reproFilePath: void | string;\n  let flags = {\n    initializeMoreModules: false,\n    trace: false,\n    debugNames: false,\n    omitInvariants: false,\n    emitConcreteModel: false,\n    inlineExpressions: false,\n    simpleClosures: false,\n    abstractEffectsInAdditionalFunctions: false,\n    logStatistics: false,\n    logModules: false,\n    delayInitializations: false,\n    delayUnsupportedRequires: false,\n    accelerateUnsupportedRequires: true,\n    internalDebug: false,\n    debugScopes: false,\n    serialize: false,\n    residual: false,\n    profile: false,\n    reactEnabled: false,\n  };\n\n  let reproArguments = [];\n  let reproFileNames = [];\n  let inputFile = fileName => {\n    reproFileNames.push(fileName);\n    return path.basename(fileName);\n  };\n  while (args.length) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      inputFilenames.push(arg);\n      reproArguments.push(inputFile(arg));\n    } else {\n      arg = arg.slice(2);\n      switch (arg) {\n        case \"out\":\n          arg = args.shift();\n          outputFilename = arg;\n          // skip for repro purposes\n          break;\n        case \"compatibility\":\n          arg = args.shift();\n          if (!CompatibilityValues.includes(arg)) {\n            console.error(`Unsupported compatibility: ${arg}`);\n            process.exit(1);\n          }\n          compatibility = (arg: any);\n          reproArguments.push(\"--compatibility\", compatibility);\n          break;\n        case \"mathRandomSeed\":\n          mathRandomSeed = args.shift();\n          reproArguments.push(\"--mathRandomSeed\", mathRandomSeed);\n          break;\n        case \"srcmapIn\":\n          inputSourceMap = args.shift();\n          reproArguments.push(\"--srcmapIn\", inputFile(inputSourceMap));\n          break;\n        case \"srcmapOut\":\n          outputSourceMap = args.shift();\n          // skip for repro purposes\n          break;\n        case \"statsFile\":\n          statsFileName = args.shift();\n          // skip for repro purposes\n          break;\n        case \"maxStackDepth\":\n          let value = args.shift();\n          if (isNaN(value)) {\n            console.error(\"Stack depth value must be a number\");\n            process.exit(1);\n          }\n          maxStackDepth = parseInt(value, 10);\n          reproArguments.push(\"--maxStackDepth\", maxStackDepth.toString());\n          break;\n        case \"timeout\":\n          let seconds = args.shift();\n          if (isNaN(seconds)) {\n            console.error(\"Timeout must be a number\");\n            process.exit(1);\n          }\n          timeout = parseInt(seconds, 10) * 1000;\n          reproArguments.push(\"--timeout\", timeout.toString());\n          break;\n        case \"additionalFunctions\":\n          let additionalFunctionsString = args.shift();\n          additionalFunctions = additionalFunctionsString.split(\",\");\n          reproArguments.push(\"--additionalFunctions\", additionalFunctionsString);\n          break;\n        case \"debugIdentifiers\":\n          let debugIdentifiersString = args.shift();\n          debugIdentifiers = debugIdentifiersString.split(\",\");\n          reproArguments.push(\"--debugIdentifiers\", debugIdentifiersString);\n          break;\n        case \"check\":\n          let range = args.shift();\n          if (range.startsWith(\"--\")) {\n            args.unshift(range);\n            range = \"0\";\n          }\n          let pair: Array<any> = range.split(\",\");\n          if (pair.length === 1) pair.push(Number.MAX_SAFE_INTEGER);\n          let start = +pair[0];\n          if (start < 0 || !Number.isInteger(start)) {\n            console.error(\"check start offset must be a number\");\n            process.exit(1);\n          }\n          let count = +pair[1];\n          if (count < 0 || !Number.isInteger(count)) {\n            console.error(\"check count must be a number\");\n            process.exit(1);\n          }\n          check = [start, count];\n          reproArguments.push(\"--check\", range);\n          break;\n        case \"debugInFilePath\":\n          debugInFilePath = args.shift();\n          // skip for repro purposes\n          break;\n        case \"debugOutFilePath\":\n          debugOutFilePath = args.shift();\n          // skip for repro purposes\n          break;\n        case \"lazyObjectsRuntime\":\n          lazyObjectsRuntime = args.shift();\n          reproArguments.push(\"--lazyObjectsRuntime\", lazyObjectsRuntime);\n          break;\n        case \"heapGraphFilePath\":\n          heapGraphFilePath = args.shift();\n          // skip for repro purposes\n          break;\n        case \"reactOutput\":\n          arg = args.shift();\n          if (!ReactOutputValues.includes(arg)) {\n            console.error(`Unsupported reactOutput: ${arg}`);\n            process.exit(1);\n          }\n          reactOutput = (arg: any);\n          reproArguments.push(\"--reactOutput\", reactOutput);\n          break;\n        case \"repro\":\n          reproFilePath = args.shift();\n          // skip for repro purposes\n          break;\n        case \"help\":\n          const options = [\n            \"-- | input.js\",\n            \"--out output.js\",\n            \"--compatibility jsc\",\n            \"--mathRandomSeed seedvalue\",\n            \"--srcmapIn inputMap\",\n            \"--srcmapOut outputMap\",\n            \"--maxStackDepth depthValue\",\n            \"--timeout seconds\",\n            \"--additionalFunctions fnc1,fnc2,...\",\n            \"--debugIdentifiers id1,id2,...\",\n            \"--check [start[, number]]\",\n            \"--lazyObjectsRuntime lazyObjectsRuntimeName\",\n            \"--heapGraphFilePath heapGraphFilePath\",\n            \"--reactOutput \" + ReactOutputValues.join(\" | \"),\n            \"--repro reprofile.zip\",\n          ];\n          for (let flag of Object.keys(flags)) options.push(`--${flag}`);\n\n          console.log(\"Usage: prepack.js \" + options.map(option => `[ ${option} ]`).join(\" \") + \"\\n\" + HELP_STR);\n          return;\n        case \"version\":\n          console.log(version);\n          return;\n        default:\n          if (arg in flags) {\n            flags[arg] = true;\n            reproArguments.push(\"--\" + arg);\n          } else {\n            console.error(`Unknown option: ${arg}`);\n            process.exit(1);\n          }\n      }\n    }\n  }\n\n  if (reproFilePath !== undefined) {\n    const zip = zipFactory();\n    for (let fileName of reproFileNames) {\n      let content = fs.readFileSync(fileName, \"utf8\");\n      zip.file(path.basename(fileName), content);\n    }\n    zip.file(\n      \"repro.sh\",\n      `#!/bin/bash\nif [ -z \"$PREPACK\" ]; then\n  echo \"Set environment variable PREPACK to bin/prepack.js in your Prepack directory.\"\nelse\n  node \"$PREPACK\" ${reproArguments.map(a => `\"${a}\"`).join(\" \")}\nfi\n`\n    );\n    const data = zip.generate({ base64: false, compression: \"DEFLATE\" });\n    fs.writeFileSync(reproFilePath, data, \"binary\");\n  }\n\n  if (!flags.serialize && !flags.residual) flags.serialize = true;\n  if (check) {\n    flags.serialize = false;\n    flags.residual = false;\n  }\n\n  let resolvedOptions = Object.assign(\n    {},\n    {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilename: inputSourceMap,\n      errorHandler,\n      sourceMaps: !!outputSourceMap,\n      maxStackDepth,\n      timeout,\n      additionalFunctions,\n      debugIdentifiers,\n      check,\n      lazyObjectsRuntime,\n      debugInFilePath,\n      debugOutFilePath,\n      reactOutput,\n    },\n    flags\n  );\n  if (heapGraphFilePath) resolvedOptions.heapGraphFormat = \"DotLanguage\";\n  if (\n    lazyObjectsRuntime &&\n    (resolvedOptions.additionalFunctions || resolvedOptions.delayInitializations || resolvedOptions.inlineExpressions)\n  ) {\n    console.error(\n      \"lazy objects feature is incompatible with additionalFunctions, delayInitializations and inlineExpressions options\"\n    );\n    process.exit(1);\n  }\n\n  let errors: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n  let errorList: Array<CompilerDiagnostic> = [];\n  function errorHandler(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (diagnostic.location) errors.set(diagnostic.location, diagnostic);\n    else errorList.push(diagnostic);\n    return \"Recover\";\n  }\n\n  function printDiagnostics(): boolean {\n    let foundFatal = false;\n    if (errors.size > 0 || errorList.length > 0) {\n      console.error(\"Errors found while prepacking\");\n      let printError = (error: CompilerDiagnostic, locString?: string = \"At an unknown location\") => {\n        foundFatal = foundFatal || error.severity === \"FatalError\";\n        console.error(\n          `${locString} ${error.severity} ${error.errorCode}: ${error.message}` +\n            ` (https://github.com/facebook/prepack/wiki/${error.errorCode})`\n        );\n        let callStack = error.callStack;\n        if (callStack !== undefined) {\n          let eolPos = callStack.indexOf(\"\\n\");\n          if (eolPos > 0) console.error(callStack.substring(eolPos + 1));\n        }\n      };\n      for (let [loc, error] of errors) {\n        let sourceMessage = \"\";\n        switch (loc.source) {\n          case null:\n          case \"\":\n            sourceMessage = \"In an unknown source file\";\n            break;\n          case \"no-filename-specified\":\n            sourceMessage = \"In stdin\";\n            break;\n          default:\n            invariant(loc !== null && loc.source !== null);\n            sourceMessage = `In input file ${loc.source}`;\n            break;\n        }\n\n        let locString = `${sourceMessage}(${loc.start.line}:${loc.start.column + 1})`;\n        printError(error, locString);\n      }\n      for (let error of errorList) printError(error);\n    }\n    return foundFatal;\n  }\n\n  try {\n    if (inputFilenames.length === 0) {\n      prepackStdin(resolvedOptions, processSerializedCode, printDiagnostics);\n      return;\n    }\n    let serialized = prepackFileSync(inputFilenames, resolvedOptions);\n    printDiagnostics();\n    if (resolvedOptions.serialize && serialized) processSerializedCode(serialized);\n  } catch (err) {\n    printDiagnostics();\n    //FatalErrors must have generated at least one CompilerDiagnostic.\n    if (err instanceof FatalError) {\n      invariant(errors.size > 0 || errorList.length > 0, \"FatalError must generate at least one CompilerDiagnostic\");\n    } else {\n      // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n      console.error(err.stack);\n      process.exit(1);\n    }\n  }\n\n  function processSerializedCode(serialized: SerializedResult) {\n    if (serialized.code === \"\") {\n      console.error(\"Prepack returned empty code.\");\n      return;\n    }\n    if (outputFilename) {\n      console.log(`Prepacked source code written to ${outputFilename}.`);\n      fs.writeFileSync(outputFilename, serialized.code);\n    } else {\n      console.log(serialized.code);\n    }\n    if (statsFileName) {\n      if (serialized.statistics === undefined || serialized.timingStats === undefined) {\n        return;\n      }\n      let stats = {\n        SerializerStatistics: serialized.statistics,\n        TimingStatistics: serialized.timingStats,\n        MemoryStatistics: v8.getHeapStatistics(),\n      };\n      fs.writeFileSync(statsFileName, JSON.stringify(stats));\n    }\n    if (outputSourceMap) {\n      fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : \"\");\n    }\n    if (heapGraphFilePath) {\n      invariant(serialized.heapGraph);\n      fs.writeFileSync(heapGraphFilePath, serialized.heapGraph);\n    }\n  }\n\n  return true;\n}\n\nif (typeof __residual === \"function\") {\n  // If we're running inside of Prepack. This is the residual function we'll\n  // want to leave untouched in the final program.\n  __residual(\n    \"boolean\",\n    run,\n    Object,\n    Array,\n    console,\n    JSON,\n    process,\n    prepackStdin,\n    prepackFileSync,\n    FatalError,\n    CompatibilityValues,\n    fs\n  );\n} else {\n  run(Object, Array, console, JSON, process, prepackStdin, prepackFileSync, FatalError, CompatibilityValues, fs);\n}\n"]}