{"version":3,"sources":["../src/prepack-standalone.js"],"names":["prepackSources","prepackString","prepack","prepackFromAst","t","sources","options","debugChannel","undefined","realmOptions","errorHandler","realm","additionalGlobals","check","generator","logger","internalDebug","modules","logModules","delayUnsupportedRequires","accelerateUnsupportedRequires","result","$GlobalEnv","executeSources","checkResidualFunctions","code","map","serialize","residual","serializer","serialized","init","sourceMaps","debuggerInstance","shutdown","residualSources","filePath","outputFilename","fileContents","sourceMapContents","JSON","stringify","executePartialEvaluator","filename","sourceMap","ast","type","file","loc","source","startFunc","totalToAnalyze","env","$GlobalObject","makeSimple","diag","handleError","severity","resolveInitializedModules","residualHeapVisitor","Map","visitRoots","hasErrors","totalFunctions","nonFatalFunctions","fi","functionInstances","values","fv","functionValue","console","log","thisValue","intrinsics","null","n","getLength","args","i","name","ob","createFromType","intrinsicName","evaluateForEffectsInGlobalEnv","e","prepackVersion"],"mappings":"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","file":"prepack-standalone.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* APIs for running Prepack for code where a model of the environment is supplied as part of the code. */\n\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport * as t from \"babel-types\";\nimport { EvaluateDirectCallWithArgList } from \"./methods/index.js\";\nimport { getRealmOptions, getSerializerOptions } from \"./prepack-options\";\nimport { FatalError } from \"./errors.js\";\nimport type { SourceFile } from \"./types.js\";\nimport { AbruptCompletion } from \"./completions.js\";\nimport type { PrepackOptions } from \"./prepack-options\";\nimport { defaultOptions } from \"./options\";\nimport type { BabelNodeFile, BabelNodeProgram } from \"babel-types\";\nimport invariant from \"./invariant.js\";\nimport { version } from \"../package.json\";\nimport type { DebugChannel } from \"./debugger/server/channel/DebugChannel.js\";\nimport { type SerializedResult, SerializerStatistics } from \"./serializer/types.js\";\nimport { ResidualHeapVisitor } from \"./serializer/ResidualHeapVisitor.js\";\nimport { Modules } from \"./utils/modules.js\";\nimport { Logger } from \"./utils/logger.js\";\nimport { Generator } from \"./utils/generator.js\";\nimport { AbstractObjectValue, AbstractValue, ObjectValue } from \"./values/index.js\";\n\nexport function prepackSources(\n  sources: Array<SourceFile>,\n  options: PrepackOptions = defaultOptions,\n  debugChannel: DebugChannel | void = undefined\n): SerializedResult {\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions, debugChannel);\n  initializeGlobals(realm);\n  if (typeof options.additionalGlobals === \"function\") {\n    options.additionalGlobals(realm);\n  }\n\n  if (options.check) {\n    realm.generator = new Generator(realm, \"main\");\n    let logger = new Logger(realm, !!options.internalDebug);\n    let modules = new Modules(\n      realm,\n      logger,\n      new SerializerStatistics(),\n      !!options.logModules,\n      !!options.delayUnsupportedRequires,\n      !!options.accelerateUnsupportedRequires\n    );\n    let [result] = realm.$GlobalEnv.executeSources(sources);\n    if (result instanceof AbruptCompletion) throw result;\n    invariant(options.check);\n    checkResidualFunctions(modules, options.check[0], options.check[1]);\n    return { code: \"\", map: undefined };\n  } else if (options.serialize || !options.residual) {\n    let serializer = new Serializer(realm, getSerializerOptions(options));\n    let serialized = serializer.init(sources, options.sourceMaps);\n\n    //Turn off the debugger if there is one\n    if (realm.debuggerInstance) {\n      realm.debuggerInstance.shutdown();\n    }\n\n    if (!serialized) {\n      throw new FatalError(\"serializer failed\");\n    }\n\n    if (!options.residual) return serialized;\n    let residualSources = [\n      {\n        filePath: options.outputFilename || \"unknown\",\n        fileContents: serialized.code,\n        sourceMapContents: serialized.map && JSON.stringify(serialized.map),\n      },\n    ];\n    realm = construct_realm(realmOptions, debugChannel);\n    initializeGlobals(realm);\n    if (typeof options.additionalGlobals === \"function\") {\n      options.additionalGlobals(realm);\n    }\n    realm.generator = new Generator(realm, \"main\");\n    let result = realm.$GlobalEnv.executePartialEvaluator(residualSources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    return { ...result };\n  } else {\n    invariant(options.residual);\n    realm.generator = new Generator(realm, \"main\");\n    let result = realm.$GlobalEnv.executePartialEvaluator(sources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    return { ...result };\n  }\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepackString(\n  filename: string,\n  code: string,\n  sourceMap: string,\n  options: PrepackOptions = defaultOptions\n): SerializedResult {\n  return prepackSources([{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }], options);\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepack(code: string, options: PrepackOptions = defaultOptions): SerializedResult {\n  let filename = options.filename || \"unknown\";\n  let sources = [{ filePath: filename, fileContents: code }];\n\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions);\n  initializeGlobals(realm);\n\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepackFromAst(\n  ast: BabelNodeFile | BabelNodeProgram,\n  code: string,\n  options: PrepackOptions = defaultOptions\n): SerializedResult {\n  if (ast && ast.type === \"Program\") {\n    ast = t.file(ast, [], []);\n  }\n  invariant(ast && ast.type === \"File\");\n  let filename = options.filename || (ast.loc && ast.loc.source) || \"unknown\";\n  let sources = [{ filePath: filename, fileContents: code }];\n\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n\nfunction checkResidualFunctions(modules: Modules, startFunc: number, totalToAnalyze: number) {\n  let realm = modules.realm;\n  let env = realm.$GlobalEnv;\n  realm.$GlobalObject.makeSimple();\n  let errorHandler = realm.errorHandler;\n  if (!errorHandler) errorHandler = diag => realm.handleError(diag);\n  realm.errorHandler = diag => {\n    invariant(errorHandler);\n    if (diag.severity === \"FatalError\") return errorHandler(diag);\n    else return \"Recover\";\n  };\n  modules.resolveInitializedModules();\n  let residualHeapVisitor = new ResidualHeapVisitor(realm, modules.logger, modules, new Map(), \"NO_REFERENTIALIZE\");\n  residualHeapVisitor.visitRoots();\n  if (modules.logger.hasErrors()) return;\n  let totalFunctions = 0;\n  let nonFatalFunctions = 0;\n  for (let fi of residualHeapVisitor.functionInstances.values()) {\n    totalFunctions++;\n    if (totalFunctions <= startFunc) continue;\n    let fv = fi.functionValue;\n    console.log(\"analyzing: \" + totalFunctions);\n    let thisValue = realm.intrinsics.null;\n    let n = fv.getLength() || 0;\n    let args = [];\n    for (let i = 0; i < n; i++) {\n      let name = \"dummy parameter\";\n      let ob: AbstractObjectValue = (AbstractValue.createFromType(realm, ObjectValue, name): any);\n      ob.makeSimple(\"transitive\");\n      ob.intrinsicName = name;\n      args[i] = ob;\n    }\n    // todo: eventually join these effects, apply them to the global state and iterate to a fixed point\n    try {\n      realm.evaluateForEffectsInGlobalEnv(() =>\n        EvaluateDirectCallWithArgList(modules.realm, true, env, fv, fv, thisValue, args)\n      );\n      nonFatalFunctions++;\n    } catch (e) {}\n    if (totalFunctions >= startFunc + totalToAnalyze) break;\n  }\n  console.log(\n    `Analyzed ${totalToAnalyze} functions starting at ${startFunc} of which ${nonFatalFunctions} did not have fatal errors.`\n  );\n}\n\nexport const prepackVersion = version;\n"]}