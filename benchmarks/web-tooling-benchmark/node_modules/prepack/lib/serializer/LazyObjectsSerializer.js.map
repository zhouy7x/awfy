{"version":3,"sources":["../../src/serializer/LazyObjectsSerializer.js"],"names":["t","LAZY_OBJECTS_SERIALIZER_BODY_TYPE","LazyObjectsSerializer","constructor","realm","logger","modules","residualHeapValueIdentifiers","residualHeapInspector","residualValues","residualFunctionInstances","residualClassMethodInstances","residualFunctionInfos","options","referencedDeclaredValues","additionalFunctionValuesAndEffects","additionalFunctionValueInfos","declarativeEnvironmentRecordsBindings","statistics","react","referentializer","generatorParents","_lazyObjectIdSeed","_valueLazyIds","Map","_lazyObjectInitializers","_callbackLazyObjectParam","identifier","_options","lazyObjectsRuntime","_lazyObjectJSRuntimeName","_initializationCallbackName","_getValueLazyId","obj","_serializeLazyObjectInitializer","initializerBody","type","parentBody","undefined","entries","done","oldBody","emitter","beginEmitting","_emitObjectProperties","endEmitting","_serializeLazyObjectInitializerSwitchCase","initializer","caseBody","concat","breakStatement","lazyId","switchCase","numericLiteral","_serializeInitializationCallback","body","switchCases","push","throwStatement","newExpression","stringLiteral","selector","switchStatement","params","initializerCallbackFunction","functionExpression","blockStatement","variableDeclaration","variableDeclarator","_serializeRegisterInitializationCallback","expressionStatement","callExpression","memberExpression","_serializeCreateLazyObject","_isEmittingIntoLazyObjectInitializerBody","objLazyBody","get","isCurrentBodyOffspringOf","getSerializeObjectIdentifier","val","serializeValueRawObject","set","postGeneratorSerialization","size","prelude"],"mappings":"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","file":"LazyObjectsSerializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport { AbstractValue, FunctionValue, Value, ObjectValue } from \"../values/index.js\";\nimport * as t from \"babel-types\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeStatement,\n  BabelNodeIdentifier,\n  BabelNodeBlockStatement,\n  BabelNodeSwitchCase,\n} from \"babel-types\";\nimport type {\n  SerializedBody,\n  FunctionInfo,\n  FunctionInstance,\n  AdditionalFunctionInfo,\n  ReactSerializerState,\n  ClassMethodInstance,\n  AdditionalFunctionEffects,\n  ResidualFunctionBinding,\n} from \"./types.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport invariant from \"../invariant.js\";\nimport { SerializerStatistics } from \"./types.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport { Modules } from \"../utils/modules.js\";\nimport { ResidualHeapInspector } from \"./ResidualHeapInspector.js\";\nimport type { Scope } from \"./ResidualHeapVisitor.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { getOrDefault } from \"./utils.js\";\nimport type { DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport type { Referentializer } from \"./Referentializer.js\";\nimport { Generator } from \"../utils/generator.js\";\n\nconst LAZY_OBJECTS_SERIALIZER_BODY_TYPE = \"LazyObjectInitializer\";\n\n/**\n * Serialize objects in lazy mode by leveraging the JS runtime that support this feature.\n * Objects are serialized into two parts:\n * 1. All lazy objects are created via lightweight LazyObjectsRuntime.createLazyObject() call.\n * 2. Lazy objects' property assignments are delayed in a callback function which is registered with the runtime.\n *    lazy objects runtime will execute this callback to hydrate the lazy objects.\n *\n * Currently only the raw objects are taking part in the lazy objects feature.\n * TODO: support for other objects, like array, regex etc...\n */\nexport class LazyObjectsSerializer extends ResidualHeapSerializer {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    residualHeapValueIdentifiers: ResidualHeapValueIdentifiers,\n    residualHeapInspector: ResidualHeapInspector,\n    residualValues: Map<Value, Set<Scope>>,\n    residualFunctionInstances: Map<FunctionValue, FunctionInstance>,\n    residualClassMethodInstances: Map<FunctionValue, ClassMethodInstance>,\n    residualFunctionInfos: Map<BabelNodeBlockStatement, FunctionInfo>,\n    options: SerializerOptions,\n    referencedDeclaredValues: Map<AbstractValue, void | FunctionValue>,\n    additionalFunctionValuesAndEffects: Map<FunctionValue, AdditionalFunctionEffects> | void,\n    additionalFunctionValueInfos: Map<FunctionValue, AdditionalFunctionInfo>,\n    declarativeEnvironmentRecordsBindings: Map<DeclarativeEnvironmentRecord, Map<string, ResidualFunctionBinding>>,\n    statistics: SerializerStatistics,\n    react: ReactSerializerState,\n    referentializer: Referentializer,\n    generatorParents: Map<Generator, Generator>\n  ) {\n    super(\n      realm,\n      logger,\n      modules,\n      residualHeapValueIdentifiers,\n      residualHeapInspector,\n      residualValues,\n      residualFunctionInstances,\n      residualClassMethodInstances,\n      residualFunctionInfos,\n      options,\n      referencedDeclaredValues,\n      additionalFunctionValuesAndEffects,\n      additionalFunctionValueInfos,\n      declarativeEnvironmentRecordsBindings,\n      statistics,\n      react,\n      referentializer,\n      generatorParents\n    );\n    this._lazyObjectIdSeed = 1;\n    this._valueLazyIds = new Map();\n    this._lazyObjectInitializers = new Map();\n    this._callbackLazyObjectParam = t.identifier(\"obj\");\n    invariant(this._options.lazyObjectsRuntime != null);\n    this._lazyObjectJSRuntimeName = t.identifier(this._options.lazyObjectsRuntime);\n    this._initializationCallbackName = t.identifier(\"__initializerCallback\");\n  }\n\n  _lazyObjectIdSeed: number;\n  _valueLazyIds: Map<ObjectValue, number>;\n  // Holds object's lazy initializer bodies.\n  // These bodies will be combined into a well-known callback after generator serialization is done and registered with the runtime.\n  _lazyObjectInitializers: Map<ObjectValue, SerializedBody>;\n\n  _lazyObjectJSRuntimeName: BabelNodeIdentifier;\n  _callbackLazyObjectParam: BabelNodeIdentifier;\n  _initializationCallbackName: BabelNodeIdentifier;\n\n  _getValueLazyId(obj: ObjectValue): number {\n    return getOrDefault(this._valueLazyIds, obj, () => this._lazyObjectIdSeed++);\n  }\n\n  // TODO: change to use _getTarget() to get the lazy objects initializer body.\n  _serializeLazyObjectInitializer(obj: ObjectValue): SerializedBody {\n    const initializerBody = {\n      type: LAZY_OBJECTS_SERIALIZER_BODY_TYPE,\n      parentBody: undefined,\n      entries: [],\n      done: false,\n    };\n    let oldBody = this.emitter.beginEmitting(LAZY_OBJECTS_SERIALIZER_BODY_TYPE, initializerBody);\n    this._emitObjectProperties(obj);\n    this.emitter.endEmitting(LAZY_OBJECTS_SERIALIZER_BODY_TYPE, oldBody);\n    return initializerBody;\n  }\n\n  _serializeLazyObjectInitializerSwitchCase(obj: ObjectValue, initializer: SerializedBody): BabelNodeSwitchCase {\n    // TODO: only serialize this switch case if the initializer(property assignment) is not empty.\n    const caseBody = initializer.entries.concat(t.breakStatement());\n    const lazyId = this._getValueLazyId(obj);\n    return t.switchCase(t.numericLiteral(lazyId), caseBody);\n  }\n\n  _serializeInitializationCallback(): BabelNodeStatement {\n    const body = [];\n\n    const switchCases = [];\n    for (const [obj, initializer] of this._lazyObjectInitializers) {\n      switchCases.push(this._serializeLazyObjectInitializerSwitchCase(obj, initializer));\n    }\n    // Default case.\n    switchCases.push(\n      t.switchCase(null, [\n        t.throwStatement(t.newExpression(t.identifier(\"Error\"), [t.stringLiteral(\"Unknown lazy id\")])),\n      ])\n    );\n\n    const selector = t.identifier(\"id\");\n    body.push(t.switchStatement(selector, switchCases));\n\n    const params = [this._callbackLazyObjectParam, selector];\n    const initializerCallbackFunction = t.functionExpression(null, params, t.blockStatement(body));\n    // TODO: use NameGenerator.\n    return t.variableDeclaration(\"var\", [\n      t.variableDeclarator(this._initializationCallbackName, initializerCallbackFunction),\n    ]);\n  }\n\n  _serializeRegisterInitializationCallback(): BabelNodeStatement {\n    return t.expressionStatement(\n      t.callExpression(t.memberExpression(this._lazyObjectJSRuntimeName, t.identifier(\"setLazyObjectInitializer\")), [\n        this._initializationCallbackName,\n      ])\n    );\n  }\n\n  _serializeCreateLazyObject(obj: ObjectValue): BabelNodeExpression {\n    const lazyId = this._getValueLazyId(obj);\n    return t.callExpression(\n      t.memberExpression(this._lazyObjectJSRuntimeName, t.identifier(\"createLazyObject\"), /*computed*/ false),\n      [t.numericLiteral(lazyId)]\n    );\n  }\n\n  /**\n   * Check if the object currently being emitted is lazy object(inside _lazyObjectInitializers map) and\n   * that its emitting body is the offspring of this lazy object's initializer body.\n   * This is needed because for \"lazy1.p = lazy2\" case,\n   * we need to replace \"lazy1\" with \"obj\" but not for \"lazy2\".\n   * The offspring checking is needed because object may be emitting in a \"ConditionalAssignmentBranch\" of\n   * lazy object's initializer body.\n   */\n  _isEmittingIntoLazyObjectInitializerBody(obj: ObjectValue) {\n    const objLazyBody = this._lazyObjectInitializers.get(obj);\n    return objLazyBody !== undefined && this.emitter.isCurrentBodyOffspringOf(objLazyBody);\n  }\n\n  // Override default behavior.\n  // Inside lazy objects callback, the lazy object identifier needs to be replaced with the\n  // parameter passed from the runtime.\n  getSerializeObjectIdentifier(val: Value): BabelNodeIdentifier {\n    return val instanceof ObjectValue && this._isEmittingIntoLazyObjectInitializerBody(val)\n      ? this._callbackLazyObjectParam\n      : super.getSerializeObjectIdentifier(val);\n  }\n\n  // Override default serializer with lazy mode.\n  serializeValueRawObject(obj: ObjectValue): BabelNodeExpression {\n    this._lazyObjectInitializers.set(obj, this._serializeLazyObjectInitializer(obj));\n    return this._serializeCreateLazyObject(obj);\n  }\n\n  // Override.\n  // Serialize the initialization callback and its registration in prelude if there are object being lazied.\n  postGeneratorSerialization(): void {\n    if (this._lazyObjectInitializers.size > 0) {\n      // Insert initialization callback at the end of prelude code.\n      this.prelude.push(this._serializeInitializationCallback());\n      this.prelude.push(this._serializeRegisterInitializationCallback());\n    }\n  }\n}\n"]}