{"version":3,"sources":["../../src/serializer/ResidualReactElementSerializer.js"],"names":["t","ResidualReactElementSerializer","constructor","realm","residualHeapSerializer","logger","reactOutput","react","output","_lazilyHoistedNodes","undefined","_createReactElement","value","attributes","children","declared","type","_createReactElementAttribute","expr","key","_createReactElementChild","_emitHoistedReactElement","id","reactElement","hoistedCreateElementIdentifier","originalCreateElementIdentifier","funcId","identifier","functionNameGenerator","generate","createElementIdentifier","nodes","statement","expressionStatement","logicalExpression","binaryExpression","unaryExpression","numericLiteral","callExpression","emitter","emit","Array","isArray","push","astNode","_getReactLibraryValue","reactLibraryObject","fbLibraries","_getReactCreateElementValue","_emitReactElement","shouldHoist","isReferencedOnlyByAdditionalFunction","getSerializeObjectIdentifier","reactElementAstNode","emitNowOrAfterWaitingForDependencies","_serializeReactElementToJSXElement","createElement","serializeValue","intrinsicNameGenerator","_serializeReactElementToCreateElement","assignmentExpression","variableDeclaration","variableDeclarator","_serializeNowOrAfterWaitingForDependencies","func","shouldSerialize","reason","getReasonToWaitForDependencies","serialize","emitAfterWaiting","_serializeReactFragmentType","typeValue","serializedValues","add","$Description","memberExpression","_serializeReactElementType","_serializeReactElementAttributes","keyValue","refValue","propsValue","intrinsics","null","reactElementKey","reactElementRef","assignPropsAsASpreadProp","reactElementSpread","isPartialObject","propName","binding","properties","descriptor","propValue","reactElementAttribute","_serializeReactElementChildren","has","childrenValue","childrenLength","childrenLengthValue","i","child","_serializeReactElementChild","logError","serializeReactElement","val","_addSerializedValueToJSXAttriutes","prop","jSXSpreadAttribute","createElementArguments","length","astAttributes","attribute","spreadProperty","attributeKey","includes","stringLiteral","objectProperty","objectExpression","nullLiteral","astChildren","createElementCall","_addBailOutMessageToBabelNode","jsxTypeIdentifer","isStringLiteral","isNumericLiteral","jSXText","isJSXElement","jSXExpressionContainer","openingElement","jSXOpeningElement","closingElement","jSXClosingElement","jsxElement","jSXElement","node","$BailOutReason","leadingComments","reactElementChild","serializeLazyHoistedNodes","entries","functionExpression","blockStatement","map"],"mappings":"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","file":"ResidualReactElementSerializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { canHoistReactElement } from \"../react/hoisting.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNode, BabelNodeExpression } from \"babel-types\";\nimport {\n  ArrayValue,\n  NumberValue,\n  Value,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  AbstractValue,\n} from \"../values/index.js\";\nimport { convertExpressionToJSXIdentifier, convertKeyValueToJSXAttribute } from \"../react/jsx.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport invariant from \"../invariant.js\";\nimport { FatalError } from \"../errors\";\nimport { getReactSymbol, getProperty } from \"../react/utils.js\";\nimport type { ReactOutputTypes } from \"../options.js\";\nimport type { LazilyHoistedNodes } from \"./types.js\";\n\ntype ReactElementAttributeType = \"SPREAD\" | \"PROPERTY\" | \"PENDING\";\ntype ReactElementChildType = \"NORMAL\" | \"PENDING\";\n\ntype ReactElementChild = {\n  expr: void | BabelNodeExpression,\n  type: ReactElementChildType,\n};\n\ntype ReactElementAttribute = {\n  expr: void | BabelNodeExpression,\n  key: void | string,\n  type: ReactElementAttributeType,\n};\n\ntype ReactElement = {\n  attributes: Array<ReactElementAttribute>,\n  children: Array<ReactElementChild>,\n  declared: boolean,\n  type: void | BabelNodeExpression,\n  value: ObjectValue,\n};\n\nexport class ResidualReactElementSerializer {\n  constructor(realm: Realm, residualHeapSerializer: ResidualHeapSerializer) {\n    this.realm = realm;\n    this.residualHeapSerializer = residualHeapSerializer;\n    this.logger = residualHeapSerializer.logger;\n    this.reactOutput = realm.react.output || \"create-element\";\n    this._lazilyHoistedNodes = undefined;\n  }\n\n  realm: Realm;\n  logger: Logger;\n  reactOutput: ReactOutputTypes;\n  residualHeapSerializer: ResidualHeapSerializer;\n  _lazilyHoistedNodes: void | LazilyHoistedNodes;\n\n  _createReactElement(value: ObjectValue): ReactElement {\n    return { attributes: [], children: [], declared: false, type: undefined, value };\n  }\n\n  _createReactElementAttribute(): ReactElementAttribute {\n    return { expr: undefined, key: undefined, type: \"PENDING\" };\n  }\n\n  _createReactElementChild(): ReactElementChild {\n    return { expr: undefined, type: \"PENDING\" };\n  }\n\n  _emitHoistedReactElement(\n    id: BabelNodeExpression,\n    reactElement: BabelNodeExpression,\n    hoistedCreateElementIdentifier: BabelNodeIdentifier,\n    originalCreateElementIdentifier: BabelNodeIdentifier\n  ) {\n    // if the currentHoistedReactElements is not defined, we create it an emit the function call\n    // this should only occur once per additional function\n    if (this._lazilyHoistedNodes === undefined) {\n      let funcId = t.identifier(this.residualHeapSerializer.functionNameGenerator.generate());\n      this._lazilyHoistedNodes = {\n        id: funcId,\n        createElementIdentifier: hoistedCreateElementIdentifier,\n        nodes: [],\n      };\n      let statement = t.expressionStatement(\n        t.logicalExpression(\n          \"&&\",\n          t.binaryExpression(\"===\", id, t.unaryExpression(\"void\", t.numericLiteral(0), true)),\n          // pass the createElementIdentifier if it's not null\n          t.callExpression(funcId, originalCreateElementIdentifier ? [originalCreateElementIdentifier] : [])\n        )\n      );\n      this.residualHeapSerializer.emitter.emit(statement);\n    }\n    // we then push the reactElement and its id into our list of elements to process after\n    // the current additional function has serialzied\n    invariant(this._lazilyHoistedNodes !== undefined);\n    invariant(Array.isArray(this._lazilyHoistedNodes.nodes));\n    this._lazilyHoistedNodes.nodes.push({ id, astNode: reactElement });\n  }\n\n  _getReactLibraryValue() {\n    let reactLibraryObject = this.realm.fbLibraries.react;\n    // if there is no React library, then we should throw and error\n    if (reactLibraryObject === undefined) {\n      throw new FatalError(\"unable to find React library reference in scope\");\n    }\n    return reactLibraryObject;\n  }\n\n  _getReactCreateElementValue() {\n    let reactLibraryObject = this._getReactLibraryValue();\n    return getProperty(this.realm, reactLibraryObject, \"createElement\");\n  }\n\n  _emitReactElement(reactElement: ReactElement): BabelNodeExpression {\n    let { value } = reactElement;\n    let shouldHoist =\n      this.residualHeapSerializer.isReferencedOnlyByAdditionalFunction(value) !== undefined &&\n      canHoistReactElement(this.realm, value);\n\n    let id = this.residualHeapSerializer.getSerializeObjectIdentifier(value);\n    // this identifier is used as the deafult, but also passed to the hoisted factory function\n    let originalCreateElementIdentifier = null;\n    // this name is used when hoisting, and is passed into the factory function, rather than the original\n    let hoistedCreateElementIdentifier = null;\n    let reactElementAstNode;\n\n    this.residualHeapSerializer.emitter.emitNowOrAfterWaitingForDependencies([value], () => {\n      if (this.reactOutput === \"jsx\") {\n        reactElementAstNode = this._serializeReactElementToJSXElement(value, reactElement);\n      } else if (this.reactOutput === \"create-element\") {\n        let createElement = this._getReactCreateElementValue();\n        originalCreateElementIdentifier = this.residualHeapSerializer.serializeValue(createElement);\n\n        if (shouldHoist) {\n          // if we haven't created a _lazilyHoistedNodes before, then this is the first time\n          // so we only create the hoisted identifier once\n          if (this._lazilyHoistedNodes === undefined) {\n            // create a new unique instance\n            hoistedCreateElementIdentifier = t.identifier(\n              this.residualHeapSerializer.intrinsicNameGenerator.generate()\n            );\n          } else {\n            hoistedCreateElementIdentifier = this._lazilyHoistedNodes.createElementIdentifier;\n          }\n        }\n\n        let createElementIdentifier = shouldHoist ? hoistedCreateElementIdentifier : originalCreateElementIdentifier;\n        reactElementAstNode = this._serializeReactElementToCreateElement(value, reactElement, createElementIdentifier);\n      } else {\n        invariant(false, \"Unknown reactOutput specified\");\n      }\n      // if we are hoisting this React element, put the assignment in the body\n      // also ensure we are in an additional function\n      if (shouldHoist) {\n        this._emitHoistedReactElement(\n          id,\n          reactElementAstNode,\n          hoistedCreateElementIdentifier,\n          originalCreateElementIdentifier\n        );\n      } else {\n        if (reactElement.declared) {\n          this.residualHeapSerializer.emitter.emit(\n            t.expressionStatement(t.assignmentExpression(\"=\", id, reactElementAstNode))\n          );\n        } else {\n          reactElement.declared = true;\n          this.residualHeapSerializer.emitter.emit(\n            t.variableDeclaration(\"var\", [t.variableDeclarator(id, reactElementAstNode)])\n          );\n        }\n      }\n    });\n    return id;\n  }\n\n  _serializeNowOrAfterWaitingForDependencies(\n    value: Value,\n    reactElement: ReactElement,\n    func: () => void | BabelNode,\n    shouldSerialize?: boolean = true\n  ): void {\n    let reason = this.residualHeapSerializer.emitter.getReasonToWaitForDependencies(value);\n\n    const serialize = () => {\n      func();\n    };\n\n    if (reason) {\n      this.residualHeapSerializer.emitter.emitAfterWaiting(reason, [value], () => {\n        serialize();\n        this._emitReactElement(reactElement);\n      });\n    } else {\n      serialize();\n    }\n  }\n\n  _serializeReactFragmentType(typeValue: Value): BabelNodeExpression {\n    let reactLibraryObject = this._getReactLibraryValue();\n    // we want to vist the Symbol type, but we don't want to serialize it\n    // as this is a React internal\n    this.residualHeapSerializer.serializedValues.add(typeValue);\n    invariant(typeValue.$Description instanceof StringValue);\n    this.residualHeapSerializer.serializedValues.add(typeValue.$Description);\n    return t.memberExpression(this.residualHeapSerializer.serializeValue(reactLibraryObject), t.identifier(\"Fragment\"));\n  }\n\n  _serializeReactElementType(reactElement: ReactElement): void {\n    let { value } = reactElement;\n    let typeValue = getProperty(this.realm, value, \"type\");\n\n    this._serializeNowOrAfterWaitingForDependencies(typeValue, reactElement, () => {\n      let expr;\n\n      if (typeValue instanceof SymbolValue && typeValue === getReactSymbol(\"react.fragment\", this.realm)) {\n        expr = this._serializeReactFragmentType(typeValue);\n      } else {\n        expr = this.residualHeapSerializer.serializeValue(typeValue);\n      }\n      reactElement.type = expr;\n    });\n  }\n\n  _serializeReactElementAttributes(reactElement: ReactElement): void {\n    let { value } = reactElement;\n    let keyValue = getProperty(this.realm, value, \"key\");\n    let refValue = getProperty(this.realm, value, \"ref\");\n    let propsValue = getProperty(this.realm, value, \"props\");\n\n    if (keyValue !== this.realm.intrinsics.null) {\n      let reactElementKey = this._createReactElementAttribute();\n      this._serializeNowOrAfterWaitingForDependencies(keyValue, reactElement, () => {\n        let expr = this.residualHeapSerializer.serializeValue(keyValue);\n        reactElementKey.expr = expr;\n        reactElementKey.key = \"key\";\n        reactElementKey.type = \"PROPERTY\";\n      });\n      reactElement.attributes.push(reactElementKey);\n    }\n\n    if (refValue !== this.realm.intrinsics.null) {\n      let reactElementRef = this._createReactElementAttribute();\n      this._serializeNowOrAfterWaitingForDependencies(refValue, reactElement, () => {\n        let expr = this.residualHeapSerializer.serializeValue(refValue);\n        reactElementRef.expr = expr;\n        reactElementRef.key = \"ref\";\n        reactElementRef.type = \"PROPERTY\";\n      });\n      reactElement.attributes.push(reactElementRef);\n    }\n\n    const assignPropsAsASpreadProp = () => {\n      let reactElementSpread = this._createReactElementAttribute();\n      this._serializeNowOrAfterWaitingForDependencies(propsValue, reactElement, () => {\n        let expr = this.residualHeapSerializer.serializeValue(propsValue);\n        reactElementSpread.expr = expr;\n        reactElementSpread.type = \"SPREAD\";\n      });\n      reactElement.attributes.push(reactElementSpread);\n    };\n\n    // handle props\n    if (propsValue instanceof AbstractValue) {\n      assignPropsAsASpreadProp();\n    } else if (propsValue instanceof ObjectValue) {\n      if (propsValue.isPartialObject()) {\n        assignPropsAsASpreadProp();\n      } else {\n        this.residualHeapSerializer.serializedValues.add(propsValue);\n        for (let [propName, binding] of propsValue.properties) {\n          if (binding.descriptor !== undefined && propName !== \"children\") {\n            invariant(propName !== \"key\" && propName !== \"ref\", `\"${propName}\" is a reserved prop name`);\n            let propValue = getProperty(this.realm, propsValue, propName);\n            let reactElementAttribute = this._createReactElementAttribute();\n\n            this._serializeNowOrAfterWaitingForDependencies(propValue, reactElement, () => {\n              let expr = this.residualHeapSerializer.serializeValue(propValue);\n              reactElementAttribute.expr = expr;\n              reactElementAttribute.key = propName;\n              reactElementAttribute.type = \"PROPERTY\";\n            });\n            reactElement.attributes.push(reactElementAttribute);\n          }\n        }\n      }\n    }\n  }\n\n  _serializeReactElementChildren(reactElement: ReactElement): void {\n    let { value } = reactElement;\n    let propsValue = getProperty(this.realm, value, \"props\");\n    if (!(propsValue instanceof ObjectValue)) {\n      return;\n    }\n    // handle children\n    if (propsValue.properties.has(\"children\")) {\n      let childrenValue = getProperty(this.realm, propsValue, \"children\");\n      this.residualHeapSerializer.serializedValues.add(childrenValue);\n\n      if (childrenValue !== this.realm.intrinsics.undefined && childrenValue !== this.realm.intrinsics.null) {\n        if (childrenValue instanceof ArrayValue) {\n          let childrenLength = getProperty(this.realm, childrenValue, \"length\");\n          let childrenLengthValue = 0;\n          if (childrenLength instanceof NumberValue) {\n            childrenLengthValue = childrenLength.value;\n            for (let i = 0; i < childrenLengthValue; i++) {\n              let child = getProperty(this.realm, childrenValue, \"\" + i);\n              if (child instanceof Value) {\n                reactElement.children.push(this._serializeReactElementChild(child, reactElement));\n              } else {\n                this.logger.logError(\n                  value,\n                  `ReactElement \"props.children[${i}]\" failed to serialize due to a non-value`\n                );\n              }\n            }\n          }\n        } else {\n          reactElement.children.push(this._serializeReactElementChild(childrenValue, reactElement));\n        }\n      }\n    }\n  }\n\n  serializeReactElement(val: ObjectValue): BabelNodeExpression {\n    let reactElement = this._createReactElement(val);\n\n    this._serializeReactElementType(reactElement);\n    this._serializeReactElementAttributes(reactElement);\n    this._serializeReactElementChildren(reactElement);\n\n    return this._emitReactElement(reactElement);\n  }\n\n  _addSerializedValueToJSXAttriutes(prop: string | null, expr: any, attributes: Array<BabelNode>): void {\n    if (prop === null) {\n      attributes.push(t.jSXSpreadAttribute(expr));\n    } else {\n      attributes.push(convertKeyValueToJSXAttribute(prop, expr));\n    }\n  }\n\n  _serializeReactElementToCreateElement(\n    val: ObjectValue,\n    reactElement: ReactElement,\n    createElementIdentifier: BabelNodeIdentifier\n  ): BabelNodeExpression {\n    let { type, attributes, children } = reactElement;\n\n    let createElementArguments = [type];\n    // check if we need to add attributes\n    if (attributes.length !== 0) {\n      let astAttributes = [];\n      for (let attribute of attributes) {\n        let expr = ((attribute.expr: any): BabelNodeExpression);\n\n        if (attribute.type === \"SPREAD\") {\n          astAttributes.push(t.spreadProperty(expr));\n        } else if (attribute.type === \"PROPERTY\") {\n          let attributeKey = attribute.key;\n          let key;\n\n          invariant(typeof attributeKey === \"string\");\n          if (attributeKey.includes(\"-\")) {\n            key = t.stringLiteral(attributeKey);\n          } else {\n            key = t.identifier(attributeKey);\n          }\n          astAttributes.push(t.objectProperty(key, expr));\n        }\n      }\n      createElementArguments.push(t.objectExpression(astAttributes));\n    }\n    if (children.length !== 0) {\n      if (attributes.length === 0) {\n        createElementArguments.push(t.nullLiteral());\n      }\n      let astChildren = [];\n      for (let child of children) {\n        let expr = ((child.expr: any): BabelNodeExpression);\n\n        if (child.type === \"NORMAL\") {\n          astChildren.push(expr);\n        }\n      }\n      createElementArguments.push(...astChildren);\n    }\n    // cast to any for createElementArguments as casting it to BabelNodeExpresion[] isn't working\n    let createElementCall = t.callExpression(createElementIdentifier, (createElementArguments: any));\n    this._addBailOutMessageToBabelNode(val, createElementCall);\n    return createElementCall;\n  }\n\n  _serializeReactElementToJSXElement(val: ObjectValue, reactElement: ReactElement): BabelNodeExpression {\n    let { type, attributes, children } = reactElement;\n\n    let jsxTypeIdentifer = convertExpressionToJSXIdentifier(((type: any): BabelNodeIdentifier), true);\n    let astAttributes = [];\n    for (let attribute of attributes) {\n      let expr = ((attribute.expr: any): BabelNodeExpression);\n\n      if (attribute.type === \"SPREAD\") {\n        astAttributes.push(t.jSXSpreadAttribute(expr));\n      } else if (attribute.type === \"PROPERTY\") {\n        let attributeKey = attribute.key;\n        invariant(typeof attributeKey === \"string\");\n        astAttributes.push(convertKeyValueToJSXAttribute(attributeKey, expr));\n      }\n    }\n\n    let astChildren = [];\n    for (let child of children) {\n      let expr = ((child.expr: any): BabelNodeExpression);\n\n      if (child.type === \"NORMAL\") {\n        if (t.isStringLiteral(expr) || t.isNumericLiteral(expr)) {\n          astChildren.push(t.jSXText(((expr: any).value: string) + \"\"));\n        } else if (t.isJSXElement(expr)) {\n          astChildren.push(expr);\n        } else {\n          astChildren.push(t.jSXExpressionContainer(expr));\n        }\n      }\n    }\n\n    let openingElement = t.jSXOpeningElement(jsxTypeIdentifer, (astAttributes: any), astChildren.length === 0);\n    let closingElement = t.jSXClosingElement(jsxTypeIdentifer);\n    let jsxElement = t.jSXElement(openingElement, closingElement, astChildren, astChildren.length === 0);\n    this._addBailOutMessageToBabelNode(val, jsxElement);\n    return jsxElement;\n  }\n\n  _addBailOutMessageToBabelNode(val: ObjectValue, node: BabelNode): void {\n    // if there has been a bail-out, we create an inline BlockComment node before the JSX element\n    if (val.$BailOutReason !== undefined) {\n      // $BailOutReason contains an optional string of what to print out in the comment\n      node.leadingComments = [({ type: \"BlockComment\", value: `${val.$BailOutReason}` }: any)];\n    }\n  }\n\n  _serializeReactElementChild(child: Value, reactElement: ReactElement): ReactElementChild {\n    let reactElementChild = this._createReactElementChild();\n    this._serializeNowOrAfterWaitingForDependencies(child, reactElement, () => {\n      let expr = this.residualHeapSerializer.serializeValue(child);\n\n      reactElementChild.expr = expr;\n      reactElementChild.type = \"NORMAL\";\n    });\n    return reactElementChild;\n  }\n\n  serializeLazyHoistedNodes() {\n    const entries = [];\n    if (this._lazilyHoistedNodes !== undefined) {\n      let { id, nodes, createElementIdentifier } = this._lazilyHoistedNodes;\n      // create a function that initializes all the hoisted nodes\n      let func = t.functionExpression(\n        null,\n        // use createElementIdentifier if it's not null\n        createElementIdentifier ? [createElementIdentifier] : [],\n        t.blockStatement(nodes.map(node => t.expressionStatement(t.assignmentExpression(\"=\", node.id, node.astNode))))\n      );\n      // push it to the mainBody of the module\n      entries.push(t.variableDeclaration(\"var\", [t.variableDeclarator(id, func)]));\n      // output all the empty variable declarations that will hold the nodes lazily\n      entries.push(...nodes.map(node => t.variableDeclaration(\"var\", [t.variableDeclarator(node.id)])));\n      // reset the _lazilyHoistedNodes so other additional functions work\n      this._lazilyHoistedNodes = undefined;\n    }\n    return entries;\n  }\n}\n"]}