{"version":3,"sources":["../../src/serializer/utils.js"],"names":["getSuggestedArrayLiteralLength","commonAncestorOf","getOrDefault","withDescriptorValue","canIgnoreClassLengthProperty","getObjectPrototypeMetadata","realm","val","length","key","properties","keys","Number","node1","node2","getParent","n1","n2","count1","count2","p1","p2","undefined","map","defaultFn","value","get","set","propertyNameOrSymbol","descriptor","func","ClassPropertiesToIgnore","Set","desc","logger","logError","obj","proto","$Prototype","skipPrototype","constructor","$IsClassPrototype","has","_constructor","classFunc"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { ObjectValue, SymbolValue, ECMAScriptSourceFunctionValue } from \"../values/index.js\";\nimport type { Realm } from \"../realm.js\";\n\nimport { FatalError } from \"../errors.js\";\nimport type { Descriptor } from \"../types.js\";\nimport invariant from \"../invariant.js\";\nimport { IsArray, IsArrayIndex, Get } from \"../methods/index.js\";\nimport { Logger } from \"../utils/logger.js\";\n\n/**\n * Get index property list length by searching array properties list for the max index key value plus 1.\n */\nexport function getSuggestedArrayLiteralLength(realm: Realm, val: ObjectValue): number {\n  invariant(IsArray(realm, val));\n\n  let length = 0;\n  for (const key of val.properties.keys()) {\n    if (IsArrayIndex(realm, key) && Number(key) >= length) {\n      length = Number(key) + 1;\n    }\n  }\n  return length;\n}\n\nexport function commonAncestorOf<T>(node1: void | T, node2: void | T, getParent: T => void | T): void | T {\n  if (node1 === node2) return node1;\n  // First get the path length to the root node for both nodes while also checking if\n  // either node is the parent of the other.\n  let n1 = node1,\n    n2 = node2,\n    count1 = 0,\n    count2 = 0;\n  while (true) {\n    let p1 = n1 && getParent(n1);\n    let p2 = n2 && getParent(n2);\n    if (p1 === node2) return node2;\n    if (p2 === node1) return node1;\n    if (p1) count1++;\n    if (p2) count2++;\n    if (!p1 && !p2) break;\n    n1 = p1;\n    n2 = p2;\n  }\n  // Now shorten the longest path to the same length as the shorter path\n  n1 = node1;\n  while (count1 > count2) {\n    invariant(n1 !== undefined);\n    n1 = getParent(n1);\n    count1--;\n  }\n  n2 = node2;\n  while (count1 < count2) {\n    invariant(n2 !== undefined);\n    n2 = getParent(n2);\n    count2--;\n  }\n  // Now run up both paths in tandem, stopping at the first common entry\n  while (n1 !== n2) {\n    invariant(n1 !== undefined);\n    n1 = getParent(n1);\n    invariant(n2 !== undefined);\n    n2 = getParent(n2);\n  }\n  return n1;\n}\n\n// Gets map[key] with default value provided by defaultFn\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultFn: () => V): V {\n  let value = map.get(key);\n  if (value === undefined) map.set(key, (value = defaultFn()));\n  invariant(value !== undefined);\n  return value;\n}\n\nexport function withDescriptorValue(\n  propertyNameOrSymbol: string | SymbolValue,\n  descriptor: void | Descriptor,\n  func: Function\n): void {\n  if (descriptor !== undefined) {\n    if (descriptor.value !== undefined) {\n      func(propertyNameOrSymbol, descriptor.value, \"value\");\n    } else {\n      if (descriptor.get !== undefined) {\n        func(propertyNameOrSymbol, descriptor.get, \"get\");\n      }\n      if (descriptor.set !== undefined) {\n        func(propertyNameOrSymbol, descriptor.set, \"set\");\n      }\n    }\n  }\n}\n\nexport const ClassPropertiesToIgnore: Set<string> = new Set([\"arguments\", \"name\", \"caller\"]);\n\nexport function canIgnoreClassLengthProperty(val: ObjectValue, desc: void | Descriptor, logger: Logger) {\n  if (desc && desc.value === undefined) {\n    logger.logError(val, \"Functions with length accessor properties are not supported in residual heap.\");\n  }\n  return true;\n}\n\nexport function getObjectPrototypeMetadata(realm: Realm, obj: ObjectValue) {\n  let proto = obj.$Prototype;\n  let skipPrototype = false;\n  let constructor;\n\n  if (obj.$IsClassPrototype) {\n    skipPrototype = true;\n  }\n  if (proto.$IsClassPrototype) {\n    invariant(proto instanceof ObjectValue);\n    // we now need to check if the prototpe has a constructor\n    if (proto.properties.has(\"constructor\")) {\n      let _constructor = proto.properties.get(\"constructor\");\n      invariant(_constructor !== undefined);\n      // if the contructor has been deleted then we have no way\n      // to serialize the original class AST as it won't have been\n      // evluated and thus visited\n      if (_constructor.descriptor === undefined) {\n        throw new FatalError(\"TODO #1024: implement object prototype serialization with deleted constructor\");\n      }\n      let classFunc = Get(realm, proto, \"constructor\");\n      constructor = classFunc;\n      invariant(constructor instanceof ECMAScriptSourceFunctionValue);\n      skipPrototype = true;\n    }\n  }\n\n  return {\n    skipPrototype,\n    constructor,\n  };\n}\n"]}