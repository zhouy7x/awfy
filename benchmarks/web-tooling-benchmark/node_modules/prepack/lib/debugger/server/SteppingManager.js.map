{"version":3,"sources":["../../../src/debugger/server/SteppingManager.js"],"names":["SteppingManager","constructor","realm","keepOldSteppers","_realm","_steppers","_keepOldSteppers","processStepCommand","kind","currentNode","_processStepIn","_processStepOver","ast","_stepInto","undefined","loc","source","push","start","line","column","contextStack","length","getAndDeleteCompletedSteppers","i","completedSteppers","stepper","isComplete","splice"],"mappings":";;;;;;;AAWA;;AACA;;;;AACA;;;;AAIO,MAAMA,eAAN,CAAsB;AAC3BC,cAAYC,KAAZ,EAA0BC,eAA1B,EAAqD;AACnD,SAAKC,MAAL,GAAcF,KAAd;AACA,SAAKG,SAAL,GAAiB,EAAjB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,QAAIH,eAAJ,EAAqB,KAAKG,gBAAL,GAAwB,IAAxB;AACtB;;;AAKDC,qBAAmBC,IAAnB,EAAgDC,WAAhD,EAAwE;AACtE,QAAID,SAAS,IAAb,EAAmB;AACjB,WAAKE,cAAL,CAAoBD,WAApB;AACD,KAFD,MAEO,IAAID,SAAS,MAAb,EAAqB;AAC1B,WAAKG,gBAAL,CAAsBF,WAAtB;AACD;AACD;AACD;;AAEDC,iBAAeE,GAAf,EAA+B;AAC7B,6BAAU,KAAKC,SAAL,KAAmBC,SAA7B;AACA,6BAAUF,IAAIG,GAAJ,IAAWH,IAAIG,GAAJ,CAAQC,MAA7B;AACA,QAAI,CAAC,KAAKV,gBAAV,EAA4B;AAC1B,WAAKD,SAAL,GAAiB,EAAjB;AACD;AACD,SAAKA,SAAL,CAAeY,IAAf,CAAoB,6BAAoBL,IAAIG,GAAJ,CAAQC,MAA5B,EAAoCJ,IAAIG,GAAJ,CAAQG,KAAR,CAAcC,IAAlD,EAAwDP,IAAIG,GAAJ,CAAQG,KAAR,CAAcE,MAAtE,CAApB;AACD;;AAEDT,mBAAiBC,GAAjB,EAAiC;AAC/B,6BAAUA,IAAIG,GAAJ,IAAWH,IAAIG,GAAJ,CAAQC,MAA7B;AACA,QAAI,CAAC,KAAKV,gBAAV,EAA4B;AAC1B,WAAKD,SAAL,GAAiB,EAAjB;AACD;AACD,SAAKA,SAAL,CAAeY,IAAf,CACE,6BAAoBL,IAAIG,GAAJ,CAAQC,MAA5B,EAAoCJ,IAAIG,GAAJ,CAAQG,KAAR,CAAcC,IAAlD,EAAwDP,IAAIG,GAAJ,CAAQG,KAAR,CAAcE,MAAtE,EAA8E,KAAKhB,MAAL,CAAYiB,YAAZ,CAAyBC,MAAvG,CADF;AAGD;;AAEDC,gCAA8BX,GAA9B,EAAsE;AACpE,6BAAUA,IAAIG,GAAJ,IAAWH,IAAIG,GAAJ,CAAQC,MAA7B;AACA,QAAIQ,IAAI,CAAR;AACA,QAAIC,oBAA4C,EAAhD;AACA,WAAOD,IAAI,KAAKnB,SAAL,CAAeiB,MAA1B,EAAkC;AAChC,UAAII,UAAU,KAAKrB,SAAL,CAAemB,CAAf,CAAd;AACA,UAAIE,QAAQC,UAAR,CAAmBf,GAAnB,EAAwB,KAAKR,MAAL,CAAYiB,YAAZ,CAAyBC,MAAjD,CAAJ,EAA8D;AAC5DG,0BAAkBR,IAAlB,CAAuBS,OAAvB;AACA,aAAKrB,SAAL,CAAeuB,MAAf,CAAsBJ,CAAtB,EAAyB,CAAzB;AACD,OAHD,MAGO;AACLA;AACD;AACF;AACD,WAAOC,iBAAP;AACD;AArD0B;QAAhBzB,e,GAAAA,e,EAjBb","file":"SteppingManager.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { BabelNode } from \"babel-types\";\nimport invariant from \"./../common/invariant.js\";\nimport { Stepper, StepIntoStepper, StepOverStepper } from \"./Stepper.js\";\nimport type { Realm } from \"./../../realm.js\";\nimport type { StoppableObject } from \"./StopEventManager.js\";\n\nexport class SteppingManager {\n  constructor(realm: Realm, keepOldSteppers?: boolean) {\n    this._realm = realm;\n    this._steppers = [];\n    this._keepOldSteppers = false;\n    if (keepOldSteppers) this._keepOldSteppers = true;\n  }\n  _realm: Realm;\n  _keepOldSteppers: boolean;\n  _steppers: Array<Stepper>;\n\n  processStepCommand(kind: \"in\" | \"over\" | \"out\", currentNode: BabelNode) {\n    if (kind === \"in\") {\n      this._processStepIn(currentNode);\n    } else if (kind === \"over\") {\n      this._processStepOver(currentNode);\n    }\n    // TODO: implement stepOver and stepOut\n  }\n\n  _processStepIn(ast: BabelNode) {\n    invariant(this._stepInto === undefined);\n    invariant(ast.loc && ast.loc.source);\n    if (!this._keepOldSteppers) {\n      this._steppers = [];\n    }\n    this._steppers.push(new StepIntoStepper(ast.loc.source, ast.loc.start.line, ast.loc.start.column));\n  }\n\n  _processStepOver(ast: BabelNode) {\n    invariant(ast.loc && ast.loc.source);\n    if (!this._keepOldSteppers) {\n      this._steppers = [];\n    }\n    this._steppers.push(\n      new StepOverStepper(ast.loc.source, ast.loc.start.line, ast.loc.start.column, this._realm.contextStack.length)\n    );\n  }\n\n  getAndDeleteCompletedSteppers(ast: BabelNode): Array<StoppableObject> {\n    invariant(ast.loc && ast.loc.source);\n    let i = 0;\n    let completedSteppers: Array<StoppableObject> = [];\n    while (i < this._steppers.length) {\n      let stepper = this._steppers[i];\n      if (stepper.isComplete(ast, this._realm.contextStack.length)) {\n        completedSteppers.push(stepper);\n        this._steppers.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n    return completedSteppers;\n  }\n}\n"]}