{"version":3,"sources":["../../../../src/debugger/common/channel/MessageMarshaller.js"],"names":["MessageMarshaller","constructor","_lastRunRequestID","marshallBreakpointAcknowledge","requestID","messageType","breakpoints","JSON","stringify","marshallStoppedResponse","reason","filePath","line","column","result","kind","STOPPED_RESPONSE","marshallDebuggerStart","DEBUGGER_ATTACHED","marshallContinueRequest","PREPACK_RUN_COMMAND","marshallSetBreakpointsRequest","BREAKPOINT_ADD_COMMAND","marshallStackFramesRequest","STACKFRAMES_COMMAND","marshallStackFramesResponse","stackframes","STACKFRAMES_RESPONSE","marshallScopesRequest","frameId","SCOPES_COMMAND","marshallScopesResponse","scopes","SCOPES_RESPONSE","marshallVariablesRequest","variablesReference","VARIABLES_COMMAND","marshallVariablesResponse","variables","VARIABLES_RESPONSE","marshallStepIntoRequest","STEPINTO_COMMAND","marshallStepOverRequest","STEPOVER_COMMAND","marshallEvaluateRequest","expression","evalArgs","undefined","EVALUATE_COMMAND","marshallEvaluateResponse","evalResult","EVALUATE_RESPONSE","unmarshallRequest","message","parts","split","length","parseInt","isNaN","command","args","runArgs","_unmarshallBreakpointsArguments","slice","join","stackFrameArgs","_unmarshallScopesArguments","_unmarshallVariablesArguments","stepIntoArgs","stepOverArgs","_unmarshallEvaluateArguments","id","arguments","responseString","parse","breakpoint","hasOwnProperty","varRef","unmarshallResponse","dbgResult","resultString","PREPACK_READY_RESPONSE","_unmarshallReadyResult","BREAKPOINT_ADD_ACKNOWLEDGE","_unmarshallBreakpointsAddResult","_unmarshallStoppedResult","_unmarshallStackframesResult","_unmarshallScopesResult","_unmarshallVariablesResult","_unmarshallEvaluateResult","dbgResponse","e","frames","Array","isArray","frame","scope","variable"],"mappings":";;;;;;;AAUA;;AA0BA;;;;AACA;;;;AAEO,MAAMA,iBAAN,CAAwB;AAC7BC,gBAAc;AACZ,SAAKC,iBAAL,GAAyB,CAAzB;AACD;;;AAGDC,gCAA8BC,SAA9B,EAAiDC,WAAjD,EAAsEC,WAAtE,EAA8G;AAC5G,WAAQ,GAAEF,SAAU,IAAGC,WAAY,IAAGE,KAAKC,SAAL,CAAeF,WAAf,CAA4B,EAAlE;AACD;;AAEDG,0BAAwBC,MAAxB,EAA+CC,QAA/C,EAAiEC,IAAjE,EAA+EC,MAA/E,EAAuG;AACrG,QAAIC,SAAwB;AAC1BC,YAAM,SADoB;AAE1BL,cAAQA,MAFkB;AAG1BC,gBAAUA,QAHgB;AAI1BC,YAAMA,IAJoB;AAK1BC,cAAQA;AALkB,KAA5B;AAOA,WAAQ,GAAE,KAAKX,iBAAkB,IAAG,2BAAac,gBAAiB,IAAGT,KAAKC,SAAL,CAAeM,MAAf,CAAuB,EAA5F;AACD;;AAEDG,wBAAsBb,SAAtB,EAAiD;AAC/C,WAAQ,GAAEA,SAAU,IAAG,2BAAac,iBAAkB,EAAtD;AACD;;AAEDC,0BAAwBf,SAAxB,EAAmD;AACjD,WAAQ,GAAEA,SAAU,IAAG,2BAAagB,mBAAoB,EAAxD;AACD;;AAEDC,gCAA8BjB,SAA9B,EAAiDE,WAAjD,EAAyF;AACvF,WAAQ,GAAEF,SAAU,IAAG,2BAAakB,sBAAuB,IAAGf,KAAKC,SAAL,CAAeF,WAAf,CAA4B,EAA1F;AACD;;AAEDiB,6BAA2BnB,SAA3B,EAAsD;AACpD,WAAQ,GAAEA,SAAU,IAAG,2BAAaoB,mBAAoB,EAAxD;AACD;;AAEDC,8BAA4BrB,SAA5B,EAA+CsB,WAA/C,EAAuF;AACrF,WAAQ,GAAEtB,SAAU,IAAG,2BAAauB,oBAAqB,IAAGpB,KAAKC,SAAL,CAAekB,WAAf,CAA4B,EAAxF;AACD;;AAEDE,wBAAsBxB,SAAtB,EAAyCyB,OAAzC,EAAkE;AAChE,WAAQ,GAAEzB,SAAU,IAAG,2BAAa0B,cAAe,IAAGD,OAAQ,EAA9D;AACD;;AAEDE,yBAAuB3B,SAAvB,EAA0C4B,MAA1C,EAAwE;AACtE,WAAQ,GAAE5B,SAAU,IAAG,2BAAa6B,eAAgB,IAAG1B,KAAKC,SAAL,CAAewB,MAAf,CAAuB,EAA9E;AACD;;AAEDE,2BAAyB9B,SAAzB,EAA4C+B,kBAA5C,EAAgF;AAC9E,WAAQ,GAAE/B,SAAU,IAAG,2BAAagC,iBAAkB,IAAGD,kBAAmB,EAA5E;AACD;;AAEDE,4BAA0BjC,SAA1B,EAA6CkC,SAA7C,EAAiF;AAC/E,WAAQ,GAAElC,SAAU,IAAG,2BAAamC,kBAAmB,IAAGhC,KAAKC,SAAL,CAAe8B,SAAf,CAA0B,EAApF;AACD;;AAEDE,0BAAwBpC,SAAxB,EAAmD;AACjD,WAAQ,GAAEA,SAAU,IAAG,2BAAaqC,gBAAiB,EAArD;AACD;;AAEDC,0BAAwBtC,SAAxB,EAAmD;AACjD,WAAQ,GAAEA,SAAU,IAAG,2BAAauC,gBAAiB,EAArD;AACD;;AAEDC,0BAAwBxC,SAAxB,EAA2CyB,OAA3C,EAAmEgB,UAAnE,EAA+F;AAC7F,QAAIC,WAA8B;AAChC/B,YAAM,UAD0B;AAEhC8B,kBAAYA;AAFoB,KAAlC;AAIA,QAAIhB,YAAYkB,SAAhB,EAA2B;AACzBD,eAASjB,OAAT,GAAmBA,OAAnB;AACD;AACD,WAAQ,GAAEzB,SAAU,IAAG,2BAAa4C,gBAAiB,IAAGzC,KAAKC,SAAL,CAAesC,QAAf,CAAyB,EAAjF;AACD;;AAEDG,2BAAyB7C,SAAzB,EAA4C8C,UAA5C,EAAgF;AAC9E,WAAQ,GAAE9C,SAAU,IAAG,2BAAa+C,iBAAkB,IAAG5C,KAAKC,SAAL,CAAe0C,UAAf,CAA2B,EAApF;AACD;;AAEDE,oBAAkBC,OAAlB,EAAoD;AAClD,QAAIC,QAAQD,QAAQE,KAAR,CAAc,GAAd,CAAZ;AACA;AACA,6BAAUD,MAAME,MAAN,IAAgB,CAA1B,EAA6B,4BAA7B;AACA;AACA,QAAIpD,YAAYqD,SAASH,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAhB;AACA,6BAAU,CAACI,MAAMtD,SAAN,CAAX,EAA6B,6BAA7B;AACA,QAAIuD,UAAUL,MAAM,CAAN,CAAd;AACA,QAAIM,IAAJ;AACA,YAAQD,OAAR;AACE,WAAK,2BAAavC,mBAAlB;AACE,aAAKlB,iBAAL,GAAyBE,SAAzB;AACA,YAAIyD,UAAwB;AAC1B9C,gBAAM;AADoB,SAA5B;AAGA6C,eAAOC,OAAP;AACA;AACF,WAAK,2BAAavC,sBAAlB;AACEsC,eAAO,KAAKE,+BAAL,CAAqC1D,SAArC,EAAgDkD,MAAMS,KAAN,CAAY,CAAZ,EAAeC,IAAf,CAAoB,GAApB,CAAhD,CAAP;AACA;AACF,WAAK,2BAAaxC,mBAAlB;AACE,YAAIyC,iBAAsC;AACxClD,gBAAM;AADkC,SAA1C;AAGA6C,eAAOK,cAAP;AACA;AACF,WAAK,2BAAanC,cAAlB;AACE8B,eAAO,KAAKM,0BAAL,CAAgC9D,SAAhC,EAA2CkD,MAAM,CAAN,CAA3C,CAAP;AACA;AACF,WAAK,2BAAalB,iBAAlB;AACEwB,eAAO,KAAKO,6BAAL,CAAmC/D,SAAnC,EAA8CkD,MAAM,CAAN,CAA9C,CAAP;AACA;AACF,WAAK,2BAAab,gBAAlB;AACE,aAAKvC,iBAAL,GAAyBE,SAAzB;AACA,YAAIgE,eAAkC;AACpCrD,gBAAM;AAD8B,SAAtC;AAGA6C,eAAOQ,YAAP;AACA;AACF,WAAK,2BAAazB,gBAAlB;AACE,aAAKzC,iBAAL,GAAyBE,SAAzB;AACA,YAAIiE,eAAkC;AACpCtD,gBAAM;AAD8B,SAAtC;AAGA6C,eAAOS,YAAP;AACA;AACF,WAAK,2BAAarB,gBAAlB;AACEY,eAAO,KAAKU,4BAAL,CAAkClE,SAAlC,EAA6CkD,MAAMS,KAAN,CAAY,CAAZ,EAAeC,IAAf,CAAoB,GAApB,CAA7C,CAAP;AACA;AACF;AACE,cAAM,iCAAkB,iBAAlB,EAAqC,mCAAmCL,OAAxE,CAAN;AAzCJ;AA2CA,6BAAUC,SAASb,SAAnB;AACA,QAAIjC,SAA0B;AAC5ByD,UAAInE,SADwB;AAE5BuD,eAASA,OAFmB;AAG5Ba,iBAAWZ;AAHiB,KAA9B;AAKA,WAAO9C,MAAP;AACD;;AAEDgD,kCAAgC1D,SAAhC,EAAmDqE,cAAnD,EAAiG;AAC/F,QAAInE,cAAcC,KAAKmE,KAAL,CAAWD,cAAX,CAAlB;AACA,SAAK,MAAME,UAAX,IAAyBrE,WAAzB,EAAsC;AACpC,+BAAUqE,WAAWC,cAAX,CAA0B,UAA1B,CAAV,EAAiD,sCAAjD;AACA,+BAAUD,WAAWC,cAAX,CAA0B,MAA1B,CAAV,EAA6C,kCAA7C;AACA,+BAAUD,WAAWC,cAAX,CAA0B,QAA1B,CAAV,EAA+C,oCAA/C;AACA,+BAAU,CAAClB,MAAMiB,WAAW/D,IAAjB,CAAX;AACA,+BAAU,CAAC8C,MAAMiB,WAAW9D,MAAjB,CAAX;AACD;AACD,QAAIC,SAA+B;AACjCC,YAAM,YAD2B;AAEjCT,mBAAaA;AAFoB,KAAnC;AAIA,WAAOQ,MAAP;AACD;;AAEDoD,6BAA2B9D,SAA3B,EAA8CqE,cAA9C,EAAuF;AACrF,QAAI5C,UAAU4B,SAASgB,cAAT,EAAyB,EAAzB,CAAd;AACA,6BAAU,CAACf,MAAM7B,OAAN,CAAX;AACA,QAAIf,SAA0B;AAC5BC,YAAM,QADsB;AAE5Bc,eAASA;AAFmB,KAA9B;AAIA,WAAOf,MAAP;AACD;;AAEDqD,gCAA8B/D,SAA9B,EAAiDqE,cAAjD,EAA6F;AAC3F,QAAII,SAASpB,SAASgB,cAAT,EAAyB,EAAzB,CAAb;AACA,6BAAU,CAACf,MAAMmB,MAAN,CAAX;AACA,QAAI/D,SAA6B;AAC/BC,YAAM,WADyB;AAE/BoB,0BAAoB0C;AAFW,KAAjC;AAIA,WAAO/D,MAAP;AACD;;AAEDwD,+BAA6BlE,SAA7B,EAAgDqE,cAAhD,EAA2F;AACzF,QAAI3B,WAAWvC,KAAKmE,KAAL,CAAWD,cAAX,CAAf;AACA,6BAAU3B,SAAS8B,cAAT,CAAwB,MAAxB,CAAV,EAA2C,uCAA3C;AACA,6BAAU9B,SAAS8B,cAAT,CAAwB,YAAxB,CAAV,EAAiD,6CAAjD;AACA,QAAI9B,SAAS8B,cAAT,CAAwB,SAAxB,CAAJ,EAAwC,yBAAU,CAAClB,MAAMZ,SAASjB,OAAf,CAAX;AACxC,WAAOiB,QAAP;AACD;;AAEDgC,qBAAmBzB,OAAnB,EAAsD;AACpD,QAAI;AACF,UAAIC,QAAQD,QAAQE,KAAR,CAAc,GAAd,CAAZ;AACA,UAAInD,YAAYqD,SAASH,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAhB;AACA,+BAAU,CAACI,MAAMtD,SAAN,CAAX;AACA,UAAIC,cAAciD,MAAM,CAAN,CAAlB;AACA,UAAIyB,SAAJ;AACA,UAAIC,eAAe1B,MAAMS,KAAN,CAAY,CAAZ,EAAeC,IAAf,CAAoB,GAApB,CAAnB;AACA,UAAI3D,gBAAgB,2BAAa4E,sBAAjC,EAAyD;AACvDF,oBAAY,KAAKG,sBAAL,EAAZ;AACD,OAFD,MAEO,IAAI7E,gBAAgB,2BAAa8E,0BAAjC,EAA6D;AAClEJ,oBAAY,KAAKK,+BAAL,CAAqCJ,YAArC,CAAZ;AACD,OAFM,MAEA,IAAI3E,gBAAgB,2BAAaW,gBAAjC,EAAmD;AACxD+D,oBAAY,KAAKM,wBAAL,CAA8BL,YAA9B,CAAZ;AACD,OAFM,MAEA,IAAI3E,gBAAgB,2BAAasB,oBAAjC,EAAuD;AAC5DoD,oBAAY,KAAKO,4BAAL,CAAkCN,YAAlC,CAAZ;AACD,OAFM,MAEA,IAAI3E,gBAAgB,2BAAa4B,eAAjC,EAAkD;AACvD8C,oBAAY,KAAKQ,uBAAL,CAA6BP,YAA7B,CAAZ;AACD,OAFM,MAEA,IAAI3E,gBAAgB,2BAAakC,kBAAjC,EAAqD;AAC1DwC,oBAAY,KAAKS,0BAAL,CAAgCR,YAAhC,CAAZ;AACD,OAFM,MAEA,IAAI3E,gBAAgB,2BAAa8C,iBAAjC,EAAoD;AACzD4B,oBAAY,KAAKU,yBAAL,CAA+BT,YAA/B,CAAZ;AACD,OAFM,MAEA;AACL,iCAAU,KAAV,EAAiB,0BAAjB;AACD;;AAED,UAAIU,cAAgC;AAClCnB,YAAInE,SAD8B;AAElCU,gBAAQiE;AAF0B,OAApC;AAIA,aAAOW,WAAP;AACD,KA9BD,CA8BE,OAAOC,CAAP,EAAU;AACV,YAAM,iCAAkB,iBAAlB,EAAqCA,EAAEtC,OAAvC,CAAN;AACD;AACF;;AAEDiC,+BAA6BN,YAA7B,EAAqE;AACnE,QAAIY,SAASrF,KAAKmE,KAAL,CAAWM,YAAX,CAAb;AACA,6BAAUa,MAAMC,OAAN,CAAcF,MAAd,CAAV,EAAiC,8BAAjC;AACA,SAAK,MAAMG,KAAX,IAAoBH,MAApB,EAA4B;AAC1B,+BAAUG,MAAMnB,cAAN,CAAqB,IAArB,CAAV,EAAsC,2BAAtC;AACA,+BAAUmB,MAAMnB,cAAN,CAAqB,UAArB,CAAV,EAA4C,iCAA5C;AACA,+BAAUmB,MAAMnB,cAAN,CAAqB,MAArB,CAAV,EAAwC,oCAAxC;AACA,+BAAUmB,MAAMnB,cAAN,CAAqB,QAArB,CAAV,EAA0C,sCAA1C;AACA,+BAAUmB,MAAMnB,cAAN,CAAqB,cAArB,CAAV,EAAgD,sCAAhD;AACD;AACD,QAAI9D,SAA2B;AAC7BC,YAAM,YADuB;AAE7BW,mBAAakE;AAFgB,KAA/B;AAIA,WAAO9E,MAAP;AACD;;AAEDyE,0BAAwBP,YAAxB,EAA4D;AAC1D,QAAIhD,SAASzB,KAAKmE,KAAL,CAAWM,YAAX,CAAb;AACA,6BAAUa,MAAMC,OAAN,CAAc9D,MAAd,CAAV,EAAiC,wBAAjC;AACA,SAAK,MAAMgE,KAAX,IAAoBhE,MAApB,EAA4B;AAC1B,+BAAUgE,MAAMpB,cAAN,CAAqB,MAArB,CAAV,EAAwC,uBAAxC;AACA,+BAAUoB,MAAMpB,cAAN,CAAqB,oBAArB,CAAV,EAAsD,qCAAtD;AACA,+BAAUoB,MAAMpB,cAAN,CAAqB,WAArB,CAAV,EAA6C,4BAA7C;AACD;AACD,QAAI9D,SAAuB;AACzBC,YAAM,QADmB;AAEzBiB,cAAQA;AAFiB,KAA3B;AAIA,WAAOlB,MAAP;AACD;;AAED0E,6BAA2BR,YAA3B,EAAkE;AAChE,QAAI1C,YAAY/B,KAAKmE,KAAL,CAAWM,YAAX,CAAhB;AACA,6BAAUa,MAAMC,OAAN,CAAcxD,SAAd,CAAV,EAAoC,2BAApC;AACA,SAAK,MAAM2D,QAAX,IAAuB3D,SAAvB,EAAkC;AAChC,+BAAU2D,SAASrB,cAAT,CAAwB,MAAxB,CAAV;AACA,+BAAUqB,SAASrB,cAAT,CAAwB,OAAxB,CAAV;AACA,+BAAUqB,SAASrB,cAAT,CAAwB,oBAAxB,CAAV;AACD;AACD,QAAI9D,SAA0B;AAC5BC,YAAM,WADsB;AAE5BuB,iBAAWA;AAFiB,KAA9B;AAIA,WAAOxB,MAAP;AACD;;AAED2E,4BAA0BT,YAA1B,EAAgE;AAC9D,QAAI9B,aAAa3C,KAAKmE,KAAL,CAAWM,YAAX,CAAjB;AACA,6BAAU9B,WAAW0B,cAAX,CAA0B,MAA1B,CAAV,EAA6C,mCAA7C;AACA,6BAAU1B,WAAWnC,IAAX,KAAoB,UAA9B,EAA0C,+BAA1C;AACA,6BAAUmC,WAAW0B,cAAX,CAA0B,cAA1B,EAA0C,4CAA1C,CAAV;AACA,6BAAU1B,WAAW0B,cAAX,CAA0B,MAA1B,EAAkC,mCAAlC,CAAV;AACA,6BAAU1B,WAAW0B,cAAX,CAA0B,oBAA1B,EAAgD,iDAAhD,CAAV;AACA,WAAO1B,UAAP;AACD;;AAEDkC,kCAAgCJ,YAAhC,EAA4E;AAC1E,QAAI1E,cAAcC,KAAKmE,KAAL,CAAWM,YAAX,CAAlB;AACA,6BAAUa,MAAMC,OAAN,CAAcxF,WAAd,CAAV;AACA,SAAK,MAAMqE,UAAX,IAAyBrE,WAAzB,EAAsC;AACpC,+BAAUqE,WAAWC,cAAX,CAA0B,UAA1B,CAAV,EAAiD,sCAAjD;AACA,+BAAUD,WAAWC,cAAX,CAA0B,MAA1B,CAAV,EAA6C,kCAA7C;AACA,+BAAUD,WAAWC,cAAX,CAA0B,QAA1B,CAAV,EAA+C,oCAA/C;AACA,+BAAU,CAAClB,MAAMiB,WAAW/D,IAAjB,CAAX;AACA,+BAAU,CAAC8C,MAAMiB,WAAW9D,MAAjB,CAAX;AACD;;AAED,QAAIC,SAA+B;AACjCC,YAAM,gBAD2B;AAEjCT,mBAAaA;AAFoB,KAAnC;AAIA,WAAOQ,MAAP;AACD;;AAEDuE,2BAAyBL,YAAzB,EAA8D;AAC5D,QAAIlE,SAASP,KAAKmE,KAAL,CAAWM,YAAX,CAAb;AACA,6BAAUlE,OAAOC,IAAP,KAAgB,SAA1B;AACA,6BAAUD,OAAO8D,cAAP,CAAsB,QAAtB,CAAV;AACA,6BAAU9D,OAAO8D,cAAP,CAAsB,UAAtB,CAAV;AACA,6BAAU9D,OAAO8D,cAAP,CAAsB,MAAtB,CAAV;AACA,6BAAU,CAAClB,MAAM5C,OAAOF,IAAb,CAAX;AACA,6BAAUE,OAAO8D,cAAP,CAAsB,QAAtB,CAAV;AACA,6BAAU,CAAClB,MAAM5C,OAAOD,MAAb,CAAX;AACA,WAAOC,MAAP;AACD;;AAEDoE,2BAAsC;AACpC,QAAIpE,SAAsB;AACxBC,YAAM;AADkB,KAA1B;AAGA,WAAOD,MAAP;AACD;AAzT4B;QAAlBd,iB,GAAAA,iB,EAvCb","file":"MessageMarshaller.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport { DebugMessage } from \"./DebugMessage.js\";\nimport type {\n  Breakpoint,\n  BreakpointsArguments,\n  ScopesArguments,\n  Stackframe,\n  DebuggerResponse,\n  StackframeResult,\n  BreakpointsAddResult,\n  StoppedResult,\n  ReadyResult,\n  Scope,\n  ScopesResult,\n  Variable,\n  VariablesArguments,\n  VariablesResult,\n  DebuggerRequest,\n  DebuggerRequestArguments,\n  RunArguments,\n  StackframeArguments,\n  StepIntoArguments,\n  StepOverArguments,\n  StoppedReason,\n  EvaluateArguments,\n  EvaluateResult,\n} from \"./../types.js\";\nimport invariant from \"./../invariant.js\";\nimport { DebuggerError } from \"./../DebuggerError.js\";\n\nexport class MessageMarshaller {\n  constructor() {\n    this._lastRunRequestID = 0;\n  }\n  _lastRunRequestID: number;\n\n  marshallBreakpointAcknowledge(requestID: number, messageType: string, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${messageType} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStoppedResponse(reason: StoppedReason, filePath: string, line: number, column: number): string {\n    let result: StoppedResult = {\n      kind: \"stopped\",\n      reason: reason,\n      filePath: filePath,\n      line: line,\n      column: column,\n    };\n    return `${this._lastRunRequestID} ${DebugMessage.STOPPED_RESPONSE} ${JSON.stringify(result)}`;\n  }\n\n  marshallDebuggerStart(requestID: number): string {\n    return `${requestID} ${DebugMessage.DEBUGGER_ATTACHED}`;\n  }\n\n  marshallContinueRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.PREPACK_RUN_COMMAND}`;\n  }\n\n  marshallSetBreakpointsRequest(requestID: number, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${DebugMessage.BREAKPOINT_ADD_COMMAND} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStackFramesRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_COMMAND}`;\n  }\n\n  marshallStackFramesResponse(requestID: number, stackframes: Array<Stackframe>): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_RESPONSE} ${JSON.stringify(stackframes)}`;\n  }\n\n  marshallScopesRequest(requestID: number, frameId: number): string {\n    return `${requestID} ${DebugMessage.SCOPES_COMMAND} ${frameId}`;\n  }\n\n  marshallScopesResponse(requestID: number, scopes: Array<Scope>): string {\n    return `${requestID} ${DebugMessage.SCOPES_RESPONSE} ${JSON.stringify(scopes)}`;\n  }\n\n  marshallVariablesRequest(requestID: number, variablesReference: number): string {\n    return `${requestID} ${DebugMessage.VARIABLES_COMMAND} ${variablesReference}`;\n  }\n\n  marshallVariablesResponse(requestID: number, variables: Array<Variable>): string {\n    return `${requestID} ${DebugMessage.VARIABLES_RESPONSE} ${JSON.stringify(variables)}`;\n  }\n\n  marshallStepIntoRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPINTO_COMMAND}`;\n  }\n\n  marshallStepOverRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPOVER_COMMAND}`;\n  }\n\n  marshallEvaluateRequest(requestID: number, frameId: void | number, expression: string): string {\n    let evalArgs: EvaluateArguments = {\n      kind: \"evaluate\",\n      expression: expression,\n    };\n    if (frameId !== undefined) {\n      evalArgs.frameId = frameId;\n    }\n    return `${requestID} ${DebugMessage.EVALUATE_COMMAND} ${JSON.stringify(evalArgs)}`;\n  }\n\n  marshallEvaluateResponse(requestID: number, evalResult: EvaluateResult): string {\n    return `${requestID} ${DebugMessage.EVALUATE_RESPONSE} ${JSON.stringify(evalResult)}`;\n  }\n\n  unmarshallRequest(message: string): DebuggerRequest {\n    let parts = message.split(\" \");\n    // each request must have a length and a command\n    invariant(parts.length >= 2, \"Request is not well formed\");\n    // unique ID for each request\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID), \"Request ID must be a number\");\n    let command = parts[1];\n    let args: DebuggerRequestArguments;\n    switch (command) {\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        this._lastRunRequestID = requestID;\n        let runArgs: RunArguments = {\n          kind: \"run\",\n        };\n        args = runArgs;\n        break;\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        args = this._unmarshallBreakpointsArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        let stackFrameArgs: StackframeArguments = {\n          kind: \"stackframe\",\n        };\n        args = stackFrameArgs;\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        args = this._unmarshallScopesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        args = this._unmarshallVariablesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.STEPINTO_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepIntoArgs: StepIntoArguments = {\n          kind: \"stepInto\",\n        };\n        args = stepIntoArgs;\n        break;\n      case DebugMessage.STEPOVER_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepOverArgs: StepOverArguments = {\n          kind: \"stepOver\",\n        };\n        args = stepOverArgs;\n        break;\n      case DebugMessage.EVALUATE_COMMAND:\n        args = this._unmarshallEvaluateArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    invariant(args !== undefined);\n    let result: DebuggerRequest = {\n      id: requestID,\n      command: command,\n      arguments: args,\n    };\n    return result;\n  }\n\n  _unmarshallBreakpointsArguments(requestID: number, responseString: string): BreakpointsArguments {\n    let breakpoints = JSON.parse(responseString);\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n    let result: BreakpointsArguments = {\n      kind: \"breakpoint\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallScopesArguments(requestID: number, responseString: string): ScopesArguments {\n    let frameId = parseInt(responseString, 10);\n    invariant(!isNaN(frameId));\n    let result: ScopesArguments = {\n      kind: \"scopes\",\n      frameId: frameId,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesArguments(requestID: number, responseString: string): VariablesArguments {\n    let varRef = parseInt(responseString, 10);\n    invariant(!isNaN(varRef));\n    let result: VariablesArguments = {\n      kind: \"variables\",\n      variablesReference: varRef,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateArguments(requestID: number, responseString: string): EvaluateArguments {\n    let evalArgs = JSON.parse(responseString);\n    invariant(evalArgs.hasOwnProperty(\"kind\"), \"Evaluate arguments missing kind field\");\n    invariant(evalArgs.hasOwnProperty(\"expression\"), \"Evaluate arguments missing expression field\");\n    if (evalArgs.hasOwnProperty(\"frameId\")) invariant(!isNaN(evalArgs.frameId));\n    return evalArgs;\n  }\n\n  unmarshallResponse(message: string): DebuggerResponse {\n    try {\n      let parts = message.split(\" \");\n      let requestID = parseInt(parts[0], 10);\n      invariant(!isNaN(requestID));\n      let messageType = parts[1];\n      let dbgResult;\n      let resultString = parts.slice(2).join(\" \");\n      if (messageType === DebugMessage.PREPACK_READY_RESPONSE) {\n        dbgResult = this._unmarshallReadyResult();\n      } else if (messageType === DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE) {\n        dbgResult = this._unmarshallBreakpointsAddResult(resultString);\n      } else if (messageType === DebugMessage.STOPPED_RESPONSE) {\n        dbgResult = this._unmarshallStoppedResult(resultString);\n      } else if (messageType === DebugMessage.STACKFRAMES_RESPONSE) {\n        dbgResult = this._unmarshallStackframesResult(resultString);\n      } else if (messageType === DebugMessage.SCOPES_RESPONSE) {\n        dbgResult = this._unmarshallScopesResult(resultString);\n      } else if (messageType === DebugMessage.VARIABLES_RESPONSE) {\n        dbgResult = this._unmarshallVariablesResult(resultString);\n      } else if (messageType === DebugMessage.EVALUATE_RESPONSE) {\n        dbgResult = this._unmarshallEvaluateResult(resultString);\n      } else {\n        invariant(false, \"Unexpected response type\");\n      }\n\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: dbgResult,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid command\", e.message);\n    }\n  }\n\n  _unmarshallStackframesResult(resultString: string): StackframeResult {\n    let frames = JSON.parse(resultString);\n    invariant(Array.isArray(frames), \"Stack frames is not an array\");\n    for (const frame of frames) {\n      invariant(frame.hasOwnProperty(\"id\"), \"Stack frame is missing id\");\n      invariant(frame.hasOwnProperty(\"fileName\"), \"Stack frame is missing filename\");\n      invariant(frame.hasOwnProperty(\"line\"), \"Stack frame is missing line number\");\n      invariant(frame.hasOwnProperty(\"column\"), \"Stack frame is missing column number\");\n      invariant(frame.hasOwnProperty(\"functionName\"), \"Stack frame is missing function name\");\n    }\n    let result: StackframeResult = {\n      kind: \"stackframe\",\n      stackframes: frames,\n    };\n    return result;\n  }\n\n  _unmarshallScopesResult(resultString: string): ScopesResult {\n    let scopes = JSON.parse(resultString);\n    invariant(Array.isArray(scopes), \"Scopes is not an array\");\n    for (const scope of scopes) {\n      invariant(scope.hasOwnProperty(\"name\"), \"Scope is missing name\");\n      invariant(scope.hasOwnProperty(\"variablesReference\"), \"Scope is missing variablesReference\");\n      invariant(scope.hasOwnProperty(\"expensive\"), \"Scope is missing expensive\");\n    }\n    let result: ScopesResult = {\n      kind: \"scopes\",\n      scopes: scopes,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesResult(resultString: string): VariablesResult {\n    let variables = JSON.parse(resultString);\n    invariant(Array.isArray(variables), \"Variables is not an array\");\n    for (const variable of variables) {\n      invariant(variable.hasOwnProperty(\"name\"));\n      invariant(variable.hasOwnProperty(\"value\"));\n      invariant(variable.hasOwnProperty(\"variablesReference\"));\n    }\n    let result: VariablesResult = {\n      kind: \"variables\",\n      variables: variables,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateResult(resultString: string): EvaluateResult {\n    let evalResult = JSON.parse(resultString);\n    invariant(evalResult.hasOwnProperty(\"kind\"), \"eval result missing kind property\");\n    invariant(evalResult.kind === \"evaluate\", \"eval result is the wrong kind\");\n    invariant(evalResult.hasOwnProperty(\"displayValue\", \"eval result missing display value property\"));\n    invariant(evalResult.hasOwnProperty(\"type\", \"eval result missing type property\"));\n    invariant(evalResult.hasOwnProperty(\"variablesReference\", \"eval result missing variablesReference property\"));\n    return evalResult;\n  }\n\n  _unmarshallBreakpointsAddResult(resultString: string): BreakpointsAddResult {\n    let breakpoints = JSON.parse(resultString);\n    invariant(Array.isArray(breakpoints));\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n\n    let result: BreakpointsAddResult = {\n      kind: \"breakpoint-add\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallStoppedResult(resultString: string): StoppedResult {\n    let result = JSON.parse(resultString);\n    invariant(result.kind === \"stopped\");\n    invariant(result.hasOwnProperty(\"reason\"));\n    invariant(result.hasOwnProperty(\"filePath\"));\n    invariant(result.hasOwnProperty(\"line\"));\n    invariant(!isNaN(result.line));\n    invariant(result.hasOwnProperty(\"column\"));\n    invariant(!isNaN(result.column));\n    return result;\n  }\n\n  _unmarshallReadyResult(): ReadyResult {\n    let result: ReadyResult = {\n      kind: \"ready\",\n    };\n    return result;\n  }\n}\n"]}