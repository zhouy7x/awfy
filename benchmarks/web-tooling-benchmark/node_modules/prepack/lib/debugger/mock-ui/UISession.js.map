{"version":3,"sources":["../../../src/debugger/mock-ui/UISession.js"],"names":["DebugProtocol","TWO_CRLF","UISession","constructor","proc","args","_proc","_adapterPath","adapterPath","_prepackRuntime","prepackRuntime","_sourceFile","sourceFile","_prepackArguments","prepackArguments","_sequenceNum","_invalidCount","_dataHandler","_prepackWaiting","_prepackLaunched","_startAdapter","adapterArgs","_adapterProcess","spawn","on","shutdown","stdout","data","handleData","_processMessage","bind","stderr","console","error","toString","message","msg","JSON","parse","type","_processEvent","_processResponse","e","slice","_reader","question","input","_dispatch","event","configDoneArgs","_sendConfigDoneRequest","_uiOutput","body","output","reason","response","command","_processInitializeResponse","_processLaunchResponse","_processThreadsResponse","_processStackTraceResponse","_processScopesResponse","_processVariablesResponse","_processEvaluateResponse","scopes","scope","name","variablesReference","launchArgs","_sendLaunchRequest","frames","stackFrames","frame","source","path","id","line","column","thread","threads","variable","variables","value","evalInfo","result","_executeCommand","parts","split","length","continueArgs","threadId","PREPACK_THREAD_ID","_sendContinueRequest","filePath","parseInt","isNaN","_sendBreakpointRequest","stackFrameArgs","_sendStackFramesRequest","_sendThreadsRequest","frameId","scopesArgs","_sendScopesRequest","varRef","variableArgs","_sendVariablesRequest","stepIntoArgs","_sendStepIntoRequest","stepOverArgs","_sendStepOverRequest","evalFrameId","expression","join","evaluateArgs","_sendEvaluateRequest","success","_sendInitializeRequest","seq","arguments","json","stringify","_packageAndSend","breakpoint","breakpoints","stdin","write","Buffer","byteLength","log","serve","initArgs","clientID","CLI_CLIENTID","adapterID","linesStartAt1","columnsStartAt1","supportsVariableType","supportsVariablePaging","supportsRunInTerminalRequest","pathFormat","createInterface","close","kill","exit"],"mappings":"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","file":"UISession.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport readline from \"readline\";\nimport child_process from \"child_process\";\nimport * as DebugProtocol from \"vscode-debugprotocol\";\nimport { DataHandler } from \"./DataHandler.js\";\nimport { DebuggerConstants } from \"./../common/DebuggerConstants\";\nimport { LaunchRequestArguments } from \"./../common/types.js\";\n\nexport type DebuggerCLIArguments = {\n  adapterPath: string,\n  prepackRuntime: string,\n  sourceFile: string,\n  prepackArguments: Array<string>,\n};\n\n//separator for messages according to the protocol\nconst TWO_CRLF = \"\\r\\n\\r\\n\";\n\n/* Represents one debugging session in the CLI.\n * Read in user input from the command line, parses the input into commands,\n * sends the commands to the adapter and process any responses\n*/\nexport class UISession {\n  constructor(proc: Process, args: DebuggerCLIArguments) {\n    this._proc = proc;\n    this._adapterPath = args.adapterPath;\n    this._prepackRuntime = args.prepackRuntime;\n    this._sourceFile = args.sourceFile;\n    this._prepackArguments = args.prepackArguments;\n    this._sequenceNum = 1;\n    this._invalidCount = 0;\n    this._dataHandler = new DataHandler();\n    this._prepackWaiting = false;\n    this._prepackLaunched = false;\n  }\n  // the parent (i.e. ui) process\n  _proc: Process;\n  //path to the debug adapter\n  _adapterPath: string;\n  // the child (i.e. adapter) process\n  _adapterProcess: child_process.ChildProcess;\n\n  // id number for each message sent\n  _sequenceNum: number;\n  // interface to read in input from the CLI client\n  _reader: readline.Interface;\n  // number of invalid commands\n  _invalidCount: number;\n  // Prepack runtime command (e.g. lib/prepack-cli.js)\n  _prepackRuntime: string;\n  // input source file to Prepack\n  _sourceFile: string;\n  // arguments to start Prepack with\n  _prepackArguments: Array<string>;\n  // handler for any received messages\n  _dataHandler: DataHandler;\n  // flag whether Prepack is waiting for a command\n  _prepackWaiting: boolean;\n  // flag whether Prepack has been launched\n  _prepackLaunched: boolean;\n\n  _startAdapter() {\n    let adapterArgs = [this._adapterPath];\n    this._adapterProcess = child_process.spawn(\"node\", adapterArgs);\n    this._proc.on(\"exit\", () => {\n      this.shutdown();\n    });\n    this._proc.on(\"SIGINT\", () => {\n      this.shutdown();\n    });\n    this._adapterProcess.stdout.on(\"data\", (data: Buffer) => {\n      //handle the received data\n      this._dataHandler.handleData(data, this._processMessage.bind(this));\n    });\n    this._adapterProcess.stderr.on(\"data\", (data: Buffer) => {\n      console.error(data.toString());\n      this.shutdown();\n    });\n  }\n\n  // called from data handler to process a received message\n  _processMessage(message: string): void {\n    try {\n      let msg = JSON.parse(message);\n      if (msg.type === \"event\") {\n        this._processEvent(msg);\n      } else if (msg.type === \"response\") {\n        this._processResponse(msg);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid message: \" + message.slice(0, 1000));\n    }\n    //ask the user for the next command\n    if (this._prepackLaunched && this._prepackWaiting) {\n      this._reader.question(\"(dbg) \", (input: string) => {\n        this._dispatch(input);\n      });\n    }\n  }\n\n  _processEvent(event: DebugProtocol.Event) {\n    if (event.event === \"initialized\") {\n      // the adapter is ready to accept any persisted debug information\n      // (e.g. persisted breakpoints from previous sessions). the CLI\n      // does not have any persisted info, so we can send configDone immediately\n      let configDoneArgs: DebugProtocol.ConfigurationDoneArguments = {};\n      this._sendConfigDoneRequest(configDoneArgs);\n    } else if (event.event === \"output\") {\n      this._uiOutput(\"Prepack output:\\n\" + event.body.output);\n    } else if (event.event === \"terminated\") {\n      this._uiOutput(\"Prepack exited! Shutting down...\");\n      this.shutdown();\n    } else if (event.event === \"stopped\") {\n      this._prepackWaiting = true;\n      if (event.body) {\n        this._uiOutput(event.body.reason);\n      }\n    }\n  }\n\n  _processResponse(response: DebugProtocol.Response) {\n    if (response.command === \"initialize\") {\n      this._processInitializeResponse(((response: any): DebugProtocol.InitializeResponse));\n    } else if (response.command === \"launch\") {\n      this._processLaunchResponse(((response: any): DebugProtocol.LaunchResponse));\n    } else if (response.command === \"threads\") {\n      this._processThreadsResponse(((response: any): DebugProtocol.ThreadsResponse));\n    } else if (response.command === \"stackTrace\") {\n      //flow doesn't have type refinement for interfaces, so must do a cast here\n      this._processStackTraceResponse(((response: any): DebugProtocol.StackTraceResponse));\n    } else if (response.command === \"scopes\") {\n      this._processScopesResponse(((response: any): DebugProtocol.ScopesResponse));\n    } else if (response.command === \"variables\") {\n      this._processVariablesResponse(((response: any): DebugProtocol.VariablesResponse));\n    } else if (response.command === \"evaluate\") {\n      this._processEvaluateResponse(((response: any): DebugProtocol.EvaluateResponse));\n    }\n  }\n\n  _processScopesResponse(response: DebugProtocol.ScopesResponse) {\n    let scopes = response.body.scopes;\n    for (const scope of scopes) {\n      this._uiOutput(`${scope.name} ${scope.variablesReference}`);\n    }\n  }\n\n  _processInitializeResponse(response: DebugProtocol.InitializeResponse) {\n    let launchArgs: LaunchRequestArguments = {\n      prepackRuntime: this._prepackRuntime,\n      sourceFile: this._sourceFile,\n      prepackArguments: this._prepackArguments,\n    };\n    this._sendLaunchRequest(launchArgs);\n  }\n\n  _processLaunchResponse(response: DebugProtocol.LaunchResponse) {\n    this._uiOutput(\"Prepack is ready\");\n    this._prepackLaunched = true;\n    this._prepackWaiting = true;\n    // start reading requests from the user\n    this._reader.question(\"(dbg) \", (input: string) => {\n      this._dispatch(input);\n    });\n  }\n\n  _processStackTraceResponse(response: DebugProtocol.StackTraceResponse) {\n    let frames = response.body.stackFrames;\n    for (const frame of frames) {\n      if (frame.source && frame.source.path) {\n        this._uiOutput(`${frame.id}: ${frame.name} ${frame.source.path} ${frame.line}:${frame.column}`);\n      } else {\n        this._uiOutput(`${frame.id}: ${frame.name} unknown source`);\n      }\n    }\n  }\n\n  _processThreadsResponse(response: DebugProtocol.ThreadsResponse) {\n    for (const thread of response.body.threads) {\n      this._uiOutput(`${thread.id}: ${thread.name}`);\n    }\n  }\n\n  _processVariablesResponse(response: DebugProtocol.VariablesResponse) {\n    for (const variable of response.body.variables) {\n      if (variable.variablesReference === 0) {\n        // 0 means there are not more nested variables to return\n        this._uiOutput(`${variable.name}: ${variable.value}`);\n      } else {\n        this._uiOutput(`${variable.name}: ${variable.value} ${variable.variablesReference}`);\n      }\n    }\n  }\n\n  _processEvaluateResponse(response: DebugProtocol.EvaluateResponse) {\n    let evalInfo = response.body;\n    this._uiOutput(\"Type: \" + (evalInfo.type || \"unknown\"));\n    this._uiOutput(evalInfo.result);\n    this._uiOutput(\"Variables Reference: \" + evalInfo.variablesReference);\n  }\n\n  // execute a command if it is valid\n  // returns whether the command was valid\n  _executeCommand(input: string): boolean {\n    let parts = input.split(\" \");\n    let command = parts[0];\n\n    // for testing purposes, init and configDone are made into user commands\n    // they can be done from the adapter without user input\n\n    switch (command) {\n      case \"run\":\n        // format: run\n        if (parts.length !== 1) return false;\n        let continueArgs: DebugProtocol.ContinueArguments = {\n          // Prepack will only have 1 thread, this argument will be ignored\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendContinueRequest(continueArgs);\n        break;\n      case \"breakpoint\":\n        // format: breakpoint add <filePath> <line> ?<column>\n        if (parts.length !== 4 && parts.length !== 5) return false;\n        if (parts[1] === \"add\") {\n          let filePath = parts[2];\n          let line = parseInt(parts[3], 10);\n          if (isNaN(line)) return false;\n          let column = 0;\n          if (parts.length === 5) {\n            column = parseInt(parts[4], 10);\n            if (isNaN(column)) return false;\n          }\n          this._sendBreakpointRequest(filePath, line, column);\n        }\n        break;\n      case \"stackframes\":\n        // format: stackFrames\n        let stackFrameArgs: DebugProtocol.StackTraceArguments = {\n          // Prepack will only have 1 thread, this argument will be ignored\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStackFramesRequest(stackFrameArgs);\n        break;\n      case \"threads\":\n        if (parts.length !== 1) return false;\n        this._sendThreadsRequest();\n        break;\n      case \"scopes\":\n        if (parts.length !== 2) return false;\n        let frameId = parseInt(parts[1], 10);\n        if (isNaN(frameId)) return false;\n        let scopesArgs: DebugProtocol.ScopesArguments = {\n          frameId: frameId,\n        };\n        this._sendScopesRequest(scopesArgs);\n        break;\n      case \"variables\":\n        if (parts.length !== 2) return false;\n        let varRef = parseInt(parts[1], 10);\n        if (isNaN(varRef)) return false;\n        let variableArgs: DebugProtocol.VariablesArguments = {\n          variablesReference: varRef,\n        };\n        this._sendVariablesRequest(variableArgs);\n        break;\n      case \"stepInto\":\n        if (parts.length !== 1) return false;\n        let stepIntoArgs: DebugProtocol.StepInArguments = {\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStepIntoRequest(stepIntoArgs);\n        break;\n      case \"stepOver\":\n        if (parts.length !== 1) return false;\n        let stepOverArgs: DebugProtocol.NextArguments = {\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStepOverRequest(stepOverArgs);\n        break;\n      case \"eval\":\n        if (parts.length < 2) return false;\n        let evalFrameId = parseInt(parts[1], 10);\n        if (isNaN(evalFrameId)) {\n          let expression = parts.slice(1).join(\" \");\n          let evaluateArgs: DebugProtocol.EvaluateArguments = {\n            expression: expression,\n          };\n          this._sendEvaluateRequest(evaluateArgs);\n        } else {\n          let expression = parts.slice(2).join(\" \");\n          let evaluateArgs: DebugProtocol.EvaluateArguments = {\n            expression: expression,\n            frameId: evalFrameId,\n          };\n          this._sendEvaluateRequest(evaluateArgs);\n        }\n        break;\n      default:\n        // invalid command\n        return false;\n    }\n    return true;\n  }\n\n  // parses the user input into a command and executes it\n  _dispatch(input: string) {\n    if (input === \"exit\") {\n      this.shutdown();\n    }\n    let success = this._executeCommand(input);\n    if (!success) {\n      // input was invalid\n      this._invalidCount++;\n      //prevent stack overflow from recursion\n      if (this._invalidCount >= 10) {\n        console.error(\"Too many invalid commands, shutting down...\");\n        this.shutdown();\n      }\n      console.error(\"Invalid command: \" + input);\n      this._reader.question(\"(dbg) \", (line: string) => {\n        this._dispatch(line);\n      });\n    }\n    //reset the invalid command counter\n    this._invalidCount = 0;\n  }\n\n  // tell the adapter about some configuration details\n  _sendInitializeRequest(args: DebugProtocol.InitializeRequestArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"initialize\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter to start Prepack\n  _sendLaunchRequest(args: DebugProtocol.LaunchRequestArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"launch\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter that configuration is done so it can expect other commands\n  _sendConfigDoneRequest(args: DebugProtocol.ConfigurationDoneArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"configurationDone\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter to continue running Prepack\n  _sendContinueRequest(args: DebugProtocol.ContinueArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"continue\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n    this._prepackWaiting = false;\n  }\n\n  _sendBreakpointRequest(filePath: string, line: number, column: number = 0) {\n    let source: DebugProtocol.Source = {\n      path: filePath,\n    };\n    let breakpoint: DebugProtocol.SourceBreakpoint = {\n      line: line,\n      column: column,\n    };\n    let args: DebugProtocol.SetBreakpointsArguments = {\n      source: source,\n      breakpoints: [breakpoint],\n    };\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"setBreakpoints\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStackFramesRequest(args: DebugProtocol.StackTraceArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"stackTrace\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendThreadsRequest() {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"threads\",\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendScopesRequest(args: DebugProtocol.ScopesArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"scopes\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendVariablesRequest(args: DebugProtocol.VariablesArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"variables\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStepIntoRequest(args: DebugProtocol.StepInArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"stepIn\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStepOverRequest(args: DebugProtocol.NextArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"next\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendEvaluateRequest(args: DebugProtocol.EvaluateArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"evaluate\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // write out a message to the adapter on stdout\n  _packageAndSend(message: string) {\n    // format: Content-Length: <length> separator <message>\n    this._adapterProcess.stdin.write(\n      \"Content-Length: \" + Buffer.byteLength(message, \"utf8\") + TWO_CRLF + message,\n      \"utf8\"\n    );\n    this._sequenceNum++;\n  }\n\n  _uiOutput(message: string) {\n    console.log(message);\n  }\n\n  serve() {\n    this._uiOutput(\"Debugger is starting up Prepack...\");\n    // Set up the adapter connection\n    this._startAdapter();\n\n    // send an initialize request to the adapter to fetch some configuration details\n    let initArgs: DebugProtocol.InitializeRequestArguments = {\n      // a unique name for each UI (e.g Nuclide, VSCode, CLI)\n      clientID: DebuggerConstants.CLI_CLIENTID,\n      // a unique name for each adapter\n      adapterID: \"Prepack-Debugger-Adapter\",\n      linesStartAt1: true,\n      columnsStartAt1: true,\n      supportsVariableType: true,\n      supportsVariablePaging: false,\n      supportsRunInTerminalRequest: false,\n      pathFormat: \"path\",\n    };\n    this._sendInitializeRequest(initArgs);\n\n    this._reader = readline.createInterface({ input: this._proc.stdin, output: this._proc.stdout });\n  }\n\n  shutdown() {\n    this._reader.close();\n    this._adapterProcess.kill();\n    this._proc.exit(0);\n  }\n}\n"]}