{"version":3,"sources":["../../src/react/elements.js"],"names":["createReactElement","t","createPropsObject","realm","type","config","children","defaultProps","intrinsics","undefined","props","ObjectCreate","ObjectPrototype","key","null","ref","setProp","name","value","emptyString","Set","isPartialObject","isSimpleObject","args","push","makePartial","makeSimple","globalObj","$GlobalObject","objAssign","generator","createTemporalFromBuildFunction","methodNode","_args","callExpression","diagnostic","currentLocation","handleError","propKey","binding","properties","descriptor","enumerable","obj","CreateDataPropertyOrThrow"],"mappings":";;;;;QAiIgBA,kB,GAAAA,kB;;AArHhB;;AACA;;AACA;;;;AACA;;AACA;;AACA;;IAAYC,C;;AACZ;;AACA;;;;;;AAEA,SAASC,iBAAT,CACEC,KADF,EAEEC,IAFF,EAGEC,MAHF,EAIEC,QAJF,EAKE;AACA,MAAIC,eAAeH,qCAA8B,iBAAID,KAAJ,EAAWC,IAAX,EAAiB,cAAjB,CAA9B,GAAiED,MAAMK,UAAN,CAAiBC,SAArG;AACA,MAAIC,QAAQ,mBAAOC,YAAP,CAAoBR,KAApB,EAA2BA,MAAMK,UAAN,CAAiBI,eAA5C,CAAZ;AACA;AACA,uCAAyBT,KAAzB,EAAgCO,KAAhC;AACA,MAAIG,MAAMV,MAAMK,UAAN,CAAiBM,IAA3B;AACA,MAAIC,MAAMZ,MAAMK,UAAN,CAAiBM,IAA3B;;AAEA,QAAME,UAAU,CAACC,IAAD,EAAeC,KAAf,KAAsC;AACpD,QAAID,SAAS,KAAT,IAAkBC,UAAUf,MAAMK,UAAN,CAAiBM,IAAjD,EAAuD;AACrDD,YAAM,qCAAcV,KAAd,EAAqB,GAArB,EAA0BA,MAAMK,UAAN,CAAiBW,WAA3C,EAAwDD,KAAxD,CAAN;AACD,KAFD,MAEO,IAAID,SAAS,KAAb,EAAoB;AACzBF,YAAMG,KAAN;AACD,KAFM,MAEA,IAAID,SAAS,QAAT,IAAqBA,SAAS,UAAlC,EAA8C;AACnD,+BAAUP,mCAAV;AACA,6BAAWU,GAAX,CAAejB,KAAf,EAAsBO,KAAtB,EAA6BO,IAA7B,EAAmCC,KAAnC,EAA0C,IAA1C;AACD;AACF,GATD;;AAWA,MACGb,gDAAyCA,OAAOgB,eAAP,EAA1C,IACAhB,sCADA,IAECA,wCAAiCA,OAAOgB,eAAP,EAAjC,IAA6DhB,OAAOiB,cAAP,EAHhE,EAIE;AACA;AACA,QAAIf,iBAAiBJ,MAAMK,UAAN,CAAiBC,SAAlC,IAA+CH,aAAaH,MAAMK,UAAN,CAAiBC,SAAjF,EAA4F;AAC1F,UAAI,wCAA4BN,KAA5B,EAAmCE,MAAnC,CAAJ,EAAgD;AAC9C,YAAIkB,OAAO,EAAX;AACA,YAAIhB,iBAAiBJ,MAAMK,UAAN,CAAiBC,SAAtC,EAAiD;AAC/Cc,eAAKC,IAAL,CAAUjB,YAAV;AACD;AACDgB,aAAKC,IAAL,CAAUnB,MAAV;AACA;AACAK,gBAAQ,mBAAOC,YAAP,CAAoBR,KAApB,EAA2BA,MAAMK,UAAN,CAAiBI,eAA5C,CAAR;AACA;AACAF,cAAMe,WAAN;AACAf,cAAMgB,UAAN;AACA;AACA,6CAAyBvB,KAAzB,EAAgCO,KAAhC;;AAEA;AACA,YAAIiB,YAAY,iBAAIxB,KAAJ,EAAWA,MAAMyB,aAAjB,EAAgC,QAAhC,CAAhB;AACA,iCAAUD,uCAAV;AACA,YAAIE,YAAY,iBAAI1B,KAAJ,EAAWwB,SAAX,EAAsB,QAAtB,CAAhB;AACA,iCAAUxB,MAAM2B,SAAhB;;AAEA,6BAAcC,+BAAd,CACE5B,KADF,wBAGE,CAAC0B,SAAD,EAAYnB,KAAZ,EAAmB,GAAGa,IAAtB,CAHF,EAIE,CAAC,CAACS,UAAD,EAAa,GAAGC,KAAhB,CAAD,KAA4B;AAC1B,iBAAOhC,EAAEiC,cAAF,CAAiBF,UAAjB,EAA+BC,KAA/B,CAAP;AACD,SANH;;AASA,YAAI3B,aAAaH,MAAMK,UAAN,CAAiBC,SAAlC,EAA6C;AAC3CO,kBAAQ,UAAR,EAAoBV,QAApB;AACD;AACF,OAhCD,MAgCO;AACL;AACA;AACA,YAAI6B,aAAa,+BACd,wGADc,EAEfhC,MAAMiC,eAFS,EAGf,QAHe,EAIf,YAJe,CAAjB;AAMAjC,cAAMkC,WAAN,CAAkBF,UAAlB;AACA,YAAIhC,MAAMkC,WAAN,CAAkBF,UAAlB,MAAkC,MAAtC,EAA8C,MAAM,wBAAN;AAC/C;AACF,KA7CD,MA6CO;AACL;AACA;AACA;AACAzB,cAAQL,MAAR;AACD;AACF,GAzDD,MAyDO;AACL,QAAIA,oCAAJ,EAAmC;AACjC,WAAK,IAAI,CAACiC,OAAD,EAAUC,OAAV,CAAT,IAA+BlC,OAAOmC,UAAtC,EAAkD;AAChD,YAAID,WAAWA,QAAQE,UAAnB,IAAiCF,QAAQE,UAAR,CAAmBC,UAAxD,EAAoE;AAClE1B,kBAAQsB,OAAR,EAAiB,iBAAInC,KAAJ,EAAWE,MAAX,EAAmBiC,OAAnB,CAAjB;AACD;AACF;AACF;;AAED,QAAIhC,aAAaH,MAAMK,UAAN,CAAiBC,SAAlC,EAA6C;AAC3CO,cAAQ,UAAR,EAAoBV,QAApB;AACD;;AAED,QAAIC,0CAAJ,EAAyC;AACvC,WAAK,IAAI,CAAC+B,OAAD,EAAUC,OAAV,CAAT,IAA+BhC,aAAaiC,UAA5C,EAAwD;AACtD,YAAID,WAAWA,QAAQE,UAAnB,IAAiCF,QAAQE,UAAR,CAAmBC,UAAxD,EAAoE;AAClE,cAAI,iBAAIvC,KAAJ,EAAWO,KAAX,EAAkB4B,OAAlB,MAA+BnC,MAAMK,UAAN,CAAiBC,SAApD,EAA+D;AAC7DO,oBAAQsB,OAAR,EAAiB,iBAAInC,KAAJ,EAAWI,YAAX,EAAyB+B,OAAzB,CAAjB;AACD;AACF;AACF;AACF;AACF;;AAED,SAAO,EAAEzB,GAAF,EAAOH,KAAP,EAAcK,GAAd,EAAP;AACD,C,CA/HD;;;;;;;;;AAiIO,SAASf,kBAAT,CACLG,KADK,EAELC,IAFK,EAGLC,MAHK,EAILC,QAJK,EAKL;AACA,MAAI,EAAEO,GAAF,EAAOH,KAAP,EAAcK,GAAd,KAAsBb,kBAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,QAAvC,CAA1B;;AAEA,MAAIqC,MAAM,mBAAOhC,YAAP,CAAoBR,KAApB,EAA2BA,MAAMK,UAAN,CAAiBI,eAA5C,CAAV;AACA,qBAAOgC,yBAAP,CAAiCzC,KAAjC,EAAwCwC,GAAxC,EAA6C,UAA7C,EAAyD,2BAAe,eAAf,EAAgCxC,KAAhC,CAAzD;AACA,qBAAOyC,yBAAP,CAAiCzC,KAAjC,EAAwCwC,GAAxC,EAA6C,MAA7C,EAAqDvC,IAArD;AACA,qBAAOwC,yBAAP,CAAiCzC,KAAjC,EAAwCwC,GAAxC,EAA6C,KAA7C,EAAoD9B,GAApD;AACA,qBAAO+B,yBAAP,CAAiCzC,KAAjC,EAAwCwC,GAAxC,EAA6C,KAA7C,EAAoD5B,GAApD;AACA,qBAAO6B,yBAAP,CAAiCzC,KAAjC,EAAwCwC,GAAxC,EAA6C,OAA7C,EAAsDjC,KAAtD;AACA,qBAAOkC,yBAAP,CAAiCzC,KAAjC,EAAwCwC,GAAxC,EAA6C,QAA7C,EAAuDxC,MAAMK,UAAN,CAAiBM,IAAxE;AACA,SAAO6B,GAAP;AACD","file":"elements.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { AbstractValue, AbstractObjectValue, Value, ObjectValue, FunctionValue, NullValue } from \"../values/index.js\";\nimport { Create, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { Get } from \"../methods/index.js\";\nimport { getReactSymbol, objectHasNoPartialKeyAndRef, deleteRefAndKeyFromProps } from \"./utils.js\";\nimport * as t from \"babel-types\";\nimport { computeBinary } from \"../evaluators/BinaryExpression.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\n\nfunction createPropsObject(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractValue | AbstractObjectValue | NullValue,\n  children: Value\n) {\n  let defaultProps = type instanceof ObjectValue ? Get(realm, type, \"defaultProps\") : realm.intrinsics.undefined;\n  let props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  // start by having key and ref deleted, if they actually exist, they will be add later\n  deleteRefAndKeyFromProps(realm, props);\n  let key = realm.intrinsics.null;\n  let ref = realm.intrinsics.null;\n\n  const setProp = (name: string, value: Value): void => {\n    if (name === \"key\" && value !== realm.intrinsics.null) {\n      key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, value);\n    } else if (name === \"ref\") {\n      ref = value;\n    } else if (name !== \"__self\" && name !== \"__source\") {\n      invariant(props instanceof ObjectValue);\n      Properties.Set(realm, props, name, value, true);\n    }\n  };\n\n  if (\n    (config instanceof AbstractObjectValue && config.isPartialObject()) ||\n    config instanceof AbstractValue ||\n    (config instanceof ObjectValue && config.isPartialObject() && config.isSimpleObject())\n  ) {\n    // if we have defaultProps, we need to create a new merge of the objects along with our config\n    if (defaultProps !== realm.intrinsics.undefined || children !== realm.intrinsics.undefined) {\n      if (objectHasNoPartialKeyAndRef(realm, config)) {\n        let args = [];\n        if (defaultProps !== realm.intrinsics.undefined) {\n          args.push(defaultProps);\n        }\n        args.push(config);\n        // create a new props object that will be the target of the Object.assign\n        props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n        // as this is \"props\" that is abstract, we need to make it partial and simple\n        props.makePartial();\n        props.makeSimple();\n        // props objects also don't have a key and ref, so we remove them\n        deleteRefAndKeyFromProps(realm, props);\n\n        // get the global Object.assign\n        let globalObj = Get(realm, realm.$GlobalObject, \"Object\");\n        invariant(globalObj instanceof ObjectValue);\n        let objAssign = Get(realm, globalObj, \"assign\");\n        invariant(realm.generator);\n\n        AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          FunctionValue,\n          [objAssign, props, ...args],\n          ([methodNode, ..._args]) => {\n            return t.callExpression(methodNode, ((_args: any): Array<any>));\n          }\n        );\n\n        if (children !== realm.intrinsics.undefined) {\n          setProp(\"children\", children);\n        }\n      } else {\n        // if either are abstract, this will impact the reconcilation process\n        // and ultimately prevent us from folding ReactElements properly\n        let diagnostic = new CompilerDiagnostic(\n          `unable to evaluate \"key\" and \"ref\" on a ReactElement due to an abstract config passed to createElement`,\n          realm.currentLocation,\n          \"PP0025\",\n          \"FatalError\"\n        );\n        realm.handleError(diagnostic);\n        if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n      }\n    } else {\n      // as the config is partial and simple, we don't know about its prototype or properties\n      // we don't have to worry about non-enumerable properties as its properties will never\n      // be serialized, rather this object will be serialized as a spread.\n      props = config;\n    }\n  } else {\n    if (config instanceof ObjectValue) {\n      for (let [propKey, binding] of config.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          setProp(propKey, Get(realm, config, propKey));\n        }\n      }\n    }\n\n    if (children !== realm.intrinsics.undefined) {\n      setProp(\"children\", children);\n    }\n\n    if (defaultProps instanceof ObjectValue) {\n      for (let [propKey, binding] of defaultProps.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          if (Get(realm, props, propKey) === realm.intrinsics.undefined) {\n            setProp(propKey, Get(realm, defaultProps, propKey));\n          }\n        }\n      }\n    }\n  }\n\n  return { key, props, ref };\n}\n\nexport function createReactElement(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractValue | AbstractObjectValue | NullValue,\n  children: Value\n) {\n  let { key, props, ref } = createPropsObject(realm, type, config, children);\n\n  let obj = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"$$typeof\", getReactSymbol(\"react.element\", realm));\n  Create.CreateDataPropertyOrThrow(realm, obj, \"type\", type);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"key\", key);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"ref\", ref);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"props\", props);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"_owner\", realm.intrinsics.null);\n  return obj;\n}\n"]}