{"version":3,"sources":["../../src/react/ReactElementSet.js"],"names":["ReactElementSet","constructor","realm","equivalenceSet","reactElementRoot","Map","objectRoot","arrayRoot","emptyArray","emptyObject","intrinsics","ObjectPrototype","_createNode","map","value","_getKey","key","has","set","get","_getValue","val","add","_getArrayValue","_getObjectValue","object","currentMap","result","propName","properties","prop","symbol","symbols","undefined","array","lengthValue","length","i","element","reactElement","type","ref","props"],"mappings":"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","file":"ReactElementSet.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  Value,\n  ObjectValue,\n  StringValue,\n  NumberValue,\n  AbstractValue,\n  ArrayValue,\n  FunctionValue,\n  SymbolValue,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { isReactElement, getProperty } from \"./utils\";\nimport { HashSet } from \"../methods/index.js\";\n\ntype ReactElementValueMapKey = Value | number | string;\ntype ReactElementValueMap = Map<ReactElementValueMapKey, ReactElementNode>;\n\ntype ReactElementKeyMapKey = string | number | SymbolValue;\ntype ReactElementKeyMap = Map<ReactElementKeyMapKey, ReactElementValueMap>;\n\ntype ReactElementNode = {\n  map: ReactElementKeyMap,\n  value: ObjectValue | ArrayValue | null,\n};\n\n// ReactElementSet keeps records around of the values\n// of ReactElement/JSX nodes so we can return the same immutable values\n// where possible, i.e. <div /> === <div />\n//\n// Rather than uses hashes, this class uses linked Maps to track equality of objects.\n// It does this by recursively iterating through objects, by their properties/symbols and using\n// each property key as a map, and then from that map, each value as a map. The value\n// then links to the subsequent property/symbol in the object. This approach ensures insertion\n// is maintained through all objects.\n\nexport default class ReactElementSet {\n  constructor(realm: Realm, equivalenceSet: HashSet<AbstractValue>) {\n    this.realm = realm;\n    this.equivalenceSet = equivalenceSet;\n    this.reactElementRoot = new Map();\n    this.objectRoot = new Map();\n    this.arrayRoot = new Map();\n    this.emptyArray = new ArrayValue(realm);\n    this.emptyObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  }\n  realm: Realm;\n  reactElementRoot: ReactElementKeyMap;\n  objectRoot: ReactElementKeyMap;\n  arrayRoot: ReactElementKeyMap;\n  equivalenceSet: HashSet<AbstractValue>;\n  emptyArray: ArrayValue;\n  emptyObject: ObjectValue;\n\n  _createNode(): ReactElementNode {\n    return {\n      map: new Map(),\n      value: null,\n    };\n  }\n\n  _getKey(key: ReactElementKeyMapKey, map: ReactElementKeyMap): ReactElementValueMap {\n    if (!map.has(key)) {\n      map.set(key, new Map());\n    }\n    return ((map.get(key): any): ReactElementValueMap);\n  }\n\n  _getValue(val: ReactElementValueMapKey, map: ReactElementValueMap): ReactElementNode {\n    if (val instanceof StringValue || val instanceof NumberValue) {\n      val = val.value;\n    } else if (val instanceof AbstractValue) {\n      val = this.equivalenceSet.add(val);\n    } else if (val instanceof ArrayValue) {\n      val = this._getArrayValue(val);\n    } else if (val instanceof ObjectValue && !(val instanceof FunctionValue)) {\n      val = this._getObjectValue(val);\n    }\n    if (!map.has(val)) {\n      map.set(val, this._createNode());\n    }\n    return ((map.get(val): any): ReactElementNode);\n  }\n\n  // for objects: [key/symbol] -> [key/symbol]... as nodes\n  _getObjectValue(object: ObjectValue): ObjectValue {\n    if (isReactElement(object)) {\n      return this.add(object);\n    }\n    let currentMap = this.objectRoot;\n    let result;\n\n    for (let [propName] of object.properties) {\n      currentMap = this._getKey(propName, currentMap);\n      let prop = getProperty(this.realm, object, propName);\n      result = this._getValue(prop, currentMap);\n      currentMap = result.map;\n    }\n    for (let [symbol] of object.symbols) {\n      currentMap = this._getKey(symbol, currentMap);\n      let prop = getProperty(this.realm, object, symbol);\n      result = this._getValue(prop, currentMap);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      return this.emptyObject;\n    }\n    if (result.value === null) {\n      result.value = object;\n    }\n    return result.value;\n  }\n\n  // for arrays: [0] -> [1] -> [2]... as nodes\n  _getArrayValue(array: ArrayValue): ArrayValue {\n    let lengthValue = getProperty(this.realm, array, \"length\");\n    invariant(lengthValue instanceof NumberValue);\n    let length = lengthValue.value;\n    let currentMap = this.arrayRoot;\n    let result;\n\n    for (let i = 0; i < length; i++) {\n      currentMap = this._getKey(i, currentMap);\n      let element = getProperty(this.realm, array, \"\" + i);\n      result = this._getValue(element, currentMap);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      return this.emptyArray;\n    }\n    if (result.value === null) {\n      result.value = array;\n    }\n    return result.value;\n  }\n\n  add(reactElement: ObjectValue): ObjectValue {\n    let currentMap = this.reactElementRoot;\n\n    // type\n    currentMap = this._getKey(\"type\", currentMap);\n    let type = getProperty(this.realm, reactElement, \"type\");\n    let result = this._getValue(type, currentMap);\n    currentMap = result.map;\n    // key\n    currentMap = this._getKey(\"key\", currentMap);\n    let key = getProperty(this.realm, reactElement, \"key\");\n    result = this._getValue(key, currentMap);\n    currentMap = result.map;\n    // ref\n    currentMap = this._getKey(\"ref\", currentMap);\n    let ref = getProperty(this.realm, reactElement, \"ref\");\n    result = this._getValue(ref, currentMap);\n    currentMap = result.map;\n    // props\n    currentMap = this._getKey(\"props\", currentMap);\n    let props = getProperty(this.realm, reactElement, \"props\");\n    result = this._getValue(props, currentMap);\n    currentMap = result.map;\n\n    if (result.value === null) {\n      result.value = reactElement;\n    }\n    invariant(result.value instanceof ObjectValue);\n    return result.value;\n  }\n}\n"]}