{"version":3,"sources":["../../src/react/errors.js"],"names":["ExpectedBailOut","Error","SimpleClassBailOut","NewComponentTreeBranch"],"mappings":";;;;;AAAA;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACO,MAAMA,eAAN,SAA8BC,KAA9B,CAAoC;;QAA9BD,e,GAAAA,e,EAEb;AACA;AACA;;AACO,MAAME,kBAAN,SAAiCD,KAAjC,CAAuC;;QAAjCC,kB,GAAAA,kB,EAEb;AACA;;AACO,MAAMC,sBAAN,SAAqCF,KAArC,CAA2C;QAArCE,sB,GAAAA,sB","file":"errors.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n// ExpectedBailOut is like an error, that gets thrown during the reconcilation phase\n// allowing the reconcilation to continue on other branches of the tree, the message\n// given to ExpectedBailOut will be assigned to the value.$BailOutReason property and serialized\n// as a comment in the output source to give the user hints as to what they need to do\n// to fix the bail-out case\nexport class ExpectedBailOut extends Error {}\n\n// SimpleClassBailOuts only occur when a simple class instance is created and used\n// bailing out here will result in a complex class instance being created after\n// and an alternative complex class component route being used\nexport class SimpleClassBailOut extends Error {}\n\n// NewComponentTreeBranch only occur when a complex class is found in a\n// component tree and the reconciler can no longer fold the component of that branch\nexport class NewComponentTreeBranch extends Error {}\n"]}