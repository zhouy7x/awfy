{"version":3,"sources":["../../src/react/utils.js"],"names":["isReactElement","getReactSymbol","isTagName","isReactComponent","valueIsClassComponent","valueIsKnownReactAbstraction","valueIsReactLibraryObject","valueIsLegacyCreateClassComponent","valueIsFactoryClassComponent","addKeyToReactElement","getUniqueReactElementKey","forEachArrayValue","convertSimpleClassComponentToFunctionalComponent","convertFunctionalComponentToComplexClassComponent","normalizeFunctionalComponentParamaters","createReactHintObject","getComponentTypeFromRootValue","deleteRefAndKeyFromProps","objectHasNoPartialKeyAndRef","flattenChildren","evaluateComponentTreeBranch","getProperty","isRenderPropFunctionSelfContained","createReactEvaluatedNode","getComponentName","convertConfigObjectToReactComponentTreeConfig","getValueFromRenderCall","sanitizeReactElementForFirstRenderOnly","t","val","realm","$Realm","react","enabled","reactElements","has","properties","$$typeof","globalObject","$GlobalObject","globalSymbolValue","intrinsics","undefined","value","symbolFromRegistry","globalSymbolRegistry","find","e","$Symbol","_isReactElement","$Key","add","symbolKey","reactSymbol","symbols","get","SymbolFor","Symbol","SymbolForDescriptor","descriptor","SymbolForValue","$Call","set","ast","type","test","name","length","toUpperCase","prototype","ToBooleanPartial","abstractHints","logger","fbLibraries","reactVersion","tryQuery","reactCreateElement","reactCloneElement","reactIsValidElement","reactComponent","reactChildren","reactSerializerState","reactElement","currentKeyValue","null","uniqueKey","usedReactElementKeys","newKeyValue","$Set","index","key","Math","random","toString","replace","substring","array","mapFunc","lengthValue","i","elementProperty","elementPropertyDescriptor","elementValue","GetDescriptorForProperty","propertyName","object","complexComponentType","additionalFunctionEffects","configurable","DeletePropertyOrThrow","lengthProperty","writable","enumerable","$FunctionKind","$Prototype","FunctionPrototype","$FormalParameters","identifier","transforms","push","body","funcNode","functionExpression","blockStatement","file","program","expressionStatement","path","node","isIdentifier","isThisExpression","parentPath","parentNode","isMemberExpression","replaceWith","property","createBinding","cloneProperties","newProperties","Map","cloneSymbols","newSymbols","symbol","cloneValue","originalValue","_prototype","copyToObject","cloneFunction","newValue","intrinsicName","Object","assign","originalPrototype","$HomeObject","clonePrototype","Set","newPrototype","ObjectPrototype","skipFunctionProperties","functionalComponentType","userCodePropertiesToAdd","userCodeSymbolsToAdd","binding","unshift","variableDeclaration","variableDeclarator","memberExpression","thisExpression","func","map","param","args","_valueIsKnownReactAbstraction","reactHint","reactRelay","Array","isArray","componentType","props","objectValue","elements","values","getElements","size","from","refuseSerialization","$Delete","recursivelyFlattenArray","targetArray","item","flattenedChildren","ArrayCreate","effects","nested","f","generator","modifiedBindings","modifiedProperties","createdObjects","applyEffects","restoreBindings","restoreProperties","reportIntrospectionError","visitName","state","read","write","scope","hasBinding","unboundReads","unboundWrites","ignorePath","parent","isLabeledStatement","isBreakStatement","isContinueStatement","LeakedClosureRefVisitor","ReferencedIdentifier","innerName","doesRead","operator","getBindingIdentifiers","getFunctionBindingInfo","constructor","functionInfo","formalParameters","code","$ECMAScriptCode","parentFunc","renderProp","bindings","concat","reference","ResolveBinding","$Environment","base","$FunctionObject","status","children","message","__originalName","config","firstRenderOnly","propValue","diagnostic","currentLocation","handleError","renderFunction","instance","funcCall","evaluateForEffects","error","completion","composeWithSavedCompletion","typeValue","propsValue","propName"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, type Effects } from \"../realm.js\";\nimport { FunctionEnvironmentRecord, Reference } from \"../environment.js\";\nimport { Completion, PossiblyNormalCompletion, AbruptCompletion } from \"../completions.js\";\nimport type { BabelNode, BabelNodeJSXIdentifier } from \"babel-types\";\nimport {\n  AbstractObjectValue,\n  Value,\n  NumberValue,\n  ObjectValue,\n  SymbolValue,\n  FunctionValue,\n  StringValue,\n  ArrayValue,\n  ECMAScriptSourceFunctionValue,\n  UndefinedValue,\n  BooleanValue,\n} from \"../values/index.js\";\nimport type { BabelTraversePath } from \"babel-traverse\";\nimport { Generator } from \"../utils/generator.js\";\nimport type { Descriptor, ReactHint, PropertyBinding, ReactComponentTreeConfig } from \"../types\";\nimport { Get, cloneDescriptor } from \"../methods/index.js\";\nimport { computeBinary } from \"../evaluators/BinaryExpression.js\";\nimport type { ReactSerializerState, AdditionalFunctionEffects, ReactEvaluatedNode } from \"../serializer/types.js\";\nimport invariant from \"../invariant.js\";\nimport { Create, Properties, Environment } from \"../singletons.js\";\nimport traverse from \"babel-traverse\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeStatement } from \"babel-types\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport { To } from \"../singletons.js\";\nimport AbstractValue from \"../values/AbstractValue\";\n\nexport type ReactSymbolTypes = \"react.element\" | \"react.fragment\" | \"react.portal\" | \"react.return\" | \"react.call\";\n\nexport function isReactElement(val: Value): boolean {\n  if (!(val instanceof ObjectValue)) {\n    return false;\n  }\n  let realm = val.$Realm;\n  if (!realm.react.enabled) {\n    return false;\n  }\n  if (realm.react.reactElements.has(val)) {\n    return true;\n  }\n  if (val.properties.has(\"$$typeof\")) {\n    let $$typeof = Get(realm, val, \"$$typeof\");\n    let globalObject = realm.$GlobalObject;\n    let globalSymbolValue = Get(realm, globalObject, \"Symbol\");\n\n    if (globalSymbolValue === realm.intrinsics.undefined) {\n      if ($$typeof instanceof NumberValue) {\n        return $$typeof.value === 0xeac7;\n      }\n    } else if ($$typeof instanceof SymbolValue) {\n      let symbolFromRegistry = realm.globalSymbolRegistry.find(e => e.$Symbol === $$typeof);\n      let _isReactElement = symbolFromRegistry !== undefined && symbolFromRegistry.$Key === \"react.element\";\n      if (_isReactElement) {\n        // add to Set to speed up future lookups\n        realm.react.reactElements.add(val);\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function getReactSymbol(symbolKey: ReactSymbolTypes, realm: Realm): SymbolValue {\n  let reactSymbol = realm.react.symbols.get(symbolKey);\n  if (reactSymbol !== undefined) {\n    return reactSymbol;\n  }\n  let SymbolFor = realm.intrinsics.Symbol.properties.get(\"for\");\n  if (SymbolFor !== undefined) {\n    let SymbolForDescriptor = SymbolFor.descriptor;\n\n    if (SymbolForDescriptor !== undefined) {\n      let SymbolForValue = SymbolForDescriptor.value;\n      if (SymbolForValue !== undefined && typeof SymbolForValue.$Call === \"function\") {\n        reactSymbol = SymbolForValue.$Call(realm.intrinsics.Symbol, [new StringValue(realm, symbolKey)]);\n        realm.react.symbols.set(symbolKey, reactSymbol);\n      }\n    }\n  }\n  invariant(reactSymbol instanceof SymbolValue, `Symbol(\"${symbolKey}\") could not be found in realm`);\n  return reactSymbol;\n}\n\nexport function isTagName(ast: BabelNode): boolean {\n  return ast.type === \"JSXIdentifier\" && /^[a-z]|\\-/.test(((ast: any): BabelNodeJSXIdentifier).name);\n}\n\nexport function isReactComponent(name: string) {\n  return name.length > 0 && name[0] === name[0].toUpperCase();\n}\n\nexport function valueIsClassComponent(realm: Realm, value: Value): boolean {\n  if (!(value instanceof FunctionValue)) {\n    return false;\n  }\n  let prototype = Get(realm, value, \"prototype\");\n\n  if (prototype instanceof ObjectValue) {\n    return To.ToBooleanPartial(realm, Get(realm, prototype, \"isReactComponent\"));\n  }\n  return false;\n}\n\nexport function valueIsKnownReactAbstraction(realm: Realm, value: Value): boolean {\n  return value instanceof AbstractObjectValue && realm.react.abstractHints.has(value);\n}\n\n// logger isn't typed otherwise it will increase flow cycle length :()\nexport function valueIsReactLibraryObject(realm: Realm, value: ObjectValue, logger: any): boolean {\n  if (realm.fbLibraries.react === value) {\n    return true;\n  }\n  // we check that the object is the React or React-like library by checking for\n  // core properties that should exist on it\n  let reactVersion = logger.tryQuery(() => Get(realm, value, \"version\"), undefined);\n  if (!(reactVersion instanceof StringValue)) {\n    return false;\n  }\n  let reactCreateElement = logger.tryQuery(() => Get(realm, value, \"createElement\"), undefined);\n  if (!(reactCreateElement instanceof FunctionValue)) {\n    return false;\n  }\n  let reactCloneElement = logger.tryQuery(() => Get(realm, value, \"cloneElement\"), undefined);\n  if (!(reactCloneElement instanceof FunctionValue)) {\n    return false;\n  }\n  let reactIsValidElement = logger.tryQuery(() => Get(realm, value, \"isValidElement\"), undefined);\n  if (!(reactIsValidElement instanceof FunctionValue)) {\n    return false;\n  }\n  let reactComponent = logger.tryQuery(() => Get(realm, value, \"Component\"), undefined);\n  if (!(reactComponent instanceof FunctionValue)) {\n    return false;\n  }\n  let reactChildren = logger.tryQuery(() => Get(realm, value, \"Children\"), undefined);\n  if (!(reactChildren instanceof ObjectValue)) {\n    return false;\n  }\n  return false;\n}\n\nexport function valueIsLegacyCreateClassComponent(realm: Realm, value: Value): boolean {\n  if (!(value instanceof FunctionValue)) {\n    return false;\n  }\n  let prototype = Get(realm, value, \"prototype\");\n\n  if (prototype instanceof ObjectValue) {\n    return prototype.properties.has(\"__reactAutoBindPairs\");\n  }\n  return false;\n}\n\nexport function valueIsFactoryClassComponent(realm: Realm, value: Value): boolean {\n  if (value instanceof ObjectValue) {\n    return To.ToBooleanPartial(realm, Get(realm, value, \"render\"));\n  }\n  return false;\n}\n\nexport function addKeyToReactElement(\n  realm: Realm,\n  reactSerializerState: ReactSerializerState,\n  reactElement: ObjectValue\n): void {\n  // we need to apply a key when we're branched\n  let currentKeyValue = Get(realm, reactElement, \"key\") || realm.intrinsics.null;\n  let uniqueKey = getUniqueReactElementKey(\"\", reactSerializerState.usedReactElementKeys);\n  let newKeyValue = new StringValue(realm, uniqueKey);\n  if (currentKeyValue !== realm.intrinsics.null) {\n    newKeyValue = computeBinary(realm, \"+\", currentKeyValue, newKeyValue);\n  }\n  // TODO: This might not be safe in DEV because these objects are frozen (Object.freeze).\n  // We should probably go behind the scenes in this case to by-pass that.\n  reactElement.$Set(\"key\", newKeyValue, reactElement);\n}\n// we create a unique key for each JSXElement to prevent collisions\n// otherwise React will detect a missing/conflicting key at runtime and\n// this can break the reconcilation of JSXElements in arrays\nexport function getUniqueReactElementKey(index?: string, usedReactElementKeys: Set<string>) {\n  let key;\n  do {\n    key = Math.random().toString(36).replace(/[^a-z]+/g, \"\").substring(0, 2);\n  } while (usedReactElementKeys.has(key));\n  usedReactElementKeys.add(key);\n  if (index !== undefined) {\n    return `${key}${index}`;\n  }\n  return key;\n}\n\n// a helper function to loop over ArrayValues\nexport function forEachArrayValue(realm: Realm, array: ObjectValue, mapFunc: Function): void {\n  let lengthValue = Get(realm, array, \"length\");\n  invariant(lengthValue instanceof NumberValue, \"Invalid length on ArrayValue during reconcilation\");\n  let length = lengthValue.value;\n  for (let i = 0; i < length; i++) {\n    let elementProperty = array.properties.get(\"\" + i);\n    let elementPropertyDescriptor = elementProperty && elementProperty.descriptor;\n    invariant(elementPropertyDescriptor, `Invalid ArrayValue[${i}] descriptor`);\n    let elementValue = elementPropertyDescriptor.value;\n    if (elementValue instanceof Value) {\n      mapFunc(elementValue, elementPropertyDescriptor);\n    }\n  }\n}\n\nfunction GetDescriptorForProperty(value: ObjectValue, propertyName: string): ?Descriptor {\n  let object = value.properties.get(propertyName);\n  invariant(object);\n  return object.descriptor;\n}\n\nexport function convertSimpleClassComponentToFunctionalComponent(\n  realm: Realm,\n  complexComponentType: ECMAScriptSourceFunctionValue,\n  additionalFunctionEffects: AdditionalFunctionEffects\n): void {\n  let prototype = complexComponentType.properties.get(\"prototype\");\n  invariant(prototype);\n  invariant(prototype.descriptor);\n  prototype.descriptor.configurable = true;\n  Properties.DeletePropertyOrThrow(realm, complexComponentType, \"prototype\");\n\n  // fix the length as we've changed the arguments\n  let lengthProperty = GetDescriptorForProperty(complexComponentType, \"length\");\n  invariant(lengthProperty);\n  lengthProperty.writable = false;\n  lengthProperty.enumerable = false;\n  lengthProperty.configurable = true;\n  // ensure the length value is set to the new value\n  let lengthValue = Get(realm, complexComponentType, \"length\");\n  invariant(lengthValue instanceof NumberValue);\n  lengthValue.value = 2;\n\n  // change the function kind\n  complexComponentType.$FunctionKind = \"normal\";\n  // set the prototype back to an object\n  complexComponentType.$Prototype = realm.intrinsics.FunctionPrototype;\n  // give the function the functional components params\n  complexComponentType.$FormalParameters = [t.identifier(\"props\"), t.identifier(\"context\")];\n  // add a transform to occur after the additional function has serialized the body of the class\n  additionalFunctionEffects.transforms.push((body: Array<BabelNodeStatement>) => {\n    // as this was a class before and is now a functional component, we need to replace\n    // this.props and this.context to props and context, via the function arugments\n    let funcNode = t.functionExpression(null, [], t.blockStatement(body));\n\n    traverse(\n      t.file(t.program([t.expressionStatement(funcNode)])),\n      {\n        \"Identifier|ThisExpression\"(path) {\n          let node = path.node;\n          if ((t.isIdentifier(node) && node.name === \"this\") || t.isThisExpression(node)) {\n            let parentPath = path.parentPath;\n            let parentNode = parentPath.node;\n\n            if (t.isMemberExpression(parentNode)) {\n              // remove the \"this\" from the member\n              parentPath.replaceWith(parentNode.property);\n            } else {\n              throw new FatalError(\n                `conversion of a simple class component to functional component failed due to \"this\" not being replaced`\n              );\n            }\n          }\n        },\n      },\n      undefined,\n      (undefined: any),\n      undefined\n    );\n  });\n}\n\nfunction createBinding(descriptor: void | Descriptor, key: string | SymbolValue, object: ObjectValue) {\n  return {\n    descriptor,\n    key,\n    object,\n  };\n}\n\nfunction cloneProperties(realm: Realm, properties: Map<string, any>, object: ObjectValue): Map<string, any> {\n  let newProperties = new Map();\n  for (let [propertyName, { descriptor }] of properties) {\n    newProperties.set(propertyName, createBinding(cloneDescriptor(descriptor), propertyName, object));\n  }\n  return newProperties;\n}\n\nfunction cloneSymbols(realm: Realm, symbols: Map<SymbolValue, any>, object: ObjectValue): Map<SymbolValue, any> {\n  let newSymbols = new Map();\n  for (let [symbol, { descriptor }] of symbols) {\n    newSymbols.set(symbol, createBinding(cloneDescriptor(descriptor), symbol, object));\n  }\n  return newSymbols;\n}\n\nfunction cloneValue(\n  realm: Realm,\n  originalValue: Value,\n  _prototype: null | ObjectValue,\n  copyToObject?: ObjectValue\n): Value {\n  if (originalValue instanceof FunctionValue) {\n    return cloneFunction(realm, originalValue, _prototype, copyToObject);\n  }\n  invariant(false, \"TODO: add support to cloneValue() for more value types\");\n}\n\nfunction cloneFunction(\n  realm: Realm,\n  originalValue: Value,\n  _prototype: null | ObjectValue,\n  copyToObject?: ObjectValue\n): FunctionValue {\n  let newValue;\n  if (originalValue instanceof ECMAScriptSourceFunctionValue) {\n    newValue = copyToObject || new ECMAScriptSourceFunctionValue(realm, originalValue.intrinsicName);\n    invariant(newValue instanceof ECMAScriptSourceFunctionValue);\n    // $FlowFixMe: complains about Object.assign\n    Object.assign(newValue, originalValue);\n    let properties = cloneProperties(realm, originalValue.properties, newValue);\n    newValue.properties = properties;\n    let symbols = cloneSymbols(realm, originalValue.symbols, newValue);\n    newValue.symbols = symbols;\n\n    // handle home object + prototype\n    let originalPrototype = originalValue.$HomeObject;\n    invariant(originalPrototype instanceof ObjectValue);\n    let prototype = _prototype || clonePrototype(realm, originalPrototype);\n    newValue.$HomeObject = prototype;\n    if (originalPrototype.properties.has(\"constructor\")) {\n      Properties.Set(realm, prototype, \"constructor\", newValue, false);\n    }\n    if (originalValue.properties.has(\"prototype\")) {\n      Properties.Set(realm, newValue, \"prototype\", prototype, false);\n    }\n  }\n  invariant(newValue instanceof FunctionValue, \"TODO: add support to cloneValue() for more function types\");\n  return newValue;\n}\n\nfunction clonePrototype(realm: Realm, prototype: Value): ObjectValue {\n  invariant(prototype instanceof ObjectValue);\n  let newPrototype = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, prototype.intrinsicName);\n\n  Object.assign(newPrototype, prototype);\n  for (let [propertyName] of prototype.properties) {\n    if (propertyName !== \"constructor\") {\n      let originalValue = Get(realm, prototype, propertyName);\n      let newValue = cloneValue(realm, originalValue, prototype);\n      Properties.Set(realm, newPrototype, propertyName, newValue, false);\n    }\n  }\n  for (let [symbol] of prototype.symbols) {\n    let originalValue = Get(realm, prototype, symbol);\n    let newValue = cloneValue(realm, originalValue, prototype);\n    Properties.Set(realm, newPrototype, symbol, newValue, false);\n  }\n  return newPrototype;\n}\n\nconst skipFunctionProperties = new Set([\"length\", \"prototype\", \"arguments\", \"name\", \"caller\"]);\n\nexport function convertFunctionalComponentToComplexClassComponent(\n  realm: Realm,\n  functionalComponentType: ECMAScriptSourceFunctionValue,\n  complexComponentType: void | ECMAScriptSourceFunctionValue,\n  additionalFunctionEffects: AdditionalFunctionEffects\n): void {\n  invariant(complexComponentType instanceof ECMAScriptSourceFunctionValue);\n  // get all properties on the functional component that were added in user-code\n  // we add defaultProps as undefined, as merging a class component's defaultProps on to\n  // a differnet component isn't right, we can discard defaultProps instead via folding\n  // we also don't want propTypes from the class component, so we remove that too\n  let userCodePropertiesToAdd: Map<string, PropertyBinding> = new Map([\n    [\"defaultProps\", createBinding(undefined, \"defaultProps\", functionalComponentType)],\n    [\"propTypes\", createBinding(undefined, \"propTypes\", functionalComponentType)],\n  ]);\n  let userCodeSymbolsToAdd: Map<SymbolValue, PropertyBinding> = new Map();\n\n  for (let [propertyName, binding] of functionalComponentType.properties) {\n    if (!skipFunctionProperties.has(propertyName)) {\n      userCodePropertiesToAdd.set(propertyName, binding);\n    }\n  }\n  for (let [symbol, binding] of functionalComponentType.symbols) {\n    userCodeSymbolsToAdd.set(symbol, binding);\n  }\n\n  cloneValue(realm, complexComponentType, null, functionalComponentType);\n  // then copy back and properties that were on the original functional component\n  // ensuring we overwrite any existing ones\n  for (let [propertyName, binding] of userCodePropertiesToAdd) {\n    functionalComponentType.properties.set(propertyName, binding);\n  }\n  for (let [symbol, binding] of userCodeSymbolsToAdd) {\n    functionalComponentType.symbols.set(symbol, binding);\n  }\n  // add a transform to occur after the additional function has serialized the body of the class\n  additionalFunctionEffects.transforms.push((body: Array<BabelNodeStatement>) => {\n    // as we've converted a functional component to a complex one, we are going to have issues with\n    // \"props\" and \"context\" references, as they're now going to be \"this.props\" and \"this.context\".\n    // we simply need a to add to vars to beginning of the body to get around this\n    // if they're not used, any DCE tool post-Prepack (GCC or Uglify) will remove them\n    body.unshift(\n      t.variableDeclaration(\"var\", [\n        t.variableDeclarator(t.identifier(\"props\"), t.memberExpression(t.thisExpression(), t.identifier(\"props\"))),\n        t.variableDeclarator(t.identifier(\"context\"), t.memberExpression(t.thisExpression(), t.identifier(\"context\"))),\n      ])\n    );\n  });\n}\n\nexport function normalizeFunctionalComponentParamaters(func: ECMAScriptSourceFunctionValue): void {\n  func.$FormalParameters = func.$FormalParameters.map((param, i) => {\n    if (i === 0) {\n      return t.isIdentifier(param) ? param : t.identifier(\"props\");\n    } else {\n      return t.isIdentifier(param) ? param : t.identifier(\"context\");\n    }\n  });\n}\n\nexport function createReactHintObject(object: ObjectValue, propertyName: string, args: Array<Value>): ReactHint {\n  return {\n    object,\n    propertyName,\n    args,\n  };\n}\n\nexport function getComponentTypeFromRootValue(realm: Realm, value: Value): ECMAScriptSourceFunctionValue | null {\n  let _valueIsKnownReactAbstraction = valueIsKnownReactAbstraction(realm, value);\n  if (!(value instanceof ECMAScriptSourceFunctionValue || _valueIsKnownReactAbstraction)) {\n    return null;\n  }\n  if (_valueIsKnownReactAbstraction) {\n    invariant(value instanceof AbstractValue);\n    let reactHint = realm.react.abstractHints.get(value);\n\n    invariant(reactHint);\n    if (typeof reactHint !== \"string\" && reactHint.object === realm.fbLibraries.reactRelay) {\n      switch (reactHint.propertyName) {\n        case \"createFragmentContainer\":\n        case \"createPaginationContainer\":\n        case \"createRefetchContainer\":\n          invariant(Array.isArray(reactHint.args));\n          // componentType is the 1st argument of a ReactRelay container\n          let componentType = reactHint.args[0];\n          invariant(componentType instanceof ECMAScriptSourceFunctionValue);\n          return componentType;\n        default:\n          invariant(\n            false,\n            `unsupported known React abstraction - ReactRelay property \"${reactHint.propertyName}\" not supported`\n          );\n      }\n    }\n    invariant(false, \"unsupported known React abstraction\");\n  } else {\n    invariant(value instanceof ECMAScriptSourceFunctionValue);\n    return value;\n  }\n}\n\n// props should never have \"ref\" or \"key\" properties, as they're part of ReactElement\n// object instead. to ensure that we can give this hint, we create them and then\n// delete them, so their descriptor is left undefined. we use this knowledge later\n// to ensure that when dealing with creating ReactElements with partial config,\n// we don't have to bail out becuase \"config\" may or may not have \"key\" or/and \"ref\"\nexport function deleteRefAndKeyFromProps(realm: Realm, props: ObjectValue | AbstractObjectValue): void {\n  let objectValue;\n  if (props instanceof AbstractObjectValue) {\n    let elements = props.values.getElements();\n    if (elements && elements.size > 0) {\n      objectValue = Array.from(elements)[0];\n    }\n    // we don't want to serialize in the output that we're making these deletes\n    invariant(objectValue instanceof ObjectValue);\n    objectValue.refuseSerialization = true;\n  }\n  Properties.Set(realm, props, \"ref\", realm.intrinsics.undefined, true);\n  props.$Delete(\"ref\");\n  Properties.Set(realm, props, \"key\", realm.intrinsics.undefined, true);\n  props.$Delete(\"key\");\n  if (props instanceof AbstractObjectValue) {\n    invariant(objectValue instanceof ObjectValue);\n    objectValue.refuseSerialization = false;\n  }\n}\n\nexport function objectHasNoPartialKeyAndRef(\n  realm: Realm,\n  object: ObjectValue | AbstractValue | AbstractObjectValue\n): boolean {\n  if (object instanceof AbstractValue) {\n    return true;\n  }\n  return !(Get(realm, object, \"key\") instanceof AbstractValue || Get(realm, object, \"ref\") instanceof AbstractValue);\n}\n\nfunction recursivelyFlattenArray(realm: Realm, array, targetArray): void {\n  forEachArrayValue(realm, array, item => {\n    if (item instanceof ArrayValue) {\n      recursivelyFlattenArray(realm, item, targetArray);\n    } else {\n      let lengthValue = Get(realm, targetArray, \"length\");\n      invariant(lengthValue instanceof NumberValue);\n      Properties.Set(realm, targetArray, \"\" + lengthValue.value, item, true);\n    }\n  });\n}\n\nexport function flattenChildren(realm: Realm, array: ArrayValue): ArrayValue {\n  let flattenedChildren = Create.ArrayCreate(realm, 0);\n  recursivelyFlattenArray(realm, array, flattenedChildren);\n  return flattenedChildren;\n}\n\nexport function evaluateComponentTreeBranch(\n  realm: Realm,\n  effects: Effects,\n  nested: boolean,\n  f: (generator?: Generator, value?: Value | Reference | Completion) => void | Value\n) {\n  let [\n    value,\n    generator,\n    modifiedBindings,\n    modifiedProperties: Map<PropertyBinding, void | Descriptor>,\n    createdObjects,\n  ] = effects;\n  if (nested) {\n    realm.applyEffects([value, new Generator(realm), modifiedBindings, modifiedProperties, createdObjects]);\n  }\n  try {\n    return f(generator, value);\n  } finally {\n    if (nested) {\n      realm.restoreBindings(modifiedBindings);\n      realm.restoreProperties(modifiedProperties);\n    }\n  }\n}\n\nexport function getProperty(realm: Realm, object: ObjectValue, property: string | SymbolValue): Value {\n  let binding;\n  if (typeof property === \"string\") {\n    binding = object.properties.get(property);\n  } else {\n    binding = object.symbols.get(property);\n  }\n  if (!binding) {\n    return realm.intrinsics.undefined;\n  }\n  let descriptor = binding.descriptor;\n\n  if (!descriptor) {\n    return realm.intrinsics.undefined;\n  }\n  let value;\n  if (descriptor.value) {\n    value = descriptor.value;\n  } else if (descriptor.get || descriptor.set) {\n    AbstractValue.reportIntrospectionError(object, `react/utils/getProperty unsupported getter/setter property`);\n    throw new FatalError();\n  }\n  invariant(value instanceof Value, `react/utils/getProperty should not be called on internal properties`);\n  return value;\n}\n\ntype FunctionBindingInfo = {\n  unboundReads: Set<string>,\n  unboundWrites: Set<string>,\n};\n\nfunction visitName(path, state, name, read, write) {\n  // Is the name bound to some local identifier? If so, we don't need to do anything\n  if (path.scope.hasBinding(name, /*noGlobals*/ true)) return;\n\n  // Otherwise, let's record that there's an unbound identifier\n  if (read) state.unboundReads.add(name);\n  if (write) state.unboundWrites.add(name);\n}\n\nfunction ignorePath(path: BabelTraversePath) {\n  let parent = path.parent;\n  return t.isLabeledStatement(parent) || t.isBreakStatement(parent) || t.isContinueStatement(parent);\n}\n\nlet LeakedClosureRefVisitor = {\n  ReferencedIdentifier(path: BabelTraversePath, state: FunctionBindingInfo) {\n    if (ignorePath(path)) return;\n\n    let innerName = path.node.name;\n    if (innerName === \"arguments\") {\n      return;\n    }\n    visitName(path, state, innerName, true, false);\n  },\n\n  \"AssignmentExpression|UpdateExpression\"(path: BabelTraversePath, state: FunctionBindingInfo) {\n    let doesRead = path.node.operator !== \"=\";\n    for (let name in path.getBindingIdentifiers()) {\n      visitName(path, state, name, doesRead, true);\n    }\n  },\n};\n\nfunction getFunctionBindingInfo(value: FunctionValue) {\n  invariant(value instanceof ECMAScriptSourceFunctionValue);\n  invariant(value.constructor === ECMAScriptSourceFunctionValue);\n  let functionInfo = {\n    unboundReads: new Set(),\n    unboundWrites: new Set(),\n  };\n  let formalParameters = value.$FormalParameters;\n  invariant(formalParameters != null);\n  let code = value.$ECMAScriptCode;\n  invariant(code != null);\n\n  traverse(\n    t.file(t.program([t.expressionStatement(t.functionExpression(null, formalParameters, code))])),\n    LeakedClosureRefVisitor,\n    null,\n    functionInfo\n  );\n  return functionInfo;\n}\n\n// if a render prop function (a nested additional function) makes\n// no accesses to bindings in the parent additional function scope\n// we can determine if the function is self contained\nexport function isRenderPropFunctionSelfContained(\n  realm: Realm,\n  parentFunc: Value,\n  renderProp: FunctionValue,\n  logger: any // otherwise Flow cycles increases\n): boolean {\n  let { unboundReads, unboundWrites } = getFunctionBindingInfo(renderProp);\n  let bindings = Array.from(unboundReads).concat(Array.from(unboundWrites));\n\n  for (let name of bindings) {\n    let reference = logger.tryQuery(\n      () => Environment.ResolveBinding(realm, name, true, renderProp.$Environment),\n      undefined\n    );\n    if (!reference) {\n      return false;\n    }\n    if (reference.base instanceof FunctionEnvironmentRecord && reference.base.$FunctionObject === parentFunc) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function createReactEvaluatedNode(\n  status:\n    | \"ROOT\"\n    | \"NEW_TREE\"\n    | \"INLINED\"\n    | \"BAIL-OUT\"\n    | \"UNKNOWN_TYPE\"\n    | \"RENDER_PROPS\"\n    | \"UNSUPPORTED_COMPLETION\"\n    | \"ABRUPT_COMPLETION\",\n  name: string\n): ReactEvaluatedNode {\n  return {\n    children: [],\n    message: \"\",\n    name,\n    status,\n  };\n}\n\nexport function getComponentName(realm: Realm, componentType: Value): string {\n  invariant(\n    componentType instanceof ECMAScriptSourceFunctionValue ||\n      componentType instanceof AbstractObjectValue ||\n      componentType instanceof AbstractValue\n  );\n  if (componentType.__originalName) {\n    return componentType.__originalName;\n  }\n  if (realm.fbLibraries.reactRelay !== undefined) {\n    if (componentType === Get(realm, realm.fbLibraries.reactRelay, \"QueryRenderer\")) {\n      return \"QueryRenderer\";\n    }\n  }\n  if (componentType instanceof ECMAScriptSourceFunctionValue) {\n    let name = Get(realm, componentType, \"name\");\n\n    if (name instanceof StringValue) {\n      return name.value;\n    }\n  }\n  return \"Unknown\";\n}\n\nexport function convertConfigObjectToReactComponentTreeConfig(\n  realm: Realm,\n  config: ObjectValue | UndefinedValue\n): ReactComponentTreeConfig {\n  // defaults\n  let firstRenderOnly = false;\n\n  if (!(config instanceof UndefinedValue)) {\n    for (let [key] of config.properties) {\n      let propValue = getProperty(realm, config, key);\n      if (propValue instanceof StringValue || propValue instanceof NumberValue || propValue instanceof BooleanValue) {\n        let value = propValue.value;\n\n        // boolean options\n        if (typeof value === \"boolean\") {\n          if (key === \"firstRenderOnly\") {\n            firstRenderOnly = value;\n          }\n        }\n      } else {\n        let diagnostic = new CompilerDiagnostic(\n          \"__optimizeReactComponentTree(rootComponent, config) has been called with invalid arguments\",\n          realm.currentLocation,\n          \"PP0024\",\n          \"FatalError\"\n        );\n        realm.handleError(diagnostic);\n        if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n      }\n    }\n  }\n  return {\n    firstRenderOnly,\n  };\n}\n\nexport function getValueFromRenderCall(\n  realm: Realm,\n  renderFunction: ECMAScriptSourceFunctionValue,\n  instance: ObjectValue | AbstractObjectValue | UndefinedValue,\n  args: Array<Value>\n): Value {\n  invariant(renderFunction.$Call, \"Expected render function to be a FunctionValue with $Call method\");\n  let funcCall = renderFunction.$Call;\n  let effects;\n  try {\n    effects = realm.evaluateForEffects(() => funcCall(instance, args));\n  } catch (error) {\n    throw error;\n  }\n  let completion = effects[0];\n  if (completion instanceof PossiblyNormalCompletion) {\n    // in this case one of the branches may complete abruptly, which means that\n    // not all control flow branches join into one flow at this point.\n    // Consequently we have to continue tracking changes until the point where\n    // all the branches come together into one.\n    completion = realm.composeWithSavedCompletion(completion);\n  }\n  // Note that the effects of (non joining) abrupt branches are not included\n  // in joinedEffects, but are tracked separately inside completion.\n  realm.applyEffects(effects);\n  // return or throw completion\n  if (completion instanceof AbruptCompletion) throw completion;\n  invariant(completion instanceof Value);\n  return completion;\n}\n\nexport function sanitizeReactElementForFirstRenderOnly(realm: Realm, reactElement: ObjectValue): ObjectValue {\n  let typeValue = Get(realm, reactElement, \"type\");\n\n  // ensure ref is null, as we don't use that on first render\n  Properties.Set(realm, reactElement, \"ref\", realm.intrinsics.null, false);\n  // when dealing with host nodes, we want to sanitize them futher\n  if (typeValue instanceof StringValue) {\n    let propsValue = Get(realm, reactElement, \"props\");\n    if (propsValue instanceof ObjectValue) {\n      // remove all values apart from string/number/boolean\n      for (let [propName] of propsValue.properties) {\n        invariant(propsValue instanceof ObjectValue);\n        let value = getProperty(realm, propsValue, propName);\n\n        // skip children and style\n        if (propName === \"children\" || propName === \"style\") {\n          continue;\n        }\n        if (!(value instanceof StringValue || value instanceof NumberValue || value instanceof BooleanValue)) {\n          propsValue.$Delete(propName);\n        }\n      }\n    }\n  }\n  return reactElement;\n}\n"]}