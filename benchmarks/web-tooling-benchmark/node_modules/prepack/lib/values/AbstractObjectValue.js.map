{"version":3,"sources":["../../src/values/AbstractObjectValue.js"],"names":["t","AbstractObjectValue","constructor","realm","types","values","hashValue","args","buildNode","optionalArgs","isTop","element","getElements","getTemplate","isPartialObject","reportIntrospectionError","isSimpleObject","cachedIsSimpleObject","undefined","_elementsAreSimpleObjects","result","isFinalObject","mightBeFalse","mightNotBeFalse","makeNotPartial","makePartial","makeSimple","option","getType","obj","$Realm","intrinsics","ObjectPrototype","intrinsicName","intrinsicNameGenerated","_templateFor","makeFinal","throwIfNotObject","$IsExtensible","$GetOwnProperty","P","value","elements","size","cv","kind","cond","ob1","ob2","d1","d2","desc","d1Value","d2Value","joinValuesAsConditional","widenValues","hasProp","doesNotHaveProp","d","createFromBinaryOp","expressionLocation","$DefineOwnProperty","Desc","writable","enumerable","configurable","new_val","sawTrue","sawFalse","dval","vale","empty","$HasProperty","$Get","Receiver","generateAbstractGet","type","isTypeCompatibleWith","object","createTemporalFromBuildFunction","o","isValidIdentifier","memberExpression","identifier","stringLiteral","skipInvariant","isIntrinsic","isInPureScope","evaluateWithPossibleThrowCompletion","topVal","d1val","d2val","cvVal","$GetPartial","p","$Set","V","oldVal","v","$SetPartial","$Delete","$OwnPropertyKeys"],"mappings":"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","file":"AbstractObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FatalError } from \"../errors.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyKeyValue } from \"../types.js\";\nimport { AbstractValue, ArrayValue, ObjectValue, StringValue, Value, NumberValue } from \"./index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"./AbstractValue.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport { IsDataDescriptor, cloneDescriptor, equalDescriptors } from \"../methods/index.js\";\nimport { Havoc, Join, Widen } from \"../singletons.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport * as t from \"babel-types\";\n\nexport default class AbstractObjectValue extends AbstractValue {\n  constructor(\n    realm: Realm,\n    types: TypesDomain,\n    values: ValuesDomain,\n    hashValue: number,\n    args: Array<Value>,\n    buildNode?: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: string, intrinsicName?: string |}\n  ) {\n    super(realm, types, values, hashValue, args, buildNode, optionalArgs);\n    if (!values.isTop()) {\n      for (let element of this.values.getElements()) invariant(element instanceof ObjectValue);\n    }\n  }\n\n  cachedIsSimpleObject: void | boolean;\n  functionResultType: void | typeof Value;\n\n  getTemplate(): ObjectValue {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.isPartialObject()) {\n        return element;\n      } else {\n        break;\n      }\n    }\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  isPartialObject(): boolean {\n    // At the very least, the identity of the object is unknown\n    return true;\n  }\n\n  isSimpleObject(): boolean {\n    if (this.cachedIsSimpleObject === undefined) this.cachedIsSimpleObject = this._elementsAreSimpleObjects();\n    return this.cachedIsSimpleObject;\n  }\n\n  _elementsAreSimpleObjects(): boolean {\n    if (this.values.isTop()) return false;\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isSimpleObject();\n      } else if (result !== element.isSimpleObject()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  isFinalObject(): boolean {\n    if (this.values.isTop()) return false;\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isFinalObject();\n      } else if (result !== element.isFinalObject()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    return true;\n  }\n\n  makeNotPartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeNotPartial();\n    }\n  }\n\n  makePartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makePartial();\n    }\n  }\n\n  makeSimple(option?: string | Value): void {\n    if (this.values.isTop() && this.getType() === ObjectValue) {\n      let obj = new ObjectValue(this.$Realm, this.$Realm.intrinsics.ObjectPrototype);\n      obj.intrinsicName = this.intrinsicName;\n      obj.intrinsicNameGenerated = true;\n      obj.makePartial();\n      obj._templateFor = this;\n      this.values = new ValuesDomain(obj);\n    }\n    if (!this.values.isTop()) {\n      for (let element of this.values.getElements()) {\n        invariant(element instanceof ObjectValue);\n        element.makeSimple(option);\n      }\n    }\n    this.cachedIsSimpleObject = true;\n  }\n\n  makeFinal(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeFinal();\n    }\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    return this;\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    return false;\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    if (P instanceof StringValue) P = P.value;\n\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetOwnProperty(P, cv);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        let d1Value = d1.value;\n        invariant(d1Value === undefined || d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value === undefined || d2Value instanceof Value);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d1Value, d2Value);\n      }\n      return desc;\n    } else if (this.kind === \"widened\") {\n      // This abstract object was created by repeated assignments of freshly allocated objects to the same binding inside a loop\n      let [ob1, ob2] = this.args; // ob1: summary of iterations 1...n, ob2: summary of iteration n+1\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        // We do not handle the case where different loop iterations result in different kinds of propperties\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        // Values may be different, i.e. values may be loop variant, so the widened value summarizes the entire loop\n        let d1Value = d1.value;\n        invariant(d1Value === undefined || d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value === undefined || d2Value instanceof Value);\n        desc.value = Widen.widenValues(this.$Realm, d1Value, d2Value);\n      } else {\n        // In this case equalDescriptors guarantees exact equality betwee d1 and d2.\n        // Inlining the accessors will eventually bring in data properties if the accessors have loop variant behavior\n      }\n      return desc;\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      let desc;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) doesNotHaveProp = true;\n        else {\n          hasProp = true;\n          if (desc === undefined) {\n            desc = cloneDescriptor(d);\n            invariant(desc !== undefined);\n            if (!IsDataDescriptor(this.$Realm, d)) continue;\n          } else {\n            if (!equalDescriptors(d, desc)) {\n              AbstractValue.reportIntrospectionError(this, P);\n              throw new FatalError();\n            }\n            if (!IsDataDescriptor(this.$Realm, desc)) continue;\n            // values may be different\n            let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n            desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d.value, desc.value);\n          }\n        }\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return desc;\n    }\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$DefineOwnProperty(P, Desc);\n      }\n      invariant(false);\n    } else {\n      if (!IsDataDescriptor(this.$Realm, Desc)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = {\n        value: \"value\" in Desc ? Desc.value : this.$Realm.intrinsics.undefined,\n        writable: \"writable\" in Desc ? Desc.writable : false,\n        enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n        configurable: \"configurable\" in Desc ? Desc.configurable : false,\n      };\n      let new_val = desc.value;\n      invariant(new_val instanceof Value);\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !equalDescriptors(d, desc)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let dval = d === undefined || d.vale === undefined ? this.$Realm.intrinsics.empty : d.value;\n        invariant(dval instanceof Value);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, new_val, dval);\n        if (cv.$DefineOwnProperty(P, desc)) {\n          sawTrue = true;\n        } else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$HasProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.$HasProperty(P)) hasProp = true;\n        else doesNotHaveProp = true;\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return hasProp;\n    }\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    if (P instanceof StringValue) P = P.value;\n\n    if (this.values.isTop()) {\n      let generateAbstractGet = () => {\n        let type = Value;\n        if (P === \"length\" && Value.isTypeCompatibleWith(this.getType(), ArrayValue)) type = NumberValue;\n        let object = this.kind === \"sentinel ToObject\" ? this.args[0] : this;\n        return AbstractValue.createTemporalFromBuildFunction(\n          this.$Realm,\n          type,\n          [object],\n          ([o]) => {\n            invariant(typeof P === \"string\");\n            return t.isValidIdentifier(P)\n              ? t.memberExpression(o, t.identifier(P), false)\n              : t.memberExpression(o, t.stringLiteral(P), true);\n          },\n          {\n            skipInvariant: true,\n          }\n        );\n      };\n      if (this.isSimpleObject() && this.isIntrinsic()) {\n        return generateAbstractGet();\n      } else if (this.$Realm.isInPureScope()) {\n        // This object might have leaked to a getter.\n        Havoc.value(this.$Realm, this);\n        // The getter might throw anything.\n        return this.$Realm.evaluateWithPossibleThrowCompletion(\n          generateAbstractGet,\n          TypesDomain.topVal,\n          ValuesDomain.topVal\n        );\n      }\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Get(P, Receiver);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d1val =\n        d1 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d1) ? d1.value : undefined;\n      let d2 = ob2.$GetOwnProperty(P);\n      let d2val =\n        d2 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d2) ? d2.value : undefined;\n      if (d1val === undefined || d2val === undefined) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      invariant(d1val instanceof Value);\n      invariant(d2val instanceof Value);\n      return Join.joinValuesAsConditional(this.$Realm, cond, d1val, d2val);\n    } else {\n      let result;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        // We do not currently join property getters\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cvVal = d === undefined ? this.$Realm.intrinsics.undefined : d.value;\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      if (this.isSimpleObject() && this.isIntrinsic()) {\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        return cv.$GetPartial(P, cv);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        let cvVal = cv.$GetPartial(P, cv);\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (P instanceof StringValue) P = P.value;\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Set(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let oldVal = d === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$SetPartial(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let oldVal = this.$GetPartial(P, Receiver);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        cv.$SetPartial(P, v, cv);\n      }\n      return true;\n    }\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Delete(P);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) continue;\n        if (!IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, this.$Realm.intrinsics.empty, d.value);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$OwnPropertyKeys();\n      }\n      invariant(false);\n    } else {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n  }\n}\n"]}