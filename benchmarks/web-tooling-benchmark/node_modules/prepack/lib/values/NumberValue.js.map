{"version":3,"sources":["../../src/values/NumberValue.js"],"names":["NumberValue","constructor","realm","value","intrinsicName","equals","x","getHash","num","Math","abs","mightBeFalse","isNaN","throwIfNotConcreteNumber","_serialize","toDisplayString","toString","IntegralValue","createFromNumberValue","Number","isInteger"],"mappings":";;;;;;;AAWA;;AAGO,MAAMA,WAAN,+BAAyC;AAC9CC,cAAYC,KAAZ,EAA0BC,KAA1B,EAAyCC,aAAzC,EAAiE;AAC/D,UAAMF,KAAN,EAAaE,aAAb;;AAEA,SAAKD,KAAL,GAAaA,KAAb;AACD;;AAIDE,SAAOC,CAAP,EAA0B;AACxB,WAAOA,aAAaN,WAAb,IAA4B,KAAKG,KAAL,KAAeG,EAAEH,KAApD;AACD;;AAEDI,YAAkB;AAChB,QAAIC,MAAMC,KAAKC,GAAL,CAAS,KAAKP,KAAd,CAAV;AACA,QAAIK,MAAM,GAAV,EAAeA,OAAO,QAAP;AACf,WAAOA,MAAM,CAAb,CAHgB,CAGA;AACjB;;AAEDG,iBAAwB;AACtB,WAAO,KAAKR,KAAL,KAAe,CAAf,IAAoBS,MAAM,KAAKT,KAAX,CAA3B;AACD;;AAEDU,6BAAwC;AACtC,WAAO,IAAP;AACD;;AAEDC,eAAqB;AACnB,WAAO,KAAKX,KAAZ;AACD;;AAEDY,oBAA0B;AACxB,WAAO,KAAKZ,KAAL,CAAWa,QAAX,EAAP;AACD;AAjC6C;;QAAnChB,W,GAAAA,W,EAdb;;;;;;;;;AAkDO,MAAMiB,aAAN,SAA4BjB,WAA5B,CAAwC;AAC7CC,cAAYC,KAAZ,EAA0BC,KAA1B,EAAyCC,aAAzC,EAAiE;AAC/D,UAAMF,KAAN,EAAaC,KAAb,EAAoBC,aAApB;AACD;;AAED,SAAOc,qBAAP,CAA6BhB,KAA7B,EAA2CC,KAA3C,EAA0DC,aAA1D,EAAkF;AAChF,WAAOe,OAAOC,SAAP,CAAiBjB,KAAjB,IACH,IAAIc,aAAJ,CAAkBf,KAAlB,EAAyBC,KAAzB,EAAgCC,aAAhC,CADG,GAEH,IAAIJ,WAAJ,CAAgBE,KAAhB,EAAuBC,KAAvB,EAA8BC,aAA9B,CAFJ;AAGD;AAT4C;QAAlCa,a,GAAAA,a","file":"NumberValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { PrimitiveValue, Value } from \"./index.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport class NumberValue extends PrimitiveValue {\n  constructor(realm: Realm, value: number, intrinsicName?: string) {\n    super(realm, intrinsicName);\n\n    this.value = value;\n  }\n\n  value: number;\n\n  equals(x: Value): boolean {\n    return x instanceof NumberValue && this.value === x.value;\n  }\n\n  getHash(): number {\n    let num = Math.abs(this.value);\n    if (num < 100) num *= 10000000;\n    return num | 0; // make a 32-bit integer out of this and get rid of NaN\n  }\n\n  mightBeFalse(): boolean {\n    return this.value === 0 || isNaN(this.value);\n  }\n\n  throwIfNotConcreteNumber(): NumberValue {\n    return this;\n  }\n\n  _serialize(): number {\n    return this.value;\n  }\n\n  toDisplayString(): string {\n    return this.value.toString();\n  }\n}\n\nexport class IntegralValue extends NumberValue {\n  constructor(realm: Realm, value: number, intrinsicName?: string) {\n    super(realm, value, intrinsicName);\n  }\n\n  static createFromNumberValue(realm: Realm, value: number, intrinsicName?: string) {\n    return Number.isInteger(value)\n      ? new IntegralValue(realm, value, intrinsicName)\n      : new NumberValue(realm, value, intrinsicName);\n  }\n}\n"]}