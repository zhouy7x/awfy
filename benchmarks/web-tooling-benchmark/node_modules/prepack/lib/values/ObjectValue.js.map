{"version":3,"sources":["../../src/values/ObjectValue.js"],"names":["t","isWidenedValue","v","kind","a","args","lengthTemplateSrc","lengthTemplate","ObjectValue","constructor","realm","proto","intrinsicName","refuseSerialization","recordNewObject","useAbstractInterpretation","setupBindings","getTrackedPropertyNames","$Prototype","intrinsics","null","$Extensible","true","_isPartial","false","_isHavoced","_isSimple","_simplicityIsTransitive","_isFinal","properties","Map","symbols","$IsClassPrototype","trackedPropertyNames","propertyNames","propName","desc","writeable","value","undefined","descriptor","object","key","setupTrackedPropertyAccessors","Object","defineProperty","prototype","configurable","get","binding","set","isHavocedObject","$Realm","recordModifiedProperty","equals","x","getHash","hashValue","objectCount","mightBeFalse","mightNotBeObject","throwIfNotObject","makeNotPartial","makePartial","makeSimple","option","makeFinal","isPartialObject","mightBeTrue","isFinalObject","havoc","isSimpleObject","mightNotBeTrue","size","propertyBinding","values","writable","ObjectPrototype","isTransitivelySimple","getExtensible","throwIfNotConcreteBoolean","setExtensible","getKind","$SymbolData","$StringData","$NumberData","$BooleanData","$DateValue","$RegExpMatcher","$SetData","$MapData","$DataView","$ArrayBufferData","$WeakMapData","$WeakSetData","react","enabled","$TypedArrayName","defineNativeMethod","name","length","callback","fnValue","defineNativeProperty","$DefineOwnProperty","enumerable","defineNativeGetter","funcName","$Description","throwIfNotConcreteString","func","defineNativeConstant","getOwnPropertyKeysArray","unknownProperty","reportIntrospectionError","keyArray","Array","from","keys","filter","pb","pv","mightHaveBeenDeleted","callReportObjectGetOwnProperties","_serialize","stack","obj","ThrowIfMightHaveBeenDeleted","serializedDesc","serialize","$GetPrototypeOf","$SetPrototypeOf","V","OrdinarySetPrototypeOf","$IsExtensible","$PreventExtensions","$GetOwnProperty","P","OrdinaryGetOwnProperty","Desc","OrdinaryDefineOwnProperty","$HasProperty","$Get","Receiver","prop","val","specializeJoin","$GetPartial","getType","createFromTemplate","mightNotBeString","mightNotBeNumber","isInPureScope","result","createTemporalFromBuildFunction","o","p","memberExpression","createFromType","cond","createFromBinaryOp","joinValuesAsConditional","absVal","ob","pName","pNumber","generic_cond","specializeCond","arg1","arg2","createFromConditionalOp","expressionLocation","$Set","OrdinarySet","$SetPartial","pIsLoopVar","pIsNumeric","isTypeCompatibleWith","createTemplate","newVal","oldVal","savedUnknownProperty","delete","empty","$Delete","OrdinaryDelete","$OwnPropertyKeys"],"mappings":"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","file":"ObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm, ExecutionContext } from \"../realm.js\";\nimport { FatalError } from \"../errors.js\";\nimport type {\n  DataBlock,\n  Descriptor,\n  IterationKind,\n  ObjectKind,\n  PromiseReaction,\n  PropertyBinding,\n  PropertyKeyValue,\n  TypedArrayKind,\n} from \"../types.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  NativeFunctionValue,\n  NullValue,\n  NumberValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./index.js\";\nimport { isReactElement } from \"../react/utils.js\";\nimport buildExpressionTemplate from \"../utils/builder.js\";\nimport { ECMAScriptSourceFunctionValue, type NativeFunctionCallback } from \"./index.js\";\nimport {\n  IsDataDescriptor,\n  OrdinaryOwnPropertyKeys,\n  OrdinaryGet,\n  OrdinaryHasProperty,\n  OrdinaryIsExtensible,\n  OrdinaryPreventExtensions,\n} from \"../methods/index.js\";\nimport { Join, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { typeAnnotation } from \"babel-types\";\nimport * as t from \"babel-types\";\n\nfunction isWidenedValue(v: void | Value) {\n  if (!(v instanceof AbstractValue)) return false;\n  if (v.kind === \"widened\" || v.kind === \"widened property\") return true;\n  for (let a of v.args) {\n    if (isWidenedValue(a)) return true;\n  }\n  return false;\n}\n\nconst lengthTemplateSrc = \"(A).length\";\nconst lengthTemplate = buildExpressionTemplate(lengthTemplateSrc);\n\nexport default class ObjectValue extends ConcreteValue {\n  constructor(\n    realm: Realm,\n    proto?: ObjectValue | NullValue,\n    intrinsicName?: string,\n    refuseSerialization: boolean = false\n  ) {\n    super(realm, intrinsicName);\n    realm.recordNewObject(this);\n    if (realm.useAbstractInterpretation) this.setupBindings(this.getTrackedPropertyNames());\n    this.$Prototype = proto || realm.intrinsics.null;\n    this.$Extensible = realm.intrinsics.true;\n    this._isPartial = realm.intrinsics.false;\n    this._isHavoced = realm.intrinsics.false;\n    this._isSimple = realm.intrinsics.false;\n    this._simplicityIsTransitive = realm.intrinsics.false;\n    this._isFinal = realm.intrinsics.false;\n    this.properties = new Map();\n    this.symbols = new Map();\n    this.refuseSerialization = refuseSerialization;\n    this.$IsClassPrototype = false;\n  }\n\n  static trackedPropertyNames = [\n    \"_isPartial\",\n    \"_isHavoced\",\n    \"_isSimple\",\n    \"_isFinal\",\n    \"_simplicityIsTransitive\",\n    \"$ArrayIteratorNextIndex\",\n    \"$DateValue\",\n    \"$Extensible\",\n    \"$IteratedList\",\n    \"$IteratedObject\",\n    \"$IteratedSet\",\n    \"$IteratedString\",\n    \"$Map\",\n    \"$MapData\",\n    \"$MapNextIndex\",\n    \"$Prototype\",\n    \"$SetData\",\n    \"$SetNextIndex\",\n    \"$StringIteratorNextIndex\",\n    \"$WeakMapData\",\n    \"$WeakSetData\",\n  ];\n\n  getTrackedPropertyNames(): Array<string> {\n    return ObjectValue.trackedPropertyNames;\n  }\n\n  setupBindings(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      let desc = { writeable: true, value: undefined };\n      (this: any)[propName + \"_binding\"] = {\n        descriptor: desc,\n        object: this,\n        key: propName,\n      };\n    }\n  }\n\n  static setupTrackedPropertyAccessors(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      Object.defineProperty(ObjectValue.prototype, propName, {\n        configurable: true,\n        get: function() {\n          let binding = this[propName + \"_binding\"];\n          return binding.descriptor.value;\n        },\n        set: function(v) {\n          invariant(!this.isHavocedObject(), \"cannot mutate a havoced object\");\n          let binding = this[propName + \"_binding\"];\n          this.$Realm.recordModifiedProperty(binding);\n          binding.descriptor.value = v;\n        },\n      });\n    }\n  }\n\n  $Prototype: ObjectValue | NullValue;\n  $Extensible: BooleanValue | AbstractValue;\n\n  $ParameterMap: void | ObjectValue; // undefined when the property is \"missing\"\n  $SymbolData: void | SymbolValue | AbstractValue;\n  $StringData: void | StringValue | AbstractValue;\n  $NumberData: void | NumberValue | AbstractValue;\n  $BooleanData: void | BooleanValue | AbstractValue;\n\n  // error\n  $ErrorData: void | {\n    // undefined when the property is \"missing\"\n    contextStack: Array<ExecutionContext>,\n    locationData: void | {\n      filename: string,\n      sourceCode: string,\n      loc: { line: number, column: number },\n      stackDecorated: boolean,\n    },\n  };\n\n  // function\n  $Call: void | ((thisArgument: Value, argumentsList: Array<Value>) => Value);\n  $Construct: void | ((argumentsList: Array<Value>, newTarget: ObjectValue) => ObjectValue);\n\n  // promise\n  $PromiseState: void | \"pending\" | \"fulfilled\" | \"rejected\";\n  $PromiseResult: void | Value;\n  $PromiseFulfillReactions: void | Array<PromiseReaction>;\n  $PromiseRejectReactions: void | Array<PromiseReaction>;\n  $PromiseIsHandled: void | boolean;\n\n  // iterator\n  $IteratedList: void | Array<Value>;\n  $ListIteratorNextIndex: void | number;\n  $IteratorNext: void | NativeFunctionValue;\n\n  // set\n  $SetIterationKind: void | IterationKind;\n  $SetNextIndex: void | number;\n  $IteratedSet: void | ObjectValue | UndefinedValue;\n  $SetData: void | Array<void | Value>;\n\n  // react\n  $SuperTypeParameters: void | typeAnnotation;\n\n  // map\n  $MapIterationKind: void | IterationKind;\n  $MapNextIndex: void | NumberValue;\n  $MapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n  $Map: void | ObjectValue | UndefinedValue;\n\n  // weak map\n  $WeakMapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n\n  // weak set\n  $WeakSetData: void | Array<void | Value>;\n\n  // date\n  $DateValue: void | NumberValue | AbstractValue; // of type number\n\n  // array\n  $ArrayIterationKind: void | IterationKind;\n  $ArrayIteratorNextIndex: void | NumberValue;\n  $IteratedObject: void | UndefinedValue | ObjectValue;\n\n  // regex\n  $OriginalSource: void | string;\n  $OriginalFlags: void | string;\n  $RegExpMatcher: void | ((S: string, lastIndex: number) => ?{ endIndex: number, captures: Array<any> });\n\n  // string\n  $StringIteratorNextIndex: void | number;\n  $IteratedString: void | StringValue;\n\n  // data view\n  $DataView: void | true;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ByteLength: void | number;\n  $ByteOffset: void | number;\n\n  // array buffer\n  $ArrayBufferData: void | null | DataBlock;\n  $ArrayBufferByteLength: void | number;\n\n  // generator\n  $GeneratorState: void | \"suspendedStart\" | \"executing\";\n  $GeneratorContext: void | ExecutionContext;\n\n  // typed array\n  $TypedArrayName: void | TypedArrayKind;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ArrayLength: void | number;\n\n  // backpointer to the constructor if this object was created its prototype object\n  originalConstructor: void | ECMAScriptSourceFunctionValue;\n\n  // partial objects\n  _isPartial: void | AbstractValue | BooleanValue;\n\n  // tainted objects\n  _isHavoced: void | AbstractValue | BooleanValue;\n\n  // If true, the object has no property getters or setters and it is safe\n  // to return AbstractValue for unknown properties.\n  _isSimple: void | AbstractValue | BooleanValue;\n\n  // If true, it is not safe to perform any more mutations that would change\n  // the object's serialized form.\n  _isFinal: void | AbstractValue | BooleanValue;\n\n  // Specifies whether the object is a template that needs to be created in a scope\n  // If set, this happened during object initialization and the value is never changed again, so not tracked.\n  _isScopedTemplate: void | true;\n\n  // If true, then unknown properties should return transitively simple abstract object values\n  _simplicityIsTransitive: void | AbstractValue | BooleanValue;\n\n  // The abstract object for which this object is the template.\n  // Use this instead of the object itself when deriving temporal values for object properties.\n  _templateFor: void | AbstractObjectValue;\n\n  properties: Map<string, PropertyBinding>;\n  symbols: Map<SymbolValue, PropertyBinding>;\n  unknownProperty: void | PropertyBinding;\n\n  // An object value with an intrinsic name can either exist from the beginning of time,\n  // or it can be associated with a particular point in time by being used as a template\n  // when deriving an abstract value via a generator.\n  intrinsicNameGenerated: void | true;\n  hashValue: void | number;\n\n  // ReactElement\n  $BailOutReason: void | string;\n\n  // ES2015 classes\n  $IsClassPrototype: boolean;\n\n  equals(x: Value): boolean {\n    return x instanceof ObjectValue && this.getHash() === x.getHash();\n  }\n\n  getHash(): number {\n    if (!this.hashValue) {\n      this.hashValue = ++this.$Realm.objectCount;\n    }\n    return this.hashValue;\n  }\n\n  // We track some internal state as properties on the global object, these should\n  // never be serialized.\n  refuseSerialization: boolean;\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeObject(): boolean {\n    return false;\n  }\n\n  throwIfNotObject(): ObjectValue {\n    return this;\n  }\n\n  makeNotPartial(): void {\n    this._isPartial = this.$Realm.intrinsics.false;\n  }\n\n  makePartial(): void {\n    this._isPartial = this.$Realm.intrinsics.true;\n  }\n\n  makeSimple(option?: string | Value): void {\n    this._isSimple = this.$Realm.intrinsics.true;\n    this._simplicityIsTransitive = new BooleanValue(\n      this.$Realm,\n      option === \"transitive\" || (option instanceof StringValue && option.value === \"transitive\")\n    );\n  }\n\n  makeFinal(): void {\n    this._isFinal = this.$Realm.intrinsics.true;\n  }\n\n  isPartialObject(): boolean {\n    return !!this._isPartial && this._isPartial.mightBeTrue();\n  }\n\n  isFinalObject(): boolean {\n    return !!this._isFinal && this._isFinal.mightBeTrue();\n  }\n\n  havoc(): void {\n    this._isHavoced = this.$Realm.intrinsics.true;\n  }\n\n  isHavocedObject(): boolean {\n    return !!this._isHavoced && this._isHavoced.mightBeTrue();\n  }\n\n  isSimpleObject(): boolean {\n    if (this._isSimple && !this._isSimple.mightNotBeTrue()) return true;\n    if (this.isPartialObject()) return false;\n    if (this.symbols.size > 0) return false;\n    for (let propertyBinding of this.properties.values()) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      if (!IsDataDescriptor(this.$Realm, desc)) return false;\n      if (!desc.writable) return false;\n    }\n    if (this.$Prototype instanceof NullValue) return true;\n    if (this.$Prototype === this.$Realm.intrinsics.ObjectPrototype) return true;\n    return this.$Prototype.isSimpleObject();\n  }\n\n  isTransitivelySimple(): boolean {\n    return !!this._simplicityIsTransitive && !this._simplicityIsTransitive.mightNotBeTrue();\n  }\n\n  getExtensible(): boolean {\n    return this.$Extensible.throwIfNotConcreteBoolean().value;\n  }\n\n  setExtensible(v: boolean) {\n    this.$Extensible = v ? this.$Realm.intrinsics.true : this.$Realm.intrinsics.false;\n  }\n\n  getKind(): ObjectKind {\n    // we can deduce the natural prototype by checking whether the following internal slots are present\n    if (this.$SymbolData !== undefined) return \"Symbol\";\n    if (this.$StringData !== undefined) return \"String\";\n    if (this.$NumberData !== undefined) return \"Number\";\n    if (this.$BooleanData !== undefined) return \"Boolean\";\n    if (this.$DateValue !== undefined) return \"Date\";\n    if (this.$RegExpMatcher !== undefined) return \"RegExp\";\n    if (this.$SetData !== undefined) return \"Set\";\n    if (this.$MapData !== undefined) return \"Map\";\n    if (this.$DataView !== undefined) return \"DataView\";\n    if (this.$ArrayBufferData !== undefined) return \"ArrayBuffer\";\n    if (this.$WeakMapData !== undefined) return \"WeakMap\";\n    if (this.$WeakSetData !== undefined) return \"WeakSet\";\n    if (isReactElement(this) && this.$Realm.react.enabled) return \"ReactElement\";\n    if (this.$TypedArrayName !== undefined) return this.$TypedArrayName;\n    // TODO #26 #712: Promises. All kinds of iterators. Generators.\n    return \"Object\";\n  }\n\n  defineNativeMethod(\n    name: SymbolValue | string,\n    length: number,\n    callback: NativeFunctionCallback,\n    desc?: Descriptor = {}\n  ): Value {\n    let intrinsicName;\n    if (typeof name === \"string\") {\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n    let fnValue = new NativeFunctionValue(this.$Realm, intrinsicName, name, length, callback, false);\n    this.defineNativeProperty(name, fnValue, desc);\n    return fnValue;\n  }\n\n  defineNativeProperty(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeGetter(name: SymbolValue | string, callback: NativeFunctionCallback, desc?: Descriptor = {}) {\n    let intrinsicName, funcName;\n    if (typeof name === \"string\") {\n      funcName = `get ${name}`;\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      funcName =\n        name.$Description instanceof Value\n          ? `get [${name.$Description.throwIfNotConcreteString().value}]`\n          : `get [${\"?\"}]`;\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n\n    let func = new NativeFunctionValue(this.$Realm, intrinsicName, funcName, 0, callback);\n    this.$DefineOwnProperty(name, {\n      get: func,\n      set: this.$Realm.intrinsics.undefined,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeConstant(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n      ...desc,\n    });\n  }\n\n  getOwnPropertyKeysArray(): Array<string> {\n    if (this.isPartialObject() || this.isHavocedObject() || this.unknownProperty !== undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let keyArray = Array.from(this.properties.keys());\n    keyArray = keyArray.filter(x => {\n      let pb = this.properties.get(x);\n      if (!pb || pb.descriptor === undefined) return false;\n      let pv = pb.descriptor.value;\n      if (pv === undefined) return true;\n      invariant(pv instanceof Value);\n      if (!pv.mightHaveBeenDeleted()) return true;\n      // The property may or may not be there at runtime.\n      // We can at best return an abstract keys array.\n      // For now just terminate.\n      invariant(pv instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(pv);\n      throw new FatalError();\n    });\n    this.$Realm.callReportObjectGetOwnProperties(this);\n    return keyArray;\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    let obj = set({});\n\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n      let serializedDesc: any = { enumerable: desc.enumerable, configurable: desc.configurable };\n      if (desc.value) {\n        serializedDesc.writable = desc.writable;\n        invariant(desc.value instanceof Value);\n        serializedDesc.value = desc.value.serialize(stack);\n      } else {\n        invariant(desc.get !== undefined);\n        serializedDesc.get = desc.get.serialize(stack);\n        invariant(desc.set !== undefined);\n        serializedDesc.set = desc.set.serialize(stack);\n      }\n      Object.defineProperty(obj, key, serializedDesc);\n    }\n    return obj;\n  }\n\n  // ECMA262 9.1.1\n  $GetPrototypeOf(): ObjectValue | NullValue {\n    return this.$Prototype;\n  }\n\n  // ECMA262 9.1.2\n  $SetPrototypeOf(V: ObjectValue | NullValue): boolean {\n    // 1. Return ! OrdinarySetPrototypeOf(O, V).\n    return Properties.OrdinarySetPrototypeOf(this.$Realm, this, V);\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    // 1. Return ! OrdinaryIsExtensible(O).\n    return OrdinaryIsExtensible(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.4\n  $PreventExtensions(): boolean {\n    // 1. Return ! OrdinaryPreventExtensions(O).\n    return OrdinaryPreventExtensions(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Return ! OrdinaryGetOwnProperty(O, P).\n    return Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    // 1. Return ? OrdinaryDefineOwnProperty(O, P, Desc).\n    return Properties.OrdinaryDefineOwnProperty(this.$Realm, this, P, Desc);\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined && this.$GetOwnProperty(P) === undefined) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    return OrdinaryHasProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    let prop = this.unknownProperty;\n    if (prop !== undefined && prop.descriptor !== undefined && this.$GetOwnProperty(P) === undefined) {\n      let desc = prop.descriptor;\n      invariant(desc !== undefined);\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      let propName;\n      if (P instanceof StringValue) {\n        propName = P;\n      } else if (typeof P === \"string\") {\n        propName = new StringValue(this.$Realm, P);\n      } else {\n        AbstractValue.reportIntrospectionError(val, \"abstract computed property name\");\n        throw new FatalError();\n      }\n      return this.specializeJoin(val, propName);\n    }\n\n    // 1. Return ? OrdinaryGet(O, P, Receiver).\n    return OrdinaryGet(this.$Realm, this, P, Receiver);\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (Receiver instanceof AbstractValue && Receiver.getType() === StringValue && P === \"length\") {\n      return AbstractValue.createFromTemplate(this.$Realm, lengthTemplate, NumberValue, [Receiver], lengthTemplateSrc);\n    }\n\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    // We assume that simple objects have no getter/setter properties.\n    if (\n      this !== Receiver ||\n      !this.isSimpleObject() ||\n      (P.mightNotBeString() && P.mightNotBeNumber() && !P.isSimpleObject())\n    ) {\n      // if P is an abstract value that we don't know about, but we're in pure scope\n      // then if the object is simple, then we can safely continue without throwing\n      // the introspection error below, since converting P to a string is assumed to\n      // be well behaved in a pure scope\n      if (!(this.$Realm.isInPureScope() && this.isSimpleObject() && this === Receiver)) {\n        AbstractValue.reportIntrospectionError(P, \"TODO: #1021\");\n        throw new FatalError();\n      }\n    }\n    // If all else fails, use this expression\n    let result;\n    if (this.isPartialObject()) {\n      if (isWidenedValue(P)) {\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      result = AbstractValue.createFromType(this.$Realm, Value, \"sentinel member expression\");\n      result.args = [this, P];\n    } else {\n      result = this.$Realm.intrinsics.undefined;\n    }\n    // Get a specialization of the join of all values written to the object\n    // with abstract property names.\n    let prop = this.unknownProperty;\n    if (prop !== undefined) {\n      let desc = prop.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        result = this.specializeJoin(val, P);\n      }\n    }\n    // Join in all of the other values that were written to the object with\n    // concrete property names.\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      invariant(desc.value !== undefined); // otherwise this is not simple\n      let val = desc.value;\n      invariant(val instanceof Value);\n      let cond = AbstractValue.createFromBinaryOp(\n        this.$Realm,\n        \"===\",\n        P,\n        new StringValue(this.$Realm, key),\n        undefined,\n        \"check for known property\"\n      );\n      result = Join.joinValuesAsConditional(this.$Realm, cond, val, result);\n    }\n    return result;\n  }\n\n  specializeJoin(absVal: AbstractValue, propName: Value): Value {\n    if (absVal.kind === \"widened property\") {\n      let ob = absVal.args[0];\n      if (propName instanceof StringValue) {\n        let pName = propName.value;\n        let pNumber = +pName;\n        if (pName === pNumber + \"\") propName = new NumberValue(this.$Realm, pNumber);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(this.$Realm, absVal.getType(), [ob, propName], ([o, p]) => {\n        return t.memberExpression(o, p, true);\n      });\n    }\n    invariant(absVal.args.length === 3 && absVal.kind === \"conditional\");\n    let generic_cond = absVal.args[0];\n    invariant(generic_cond instanceof AbstractValue);\n    let cond = this.specializeCond(generic_cond, propName);\n    let arg1 = absVal.args[1];\n    if (arg1 instanceof AbstractValue && arg1.args.length === 3) arg1 = this.specializeJoin(arg1, propName);\n    let arg2 = absVal.args[2];\n    if (arg2 instanceof AbstractValue && arg2.args.length === 3) arg2 = this.specializeJoin(arg2, propName);\n    return AbstractValue.createFromConditionalOp(this.$Realm, cond, arg1, arg2, absVal.expressionLocation);\n  }\n\n  specializeCond(absVal: AbstractValue, propName: Value): AbstractValue {\n    if (absVal.kind === \"template for property name condition\")\n      return AbstractValue.createFromBinaryOp(this.$Realm, \"===\", absVal.args[0], propName);\n    return absVal;\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    // 1. Return ? OrdinarySet(O, P, V, Receiver).\n    return Properties.OrdinarySet(this.$Realm, this, P, V, Receiver);\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    let pIsLoopVar = isWidenedValue(P);\n    let pIsNumeric = Value.isTypeCompatibleWith(P.getType(), NumberValue);\n\n    function createTemplate(realm: Realm, propName: AbstractValue) {\n      return AbstractValue.createFromBinaryOp(\n        realm,\n        \"===\",\n        propName,\n        new StringValue(realm, \"\"),\n        undefined,\n        \"template for property name condition\"\n      );\n    }\n\n    // We assume that simple objects have no getter/setter properties and\n    // that all properties are writable.\n    if (\n      this !== Receiver ||\n      !this.isSimpleObject() ||\n      (P.mightNotBeString() && P.mightNotBeNumber() && !P.isSimpleObject())\n    ) {\n      AbstractValue.reportIntrospectionError(P, \"TODO #1021\");\n      throw new FatalError();\n    }\n\n    let prop;\n    if (this.unknownProperty === undefined) {\n      prop = {\n        descriptor: undefined,\n        object: this,\n        key: P,\n      };\n      this.unknownProperty = prop;\n    } else {\n      prop = this.unknownProperty;\n    }\n    this.$Realm.recordModifiedProperty(prop);\n    let desc = prop.descriptor;\n    if (desc === undefined) {\n      let newVal = V;\n      if (!(V instanceof UndefinedValue) && !isWidenedValue(P)) {\n        // join V with undefined, using a property name test as the condition\n        let cond = createTemplate(this.$Realm, P);\n        newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, this.$Realm.intrinsics.undefined);\n      }\n      prop.descriptor = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: newVal,\n      };\n    } else {\n      // join V with current value of this.unknownProperty. I.e. weak update.\n      let oldVal = desc.value;\n      invariant(oldVal instanceof Value);\n      let newVal = oldVal;\n      if (!(V instanceof UndefinedValue)) {\n        if (isWidenedValue(P)) {\n          newVal = V; // It will be widened later on\n        } else {\n          let cond = createTemplate(this.$Realm, P);\n          newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        }\n      }\n      desc.value = newVal;\n    }\n\n    // Since we don't know the name of the property we are writing to, we also need\n    // to perform weak updates of all of the known properties.\n    // First clear out this.unknownProperty so that helper routines know its OK to update the properties\n    let savedUnknownProperty = this.unknownProperty;\n    this.unknownProperty = undefined;\n    for (let [key, propertyBinding] of this.properties) {\n      if (pIsLoopVar && pIsNumeric) {\n        // Delete numeric properties and don't do weak updates on other properties.\n        if (key !== +key + \"\") continue;\n        this.properties.delete(key);\n        continue;\n      }\n      let oldVal = this.$Realm.intrinsics.empty;\n      if (propertyBinding.descriptor && propertyBinding.descriptor.value) {\n        oldVal = propertyBinding.descriptor.value;\n        invariant(oldVal instanceof Value); // otherwise this is not simple\n      }\n      let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", P, new StringValue(this.$Realm, key));\n      let newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      Properties.OrdinarySet(this.$Realm, this, key, newVal, Receiver);\n    }\n    this.unknownProperty = savedUnknownProperty;\n\n    return true;\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined) {\n      // TODO #946: generate a delete from the object\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    // 1. Return ? OrdinaryDelete(O, P).\n    return Properties.OrdinaryDelete(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.11\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    return OrdinaryOwnPropertyKeys(this.$Realm, this);\n  }\n}\n"]}