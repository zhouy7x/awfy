{"version":3,"sources":["../src/utils.js"],"names":["typeToString","getTypeFromName","type","isInstance","proto","Constructor","prototype","isTypeCompatibleWith","undefined","typeName"],"mappings":";;;;;QA0BgBA,Y,GAAAA,Y;QA2BAC,e,GAAAA,e;;AA1ChB;;AAeO,SAASD,YAAT,CAAsBE,IAAtB,EAAyD;AAC9D,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,WAA3B,EAAiD;AAC/C,WAAOD,iBAAiBC,WAAjB,IAAgCD,UAAUC,YAAYC,SAA7D;AACD;AACD,MAAIF,QAAQF,KAAKI,SAAjB;AACA,MAAIH,WAAWC,KAAX,wBAAJ,EAAuC;AACrC,WAAO,WAAP;AACD,GAFD,MAEO,IAAID,WAAWC,KAAX,mBAAJ,EAAkC;AACvC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,sBAAJ,EAAqC;AAC1C,WAAO,SAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,QAAI,aAAMG,oBAAN,CAA2BL,IAA3B,uBAAJ,EAAqD;AACnD,aAAO,UAAP;AACD;AACD,WAAO,QAAP;AACD,GALM,MAKA;AACL,WAAOM,SAAP;AACD;AACF,C,CAnDD;;;;;;;;;AAqDO,SAASP,eAAT,CAAyBQ,QAAzB,EAAgE;AACrE,UAAQA,QAAR;AACE,SAAK,OAAL;AACE;AACF,SAAK,MAAL;AACE;AACF,SAAK,MAAL;AACE;AACF,SAAK,SAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,OAAL;AACE;AACF,SAAK,UAAL;AACE;AACF,SAAK,UAAL;AACE;AACF;AACE,aAAOD,SAAP;AAxBJ;AA0BD","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport {\n  ArrayValue,\n  BooleanValue,\n  EmptyValue,\n  FunctionValue,\n  NullValue,\n  NumberValue,\n  IntegralValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./values/index.js\";\n\nexport function typeToString(type: typeof Value): void | string {\n  function isInstance(proto, Constructor): boolean {\n    return proto instanceof Constructor || proto === Constructor.prototype;\n  }\n  let proto = type.prototype;\n  if (isInstance(proto, UndefinedValue)) {\n    return \"undefined\";\n  } else if (isInstance(proto, NullValue)) {\n    return \"object\";\n  } else if (isInstance(proto, StringValue)) {\n    return \"string\";\n  } else if (isInstance(proto, BooleanValue)) {\n    return \"boolean\";\n  } else if (isInstance(proto, NumberValue)) {\n    return \"number\";\n  } else if (isInstance(proto, SymbolValue)) {\n    return \"symbol\";\n  } else if (isInstance(proto, ObjectValue)) {\n    if (Value.isTypeCompatibleWith(type, FunctionValue)) {\n      return \"function\";\n    }\n    return \"object\";\n  } else {\n    return undefined;\n  }\n}\n\nexport function getTypeFromName(typeName: string): void | typeof Value {\n  switch (typeName) {\n    case \"empty\":\n      return EmptyValue;\n    case \"void\":\n      return UndefinedValue;\n    case \"null\":\n      return NullValue;\n    case \"boolean\":\n      return BooleanValue;\n    case \"string\":\n      return StringValue;\n    case \"symbol\":\n      return SymbolValue;\n    case \"number\":\n      return NumberValue;\n    case \"object\":\n      return ObjectValue;\n    case \"array\":\n      return ArrayValue;\n    case \"function\":\n      return FunctionValue;\n    case \"integral\":\n      return IntegralValue;\n    default:\n      return undefined;\n  }\n}\n"]}