{"version":3,"sources":["../../src/evaluators/SwitchStatement.js"],"names":["ast","strictCode","env","realm","labelSet","expression","discriminant","cases","exprRef","evaluate","switchValue","GetValue","oldEnv","getRunningContext","lexicalEnvironment","blockEnv","NewDeclarativeEnvironment","CaseBlock","map","c","consequent","reduce","stmts","case_blk","concat","BlockDeclarationInstantiation","R","CaseBlockEvaluation","e","target","intrinsics","undefined","value","onDestroyScope","CaseSelectorEvaluation","AbstractCaseBlockEvaluation","defaultCaseIndex","input","useAbstractInterpretation","DefiniteCaseEvaluation","caseIndex","result","length","i","node","r","evaluateCompletion","diagnostic","location","handleError","AbstractCaseEvaluation","empty","test","selector","selectionResult","mightNotBeTrue","mightNotBeFalse","trueEffects","withCondition","evaluateForEffects","falseEffects","withInverseCondition","joinedEffects","joinEffects","completion","composeWithSavedCompletion","applyEffects","EvaluateCase","res","EvaluateCaseClauses","A","V","found","C","clauseSelector","val","default_case_num","findIndex","clause","slice","foundInB","B"],"mappings":"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","file":"SwitchStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { CompilerDiagnostic } from \"../errors.js\";\nimport { Reference } from \"../environment.js\";\nimport { computeBinary } from \"./BinaryExpression.js\";\nimport { AbruptCompletion, BreakCompletion, PossiblyNormalCompletion, Completion } from \"../completions.js\";\nimport { InternalGetResultValue } from \"./ForOfStatement.js\";\nimport { EmptyValue, AbstractValue, Value } from \"../values/index.js\";\nimport { StrictEqualityComparisonPartial, UpdateEmpty } from \"../methods/index.js\";\nimport { Environment, Path, Join } from \"../singletons.js\";\nimport { FatalError } from \"../errors.js\";\nimport type { BabelNodeSwitchStatement, BabelNodeSwitchCase, BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\n// 13.12.10 Runtime Semantics: CaseSelectorEvaluation\nfunction CaseSelectorEvaluation(\n  expression: BabelNodeExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  // 1. Let exprRef be the result of evaluating Expression.\n  let exprRef = env.evaluate(expression, strictCode);\n\n  // 2. Return ? GetValue(exprRef).\n  return Environment.GetValue(realm, exprRef);\n}\n\nfunction AbstractCaseBlockEvaluation(\n  cases: Array<BabelNodeSwitchCase>,\n  defaultCaseIndex: number,\n  input: Value,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  invariant(realm.useAbstractInterpretation);\n\n  let DefiniteCaseEvaluation = (caseIndex: number): Value => {\n    let result = realm.intrinsics.undefined;\n    // we start at the case we've been asked to evaluate, and process statements\n    // until there is either a break statement or exception thrown (this means we\n    // implicitly fall through correctly in the absence of a break statement).\n    while (caseIndex < cases.length) {\n      let c = cases[caseIndex];\n      for (let i = 0; i < c.consequent.length; i += 1) {\n        let node = c.consequent[i];\n        let r = env.evaluateCompletion(node, strictCode);\n        invariant(!(r instanceof Reference));\n\n        if (r instanceof PossiblyNormalCompletion) {\n          // TODO correct handling of PossiblyNormal and AbruptCompletion\n          let diagnostic = new CompilerDiagnostic(\n            \"case block containing a throw, return or continue is not yet supported\",\n            r.location,\n            \"PP0027\",\n            \"FatalError\"\n          );\n          realm.handleError(diagnostic);\n          throw new FatalError();\n        }\n\n        result = UpdateEmpty(realm, r, result);\n        if (result instanceof Completion) break;\n      }\n\n      if (result instanceof Completion) break;\n      caseIndex++;\n    }\n\n    if (result instanceof BreakCompletion) {\n      return result.value;\n    } else if (result instanceof AbruptCompletion) {\n      // TODO correct handling of PossiblyNormal and AbruptCompletion\n      let diagnostic = new CompilerDiagnostic(\n        \"case block containing a throw, return or continue is not yet supported\",\n        result.location,\n        \"PP0027\",\n        \"FatalError\"\n      );\n      realm.handleError(diagnostic);\n      throw new FatalError();\n    } else {\n      invariant(result instanceof Value);\n      return result;\n    }\n  };\n\n  let AbstractCaseEvaluation = (caseIndex: number): Value => {\n    if (caseIndex === defaultCaseIndex) {\n      // skip the default case until we've exhausted all other options\n      return AbstractCaseEvaluation(caseIndex + 1);\n    } else if (caseIndex >= cases.length) {\n      // this is the stop condition for our recursive search for a matching case.\n      // we tried every available case index and since nothing matches we return\n      // the default (and if none exists....just empty)\n      if (defaultCaseIndex !== -1) {\n        return DefiniteCaseEvaluation(defaultCaseIndex);\n      } else {\n        return realm.intrinsics.empty;\n      }\n    }\n    // else we have a normal in-range case index\n\n    let c = cases[caseIndex];\n    let test = c.test;\n    invariant(test);\n\n    let selector = CaseSelectorEvaluation(test, strictCode, env, realm);\n    let selectionResult = computeBinary(realm, \"===\", input, selector);\n\n    if (!selectionResult.mightNotBeTrue()) {\n      //  we have a winning result for the switch case, bubble it back up!\n      return DefiniteCaseEvaluation(caseIndex);\n    } else if (!selectionResult.mightNotBeFalse()) {\n      // we have a case that is definitely *not* taken\n      // so we go and look at the next one in the hope of finding a match\n      return AbstractCaseEvaluation(caseIndex + 1);\n    } else {\n      invariant(selectionResult instanceof AbstractValue);\n      // we can't be sure whether the case selector evaluates true or not\n      // so we evaluate the case in the abstract as an if-else with the else\n      // leading to the next case statement\n      let trueEffects = Path.withCondition(selectionResult, () => {\n        return realm.evaluateForEffects(() => {\n          return DefiniteCaseEvaluation(caseIndex);\n        });\n      });\n\n      let falseEffects = Path.withInverseCondition(selectionResult, () => {\n        return realm.evaluateForEffects(() => {\n          return AbstractCaseEvaluation(caseIndex + 1);\n        });\n      });\n\n      let joinedEffects = Join.joinEffects(realm, selectionResult, trueEffects, falseEffects);\n      let completion = joinedEffects[0];\n      if (completion instanceof PossiblyNormalCompletion) {\n        // in this case one of the branches may complete abruptly, which means that\n        // not all control flow branches join into one flow at this point.\n        // Consequently we have to continue tracking changes until the point where\n        // all the branches come together into one.\n        completion = realm.composeWithSavedCompletion(completion);\n      }\n      // Note that the effects of (non joining) abrupt branches are not included\n      // in joinedEffects, but are tracked separately inside completion.\n      realm.applyEffects(joinedEffects);\n\n      // return or throw completion\n      if (completion instanceof AbruptCompletion) throw completion;\n      invariant(completion instanceof Value);\n      return completion;\n    }\n  };\n\n  // let the recursive search for a matching case begin!\n  return AbstractCaseEvaluation(0);\n}\n\nfunction CaseBlockEvaluation(\n  cases: Array<BabelNodeSwitchCase>,\n  input: Value,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  let EvaluateCase = (c: BabelNodeSwitchCase): Value | AbruptCompletion => {\n    let r = realm.intrinsics.empty;\n    for (let node of c.consequent) {\n      let res = env.evaluateCompletion(node, strictCode);\n      if (res instanceof AbruptCompletion) return (UpdateEmpty(realm, res, r): any);\n      if (!(res instanceof EmptyValue)) r = res;\n    }\n    return r;\n  };\n\n  let EvaluateCaseClauses = (A: Array<BabelNodeSwitchCase>, V: Value): [boolean, Value] => {\n    // 2. Let A be the List of CaseClause items in CaseClauses, in source text order.\n    // A is passed in\n\n    // 3. Let found be false.\n    let found = false;\n\n    // 4. Repeat for each CaseClause C in A,\n    for (let C of A) {\n      // a. If found is false, then\n      if (!found) {\n        // i. Let clauseSelector be the result of CaseSelectorEvaluation of C.\n        let test = C.test;\n        invariant(test);\n        let clauseSelector = CaseSelectorEvaluation(test, strictCode, env, realm);\n\n        // ii. ReturnIfAbrupt(clauseSelector).\n        // above will throw a Completion which will return\n\n        // iii. Let found be the result of performing Strict Equality Comparison input === clauseSelector.[[Value]].\n        found = StrictEqualityComparisonPartial(realm, input, clauseSelector);\n      }\n      if (found) {\n        // b. If found is true, then\n        // i. Let R be the result of evaluating C.\n        let R = EvaluateCase(C);\n\n        // ii. If R.[[Value]] is not empty, let V be R.[[Value]].\n        let val = InternalGetResultValue(realm, R);\n        if (!(val instanceof EmptyValue)) V = val;\n\n        // iii. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).\n        if (R instanceof AbruptCompletion) {\n          throw UpdateEmpty(realm, R, V);\n        }\n      }\n    }\n    return [found, V];\n  };\n\n  // CaseBlock:{}\n  // 1. Return NormalCompletion(undefined).\n  if (cases.length === 0) return realm.intrinsics.undefined;\n\n  // CaseBlock:{CaseClauses DefaultClause CaseClauses}\n  let default_case_num = cases.findIndex(clause => {\n    return clause.test === null;\n  });\n\n  // Abstract interpretation of case blocks is a significantly different process\n  // from regular interpretation, so we fork off early to keep things tidily separated.\n  if (input instanceof AbstractValue) {\n    return AbstractCaseBlockEvaluation(cases, default_case_num, input, strictCode, env, realm);\n  }\n\n  if (default_case_num !== -1) {\n    // 2. Let A be the List of CaseClause items in the first CaseClauses, in source text order. If the first CaseClauses is not present, A is « ».\n    let A = cases.slice(0, default_case_num);\n\n    let V = realm.intrinsics.undefined;\n\n    // 4. Repeat for each CaseClause C in A\n    [, V] = EvaluateCaseClauses(A, V);\n\n    // 5. Let foundInB be false.\n    let foundInB = false;\n\n    // 6. Let B be the List containing the CaseClause items in the second CaseClauses, in source text order. If the second CaseClauses is not present, B is « ».\n    let B = cases.slice(default_case_num + 1);\n\n    [foundInB, V] = EvaluateCaseClauses(B, V);\n\n    // 8. If foundInB is true, return NormalCompletion(V).\n    if (foundInB) return V;\n\n    // 9. Let R be the result of evaluating DefaultClause.\n    let R = EvaluateCase(cases[default_case_num]);\n\n    // 10. If R.[[Value]] is not empty, let V be R.[[Value]].\n    let val = InternalGetResultValue(realm, R);\n    if (!(val instanceof EmptyValue)) V = val;\n\n    // 11. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).\n    if (R instanceof AbruptCompletion) {\n      throw UpdateEmpty(realm, R, V);\n    }\n\n    // 12: Repeat for each CaseClause C in B (NOTE this is another complete iteration of the second CaseClauses)\n    for (let C of B) {\n      // a. Let R be the result of evaluating CaseClause C.\n      R = EvaluateCase(C);\n\n      // b. If R.[[Value]] is not empty, let V be R.[[Value]].\n      let value = InternalGetResultValue(realm, R);\n      if (!(value instanceof EmptyValue)) V = value;\n\n      // c. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).\n      if (R instanceof AbruptCompletion) {\n        throw UpdateEmpty(realm, R, V);\n      }\n    }\n\n    // 13. Return NormalCompletion(V).\n    return V;\n  } else {\n    // CaseBlock:{CaseClauses}\n    let V;\n    [, V] = EvaluateCaseClauses(cases, realm.intrinsics.undefined);\n    return V;\n  }\n}\n\n// 13.12.11\nexport default function(\n  ast: BabelNodeSwitchStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm,\n  labelSet: Array<string>\n): Value {\n  let expression = ast.discriminant;\n  let cases: Array<BabelNodeSwitchCase> = ast.cases;\n\n  // 1. Let exprRef be the result of evaluating Expression.\n  let exprRef = env.evaluate(expression, strictCode);\n\n  // 2. Let switchValue be ? GetValue(exprRef).\n  let switchValue = Environment.GetValue(realm, exprRef);\n\n  // 3. Let oldEnv be the running execution context's LexicalEnvironment.\n  let oldEnv = realm.getRunningContext().lexicalEnvironment;\n\n  // 4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\n  let blockEnv = Environment.NewDeclarativeEnvironment(realm, oldEnv);\n\n  // 5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).\n  let CaseBlock = cases.map(c => c.consequent).reduce((stmts, case_blk) => stmts.concat(case_blk), []);\n  Environment.BlockDeclarationInstantiation(realm, strictCode, CaseBlock, blockEnv);\n\n  // 6. Set the running execution context's LexicalEnvironment to blockEnv.\n  realm.getRunningContext().lexicalEnvironment = blockEnv;\n\n  let R;\n  try {\n    // 7. Let R be the result of performing CaseBlockEvaluation of CaseBlock with argument switchValue.\n    R = CaseBlockEvaluation(cases, switchValue, strictCode, blockEnv, realm);\n\n    // 9. Return R.\n    return R;\n  } catch (e) {\n    if (e instanceof BreakCompletion) {\n      if (!e.target) return (UpdateEmpty(realm, e, realm.intrinsics.undefined): any).value;\n    }\n    throw e;\n  } finally {\n    // 8. Set the running execution context's LexicalEnvironment to oldEnv.\n    realm.getRunningContext().lexicalEnvironment = oldEnv;\n    realm.onDestroyScope(blockEnv);\n  }\n}\n"]}