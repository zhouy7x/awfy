'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _OptionParser = require('./OptionParser');

var _OptionParser2 = _interopRequireDefault(_OptionParser);

var _builtinTransforms = require('./builtinTransforms');

var _builtinTransforms2 = _interopRequireDefault(_builtinTransforms);

var _io = require('./io');

var _io2 = _interopRequireDefault(_io);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Lebab command line app
 */
var Cli = function () {
  /**
   * @param {String[]} argv Command line arguments
   */
  function Cli(argv) {
    _classCallCheck(this, Cli);

    try {
      this.options = new _OptionParser2.default().parse(argv);
    } catch (error) {
      console.error(error); // eslint-disable-line no-console
      process.exit(2);
    }

    this.transformer = _builtinTransforms2.default.createTransformer(this.options.transforms);
  }

  /**
   * Runs the app
   */


  _createClass(Cli, [{
    key: 'run',
    value: function run() {
      var _this = this;

      if (this.options.replace) {
        // Transform all files in a directory
        _glob2.default.sync(this.options.replace).forEach(function (file) {
          _this.transformFile(file, file);
        });
      } else {
        // Transform just a single file
        this.transformFile(this.options.inFile, this.options.outFile);
      }
    }
  }, {
    key: 'transformFile',
    value: function transformFile(inFile, outFile) {
      var _transformer$run = this.transformer.run(_io2.default.read(inFile)),
          code = _transformer$run.code,
          warnings = _transformer$run.warnings;

      // Log warnings if there are any


      if (warnings.length > 0 && inFile) {
        console.error(inFile + ':'); // eslint-disable-line no-console
      }

      warnings.forEach(function (_ref) {
        var line = _ref.line,
            msg = _ref.msg,
            type = _ref.type;

        console.error( // eslint-disable-line no-console
        line + ':  warning  ' + msg + '  (' + type + ')');
      });

      _io2.default.write(outFile, code);
    }
  }]);

  return Cli;
}();

exports.default = Cli;
module.exports = exports['default'];