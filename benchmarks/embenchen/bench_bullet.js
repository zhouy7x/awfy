// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 460016;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 460056;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(460819);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a556() } });


/* memory initializer */ allocate([0,0,122,195,158,123,63,64,223,143,226,66,0,0,122,195,42,198,11,64,66,96,234,66,16,24,118,195,3,178,207,63,223,143,226,66,16,24,118,195,119,21,194,63,66,96,234,66,33,48,114,195,237,239,88,63,223,143,226,66,33,48,114,195,10,218,32,63,66,96,234,66,240,71,110,195,42,139,50,191,223,143,226,66,240,71,110,195,15,100,17,191,66,96,234,66,0,96,106,195,113,172,41,192,223,143,226,66,0,96,106,195,231,0,1,192,66,96,234,66,16,120,102,195,208,155,116,192,223,143,226,66,16,120,102,195,6,76,90,192,66,96,234,66,33,144,98,195,197,114,127,192,223,143,226,66,33,144,98,195,18,247,116,192,66,96,234,66,240,167,94,195,84,87,176,192,223,143,226,66,240,167,94,195,237,129,160,192,66,96,234,66,0,192,90,195,24,33,180,192,223,143,226,66,0,192,90,195,107,241,151,192,66,96,234,66,16,216,86,195,232,246,156,192,223,143,226,66,16,216,86,195,245,190,83,192,66,96,234,66,33,240,82,195,196,66,61,192,223,143,226,66,33,240,82,195,163,204,20,192,66,96,234,66,240,7,79,195,156,80,28,192,223,143,226,66,240,7,79,195,18,136,219,191,66,96,234,66,0,32,75,195,206,25,193,191,223,143,226,66,0,32,75,195,112,148,152,191,66,96,234,66,16,56,71,195,102,250,5,190,223,143,226,66,16,56,71,195,21,196,96,62,66,96,234,66,33,80,67,195,74,68,124,63,223,143,226,66,33,80,67,195,127,222,212,63,66,96,234,66,240,103,63,195,73,215,76,64,223,143,226,66,240,103,63,195,205,59,139,64,66,96,234,66,0,128,59,195,91,177,149,64,223,143,226,66,0,128,59,195,10,162,202,64,66,96,234,66,16,152,55,195,157,104,197,64,223,143,226,66,16,152,55,195,208,39,0,65,66,96,234,66,33,176,51,195,123,3,3,65,223,143,226,66,33,176,51,195,17,112,27,65,66,96,234,66,240,199,47,195,245,156,21,65,223,143,226,66,240,199,47,195,251,92,44,65,66,96,234,66,0,224,43,195,61,27,24,65,223,143,226,66,0,224,43,195,94,186,53,65,66,96,234,66,16,248,39,195,228,20,66,65,223,143,226,66,16,248,39,195,229,97,72,65,66,96,234,66,33,16,36,195,253,246,109,65,223,143,226,66,33,16,36,195,120,11,106,65,66,96,234,66,240,39,32,195,65,2,131,65,223,143,226,66,240,39,32,195,187,167,137,65,66,96,234,66,0,64,28,195,41,75,148,65,223,143,226,66,0,64,28,195,189,210,159,65,66,96,234,66,16,88,24,195,116,181,179,65,223,143,226,66,16,88,24,195,131,175,187,65,66,96,234,66,33,112,20,195,206,42,209,65,223,143,226,66,33,112,20,195,235,226,212,65,66,96,234,66,240,135,16,195,87,219,228,65,223,143,226,66,240,135,16,195,63,181,227,65,66,96,234,66,0,160,12,195,106,60,242,65,223,143,226,66,0,160,12,195,252,41,238,65,66,96,234,66,16,184,8,195,64,228,0,66,223,143,226,66,16,184,8,195,21,140,248,65,66,96,234,66,33,208,4,195,78,145,3,66,223,143,226,66,33,208,4,195,76,183,254,65,66,96,234,66,240,231,0,195,165,14,6,66,223,143,226,66,240,231,0,195,199,169,0,66,66,96,234,66,0,0,250,194,3,201,10,66,223,143,226,66,0,0,250,194,191,253,10,66,66,96,234,66,33,48,242,194,23,153,21,66,223,143,226,66,33,48,242,194,230,63,16,66,66,96,234,66,66,96,234,194,131,47,24,66,223,143,226,66,66,96,234,194,175,20,21,66,66,96,234,66,223,143,226,194,4,103,23,66,223,143,226,66,223,143,226,194,189,99,21,66,66,96,234,66,0,192,218,194,246,151,23,66,223,143,226,66,0,192,218,194,207,247,20,66,66,96,234,66,33,240,210,194,131,47,16,66,223,143,226,66,33,240,210,194,27,158,16,66,66,96,234,66,66,32,203,194,84,116,8,66,223,143,226,66,66,32,203,194,172,156,5,66,66,96,234,66,7,80,195,194,184,94,0,66,223,143,226,66,7,80,195,194,29,90,250,65,66,96,234,66,0,128,187,194,18,165,238,65,223,143,226,66,0,128,187,194,3,248,235,65,66,96,234,66,7,176,179,194,255,50,241,65,223,143,226,66,7,176,179,194,222,113,232,65,66,96,234,66,0,224,171,194,156,179,230,65,223,143,226,66,0,224,171,194,162,52,226,65,66,96,234,66,7,16,164,194,227,199,215,65,223,143,226,66,7,16,164,194,191,14,213,65,66,96,234,66,0,64,156,194,119,173,203,65,223,143,226,66,0,64,156,194,249,160,198,65,66,96,234,66,7,112,148,194,140,219,186,65,223,143,226,66,7,112,148,194,126,157,181,65,66,96,234,66,0,160,140,194,193,74,169,65,223,143,226,66,0,160,140,194,174,199,163,65,66,96,234,66,7,208,132,194,56,248,144,65,223,143,226,66,7,208,132,194,59,223,143,65,66,96,234,66,0,0,122,194,147,186,130,65,223,143,226,66,0,0,122,194,41,109,130,65,66,96,234,66,13,96,106,194,51,51,113,65,223,143,226,66,13,96,106,194,214,86,99,65,66,96,234,66,0,192,90,194,161,248,99,65,223,143,226,66,0,192,90,194,7,240,76,65,66,96,234,66,13,32,75,194,70,182,92,65,223,143,226,66,13,32,75,194,165,189,72,65,66,96,234,66,0,128,59,194,109,86,75,65,223,143,226,66,0,128,59,194,127,217,66,65,66,96,234,66,13,224,43,194,168,53,41,65,223,143,226,66,13,224,43,194,193,57,50,65,66,96,234,66,0,64,28,194,23,229,31,65,223,143,226,66,0,64,28,194,149,101,39,65,66,96,234,66,13,160,12,194,99,127,49,65,223,143,226,66,13,160,12,194,69,216,48,65,66,96,234,66,0,0,250,193,233,72,63,65,223,143,226,66,0,0,250,193,150,67,55,65,66,96,234,66,26,192,218,193,165,44,57,65,223,143,226,66,26,192,218,193,87,236,40,65,66,96,234,66,0,128,187,193,156,162,48,65,223,143,226,66,0,128,187,193,243,31,42,65,66,96,234,66,26,64,156,193,254,67,72,65,223,143,226,66,26,64,156,193,16,233,72,65,66,96,234,66,0,0,122,193,45,178,93,65,223,143,226,66,0,0,122,193,86,159,88,65,66,96,234,66,52,128,59,193,102,102,104,65,223,143,226,66,52,128,59,193,52,17,102,65,66,96,234,66,0,0,250,192,30,22,108,65,223,143,226,66,0,0,250,192,196,177,119,65,66,96,234,66,0,0,122,192,54,171,126,65,223,143,226,66,0,0,122,192,112,206,128,65,66,96,234,66,0,0,0,0,24,149,136,65,223,143,226,66,0,0,0,0,164,240,138,65,66,96,234,66,0,0,122,64,100,204,146,65,223,143,226,66,0,0,122,64,29,90,151,65,66,96,234,66,0,0,122,195,43,48,149,64,0,192,218,66,16,24,118,195,205,88,16,64,0,192,218,66,33,48,114,195,218,255,120,63,0,192,218,66,240,71,110,195,45,38,250,191,0,192,218,66,0,96,106,195,34,113,47,192,0,192,218,66,16,120,102,195,25,4,104,192,0,192,218,66,33,144,98,195,150,178,145,192,0,192,218,66,240,167,94,195,97,50,205,192,0,192,218,66,0,192,90,195,29,119,215,192,0,192,218,66,16,216,86,195,79,88,189,192,0,192,218,66,33,240,82,195,193,173,151,192,0,192,218,66,240,7,79,195,62,232,83,192,0,192,218,66,0,32,75,195,55,84,4,192,0,192,218,66,16,56,71,195,62,32,120,191,0,192,218,66,33,80,67,195,69,157,137,62,0,192,218,66,240,103,63,195,188,87,249,63,0,192,218,66,0,128,59,195,188,174,51,64,0,192,218,66,16,152,55,195,249,20,135,64,0,192,218,66,33,176,51,195,161,161,166,64,0,192,218,66,240,199,47,195,97,26,239,64,0,192,218,66,0,224,43,195,35,62,23,65,0,192,218,66,16,248,39,195,174,71,74,65,0,192,218,66,33,16,36,195,222,2,111,65,0,192,218,66,240,39,32,195,164,95,134,65,0,192,218,66,0,64,28,195,86,31,156,65,0,192,218,66,16,88,24,195,57,52,171,65,0,192,218,66,33,112,20,195,216,1,201,65,0,192,218,66,240,135,16,195,23,72,227,65,0,192,218,66,0,160,12,195,191,14,246,65,0,192,218,66,16,184,8,195,222,19,4,66,0,192,218,66,33,208,4,195,186,73,4,66,0,192,218,66,240,231,0,195,15,139,4,66,0,192,218,66,0,0,250,194,56,56,12,66,0,192,218,66,33,48,242,194,83,197,17,66,0,192,218,66,66,96,234,194,86,78,25,66,0,192,218,66,223,143,226,194,183,34,26,66,0,192,218,66,0,192,218,194,231,12,20,66,0,192,218,66,33,240,210,194,13,160,11,66,0,192,218,66,66,32,203,194,84,244,3,66,0,192,218,66,7,80,195,194,212,43,247,65,0,192,218,66,0,128,187,194,213,9,244,65,0,192,218,66,7,176,179,194,84,244,243,65,0,192,218,66,0,224,171,194,142,6,231,65,0,192,218,66,7,16,164,194,163,146,225,65,0,192,218,66,0,64,156,194,202,84,207,65,0,192,218,66,7,112,148,194,14,190,186,65,0,192,218,66,0,160,140,194,7,223,167,65,0,192,218,66,7,208,132,194,166,27,147,65,0,192,218,66,0,0,122,194,42,58,135,65,0,192,218,66,13,96,106,194,199,41,116,65,0,192,218,66,0,192,90,194,36,40,101,65,0,192,218,66,13,32,75,194,247,6,86,65,0,192,218,66,0,128,59,194,220,70,73,65,0,192,218,66,13,224,43,194,217,61,53,65,0,192,218,66,0,64,28,194,57,69,48,65,0,192,218,66,13,160,12,194,161,248,59,65,0,192,218,66,0,0,250,193,40,15,72,65,0,192,218,66,26,192,218,193,150,33,70,65,0,192,218,66,0,128,187,193,136,244,68,65,0,192,218,66,26,64,156,193,47,221,73,65,0,192,218,66,0,0,122,193,241,99,92,65,0,192,218,66,52,128,59,193,217,206,101,65,0,192,218,66,0,0,250,192,125,63,109,65,0,192,218,66,0,0,122,192,129,149,121,65,0,192,218,66,0,0,0,0,166,27,131,65,0,192,218,66,0,0,122,64,123,3,144,65,0,192,218,66,0,0,122,195,60,165,167,64,33,240,210,66,16,24,118,195,104,232,57,64,33,240,210,66,33,48,114,195,208,127,135,62,33,240,210,66,240,71,110,195,61,238,147,190,33,240,210,66,0,96,106,195,24,9,105,191,33,240,210,66,16,120,102,195,95,70,13,192,33,240,210,66,33,144,98,195,95,152,108,192,33,240,210,66,240,167,94,195,47,221,166,192,33,240,210,66,0,192,90,195,169,77,194,192,33,240,210,66,16,216,86,195,120,156,173,192,33,240,210,66,33,240,82,195,89,76,154,192,33,240,210,66,240,7,79,195,68,23,78,192,33,240,210,66,0,32,75,195,149,241,17,192,33,240,210,66,16,56,71,195,56,132,194,191,33,240,210,66,33,80,67,195,252,25,62,189,33,240,210,66,240,103,63,195,4,28,222,63,33,240,210,66,0,128,59,195,153,100,46,64,33,240,210,66,16,152,55,195,121,204,140,64,33,240,210,66,33,176,51,195,188,92,175,64,33,240,210,66,240,199,47,195,214,226,232,64,33,240,210,66,0,224,43,195,180,200,33,65,33,240,210,66,16,248,39,195,38,228,80,65,33,240,210,66,33,16,36,195,53,94,123,65,33,240,210,66,240,39,32,195,39,194,142,65,33,240,210,66,0,64,28,195,233,183,158,65,33,240,210,66,16,88,24,195,109,86,173,65,33,240,210,66,33,112,20,195,20,46,193,65,33,240,210,66,240,135,16,195,164,95,227,65,33,240,210,66,0,160,12,195,108,137,253,65,33,240,210,66,16,184,8,195,142,134,9,66,33,240,210,66,33,208,4,195,186,154,11,66,33,240,210,66,240,231,0,195,239,56,7,66,33,240,210,66,0,0,250,194,88,74,9,66,33,240,210,66,33,48,242,194,165,108,14,66,33,240,210,66,66,96,234,194,186,218,23,66,33,240,210,66,223,143,226,194,81,171,26,66,33,240,210,66,0,192,218,194,75,136,19,66,33,240,210,66,33,240,210,194,161,86,10,66,33,240,210,66,66,32,203,194,110,227,0,66,33,240,210,66,7,80,195,194,145,15,243,65,33,240,210,66,0,128,187,194,247,100,243,65,33,240,210,66,7,176,179,194,116,53,246,65,33,240,210,66,0,224,171,194,2,171,238,65,33,240,210,66,7,16,164,194,153,42,224,65,33,240,210,66,0,64,156,194,162,197,205,65,33,240,210,66,7,112,148,194,23,55,183,65,33,240,210,66,0,160,140,194,220,70,167,65,33,240,210,66,7,208,132,194,225,11,146,65,33,240,210,66,0,0,122,194,18,131,133,65,33,240,210,66,13,96,106,194,232,217,124,65,33,240,210,66,0,192,90,194,48,76,109,65,33,240,210,66,13,32,75,194,110,52,92,65,33,240,210,66,0,128,59,194,169,19,80,65,33,240,210,66,13,224,43,194,85,193,62,65,33,240,210,66,0,64,28,194,4,86,64,65,33,240,210,66,13,160,12,194,251,92,68,65,33,240,210,66,0,0,250,193,58,35,74,65,33,240,210,66,26,192,218,193,231,251,74,65,33,240,210,66,0,128,187,193,71,3,70,65,33,240,210,66,26,64,156,193,8,61,80,65,33,240,210,66,0,0,122,193,128,183,96,65,33,240,210,66,52,128,59,193,208,179,105,65,33,240,210,66,0,0,250,192,156,196,113,65,33,240,210,66,0,0,122,192,32,99,125,65,33,240,210,66,0,0,0,0,117,147,134,65,33,240,210,66,0,0,122,64,184,175,143,65,33,240,210,66,0,0,122,195,177,225,136,64,66,32,203,66,16,24,118,195,65,43,54,64,66,32,203,66,33,48,114,195,42,0,0,64,66,32,203,66,240,71,110,195,182,16,204,63,66,32,203,66,0,96,106,195,101,53,253,62,66,32,203,66,16,120,102,195,224,161,228,191,66,32,203,66,33,144,98,195,167,121,55,192,66,32,203,66,240,167,94,195,66,33,160,192,66,32,203,66,0,192,90,195,252,140,192,192,66,32,203,66,16,216,86,195,144,131,169,192,66,32,203,66,33,240,82,195,72,220,130,192,66,32,203,66,240,7,79,195,25,28,113,192,66,32,203,66,0,32,75,195,26,139,34,192,66,32,203,66,16,56,71,195,206,223,136,191,66,32,203,66,33,80,67,195,180,0,229,190,66,32,203,66,240,103,63,195,251,5,195,63,66,32,203,66,0,128,59,195,227,25,90,64,66,32,203,66,16,152,55,195,103,126,143,64,66,32,203,66,33,176,51,195,223,79,217,64,66,32,203,66,240,199,47,195,148,251,10,65,66,32,203,66,0,224,43,195,232,106,50,65,66,32,203,66,16,248,39,195,242,65,103,65,66,32,203,66,33,16,36,195,8,189,140,65,66,32,203,66,240,39,32,195,82,73,155,65,66,32,203,66,0,64,28,195,156,34,166,65,66,32,203,66,16,88,24,195,122,37,178,65,66,32,203,66,33,112,20,195,104,51,192,65,66,32,203,66,240,135,16,195,222,241,221,65,66,32,203,66,0,160,12,195,146,220,251,65,66,32,203,66,16,184,8,195,248,147,9,66,66,32,203,66,33,208,4,195,98,97,13,66,66,32,203,66,240,231,0,195,253,246,11,66,66,32,203,66,0,0,250,194,181,230,8,66,66,32,203,66,33,48,242,194,188,180,12,66,66,32,203,66,66,96,234,194,238,60,21,66,66,32,203,66,223,143,226,194,4,231,22,66,66,32,203,66,0,192,218,194,178,238,16,66,66,32,203,66,33,240,210,194,113,189,9,66,66,32,203,66,66,32,203,194,141,104,0,66,66,32,203,66,7,80,195,194,24,149,248,65,66,32,203,66,0,128,187,194,56,248,245,65,66,32,203,66,7,176,179,194,0,128,246,65,66,32,203,66,0,224,171,194,13,113,237,65,66,32,203,66,7,16,164,194,28,107,218,65,66,32,203,66,0,64,156,194,241,227,200,65,66,32,203,66,7,112,148,194,20,46,181,65,66,32,203,66,0,160,140,194,80,13,161,65,66,32,203,66,7,208,132,194,9,27,144,65,66,32,203,66,0,0,122,194,150,33,137,65,66,32,203,66,13,96,106,194,165,78,134,65,66,32,203,66,0,192,90,194,7,95,123,65,66,32,203,66,13,32,75,194,207,247,106,65,66,32,203,66,0,128,59,194,54,205,85,65,66,32,203,66,13,224,43,194,128,183,57,65,66,32,203,66,0,64,28,194,217,95,53,65,66,32,203,66,13,160,12,194,97,195,70,65,66,32,203,66,0,0,250,193,135,22,81,65,66,32,203,66,26,192,218,193,14,45,71,65,66,32,203,66,0,128,187,193,234,149,61,65,66,32,203,66,26,64,156,193,123,20,91,65,66,32,203,66,0,0,122,193,229,97,107,65,66,32,203,66,52,128,59,193,115,104,111,65,66,32,203,66,0,0,250,192,117,2,113,65,66,32,203,66,0,0,122,192,161,248,128,65,66,32,203,66,0,0,0,0,135,167,136,65,66,32,203,66,0,0,122,64,193,168,141,65,66,32,203,66,0,0,122,195,45,236,135,64,7,80,195,66,16,24,118,195,151,86,123,64,7,80,195,66,33,48,114,195,148,251,71,64,7,80,195,66,240,71,110,195,95,181,4,64,7,80,195,66,0,96,106,195,157,215,208,62,7,80,195,66,16,120,102,195,225,150,103,191,7,80,195,66,33,144,98,195,230,203,39,192,7,80,195,66,240,167,94,195,47,23,121,192,7,80,195,66,0,192,90,195,116,210,179,192,7,80,195,66,16,216,86,195,79,6,128,192,7,80,195,66,33,240,82,195,81,160,25,192,7,80,195,66,240,7,79,195,152,163,25,192,7,80,195,66,0,32,75,195,255,62,251,191,7,80,195,66,16,56,71,195,245,132,189,191,7,80,195,66,33,80,67,195,115,47,208,189,7,80,195,66,240,103,63,195,173,47,222,63,7,80,195,66,0,128,59,195,255,62,107,64,7,80,195,66,16,152,55,195,125,232,163,64,7,80,195,66,33,176,51,195,37,93,244,64,7,80,195,66,240,199,47,195,39,194,34,65,7,80,195,66,0,224,43,195,204,127,68,65,7,80,195,66,16,248,39,195,197,143,116,65,7,80,195,66,33,16,36,195,82,201,145,65,7,80,195,66,240,39,32,195,16,250,163,65,7,80,195,66,0,64,28,195,37,6,175,65,7,80,195,66,16,88,24,195,69,216,185,65,7,80,195,66,33,112,20,195,24,38,194,65,7,80,195,66,240,135,16,195,204,127,225,65,7,80,195,66,0,160,12,195,222,19,250,65,7,80,195,66,16,184,8,195,210,64,5,66,7,80,195,66,33,208,4,195,168,70,13,66,7,80,195,66,240,231,0,195,82,103,12,66,7,80,195,66,0,0,250,194,86,78,11,66,7,80,195,66,33,48,242,194,139,44,9,66,7,80,195,66,66,96,234,194,148,246,17,66,7,80,195,66,223,143,226,194,29,201,20,66,7,80,195,66,0,192,218,194,166,138,16,66,7,80,195,66,33,240,210,194,114,138,9,66,7,80,195,66,66,32,203,194,46,16,247,65,7,80,195,66,7,80,195,194,112,223,240,65,7,80,195,66,0,128,187,194,148,118,247,65,7,80,195,66,7,176,179,194,52,0,247,65,7,80,195,66,0,224,171,194,221,36,232,65,7,80,195,66,7,16,164,194,231,123,218,65,7,80,195,66,0,64,156,194,209,17,200,65,7,80,195,66,7,112,148,194,61,44,173,65,7,80,195,66,0,160,140,194,206,8,148,65,7,80,195,66,7,208,132,194,174,71,149,65,7,80,195,66,0,0,122,194,11,70,145,65,7,80,195,66,13,96,106,194,2,43,140,65,7,80,195,66,0,192,90,194,17,182,130,65,7,80,195,66,13,32,75,194,198,220,109,65,7,80,195,66,0,128,59,194,234,149,89,65,7,80,195,66,13,224,43,194,207,247,61,65,7,80,195,66,0,64,28,194,207,247,55,65,7,80,195,66,13,160,12,194,11,70,56,65,7,80,195,66,0,0,250,193,216,240,72,65,7,80,195,66,26,192,218,193,167,121,67,65,7,80,195,66,0,128,187,193,80,252,51,65,7,80,195,66,26,64,156,193,251,203,83,65,7,80,195,66,0,0,122,193,194,23,89,65,7,80,195,66,52,128,59,193,102,102,97,65,7,80,195,66,0,0,250,192,172,139,106,65,7,80,195,66,0,0,122,192,61,10,114,65,7,80,195,66,0,0,0,0,85,48,125,65,7,80,195,66,0,0,122,64,11,36,144,65,7,80,195,66,0,0,122,195,69,245,157,64,0,128,187,66,16,24,118,195,158,12,96,64,0,128,187,66,33,48,114,195,21,169,56,64,0,128,187,66,240,71,110,195,44,154,12,64,0,128,187,66,0,96,106,195,255,9,186,63,0,128,187,66,16,120,102,195,34,222,26,190,0,128,187,66,33,144,98,195,241,244,138,191,0,128,187,66,240,167,94,195,242,176,18,192,0,128,187,66,0,192,90,195,206,141,117,192,0,128,187,66,16,216,86,195,145,68,47,192,0,128,187,66,33,240,82,195,1,135,12,192,0,128,187,66,240,7,79,195,17,86,99,190,0,128,187,66,0,32,75,195,137,149,241,189,0,128,187,66,16,56,71,195,178,75,52,190,0,128,187,66,33,80,67,195,58,59,169,63,0,128,187,66,240,103,63,195,154,37,41,64,0,128,187,66,0,128,59,195,144,131,110,64,0,128,187,66,16,152,55,195,123,49,185,64,0,128,187,66,33,176,51,195,223,137,17,65,0,128,187,66,240,199,47,195,153,187,55,65,0,128,187,66,0,224,43,195,169,19,83,65,0,128,187,66,16,248,39,195,72,225,122,65,0,128,187,66,33,16,36,195,13,224,143,65,0,128,187,66,240,39,32,195,129,38,166,65,0,128,187,66,0,64,28,195,164,240,187,65,0,128,187,66,16,88,24,195,54,205,201,65,0,128,187,66,33,112,20,195,151,127,207,65,0,128,187,66,240,135,16,195,132,141,225,65,0,128,187,66,0,160,12,195,179,234,255,65,0,128,187,66,16,184,8,195,116,70,6,66,0,128,187,66,33,208,4,195,237,222,10,66,0,128,187,66,240,231,0,195,103,149,12,66,0,128,187,66,0,0,250,194,252,233,11,66,0,128,187,66,33,48,242,194,161,150,9,66,0,128,187,66,66,96,234,194,100,251,12,66,0,128,187,66,223,143,226,194,103,21,16,66,0,128,187,66,0,192,218,194,219,249,12,66,0,128,187,66,33,240,210,194,26,209,5,66,0,128,187,66,66,32,203,194,50,247,242,65,0,128,187,66,7,80,195,194,8,172,245,65,0,128,187,66,0,128,187,194,191,253,249,65,0,128,187,66,7,176,179,194,124,97,244,65,0,128,187,66,0,224,171,194,29,201,228,65,0,128,187,66,7,16,164,194,108,120,213,65,0,128,187,66,0,64,156,194,26,81,193,65,0,128,187,66,7,112,148,194,135,22,170,65,0,128,187,66,0,160,140,194,151,144,158,65,0,128,187,66,7,208,132,194,43,246,155,65,0,128,187,66,0,0,122,194,237,158,146,65,0,128,187,66,13,96,106,194,137,210,144,65,0,128,187,66,0,192,90,194,208,179,136,65,0,128,187,66,13,32,75,194,251,58,112,65,0,128,187,66,0,128,59,194,109,231,88,65,0,128,187,66,13,224,43,194,109,86,48,65,0,128,187,66,0,64,28,194,119,45,51,65,0,128,187,66,13,160,12,194,34,142,38,65,0,128,187,66,0,0,250,193,253,135,51,65,0,128,187,66,26,192,218,193,45,67,55,65,0,128,187,66,0,128,187,193,34,108,54,65,0,128,187,66,26,64,156,193,26,192,67,65,0,128,187,66,0,0,122,193,138,142,88,65,0,128,187,66,52,128,59,193,105,111,100,65,0,128,187,66,0,0,250,192,23,183,96,65,0,128,187,66,0,0,122,192,9,138,98,65,0,128,187,66,0,0,0,0,193,57,117,65,0,128,187,66,0,0,122,64,57,86,137,65,0,128,187,66,0,0,122,195,174,245,172,64,7,176,179,66,16,24,118,195,67,28,123,64,7,176,179,66,33,48,114,195,69,240,49,64,7,176,179,66,240,71,110,195,104,145,21,64,7,176,179,66,0,96,106,195,204,98,186,63,7,176,179,66,16,120,102,195,193,140,249,62,7,176,179,66,33,144,98,195,109,141,80,63,7,176,179,66,240,167,94,195,157,245,121,190,7,176,179,66,0,192,90,195,179,7,6,192,7,176,179,66,16,216,86,195,38,1,190,191,7,176,179,66,33,240,82,195,142,31,50,191,7,176,179,66,240,7,79,195,74,8,62,63,7,176,179,66,0,32,75,195,11,41,167,63,7,176,179,66,16,56,71,195,237,187,190,63,7,176,179,66,33,80,67,195,149,101,36,64,7,176,179,66,240,103,63,195,149,72,110,64,7,176,179,66,0,128,59,195,86,14,149,64,7,176,179,66,16,152,55,195,200,152,230,64,7,176,179,66,33,176,51,195,62,162,29,65,7,176,179,66,240,199,47,195,58,146,77,65,7,176,179,66,0,224,43,195,119,45,106,65,7,176,179,66,16,248,39,195,44,212,132,65,7,176,179,66,33,16,36,195,174,216,157,65,7,176,179,66,240,39,32,195,135,167,181,65,7,176,179,66,0,64,28,195,53,94,195,65,7,176,179,66,16,88,24,195,54,43,207,65,7,176,179,66,33,112,20,195,204,255,216,65,7,176,179,66,240,135,16,195,67,28,232,65,7,176,179,66,0,160,12,195,113,27,253,65,7,176,179,66,16,184,8,195,36,168,7,66,7,176,179,66,33,208,4,195,169,83,9,66,7,176,179,66,240,231,0,195,168,87,16,66,7,176,179,66,0,0,250,194,185,13,14,66,7,176,179,66,33,48,242,194,98,208,10,66,7,176,179,66,66,96,234,194,34,189,6,66,7,176,179,66,223,143,226,194,179,12,9,66,7,176,179,66,0,192,218,194,218,219,8,66,7,176,179,66,33,240,210,194,133,43,1,66,7,176,179,66,66,32,203,194,68,233,243,65,7,176,179,66,7,80,195,194,127,217,246,65,7,176,179,66,0,128,187,194,11,198,251,65,7,176,179,66,7,176,179,194,49,25,242,65,7,176,179,66,0,224,171,194,202,178,227,65,7,176,179,66,7,16,164,194,195,228,212,65,7,176,179,66,0,64,156,194,109,103,193,65,7,176,179,66,7,112,148,194,54,205,179,65,7,176,179,66,0,160,140,194,200,152,162,65,7,176,179,66,7,208,132,194,109,231,155,65,7,176,179,66,0,0,122,194,88,40,149,65,7,176,179,66,13,96,106,194,122,37,143,65,7,176,179,66,0,192,90,194,127,106,129,65,7,176,179,66,13,32,75,194,40,15,116,65,7,176,179,66,0,128,59,194,7,95,88,65,7,176,179,66,13,224,43,194,213,120,61,65,7,176,179,66,0,64,28,194,104,145,35,65,7,176,179,66,13,160,12,194,231,181,24,65,7,176,179,66,0,0,250,193,18,194,27,65,7,176,179,66,26,192,218,193,140,74,43,65,7,176,179,66,0,128,187,193,45,178,62,65,7,176,179,66,26,64,156,193,158,94,83,65,7,176,179,66,0,0,122,193,140,74,81,65,7,176,179,66,52,128,59,193,173,250,76,65,7,176,179,66,0,0,250,192,85,193,76,65,7,176,179,66,0,0,122,192,172,173,97,65,7,176,179,66,0,0,0,0,120,122,111,65,7,176,179,66,0,0,122,64,128,72,122,65,7,176,179,66,0,0,122,195,43,222,198,64,0,224,171,66,16,24,118,195,197,32,149,64,0,224,171,66,33,48,114,195,244,55,87,64,0,224,171,66,240,71,110,195,141,180,252,63,0,224,171,66,0,96,106,195,7,69,23,63,0,224,171,66,16,120,102,195,54,200,0,64,0,224,171,66,33,144,98,195,15,185,9,64,0,224,171,66,240,167,94,195,3,178,71,63,0,224,171,66,0,192,90,195,104,149,217,190,0,224,171,66,16,216,86,195,98,75,3,191,0,224,171,66,33,240,82,195,245,86,81,59,0,224,171,66,240,7,79,195,177,80,135,63,0,224,171,66,0,32,75,195,245,161,7,64,0,224,171,66,16,56,71,195,141,69,31,64,0,224,171,66,33,80,67,195,109,144,121,64,0,224,171,66,240,103,63,195,247,1,183,64,0,224,171,66,0,128,59,195,239,85,205,64,0,224,171,66,16,152,55,195,165,44,254,64,0,224,171,66,33,176,51,195,152,76,47,65,0,224,171,66,240,199,47,195,33,31,83,65,0,224,171,66,0,224,43,195,240,133,124,65,0,224,171,66,16,248,39,195,145,143,141,65,0,224,171,66,33,16,36,195,14,207,161,65,0,224,171,66,240,39,32,195,54,43,180,65,0,224,171,66,0,64,28,195,127,123,198,65,0,224,171,66,16,88,24,195,50,85,213,65,0,224,171,66,33,112,20,195,64,164,221,65,0,224,171,66,240,135,16,195,134,201,233,65,0,224,171,66,0,160,12,195,5,180,251,65,0,224,171,66,16,184,8,195,203,97,8,66,0,224,171,66,33,208,4,195,127,217,10,66,0,224,171,66,240,231,0,195,79,175,16,66,0,224,171,66,0,0,250,194,175,229,17,66,0,224,171,66,33,48,242,194,57,150,13,66,0,224,171,66,66,96,234,194,233,102,9,66,0,224,171,66,223,143,226,194,236,17,6,66,0,224,171,66,0,192,218,194,139,253,3,66,0,224,171,66,33,240,210,194,60,78,254,65,0,224,171,66,66,32,203,194,149,101,249,65,0,224,171,66,7,80,195,194,128,55,248,65,0,224,171,66,0,128,187,194,14,62,252,65,0,224,171,66,7,176,179,194,197,254,246,65,0,224,171,66,0,224,171,194,175,37,225,65,0,224,171,66,7,16,164,194,87,91,207,65,0,224,171,66,0,64,156,194,54,60,195,65,0,224,171,66,7,112,148,194,185,252,175,65,0,224,171,66,0,160,140,194,44,84,160,65,0,224,171,66,7,208,132,194,40,143,159,65,0,224,171,66,0,0,122,194,73,29,147,65,0,224,171,66,13,96,106,194,118,224,135,65,0,224,171,66,0,192,90,194,23,217,121,65,0,224,171,66,13,32,75,194,220,215,105,65,0,224,171,66,0,128,59,194,214,197,75,65,0,224,171,66,13,224,43,194,243,142,66,65,0,224,171,66,0,64,28,194,8,172,33,65,0,224,171,66,13,160,12,194,153,211,25,65,0,224,171,66,0,0,250,193,32,65,33,65,0,224,171,66,26,192,218,193,52,128,35,65,0,224,171,66,0,128,187,193,27,47,57,65,0,224,171,66,26,64,156,193,111,240,61,65,0,224,171,66,0,0,122,193,12,147,62,65,0,224,171,66,52,128,59,193,221,36,56,65,0,224,171,66,0,0,250,192,102,247,95,65,0,224,171,66,0,0,122,192,89,134,109,65,0,224,171,66,0,0,0,0,162,180,108,65,0,224,171,66,0,0,122,64,50,119,121,65,0,224,171,66,0,0,122,195,6,47,222,64,7,16,164,66,16,24,118,195,146,174,152,64,7,16,164,66,33,48,114,195,130,197,103,64,7,16,164,66,240,71,110,195,22,53,32,64,7,16,164,66,0,96,106,195,64,164,179,63,7,16,164,66,16,120,102,195,139,195,3,64,7,16,164,66,33,144,98,195,111,187,26,64,7,16,164,66,240,167,94,195,208,97,158,63,7,16,164,66,0,192,90,195,181,55,204,63,7,16,164,66,16,216,86,195,144,102,160,63,7,16,164,66,33,240,82,195,175,153,196,63,7,16,164,66,240,7,79,195,174,42,21,64,7,16,164,66,0,32,75,195,152,52,38,64,7,16,164,66,16,56,71,195,229,39,136,64,7,16,164,66,33,80,67,195,67,144,187,64,7,16,164,66,240,103,63,195,95,123,241,64,7,16,164,66,0,128,59,195,57,180,11,65,7,16,164,66,16,152,55,195,150,132,26,65,7,16,164,66,33,176,51,195,89,134,56,65,7,16,164,66,240,199,47,195,16,233,100,65,7,16,164,66,0,224,43,195,171,79,130,65,7,16,164,66,16,248,39,195,107,26,141,65,7,16,164,66,33,16,36,195,160,137,163,65,7,16,164,66,240,39,32,195,70,165,183,65,7,16,164,66,0,64,28,195,181,149,200,65,7,16,164,66,16,88,24,195,212,26,219,65,7,16,164,66,33,112,20,195,47,93,230,65,7,16,164,66,240,135,16,195,92,15,242,65,7,16,164,66,0,160,12,195,238,90,2,66,7,16,164,66,16,184,8,195,31,244,7,66,7,16,164,66,33,208,4,195,105,239,9,66,7,16,164,66,240,231,0,195,157,17,15,66,7,16,164,66,0,0,250,194,155,102,16,66,7,16,164,66,33,48,242,194,42,186,15,66,7,16,164,66,66,96,234,194,209,226,11,66,7,16,164,66,223,143,226,194,89,70,5,66,7,16,164,66,0,192,218,194,228,148,255,65,7,16,164,66,33,240,210,194,179,140,251,65,7,16,164,66,66,32,203,194,236,64,250,65,7,16,164,66,7,80,195,194,236,81,0,66,7,16,164,66,0,128,187,194,199,58,251,65,7,16,164,66,7,176,179,194,23,55,242,65,7,16,164,66,0,224,171,194,101,25,225,65,7,16,164,66,7,16,164,194,232,217,203,65,7,16,164,66,0,64,156,194,253,118,193,65,7,16,164,66,7,112,148,194,28,235,180,65,7,16,164,66,0,160,140,194,104,17,154,65,7,16,164,66,7,208,132,194,145,109,149,65,7,16,164,66,0,0,122,194,171,79,142,65,7,16,164,66,13,96,106,194,27,175,132,65,7,16,164,66,0,192,90,194,157,17,107,65,7,16,164,66,13,32,75,194,79,64,79,65,7,16,164,66,0,128,59,194,56,103,66,65,7,16,164,66,13,224,43,194,30,167,53,65,7,16,164,66,0,64,28,194,128,72,29,65,7,16,164,66,13,160,12,194,240,63,31,65,7,16,164,66,0,0,250,193,168,53,44,65,7,16,164,66,26,192,218,193,204,127,35,65,7,16,164,66,0,128,187,193,23,183,33,65,7,16,164,66,26,64,156,193,180,200,52,65,7,16,164,66,0,0,122,193,155,230,56,65,7,16,164,66,52,128,59,193,104,179,94,65,7,16,164,66,0,0,250,192,182,243,115,65,7,16,164,66,0,0,122,192,80,252,122,65,7,16,164,66,0,0,0,0,170,130,127,65,7,16,164,66,0,0,122,64,23,183,135,65,7,16,164,66,0,0,122,195,23,183,204,64,0,64,156,66,16,24,118,195,51,254,162,64,0,64,156,66,33,48,114,195,247,30,145,64,0,64,156,66,240,71,110,195,1,106,110,64,0,64,156,66,0,96,106,195,217,177,65,64,0,64,156,66,16,120,102,195,5,81,65,64,0,64,156,66,33,144,98,195,100,93,120,64,0,64,156,66,240,167,94,195,137,41,143,64,0,64,156,66,0,192,90,195,97,195,117,64,0,64,156,66,16,216,86,195,83,5,47,64,0,64,156,66,33,240,82,195,19,155,145,64,0,64,156,66,240,7,79,195,29,119,161,64,0,64,156,66,0,32,75,195,41,179,142,64,0,64,156,66,16,56,71,195,46,115,170,64,0,64,156,66,33,80,67,195,194,105,228,64,0,64,156,66,240,103,63,195,28,95,14,65,0,64,156,66,0,128,59,195,242,65,38,65,0,64,156,66,16,152,55,195,235,226,53,65,0,64,156,66,33,176,51,195,65,130,86,65,0,64,156,66,240,199,47,195,227,182,130,65,0,64,156,66,0,224,43,195,115,104,142,65,0,64,156,66,16,248,39,195,47,93,152,65,0,64,156,66,33,16,36,195,168,87,171,65,0,64,156,66,240,39,32,195,164,112,188,65,0,64,156,66,0,64,28,195,147,41,203,65,0,64,156,66,16,88,24,195,193,185,215,65,0,64,156,66,33,112,20,195,34,142,230,65,0,64,156,66,240,135,16,195,227,165,251,65,0,64,156,66,0,160,12,195,76,102,5,66,0,64,156,66,16,184,8,195,28,235,8,66,0,64,156,66,33,208,4,195,183,98,10,66,0,64,156,66,240,231,0,195,168,245,14,66,0,64,156,66,0,0,250,194,149,212,13,66,0,64,156,66,33,48,242,194,196,49,15,66,0,64,156,66,66,96,234,194,61,219,9,66,0,64,156,66,223,143,226,194,51,179,7,66,0,64,156,66,0,192,218,194,199,58,0,66,0,64,156,66,33,240,210,194,247,100,253,65,0,64,156,66,66,32,203,194,51,51,253,65,0,64,156,66,7,80,195,194,157,145,255,65,0,64,156,66,0,128,187,194,14,207,249,65,0,64,156,66,7,176,179,194,196,194,243,65,0,64,156,66,0,224,171,194,34,14,222,65,0,64,156,66,7,16,164,194,116,164,203,65,0,64,156,66,0,64,156,194,52,34,187,65,0,64,156,66,7,112,148,194,34,142,173,65,0,64,156,66,0,160,140,194,84,116,149,65,0,64,156,66,7,208,132,194,184,64,139,65,0,64,156,66,0,0,122,194,185,13,137,65,0,64,156,66,13,96,106,194,12,19,132,65,0,64,156,66,0,192,90,194,29,56,111,65,0,64,156,66,13,32,75,194,227,165,83,65,0,64,156,66,0,128,59,194,186,107,55,65,0,64,156,66,13,224,43,194,5,52,38,65,0,64,156,66,0,64,28,194,220,104,27,65,0,64,156,66,13,160,12,194,97,195,32,65,0,64,156,66,0,0,250,193,51,51,37,65,0,64,156,66,26,192,218,193,111,18,37,65,0,64,156,66,0,128,187,193,136,133,46,65,0,64,156,66,26,64,156,193,40,126,60,65,0,64,156,66,0,0,122,193,74,12,99,65,0,64,156,66,52,128,59,193,240,167,121,65,0,64,156,66,0,0,250,192,128,200,128,65,0,64,156,66,0,0,122,192,215,35,133,65,0,64,156,66,0,0,0,0,5,69,138,65,0,64,156,66,0,0,122,64,95,152,150,65,0,64,156,66,0,0,122,195,66,38,193,64,7,112,148,66,16,24,118,195,73,162,165,64,7,112,148,66,33,48,114,195,200,7,109,64,7,112,148,66,240,71,110,195,246,40,108,64,7,112,148,66,0,96,106,195,65,101,147,64,7,112,148,66,16,120,102,195,182,219,144,64,7,112,148,66,33,144,98,195,10,46,179,64,7,112,148,66,240,167,94,195,145,68,200,64,7,112,148,66,0,192,90,195,121,175,163,64,7,112,148,66,16,216,86,195,119,132,149,64,7,112,148,66,33,240,82,195,24,96,184,64,7,112,148,66,240,7,79,195,93,191,217,64,7,112,148,66,0,32,75,195,51,109,222,64,7,112,148,66,16,56,71,195,91,124,235,64,7,112,148,66,33,80,67,195,90,59,10,65,7,112,148,66,240,103,63,195,98,161,38,65,7,112,148,66,0,128,59,195,207,247,60,65,7,112,148,66,16,152,55,195,50,85,87,65,7,112,148,66,33,176,51,195,98,16,121,65,7,112,148,66,240,199,47,195,237,13,146,65,7,112,148,66,0,224,43,195,183,98,153,65,7,112,148,66,16,248,39,195,120,122,170,65,7,112,148,66,33,16,36,195,83,22,189,65,7,112,148,66,240,39,32,195,240,133,202,65,7,112,148,66,0,64,28,195,253,7,221,65,7,112,148,66,16,88,24,195,147,41,231,65,7,112,148,66,33,112,20,195,18,20,244,65,7,112,148,66,240,135,16,195,169,147,1,66,7,112,148,66,0,160,12,195,123,84,5,66,7,112,148,66,16,184,8,195,31,52,7,66,7,112,148,66,33,208,4,195,58,82,12,66,7,112,148,66,240,231,0,195,176,242,10,66,7,112,148,66,0,0,250,194,96,118,9,66,7,112,148,66,33,48,242,194,194,215,8,66,7,112,148,66,66,96,234,194,115,168,4,66,7,112,148,66,223,143,226,194,250,62,0,66,7,112,148,66,0,192,218,194,175,84,0,66,7,112,148,66,33,240,210,194,251,220,1,66,7,112,148,66,66,32,203,194,80,13,253,65,7,112,148,66,7,80,195,194,39,194,247,65,7,112,148,66,0,128,187,194,212,43,245,65,7,112,148,66,7,176,179,194,76,183,239,65,7,112,148,66,0,224,171,194,176,131,219,65,7,112,148,66,7,16,164,194,224,62,202,65,7,112,148,66,0,64,156,194,92,143,188,65,7,112,148,66,7,112,148,194,88,57,165,65,7,112,148,66,0,160,140,194,178,29,145,65,7,112,148,66,7,208,132,194,156,68,141,65,7,112,148,66,0,0,122,194,8,61,138,65,7,112,148,66,13,96,106,194,50,213,132,65,7,112,148,66,0,192,90,194,145,15,107,65,7,112,148,66,13,32,75,194,254,67,82,65,7,112,148,66,0,128,59,194,151,255,46,65,7,112,148,66,13,224,43,194,78,81,22,65,7,112,148,66,0,64,28,194,81,131,19,65,7,112,148,66,13,160,12,194,225,250,27,65,7,112,148,66,0,0,250,193,140,74,38,65,7,112,148,66,26,192,218,193,41,203,44,65,7,112,148,66,0,128,187,193,93,220,56,65,7,112,148,66,26,64,156,193,54,171,88,65,7,112,148,66,0,0,122,193,58,35,122,65,7,112,148,66,52,128,59,193,169,19,131,65,7,112,148,66,0,0,250,192,109,231,141,65,7,112,148,66,0,0,122,192,10,215,143,65,7,112,148,66,0,0,0,0,208,85,153,65,7,112,148,66,0,0,122,64,148,118,165,65,7,112,148,66,0,0,122,195,155,114,174,64,0,160,140,66,16,24,118,195,45,207,154,64,0,160,140,66,33,48,114,195,163,117,102,64,0,160,140,66,240,71,110,195,174,240,80,64,0,160,140,66,0,96,106,195,102,247,129,64,0,160,140,66,16,120,102,195,206,25,170,64,0,160,140,66,33,144,98,195,19,15,213,64,0,160,140,66,240,167,94,195,121,146,214,64,0,160,140,66,0,192,90,195,178,215,221,64,0,160,140,66,16,216,86,195,45,38,219,64,0,160,140,66,33,240,82,195,28,235,222,64,0,160,140,66,240,7,79,195,83,174,247,64,0,160,140,66,0,32,75,195,246,255,10,65,0,160,140,66,16,56,71,195,250,254,16,65,0,160,140,66,33,80,67,195,233,72,33,65,0,160,140,66,240,103,63,195,100,59,67,65,0,160,140,66,0,128,59,195,12,2,97,65,0,160,140,66,16,152,55,195,70,182,123,65,0,160,140,66,33,176,51,195,119,45,147,65,0,160,140,66,240,199,47,195,15,11,156,65,0,160,140,66,0,224,43,195,64,36,167,65,0,160,140,66,16,248,39,195,12,19,187,65,0,160,140,66,33,16,36,195,23,183,204,65,0,160,140,66,240,39,32,195,161,103,216,65,0,160,140,66,0,64,28,195,184,47,229,65,0,160,140,66,16,88,24,195,85,48,251,65,0,160,140,66,33,112,20,195,29,26,2,66,0,160,140,66,240,135,16,195,66,32,4,66,0,160,140,66,0,160,12,195,237,94,4,66,0,160,140,66,16,184,8,195,186,9,7,66,0,160,140,66,33,208,4,195,177,191,8,66,0,160,140,66,240,231,0,195,56,248,5,66,0,160,140,66,0,0,250,194,16,186,8,66,0,160,140,66,33,48,242,194,87,219,5,66,0,160,140,66,66,96,234,194,219,74,1,66,0,160,140,66,223,143,226,194,119,126,0,66,0,160,140,66,0,192,218,194,45,178,2,66,0,160,140,66,33,240,210,194,240,5,3,66,0,160,140,66,66,32,203,194,90,245,1,66,0,160,140,66,7,80,195,194,35,91,246,65,0,160,140,66,0,128,187,194,19,242,240,65,0,160,140,66,7,176,179,194,64,147,229,65,0,160,140,66,0,224,171,194,23,217,212,65,0,160,140,66,7,16,164,194,65,113,198,65,0,160,140,66,0,64,156,194,19,225,186,65,0,160,140,66,7,112,148,194,88,74,164,65,0,160,140,66,0,160,140,194,82,73,146,65,0,160,140,66,7,208,132,194,14,45,141,65,0,160,140,66,0,0,122,194,65,2,139,65,0,160,140,66,13,96,106,194,204,127,130,65,0,160,140,66,0,192,90,194,137,65,96,65,0,160,140,66,13,32,75,194,113,27,58,65,0,160,140,66,0,128,59,194,92,3,27,65,0,160,140,66,13,224,43,194,211,48,10,65,0,160,140,66,0,64,28,194,204,98,8,65,0,160,140,66,13,160,12,194,172,173,37,65,0,160,140,66,0,0,250,193,96,229,49,65,0,160,140,66,26,192,218,193,36,40,77,65,0,160,140,66,0,128,187,193,169,19,100,65,0,160,140,66,26,64,156,193,111,129,118,65,0,160,140,66,0,0,122,193,0,0,135,65,0,160,140,66,52,128,59,193], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([248,194,141,65,0,160,140,66,0,0,250,192,112,95,149,65,0,160,140,66,0,0,122,192,143,194,157,65,0,160,140,66,0,0,0,0,3,120,170,65,0,160,140,66,0,0,122,64,129,149,183,65,0,160,140,66,0,0,122,195,109,255,144,64,7,208,132,66,16,24,118,195,98,21,111,64,7,208,132,66,33,48,114,195,115,162,115,64,7,208,132,66,240,71,110,195,86,154,141,64,7,208,132,66,0,96,106,195,176,3,161,64,7,208,132,66,16,120,102,195,156,80,212,64,7,208,132,66,33,144,98,195,223,253,244,64,7,208,132,66,240,167,94,195,75,217,8,65,7,208,132,66,0,192,90,195,162,127,11,65,7,208,132,66,16,216,86,195,11,12,246,64,7,208,132,66,33,240,82,195,106,118,9,65,7,208,132,66,240,7,79,195,76,207,27,65,7,208,132,66,0,32,75,195,36,40,34,65,7,208,132,66,16,56,71,195,82,184,33,65,7,208,132,66,33,80,67,195,251,58,50,65,7,208,132,66,240,103,63,195,143,83,89,65,7,208,132,66,0,128,59,195,238,235,119,65,7,208,132,66,16,152,55,195,142,117,140,65,7,208,132,66,33,176,51,195,204,110,159,65,7,208,132,66,240,199,47,195,31,116,168,65,7,208,132,66,0,224,43,195,157,0,180,65,7,208,132,66,16,248,39,195,94,203,204,65,7,208,132,66,33,16,36,195,222,19,216,65,7,208,132,66,240,39,32,195,50,85,223,65,7,208,132,66,0,64,28,195,242,48,239,65,7,208,132,66,16,88,24,195,201,182,0,66,7,208,132,66,33,112,20,195,129,68,8,66,7,208,132,66,240,135,16,195,54,13,10,66,7,208,132,66,0,160,12,195,207,183,8,66,7,208,132,66,16,184,8,195,12,83,5,66,7,208,132,66,33,208,4,195,66,224,3,66,7,208,132,66,240,231,0,195,114,202,3,66,7,208,132,66,0,0,250,194,12,19,6,66,7,208,132,66,33,48,242,194,209,226,3,66,7,208,132,66,66,96,234,194,142,245,1,66,7,208,132,66,223,143,226,194,220,87,4,66,7,208,132,66,0,192,218,194,180,153,2,66,7,208,132,66,33,240,210,194,84,99,3,66,7,208,132,66,66,32,203,194,199,58,3,66,7,208,132,66,7,80,195,194,95,135,252,65,7,208,132,66,0,128,187,194,121,216,235,65,7,208,132,66,7,176,179,194,100,93,229,65,7,208,132,66,0,224,171,194,150,67,211,65,7,208,132,66,7,16,164,194,242,48,195,65,7,208,132,66,0,64,156,194,85,65,179,65,7,208,132,66,7,112,148,194,237,158,161,65,7,208,132,66,0,160,140,194,16,105,148,65,7,208,132,66,7,208,132,194,59,112,136,65,7,208,132,66,0,0,122,194,151,127,136,65,7,208,132,66,13,96,106,194,186,218,127,65,7,208,132,66,0,192,90,194,76,55,86,65,7,208,132,66,13,32,75,194,232,217,61,65,7,208,132,66,0,128,59,194,160,108,16,65,7,208,132,66,13,224,43,194,237,216,15,65,7,208,132,66,0,64,28,194,106,222,32,65,7,208,132,66,13,160,12,194,38,83,59,65,7,208,132,66,0,0,250,193,250,237,71,65,7,208,132,66,26,192,218,193,133,235,96,65,7,208,132,66,0,128,187,193,105,111,115,65,7,208,132,66,26,64,156,193,212,171,133,65,7,208,132,66,0,0,122,193,62,104,142,65,7,208,132,66,52,128,59,193,157,17,152,65,7,208,132,66,0,0,250,192,38,228,167,65,7,208,132,66,0,0,122,192,237,141,181,65,7,208,132,66,0,0,0,0,122,182,191,65,7,208,132,66,0,0,122,64,130,115,204,65,7,208,132,66,0,0,122,195,91,177,149,64,0,0,122,66,16,24,118,195,238,90,141,64,0,0,122,66,33,48,114,195,32,239,123,64,0,0,122,66,240,71,110,195,22,53,144,64,0,0,122,66,0,96,106,195,49,177,176,64,0,0,122,66,16,120,102,195,143,83,227,64,0,0,122,66,33,144,98,195,32,164,1,65,0,0,122,66,240,167,94,195,76,224,5,65,0,0,122,66,0,192,90,195,212,84,9,65,0,0,122,66,16,216,86,195,230,22,9,65,0,0,122,66,33,240,82,195,89,64,31,65,0,0,122,66,240,7,79,195,174,216,39,65,0,0,122,66,0,32,75,195,244,253,44,65,0,0,122,66,16,56,71,195,216,129,57,65,0,0,122,66,33,80,67,195,246,151,80,65,0,0,122,66,240,103,63,195,140,74,106,65,0,0,122,66,0,128,59,195,102,230,133,65,0,0,122,66,16,152,55,195,159,77,147,65,0,0,122,66,33,176,51,195,144,160,167,65,0,0,122,66,240,199,47,195,198,237,184,65,0,0,122,66,0,224,43,195,174,54,200,65,0,0,122,66,16,248,39,195,78,226,213,65,0,0,122,66,33,16,36,195,30,150,221,65,0,0,122,66,240,39,32,195,136,227,232,65,0,0,122,66,0,64,28,195,37,134,249,65,0,0,122,66,16,88,24,195,10,232,3,66,0,0,122,66,33,112,20,195,150,225,5,66,0,0,122,66,240,135,16,195,35,219,6,66,0,0,122,66,0,160,12,195,147,152,6,66,0,0,122,66,16,184,8,195,49,25,4,66,0,0,122,66,33,208,4,195,84,244,2,66,0,0,122,66,240,231,0,195,119,109,2,66,0,0,122,66,0,0,250,194,177,161,2,66,0,0,122,66,33,48,242,194,150,195,252,65,0,0,122,66,66,96,234,194,7,223,254,65,0,0,122,66,223,143,226,194,13,224,2,66,0,0,122,66,0,192,218,194,86,142,3,66,0,0,122,66,33,240,210,194,67,237,2,66,0,0,122,66,66,32,203,194,13,177,1,66,0,0,122,66,7,80,195,194,196,177,249,65,0,0,122,66,0,128,187,194,142,117,245,65,0,0,122,66,7,176,179,194,8,172,228,65,0,0,122,66,0,224,171,194,71,242,208,65,0,0,122,66,7,16,164,194,182,132,190,65,0,0,122,66,0,64,156,194,51,68,176,65,0,0,122,66,7,112,148,194,139,108,161,65,0,0,122,66,0,160,140,194,203,161,149,65,0,0,122,66,7,208,132,194,198,109,134,65,0,0,122,66,0,0,122,194,16,122,123,65,0,0,122,66,13,96,106,194,186,218,94,65,0,0,122,66,0,192,90,194,107,43,81,65,0,0,122,66,13,32,75,194,192,91,62,65,0,0,122,66,0,128,59,194,147,157,30,65,0,0,122,66,13,224,43,194,106,77,34,65,0,0,122,66,0,64,28,194,47,221,52,65,0,0,122,66,13,160,12,194,119,45,72,65,0,0,122,66,0,0,250,193,193,202,97,65,0,0,122,66,26,192,218,193,236,81,117,65,0,0,122,66,0,128,187,193,161,248,132,65,0,0,122,66,26,64,156,193,116,198,142,65,0,0,122,66,0,0,122,193,189,99,154,65,0,0,122,66,52,128,59,193,73,157,167,65,0,0,122,66,0,0,250,192,99,110,187,65,0,0,122,66,0,0,122,192,210,128,199,65,0,0,122,66,0,0,0,0,125,63,209,65,0,0,122,66,0,0,122,64,15,139,217,65,0,0,122,66,0,0,122,195,0,169,135,64,13,96,106,66,16,24,118,195,63,53,154,64,13,96,106,66,33,48,114,195,115,46,148,64,13,96,106,66,240,71,110,195,144,73,169,64,13,96,106,66,0,96,106,195,248,107,207,64,13,96,106,66,16,120,102,195,83,121,219,64,13,96,106,66,33,144,98,195,200,152,7,65,13,96,106,66,240,167,94,195,0,58,12,65,13,96,106,66,0,192,90,195,115,232,19,65,13,96,106,66,16,216,86,195,28,211,26,65,13,96,106,66,33,240,82,195,155,230,44,65,13,96,106,66,240,7,79,195,224,45,69,65,13,96,106,66,0,32,75,195,186,218,75,65,13,96,106,66,16,56,71,195,163,35,76,65,13,96,106,66,33,80,67,195,69,216,101,65,13,96,106,66,240,103,63,195,113,44,129,65,13,96,106,66,0,128,59,195,38,100,136,65,13,96,106,66,16,152,55,195,61,172,153,65,13,96,106,66,33,176,51,195,233,72,174,65,13,96,106,66,240,199,47,195,97,67,198,65,13,96,106,66,0,224,43,195,179,234,209,65,13,96,106,66,16,248,39,195,110,52,218,65,13,96,106,66,33,16,36,195,208,85,226,65,13,96,106,66,240,39,32,195,137,193,244,65,13,96,106,66,0,64,28,195,251,11,1,66,13,96,106,66,16,88,24,195,158,158,3,66,13,96,106,66,33,112,20,195,104,51,3,66,13,96,106,66,240,135,16,195,129,230,1,66,13,96,106,66,0,160,12,195,158,158,1,66,13,96,106,66,16,184,8,195,157,64,6,66,13,96,106,66,33,208,4,195,253,135,5,66,13,96,106,66,240,231,0,195,244,108,4,66,13,96,106,66,0,0,250,194,187,56,1,66,13,96,106,66,33,48,242,194,208,4,2,66,13,96,106,66,66,96,234,194,100,76,1,66,13,96,106,66,223,143,226,194,216,193,1,66,13,96,106,66,0,192,218,194,70,54,2,66,13,96,106,66,33,240,210,194,96,182,3,66,13,96,106,66,66,32,203,194,202,212,254,65,13,96,106,66,7,80,195,194,4,103,247,65,13,96,106,66,0,128,187,194,96,118,243,65,13,96,106,66,7,176,179,194,209,162,226,65,13,96,106,66,0,224,171,194,125,80,204,65,13,96,106,66,7,16,164,194,132,141,184,65,13,96,106,66,0,64,156,194,61,10,172,65,13,96,106,66,7,112,148,194,49,153,168,65,13,96,106,66,0,160,140,194,229,242,152,65,13,96,106,66,7,208,132,194,79,64,134,65,13,96,106,66,0,0,122,194,133,124,115,65,13,96,106,66,13,96,106,194,203,16,98,65,13,96,106,66,0,192,90,194,248,194,83,65,13,96,106,66,13,32,75,194,4,86,62,65,13,96,106,66,0,128,59,194,37,117,49,65,13,96,106,66,13,224,43,194,219,249,75,65,13,96,106,66,0,64,28,194,162,69,91,65,13,96,106,66,13,160,12,194,7,206,105,65,13,96,106,66,0,0,250,193,106,188,120,65,13,96,106,66,26,192,218,193,45,67,134,65,13,96,106,66,0,128,187,193,249,15,150,65,13,96,106,66,26,64,156,193,93,92,158,65,13,96,106,66,0,0,122,193,13,224,174,65,13,96,106,66,52,128,59,193,177,208,181,65,13,96,106,66,0,0,250,192,47,221,199,65,13,96,106,66,0,0,122,192,164,112,211,65,13,96,106,66,0,0,0,0,163,146,219,65,13,96,106,66,0,0,122,64,199,203,226,65,13,96,106,66,0,0,122,195,162,40,104,64,0,192,90,66,16,24,118,195,160,84,117,64,0,192,90,66,33,48,114,195,72,22,142,64,0,192,90,66,240,71,110,195,242,205,168,64,0,192,90,66,0,96,106,195,18,20,238,64,0,192,90,66,16,120,102,195,179,239,242,64,0,192,90,66,33,144,98,195,58,163,4,65,0,192,90,66,240,167,94,195,14,243,25,65,0,192,90,66,0,192,90,195,175,148,42,65,0,192,90,66,16,216,86,195,96,118,49,65,0,192,90,66,33,240,82,195,99,127,67,65,0,192,90,66,240,7,79,195,14,45,83,65,0,192,90,66,0,32,75,195,161,248,95,65,0,192,90,66,16,56,71,195,101,25,101,65,0,192,90,66,33,80,67,195,203,16,110,65,0,192,90,66,240,103,63,195,199,169,132,65,0,192,90,66,0,128,59,195,23,217,145,65,0,192,90,66,16,152,55,195,46,127,160,65,0,192,90,66,33,176,51,195,30,39,183,65,0,192,90,66,240,199,47,195,61,172,200,65,0,192,90,66,0,224,43,195,37,134,212,65,0,192,90,66,16,248,39,195,103,213,218,65,0,192,90,66,33,16,36,195,48,204,233,65,0,192,90,66,240,39,32,195,174,71,247,65,0,192,90,66,0,64,28,195,180,89,5,66,0,192,90,66,16,88,24,195,240,133,3,66,0,192,90,66,33,112,20,195,46,80,2,66,0,192,90,66,240,135,16,195,136,116,2,66,0,192,90,66,0,160,12,195,206,153,3,66,0,192,90,66,16,184,8,195,192,236,8,66,0,192,90,66,33,208,4,195,129,85,7,66,0,192,90,66,240,231,0,195,2,107,3,66,0,192,90,66,0,0,250,194,87,172,6,66,0,192,90,66,33,48,242,194,48,251,3,66,0,192,90,66,66,96,234,194,213,9,2,66,0,192,90,66,223,143,226,194,9,185,1,66,0,192,90,66,0,192,218,194,58,146,254,65,0,192,90,66,33,240,210,194,217,206,254,65,0,192,90,66,66,32,203,194,61,27,253,65,0,192,90,66,7,80,195,194,185,124,243,65,0,192,90,66,0,128,187,194,222,113,231,65,0,192,90,66,7,176,179,194,150,195,212,65,0,192,90,66,0,224,171,194,134,201,197,65,0,192,90,66,7,16,164,194,219,121,184,65,0,192,90,66,0,64,156,194,174,216,170,65,0,192,90,66,7,112,148,194,200,7,163,65,0,192,90,66,0,160,140,194,145,143,154,65,0,192,90,66,7,208,132,194,119,173,135,65,0,192,90,66,0,0,122,194,169,164,106,65,0,192,90,66,13,96,106,194,161,214,103,65,0,192,90,66,0,192,90,194,191,125,85,65,0,192,90,66,13,32,75,194,242,65,69,65,0,192,90,66,0,128,59,194,149,101,74,65,0,192,90,66,13,224,43,194,217,61,100,65,0,192,90,66,0,64,28,194,234,4,123,65,0,192,90,66,13,160,12,194,98,161,129,65,0,192,90,66,0,0,250,193,158,222,137,65,0,192,90,66,26,192,218,193,55,26,150,65,0,192,90,66,0,128,187,193,68,250,161,65,0,192,90,66,26,64,156,193,124,114,173,65,0,192,90,66,0,0,122,193,8,172,192,65,0,192,90,66,52,128,59,193,254,67,201,65,0,192,90,66,0,0,250,192,154,153,213,65,0,192,90,66,0,0,122,192,57,86,220,65,0,192,90,66,0,0,0,0,95,152,226,65,0,192,90,66,0,0,122,64,70,165,233,65,0,192,90,66,0,0,122,195,206,199,111,64,13,32,75,66,16,24,118,195,241,17,121,64,13,32,75,66,33,48,114,195,53,239,131,64,13,32,75,66,240,71,110,195,173,105,165,64,13,32,75,66,0,96,106,195,224,185,201,64,13,32,75,66,16,120,102,195,49,8,231,64,13,32,75,66,33,144,98,195,194,204,9,65,13,32,75,66,240,167,94,195,111,18,34,65,13,32,75,66,0,192,90,195,52,128,68,65,13,32,75,66,16,216,86,195,94,75,69,65,13,32,75,66,33,240,82,195,79,64,86,65,13,32,75,66,240,7,79,195,222,113,98,65,13,32,75,66,0,32,75,195,206,136,96,65,13,32,75,66,16,56,71,195,37,6,109,65,13,32,75,66,33,80,67,195,31,133,133,65,13,32,75,66,240,103,63,195,172,28,141,65,13,32,75,66,0,128,59,195,135,22,154,65,13,32,75,66,16,152,55,195,231,251,165,65,13,32,75,66,33,176,51,195,165,172,186,65,13,32,75,66,240,199,47,195,158,222,203,65,13,32,75,66,0,224,43,195,202,195,214,65,13,32,75,66,16,248,39,195,251,58,222,65,13,32,75,66,33,16,36,195,163,35,240,65,13,32,75,66,240,39,32,195,27,141,248,65,13,32,75,66,0,64,28,195,245,91,2,66,13,32,75,66,16,88,24,195,208,68,2,66,13,32,75,66,33,112,20,195,146,220,1,66,13,32,75,66,240,135,16,195,217,206,6,66,13,32,75,66,0,160,12,195,134,9,11,66,13,32,75,66,16,184,8,195,104,162,7,66,13,32,75,66,33,208,4,195,88,185,6,66,13,32,75,66,240,231,0,195,48,140,6,66,13,32,75,66,0,0,250,194,254,37,8,66,13,32,75,66,33,48,242,194,13,49,8,66,13,32,75,66,66,96,234,194,80,13,10,66,13,32,75,66,223,143,226,194,44,212,6,66,13,32,75,66,0,192,218,194,238,26,1,66,13,32,75,66,33,240,210,194,66,62,0,66,13,32,75,66,66,32,203,194,153,170,248,65,13,32,75,66,7,80,195,194,155,85,239,65,13,32,75,66,0,128,187,194,77,21,230,65,13,32,75,66,7,176,179,194,129,166,215,65,13,32,75,66,0,224,171,194,143,83,198,65,13,32,75,66,7,16,164,194,10,87,190,65,13,32,75,66,0,64,156,194,45,161,173,65,13,32,75,66,7,112,148,194,20,63,156,65,13,32,75,66,0,160,140,194,144,177,154,65,13,32,75,66,7,208,132,194,29,201,142,65,13,32,75,66,0,0,122,194,80,252,99,65,13,32,75,66,13,96,106,194,198,220,107,65,13,32,75,66,0,192,90,194,203,161,96,65,13,32,75,66,13,32,75,194,175,148,79,65,13,32,75,66,0,128,59,194,82,39,95,65,13,32,75,66,13,224,43,194,118,79,125,65,13,32,75,66,0,64,28,194,184,64,133,65,13,32,75,66,13,160,12,194,105,0,137,65,13,32,75,66,0,0,250,193,49,153,149,65,13,32,75,66,26,192,218,193,25,4,167,65,13,32,75,66,0,128,187,193,255,50,176,65,13,32,75,66,26,64,156,193,197,126,183,65,13,32,75,66,0,0,122,193,238,124,205,65,13,32,75,66,52,128,59,193,10,104,209,65,13,32,75,66,0,0,250,192,249,15,227,65,13,32,75,66,0,0,122,192,223,96,230,65,13,32,75,66,0,0,0,0,32,210,237,65,13,32,75,66,0,0,122,64,222,113,243,65,13,32,75,66,0,0,122,195,240,80,108,64,0,128,59,66,16,24,118,195,112,177,120,64,0,128,59,66,33,48,114,195,255,4,127,64,0,128,59,66,240,71,110,195,42,145,160,64,0,128,59,66,0,96,106,195,245,156,231,64,0,128,59,66,16,120,102,195,88,255,248,64,0,128,59,66,33,144,98,195,2,217,8,65,0,128,59,66,240,167,94,195,94,75,36,65,0,128,59,66,0,192,90,195,52,17,51,65,0,128,59,66,16,216,86,195,117,147,70,65,0,128,59,66,33,240,82,195,219,138,91,65,0,128,59,66,240,7,79,195,142,117,103,65,0,128,59,66,0,32,75,195,117,147,120,65,0,128,59,66,16,56,71,195,240,167,121,65,0,128,59,66,33,80,67,195,202,195,134,65,0,128,59,66,240,103,63,195,140,185,147,65,0,128,59,66,0,128,59,195,236,81,155,65,0,128,59,66,16,152,55,195,159,205,166,65,0,128,59,66,33,176,51,195,170,130,191,65,0,128,59,66,240,199,47,195,100,93,210,65,0,128,59,66,0,224,43,195,229,97,221,65,0,128,59,66,16,248,39,195,99,255,225,65,0,128,59,66,33,16,36,195,208,51,237,65,0,128,59,66,240,39,32,195,167,121,255,65,0,128,59,66,0,64,28,195,75,170,5,66,0,128,59,66,16,88,24,195,70,182,5,66,0,128,59,66,33,112,20,195,71,67,5,66,0,128,59,66,240,135,16,195,32,129,6,66,0,128,59,66,0,160,12,195,85,193,12,66,0,128,59,66,16,184,8,195,164,95,11,66,0,128,59,66,33,208,4,195,211,124,8,66,0,128,59,66,240,231,0,195,91,211,9,66,0,128,59,66,0,0,250,194,64,228,11,66,0,128,59,66,33,48,242,194,63,134,11,66,0,128,59,66,66,96,234,194,113,189,12,66,0,128,59,66,223,143,226,194,80,141,8,66,0,128,59,66,0,192,218,194,175,212,2,66,0,128,59,66,33,240,210,194,58,227,0,66,0,128,59,66,66,32,203,194,225,250,249,65,0,128,59,66,7,80,195,194,168,181,239,65,0,128,59,66,0,128,187,194,161,248,224,65,0,128,59,66,7,176,179,194,17,182,216,65,0,128,59,66,0,224,171,194,106,188,200,65,0,128,59,66,7,16,164,194,184,47,187,65,0,128,59,66,0,64,156,194,51,51,178,65,0,128,59,66,7,112,148,194,223,224,158,65,0,128,59,66,0,160,140,194,160,9,151,65,0,128,59,66,7,208,132,194,114,249,137,65,0,128,59,66,0,0,122,194,219,249,119,65,0,128,59,66,13,96,106,194,58,146,104,65,0,128,59,66,0,192,90,194,116,36,107,65,0,128,59,66,13,32,75,194,246,151,85,65,0,128,59,66,0,128,59,194,153,42,122,65,0,128,59,66,13,224,43,194,217,189,133,65,0,128,59,66,0,64,28,194,33,159,139,65,0,128,59,66,13,160,12,194,196,66,146,65,0,128,59,66,0,0,250,193,104,162,162,65,0,128,59,66,26,192,218,193,213,120,181,65,0,128,59,66,0,128,187,193,211,77,188,65,0,128,59,66,26,64,156,193,210,111,194,65,0,128,59,66,0,0,122,193,241,227,208,65,0,128,59,66,52,128,59,193,161,231,219,65,0,128,59,66,0,0,250,192,140,219,234,65,0,128,59,66,0,0,122,192,186,73,238,65,0,128,59,66,0,0,0,0,220,232,242,65,0,128,59,66,0,0,122,64,129,4,247,65,0,128,59,66,0,0,122,195,41,150,130,64,13,224,43,66,16,24,118,195,4,33,131,64,13,224,43,66,33,48,114,195,119,21,120,64,13,224,43,66,240,71,110,195,146,232,163,64,13,224,43,66,0,96,106,195,191,183,214,64,13,224,43,66,16,120,102,195,7,66,248,64,13,224,43,66,33,144,98,195,43,48,2,65,13,224,43,66,240,167,94,195,201,159,13,65,13,224,43,66,0,192,90,195,59,1,47,65,13,224,43,66,16,216,86,195,3,120,70,65,13,224,43,66,33,240,82,195,232,106,87,65,13,224,43,66,240,7,79,195,97,195,107,65,13,224,43,66,0,32,75,195,20,174,121,65,13,224,43,66,16,56,71,195,197,254,123,65,13,224,43,66,33,80,67,195,213,120,137,65,13,224,43,66,240,103,63,195,118,241,154,65,13,224,43,66,0,128,59,195,93,92,169,65,13,224,43,66,16,152,55,195,97,195,181,65,13,224,43,66,33,176,51,195,157,128,198,65,13,224,43,66,240,199,47,195,101,42,214,65,13,224,43,66,0,224,43,195,77,4,222,65,13,224,43,66,16,248,39,195,130,243,230,65,13,224,43,66,33,16,36,195,201,246,248,65,13,224,43,66,240,39,32,195,240,39,5,66,13,224,43,66,0,64,28,195,66,32,9,66,13,224,43,66,16,88,24,195,54,235,7,66,13,224,43,66,33,112,20,195,196,2,9,66,13,224,43,66,240,135,16,195,32,193,8,66,13,224,43,66,0,160,12,195,213,120,11,66,13,224,43,66,16,184,8,195,170,160,14,66,13,224,43,66,33,208,4,195,230,255,13,66,13,224,43,66,240,231,0,195,204,191,13,66,13,224,43,66,0,0,250,194,244,125,17,66,13,224,43,66,33,48,242,194,187,184,13,66,13,224,43,66,66,96,234,194,206,106,9,66,13,224,43,66,223,143,226,194,170,66,12,66,13,224,43,66,0,192,218,194,57,5,6,66,13,224,43,66,33,240,210,194,78,226,1,66,13,224,43,66,66,32,203,194,17,54,250,65,13,224,43,66,7,80,195,194,61,27,238,65,13,224,43,66,0,128,187,194,29,73,223,65,13,224,43,66,7,176,179,194,233,55,212,65,13,224,43,66,0,224,171,194,136,244,201,65,13,224,43,66,7,16,164,194,217,223,188,65,13,224,43,66,0,64,156,194,72,191,175,65,13,224,43,66,7,112,148,194,93,254,155,65,13,224,43,66,0,160,140,194,181,149,142,65,13,224,43,66,7,208,132,194,254,67,139,65,13,224,43,66,0,0,122,194,26,192,136,65,13,224,43,66,13,96,106,194,87,91,117,65,13,224,43,66,0,192,90,194,14,190,108,65,13,224,43,66,13,32,75,194,179,234,111,65,13,224,43,66,0,128,59,194,19,114,137,65,13,224,43,66,13,224,43,194,170,241,144,65,13,224,43,66,0,64,28,194,175,165,152,65,13,224,43,66,13,160,12,194,169,147,157,65,13,224,43,66,0,0,250,193,76,55,173,65,13,224,43,66,26,192,218,193,114,121,187,65,13,224,43,66,0,128,187,193,0,145,196,65,13,224,43,66,26,64,156,193,55,154,201,65,13,224,43,66,0,0,122,193,122,182,214,65,13,224,43,66,52,128,59,193,114,121,231,65,13,224,43,66,0,0,250,192,97,67,239,65,13,224,43,66,0,0,122,192,221,36,250,65,13,224,43,66,0,0,0,0,255,33,251,65,13,224,43,66,0,0,122,64,240,39,255,65,13,224,43,66,0,0,122,195,203,243,136,64,0,64,28,66,16,24,118,195,86,130,134,64,0,64,28,66,33,48,114,195,6,100,115,64,0,64,28,66,240,71,110,195,150,91,153,64,0,64,28,66,0,96,106,195,57,151,176,64,0,64,28,66,16,120,102,195,160,79,221,64,0,64,28,66,33,144,98,195,189,29,4,65,0,64,28,66,240,167,94,195,30,155,13,65,0,64,28,66,0,192,90,195,75,48,25,65,0,64,28,66,16,216,86,195,8,61,54,65,0,64,28,66,33,240,82,195,35,74,73,65,0,64,28,66,240,7,79,195,176,3,100,65,0,64,28,66,0,32,75,195,89,134,108,65,0,64,28,66,16,56,71,195,125,174,127,65,0,64,28,66,33,80,67,195,72,97,139,65,0,64,28,66,240,103,63,195,125,208,156,65,0,64,28,66,0,128,59,195,66,224,176,65,0,64,28,66,16,152,55,195,153,170,190,65,0,64,28,66,33,176,51,195,108,137,200,65,0,64,28,66,240,199,47,195,134,218,216,65,0,64,28,66,0,224,43,195,0,0,228,65,0,64,28,66,16,248,39,195,51,179,239,65,0,64,28,66,33,16,36,195,217,142,1,66,0,64,28,66,240,39,32,195,35,74,7,66,0,64,28,66,0,64,28,195,240,86,9,66,0,64,28,66,16,88,24,195,73,221,9,66,0,64,28,66,33,112,20,195,247,228,10,66,0,64,28,66,240,135,16,195,156,115,8,66,0,64,28,66,0,160,12,195,251,156,11,66,0,64,28,66,16,184,8,195,217,125,14,66,0,64,28,66,33,208,4,195,113,219,14,66,0,64,28,66,240,231,0,195,67,220,18,66,0,64,28,66,0,0,250,194,97,212,19,66,0,64,28,66,33,48,242,194,166,74,16,66,0,64,28,66,66,96,234,194,79,222,12,66,0,64,28,66,223,143,226,194,185,188,11,66,0,64,28,66,0,192,218,194,102,72,10,66,0,64,28,66,33,240,210,194,182,4,6,66,0,64,28,66,66,32,203,194,242,210,250,65,0,64,28,66,7,80,195,194,245,57,240,65,0,64,28,66,0,128,187,194,129,4,229,65,0,64,28,66,7,176,179,194,222,130,211,65,0,64,28,66,0,224,171,194,247,134,198,65,0,64,28,66,7,16,164,194,106,60,184,65,0,64,28,66,0,64,156,194,152,221,168,65,0,64,28,66,7,112,148,194,191,253,152,65,0,64,28,66,0,160,140,194,48,187,144,65,0,64,28,66,7,208,132,194,228,148,138,65,0,64,28,66,0,0,122,194,78,209,136,65,0,64,28,66,13,96,106,194,59,112,131,65,0,64,28,66,0,192,90,194,245,185,122,65,0,64,28,66,13,32,75,194,253,135,132,65,0,64,28,66,0,128,59,194,242,210,147,65,0,64,28,66,13,224,43,194,177,80,155,65,0,64,28,66,0,64,28,194,22,123,159,65,0,64,28,66,13,160,12,194,242,193,162,65,0,64,28,66,0,0,250,193,120,122,179,65,0,64,28,66,26,192,218,193,6,146,196,65,0,64,28,66,0,128,187,193,59,95,204,65,0,64,28,66,26,64,156,193,72,225,211,65,0,64,28,66,0,0,122,193,4,86,226,65,0,64,28,66,52,128,59,193,71,3,240,65,0,64,28,66,0,0,250,192,71,3,1,66,0,64,28,66,0,0,122,192,227,135,6,66,0,64,28,66,0,0,0,0,10,87,7,66,0,64,28,66,0,0,122,64,28,171,11,66,0,64,28,66,0,0,122,195,24,207,122,64,13,160,12,66,16,24,118,195,186,102,88,64,13,160,12,66,33,48,114,195,8,61,81,64,13,160,12,66,240,71,110,195,65,43,130,64,13,160,12,66,0,96,106,195,182,248,155,64,13,160,12,66,16,120,102,195,173,163,207,64,13,160,12,66,33,144,98,195,89,139,229,64,13,160,12,66,240,167,94,195,201,101,3,65,13,160,12,66,0,192,90,195,176,131,3,65,13,160,12,66,16,216,86,195,8,172,38,65,13,160,12,66,33,240,82,195,249,49,63,65,13,160,12,66,240,7,79,195,203,161,86,65,13,160,12,66,0,32,75,195,207,102,97,65,13,160,12,66,16,56,71,195,138,31,120,65,13,160,12,66,33,80,67,195,116,53,135,65,13,160,12,66,240,103,63,195,25,132,163,65,13,160,12,66,0,128,59,195,12,2,184,65,13,160,12,66,16,152,55,195,193,40,192,65,13,160,12,66,33,176,51,195,101,170,205,65,13,160,12,66,240,199,47,195,22,106,218,65,13,160,12,66,0,224,43,195,206,170,231,65,13,160,12,66,16,248,39,195,178,46,249,65,13,160,12,66,33,16,36,195,57,116,3,66,13,160,12,66,240,39,32,195,241,52,6,66,13,160,12,66,0,64,28,195,237,77,10,66,13,160,12,66,16,88,24,195,237,77,10,66,13,160,12,66,33,112,20,195,1,205,8,66,13,160,12,66,240,135,16,195,237,222,10,66,13,160,12,66,0,160,12,195,222,66,14,66,13,160,12,66,16,184,8,195,124,50,15,66,13,160,12,66,33,208,4,195,104,115,20,66,13,160,12,66,240,231,0,195,165,253,20,66,13,160,12,66,0,0,250,194,93,126,19,66,13,160,12,66,33,48,242,194,95,169,13,66,13,160,12,66,66,96,234,194,2,107,11,66,13,160,12,66,223,143,226,194,16,186,13,66,13,160,12,66,0,192,218,194,152,174,11,66,13,160,12,66,33,240,210,194,199,11,6,66,13,160,12,66,66,32,203,194,124,242,0,66,13,160,12,66,7,80,195,194,124,225,242,65,13,160,12,66,0,128,187,194,149,84,234,65,13,160,12,66,7,176,179,194,50,213,219,65,13,160,12,66,0,224,171,194,238,124,198,65,13,160,12,66,7,16,164,194,185,252,187,65,13,160,12,66,0,64,156,194,227,165,171,65,13,160,12,66,7,112,148,194,144,49,159,65,13,160,12,66,0,160,140,194,25,226,141,65,13,160,12,66,7,208,132,194,235,115,138,65,13,160,12,66,0,0,122,194,96,101,137,65,13,160,12,66,13,96,106,194,94,58,132,65,13,160,12,66,0,192,90,194,196,66,138,65,13,160,12,66,13,32,75,194,126,140,149,65,13,160,12,66,0,128,59,194,229,97,155,65,13,160,12,66,13,224,43,194,27,158,161,65,13,160,12,66,0,64,28,194,167,104,171,65,13,160,12,66,13,160,12,194,138,159,172,65,13,160,12,66,0,0,250,193,222,19,192,65,13,160,12,66,26,192,218,193,181,149,203,65,13,160,12,66,0,128,187,193,95,7,208,65,13,160,12,66,26,64,156,193,16,122,219,65,13,160,12,66,0,0,122,193,154,247,241,65,13,160,12,66,52,128,59,193,113,61,3,66,13,160,12,66,0,0,250,192,107,43,11,66,13,160,12,66,0,0,122,192,20,144,15,66,13,160,12,66,0,0,0,0,233,230,19,66,13,160,12,66,0,0,122,64,186,43,26,66,13,160,12,66,0,0,122,195,87,67,18,64,0,0,250,65,16,24,118,195,191,183,209,63,0,0,250,65,33,48,114,195,84,198,25,64,0,0,250,65,240,71,110,195,212,125,76,64,0,0,250,65,0,96,106,195,183,156,127,64,0,0,250,65,16,120,102,195,75,229,159,64,0,0,250,65,33,144,98,195,54,60,180,64,0,0,250,65,240,167,94,195,60,160,219,64,0,0,250,65,0,192,90,195,59,1,236,64,0,0,250,65,16,216,86,195,212,142,21,65,0,0,250,65,33,240,82,195,32,65,59,65,0,0,250,65,240,7,79,195,247,228,86,65,0,0,250,65,0,32,75,195,141,40,103,65,0,0,250,65,16,56,71,195,113,27,126,65,0,0,250,65,33,80,67,195,195,245,142,65,0,0,250,65,240,103,63,195,77,243,167,65,0,0,250,65,0,128,59,195,51,68,188,65,0,0,250,65,16,152,55,195,29,73,195,65,0,0,250,65,33,176,51,195,24,166,208,65,0,0,250,65,240,199,47,195,109,214,223,65,0,0,250,65,0,224,43,195,180,217,235,65,0,0,250,65,16,248,39,195,36,168,253,65,0,0,250,65,33,16,36,195,155,85,4,66,0,0,250,65,240,39,32,195,50,102,6,66,0,0,250,65,0,64,28,195,33,31,6,66,0,0,250,65,16,88,24,195,187,248,7,66,0,0,250,65,33,112,20,195,3,184,13,66,0,0,250,65,240,135,16,195,249,207,17,66,0,0,250,65,0,160,12,195,198,173,15,66,0,0,250,65,16,184,8,195,86,189,18,66,0,0,250,65,33,208,4,195,176,67,23,66,0,0,250,65,240,231,0,195,102,119,22,66,0,0,250,65,0,0,250,194,57,197,19,66,0,0,250,65,33,48,242,194,34,142,14,66,0,0,250,65,66,96,234,194,170,2,12,66,0,0,250,65,223,143,226,194,68,139,13,66,0,0,250,65,0,192,218,194,202,131,10,66,0,0,250,65,33,240,210,194,181,149,7,66,0,0,250,65,66,32,203,194,211,188,0,66,0,0,250,65,7,80,195,194,94,75,246,65,0,0,250,65,0,128,187,194,209,34,234,65,0,0,250,65,7,176,179,194,104,17,218,65,0,0,250,65,0,224,171,194,136,99,203,65,0,0,250,65,7,16,164,194,140,57,184,65,0,0,250,65,0,64,156,194,165,172,171,65,0,0,250,65,7,112,148,194,18,165,155,65,0,0,250,65,0,160,140,194,29,201,144,65,0,0,250,65,7,208,132,194,161,248,136,65,0,0,250,65,0,0,122,194,155,102,137,65,0,0,250,65,13,96,106,194,169,36,137,65,0,0,250,65,0,192,90,194,21,140,147,65,0,0,250,65,13,32,75,194,160,137,159,65,0,0,250,65,0,128,59,194,255,178,169,65,0,0,250,65,13,224,43,194,79,175,169,65,0,0,250,65,0,64,28,194,169,19,177,65,0,0,250,65,13,160,12,194,50,119,186,65,0,0,250,65,0,0,250,193,156,162,197,65,0,0,250,65,26,192,218,193,129,38,210,65,0,0,250,65,0,128,187,193,185,141,220,65,0,0,250,65,26,64,156,193,122,71,243,65,0,0,250,65,0,0,122,193,99,46,4,66,0,0,250,65,52,128,59,193,91,241,11,66,0,0,250,65,0,0,250,192,114,74,20,66,0,0,250,65,0,0,122,192,58,227,28,66,0,0,250,65,0,0,0,0,148,118,33,66,0,0,250,65,0,0,122,64,157,192,37,66,0,0,250,65,0,0,122,195,170,96,244,62,26,192,218,65,16,24,118,195,186,192,33,63,26,192,218,65,33,48,114,195,105,116,155,63,26,192,218,65,240,71,110,195,233,125,195,63,26,192,218,65,0,96,106,195,62,208,46,64,26,192,218,65,16,120,102,195,10,215,105,64,26,192,218,65,33,144,98,195,4,28,161,64,26,192,218,65,240,167,94,195,42,169,200,64,26,192,218,65,0,192,90,195,126,58,242,64,26,192,218,65,16,216,86,195,238,49,26,65,26,192,218,65,33,240,82,195,105,111,54,65,26,192,218,65,240,7,79,195,4,86,75,65,26,192,218,65,0,32,75,195,194,23,102,65,26,192,218,65,16,56,71,195,246,151,126,65,26,192,218,65,33,80,67,195,147,41,143,65,26,192,218,65,240,103,63,195,202,195,166,65,26,192,218,65,0,128,59,195,252,41,182,65,26,192,218,65,16,152,55,195,156,162,196,65,230,191,218,65,33,176,51,195,164,112,216,65,26,192,218,65,240,199,47,195,161,214,234,65,230,191,218,65,0,224,43,195,144,160,243,65,26,192,218,65,16,248,39,195,20,191,1,66,230,191,218,65,33,16,36,195,159,252,9,66,26,192,218,65,240,39,32,195,121,216,11,66,230,191,218,65,0,64,28,195,18,195,11,66,26,192,218,65,16,88,24,195,178,221,14,66,230,191,218,65,33,112,20,195,161,39,20,66,26,192,218,65,240,135,16,195,164,95,24,66,230,191,218,65,0,160,12,195,126,140,21,66,26,192,218,65,16,184,8,195,2,188,17,66,230,191,218,65,33,208,4,195,96,37,20,66,26,192,218,65,240,231,0,195,82,9,21,66,230,191,218,65,0,0,250,194,104,51,18,66,26,192,218,65,33,48,242,194,244,236,13,66,230,191,218,65,66,96,234,194,138,78,13,66,26,192,218,65,223,143,226,194,184,128,9,66,230,191,218,65,0,192,218,194,100,251,8,66,26,192,218,65,33,240,210,194,139,189,6,66,230,191,218,65,66,32,203,194,42,105,1,66,26,192,218,65,7,80,195,194,84,227,240,65,230,191,218,65,0,128,187,194,250,237,227,65,26,192,218,65,7,176,179,194,131,81,216,65,230,191,218,65,0,224,171,194,91,194,199,65,26,192,218,65,7,16,164,194,45,195,183,65,230,191,218,65,0,64,156,194,105,0,174,65,26,192,218,65,7,112,148,194,97,212,150,65,26,192,218,65,0,160,140,194,229,225,145,65,26,192,218,65,7,208,132,194,102,247,146,65,26,192,218,65,0,0,122,194,241,99,149,65,26,192,218,65,13,96,106,194,124,114,148,65,26,192,218,65,0,192,90,194,75,72,153,65,26,192,218,65,13,32,75,194,224,173,166,65,26,192,218,65,0,128,59,194,164,223,172,65,26,192,218,65,13,224,43,194,31,116,175,65,230,191,218,65,0,64,28,194,136,99,184,65,26,192,218,65,13,160,12,194,164,240,198,65,230,191,218,65,0,0,250,193,89,134,205,65,26,192,218,65,26,192,218,193,137,193,223,65,230,191,218,65,0,128,187,193,231,123,242,65,26,192,218,65,26,64,156,193,116,245,7,66,230,191,218,65,0,0,122,193,146,203,14,66,26,192,218,65,52,128,59,193,105,175,23,66,230,191,218,65,0,0,250,192,193,138,32,66,26,192,218,65,0,0,122,192,192,108,38,66,230,191,218,65,0,0,0,0,141,23,41,66,26,192,218,65,0,0,122,64,0,239,42,66,230,191,218,65,0,0,122,195,97,107,54,62,0,128,187,65,16,24,118,195,195,42,138,63,0,128,187,65,33,48,114,195,90,42,195,63,0,128,187,65,240,71,110,195,139,137,37,64,0,128,187,65,0,96,106,195,187,237,96,64,0,128,187,65,16,120,102,195,153,100,135,64,0,128,187,65,33,144,98,195,13,195,185,64,0,128,187,65,240,167,94,195,247,88,232,64,0,128,187,65,0,192,90,195,213,161,13,65,0,128,187,65,16,216,86,195,71,114,46,65,0,128,187,65,33,240,82,195,186,107,75,65,0,128,187,65,240,7,79,195,100,204,110,65,0,128,187,65,0,32,75,195,220,104,122,65,0,128,187,65,16,56,71,195,100,59,132,65,0,128,187,65,33,80,67,195,94,58,137,65,0,128,187,65,240,103,63,195,111,129,164,65,0,128,187,65,0,128,59,195,165,206,184,65,0,128,187,65,16,152,55,195,134,73,198,65,0,128,187,65,33,176,51,195,115,232,214,65,0,128,187,65,240,199,47,195,18,148,228,65,0,128,187,65,0,224,43,195,155,85,242,65,0,128,187,65,16,248,39,195,113,27,3,66,0,128,187,65,33,16,36,195,199,122,10,66,0,128,187,65,240,39,32,195,196,194,14,66,0,128,187,65,0,64,28,195,102,119,20,66,0,128,187,65,16,88,24,195,143,83,20,66,0,128,187,65,33,112,20,195,125,255,23,66,0,128,187,65,240,135,16,195,125,191,26,66,0,128,187,65,0,160,12,195,84,180,23,66,0,128,187,65,16,184,8,195,139,253,18,66,0,128,187,65,33,208,4,195,80,188,20,66,0,128,187,65,240,231,0,195,9,121,19,66,0,128,187,65,0,0,250,194,162,5,17,66,0,128,187,65,33,48,242,194,104,98,11,66,0,128,187,65,66,96,234,194,132,77,10,66,0,128,187,65,223,143,226,194,4,150,7,66,0,128,187,65,0,192,218,194,171,254,5,66,0,128,187,65,33,240,210,194,123,20,4,66,0,128,187,65,66,32,203,194,104,162,251,65,0,128,187,65,7,80,195,194,29,184,236,65,0,128,187,65,0,128,187,194,225,11,223,65,0,128,187,65,7,176,179,194,167,232,211,65,0,128,187,65,0,224,171,194,149,84,196,65,0,128,187,65,7,16,164,194,170,224,180,65,0,128,187,65,0,64,156,194,61,10,171,65,0,128,187,65,7,112,148,194,40,15,154,65,0,128,187,65,0,160,140,194,86,125,157,65,0,128,187,65,7,208,132,194,92,160,154,65,0,128,187,65,0,0,122,194,235,226,162,65,0,128,187,65,13,96,106,194,167,249,167,65,0,128,187,65,0,192,90,194,25,132,164,65,0,128,187,65,13,32,75,194,6,18,173,65,0,128,187,65,0,128,59,194,98,144,176,65,0,128,187,65,13,224,43,194,214,86,186,65,0,128,187,65,0,64,28,194,207,230,198,65,0,128,187,65,13,160,12,194,0,111,207,65,0,128,187,65,0,0,250,193,215,180,217,65,0,128,187,65,26,192,218,193,57,214,237,65,0,128,187,65,0,128,187,193,117,66,3,66,0,128,187,65,26,64,156,193,223,32,14,66,0,128,187,65,0,0,122,193,140,219,24,66,0,128,187,65,52,128,59,193,233,247,32,66,0,128,187,65,0,0,250,192,217,253,38,66,0,128,187,65,0,0,122,192,238,124,45,66,0,128,187,65,0,0,0,0,170,2,47,66,0,128,187,65,0,0,122,64,148,182,50,66,0,128,187,65,0,0,122,195,206,137,13,62,26,64,156,65,16,24,118,195,79,64,179,63,26,64,156,65,33,48,114,195,56,248,80,64,26,64,156,65,240,71,110,195,210,198,105,64,26,64,156,65,0,96,106,195,30,254,156,64,26,64,156,65,16,120,102,195,90,18,193,64,26,64,156,65,33,144,98,195,103,237,255,64,26,64,156,65,240,167,94,195,46,173,22,65,26,64,156,65,0,192,90,195,45,178,32,65,26,64,156,65,16,216,86,195,175,148,66,65,26,64,156,65,33,240,82,195,202,50,91,65,26,64,156,65,240,7,79,195,48,42,124,65,26,64,156,65,0,32,75,195,60,61,129,65,26,64,156,65,16,56,71,195,26,209,136,65,26,64,156,65,33,80,67,195,93,126,145,65,26,64,156,65,240,103,63,195,3,120,165,65,26,64,156,65,0,128,59,195,39,177,184,65,230,63,156,65,16,152,55,195,121,105,194,65,26,64,156,65,33,176,51,195,100,76,213,65,230,63,156,65,240,199,47,195,35,219,225,65,26,64,156,65,0,224,43,195,199,41,245,65,230,63,156,65,16,248,39,195,56,120,3,66,26,64,156,65,33,16,36,195,55,90,12,66,230,63,156,65,240,39,32,195,4,22,21,66,26,64,156,65,0,64,28,195,246,104,26,66,230,63,156,65,16,88,24,195,198,28,25,66,26,64,156,65,33,112,20,195,218,236,25,66,230,63,156,65,240,135,16,195,249,79,25,66,26,64,156,65,0,160,12,195,143,147,24,66,230,63,156,65,16,184,8,195,41,109,22,66,230,63,156,65,33,208,4,195,188,214,20,66,230,63,156,65,240,231,0,195,17,71,18,66,230,63,156,65,0,0,250,194,102,247,16,66,230,63,156,65,33,48,242,194,59,31,10,66,230,63,156,65,66,96,234,194,62,121,5,66,230,63,156,65,223,143,226,194,59,31,3,66,230,63,156,65,0,192,218,194,180,217,254,65,230,63,156,65,33,240,210,194,233,183,250,65,230,63,156,65,66,32,203,194,220,232,237,65,230,63,156,65,7,80,195,194,97,178,229,65,230,63,156,65,0,128,187,194,138,31,223,65,230,63,156,65,7,176,179,194,110,52,208,65,230,63,156,65,0,224,171,194,13,96,196,65,230,63,156,65,7,16,164,194,38,211,186,65,230,63,156,65,0,64,156,194,97,178,171,65,26,64,156,65,7,112,148,194,60,206,162,65,26,64,156,65,0,160,140,194,210,128,161,65,26,64,156,65,7,208,132,194,211,222,167,65,26,64,156,65,0,0,122,194,254,212,177,65,230,63,156,65,13,96,106,194,10,215,178,65,230,63,156,65,0,192,90,194,144,32,182,65,230,63,156,65,13,32,75,194,10,104,183,65,230,63,156,65,0,128,59,194,152,110,188,65,230,63,156,65,13,224,43,194,188,22,195,65,230,63,156,65,0,64,28,194,240,22,204,65,230,63,156,65,13,160,12,194,235,243,214,65,230,63,156,65,0,0,250,193,119,190,231,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([230,63,156,65,26,192,218,193,101,25,248,65,230,63,156,65,0,128,187,193,194,87,11,66,230,63,156,65,26,64,156,193,222,241,20,66,230,63,156,65,0,0,122,193,158,94,30,66,230,63,156,65,52,128,59,193,194,70,38,66,230,63,156,65,0,0,250,192,245,249,44,66,230,63,156,65,0,0,122,192,154,119,52,66,230,63,156,65,0,0,0,0,162,5,55,66,230,63,156,65,0,0,122,64,59,159,59,66,230,63,156,65,0,0,122,195,243,5,237,62,0,0,122,65,16,24,118,195,184,233,9,64,0,0,122,65,33,48,114,195,249,78,108,64,0,0,122,65,240,71,110,195,116,152,156,64,0,0,122,65,0,96,106,195,60,160,222,64,0,0,122,65,16,120,102,195,10,17,6,65,0,0,122,65,33,144,98,195,65,113,19,65,0,0,122,65,240,167,94,195,151,255,32,65,0,0,122,65,0,192,90,195,251,92,58,65,0,0,122,65,16,216,86,195,172,28,84,65,0,0,122,65,33,240,82,195,28,235,109,65,0,0,122,65,240,7,79,195,97,195,127,65,0,0,122,65,0,32,75,195,51,51,136,65,0,0,122,65,16,56,71,195,14,207,142,65,0,0,122,65,33,80,67,195,100,221,162,65,0,0,122,65,240,103,63,195,199,169,176,65,0,0,122,65,0,128,59,195,112,95,195,65,0,0,122,65,16,152,55,195,0,128,204,65,0,0,122,65,33,176,51,195,208,196,216,65,0,0,122,65,240,199,47,195,51,196,240,65,0,0,122,65,0,224,43,195,177,97,254,65,0,0,122,65,16,248,39,195,52,209,10,66,0,0,122,65,33,16,36,195,121,169,20,66,0,0,122,65,240,39,32,195,173,186,22,66,0,0,122,65,0,64,28,195,74,123,22,66,0,0,122,65,16,88,24,195,253,54,23,66,0,0,122,65,33,112,20,195,8,108,23,66,0,0,122,65,240,135,16,195,238,218,23,66,0,0,122,65,0,160,12,195,172,237,21,66,0,0,122,65,16,184,8,195,175,20,20,66,0,0,122,65,33,208,4,195,115,215,17,66,0,0,122,65,240,231,0,195,72,161,16,66,0,0,122,65,0,0,250,194,236,175,13,66,0,0,122,65,33,48,242,194,175,20,6,66,0,0,122,65,66,96,234,194,201,118,0,66,0,0,122,65,223,143,226,194,74,123,247,65,0,0,122,65,0,192,218,194,58,163,238,65,0,0,122,65,33,240,210,194,26,81,239,65,0,0,122,65,66,32,203,194,199,203,229,65,0,0,122,65,7,80,195,194,150,195,221,65,0,0,122,65,0,128,187,194,164,95,219,65,0,0,122,65,7,176,179,194,121,216,206,65,0,0,122,65,0,224,171,194,185,124,192,65,0,0,122,65,7,16,164,194,146,75,182,65,0,0,122,65,0,64,156,194,59,240,163,65,0,0,122,65,7,112,148,194,31,5,168,65,0,0,122,65,0,160,140,194,84,99,170,65,0,0,122,65,7,208,132,194,215,146,180,65,0,0,122,65,0,0,122,194,136,116,184,65,0,0,122,65,13,96,106,194,202,178,185,65,0,0,122,65,0,192,90,194,34,125,193,65,0,0,122,65,13,32,75,194,52,128,196,65,0,0,122,65,0,128,59,194,216,1,201,65,0,0,122,65,13,224,43,194,250,254,207,65,0,0,122,65,0,64,28,194,19,242,214,65,0,0,122,65,13,160,12,194,217,223,222,65,0,0,122,65,0,0,250,193,163,35,239,65,0,0,122,65,26,192,218,193,191,142,3,66,0,0,122,65,0,128,187,193,16,41,17,66,0,0,122,65,26,64,156,193,113,253,24,66,0,0,122,65,0,0,122,193,59,95,34,66,0,0,122,65,52,128,59,193,111,48,41,66,0,0,122,65,0,0,250,192,189,82,53,66,0,0,122,65,0,0,122,192,72,97,61,66,0,0,122,65,0,0,0,0,87,236,67,66,0,0,122,65,0,0,122,64,2,235,68,66,0,0,122,65,0,0,122,195,144,78,149,63,52,128,59,65,16,24,118,195,100,146,63,64,52,128,59,65,33,48,114,195,244,26,140,64,52,128,59,65,240,71,110,195,230,232,166,64,52,128,59,65,0,96,106,195,235,255,218,64,52,128,59,65,16,120,102,195,223,137,5,65,52,128,59,65,33,144,98,195,136,133,20,65,52,128,59,65,240,167,94,195,169,106,30,65,52,128,59,65,0,192,90,195,211,188,46,65,204,127,59,65,16,216,86,195,117,2,91,65,204,127,59,65,33,240,82,195,90,100,124,65,204,127,59,65,240,7,79,195,41,220,129,65,204,127,59,65,0,32,75,195,31,5,138,65,204,127,59,65,16,56,71,195,235,226,152,65,204,127,59,65,33,80,67,195,94,203,171,65,204,127,59,65,240,103,63,195,2,43,192,65,204,127,59,65,0,128,59,195,216,240,206,65,204,127,59,65,16,152,55,195,2,43,216,65,204,127,59,65,33,176,51,195,49,8,226,65,204,127,59,65,240,199,47,195,44,212,252,65,204,127,59,65,0,224,43,195,25,132,2,66,204,127,59,65,16,248,39,195,118,207,11,66,204,127,59,65,33,16,36,195,94,75,19,66,204,127,59,65,240,39,32,195,166,155,20,66,204,127,59,65,0,64,28,195,226,169,22,66,204,127,59,65,16,88,24,195,11,164,21,66,204,127,59,65,33,112,20,195,137,82,20,66,204,127,59,65,240,135,16,195,5,133,22,66,204,127,59,65,0,160,12,195,88,232,18,66,204,127,59,65,16,184,8,195,184,239,17,66,204,127,59,65,33,208,4,195,214,5,13,66,204,127,59,65,240,231,0,195,143,211,10,66,204,127,59,65,0,0,250,194,249,96,8,66,204,127,59,65,33,48,242,194,236,239,2,66,204,127,59,65,66,96,234,194,231,123,252,65,204,127,59,65,223,143,226,194,93,254,245,65,204,127,59,65,0,192,218,194,82,73,241,65,204,127,59,65,33,240,210,194,177,80,239,65,204,127,59,65,66,32,203,194,244,108,228,65,204,127,59,65,7,80,195,194,11,164,209,65,204,127,59,65,0,128,187,194,121,88,208,65,204,127,59,65,7,176,179,194,253,118,201,65,204,127,59,65,0,224,171,194,23,89,190,65,204,127,59,65,7,16,164,194,197,143,181,65,204,127,59,65,0,64,156,194,127,217,175,65,204,127,59,65,7,112,148,194,8,189,178,65,204,127,59,65,0,160,140,194,154,247,179,65,204,127,59,65,7,208,132,194,231,140,183,65,204,127,59,65,0,0,122,194,214,69,189,65,204,127,59,65,13,96,106,194,165,78,193,65,204,127,59,65,0,192,90,194,89,6,199,65,204,127,59,65,13,32,75,194,220,198,202,65,204,127,59,65,0,128,59,194,70,20,206,65,204,127,59,65,13,224,43,194,72,225,212,65,204,127,59,65,0,64,28,194,194,6,220,65,204,127,59,65,13,160,12,194,104,51,234,65,204,127,59,65,0,0,250,193,78,81,255,65,204,127,59,65,26,192,218,193,29,201,8,66,204,127,59,65,0,128,187,193,246,23,19,66,204,127,59,65,26,64,156,193,245,249,28,66,204,127,59,65,0,0,122,193,191,78,37,66,204,127,59,65,52,128,59,193,163,18,49,66,204,127,59,65,0,0,250,192,179,251,60,66,204,127,59,65,0,0,122,192,45,225,68,66,204,127,59,65,0,0,0,0,182,4,73,66,204,127,59,65,0,0,122,64,66,126,76,66,204,127,59,65,0,0,122,195,21,116,195,63,0,0,250,64,16,24,118,195,172,57,62,64,0,0,250,64,33,48,114,195,242,123,113,64,0,0,250,64,240,71,110,195,77,243,153,64,0,0,250,64,0,96,106,195,0,58,190,64,0,0,250,64,16,120,102,195,60,131,238,64,0,0,250,64,33,144,98,195,40,126,15,65,0,0,250,64,240,167,94,195,198,249,21,65,0,0,250,64,0,192,90,195,218,27,38,65,0,0,250,64,16,216,86,195,222,2,81,65,0,0,250,64,33,240,82,195,109,86,121,65,0,0,250,64,240,7,79,195,193,57,137,65,0,0,250,64,0,32,75,195,182,115,154,65,0,0,250,64,16,56,71,195,207,247,173,65,0,0,250,64,33,80,67,195,83,5,184,65,0,0,250,64,240,103,63,195,52,128,201,65,0,0,250,64,0,128,59,195,198,237,219,65,0,0,250,64,16,152,55,195,63,53,229,65,0,0,250,64,33,176,51,195,125,191,231,65,0,0,250,64,240,199,47,195,31,5,249,65,0,0,250,64,0,224,43,195,248,211,1,66,0,0,250,64,16,248,39,195,2,188,9,66,0,0,250,64,33,16,36,195,76,166,15,66,0,0,250,64,240,39,32,195,253,7,18,66,0,0,250,64,0,64,28,195,230,255,19,66,0,0,250,64,16,88,24,195,138,206,19,66,0,0,250,64,33,112,20,195,156,226,23,66,0,0,250,64,240,135,16,195,76,183,23,66,0,0,250,64,0,160,12,195,52,34,22,66,0,0,250,64,16,184,8,195,132,30,17,66,0,0,250,64,33,208,4,195,248,194,12,66,0,0,250,64,240,231,0,195,65,241,6,66,0,0,250,64,0,0,250,194,32,99,8,66,0,0,250,64,33,48,242,194,208,85,6,66,0,0,250,64,66,96,234,194,151,191,3,66,0,0,250,64,223,143,226,194,38,36,0,66,0,0,250,64,0,192,218,194,202,178,251,65,0,0,250,64,33,240,210,194,175,37,244,65,0,0,250,64,66,32,203,194,179,234,229,65,0,0,250,64,7,80,195,194,8,44,218,65,0,0,250,64,0,128,187,194,93,254,208,65,0,0,250,64,7,176,179,194,132,141,196,65,0,0,250,64,0,224,171,194,176,114,191,65,0,0,250,64,7,16,164,194,73,29,190,65,0,0,250,64,0,64,156,194,159,171,179,65,0,0,250,64,7,112,148,194,229,80,180,65,0,0,250,64,0,160,140,194,37,117,183,65,0,0,250,64,7,208,132,194,34,125,187,65,0,0,250,64,0,0,122,194,184,47,194,65,0,0,250,64,13,96,106,194,151,127,193,65,0,0,250,64,0,192,90,194,255,33,194,65,0,0,250,64,13,32,75,194,129,4,202,65,0,0,250,64,0,128,59,194,146,203,210,65,0,0,250,64,13,224,43,194,39,177,214,65,0,0,250,64,0,64,28,194,121,105,220,65,0,0,250,64,13,160,12,194,132,141,243,65,0,0,250,64,0,0,250,193,3,56,6,66,0,0,250,64,26,192,218,193,72,144,16,66,0,0,250,64,0,128,187,193,242,112,24,66,0,0,250,64,26,64,156,193,182,68,31,66,0,0,250,64,0,0,122,193,90,117,40,66,0,0,250,64,52,128,59,193,242,112,53,66,0,0,250,64,0,0,250,192,11,164,62,66,0,0,250,64,0,0,122,192,29,218,71,66,0,0,250,64,0,0,0,0,99,63,79,66,0,0,250,64,0,0,122,64,196,2,81,66,0,0,250,64,0,0,122,195,100,59,15,62,0,0,122,64,16,24,118,195,0,111,221,63,0,0,122,64,33,48,114,195,99,122,38,64,0,0,122,64,240,71,110,195,68,110,128,64,0,0,122,64,0,96,106,195,137,94,164,64,0,0,122,64,16,120,102,195,245,74,214,64,0,0,122,64,33,144,98,195,152,233,6,65,0,0,122,64,240,167,94,195,201,89,29,65,0,0,122,64,0,192,90,195,254,212,53,65,0,0,122,64,16,216,86,195,80,141,99,65,0,0,122,64,33,240,82,195,10,104,129,65,0,0,122,64,240,7,79,195,54,77,151,65,0,0,122,64,0,32,75,195,127,251,169,65,0,0,122,64,16,56,71,195,161,120,184,65,0,0,122,64,33,80,67,195,236,209,196,65,0,0,122,64,240,103,63,195,176,131,206,65,0,0,122,64,0,128,59,195,138,142,220,65,0,0,122,64,16,152,55,195,165,189,233,65,0,0,122,64,33,176,51,195,207,119,237,65,0,0,122,64,240,199,47,195,204,238,245,65,0,0,122,64,0,224,43,195,37,134,251,65,0,0,122,64,16,248,39,195,24,85,4,66,0,0,122,64,33,16,36,195,113,125,10,66,0,0,122,64,240,39,32,195,46,255,13,66,0,0,122,64,0,64,28,195,129,166,21,66,0,0,122,64,16,88,24,195,223,207,25,66,0,0,122,64,33,112,20,195,86,253,27,66,0,0,122,64,240,135,16,195,254,37,27,66,0,0,122,64,0,160,12,195,141,104,22,66,0,0,122,64,16,184,8,195,3,184,16,66,0,0,122,64,33,208,4,195,96,246,11,66,0,0,122,64,240,231,0,195,136,133,8,66,0,0,122,64,0,0,250,194,36,104,9,66,0,0,122,64,33,48,242,194,18,165,6,66,0,0,122,64,66,96,234,194,157,209,2,66,0,0,122,64,223,143,226,194,77,149,1,66,0,0,122,64,0,192,218,194,135,167,248,65,0,0,122,64,33,240,210,194,249,160,247,65,0,0,122,64,66,32,203,194,98,144,238,65,0,0,122,64,7,80,195,194,57,214,227,65,0,0,122,64,0,128,187,194,249,49,221,65,0,0,122,64,7,176,179,194,169,147,204,65,0,0,122,64,0,224,171,194,229,208,193,65,0,0,122,64,7,16,164,194,188,22,186,65,0,0,122,64,0,64,156,194,212,171,179,65,0,0,122,64,7,112,148,194,14,207,185,65,0,0,122,64,0,160,140,194,31,5,188,65,0,0,122,64,7,208,132,194,200,135,189,65,0,0,122,64,0,0,122,194,145,109,197,65,0,0,122,64,13,96,106,194,241,244,203,65,0,0,122,64,0,192,90,194,17,199,207,65,0,0,122,64,13,32,75,194,228,148,209,65,0,0,122,64,0,128,59,194,202,212,214,65,0,0,122,64,13,224,43,194,125,208,221,65,0,0,122,64,0,64,28,194,5,163,233,65,0,0,122,64,13,160,12,194,236,81,254,65,0,0,122,64,0,0,250,193,46,16,9,66,0,0,122,64,26,192,218,193,50,247,15,66,0,0,122,64,0,128,187,193,170,130,25,66,0,0,122,64,26,64,156,193,114,138,31,66,0,0,122,64,0,0,122,193,254,148,44,66,0,0,122,64,52,128,59,193,11,6,54,66,0,0,122,64,0,0,250,192,235,179,61,66,0,0,122,64,0,0,122,192,224,156,71,66,0,0,122,64,0,0,0,0,249,32,80,66,0,0,122,64,0,0,122,64,114,121,82,66,0,0,122,64,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,126,0,127,0,128,0,129,0,128,0,127,0,128,0,129,0,130,0,131,0,130,0,129,0,132,0,0,0,133,0,2,0,133,0,0,0,133,0,2,0,134,0,4,0,134,0,2,0,134,0,4,0,135,0,6,0,135,0,4,0,135,0,6,0,136,0,8,0,136,0,6,0,136,0,8,0,137,0,10,0,137,0,8,0,137,0,10,0,138,0,12,0,138,0,10,0,138,0,12,0,139,0,14,0,139,0,12,0,139,0,14,0,140,0,16,0,140,0,14,0,140,0,16,0,141,0,18,0,141,0,16,0,141,0,18,0,142,0,20,0,142,0,18,0,142,0,20,0,143,0,22,0,143,0,20,0,143,0,22,0,144,0,24,0,144,0,22,0,144,0,24,0,145,0,26,0,145,0,24,0,145,0,26,0,146,0,28,0,146,0,26,0,146,0,28,0,147,0,30,0,147,0,28,0,147,0,30,0,148,0,32,0,148,0,30,0,148,0,32,0,149,0,34,0,149,0,32,0,149,0,34,0,150,0,36,0,150,0,34,0,150,0,36,0,151,0,38,0,151,0,36,0,151,0,38,0,152,0,40,0,152,0,38,0,152,0,40,0,153,0,42,0,153,0,40,0,153,0,42,0,154,0,44,0,154,0,42,0,154,0,44,0,155,0,46,0,155,0,44,0,155,0,46,0,156,0,48,0,156,0,46,0,156,0,48,0,157,0,50,0,157,0,48,0,157,0,50,0,158,0,52,0,158,0,50,0,158,0,52,0,159,0,54,0,159,0,52,0,159,0,54,0,160,0,56,0,160,0,54,0,160,0,56,0,161,0,58,0,161,0,56,0,161,0,58,0,162,0,60,0,162,0,58,0,162,0,60,0,163,0,62,0,163,0,60,0,163,0,62,0,164,0,64,0,164,0,62,0,164,0,64,0,165,0,66,0,165,0,64,0,165,0,66,0,166,0,68,0,166,0,66,0,166,0,68,0,167,0,70,0,167,0,68,0,167,0,70,0,168,0,72,0,168,0,70,0,168,0,72,0,169,0,74,0,169,0,72,0,169,0,74,0,170,0,76,0,170,0,74,0,170,0,76,0,171,0,78,0,171,0,76,0,171,0,78,0,172,0,80,0,172,0,78,0,172,0,80,0,173,0,82,0,173,0,80,0,173,0,82,0,174,0,84,0,174,0,82,0,174,0,84,0,175,0,86,0,175,0,84,0,175,0,86,0,176,0,88,0,176,0,86,0,176,0,88,0,177,0,90,0,177,0,88,0,177,0,90,0,178,0,92,0,178,0,90,0,178,0,92,0,179,0,94,0,179,0,92,0,179,0,94,0,180,0,96,0,180,0,94,0,180,0,96,0,181,0,98,0,181,0,96,0,181,0,98,0,182,0,100,0,182,0,98,0,182,0,100,0,183,0,102,0,183,0,100,0,183,0,102,0,184,0,104,0,184,0,102,0,184,0,104,0,185,0,106,0,185,0,104,0,185,0,106,0,186,0,108,0,186,0,106,0,186,0,108,0,187,0,110,0,187,0,108,0,187,0,110,0,188,0,112,0,188,0,110,0,188,0,112,0,189,0,114,0,189,0,112,0,189,0,114,0,190,0,116,0,190,0,114,0,190,0,116,0,191,0,118,0,191,0,116,0,191,0,118,0,192,0,120,0,192,0,118,0,192,0,120,0,193,0,122,0,193,0,120,0,193,0,122,0,194,0,124,0,194,0,122,0,194,0,124,0,195,0,126,0,195,0,124,0,195,0,126,0,196,0,128,0,196,0,126,0,196,0,128,0,197,0,130,0,197,0,128,0,198,0,132,0,199,0,133,0,199,0,132,0,199,0,133,0,200,0,134,0,200,0,133,0,200,0,134,0,201,0,135,0,201,0,134,0,201,0,135,0,202,0,136,0,202,0,135,0,202,0,136,0,203,0,137,0,203,0,136,0,203,0,137,0,204,0,138,0,204,0,137,0,204,0,138,0,205,0,139,0,205,0,138,0,205,0,139,0,206,0,140,0,206,0,139,0,206,0,140,0,207,0,141,0,207,0,140,0,207,0,141,0,208,0,142,0,208,0,141,0,208,0,142,0,209,0,143,0,209,0,142,0,209,0,143,0,210,0,144,0,210,0,143,0,210,0,144,0,211,0,145,0,211,0,144,0,211,0,145,0,212,0,146,0,212,0,145,0,212,0,146,0,213,0,147,0,213,0,146,0,213,0,147,0,214,0,148,0,214,0,147,0,214,0,148,0,215,0,149,0,215,0,148,0,215,0,149,0,216,0,150,0,216,0,149,0,216,0,150,0,217,0,151,0,217,0,150,0,217,0,151,0,218,0,152,0,218,0,151,0,218,0,152,0,219,0,153,0,219,0,152,0,219,0,153,0,220,0,154,0,220,0,153,0,220,0,154,0,221,0,155,0,221,0,154,0,221,0,155,0,222,0,156,0,222,0,155,0,222,0,156,0,223,0,157,0,223,0,156,0,223,0,157,0,224,0,158,0,224,0,157,0,224,0,158,0,225,0,159,0,225,0,158,0,225,0,159,0,226,0,160,0,226,0,159,0,226,0,160,0,227,0,161,0,227,0,160,0,227,0,161,0,228,0,162,0,228,0,161,0,228,0,162,0,229,0,163,0,229,0,162,0,229,0,163,0,230,0,164,0,230,0,163,0,230,0,164,0,231,0,165,0,231,0,164,0,231,0,165,0,232,0,166,0,232,0,165,0,232,0,166,0,233,0,167,0,233,0,166,0,233,0,167,0,234,0,168,0,234,0,167,0,234,0,168,0,235,0,169,0,235,0,168,0,235,0,169,0,236,0,170,0,236,0,169,0,236,0,170,0,237,0,171,0,237,0,170,0,237,0,171,0,238,0,172,0,238,0,171,0,238,0,172,0,239,0,173,0,239,0,172,0,239,0,173,0,240,0,174,0,240,0,173,0,240,0,174,0,241,0,175,0,241,0,174,0,241,0,175,0,242,0,176,0,242,0,175,0,242,0,176,0,243,0,177,0,243,0,176,0,243,0,177,0,244,0,178,0,244,0,177,0,244,0,178,0,245,0,179,0,245,0,178,0,245,0,179,0,246,0,180,0,246,0,179,0,246,0,180,0,247,0,181,0,247,0,180,0,247,0,181,0,248,0,182,0,248,0,181,0,248,0,182,0,249,0,183,0,249,0,182,0,249,0,183,0,250,0,184,0,250,0,183,0,250,0,184,0,251,0,185,0,251,0,184,0,251,0,185,0,252,0,186,0,252,0,185,0,252,0,186,0,253,0,187,0,253,0,186,0,253,0,187,0,254,0,188,0,254,0,187,0,254,0,188,0,255,0,189,0,255,0,188,0,255,0,189,0,0,1,190,0,0,1,189,0,0,1,190,0,1,1,191,0,1,1,190,0,1,1,191,0,2,1,192,0,2,1,191,0,2,1,192,0,3,1,193,0,3,1,192,0,3,1,193,0,4,1,194,0,4,1,193,0,4,1,194,0,5,1,195,0,5,1,194,0,5,1,195,0,6,1,196,0,6,1,195,0,6,1,196,0,7,1,197,0,7,1,196,0,8,1,198,0,9,1,199,0,9,1,198,0,9,1,199,0,10,1,200,0,10,1,199,0,10,1,200,0,11,1,201,0,11,1,200,0,11,1,201,0,12,1,202,0,12,1,201,0,12,1,202,0,13,1,203,0,13,1,202,0,13,1,203,0,14,1,204,0,14,1,203,0,14,1,204,0,15,1,205,0,15,1,204,0,15,1,205,0,16,1,206,0,16,1,205,0,16,1,206,0,17,1,207,0,17,1,206,0,17,1,207,0,18,1,208,0,18,1,207,0,18,1,208,0,19,1,209,0,19,1,208,0,19,1,209,0,20,1,210,0,20,1,209,0,20,1,210,0,21,1,211,0,21,1,210,0,21,1,211,0,22,1,212,0,22,1,211,0,22,1,212,0,23,1,213,0,23,1,212,0,23,1,213,0,24,1,214,0,24,1,213,0,24,1,214,0,25,1,215,0,25,1,214,0,25,1,215,0,26,1,216,0,26,1,215,0,26,1,216,0,27,1,217,0,27,1,216,0,27,1,217,0,28,1,218,0,28,1,217,0,28,1,218,0,29,1,219,0,29,1,218,0,29,1,219,0,30,1,220,0,30,1,219,0,30,1,220,0,31,1,221,0,31,1,220,0,31,1,221,0,32,1,222,0,32,1,221,0,32,1,222,0,33,1,223,0,33,1,222,0,33,1,223,0,34,1,224,0,34,1,223,0,34,1,224,0,35,1,225,0,35,1,224,0,35,1,225,0,36,1,226,0,36,1,225,0,36,1,226,0,37,1,227,0,37,1,226,0,37,1,227,0,38,1,228,0,38,1,227,0,38,1,228,0,39,1,229,0,39,1,228,0,39,1,229,0,40,1,230,0,40,1,229,0,40,1,230,0,41,1,231,0,41,1,230,0,41,1,231,0,42,1,232,0,42,1,231,0,42,1,232,0,43,1,233,0,43,1,232,0,43,1,233,0,44,1,234,0,44,1,233,0,44,1,234,0,45,1,235,0,45,1,234,0,45,1,235,0,46,1,236,0,46,1,235,0,46,1,236,0,47,1,237,0,47,1,236,0,47,1,237,0,48,1,238,0,48,1,237,0,48,1,238,0,49,1,239,0,49,1,238,0,49,1,239,0,50,1,240,0,50,1,239,0,50,1,240,0,51,1,241,0,51,1,240,0,51,1,241,0,52,1,242,0,52,1,241,0,52,1,242,0,53,1,243,0,53,1,242,0,53,1,243,0,54,1,244,0,54,1,243,0,54,1,244,0,55,1,245,0,55,1,244,0,55,1,245,0,56,1,246,0,56,1,245,0,56,1,246,0,57,1,247,0,57,1,246,0,57,1,247,0,58,1,248,0,58,1,247,0,58,1,248,0,59,1,249,0,59,1,248,0,59,1,249,0,60,1,250,0,60,1,249,0,60,1,250,0,61,1,251,0,61,1,250,0,61,1,251,0,62,1,252,0,62,1,251,0,62,1,252,0,63,1,253,0,63,1,252,0,63,1,253,0,64,1,254,0,64,1,253,0,64,1,254,0,65,1,255,0,65,1,254,0,65,1,255,0,66,1,0,1,66,1,255,0,66,1,0,1,67,1,1,1,67,1,0,1,67,1,1,1,68,1,2,1,68,1,1,1,68,1,2,1,69,1,3,1,69,1,2,1,69,1,3,1,70,1,4,1,70,1,3,1,70,1,4,1,71,1,5,1,71,1,4,1,71,1,5,1,72,1,6,1,72,1,5,1,72,1,6,1,73,1,7,1,73,1,6,1,74,1,8,1,75,1,9,1,75,1,8,1,75,1,9,1,76,1,10,1,76,1,9,1,76,1,10,1,77,1,11,1,77,1,10,1,77,1,11,1,78,1,12,1,78,1,11,1,78,1,12,1,79,1,13,1,79,1,12,1,79,1,13,1,80,1,14,1,80,1,13,1,80,1,14,1,81,1,15,1,81,1,14,1,81,1,15,1,82,1,16,1,82,1,15,1,82,1,16,1,83,1,17,1,83,1,16,1,83,1,17,1,84,1,18,1,84,1,17,1,84,1,18,1,85,1,19,1,85,1,18,1,85,1,19,1,86,1,20,1,86,1,19,1,86,1,20,1,87,1,21,1,87,1,20,1,87,1,21,1,88,1,22,1,88,1,21,1,88,1,22,1,89,1,23,1,89,1,22,1,89,1,23,1,90,1,24,1,90,1,23,1,90,1,24,1,91,1,25,1,91,1,24,1,91,1,25,1,92,1,26,1,92,1,25,1,92,1,26,1,93,1,27,1,93,1,26,1,93,1,27,1,94,1,28,1,94,1,27,1,94,1,28,1,95,1,29,1,95,1,28,1,95,1,29,1,96,1,30,1,96,1,29,1,96,1,30,1,97,1,31,1,97,1,30,1,97,1,31,1,98,1,32,1,98,1,31,1,98,1,32,1,99,1,33,1,99,1,32,1,99,1,33,1,100,1,34,1,100,1,33,1,100,1,34,1,101,1,35,1,101,1,34,1,101,1,35,1,102,1,36,1,102,1,35,1,102,1,36,1,103,1,37,1,103,1,36,1,103,1,37,1,104,1,38,1,104,1,37,1,104,1,38,1,105,1,39,1,105,1,38,1,105,1,39,1,106,1,40,1,106,1,39,1,106,1,40,1,107,1,41,1,107,1,40,1,107,1,41,1,108,1,42,1,108,1,41,1,108,1,42,1,109,1,43,1,109,1,42,1,109,1,43,1,110,1,44,1,110,1,43,1,110,1,44,1,111,1,45,1,111,1,44,1,111,1,45,1,112,1,46,1,112,1,45,1,112,1,46,1,113,1,47,1,113,1,46,1,113,1,47,1,114,1,48,1,114,1,47,1,114,1,48,1,115,1,49,1,115,1,48,1,115,1,49,1,116,1,50,1,116,1,49,1,116,1,50,1,117,1,51,1,117,1,50,1,117,1,51,1,118,1,52,1,118,1,51,1,118,1,52,1,119,1,53,1,119,1,52,1,119,1,53,1,120,1,54,1,120,1,53,1,120,1,54,1,121,1,55,1,121,1,54,1,121,1,55,1,122,1,56,1,122,1,55,1,122,1,56,1,123,1,57,1,123,1,56,1,123,1,57,1,124,1,58,1,124,1,57,1,124,1,58,1,125,1,59,1,125,1,58,1,125,1,59,1,126,1,60,1,126,1,59,1,126,1,60,1,127,1,61,1,127,1,60,1,127,1,61,1,128,1,62,1,128,1,61,1,128,1,62,1,129,1,63,1,129,1,62,1,129,1,63,1,130,1,64,1,130,1,63,1,130,1,64,1,131,1,65,1,131,1,64,1,131,1,65,1,132,1,66,1,132,1,65,1,132,1,66,1,133,1,67,1,133,1,66,1,133,1,67,1,134,1,68,1,134,1,67,1,134,1,68,1,135,1,69,1,135,1,68,1,135,1,69,1,136,1,70,1,136,1,69,1,136,1,70,1,137,1,71,1,137,1,70,1,137,1,71,1,138,1,72,1,138,1,71,1,138,1,72,1,139,1,73,1,139,1,72,1,140,1,74,1,141,1,75,1,141,1,74,1,141,1,75,1,142,1,76,1,142,1,75,1,142,1,76,1,143,1,77,1,143,1,76,1,143,1,77,1,144,1,78,1,144,1,77,1,144,1,78,1,145,1,79,1,145,1,78,1,145,1,79,1,146,1,80,1,146,1,79,1,146,1,80,1,147,1,81,1,147,1,80,1,147,1,81,1,148,1,82,1,148,1,81,1,148,1,82,1,149,1,83,1,149,1,82,1,149,1,83,1,150,1,84,1,150,1,83,1,150,1,84,1,151,1,85,1,151,1,84,1,151,1,85,1,152,1,86,1,152,1,85,1,152,1,86,1,153,1,87,1,153,1,86,1,153,1,87,1,154,1,88,1,154,1,87,1,154,1,88,1,155,1,89,1,155,1,88,1,155,1,89,1,156,1,90,1,156,1,89,1,156,1,90,1,157,1,91,1,157,1,90,1,157,1,91,1,158,1,92,1,158,1,91,1,158,1,92,1,159,1,93,1,159,1,92,1,159,1,93,1,160,1,94,1,160,1,93,1,160,1,94,1,161,1,95,1,161,1,94,1,161,1,95,1,162,1,96,1,162,1,95,1,162,1,96,1,163,1,97,1,163,1,96,1,163,1,97,1,164,1,98,1,164,1,97,1,164,1,98,1,165,1,99,1,165,1,98,1,165,1,99,1,166,1,100,1,166,1,99,1,166,1,100,1,167,1,101,1,167,1,100,1,167,1,101,1,168,1,102,1,168,1,101,1,168,1,102,1,169,1,103,1,169,1,102,1,169,1,103,1,170,1,104,1,170,1,103,1,170,1,104,1,171,1,105,1,171,1,104,1,171,1,105,1,172,1,106,1,172,1,105,1,172,1,106,1,173,1,107,1,173,1,106,1,173,1,107,1,174,1,108,1,174,1,107,1,174,1,108,1,175,1,109,1,175,1,108,1,175,1,109,1,176,1,110,1,176,1,109,1,176,1,110,1,177,1,111,1,177,1,110,1,177,1,111,1,178,1,112,1,178,1,111,1,178,1,112,1,179,1,113,1,179,1,112,1,179,1,113,1,180,1,114,1,180,1,113,1,180,1,114,1,181,1,115,1,181,1,114,1,181,1,115,1,182,1,116,1,182,1,115,1,182,1,116,1,183,1,117,1,183,1,116,1,183,1,117,1,184,1,118,1,184,1,117,1,184,1,118,1,185,1,119,1,185,1,118,1,185,1,119,1,186,1,120,1,186,1,119,1,186,1,120,1,187,1,121,1,187,1,120,1,187,1,121,1,188,1,122,1,188,1,121,1,188,1,122,1,189,1,123,1,189,1,122,1,189,1,123,1,190,1,124,1,190,1,123,1,190,1,124,1,191,1,125,1,191,1,124,1,191,1,125,1,192,1,126,1,192,1,125,1,192,1,126,1,193,1,127,1,193,1,126,1,193,1,127,1,194,1,128,1,194,1,127,1,194,1,128,1,195,1,129,1,195,1,128,1,195,1,129,1,196,1,130,1,196,1,129,1,196,1,130,1,197,1,131,1,197,1,130,1,197,1,131,1,198,1,132,1,198,1,131,1,198,1,132,1,199,1,133,1,199,1,132,1,199,1,133,1,200,1,134,1,200,1,133,1,200,1,134,1,201,1,135,1,201,1,134,1,201,1,135,1,202,1,136,1,202,1,135,1,202,1,136,1,203,1,137,1,203,1,136,1,203,1,137,1,204,1,138,1,204,1,137,1,204,1,138,1,205,1,139,1,205,1,138,1,206,1,140,1,207,1,141,1,207,1,140,1,207,1,141,1,208,1,142,1,208,1,141,1,208,1,142,1,209,1,143,1,209,1,142,1,209,1,143,1,210,1,144,1,210,1,143,1,210,1,144,1,211,1,145,1,211,1,144,1,211,1,145,1,212,1,146,1,212,1,145,1,212,1,146,1,213,1,147,1,213,1,146,1,213,1,147,1,214,1,148,1,214,1,147,1,214,1,148,1,215,1,149,1,215,1,148,1,215,1,149,1,216,1,150,1,216,1,149,1,216,1,150,1,217,1,151,1,217,1,150,1,217,1,151,1,218,1,152,1,218,1,151,1,218,1,152,1,219,1,153,1,219,1,152,1,219,1,153,1,220,1,154,1,220,1,153,1,220,1,154,1,221,1,155,1,221,1,154,1,221,1,155,1,222,1,156,1,222,1,155,1,222,1,156,1,223,1,157,1,223,1,156,1,223,1,157,1,224,1,158,1,224,1,157,1,224,1,158,1,225,1,159,1,225,1,158,1,225,1,159,1,226,1,160,1,226,1,159,1,226,1,160,1,227,1,161,1,227,1,160,1,227,1,161,1,228,1,162,1,228,1,161,1,228,1,162,1,229,1,163,1,229,1,162,1,229,1,163,1,230,1,164,1,230,1,163,1,230,1,164,1,231,1,165,1,231,1,164,1,231,1,165,1,232,1,166,1,232,1,165,1,232,1,166,1,233,1,167,1,233,1,166,1,233,1,167,1,234,1,168,1,234,1,167,1,234,1,168,1,235,1,169,1,235,1,168,1,235,1,169,1,236,1,170,1,236,1,169,1,236,1,170,1,237,1,171,1,237,1,170,1,237,1,171,1,238,1,172,1,238,1,171,1,238,1,172,1,239,1,173,1,239,1,172,1,239,1,173,1,240,1,174,1,240,1,173,1,240,1,174,1,241,1,175,1,241,1,174,1,241,1,175,1,242,1,176,1,242,1,175,1,242,1,176,1,243,1,177,1,243,1,176,1,243,1,177,1,244,1,178,1,244,1,177,1,244,1,178,1,245,1,179,1,245,1,178,1,245,1,179,1,246,1,180,1,246,1,179,1,246,1,180,1,247,1,181,1,247,1,180,1,247,1,181,1,248,1,182,1,248,1,181,1,248,1,182,1,249,1,183,1,249,1,182,1,249,1,183,1,250,1,184,1,250,1,183,1,250,1,184,1,251,1,185,1,251,1,184,1,251,1,185,1,252,1,186,1,252,1,185,1,252,1,186,1,253,1,187,1,253,1,186,1,253,1,187,1,254,1,188,1,254,1,187,1,254,1,188,1,255,1,189,1,255,1,188,1,255,1,189,1,0,2,190,1,0,2,189,1,0,2,190,1,1,2,191,1,1,2,190,1,1,2,191,1,2,2,192,1,2,2,191,1,2,2,192,1,3,2,193,1,3,2,192,1,3,2,193,1,4,2,194,1,4,2,193,1,4,2,194,1,5,2,195,1,5,2,194,1,5,2,195,1,6,2,196,1,6,2,195,1,6,2,196,1,7,2,197,1,7,2,196,1,7,2,197,1,8,2,198,1,8,2,197,1,8,2,198,1,9,2,199,1,9,2,198,1,9,2,199,1,10,2,200,1,10,2,199,1,10,2,200,1,11,2,201,1,11,2,200,1,11,2,201,1,12,2,202,1,12,2,201,1,12,2,202,1,13,2,203,1,13,2,202,1,13,2,203,1,14,2,204,1,14,2,203,1,14,2,204,1,15,2,205,1,15,2,204,1,16,2,206,1,17,2,207,1,17,2,206,1,17,2,207,1,18,2,208,1,18,2,207,1,18,2,208,1,19,2,209,1,19,2,208,1,19,2,209,1,20,2,210,1,20,2,209,1,20,2,210,1,21,2,211,1,21,2,210,1,21,2,211,1,22,2,212,1,22,2,211,1,22,2,212,1,23,2,213,1,23,2,212,1,23,2,213,1,24,2,214,1,24,2,213,1,24,2,214,1,25,2,215,1,25,2,214,1,25,2,215,1,26,2,216,1,26,2,215,1,26,2,216,1,27,2,217,1,27,2,216,1,27,2,217,1,28,2,218,1,28,2,217,1,28,2,218,1,29,2,219,1,29,2,218,1,29,2,219,1,30,2,220,1,30,2,219,1,30,2,220,1,31,2,221,1,31,2,220,1,31,2,221,1,32,2,222,1,32,2,221,1,32,2,222,1,33,2,223,1,33,2,222,1,33,2,223,1,34,2,224,1,34,2,223,1,34,2,224,1,35,2,225,1,35,2,224,1,35,2,225,1,36,2,226,1,36,2,225,1,36,2,226,1,37,2,227,1,37,2,226,1,37,2,227,1,38,2,228,1,38,2,227,1,38,2,228,1,39,2,229,1,39,2,228,1,39,2,229,1,40,2,230,1,40,2,229,1,40,2,230,1,41,2,231,1,41,2,230,1,41,2,231,1,42,2,232,1,42,2,231,1,42,2,232,1,43,2,233,1,43,2,232,1,43,2,233,1,44,2,234,1,44,2,233,1,44,2,234,1,45,2,235,1,45,2,234,1,45,2,235,1,46,2,236,1,46,2,235,1,46,2,236,1,47,2,237,1,47,2,236,1,47,2,237,1,48,2,238,1,48,2,237,1,48,2,238,1,49,2,239,1,49,2,238,1,49,2,239,1,50,2,240,1,50,2,239,1,50,2,240,1,51,2,241,1,51,2,240,1,51,2,241,1,52,2,242,1,52,2,241,1,52,2,242,1,53,2,243,1,53,2,242,1,53,2,243,1,54,2,244,1,54,2,243,1,54,2,244,1,55,2,245,1,55,2,244,1,55,2,245,1,56,2,246,1,56,2,245,1,56,2,246,1,57,2,247,1,57,2,246,1,57,2,247,1,58,2,248,1,58,2,247,1,58,2,248,1,59,2,249,1,59,2,248,1,59,2,249,1,60,2,250,1,60,2,249,1,60,2,250,1,61,2,251,1,61,2,250,1,61,2,251,1,62,2,252,1,62,2,251,1,62,2,252,1,63,2,253,1,63,2,252,1,63,2,253,1,64,2,254,1,64,2,253,1,64,2,254,1,65,2,255,1,65,2,254,1,65,2,255,1,66,2,0,2,66,2,255,1,66,2,0,2,67,2,1,2,67,2,0,2,67,2,1,2,68,2,2,2,68,2,1,2,68,2,2,2,69,2,3,2,69,2,2,2,69,2,3,2,70,2,4,2,70,2,3,2,70,2,4,2,71,2,5,2,71,2,4,2,71,2,5,2,72,2,6,2,72,2,5,2,72,2,6,2,73,2,7,2,73,2,6,2,73,2,7,2,74,2,8,2,74,2,7,2,74,2,8,2,75,2,9,2,75,2,8,2,75,2,9,2,76,2,10,2,76,2,9,2,76,2,10,2,77,2,11,2,77,2,10,2,77,2,11,2,78,2,12,2,78,2,11,2,78,2,12,2,79,2,13,2,79,2,12,2,79,2,13,2,80,2,14,2,80,2,13,2,80,2,14,2,81,2,15,2,81,2,14,2,82,2,16,2,83,2,17,2,83,2,16,2,83,2,17,2,84,2,18,2,84,2,17,2,84,2,18,2,85,2,19,2,85,2,18,2,85,2,19,2,86,2,20,2,86,2,19,2,86,2,20,2,87,2,21,2,87,2,20,2,87,2,21,2,88,2,22,2,88,2,21,2,88,2,22,2,89,2,23,2,89,2,22,2,89,2,23,2,90,2,24,2,90,2,23,2,90,2,24,2,91,2,25,2,91,2,24,2,91,2,25,2,92,2,26,2,92,2,25,2,92,2,26,2,93,2,27,2,93,2,26,2,93,2,27,2,94,2,28,2,94,2,27,2,94,2,28,2,95,2,29,2,95,2,28,2,95,2,29,2,96,2,30,2,96,2,29,2,96,2,30,2,97,2,31,2,97,2,30,2,97,2,31,2,98,2,32,2,98,2,31,2,98,2,32,2,99,2,33,2,99,2,32,2,99,2,33,2,100,2,34,2,100,2,33,2,100,2,34,2,101,2,35,2,101,2,34,2,101,2,35,2,102,2,36,2,102,2,35,2,102,2,36,2,103,2,37,2,103,2,36,2,103,2,37,2,104,2,38,2,104,2,37,2,104,2,38,2,105,2,39,2,105,2,38,2,105,2,39,2,106,2,40,2,106,2,39,2,106,2,40,2,107,2,41,2,107,2,40,2,107,2,41,2,108,2,42,2,108,2,41,2,108,2,42,2,109,2,43,2,109,2,42,2,109,2,43,2,110,2,44,2,110,2,43,2,110,2,44,2,111,2,45,2,111,2,44,2,111,2,45,2,112,2,46,2,112,2,45,2,112,2,46,2,113,2,47,2,113,2,46,2,113,2,47,2,114,2,48,2,114,2,47,2,114,2,48,2,115,2,49,2,115,2,48,2,115,2,49,2,116,2,50,2,116,2,49,2,116,2,50,2,117,2,51,2,117,2,50,2,117,2,51,2,118,2,52,2,118,2,51,2,118,2,52,2,119,2,53,2,119,2,52,2,119,2,53,2,120,2,54,2,120,2,53,2,120,2,54,2,121,2,55,2,121,2,54,2,121,2,55,2,122,2,56,2,122,2,55,2,122,2,56,2,123,2,57,2,123,2,56,2,123,2,57,2,124,2,58,2,124,2,57,2,124,2,58,2,125,2,59,2,125,2,58,2,125,2,59,2,126,2,60,2,126,2,59,2,126,2,60,2,127,2,61,2,127,2,60,2,127,2,61,2,128,2,62,2,128,2,61,2,128,2,62,2,129,2,63,2,129,2,62,2,129,2,63,2,130,2,64,2,130,2,63,2,130,2,64,2,131,2,65,2,131,2,64,2,131,2,65,2,132,2,66,2,132,2,65,2,132,2,66,2,133,2,67,2,133,2,66,2,133,2,67,2,134,2,68,2,134,2,67,2,134,2,68,2,135,2,69,2,135,2,68,2,135,2,69,2,136,2,70,2,136,2,69,2,136,2,70,2,137,2,71,2,137,2,70,2,137,2,71,2,138,2,72,2,138,2,71,2,138,2,72,2,139,2,73,2,139,2,72,2,139,2,73,2,140,2,74,2,140,2,73,2,140,2,74,2,141,2,75,2,141,2,74,2,141,2,75,2,142,2,76,2,142,2,75,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([142,2,76,2,143,2,77,2,143,2,76,2,143,2,77,2,144,2,78,2,144,2,77,2,144,2,78,2,145,2,79,2,145,2,78,2,145,2,79,2,146,2,80,2,146,2,79,2,146,2,80,2,147,2,81,2,147,2,80,2,148,2,82,2,149,2,83,2,149,2,82,2,149,2,83,2,150,2,84,2,150,2,83,2,150,2,84,2,151,2,85,2,151,2,84,2,151,2,85,2,152,2,86,2,152,2,85,2,152,2,86,2,153,2,87,2,153,2,86,2,153,2,87,2,154,2,88,2,154,2,87,2,154,2,88,2,155,2,89,2,155,2,88,2,155,2,89,2,156,2,90,2,156,2,89,2,156,2,90,2,157,2,91,2,157,2,90,2,157,2,91,2,158,2,92,2,158,2,91,2,158,2,92,2,159,2,93,2,159,2,92,2,159,2,93,2,160,2,94,2,160,2,93,2,160,2,94,2,161,2,95,2,161,2,94,2,161,2,95,2,162,2,96,2,162,2,95,2,162,2,96,2,163,2,97,2,163,2,96,2,163,2,97,2,164,2,98,2,164,2,97,2,164,2,98,2,165,2,99,2,165,2,98,2,165,2,99,2,166,2,100,2,166,2,99,2,166,2,100,2,167,2,101,2,167,2,100,2,167,2,101,2,168,2,102,2,168,2,101,2,168,2,102,2,169,2,103,2,169,2,102,2,169,2,103,2,170,2,104,2,170,2,103,2,170,2,104,2,171,2,105,2,171,2,104,2,171,2,105,2,172,2,106,2,172,2,105,2,172,2,106,2,173,2,107,2,173,2,106,2,173,2,107,2,174,2,108,2,174,2,107,2,174,2,108,2,175,2,109,2,175,2,108,2,175,2,109,2,176,2,110,2,176,2,109,2,176,2,110,2,177,2,111,2,177,2,110,2,177,2,111,2,178,2,112,2,178,2,111,2,178,2,112,2,179,2,113,2,179,2,112,2,179,2,113,2,180,2,114,2,180,2,113,2,180,2,114,2,181,2,115,2,181,2,114,2,181,2,115,2,182,2,116,2,182,2,115,2,182,2,116,2,183,2,117,2,183,2,116,2,183,2,117,2,184,2,118,2,184,2,117,2,184,2,118,2,185,2,119,2,185,2,118,2,185,2,119,2,186,2,120,2,186,2,119,2,186,2,120,2,187,2,121,2,187,2,120,2,187,2,121,2,188,2,122,2,188,2,121,2,188,2,122,2,189,2,123,2,189,2,122,2,189,2,123,2,190,2,124,2,190,2,123,2,190,2,124,2,191,2,125,2,191,2,124,2,191,2,125,2,192,2,126,2,192,2,125,2,192,2,126,2,193,2,127,2,193,2,126,2,193,2,127,2,194,2,128,2,194,2,127,2,194,2,128,2,195,2,129,2,195,2,128,2,195,2,129,2,196,2,130,2,196,2,129,2,196,2,130,2,197,2,131,2,197,2,130,2,197,2,131,2,198,2,132,2,198,2,131,2,198,2,132,2,199,2,133,2,199,2,132,2,199,2,133,2,200,2,134,2,200,2,133,2,200,2,134,2,201,2,135,2,201,2,134,2,201,2,135,2,202,2,136,2,202,2,135,2,202,2,136,2,203,2,137,2,203,2,136,2,203,2,137,2,204,2,138,2,204,2,137,2,204,2,138,2,205,2,139,2,205,2,138,2,205,2,139,2,206,2,140,2,206,2,139,2,206,2,140,2,207,2,141,2,207,2,140,2,207,2,141,2,208,2,142,2,208,2,141,2,208,2,142,2,209,2,143,2,209,2,142,2,209,2,143,2,210,2,144,2,210,2,143,2,210,2,144,2,211,2,145,2,211,2,144,2,211,2,145,2,212,2,146,2,212,2,145,2,212,2,146,2,213,2,147,2,213,2,146,2,214,2,148,2,215,2,149,2,215,2,148,2,215,2,149,2,216,2,150,2,216,2,149,2,216,2,150,2,217,2,151,2,217,2,150,2,217,2,151,2,218,2,152,2,218,2,151,2,218,2,152,2,219,2,153,2,219,2,152,2,219,2,153,2,220,2,154,2,220,2,153,2,220,2,154,2,221,2,155,2,221,2,154,2,221,2,155,2,222,2,156,2,222,2,155,2,222,2,156,2,223,2,157,2,223,2,156,2,223,2,157,2,224,2,158,2,224,2,157,2,224,2,158,2,225,2,159,2,225,2,158,2,225,2,159,2,226,2,160,2,226,2,159,2,226,2,160,2,227,2,161,2,227,2,160,2,227,2,161,2,228,2,162,2,228,2,161,2,228,2,162,2,229,2,163,2,229,2,162,2,229,2,163,2,230,2,164,2,230,2,163,2,230,2,164,2,231,2,165,2,231,2,164,2,231,2,165,2,232,2,166,2,232,2,165,2,232,2,166,2,233,2,167,2,233,2,166,2,233,2,167,2,234,2,168,2,234,2,167,2,234,2,168,2,235,2,169,2,235,2,168,2,235,2,169,2,236,2,170,2,236,2,169,2,236,2,170,2,237,2,171,2,237,2,170,2,237,2,171,2,238,2,172,2,238,2,171,2,238,2,172,2,239,2,173,2,239,2,172,2,239,2,173,2,240,2,174,2,240,2,173,2,240,2,174,2,241,2,175,2,241,2,174,2,241,2,175,2,242,2,176,2,242,2,175,2,242,2,176,2,243,2,177,2,243,2,176,2,243,2,177,2,244,2,178,2,244,2,177,2,244,2,178,2,245,2,179,2,245,2,178,2,245,2,179,2,246,2,180,2,246,2,179,2,246,2,180,2,247,2,181,2,247,2,180,2,247,2,181,2,248,2,182,2,248,2,181,2,248,2,182,2,249,2,183,2,249,2,182,2,249,2,183,2,250,2,184,2,250,2,183,2,250,2,184,2,251,2,185,2,251,2,184,2,251,2,185,2,252,2,186,2,252,2,185,2,252,2,186,2,253,2,187,2,253,2,186,2,253,2,187,2,254,2,188,2,254,2,187,2,254,2,188,2,255,2,189,2,255,2,188,2,255,2,189,2,0,3,190,2,0,3,189,2,0,3,190,2,1,3,191,2,1,3,190,2,1,3,191,2,2,3,192,2,2,3,191,2,2,3,192,2,3,3,193,2,3,3,192,2,3,3,193,2,4,3,194,2,4,3,193,2,4,3,194,2,5,3,195,2,5,3,194,2,5,3,195,2,6,3,196,2,6,3,195,2,6,3,196,2,7,3,197,2,7,3,196,2,7,3,197,2,8,3,198,2,8,3,197,2,8,3,198,2,9,3,199,2,9,3,198,2,9,3,199,2,10,3,200,2,10,3,199,2,10,3,200,2,11,3,201,2,11,3,200,2,11,3,201,2,12,3,202,2,12,3,201,2,12,3,202,2,13,3,203,2,13,3,202,2,13,3,203,2,14,3,204,2,14,3,203,2,14,3,204,2,15,3,205,2,15,3,204,2,15,3,205,2,16,3,206,2,16,3,205,2,16,3,206,2,17,3,207,2,17,3,206,2,17,3,207,2,18,3,208,2,18,3,207,2,18,3,208,2,19,3,209,2,19,3,208,2,19,3,209,2,20,3,210,2,20,3,209,2,20,3,210,2,21,3,211,2,21,3,210,2,21,3,211,2,22,3,212,2,22,3,211,2,22,3,212,2,23,3,213,2,23,3,212,2,24,3,214,2,25,3,215,2,25,3,214,2,25,3,215,2,26,3,216,2,26,3,215,2,26,3,216,2,27,3,217,2,27,3,216,2,27,3,217,2,28,3,218,2,28,3,217,2,28,3,218,2,29,3,219,2,29,3,218,2,29,3,219,2,30,3,220,2,30,3,219,2,30,3,220,2,31,3,221,2,31,3,220,2,31,3,221,2,32,3,222,2,32,3,221,2,32,3,222,2,33,3,223,2,33,3,222,2,33,3,223,2,34,3,224,2,34,3,223,2,34,3,224,2,35,3,225,2,35,3,224,2,35,3,225,2,36,3,226,2,36,3,225,2,36,3,226,2,37,3,227,2,37,3,226,2,37,3,227,2,38,3,228,2,38,3,227,2,38,3,228,2,39,3,229,2,39,3,228,2,39,3,229,2,40,3,230,2,40,3,229,2,40,3,230,2,41,3,231,2,41,3,230,2,41,3,231,2,42,3,232,2,42,3,231,2,42,3,232,2,43,3,233,2,43,3,232,2,43,3,233,2,44,3,234,2,44,3,233,2,44,3,234,2,45,3,235,2,45,3,234,2,45,3,235,2,46,3,236,2,46,3,235,2,46,3,236,2,47,3,237,2,47,3,236,2,47,3,237,2,48,3,238,2,48,3,237,2,48,3,238,2,49,3,239,2,49,3,238,2,49,3,239,2,50,3,240,2,50,3,239,2,50,3,240,2,51,3,241,2,51,3,240,2,51,3,241,2,52,3,242,2,52,3,241,2,52,3,242,2,53,3,243,2,53,3,242,2,53,3,243,2,54,3,244,2,54,3,243,2,54,3,244,2,55,3,245,2,55,3,244,2,55,3,245,2,56,3,246,2,56,3,245,2,56,3,246,2,57,3,247,2,57,3,246,2,57,3,247,2,58,3,248,2,58,3,247,2,58,3,248,2,59,3,249,2,59,3,248,2,59,3,249,2,60,3,250,2,60,3,249,2,60,3,250,2,61,3,251,2,61,3,250,2,61,3,251,2,62,3,252,2,62,3,251,2,62,3,252,2,63,3,253,2,63,3,252,2,63,3,253,2,64,3,254,2,64,3,253,2,64,3,254,2,65,3,255,2,65,3,254,2,65,3,255,2,66,3,0,3,66,3,255,2,66,3,0,3,67,3,1,3,67,3,0,3,67,3,1,3,68,3,2,3,68,3,1,3,68,3,2,3,69,3,3,3,69,3,2,3,69,3,3,3,70,3,4,3,70,3,3,3,70,3,4,3,71,3,5,3,71,3,4,3,71,3,5,3,72,3,6,3,72,3,5,3,72,3,6,3,73,3,7,3,73,3,6,3,73,3,7,3,74,3,8,3,74,3,7,3,74,3,8,3,75,3,9,3,75,3,8,3,75,3,9,3,76,3,10,3,76,3,9,3,76,3,10,3,77,3,11,3,77,3,10,3,77,3,11,3,78,3,12,3,78,3,11,3,78,3,12,3,79,3,13,3,79,3,12,3,79,3,13,3,80,3,14,3,80,3,13,3,80,3,14,3,81,3,15,3,81,3,14,3,81,3,15,3,82,3,16,3,82,3,15,3,82,3,16,3,83,3,17,3,83,3,16,3,83,3,17,3,84,3,18,3,84,3,17,3,84,3,18,3,85,3,19,3,85,3,18,3,85,3,19,3,86,3,20,3,86,3,19,3,86,3,20,3,87,3,21,3,87,3,20,3,87,3,21,3,88,3,22,3,88,3,21,3,88,3,22,3,89,3,23,3,89,3,22,3,90,3,24,3,91,3,25,3,91,3,24,3,91,3,25,3,92,3,26,3,92,3,25,3,92,3,26,3,93,3,27,3,93,3,26,3,93,3,27,3,94,3,28,3,94,3,27,3,94,3,28,3,95,3,29,3,95,3,28,3,95,3,29,3,96,3,30,3,96,3,29,3,96,3,30,3,97,3,31,3,97,3,30,3,97,3,31,3,98,3,32,3,98,3,31,3,98,3,32,3,99,3,33,3,99,3,32,3,99,3,33,3,100,3,34,3,100,3,33,3,100,3,34,3,101,3,35,3,101,3,34,3,101,3,35,3,102,3,36,3,102,3,35,3,102,3,36,3,103,3,37,3,103,3,36,3,103,3,37,3,104,3,38,3,104,3,37,3,104,3,38,3,105,3,39,3,105,3,38,3,105,3,39,3,106,3,40,3,106,3,39,3,106,3,40,3,107,3,41,3,107,3,40,3,107,3,41,3,108,3,42,3,108,3,41,3,108,3,42,3,109,3,43,3,109,3,42,3,109,3,43,3,110,3,44,3,110,3,43,3,110,3,44,3,111,3,45,3,111,3,44,3,111,3,45,3,112,3,46,3,112,3,45,3,112,3,46,3,113,3,47,3,113,3,46,3,113,3,47,3,114,3,48,3,114,3,47,3,114,3,48,3,115,3,49,3,115,3,48,3,115,3,49,3,116,3,50,3,116,3,49,3,116,3,50,3,117,3,51,3,117,3,50,3,117,3,51,3,118,3,52,3,118,3,51,3,118,3,52,3,119,3,53,3,119,3,52,3,119,3,53,3,120,3,54,3,120,3,53,3,120,3,54,3,121,3,55,3,121,3,54,3,121,3,55,3,122,3,56,3,122,3,55,3,122,3,56,3,123,3,57,3,123,3,56,3,123,3,57,3,124,3,58,3,124,3,57,3,124,3,58,3,125,3,59,3,125,3,58,3,125,3,59,3,126,3,60,3,126,3,59,3,126,3,60,3,127,3,61,3,127,3,60,3,127,3,61,3,128,3,62,3,128,3,61,3,128,3,62,3,129,3,63,3,129,3,62,3,129,3,63,3,130,3,64,3,130,3,63,3,130,3,64,3,131,3,65,3,131,3,64,3,131,3,65,3,132,3,66,3,132,3,65,3,132,3,66,3,133,3,67,3,133,3,66,3,133,3,67,3,134,3,68,3,134,3,67,3,134,3,68,3,135,3,69,3,135,3,68,3,135,3,69,3,136,3,70,3,136,3,69,3,136,3,70,3,137,3,71,3,137,3,70,3,137,3,71,3,138,3,72,3,138,3,71,3,138,3,72,3,139,3,73,3,139,3,72,3,139,3,73,3,140,3,74,3,140,3,73,3,140,3,74,3,141,3,75,3,141,3,74,3,141,3,75,3,142,3,76,3,142,3,75,3,142,3,76,3,143,3,77,3,143,3,76,3,143,3,77,3,144,3,78,3,144,3,77,3,144,3,78,3,145,3,79,3,145,3,78,3,145,3,79,3,146,3,80,3,146,3,79,3,146,3,80,3,147,3,81,3,147,3,80,3,147,3,81,3,148,3,82,3,148,3,81,3,148,3,82,3,149,3,83,3,149,3,82,3,149,3,83,3,150,3,84,3,150,3,83,3,150,3,84,3,151,3,85,3,151,3,84,3,151,3,85,3,152,3,86,3,152,3,85,3,152,3,86,3,153,3,87,3,153,3,86,3,153,3,87,3,154,3,88,3,154,3,87,3,154,3,88,3,155,3,89,3,155,3,88,3,156,3,90,3,157,3,91,3,157,3,90,3,157,3,91,3,158,3,92,3,158,3,91,3,158,3,92,3,159,3,93,3,159,3,92,3,159,3,93,3,160,3,94,3,160,3,93,3,160,3,94,3,161,3,95,3,161,3,94,3,161,3,95,3,162,3,96,3,162,3,95,3,162,3,96,3,163,3,97,3,163,3,96,3,163,3,97,3,164,3,98,3,164,3,97,3,164,3,98,3,165,3,99,3,165,3,98,3,165,3,99,3,166,3,100,3,166,3,99,3,166,3,100,3,167,3,101,3,167,3,100,3,167,3,101,3,168,3,102,3,168,3,101,3,168,3,102,3,169,3,103,3,169,3,102,3,169,3,103,3,170,3,104,3,170,3,103,3,170,3,104,3,171,3,105,3,171,3,104,3,171,3,105,3,172,3,106,3,172,3,105,3,172,3,106,3,173,3,107,3,173,3,106,3,173,3,107,3,174,3,108,3,174,3,107,3,174,3,108,3,175,3,109,3,175,3,108,3,175,3,109,3,176,3,110,3,176,3,109,3,176,3,110,3,177,3,111,3,177,3,110,3,177,3,111,3,178,3,112,3,178,3,111,3,178,3,112,3,179,3,113,3,179,3,112,3,179,3,113,3,180,3,114,3,180,3,113,3,180,3,114,3,181,3,115,3,181,3,114,3,181,3,115,3,182,3,116,3,182,3,115,3,182,3,116,3,183,3,117,3,183,3,116,3,183,3,117,3,184,3,118,3,184,3,117,3,184,3,118,3,185,3,119,3,185,3,118,3,185,3,119,3,186,3,120,3,186,3,119,3,186,3,120,3,187,3,121,3,187,3,120,3,187,3,121,3,188,3,122,3,188,3,121,3,188,3,122,3,189,3,123,3,189,3,122,3,189,3,123,3,190,3,124,3,190,3,123,3,190,3,124,3,191,3,125,3,191,3,124,3,191,3,125,3,192,3,126,3,192,3,125,3,192,3,126,3,193,3,127,3,193,3,126,3,193,3,127,3,194,3,128,3,194,3,127,3,194,3,128,3,195,3,129,3,195,3,128,3,195,3,129,3,196,3,130,3,196,3,129,3,196,3,130,3,197,3,131,3,197,3,130,3,197,3,131,3,198,3,132,3,198,3,131,3,198,3,132,3,199,3,133,3,199,3,132,3,199,3,133,3,200,3,134,3,200,3,133,3,200,3,134,3,201,3,135,3,201,3,134,3,201,3,135,3,202,3,136,3,202,3,135,3,202,3,136,3,203,3,137,3,203,3,136,3,203,3,137,3,204,3,138,3,204,3,137,3,204,3,138,3,205,3,139,3,205,3,138,3,205,3,139,3,206,3,140,3,206,3,139,3,206,3,140,3,207,3,141,3,207,3,140,3,207,3,141,3,208,3,142,3,208,3,141,3,208,3,142,3,209,3,143,3,209,3,142,3,209,3,143,3,210,3,144,3,210,3,143,3,210,3,144,3,211,3,145,3,211,3,144,3,211,3,145,3,212,3,146,3,212,3,145,3,212,3,146,3,213,3,147,3,213,3,146,3,213,3,147,3,214,3,148,3,214,3,147,3,214,3,148,3,215,3,149,3,215,3,148,3,215,3,149,3,216,3,150,3,216,3,149,3,216,3,150,3,217,3,151,3,217,3,150,3,217,3,151,3,218,3,152,3,218,3,151,3,218,3,152,3,219,3,153,3,219,3,152,3,219,3,153,3,220,3,154,3,220,3,153,3,220,3,154,3,221,3,155,3,221,3,154,3,222,3,156,3,223,3,157,3,223,3,156,3,223,3,157,3,224,3,158,3,224,3,157,3,224,3,158,3,225,3,159,3,225,3,158,3,225,3,159,3,226,3,160,3,226,3,159,3,226,3,160,3,227,3,161,3,227,3,160,3,227,3,161,3,228,3,162,3,228,3,161,3,228,3,162,3,229,3,163,3,229,3,162,3,229,3,163,3,230,3,164,3,230,3,163,3,230,3,164,3,231,3,165,3,231,3,164,3,231,3,165,3,232,3,166,3,232,3,165,3,232,3,166,3,233,3,167,3,233,3,166,3,233,3,167,3,234,3,168,3,234,3,167,3,234,3,168,3,235,3,169,3,235,3,168,3,235,3,169,3,236,3,170,3,236,3,169,3,236,3,170,3,237,3,171,3,237,3,170,3,237,3,171,3,238,3,172,3,238,3,171,3,238,3,172,3,239,3,173,3,239,3,172,3,239,3,173,3,240,3,174,3,240,3,173,3,240,3,174,3,241,3,175,3,241,3,174,3,241,3,175,3,242,3,176,3,242,3,175,3,242,3,176,3,243,3,177,3,243,3,176,3,243,3,177,3,244,3,178,3,244,3,177,3,244,3,178,3,245,3,179,3,245,3,178,3,245,3,179,3,246,3,180,3,246,3,179,3,246,3,180,3,247,3,181,3,247,3,180,3,247,3,181,3,248,3,182,3,248,3,181,3,248,3,182,3,249,3,183,3,249,3,182,3,249,3,183,3,250,3,184,3,250,3,183,3,250,3,184,3,251,3,185,3,251,3,184,3,251,3,185,3,252,3,186,3,252,3,185,3,252,3,186,3,253,3,187,3,253,3,186,3,253,3,187,3,254,3,188,3,254,3,187,3,254,3,188,3,255,3,189,3,255,3,188,3,255,3,189,3,0,4,190,3,0,4,189,3,0,4,190,3,1,4,191,3,1,4,190,3,1,4,191,3,2,4,192,3,2,4,191,3,2,4,192,3,3,4,193,3,3,4,192,3,3,4,193,3,4,4,194,3,4,4,193,3,4,4,194,3,5,4,195,3,5,4,194,3,5,4,195,3,6,4,196,3,6,4,195,3,6,4,196,3,7,4,197,3,7,4,196,3,7,4,197,3,8,4,198,3,8,4,197,3,8,4,198,3,9,4,199,3,9,4,198,3,9,4,199,3,10,4,200,3,10,4,199,3,10,4,200,3,11,4,201,3,11,4,200,3,11,4,201,3,12,4,202,3,12,4,201,3,12,4,202,3,13,4,203,3,13,4,202,3,13,4,203,3,14,4,204,3,14,4,203,3,14,4,204,3,15,4,205,3,15,4,204,3,15,4,205,3,16,4,206,3,16,4,205,3,16,4,206,3,17,4,207,3,17,4,206,3,17,4,207,3,18,4,208,3,18,4,207,3,18,4,208,3,19,4,209,3,19,4,208,3,19,4,209,3,20,4,210,3,20,4,209,3,20,4,210,3,21,4,211,3,21,4,210,3,21,4,211,3,22,4,212,3,22,4,211,3,22,4,212,3,23,4,213,3,23,4,212,3,23,4,213,3,24,4,214,3,24,4,213,3,24,4,214,3,25,4,215,3,25,4,214,3,25,4,215,3,26,4,216,3,26,4,215,3,26,4,216,3,27,4,217,3,27,4,216,3,27,4,217,3,28,4,218,3,28,4,217,3,28,4,218,3,29,4,219,3,29,4,218,3,29,4,219,3,30,4,220,3,30,4,219,3,30,4,220,3,31,4,221,3,31,4,220,3,32,4,222,3,33,4,223,3,33,4,222,3,33,4,223,3,34,4,224,3,34,4,223,3,34,4,224,3,35,4,225,3,35,4,224,3,35,4,225,3,36,4,226,3,36,4,225,3,36,4,226,3,37,4,227,3,37,4,226,3,37,4,227,3,38,4,228,3,38,4,227,3,38,4,228,3,39,4,229,3,39,4,228,3,39,4,229,3,40,4,230,3,40,4,229,3,40,4,230,3,41,4,231,3,41,4,230,3,41,4,231,3,42,4,232,3,42,4,231,3,42,4,232,3,43,4,233,3,43,4,232,3,43,4,233,3,44,4,234,3,44,4,233,3,44,4,234,3,45,4,235,3,45,4,234,3,45,4,235,3,46,4,236,3,46,4,235,3,46,4,236,3,47,4,237,3,47,4,236,3,47,4,237,3,48,4,238,3,48,4,237,3,48,4,238,3,49,4,239,3,49,4,238,3,49,4,239,3,50,4,240,3,50,4,239,3,50,4,240,3,51,4,241,3,51,4,240,3,51,4,241,3,52,4,242,3,52,4,241,3,52,4,242,3,53,4,243,3,53,4,242,3,53,4,243,3,54,4,244,3,54,4,243,3,54,4,244,3,55,4,245,3,55,4,244,3,55,4,245,3,56,4,246,3,56,4,245,3,56,4,246,3,57,4,247,3,57,4,246,3,57,4,247,3,58,4,248,3,58,4,247,3,58,4,248,3,59,4,249,3,59,4,248,3,59,4,249,3,60,4,250,3,60,4,249,3,60,4,250,3,61,4,251,3,61,4,250,3,61,4,251,3,62,4,252,3,62,4,251,3,62,4,252,3,63,4,253,3,63,4,252,3,63,4,253,3,64,4,254,3,64,4,253,3,64,4,254,3,65,4,255,3,65,4,254,3,65,4,255,3,66,4,0,4,66,4,255,3,66,4,0,4,67,4,1,4,67,4,0,4,67,4,1,4,68,4,2,4,68,4,1,4,68,4,2,4,69,4,3,4,69,4,2,4,69,4,3,4,70,4,4,4,70,4,3,4,70,4,4,4,71,4,5,4,71,4,4,4,71,4,5,4,72,4,6,4,72,4,5,4,72,4,6,4,73,4,7,4,73,4,6,4,73,4,7,4,74,4,8,4,74,4,7,4,74,4,8,4,75,4,9,4,75,4,8,4,75,4,9,4,76,4,10,4,76,4,9,4,76,4,10,4,77,4,11,4,77,4,10,4,77,4,11,4,78,4,12,4,78,4,11,4,78,4,12,4,79,4,13,4,79,4,12,4,79,4,13,4,80,4,14,4,80,4,13,4,80,4,14,4,81,4,15,4,81,4,14,4,81,4,15,4,82,4,16,4,82,4,15,4,82,4,16,4,83,4,17,4,83,4,16,4,83,4,17,4,84,4,18,4,84,4,17,4,84,4,18,4,85,4,19,4,85,4,18,4,85,4,19,4,86,4,20,4,86,4,19,4,86,4,20,4,87,4,21,4,87,4,20,4,87,4,21,4,88,4,22,4,88,4,21,4,88,4,22,4,89,4,23,4,89,4,22,4,89,4,23,4,90,4,24,4,90,4,23,4,90,4,24,4,91,4,25,4,91,4,24,4,91,4,25,4,92,4,26,4,92,4,25,4,92,4,26,4,93,4,27,4,93,4,26,4,93,4,27,4,94,4,28,4,94,4,27,4,94,4,28,4,95,4,29,4,95,4,28,4,95,4,29,4,96,4,30,4,96,4,29,4,96,4,30,4,97,4,31,4,97,4,30,4,98,4,32,4,99,4,33,4,99,4,32,4,99,4,33,4,100,4,34,4,100,4,33,4,100,4,34,4,101,4,35,4,101,4,34,4,101,4,35,4,102,4,36,4,102,4,35,4,102,4,36,4,103,4,37,4,103,4,36,4,103,4,37,4,104,4,38,4,104,4,37,4,104,4,38,4,105,4,39,4,105,4,38,4,105,4,39,4,106,4,40,4,106,4,39,4,106,4,40,4,107,4,41,4,107,4,40,4,107,4,41,4,108,4,42,4,108,4,41,4,108,4,42,4,109,4,43,4,109,4,42,4,109,4,43,4,110,4,44,4,110,4,43,4,110,4,44,4,111,4,45,4,111,4,44,4,111,4,45,4,112,4,46,4,112,4,45,4,112,4,46,4,113,4,47,4,113,4,46,4,113,4,47,4,114,4,48,4,114,4,47,4,114,4,48,4,115,4,49,4,115,4,48,4,115,4,49,4,116,4,50,4,116,4,49,4,116,4,50,4,117,4,51,4,117,4,50,4,117,4,51,4,118,4,52,4,118,4,51,4,118,4,52,4,119,4,53,4,119,4,52,4,119,4,53,4,120,4,54,4,120,4,53,4,120,4,54,4,121,4,55,4,121,4,54,4,121,4,55,4,122,4,56,4,122,4,55,4,122,4,56,4,123,4,57,4,123,4,56,4,123,4,57,4,124,4,58,4,124,4,57,4,124,4,58,4,125,4,59,4,125,4,58,4,125,4,59,4,126,4,60,4,126,4,59,4,126,4,60,4,127,4,61,4,127,4,60,4,127,4,61,4,128,4,62,4,128,4,61,4,128,4,62,4,129,4,63,4,129,4,62,4,129,4,63,4,130,4,64,4,130,4,63,4,130,4,64,4,131,4,65,4,131,4,64,4,131,4,65,4,132,4,66,4,132,4,65,4,132,4,66,4,133,4,67,4,133,4,66,4,133,4,67,4,134,4,68,4,134,4,67,4,134,4,68,4,135,4,69,4,135,4,68,4,135,4,69,4,136,4,70,4,136,4,69,4,136,4,70,4,137,4,71,4,137,4,70,4,137,4,71,4,138,4,72,4,138,4,71,4,138,4,72,4,139,4,73,4,139,4,72,4,139,4,73,4,140,4,74,4,140,4,73,4,140,4,74,4,141,4,75,4,141,4,74,4,141,4,75,4,142,4,76,4,142,4,75,4,142,4,76,4,143,4,77,4,143,4,76,4,143,4,77,4,144,4,78,4,144,4,77,4,144,4,78,4,145,4,79,4,145,4,78,4,145,4,79,4,146,4,80,4,146,4,79,4,146,4,80,4,147,4,81,4,147,4,80,4,147,4,81,4,148,4,82,4,148,4,81,4,148,4,82,4,149,4,83,4,149,4,82,4,149,4,83,4,150,4,84,4,150,4,83,4,150,4,84,4,151,4,85,4,151,4,84,4,151,4,85,4,152,4,86,4,152,4,85,4,152,4,86,4,153,4,87,4,153,4,86,4,153,4,87,4,154,4,88,4,154,4,87,4,154,4,88,4,155,4,89,4,155,4,88,4,155,4,89,4,156,4,90,4,156,4,89,4,156,4,90,4,157,4,91,4,157,4,90,4,157,4,91,4,158,4,92,4,158,4,91,4,158,4,92,4,159,4,93,4,159,4,92,4,159,4,93,4,160,4,94,4,160,4,93,4,160,4,94,4,161,4,95,4,161,4,94,4,161,4,95,4,162,4,96,4,162,4,95,4,162,4,96,4,163,4,97,4,163,4,96,4,164,4,98,4,165,4,99,4,165,4,98,4,165,4,99,4,166,4,100,4,166,4,99,4,166,4,100,4,167,4,101,4,167,4,100,4,167,4,101,4,168,4,102,4,168,4,101,4,168,4,102,4,169,4,103,4,169,4,102,4,169,4,103,4,170,4,104,4,170,4,103,4,170,4,104,4,171,4,105,4,171,4,104,4,171,4,105,4,172,4,106,4,172,4,105,4,172,4,106,4,173,4,107,4,173,4,106,4,173,4,107,4,174,4,108,4,174,4,107,4,174,4,108,4,175,4,109,4,175,4,108,4,175,4,109,4,176,4,110,4,176,4,109,4,176,4,110,4,177,4,111,4,177,4,110,4,177,4,111,4,178,4,112,4,178,4,111,4,178,4,112,4,179,4,113,4,179,4,112,4,179,4,113,4,180,4,114,4,180,4,113,4,180,4,114,4,181,4,115,4,181,4,114,4,181,4,115,4,182,4,116,4,182,4,115,4,182,4,116,4,183,4,117,4,183,4,116,4,183,4,117,4,184,4,118,4,184,4,117,4,184,4,118,4,185,4,119,4,185,4,118,4,185,4,119,4,186,4,120,4,186,4,119,4,186,4,120,4,187,4,121,4,187,4,120,4,187,4,121,4,188,4,122,4,188,4,121,4,188,4,122,4,189,4,123,4,189,4,122,4,189,4,123,4,190,4,124,4,190,4,123,4,190,4,124,4,191,4,125,4,191,4,124,4,191,4,125,4,192,4,126,4,192,4,125,4,192,4,126,4,193,4,127,4,193,4,126,4,193,4,127,4,194,4,128,4,194,4,127,4,194,4,128,4,195,4,129,4,195,4,128,4,195,4,129,4,196,4,130,4,196,4,129,4,196,4,130,4,197,4,131,4,197,4,130,4,197,4,131,4,198,4,132,4,198,4,131,4,198,4,132,4,199,4,133,4,199,4,132,4,199,4,133,4,200,4,134,4,200,4,133,4,200,4,134,4,201,4,135,4,201,4,134,4,201,4,135,4,202,4,136,4,202,4,135,4,202,4,136,4,203,4,137,4,203,4,136,4,203,4,137,4,204,4,138,4,204,4,137,4,204,4,138,4,205,4,139,4,205,4,138,4,205,4,139,4,206,4,140,4,206,4,139,4,206,4,140,4,207,4,141,4,207,4,140,4,207,4,141,4,208,4,142,4,208,4,141,4,208,4,142,4,209,4,143,4,209,4,142,4,209,4,143,4,210,4,144,4,210,4,143,4,210,4,144,4,211,4,145,4,211,4,144,4,211,4,145,4,212,4,146,4,212,4,145,4,212,4,146,4,213,4,147,4,213,4,146,4,213,4,147,4,214,4,148,4,214,4,147,4,214,4,148,4,215,4,149,4,215,4,148,4,215,4,149,4,216,4,150,4,216,4,149,4,216,4,150,4,217,4,151,4,217,4,150,4,217,4,151,4,218,4,152,4,218,4,151,4,218,4,152,4,219,4,153,4,219,4,152,4,219,4,153,4,220,4,154,4,220,4,153,4,220,4,154,4,221,4,155,4,221,4,154,4,221,4,155,4,222,4,156,4,222,4,155,4,222,4,156,4,223,4,157,4,223,4,156,4,223,4,157,4,224,4,158,4,224,4,157,4,224,4,158,4,225,4,159,4,225,4,158,4,225,4,159,4,226,4,160,4,226,4,159,4,226,4,160,4,227,4,161,4,227,4,160,4,227,4,161,4,228,4,162,4,228,4,161,4,228,4,162,4,229,4,163,4,229,4,162,4,230,4,164,4,231,4,165,4,231,4,164,4,231,4,165,4,232,4,166,4,232,4,165,4,232,4,166,4,233,4,167,4,233,4,166,4,233,4,167,4,234,4,168,4,234,4,167,4,234,4,168,4,235,4,169,4,235,4,168,4,235,4,169,4,236,4,170,4,236,4,169,4,236,4,170,4,237,4,171,4,237,4,170,4,237,4,171,4,238,4,172,4,238,4,171,4,238,4,172,4,239,4,173,4,239,4,172,4,239,4,173,4,240,4,174,4,240,4,173,4,240,4,174,4,241,4,175,4,241,4,174,4,241,4,175,4,242,4,176,4,242,4,175,4,242,4,176,4,243,4,177,4,243,4,176,4,243,4,177,4,244,4,178,4,244,4,177,4,244,4,178,4,245,4,179,4,245,4,178,4,245,4,179,4,246,4,180,4,246,4,179,4,246,4,180,4,247,4,181,4,247,4,180,4,247,4,181,4,248,4,182,4,248,4,181,4,248,4,182,4,249,4,183,4,249,4,182,4,249,4,183,4,250,4,184,4,250,4,183,4,250,4,184,4,251,4,185,4,251,4,184,4,251,4,185,4,252,4,186,4,252,4,185,4,252,4,186,4,253,4,187,4,253,4,186,4,253,4,187,4,254,4,188,4,254,4,187,4,254,4,188,4,255,4,189,4,255,4,188,4,255,4,189,4,0,5,190,4,0,5,189,4,0,5,190,4,1,5,191,4,1,5,190,4,1,5,191,4,2,5,192,4,2,5,191,4,2,5,192,4,3,5,193,4,3,5,192,4,3,5,193,4,4,5,194,4,4,5,193,4,4,5,194,4,5,5,195,4,5,5,194,4,5,5,195,4,6,5,196,4,6,5,195,4,6,5,196,4,7,5,197,4,7,5,196,4,7,5,197,4,8,5,198,4,8,5,197,4,8,5,198,4,9,5,199,4,9,5,198,4,9,5,199,4,10,5,200,4,10,5,199,4,10,5,200,4,11,5,201,4,11,5,200,4,11,5,201,4,12,5,202,4,12,5,201,4,12,5,202,4,13,5,203,4,13,5,202,4,13,5,203,4,14,5,204,4,14,5,203,4,14,5,204,4,15,5,205,4,15,5,204,4,15,5,205,4,16,5,206,4,16,5,205,4,16,5,206,4,17,5,207,4,17,5,206,4,17,5,207,4,18,5,208,4,18,5,207,4,18,5,208,4,19,5,209,4,19,5,208,4,19,5,209,4,20,5,210,4,20,5,209,4,20,5,210,4,21,5,211,4,21,5,210,4,21,5,211,4,22,5,212,4,22,5,211,4,22,5,212,4,23,5,213,4,23,5,212,4,23,5,213,4,24,5,214,4,24,5,213,4,24,5,214,4,25,5,215,4,25,5,214,4,25,5,215,4,26,5,216,4,26,5,215,4,26,5,216,4,27,5,217,4,27,5,216,4,27,5,217,4,28,5,218,4,28,5,217,4,28,5,218,4,29,5,219,4,29,5,218,4,29,5,219,4,30,5,220,4,30,5,219,4,30,5,220,4,31,5,221,4,31,5,220,4,31,5,221,4,32,5,222,4,32,5,221,4,32,5,222,4,33,5,223,4,33,5,222,4,33,5,223,4,34,5,224,4,34,5,223,4,34,5,224,4,35,5,225,4,35,5,224,4,35,5,225,4,36,5,226,4,36,5,225,4,36,5,226,4,37,5,227,4,37,5,226,4,37,5,227,4,38,5,228,4,38,5,227,4,38,5,228,4,39,5,229,4,39,5,228,4,40,5,230,4,41,5,231,4,41,5,230,4,41,5,231,4,42,5,232,4,42,5,231,4,42,5,232,4,43,5,233,4,43,5,232,4,43,5,233,4,44,5,234,4,44,5,233,4,44,5,234,4,45,5,235,4,45,5,234,4,45,5,235,4,46,5,236,4,46,5,235,4,46,5,236,4,47,5,237,4,47,5,236,4,47,5,237,4,48,5,238,4,48,5,237,4,48,5,238,4,49,5,239,4,49,5,238,4,49,5,239,4,50,5,240,4,50,5,239,4,50,5,240,4,51,5,241,4,51,5,240,4,51,5,241,4,52,5,242,4,52,5,241,4,52,5,242,4,53,5,243,4,53,5,242,4,53,5,243,4,54,5,244,4,54,5,243,4,54,5,244,4,55,5,245,4,55,5,244,4,55,5,245,4,56,5,246,4,56,5,245,4,56,5,246,4,57,5,247,4,57,5,246,4,57,5,247,4,58,5,248,4,58,5,247,4,58,5,248,4,59,5,249,4,59,5,248,4,59,5,249,4,60,5,250,4,60,5,249,4,60,5,250,4,61,5,251,4,61,5,250,4,61,5,251,4,62,5,252,4,62,5,251,4,62,5,252,4,63,5,253,4,63,5,252,4,63,5,253,4,64,5,254,4,64,5,253,4,64,5,254,4,65,5,255,4,65,5,254,4,65,5,255,4,66,5,0,5,66,5,255,4,66,5,0,5,67,5,1,5,67,5,0,5,67,5,1,5,68,5,2,5,68,5,1,5,68,5,2,5,69,5,3,5,69,5,2,5,69,5,3,5,70,5,4,5,70,5,3,5,70,5,4,5,71,5,5,5,71,5,4,5,71,5,5,5,72,5,6,5,72,5,5,5,72,5,6,5,73,5,7,5,73,5,6,5,73,5,7,5,74,5,8,5,74,5,7,5,74,5,8,5,75,5,9,5,75,5,8,5,75,5,9,5,76,5,10,5,76,5,9,5,76,5,10,5,77,5,11,5,77,5,10,5,77,5,11,5,78,5,12,5,78,5,11,5,78,5,12,5,79,5,13,5,79,5,12,5,79,5,13,5,80,5,14,5,80,5,13,5,80,5,14,5,81,5,15,5,81,5,14,5,81,5,15,5,82,5,16,5,82,5,15,5,82,5,16,5,83,5,17,5,83,5,16,5,83,5,17,5,84,5,18,5,84,5,17,5,84,5,18,5,85,5,19,5,85,5,18,5,85,5,19,5,86,5,20,5,86,5,19,5,86,5,20,5,87,5,21,5,87,5,20,5,87,5,21,5,88,5,22,5,88,5,21,5,88,5,22,5,89,5,23,5,89,5,22,5,89,5,23,5,90,5,24,5,90,5,23,5,90,5,24,5,91,5,25,5,91,5,24,5,91,5,25,5,92,5,26,5,92,5,25,5,92,5,26,5,93,5,27,5,93,5,26,5,93,5,27,5,94,5,28,5,94,5,27,5,94,5,28,5,95,5,29,5,95,5,28,5,95,5,29,5,96,5,30,5,96,5,29,5,96,5,30,5,97,5,31,5,97,5,30,5,97,5,31,5,98,5,32,5,98,5,31,5,98,5,32,5,99,5,33,5,99,5,32,5,99,5,33,5,100,5,34,5,100,5,33,5,100,5,34,5,101,5,35,5,101,5,34,5,101,5,35,5,102,5,36,5,102,5,35,5,102,5,36,5,103,5,37,5,103,5,36,5,103,5,37,5,104,5,38,5,104,5,37,5,104,5,38,5,105,5,39,5,105,5,38,5,106,5,40,5,107,5,41,5,107,5,40,5,107,5,41,5,108,5,42,5,108,5,41,5,108,5,42,5,109,5,43,5,109,5,42,5,109,5,43,5,110,5,44,5,110,5,43,5,110,5,44,5,111,5,45,5,111,5,44,5,111,5,45,5,112,5,46,5,112,5,45,5,112,5,46,5,113,5,47,5,113,5,46,5,113,5,47,5,114,5,48,5,114,5,47,5,114,5,48,5,115,5,49,5,115,5,48,5,115,5,49,5,116,5,50,5,116,5,49,5,116,5,50,5,117,5,51,5,117,5,50,5,117,5,51,5,118,5,52,5,118,5,51,5,118,5,52,5,119,5,53,5,119,5,52,5,119,5,53,5,120,5,54,5,120,5,53,5,120,5,54,5,121,5,55,5,121,5,54,5,121,5,55,5,122,5,56,5,122,5,55,5,122,5,56,5,123,5,57,5,123,5,56,5,123,5,57,5,124,5,58,5,124,5,57,5,124,5,58,5,125,5,59,5,125,5,58,5,125,5,59,5,126,5,60,5,126,5,59,5,126,5,60,5,127,5,61,5,127,5,60,5,127,5,61,5,128,5,62,5,128,5,61,5,128,5,62,5,129,5,63,5,129,5,62,5,129,5,63,5,130,5,64,5,130,5,63,5,130,5,64,5,131,5,65,5,131,5,64,5,131,5,65,5,132,5,66,5,132,5,65,5,132,5,66,5,133,5,67,5,133,5,66,5,133,5,67,5,134,5,68,5,134,5,67,5,134,5,68,5,135,5,69,5,135,5,68,5,135,5,69,5,136,5,70,5,136,5,69,5,136,5,70,5,137,5,71,5,137,5,70,5,137,5,71,5,138,5,72,5,138,5,71,5,138,5,72,5,139,5,73,5,139,5,72,5,139,5,73,5,140,5,74,5,140,5,73,5,140,5,74,5,141,5,75,5,141,5,74,5,141,5,75,5,142,5,76,5,142,5,75,5,142,5,76,5,143,5,77,5,143,5,76,5,143,5,77,5,144,5,78,5,144,5,77,5,144,5,78,5,145,5,79,5,145,5,78,5,145,5,79,5,146,5,80,5,146,5,79,5,146,5,80,5,147,5,81,5,147,5,80,5,147,5,81,5,148,5,82,5,148,5,81,5,148,5,82,5,149,5,83,5,149,5,82,5,149,5,83,5,150,5,84,5,150,5,83,5,150,5,84,5,151,5,85,5,151,5,84,5,151,5,85,5,152,5,86,5,152,5,85,5,152,5,86,5,153,5,87,5,153,5,86,5,153,5,87,5,154,5,88,5,154,5,87,5,154,5,88,5,155,5,89,5,155,5,88,5,155,5,89,5,156,5,90,5,156,5,89,5,156,5,90,5,157,5,91,5,157,5,90,5,157,5,91,5,158,5,92,5,158,5,91,5,158,5,92,5,159,5,93,5,159,5,92,5,159,5,93,5,160,5,94,5,160,5,93,5,160,5,94,5,161,5,95,5,161,5,94,5,161,5,95,5,162,5,96,5,162,5,95,5,162,5,96,5,163,5,97,5,163,5,96,5,163,5,97,5,164,5,98,5,164,5,97,5,164,5,98,5,165,5,99,5,165,5,98,5,165,5,99,5,166,5,100,5,166,5,99,5,166,5,100,5,167,5,101,5,167,5,100,5,167,5,101,5,168,5,102,5,168,5,101,5,168,5,102,5,169,5,103,5,169,5,102,5,169,5,103,5,170,5,104,5,170,5,103,5,170,5,104,5,171,5,105,5,171,5,104,5,172,5,106,5,173,5,107,5,173,5,106,5,173,5,107,5,174,5,108,5,174,5,107,5,174,5,108,5,175,5,109,5,175,5,108,5,175,5,109,5,176,5,110,5,176,5,109,5,176,5,110,5,177,5,111,5,177,5,110,5,177,5,111,5,178,5,112,5,178,5,111,5,178,5,112,5,179,5,113,5,179,5,112,5,179,5,113,5,180,5,114,5,180,5,113,5,180,5,114,5,181,5,115,5,181,5,114,5,181,5,115,5,182,5,116,5,182,5,115,5,182,5,116,5,183,5,117,5,183,5,116,5,183,5,117,5,184,5,118,5,184,5,117,5,184,5,118,5,185,5,119,5,185,5,118,5,185,5,119,5,186,5,120,5,186,5,119,5,186,5,120,5,187,5,121,5,187,5,120,5,187,5,121,5,188,5,122,5,188,5,121,5,188,5,122,5,189,5,123,5,189,5,122,5,189,5,123,5,190,5,124,5,190,5,123,5,190,5,124,5,191,5,125,5,191,5,124,5,191,5,125,5,192,5,126,5,192,5,125,5,192,5,126,5,193,5,127,5,193,5,126,5,193,5,127,5,194,5,128,5,194,5,127,5,194,5,128,5,195,5,129,5,195,5,128,5,195,5,129,5,196,5,130,5,196,5,129,5,196,5,130,5,197,5,131,5,197,5,130,5,197,5,131,5,198,5,132,5,198,5,131,5,198,5,132,5,199,5,133,5,199,5,132,5,199,5,133,5,200,5,134,5,200,5,133,5,200,5,134,5,201,5,135,5,201,5,134,5,201,5,135,5,202,5,136,5,202,5,135,5,202,5,136,5,203,5,137,5,203,5,136,5,203,5,137,5,204,5,138,5,204,5,137,5,204,5,138,5,205,5,139,5,205,5,138,5,205,5,139,5,206,5,140,5,206,5,139,5,206,5,140,5,207,5,141,5,207,5,140,5,207,5,141,5,208,5,142,5,208,5,141,5,208,5,142,5,209,5,143,5,209,5,142,5,209,5,143,5,210,5,144,5,210,5,143,5,210,5,144,5,211,5,145,5,211,5,144,5,211,5,145,5,212,5,146,5,212,5,145,5,212,5,146,5,213,5,147,5,213,5,146,5,213,5,147,5,214,5,148,5,214,5,147,5,214,5,148,5,215,5,149,5,215,5,148,5,215,5,149,5,216,5,150,5,216,5,149,5,216,5,150,5,217,5,151,5,217,5,150,5,217,5,151,5,218,5,152,5,218,5,151,5,218,5,152,5,219,5,153,5,219,5,152,5,219,5,153,5,220,5,154,5,220,5,153,5,220,5,154,5,221,5,155,5,221,5,154,5,221,5,155,5,222,5,156,5,222,5,155,5,222,5,156,5,223,5,157,5,223,5,156,5,223,5,157,5,224,5,158,5,224,5,157,5,224,5,158,5,225,5,159,5,225,5,158,5,225,5,159,5,226,5,160,5,226,5,159,5,226,5,160,5,227,5,161,5,227,5,160,5,227,5,161,5,228,5,162,5,228,5,161,5,228,5,162,5,229,5,163,5,229,5,162,5,229,5,163,5,230,5,164,5,230,5,163,5,230,5,164,5,231,5,165,5,231,5,164,5,231,5,165,5,232,5,166,5,232,5,165,5,232,5,166,5,233,5,167,5,233,5,166,5,233,5,167,5,234,5,168,5,234,5,167,5,234,5,168,5,235,5,169,5,235,5,168,5,235,5,169,5,236,5,170,5,236,5,169,5,236,5,170,5,237,5,171,5,237,5,170,5,238,5,172,5,239,5,173,5,239,5,172,5,239,5,173,5,240,5,174,5,240,5,173,5,240,5,174,5,241,5,175,5,241,5,174,5,241,5,175,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([242,5,176,5,242,5,175,5,242,5,176,5,243,5,177,5,243,5,176,5,243,5,177,5,244,5,178,5,244,5,177,5,244,5,178,5,245,5,179,5,245,5,178,5,245,5,179,5,246,5,180,5,246,5,179,5,246,5,180,5,247,5,181,5,247,5,180,5,247,5,181,5,248,5,182,5,248,5,181,5,248,5,182,5,249,5,183,5,249,5,182,5,249,5,183,5,250,5,184,5,250,5,183,5,250,5,184,5,251,5,185,5,251,5,184,5,251,5,185,5,252,5,186,5,252,5,185,5,252,5,186,5,253,5,187,5,253,5,186,5,253,5,187,5,254,5,188,5,254,5,187,5,254,5,188,5,255,5,189,5,255,5,188,5,255,5,189,5,0,6,190,5,0,6,189,5,0,6,190,5,1,6,191,5,1,6,190,5,1,6,191,5,2,6,192,5,2,6,191,5,2,6,192,5,3,6,193,5,3,6,192,5,3,6,193,5,4,6,194,5,4,6,193,5,4,6,194,5,5,6,195,5,5,6,194,5,5,6,195,5,6,6,196,5,6,6,195,5,6,6,196,5,7,6,197,5,7,6,196,5,7,6,197,5,8,6,198,5,8,6,197,5,8,6,198,5,9,6,199,5,9,6,198,5,9,6,199,5,10,6,200,5,10,6,199,5,10,6,200,5,11,6,201,5,11,6,200,5,11,6,201,5,12,6,202,5,12,6,201,5,12,6,202,5,13,6,203,5,13,6,202,5,13,6,203,5,14,6,204,5,14,6,203,5,14,6,204,5,15,6,205,5,15,6,204,5,15,6,205,5,16,6,206,5,16,6,205,5,16,6,206,5,17,6,207,5,17,6,206,5,17,6,207,5,18,6,208,5,18,6,207,5,18,6,208,5,19,6,209,5,19,6,208,5,19,6,209,5,20,6,210,5,20,6,209,5,20,6,210,5,21,6,211,5,21,6,210,5,21,6,211,5,22,6,212,5,22,6,211,5,22,6,212,5,23,6,213,5,23,6,212,5,23,6,213,5,24,6,214,5,24,6,213,5,24,6,214,5,25,6,215,5,25,6,214,5,25,6,215,5,26,6,216,5,26,6,215,5,26,6,216,5,27,6,217,5,27,6,216,5,27,6,217,5,28,6,218,5,28,6,217,5,28,6,218,5,29,6,219,5,29,6,218,5,29,6,219,5,30,6,220,5,30,6,219,5,30,6,220,5,31,6,221,5,31,6,220,5,31,6,221,5,32,6,222,5,32,6,221,5,32,6,222,5,33,6,223,5,33,6,222,5,33,6,223,5,34,6,224,5,34,6,223,5,34,6,224,5,35,6,225,5,35,6,224,5,35,6,225,5,36,6,226,5,36,6,225,5,36,6,226,5,37,6,227,5,37,6,226,5,37,6,227,5,38,6,228,5,38,6,227,5,38,6,228,5,39,6,229,5,39,6,228,5,39,6,229,5,40,6,230,5,40,6,229,5,40,6,230,5,41,6,231,5,41,6,230,5,41,6,231,5,42,6,232,5,42,6,231,5,42,6,232,5,43,6,233,5,43,6,232,5,43,6,233,5,44,6,234,5,44,6,233,5,44,6,234,5,45,6,235,5,45,6,234,5,45,6,235,5,46,6,236,5,46,6,235,5,46,6,236,5,47,6,237,5,47,6,236,5,48,6,238,5,49,6,239,5,49,6,238,5,49,6,239,5,50,6,240,5,50,6,239,5,50,6,240,5,51,6,241,5,51,6,240,5,51,6,241,5,52,6,242,5,52,6,241,5,52,6,242,5,53,6,243,5,53,6,242,5,53,6,243,5,54,6,244,5,54,6,243,5,54,6,244,5,55,6,245,5,55,6,244,5,55,6,245,5,56,6,246,5,56,6,245,5,56,6,246,5,57,6,247,5,57,6,246,5,57,6,247,5,58,6,248,5,58,6,247,5,58,6,248,5,59,6,249,5,59,6,248,5,59,6,249,5,60,6,250,5,60,6,249,5,60,6,250,5,61,6,251,5,61,6,250,5,61,6,251,5,62,6,252,5,62,6,251,5,62,6,252,5,63,6,253,5,63,6,252,5,63,6,253,5,64,6,254,5,64,6,253,5,64,6,254,5,65,6,255,5,65,6,254,5,65,6,255,5,66,6,0,6,66,6,255,5,66,6,0,6,67,6,1,6,67,6,0,6,67,6,1,6,68,6,2,6,68,6,1,6,68,6,2,6,69,6,3,6,69,6,2,6,69,6,3,6,70,6,4,6,70,6,3,6,70,6,4,6,71,6,5,6,71,6,4,6,71,6,5,6,72,6,6,6,72,6,5,6,72,6,6,6,73,6,7,6,73,6,6,6,73,6,7,6,74,6,8,6,74,6,7,6,74,6,8,6,75,6,9,6,75,6,8,6,75,6,9,6,76,6,10,6,76,6,9,6,76,6,10,6,77,6,11,6,77,6,10,6,77,6,11,6,78,6,12,6,78,6,11,6,78,6,12,6,79,6,13,6,79,6,12,6,79,6,13,6,80,6,14,6,80,6,13,6,80,6,14,6,81,6,15,6,81,6,14,6,81,6,15,6,82,6,16,6,82,6,15,6,82,6,16,6,83,6,17,6,83,6,16,6,83,6,17,6,84,6,18,6,84,6,17,6,84,6,18,6,85,6,19,6,85,6,18,6,85,6,19,6,86,6,20,6,86,6,19,6,86,6,20,6,87,6,21,6,87,6,20,6,87,6,21,6,88,6,22,6,88,6,21,6,88,6,22,6,89,6,23,6,89,6,22,6,89,6,23,6,90,6,24,6,90,6,23,6,90,6,24,6,91,6,25,6,91,6,24,6,91,6,25,6,92,6,26,6,92,6,25,6,92,6,26,6,93,6,27,6,93,6,26,6,93,6,27,6,94,6,28,6,94,6,27,6,94,6,28,6,95,6,29,6,95,6,28,6,95,6,29,6,96,6,30,6,96,6,29,6,96,6,30,6,97,6,31,6,97,6,30,6,97,6,31,6,98,6,32,6,98,6,31,6,98,6,32,6,99,6,33,6,99,6,32,6,99,6,33,6,100,6,34,6,100,6,33,6,100,6,34,6,101,6,35,6,101,6,34,6,101,6,35,6,102,6,36,6,102,6,35,6,102,6,36,6,103,6,37,6,103,6,36,6,103,6,37,6,104,6,38,6,104,6,37,6,104,6,38,6,105,6,39,6,105,6,38,6,105,6,39,6,106,6,40,6,106,6,39,6,106,6,40,6,107,6,41,6,107,6,40,6,107,6,41,6,108,6,42,6,108,6,41,6,108,6,42,6,109,6,43,6,109,6,42,6,109,6,43,6,110,6,44,6,110,6,43,6,110,6,44,6,111,6,45,6,111,6,44,6,111,6,45,6,112,6,46,6,112,6,45,6,112,6,46,6,113,6,47,6,113,6,46,6,114,6,48,6,115,6,49,6,115,6,48,6,115,6,49,6,116,6,50,6,116,6,49,6,116,6,50,6,117,6,51,6,117,6,50,6,117,6,51,6,118,6,52,6,118,6,51,6,118,6,52,6,119,6,53,6,119,6,52,6,119,6,53,6,120,6,54,6,120,6,53,6,120,6,54,6,121,6,55,6,121,6,54,6,121,6,55,6,122,6,56,6,122,6,55,6,122,6,56,6,123,6,57,6,123,6,56,6,123,6,57,6,124,6,58,6,124,6,57,6,124,6,58,6,125,6,59,6,125,6,58,6,125,6,59,6,126,6,60,6,126,6,59,6,126,6,60,6,127,6,61,6,127,6,60,6,127,6,61,6,128,6,62,6,128,6,61,6,128,6,62,6,129,6,63,6,129,6,62,6,129,6,63,6,130,6,64,6,130,6,63,6,130,6,64,6,131,6,65,6,131,6,64,6,131,6,65,6,132,6,66,6,132,6,65,6,132,6,66,6,133,6,67,6,133,6,66,6,133,6,67,6,134,6,68,6,134,6,67,6,134,6,68,6,135,6,69,6,135,6,68,6,135,6,69,6,136,6,70,6,136,6,69,6,136,6,70,6,137,6,71,6,137,6,70,6,137,6,71,6,138,6,72,6,138,6,71,6,138,6,72,6,139,6,73,6,139,6,72,6,139,6,73,6,140,6,74,6,140,6,73,6,140,6,74,6,141,6,75,6,141,6,74,6,141,6,75,6,142,6,76,6,142,6,75,6,142,6,76,6,143,6,77,6,143,6,76,6,143,6,77,6,144,6,78,6,144,6,77,6,144,6,78,6,145,6,79,6,145,6,78,6,145,6,79,6,146,6,80,6,146,6,79,6,146,6,80,6,147,6,81,6,147,6,80,6,147,6,81,6,148,6,82,6,148,6,81,6,148,6,82,6,149,6,83,6,149,6,82,6,149,6,83,6,150,6,84,6,150,6,83,6,150,6,84,6,151,6,85,6,151,6,84,6,151,6,85,6,152,6,86,6,152,6,85,6,152,6,86,6,153,6,87,6,153,6,86,6,153,6,87,6,154,6,88,6,154,6,87,6,154,6,88,6,155,6,89,6,155,6,88,6,155,6,89,6,156,6,90,6,156,6,89,6,156,6,90,6,157,6,91,6,157,6,90,6,157,6,91,6,158,6,92,6,158,6,91,6,158,6,92,6,159,6,93,6,159,6,92,6,159,6,93,6,160,6,94,6,160,6,93,6,160,6,94,6,161,6,95,6,161,6,94,6,161,6,95,6,162,6,96,6,162,6,95,6,162,6,96,6,163,6,97,6,163,6,96,6,163,6,97,6,164,6,98,6,164,6,97,6,164,6,98,6,165,6,99,6,165,6,98,6,165,6,99,6,166,6,100,6,166,6,99,6,166,6,100,6,167,6,101,6,167,6,100,6,167,6,101,6,168,6,102,6,168,6,101,6,168,6,102,6,169,6,103,6,169,6,102,6,169,6,103,6,170,6,104,6,170,6,103,6,170,6,104,6,171,6,105,6,171,6,104,6,171,6,105,6,172,6,106,6,172,6,105,6,172,6,106,6,173,6,107,6,173,6,106,6,173,6,107,6,174,6,108,6,174,6,107,6,174,6,108,6,175,6,109,6,175,6,108,6,175,6,109,6,176,6,110,6,176,6,109,6,176,6,110,6,177,6,111,6,177,6,110,6,177,6,111,6,178,6,112,6,178,6,111,6,178,6,112,6,179,6,113,6,179,6,112,6,180,6,114,6,181,6,115,6,181,6,114,6,181,6,115,6,182,6,116,6,182,6,115,6,182,6,116,6,183,6,117,6,183,6,116,6,183,6,117,6,184,6,118,6,184,6,117,6,184,6,118,6,185,6,119,6,185,6,118,6,185,6,119,6,186,6,120,6,186,6,119,6,186,6,120,6,187,6,121,6,187,6,120,6,187,6,121,6,188,6,122,6,188,6,121,6,188,6,122,6,189,6,123,6,189,6,122,6,189,6,123,6,190,6,124,6,190,6,123,6,190,6,124,6,191,6,125,6,191,6,124,6,191,6,125,6,192,6,126,6,192,6,125,6,192,6,126,6,193,6,127,6,193,6,126,6,193,6,127,6,194,6,128,6,194,6,127,6,194,6,128,6,195,6,129,6,195,6,128,6,195,6,129,6,196,6,130,6,196,6,129,6,196,6,130,6,197,6,131,6,197,6,130,6,197,6,131,6,198,6,132,6,198,6,131,6,198,6,132,6,199,6,133,6,199,6,132,6,199,6,133,6,200,6,134,6,200,6,133,6,200,6,134,6,201,6,135,6,201,6,134,6,201,6,135,6,202,6,136,6,202,6,135,6,202,6,136,6,203,6,137,6,203,6,136,6,203,6,137,6,204,6,138,6,204,6,137,6,204,6,138,6,205,6,139,6,205,6,138,6,205,6,139,6,206,6,140,6,206,6,139,6,206,6,140,6,207,6,141,6,207,6,140,6,207,6,141,6,208,6,142,6,208,6,141,6,208,6,142,6,209,6,143,6,209,6,142,6,209,6,143,6,210,6,144,6,210,6,143,6,210,6,144,6,211,6,145,6,211,6,144,6,211,6,145,6,212,6,146,6,212,6,145,6,212,6,146,6,213,6,147,6,213,6,146,6,213,6,147,6,214,6,148,6,214,6,147,6,214,6,148,6,215,6,149,6,215,6,148,6,215,6,149,6,216,6,150,6,216,6,149,6,216,6,150,6,217,6,151,6,217,6,150,6,217,6,151,6,218,6,152,6,218,6,151,6,218,6,152,6,219,6,153,6,219,6,152,6,219,6,153,6,220,6,154,6,220,6,153,6,220,6,154,6,221,6,155,6,221,6,154,6,221,6,155,6,222,6,156,6,222,6,155,6,222,6,156,6,223,6,157,6,223,6,156,6,223,6,157,6,224,6,158,6,224,6,157,6,224,6,158,6,225,6,159,6,225,6,158,6,225,6,159,6,226,6,160,6,226,6,159,6,226,6,160,6,227,6,161,6,227,6,160,6,227,6,161,6,228,6,162,6,228,6,161,6,228,6,162,6,229,6,163,6,229,6,162,6,229,6,163,6,230,6,164,6,230,6,163,6,230,6,164,6,231,6,165,6,231,6,164,6,231,6,165,6,232,6,166,6,232,6,165,6,232,6,166,6,233,6,167,6,233,6,166,6,233,6,167,6,234,6,168,6,234,6,167,6,234,6,168,6,235,6,169,6,235,6,168,6,235,6,169,6,236,6,170,6,236,6,169,6,236,6,170,6,237,6,171,6,237,6,170,6,237,6,171,6,238,6,172,6,238,6,171,6,238,6,172,6,239,6,173,6,239,6,172,6,239,6,173,6,240,6,174,6,240,6,173,6,240,6,174,6,241,6,175,6,241,6,174,6,241,6,175,6,242,6,176,6,242,6,175,6,242,6,176,6,243,6,177,6,243,6,176,6,243,6,177,6,244,6,178,6,244,6,177,6,244,6,178,6,245,6,179,6,245,6,178,6,246,6,180,6,247,6,181,6,247,6,180,6,247,6,181,6,248,6,182,6,248,6,181,6,248,6,182,6,249,6,183,6,249,6,182,6,249,6,183,6,250,6,184,6,250,6,183,6,250,6,184,6,251,6,185,6,251,6,184,6,251,6,185,6,252,6,186,6,252,6,185,6,252,6,186,6,253,6,187,6,253,6,186,6,253,6,187,6,254,6,188,6,254,6,187,6,254,6,188,6,255,6,189,6,255,6,188,6,255,6,189,6,0,7,190,6,0,7,189,6,0,7,190,6,1,7,191,6,1,7,190,6,1,7,191,6,2,7,192,6,2,7,191,6,2,7,192,6,3,7,193,6,3,7,192,6,3,7,193,6,4,7,194,6,4,7,193,6,4,7,194,6,5,7,195,6,5,7,194,6,5,7,195,6,6,7,196,6,6,7,195,6,6,7,196,6,7,7,197,6,7,7,196,6,7,7,197,6,8,7,198,6,8,7,197,6,8,7,198,6,9,7,199,6,9,7,198,6,9,7,199,6,10,7,200,6,10,7,199,6,10,7,200,6,11,7,201,6,11,7,200,6,11,7,201,6,12,7,202,6,12,7,201,6,12,7,202,6,13,7,203,6,13,7,202,6,13,7,203,6,14,7,204,6,14,7,203,6,14,7,204,6,15,7,205,6,15,7,204,6,15,7,205,6,16,7,206,6,16,7,205,6,16,7,206,6,17,7,207,6,17,7,206,6,17,7,207,6,18,7,208,6,18,7,207,6,18,7,208,6,19,7,209,6,19,7,208,6,19,7,209,6,20,7,210,6,20,7,209,6,20,7,210,6,21,7,211,6,21,7,210,6,21,7,211,6,22,7,212,6,22,7,211,6,22,7,212,6,23,7,213,6,23,7,212,6,23,7,213,6,24,7,214,6,24,7,213,6,24,7,214,6,25,7,215,6,25,7,214,6,25,7,215,6,26,7,216,6,26,7,215,6,26,7,216,6,27,7,217,6,27,7,216,6,27,7,217,6,28,7,218,6,28,7,217,6,28,7,218,6,29,7,219,6,29,7,218,6,29,7,219,6,30,7,220,6,30,7,219,6,30,7,220,6,31,7,221,6,31,7,220,6,31,7,221,6,32,7,222,6,32,7,221,6,32,7,222,6,33,7,223,6,33,7,222,6,33,7,223,6,34,7,224,6,34,7,223,6,34,7,224,6,35,7,225,6,35,7,224,6,35,7,225,6,36,7,226,6,36,7,225,6,36,7,226,6,37,7,227,6,37,7,226,6,37,7,227,6,38,7,228,6,38,7,227,6,38,7,228,6,39,7,229,6,39,7,228,6,39,7,229,6,40,7,230,6,40,7,229,6,40,7,230,6,41,7,231,6,41,7,230,6,41,7,231,6,42,7,232,6,42,7,231,6,42,7,232,6,43,7,233,6,43,7,232,6,43,7,233,6,44,7,234,6,44,7,233,6,44,7,234,6,45,7,235,6,45,7,234,6,45,7,235,6,46,7,236,6,46,7,235,6,46,7,236,6,47,7,237,6,47,7,236,6,47,7,237,6,48,7,238,6,48,7,237,6,48,7,238,6,49,7,239,6,49,7,238,6,49,7,239,6,50,7,240,6,50,7,239,6,50,7,240,6,51,7,241,6,51,7,240,6,51,7,241,6,52,7,242,6,52,7,241,6,52,7,242,6,53,7,243,6,53,7,242,6,53,7,243,6,54,7,244,6,54,7,243,6,54,7,244,6,55,7,245,6,55,7,244,6,56,7,246,6,57,7,247,6,57,7,246,6,57,7,247,6,58,7,248,6,58,7,247,6,58,7,248,6,59,7,249,6,59,7,248,6,59,7,249,6,60,7,250,6,60,7,249,6,60,7,250,6,61,7,251,6,61,7,250,6,61,7,251,6,62,7,252,6,62,7,251,6,62,7,252,6,63,7,253,6,63,7,252,6,63,7,253,6,64,7,254,6,64,7,253,6,64,7,254,6,65,7,255,6,65,7,254,6,65,7,255,6,66,7,0,7,66,7,255,6,66,7,0,7,67,7,1,7,67,7,0,7,67,7,1,7,68,7,2,7,68,7,1,7,68,7,2,7,69,7,3,7,69,7,2,7,69,7,3,7,70,7,4,7,70,7,3,7,70,7,4,7,71,7,5,7,71,7,4,7,71,7,5,7,72,7,6,7,72,7,5,7,72,7,6,7,73,7,7,7,73,7,6,7,73,7,7,7,74,7,8,7,74,7,7,7,74,7,8,7,75,7,9,7,75,7,8,7,75,7,9,7,76,7,10,7,76,7,9,7,76,7,10,7,77,7,11,7,77,7,10,7,77,7,11,7,78,7,12,7,78,7,11,7,78,7,12,7,79,7,13,7,79,7,12,7,79,7,13,7,80,7,14,7,80,7,13,7,80,7,14,7,81,7,15,7,81,7,14,7,81,7,15,7,82,7,16,7,82,7,15,7,82,7,16,7,83,7,17,7,83,7,16,7,83,7,17,7,84,7,18,7,84,7,17,7,84,7,18,7,85,7,19,7,85,7,18,7,85,7,19,7,86,7,20,7,86,7,19,7,86,7,20,7,87,7,21,7,87,7,20,7,87,7,21,7,88,7,22,7,88,7,21,7,88,7,22,7,89,7,23,7,89,7,22,7,89,7,23,7,90,7,24,7,90,7,23,7,90,7,24,7,91,7,25,7,91,7,24,7,91,7,25,7,92,7,26,7,92,7,25,7,92,7,26,7,93,7,27,7,93,7,26,7,93,7,27,7,94,7,28,7,94,7,27,7,94,7,28,7,95,7,29,7,95,7,28,7,95,7,29,7,96,7,30,7,96,7,29,7,96,7,30,7,97,7,31,7,97,7,30,7,97,7,31,7,98,7,32,7,98,7,31,7,98,7,32,7,99,7,33,7,99,7,32,7,99,7,33,7,100,7,34,7,100,7,33,7,100,7,34,7,101,7,35,7,101,7,34,7,101,7,35,7,102,7,36,7,102,7,35,7,102,7,36,7,103,7,37,7,103,7,36,7,103,7,37,7,104,7,38,7,104,7,37,7,104,7,38,7,105,7,39,7,105,7,38,7,105,7,39,7,106,7,40,7,106,7,39,7,106,7,40,7,107,7,41,7,107,7,40,7,107,7,41,7,108,7,42,7,108,7,41,7,108,7,42,7,109,7,43,7,109,7,42,7,109,7,43,7,110,7,44,7,110,7,43,7,110,7,44,7,111,7,45,7,111,7,44,7,111,7,45,7,112,7,46,7,112,7,45,7,112,7,46,7,113,7,47,7,113,7,46,7,113,7,47,7,114,7,48,7,114,7,47,7,114,7,48,7,115,7,49,7,115,7,48,7,115,7,49,7,116,7,50,7,116,7,49,7,116,7,50,7,117,7,51,7,117,7,50,7,117,7,51,7,118,7,52,7,118,7,51,7,118,7,52,7,119,7,53,7,119,7,52,7,119,7,53,7,120,7,54,7,120,7,53,7,120,7,54,7,121,7,55,7,121,7,54,7,122,7,56,7,123,7,57,7,123,7,56,7,123,7,57,7,124,7,58,7,124,7,57,7,124,7,58,7,125,7,59,7,125,7,58,7,125,7,59,7,126,7,60,7,126,7,59,7,126,7,60,7,127,7,61,7,127,7,60,7,127,7,61,7,128,7,62,7,128,7,61,7,128,7,62,7,129,7,63,7,129,7,62,7,129,7,63,7,130,7,64,7,130,7,63,7,130,7,64,7,131,7,65,7,131,7,64,7,131,7,65,7,132,7,66,7,132,7,65,7,132,7,66,7,133,7,67,7,133,7,66,7,133,7,67,7,134,7,68,7,134,7,67,7,134,7,68,7,135,7,69,7,135,7,68,7,135,7,69,7,136,7,70,7,136,7,69,7,136,7,70,7,137,7,71,7,137,7,70,7,137,7,71,7,138,7,72,7,138,7,71,7,138,7,72,7,139,7,73,7,139,7,72,7,139,7,73,7,140,7,74,7,140,7,73,7,140,7,74,7,141,7,75,7,141,7,74,7,141,7,75,7,142,7,76,7,142,7,75,7,142,7,76,7,143,7,77,7,143,7,76,7,143,7,77,7,144,7,78,7,144,7,77,7,144,7,78,7,145,7,79,7,145,7,78,7,145,7,79,7,146,7,80,7,146,7,79,7,146,7,80,7,147,7,81,7,147,7,80,7,147,7,81,7,148,7,82,7,148,7,81,7,148,7,82,7,149,7,83,7,149,7,82,7,149,7,83,7,150,7,84,7,150,7,83,7,150,7,84,7,151,7,85,7,151,7,84,7,151,7,85,7,152,7,86,7,152,7,85,7,152,7,86,7,153,7,87,7,153,7,86,7,153,7,87,7,154,7,88,7,154,7,87,7,154,7,88,7,155,7,89,7,155,7,88,7,155,7,89,7,156,7,90,7,156,7,89,7,156,7,90,7,157,7,91,7,157,7,90,7,157,7,91,7,158,7,92,7,158,7,91,7,158,7,92,7,159,7,93,7,159,7,92,7,159,7,93,7,160,7,94,7,160,7,93,7,160,7,94,7,161,7,95,7,161,7,94,7,161,7,95,7,162,7,96,7,162,7,95,7,162,7,96,7,163,7,97,7,163,7,96,7,163,7,97,7,164,7,98,7,164,7,97,7,164,7,98,7,165,7,99,7,165,7,98,7,165,7,99,7,166,7,100,7,166,7,99,7,166,7,100,7,167,7,101,7,167,7,100,7,167,7,101,7,168,7,102,7,168,7,101,7,168,7,102,7,169,7,103,7,169,7,102,7,169,7,103,7,170,7,104,7,170,7,103,7,170,7,104,7,171,7,105,7,171,7,104,7,171,7,105,7,172,7,106,7,172,7,105,7,172,7,106,7,173,7,107,7,173,7,106,7,173,7,107,7,174,7,108,7,174,7,107,7,174,7,108,7,175,7,109,7,175,7,108,7,175,7,109,7,176,7,110,7,176,7,109,7,176,7,110,7,177,7,111,7,177,7,110,7,177,7,111,7,178,7,112,7,178,7,111,7,178,7,112,7,179,7,113,7,179,7,112,7,179,7,113,7,180,7,114,7,180,7,113,7,180,7,114,7,181,7,115,7,181,7,114,7,181,7,115,7,182,7,116,7,182,7,115,7,182,7,116,7,183,7,117,7,183,7,116,7,183,7,117,7,184,7,118,7,184,7,117,7,184,7,118,7,185,7,119,7,185,7,118,7,185,7,119,7,186,7,120,7,186,7,119,7,186,7,120,7,187,7,121,7,187,7,120,7,0,0,0,0,0,0,122,64,199,139,73,66,250,205,19,182,0,0,122,64,114,121,82,66,0,0,122,64,0,0,250,64,223,143,73,66,17,209,19,182,0,0,250,64,142,117,79,66,0,0,122,64,52,128,59,65,182,68,71,66,138,34,18,182,52,128,59,65,148,199,76,66,0,0,122,64,0,0,122,65,72,97,74,66,168,106,20,182,0,0,122,65,63,215,72,66,0,0,122,64,26,64,156,65,184,158,73,66,228,219,19,182,26,64,156,65,87,108,74,66,0,0,122,64,0,128,187,65,33,223,75,66,176,130,21,182,0,128,187,65,159,205,74,66,0,0,122,64,26,192,218,65,160,218,81,66,188,229,25,182,26,192,218,65,126,221,76,66,0,0,122,64,0,0,250,65,29,154,84,66,165,233,27,182,0,0,250,65,136,180,77,66,0,0,122,64,13,160,12,66,119,62,84,66,121,166,27,182,13,160,12,66,134,201,80,66,0,0,122,64,0,64,28,66,116,181,86,66,77,117,29,182,0,64,28,66,199,233,87,66,0,0,122,64,13,224,43,66,140,57,89,66,147,77,31,182,13,224,43,66,32,146,87,66,0,0,122,64,0,128,59,66,207,183,90,66,243,101,32,182,0,128,59,66,112,78,85,66,0,0,122,64,13,32,75,66,116,70,93,66,244,69,34,182,13,32,75,66,67,92,86,66,0,0,122,64,0,192,90,66,233,166,99,66,56,243,38,182,0,192,90,66,136,69,94,66,0,0,122,64,13,96,106,66,123,212,101,66,26,140,40,182,13,96,106,66,68,186,92,66,0,0,122,64,0,0,122,66,193,40,98,66,216,218,37,182,0,0,122,66,163,193,86,66,0,0,122,64,7,208,132,66,176,131,95,66,89,234,35,182,7,208,132,66,102,55,84,66,0,0,122,64,0,160,140,66,75,153,86,66,131,96,29,182,0,160,140,66,127,170,78,66,0,0,122,64,7,112,148,66,44,148,78,66,222,126,23,182,7,112,148,66,160,201,77,66,0,0,122,64,0,64,156,66,12,66,79,66,88,254,23,182,0,64,156,66,30,214,79,66,0,0,122,64,7,16,164,66,10,87,77,66,65,150,22,182,7,16,164,66,206,42,76,66,0,0,122,64,0,224,171,66,2,188,72,66,195,53,19,182,0,224,171,66,85,1,71,66,0,0,122,64,7,176,179,66,227,54,68,66,19,229,15,182,7,176,179,66,125,238,66,66,0,0,122,64,0,128,187,66,83,150,61,66,233,8,11,182,0,128,187,66,54,124,59,66,0,0,122,64,7,80,195,66,162,52,55,66,201,90,6,182,7,80,195,66,223,143,57,66,0,0,122,64,66,32,203,66,85,240,52,66,61,177,4,182,66,32,203,66,71,178,53,66,0,0,122,64,33,240,210,66,180,153,50,66,75,250,2,182,33,240,210,66,114,185,54,66,0,0,122,64,0,192,218,66,119,109,49,66,12,30,2,182,0,192,218,66,146,75,53,66,0,0,122,64,223,143,226,66,116,117,48,66,29,104,1,182,223,143,226,66,222,113,46,66,0,0,122,64,66,96,234,66,100,157,45,66,84,164,254,181,66,96,234,66,51,132,40,66,0,0,122,64,33,48,242,66,116,164,36,66,179,123,241,181,33,48,242,66,24,230,33,66,0,0,122,64,0,0,250,66,174,199,32,66,96,209,235,181,0,0,250,66,36,87,29,66,0,0,122,64,240,231,0,67,123,67,30,66,123,32,232,181,240,231,0,67,251,75,24,66,0,0,122,64,33,208,4,67,108,9,25,66,218,117,224,181,33,208,4,67,107,26,19,66,0,0,122,64,16,184,8,67,28,188,17,66,74,192,213,181,16,184,8,67,105,175,11,66,0,0,122,64,0,160,12,67,81,154,8,66,48,91,200,181,0,160,12,67,11,117,1,66,0,0,122,64,240,135,16,67,192,108,252,65,251,29,185,181,240,135,16,67,193,185,253,65,0,0,122,64,33,112,20,67,171,62,239,65,189,115,175,181,33,112,20,67,211,205,244,65,0,0,122,64,16,88,24,67,218,44,244,65,99,17,179,181,16,88,24,67,195,211,252,65,0,0,122,64,0,64,28,67,210,0,249,65,116,155,182,181,0,64,28,67,232,153,2,66,0,0,122,64,240,39,32,67,73,46,255,65,113,35,187,181,240,39,32,67,157,64,5,66,0,0,122,64,33,16,36,67,140,74,252,65,230,4,185,181,33,16,36,67,74,76,2,66,0,0,122,64,16,248,39,67,207,119,244,65,5,72,179,181,16,248,39,67,123,3,252,65,0,0,122,64,0,224,43,67,34,108,240,65,172,80,176,181,0,224,43,67,62,121,245,65,0,0,122,64,240,199,47,67,51,68,234,65,39,205,171,181,240,199,47,67,185,252,238,65,0,0,122,64,33,176,51,67,30,167,226,65,114,55,166,181,33,176,51,67,199,58,229,65,0,0,122,64,16,152,55,67,64,36,216,65,42,130,158,181,16,152,55,67,141,168,217,65,0,0,122,64,0,128,59,67,206,25,198,65,83,71,145,181,0,128,59,67,93,126,203,65,0,0,122,64,240,103,63,67,149,229,181,65,29,101,133,181,240,103,63,67,134,73,193,65,0,0,122,64,33,80,67,67,150,50,173,65,218,7,126,181,33,80,67,67,122,199,191,65,0,0,122,64,16,56,71,67,129,166,170,65,141,75,122,181,16,56,71,67,95,41,190,65,0,0,122,64,0,32,75,67,131,81,167,65,96,104,117,181,0,32,75,67,140,57,179,65,0,0,122,64,240,7,79,67,102,230,155,65,9,169,100,181,240,7,79,67,5,69,177,65,0,0,122,64,33,240,82,67,148,7,152,65,212,251,94,181,33,240,82,67,87,236,172,65,0,0,122,64,16,216,86,67,150,67,147,65,113,254,87,181,16,216,86,67,197,143,174,65,0,0,122,64,0,192,90,67,180,72,150,65,80,108,92,181,0,192,90,67,209,34,168,65,0,0,122,64,240,167,94,67,150,50,145,65,153,246,84,181,240,167,94,67,34,253,154,65,0,0,122,64,33,144,98,67,222,130,141,65,62,142,79,181,33,144,98,67,156,179,145,65,0,0,122,64,16,120,102,67,66,190,134,65,52,161,69,181,16,120,102,67,118,207,137,65,0,0,122,64,0,96,106,67,56,248,130,65,71,24,64,181,0,96,106,67,180,89,130,65,0,0,122,64,240,71,110,67,227,54,101,65,105,24,40,181,240,71,110,67,147,58,103,65,0,0,122,64,33,48,114,67,200,7,71,65,170,245,17,181,33,48,114,67,159,60,90,65,0,0,122,64,16,24,118,67,156,51,70,65,39,90,17,181,16,24,118,67,174,216,83,65,0,0,122,64,0,0,122,67,17,199,62,65,81,232,11,181,0,0,122,67,251,92,75,65,0,0,122,64,0,0,122,64,113,108,67,66,0,0,122,192,0,0,250,64,20,110,69,66,0,0,122,192,52,128,59,65,29,218,71,66,0,0,122,192,0,0,122,65,77,115,72,66,0,0,122,192,26,64,156,65,177,127,78,66,0,0,122,192,0,128,187,65,184,175,80,66,0,0,122,192,26,192,218,65,187,120,83,66,0,0,122,192,0,0,250,65,121,233,87,66,0,0,122,192,13,160,12,66,70,148,87,66,0,0,122,192,0,64,28,66,149,101,91,66,0,0,122,192,13,224,43,66,131,175,96,66,0,0,122,192,0,128,59,66,76,247,97,66,0,0,122,192,13,32,75,66,166,74,98,66,0,0,122,192,0,192,90,66,36,232,103,66,0,0,122,192,13,96,106,66,51,115,106,66,0,0,122,192,0,0,122,66,91,2,104,66,0,0,122,192,7,208,132,66,251,75,102,66,0,0,122,192,0,160,140,66,199,250,93,66,0,0,122,192,7,112,148,66,58,227,86,66,0,0,122,192,0,64,156,66,152,238,84,66,0,0,122,192,7,16,164,66,25,51,82,66,0,0,122,192,0,224,171,66,159,188,76,66,0,0,122,192,7,176,179,66,21,157,70,66,0,0,122,192,0,128,187,66,74,187,62,66,0,0,122,192,7,80,195,66,131,64,55,66,0,0,122,192,66,32,203,66,240,214,50,66,0,0,122,192,33,240,210,66,112,95,52,66,0,0,122,192,0,192,218,66,149,84,51,66,0,0,122,192,223,143,226,66,44,20,50,66,0,0,122,192,66,96,234,66,168,245,46,66,0,0,122,192,33,48,242,66,54,60,41,66,0,0,122,192,0,0,250,66,138,176,33,66,0,0,122,192,240,231,0,67,125,191,29,66,0,0,122,192,33,208,4,67,205,76,31,66,0,0,122,192,16,184,8,67,13,49,25,66,0,0,122,192,0,160,12,67,135,214,12,66,0,0,122,192,240,135,16,67,220,70,0,66,0,0,122,192,33,112,20,67,121,105,249,65,0,0,122,192,16,88,24,67,117,211,0,66,0,0,122,192,0,64,28,67,183,209,251,65,0,0,122,192,240,39,32,67,153,187,253,65,0,0,122,192,33,16,36,67,52,34,254,65,0,0,122,192,16,248,39,67,195,100,249,65,0,0,122,192,0,224,43,67,70,54,237,65,0,0,122,192,240,199,47,67,168,70,230,65,0,0,122,192,33,176,51,67,240,133,226,65,0,0,122,192,16,152,55,67,25,243,212,65,0,0,122,192,0,128,59,67,241,227,197,65,0,0,122,192,240,103,63,67,97,84,183,65,0,0,122,192,33,80,67,67,54,43,172,65,0,0,122,192,16,56,71,67,135,39,158,65,0,0,122,192,0,32,75,67,103,213,151,65,0,0,122,192,240,7,79,67,29,184,150,65,0,0,122,192,33,240,82,67,160,9,151,65,0,0,122,192,16,216,86,67,151,127,150,65,0,0,122,192,0,192,90,67,218,27,148,65,0,0,122,192,240,167,94,67,80,124,148,65,0,0,122,192,33,144,98,67,219,10,140,65,0,0,122,192,16,120,102,67,211,222,139,65,0,0,122,192,0,96,106,67,229,97,133,65,0,0,122,192,240,71,110,67,26,192,109,65,0,0,122,192,33,48,114,67,124,97,79,65,0,0,122,192,16,24,118,67,100,204,77,65,0,0,122,192,0,0,122,67,47,110,57,65,0,0,122,192,0,0,122,64,215,227,66,66,0,0,250,192,0,0,250,64,45,131,68,66,0,0,250,192,52,128,59,65,131,0,72,66,0,0,250,192,0,0,122,65,192,91,74,66,0,0,250,192,26,64,156,65,25,51,78,66,0,0,250,192,0,128,187,65,237,205,83,66,0,0,250,192,26,192,218,65,207,119,84,66,0,0,250,192,0,0,250,65,214,69,88,66,0,0,250,192,13,160,12,66,242,240,92,66,0,0,250,192,0,64,28,66,174,24,101,66,0,0,250,192,13,224,43,66,54,188,101,66,0,0,250,192,0,128,59,66,98,16,103,66,0,0,250,192,13,32,75,66,240,22,101,66,0,0,250,192,0,192,90,66,14,15,104,66,0,0,250,192,13,96,106,66,86,14,107,66,0,0,250,192,0,0,122,66,205,140,106,66,0,0,250,192,7,208,132,66,97,20,101,66,0,0,250,192,0,160,140,66,5,244,95,66,0,0,250,192,7,112,148,66,190,129,91,66,0,0,250,192,0,64,156,66,61,27,90,66,0,0,250,192,7,16,164,66,245,219,86,66,0,0,250,192,0,224,171,66,119,126,81,66,0,0,250,192,7,176,179,66,212,218,75,66,0,0,250,192,0,128,187,66,66,254,65,66,0,0,250,192,7,80,195,66,21,157,55,66,0,0,250,192,66,32,203,66,95,88,52,66,0,0,250,192,33,240,210,66,9,249,48,66,0,0,250,192,0,192,218,66,12,211,47,66,0,0,250,192,223,143,226,66,188,52,45,66,0,0,250,192,66,96,234,66,25,4,45,66,0,0,250,192,33,48,242,66,136,244,42,66,0,0,250,192,0,0,250,66,139,189,36,66,0,0,250,192,240,231,0,67,65,2,31,66,0,0,250,192,33,208,4,67,20,63,31,66,0,0,250,192,16,184,8,67,245,219,26,66,0,0,250,192,0,160,12,67,135,86,16,66,0,0,250,192,240,135,16,67,138,31,8,66,0,0,250,192,33,112,20,67,175,37,4,66,0,0,250,192,16,88,24,67,200,88,2,66,0,0,250,192,0,64,28,67,210,128,3,66,0,0,250,192,240,39,32,67,154,153,2,66,0,0,250,192,33,16,36,67,251,186,2,66,0,0,250,192,16,248,39,67,196,49,252,65,0,0,250,192,0,224,43,67,177,63,243,65,0,0,250,192,240,199,47,67,67,45,234,65,0,0,250,192,33,176,51,67,103,85,224,65,0,0,250,192,16,152,55,67,255,161,209,65,0,0,250,192,0,128,59,67,2,188,193,65,0,0,250,192,240,103,63,67,17,71,182,65,0,0,250,192,33,80,67,67,34,14,164,65,0,0,250,192,16,56,71,67,130,243,148,65,0,0,250,192,0,32,75,67,159,60,140,65,0,0,250,192,240,7,79,67,67,173,144,65,0,0,250,192,33,240,82,67,115,215,147,65,0,0,250,192,16,216,86,67,75,89,148,65,0,0,250,192,0,192,90,67,5,163,146,65,0,0,250,192,240,167,94,67,143,83,143,65,0,0,250,192,33,144,98,67,32,65,136,65,0,0,250,192,16,120,102,67,32,65,130,65,0,0,250,192,0,96,106,67,28,235,119,65,0,0,250,192,240,71,110,67,91,211,87,65,0,0,250,192,33,48,114,67,192,91,85,65,0,0,250,192,16,24,118,67,121,88,68,65,0,0,250,192,0,0,122,67,115,215,47,65,0,0,250,192,0,0,122,64,234,132,70,66,52,128,59,193,0,0,250,64,240,69,72,66,52,128,59,193,52,128,59,65,156,132,74,66,52,128,59,193,0,0,122,65,176,50,76,66,52,128,59,193,26,64,156,65,31,244,81,66,52,128,59,193,0,128,187,65,65,66,85,66,52,128,59,193,26,192,218,65,114,185,89,66,52,128,59,193,0,0,250,65,76,38,93,66,52,128,59,193,13,160,12,66,56,56,98,66,52,128,59,193,0,64,28,66,26,192,103,66,52,128,59,193,13,224,43,66,186,235,104,66,52,128,59,193,0,128,59,66,78,145,108,66,52,128,59,193,13,32,75,66,86,125,107,66,52,128,59,193,0,192,90,66,62,40,106,66,52,128,59,193,13,96,106,66,0,145,106,66,52,128,59,193,0,0,122,66,9,202,104,66,52,128,59,193,7,208,132,66,206,170,103,66,52,128,59,193,0,160,140,66,34,189,97,66,52,128,59,193,7,112,148,66,22,42,95,66,52,128,59,193,0,64,156,66,180,200,95,66,52,128,59,193,7,16,164,66,251,156,91,66,52,128,59,193,0,224,171,66,177,97,84,66,52,128,59,193,7,176,179,66,161,248,78,66,52,128,59,193,0,128,187,66,19,225,68,66,52,128,59,193,7,80,195,66,104,115,56,66,52,128,59,193,66,32,203,66,48,251,47,66,52,128,59,193,33,240,210,66,145,79,46,66,52,128,59,193,0,192,218,66,72,80,45,66,52,128,59,193,223,143,226,66,145,15,46,66,52,128,59,193,66,96,234,66,192,172,46,66,52,128,59,193,33,48,242,66,216,48,42,66,52,128,59,193,0,0,250,66,177,161,37,66,52,128,59,193,240,231,0,67,7,206,29,66,52,128,59,193,33,208,4,67,189,18,30,66,52,128,59,193,16,184,8,67,42,58,23,66,52,128,59,193,0,160,12,67,196,66,18,66,52,128,59,193,240,135,16,67,227,71,11,66,52,128,59,193,33,112,20,67,0,17,8,66,52,128,59,193,16,88,24,67,217,31,6,66,52,128,59,193,0,64,28,67,54,171,8,66,52,128,59,193,240,39,32,67,216,112,7,66,52,128,59,193,33,16,36,67,159,124,7,66,52,128,59,193,16,248,39,67,99,174,4,66,52,128,59,193,0,224,43,67,91,49,248,65,52,128,59,193,240,199,47,67,8,61,242,65,52,128,59,193,33,176,51,67,194,151,226,65,52,128,59,193,16,152,55,67,172,139,211,65,52,128,59,193,0,128,59,67,112,206,199,65,52,128,59,193,240,103,63,67,103,68,178,65,52,128,59,193,33,80,67,67,154,25,155,65,52,128,59,193,16,56,71,67,97,67,147,65,52,128,59,193,0,32,75,67,202,50,133,65,52,128,59,193,240,7,79,67,238,252,128,65,52,128,59,193,33,240,82,67,209,145,135,65,52,128,59,193,16,216,86,67,67,28,138,65,52,128,59,193,0,192,90,67,14,79,136,65,52,128,59,193,240,167,94,67,255,33,134,65,52,128,59,193,33,144,98,67,224,190,117,65,52,128,59,193,16,120,102,67,16,122,102,65,52,128,59,193,0,96,106,67,41,237,84,65,52,128,59,193,240,71,110,67,152,110,81,65,52,128,59,193,33,48,114,67,9,138,77,65,52,128,59,193,16,24,118,67,40,15,74,65,52,128,59,193,0,0,122,67,191,125,55,65,52,128,59,193,0,0,122,64,25,196,74,66,0,0,122,193,0,0,250,64,235,243,76,66,0,0,122,193,52,128,59,65,174,118,81,66,0,0,122,193,0,0,122,65,152,140,81,66,0,0,122,193,26,64,156,65,230,110,84,66,0,0,122,193,0,128,187,65,166,155,90,66,0,0,122,193,26,192,218,65,195,36,96,66,0,0,122,193,0,0,250,65,91,194,97,66,0,0,122,193,13,160,12,66,45,67,101,66,0,0,122,193,0,64,28,66,39,241,104,66,0,0,122,193,13,224,43,66,157,209,109,66,0,0,122,193,0,128,59,66,159,171,111,66,0,0,122,193,13,32,75,66,203,80,112,66,0,0,122,193,0,192,90,66,25,4,108,66,0,0,122,193,13,96,106,66,43,88,109,66,0,0,122,193,0,0,122,66,137,18,109,66,0,0,122,193,7,208,132,66,120,58,106,66,0,0,122,193,0,160,140,66,108,184,100,66,0,0,122,193,7,112,148,66,183,209,96,66,0,0,122,193,0,64,156,66,83,197,99,66,0,0,122,193,7,16,164,66,160,154,93,66,0,0,122,193,0,224,171,66,204,46,84,66,0,0,122,193,7,176,179,66,27,141,78,66,0,0,122,193,0,128,187,66,208,132,68,66,0,0,122,193,7,80,195,66,190,129,58,66,0,0,122,193,66,32,203,66,233,230,50,66,0,0,122,193,33,240,210,66,17,135,45,66,0,0,122,193,0,192,218,66,48,123,43,66,0,0,122,193,223,143,226,66,237,13,43,66,0,0,122,193,66,96,234,66,65,194,40,66,0,0,122,193,33,48,242,66,37,181,39,66,0,0,122,193,0,0,250,66,96,37,38,66,0,0,122,193,240,231,0,67,199,41,30,66,0,0,122,193,33,208,4,67,212,171,27,66,0,0,122,193,16,184,8,67,44,148,24,66,0,0,122,193,0,160,12,67,217,14,18,66,0,0,122,193,240,135,16,67,120,122,11,66,0,0,122,193,33,112,20,67,253,71,11,66,0,0,122,193,16,88,24,67,209,162,9,66,0,0,122,193,0,64,28,67,191,142,12,66,0,0,122,193,240,39,32,67,219,121,14,66,0,0,122,193,33,16,36,67,21,29,11,66,0,0,122,193,16,248,39,67,132,158,6,66,0,0,122,193,0,224,43,67,147,186,0,66,0,0,122,193,240,199,47,67,50,85,249,65,0,0,122,193,33,176,51,67,193,168,231,65,0,0,122,193,16,152,55,67,242,48,219,65,0,0,122,193,0,128,59,67,196,194,197,65,0,0,122,193,240,103,63,67,134,73,174,65,0,0,122,193,33,80,67,67,163,1,154,65,0,0,122,193,16,56,71,67,206,42,144,65,0,0,122,193,0,32,75,67,184,192,134,65,0,0,122,193,240,7,79,67,82,39,126,65,0,0,122,193,33,240,82,67,15,11,123,65,0,0,122,193,16,216,86,67,95,7,117,65,0,0,122,193,0,192,90,67,224,45,118,65,0,0,122,193,240,167,94,67,136,99,100,65,0,0,122,193,33,144,98,67,254,67,89,65,0,0,122,193,16,120,102,67,192,236,87,65,0,0,122,193,0,96,106,67,12,147,85,65,0,0,122,193,240,71,110,67,238,90,84,65,0,0,122,193,33,48,114,67,197,32,87,65,0,0,122,193,16,24,118,67,246,40,81,65,0,0,122,193,0,0,122,67,143,228,56,65,0,0,122,193,0,0,122,64,68,105,80,66,26,64,156,193,0,0,250,64,12,130,83,66,26,64,156,193,52,128,59,65,167,40,90,66,26,64,156,193,0,0,122,65,143,147,91,66,26,64,156,193,26,64,156,65,134,154,91,66,26,64,156,193,0,128,187,65,34,172,96,66,26,64,156,193,26,192,218,65,74,59,98,66,26,64,156,193,0,0,250,65,79,47,103,66,26,64,156,193,13,160,12,66,121,233,106,66,26,64,156,193,0,64,28,66,232,234,109,66,26,64,156,193,13,224,43,66,237,13,113,66,26,64,156,193,0,128,59,66,9,219,116,66,26,64,156,193,13,32,75,66,186,218,113,66,26,64,156,193,0,192,90,66,88,185,110,66,26,64,156,193,13,96,106,66,195,211,112,66,26,64,156,193,0,0,122,66,8,108,108,66,26,64,156,193,7,208,132,66,77,115,102,66,26,64,156,193,0,160,140,66], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([0,145,98,66,26,64,156,193,7,112,148,66,19,242,97,66,26,64,156,193,0,64,156,66,174,182,96,66,26,64,156,193,7,16,164,66,98,97,91,66,26,64,156,193,0,224,171,66,58,163,85,66,26,64,156,193,7,176,179,66,73,221,78,66,26,64,156,193,0,128,187,66,36,249,67,66,26,64,156,193,7,80,195,66,225,11,62,66,26,64,156,193,66,32,203,66,149,20,55,66,26,64,156,193,33,240,210,66,155,38,48,66,26,64,156,193,0,192,218,66,1,94,44,66,26,64,156,193,223,143,226,66,200,152,41,66,26,64,156,193,66,96,234,66,7,95,40,66,26,64,156,193,33,48,242,66,154,55,40,66,26,64,156,193,0,0,250,66,8,44,39,66,26,64,156,193,240,231,0,67,245,74,29,66,26,64,156,193,33,208,4,67,168,117,28,66,26,64,156,193,16,184,8,67,208,243,24,66,26,64,156,193,0,160,12,67,88,104,16,66,26,64,156,193,240,135,16,67,27,205,17,66,26,64,156,193,33,112,20,67,62,185,14,66,26,64,156,193,16,88,24,67,116,53,15,66,26,64,156,193,0,64,28,67,100,251,17,66,26,64,156,193,240,39,32,67,89,70,17,66,26,64,156,193,33,16,36,67,113,27,12,66,26,64,156,193,16,248,39,67,185,13,8,66,26,64,156,193,0,224,43,67,254,148,6,66,26,64,156,193,240,199,47,67,224,190,252,65,26,64,156,193,33,176,51,67,196,66,240,65,26,64,156,193,16,152,55,67,45,195,226,65,26,64,156,193,0,128,59,67,167,249,202,65,26,64,156,193,240,103,63,67,153,170,176,65,26,64,156,193,33,80,67,67,225,250,149,65,26,64,156,193,16,56,71,67,226,105,140,65,26,64,156,193,0,32,75,67,239,56,129,65,26,64,156,193,240,7,79,67,149,212,121,65,26,64,156,193,33,240,82,67,127,217,110,65,26,64,156,193,16,216,86,67,58,35,105,65,26,64,156,193,0,192,90,67,123,131,93,65,26,64,156,193,240,167,94,67,247,6,91,65,26,64,156,193,33,144,98,67,80,141,82,65,26,64,156,193,16,120,102,67,95,152,84,65,26,64,156,193,0,96,106,67,69,216,89,65,26,64,156,193,240,71,110,67,195,245,77,65,26,64,156,193,33,48,114,67,161,103,75,65,26,64,156,193,16,24,118,67,132,13,81,65,26,64,156,193,0,0,122,67,147,169,56,65,26,64,156,193,0,0,122,64,248,83,89,66,0,128,187,193,0,0,250,64,68,139,94,66,0,128,187,193,52,128,59,65,66,143,97,66,0,128,187,193,0,0,122,65,85,129,97,66,0,128,187,193,26,64,156,65,40,207,99,66,0,128,187,193,0,128,187,65,185,60,102,66,0,128,187,193,26,192,218,65,239,56,103,66,0,128,187,193,0,0,250,65,19,50,106,66,0,128,187,193,13,160,12,66,172,237,108,66,0,128,187,193,0,64,28,66,110,99,114,66,0,128,187,193,13,224,43,66,242,176,112,66,0,128,187,193,0,128,59,66,133,188,115,66,0,128,187,193,13,32,75,66,21,12,110,66,0,128,187,193,0,192,90,66,83,5,111,66,0,128,187,193,13,96,106,66,129,166,111,66,0,128,187,193,0,0,122,66,6,1,106,66,0,128,187,193,7,208,132,66,101,106,103,66,0,128,187,193,0,160,140,66,42,122,99,66,0,128,187,193,7,112,148,66,89,70,96,66,0,128,187,193,0,64,156,66,190,193,93,66,0,128,187,193,7,16,164,66,231,221,86,66,0,128,187,193,0,224,171,66,99,110,80,66,0,128,187,193,7,176,179,66,48,140,75,66,0,128,187,193,0,128,187,66,192,236,71,66,0,128,187,193,7,80,195,66,118,177,63,66,0,128,187,193,66,32,203,66,102,119,56,66,0,128,187,193,33,240,210,66,47,238,49,66,0,128,187,193,0,192,218,66,209,145,43,66,0,128,187,193,223,143,226,66,20,255,39,66,0,128,187,193,66,96,234,66,31,180,36,66,0,128,187,193,33,48,242,66,193,121,36,66,0,128,187,193,0,0,250,66,181,166,31,66,0,128,187,193,240,231,0,67,215,116,31,66,0,128,187,193,33,208,4,67,196,130,31,66,0,128,187,193,16,184,8,67,67,109,25,66,0,128,187,193,0,160,12,67,108,248,21,66,0,128,187,193,240,135,16,67,41,28,20,66,0,128,187,193,33,112,20,67,104,226,18,66,0,128,187,193,16,88,24,67,244,189,19,66,0,128,187,193,0,64,28,67,100,251,22,66,0,128,187,193,240,39,32,67,27,111,21,66,0,128,187,193,33,16,36,67,28,188,16,66,0,128,187,193,16,248,39,67,111,18,11,66,0,128,187,193,0,224,43,67,33,223,4,66,0,128,187,193,240,199,47,67,163,129,253,65,0,128,187,193,33,176,51,67,167,232,240,65,0,128,187,193,16,152,55,67,139,236,224,65,0,128,187,193,0,128,59,67,161,231,203,65,0,128,187,193,240,103,63,67,100,204,182,65,0,128,187,193,33,80,67,67,61,138,155,65,0,128,187,193,16,56,71,67,157,0,137,65,0,128,187,193,0,32,75,67,204,93,109,65,0,128,187,193,240,7,79,67,103,213,98,65,0,128,187,193,33,240,82,67,97,195,94,65,0,128,187,193,16,216,86,67,71,114,85,65,0,128,187,193,0,192,90,67,10,215,80,65,0,128,187,193,240,167,94,67,190,48,81,65,0,128,187,193,33,144,98,67,242,176,80,65,0,128,187,193,16,120,102,67,121,88,85,65,0,128,187,193,0,96,106,67,156,162,89,65,0,128,187,193,240,71,110,67,110,52,86,65,0,128,187,193,33,48,114,67,152,76,73,65,0,128,187,193,16,24,118,67,28,235,61,65,0,128,187,193,0,0,122,67,152,110,53,65,0,128,187,193,0,0,122,64,245,27,102,66,26,192,218,193,0,0,250,64,108,73,103,66,26,192,218,193,52,128,59,65,26,64,102,66,26,192,218,193,0,0,122,65,27,30,103,66,26,192,218,193,26,64,156,65,250,45,107,66,26,192,218,193,0,128,187,65,54,107,109,66,26,192,218,193,26,192,218,65,144,241,108,66,26,192,218,193,0,0,250,65,65,130,107,66,26,192,218,193,13,160,12,66,15,220,106,66,26,192,218,193,0,64,28,66,110,227,110,66,26,192,218,193,13,224,43,66,204,46,112,66,26,192,218,193,0,128,59,66,164,159,110,66,26,192,218,193,13,32,75,66,8,189,111,66,26,192,218,193,0,192,90,66,84,163,113,66,26,192,218,193,13,96,106,66,40,62,109,66,26,192,218,193,0,0,122,66,104,162,103,66,26,192,218,193,7,208,132,66,174,54,101,66,26,192,218,193,0,160,140,66,159,77,94,66,26,192,218,193,7,112,148,66,231,221,90,66,26,192,218,193,0,64,156,66,184,158,89,66,26,192,218,193,7,16,164,66,242,65,84,66,26,192,218,193,0,224,171,66,39,224,75,66,26,192,218,193,7,176,179,66,52,98,70,66,26,192,218,193,0,128,187,66,118,32,69,66,26,192,218,193,7,80,195,66,218,172,67,66,26,192,218,193,66,32,203,66,194,6,60,66,26,192,218,193,33,240,210,66,215,180,49,66,26,192,218,193,0,192,218,66,203,208,41,66,26,192,218,193,223,143,226,66,196,49,38,66,26,192,218,193,66,96,234,66,129,196,37,66,26,192,218,193,33,48,242,66,203,208,36,66,26,192,218,193,0,0,250,66,131,192,32,66,26,192,218,193,240,231,0,67,201,229,33,66,26,192,218,193,33,208,4,67,140,121,32,66,26,192,218,193,16,184,8,67,213,56,27,66,26,192,218,193,0,160,12,67,147,24,24,66,26,192,218,193,240,135,16,67,29,26,22,66,26,192,218,193,33,112,20,67,108,120,19,66,26,192,218,193,16,88,24,67,57,150,23,66,26,192,218,193,0,64,28,67,25,226,25,66,26,192,218,193,240,39,32,67,72,80,23,66,26,192,218,193,33,16,36,67,7,112,18,66,26,192,218,193,16,248,39,67,40,207,9,66,26,192,218,193,0,224,43,67,165,44,1,66,26,192,218,193,240,199,47,67,62,249,253,65,26,192,218,193,33,176,51,67,98,144,239,65,26,192,218,193,16,152,55,67,108,9,222,65,26,192,218,193,0,128,59,67,136,133,201,65,26,192,218,193,240,103,63,67,199,75,180,65,26,192,218,193,33,80,67,67,142,134,156,65,26,192,218,193,16,56,71,67,89,134,139,65,26,192,218,193,0,32,75,67,2,188,120,65,26,192,218,193,240,7,79,67,82,184,110,65,26,192,218,193,33,240,82,67,80,141,87,65,26,192,218,193,16,216,86,67,143,228,79,65,26,192,218,193,0,192,90,67,243,142,84,65,26,192,218,193,240,167,94,67,102,102,69,65,26,192,218,193,33,144,98,67,130,226,64,65,26,192,218,193,16,120,102,67,15,156,71,65,26,192,218,193,0,96,106,67,7,95,65,65,26,192,218,193,240,71,110,67,73,46,67,65,26,192,218,193,33,48,114,67,172,139,62,65,26,192,218,193,16,24,118,67,125,174,43,65,26,192,218,193,0,0,122,67,116,181,33,65,26,192,218,193,0,0,122,64,125,174,109,66,0,0,250,193,0,0,250,64,107,43,110,66,0,0,250,193,52,128,59,65,47,29,107,66,0,0,250,193,0,0,122,65,241,35,111,66,0,0,250,193,26,64,156,65,116,245,113,66,0,0,250,193,0,128,187,65,33,112,114,66,0,0,250,193,26,192,218,65,134,90,113,66,0,0,250,193,0,0,250,65,145,45,110,66,0,0,250,193,13,160,12,66,54,188,106,66,0,0,250,193,0,64,28,66,84,99,107,66,0,0,250,193,13,224,43,66,211,141,109,66,0,0,250,193,0,128,59,66,186,201,109,66,0,0,250,193,13,32,75,66,50,102,110,66,0,0,250,193,0,192,90,66,147,250,107,66,0,0,250,193,13,96,106,66,40,254,106,66,0,0,250,193,0,0,122,66,249,96,98,66,0,0,250,193,7,208,132,66,41,45,97,66,0,0,250,193,0,160,140,66,183,145,90,66,0,0,250,193,7,112,148,66,241,244,86,66,0,0,250,193,0,64,156,66,152,46,85,66,0,0,250,193,7,16,164,66,15,75,83,66,0,0,250,193,0,224,171,66,68,122,80,66,0,0,250,193,7,176,179,66,129,85,77,66,0,0,250,193,0,128,187,66,47,174,71,66,0,0,250,193,7,80,195,66,36,168,68,66,0,0,250,193,66,32,203,66,82,201,61,66,0,0,250,193,33,240,210,66,53,111,50,66,0,0,250,193,0,192,218,66,61,138,43,66,0,0,250,193,223,143,226,66,186,201,43,66,0,0,250,193,66,96,234,66,114,249,40,66,0,0,250,193,33,48,242,66,115,151,38,66,0,0,250,193,0,0,250,66,221,117,38,66,0,0,250,193,240,231,0,67,228,212,36,66,0,0,250,193,33,208,4,67,164,48,35,66,0,0,250,193,16,184,8,67,30,86,31,66,0,0,250,193,0,160,12,67,66,15,27,66,0,0,250,193,240,135,16,67,110,244,22,66,0,0,250,193,33,112,20,67,69,216,20,66,0,0,250,193,16,88,24,67,171,79,25,66,0,0,250,193,0,64,28,67,72,16,27,66,0,0,250,193,240,39,32,67,66,62,22,66,0,0,250,193,33,16,36,67,133,252,15,66,0,0,250,193,16,248,39,67,176,242,6,66,0,0,250,193,0,224,43,67,41,11,0,66,0,0,250,193,240,199,47,67,105,239,248,65,0,0,250,193,33,176,51,67,54,43,240,65,0,0,250,193,16,152,55,67,163,129,220,65,0,0,250,193,0,128,59,67,205,59,200,65,0,0,250,193,240,103,63,67,172,156,182,65,0,0,250,193,33,80,67,67,119,45,159,65,0,0,250,193,16,56,71,67,7,95,141,65,0,0,250,193,0,32,75,67,169,36,130,65,0,0,250,193,240,7,79,67,164,223,112,65,0,0,250,193,33,240,82,67,141,151,96,65,0,0,250,193,16,216,86,67,54,205,72,65,0,0,250,193,0,192,90,67,222,113,66,65,0,0,250,193,240,167,94,67,238,235,64,65,0,0,250,193,33,144,98,67,34,142,52,65,0,0,250,193,16,120,102,67,123,131,57,65,0,0,250,193,0,96,106,67,224,190,46,65,0,0,250,193,240,71,110,67,242,176,46,65,0,0,250,193,33,48,114,67,136,133,52,65,0,0,250,193,16,24,118,67,230,63,57,65,0,0,250,193,0,0,122,67,117,147,56,65,0,0,250,193,0,0,122,64,130,226,112,66,13,160,12,194,0,0,250,64,14,126,109,66,13,160,12,194,52,128,59,65,124,33,106,66,13,160,12,194,0,0,122,65,98,80,110,66,13,160,12,194,26,64,156,65,174,152,112,66,13,160,12,194,0,128,187,65,106,30,114,66,13,160,12,194,26,192,218,65,104,34,114,66,13,160,12,194,0,0,250,65,227,165,112,66,13,160,12,194,13,160,12,66,237,94,106,66,13,160,12,194,0,64,28,66,99,191,103,66,13,160,12,194,13,224,43,66,18,195,105,66,13,160,12,194,0,128,59,66,25,243,106,66,13,160,12,194,13,32,75,66,173,122,102,66,13,160,12,194,0,192,90,66,145,79,101,66,13,160,12,194,13,96,106,66,183,145,98,66,13,160,12,194,0,0,122,66,68,250,96,66,13,160,12,194,7,208,132,66,43,135,96,66,13,160,12,194,0,160,140,66,81,171,90,66,13,160,12,194,7,112,148,66,107,43,85,66,13,160,12,194,0,64,156,66,17,7,85,66,13,160,12,194,7,16,164,66,202,84,80,66,13,160,12,194,0,224,171,66,73,221,79,66,13,160,12,194,7,176,179,66,53,158,75,66,13,160,12,194,0,128,187,66,177,255,69,66,13,160,12,194,7,80,195,66,152,76,64,66,13,160,12,194,66,32,203,66,214,69,57,66,13,160,12,194,33,240,210,66,232,89,48,66,13,160,12,194,0,192,218,66,182,115,43,66,13,160,12,194,223,143,226,66,181,55,43,66,13,160,12,194,66,96,234,66,245,219,43,66,13,160,12,194,33,48,242,66,213,73,41,66,13,160,12,194,0,0,250,66,98,161,38,66,13,160,12,194,240,231,0,67,116,164,36,66,13,160,12,194,33,208,4,67,41,92,30,66,13,160,12,194,16,184,8,67,165,61,26,66,13,160,12,194,0,160,12,67,111,193,23,66,13,160,12,194,240,135,16,67,114,10,21,66,13,160,12,194,33,112,20,67,123,131,21,66,13,160,12,194,16,88,24,67,249,143,23,66,13,160,12,194,0,64,28,67,213,73,23,66,13,160,12,194,240,39,32,67,54,60,17,66,13,160,12,194,33,16,36,67,157,192,12,66,13,160,12,194,16,248,39,67,88,10,5,66,13,160,12,194,0,224,43,67,142,134,254,65,13,160,12,194,240,199,47,67,153,187,250,65,13,160,12,194,33,176,51,67,70,54,240,65,13,160,12,194,16,152,55,67,135,39,219,65,13,160,12,194,0,128,59,67,197,32,197,65,13,160,12,194,240,103,63,67,31,5,178,65,13,160,12,194,33,80,67,67,218,155,161,65,13,160,12,194,16,56,71,67,230,174,149,65,13,160,12,194,0,32,75,67,103,196,138,65,13,160,12,194,240,7,79,67,114,138,116,65,13,160,12,194,33,240,82,67,232,217,89,65,13,160,12,194,16,216,86,67,147,58,86,65,13,160,12,194,0,192,90,67,16,233,78,65,13,160,12,194,240,167,94,67,60,78,56,65,13,160,12,194,33,144,98,67,7,206,39,65,13,160,12,194,16,120,102,67,243,72,29,65,13,160,12,194,0,96,106,67,17,182,30,65,13,160,12,194,240,71,110,67,105,111,47,65,13,160,12,194,33,48,114,67,183,98,57,65,13,160,12,194,16,24,118,67,1,77,61,65,13,160,12,194,0,0,122,67,6,18,63,65,13,160,12,194,0,0,122,64,58,163,111,66,0,64,28,194,0,0,250,64,153,123,106,66,0,64,28,194,52,128,59,65,164,240,102,66,0,64,28,194,0,0,122,65,174,246,107,66,0,64,28,194,26,64,156,65,109,69,112,66,0,64,28,194,0,128,187,65,232,42,114,66,0,64,28,194,26,192,218,65,106,222,113,66,0,64,28,194,0,0,250,65,97,84,110,66,0,64,28,194,13,160,12,66,144,160,105,66,0,64,28,194,0,64,28,66,9,10,102,66,0,64,28,194,13,224,43,66,4,167,102,66,0,64,28,194,0,128,59,66,206,72,103,66,0,64,28,194,13,32,75,66,65,194,100,66,0,64,28,194,0,192,90,66,50,183,94,66,0,64,28,194,13,96,106,66,233,72,93,66,0,64,28,194,0,0,122,66,41,45,93,66,0,64,28,194,7,208,132,66,139,61,95,66,0,64,28,194,0,160,140,66,106,60,89,66,0,64,28,194,7,112,148,66,116,134,86,66,0,64,28,194,0,64,156,66,254,229,82,66,0,64,28,194,7,16,164,66,111,48,78,66,0,64,28,194,0,224,171,66,66,32,78,66,0,64,28,194,7,176,179,66,202,114,74,66,0,64,28,194,0,128,187,66,93,126,73,66,0,64,28,194,7,80,195,66,1,141,67,66,0,64,28,194,66,32,203,66,75,8,60,66,0,64,28,194,33,240,210,66,73,238,49,66,0,64,28,194,0,192,218,66,36,87,46,66,0,64,28,194,223,143,226,66,52,17,45,66,0,64,28,194,66,96,234,66,61,155,45,66,0,64,28,194,33,48,242,66,23,217,39,66,0,64,28,194,0,0,250,66,61,219,37,66,0,64,28,194,240,231,0,67,110,227,32,66,0,64,28,194,33,208,4,67,144,177,27,66,0,64,28,194,16,184,8,67,38,211,22,66,0,64,28,194,0,160,12,67,254,148,22,66,0,64,28,194,240,135,16,67,245,121,23,66,0,64,28,194,33,112,20,67,213,167,21,66,0,64,28,194,16,88,24,67,229,208,20,66,0,64,28,194,0,64,28,67,15,28,19,66,0,64,28,194,240,39,32,67,181,149,15,66,0,64,28,194,33,16,36,67,75,25,10,66,0,64,28,194,16,248,39,67,198,237,2,66,0,64,28,194,0,224,43,67,232,106,0,66,0,64,28,194,240,199,47,67,104,145,250,65,0,64,28,194,33,176,51,67,82,56,238,65,0,64,28,194,16,152,55,67,161,231,213,65,0,64,28,194,0,128,59,67,61,44,192,65,0,64,28,194,240,103,63,67,76,55,178,65,0,64,28,194,33,80,67,67,99,255,169,65,0,64,28,194,16,56,71,67,138,159,159,65,0,64,28,194,0,32,75,67,224,173,146,65,0,64,28,194,240,7,79,67,106,94,134,65,0,64,28,194,33,240,82,67,209,34,113,65,0,64,28,194,16,216,86,67,80,252,88,65,0,64,28,194,0,192,90,67,184,175,82,65,0,64,28,194,240,167,94,67,204,93,52,65,0,64,28,194,33,144,98,67,61,10,40,65,0,64,28,194,16,120,102,67,164,136,27,65,0,64,28,194,0,96,106,67,110,122,30,65,0,64,28,194,240,71,110,67,209,145,43,65,0,64,28,194,33,48,114,67,231,29,52,65,0,64,28,194,16,24,118,67,181,55,65,65,0,64,28,194,0,0,122,67,152,110,62,65,0,64,28,194,0,0,122,64,50,21,110,66,13,224,43,194,0,0,250,64,66,254,104,66,13,224,43,194,52,128,59,65,168,70,104,66,13,224,43,194,0,0,122,65,255,178,109,66,13,224,43,194,26,64,156,65,186,26,114,66,13,224,43,194,0,128,187,65,8,172,114,66,13,224,43,194,26,192,218,65,206,25,112,66,13,224,43,194,0,0,250,65,142,53,104,66,13,224,43,194,13,160,12,66,108,248,98,66,13,224,43,194,0,64,28,66,104,209,100,66,13,224,43,194,13,224,43,66,252,169,100,66,13,224,43,194,0,128,59,66,55,201,99,66,13,224,43,194,13,32,75,66,208,243,94,66,13,224,43,194,0,192,90,66,107,43,93,66,13,224,43,194,13,96,106,66,250,109,90,66,13,224,43,194,0,0,122,66,184,192,88,66,13,224,43,194,7,208,132,66,33,176,86,66,13,224,43,194,0,160,140,66,177,63,85,66,13,224,43,194,7,112,148,66,63,87,84,66,13,224,43,194,0,64,156,66,29,120,82,66,13,224,43,194,7,16,164,66,201,118,78,66,13,224,43,194,0,224,171,66,141,151,72,66,13,224,43,194,7,176,179,66,224,237,69,66,13,224,43,194,0,128,187,66,161,22,72,66,13,224,43,194,7,80,195,66,239,248,67,66,13,224,43,194,66,32,203,66,2,107,60,66,13,224,43,194,33,240,210,66,156,196,49,66,13,224,43,194,0,192,218,66,69,7,50,66,13,224,43,194,223,143,226,66,233,102,48,66,13,224,43,194,66,96,234,66,152,93,43,66,13,224,43,194,33,48,242,66,232,42,42,66,13,224,43,194,0,0,250,66,47,46,38,66,13,224,43,194,240,231,0,67,116,181,29,66,13,224,43,194,33,208,4,67,168,134,31,66,13,224,43,194,16,184,8,67,225,139,28,66,13,224,43,194,0,160,12,67,153,251,26,66,13,224,43,194,240,135,16,67,235,179,25,66,13,224,43,194,33,112,20,67,168,245,23,66,13,224,43,194,16,88,24,67,184,175,20,66,13,224,43,194,0,64,28,67,34,44,16,66,13,224,43,194,240,39,32,67,72,80,12,66,13,224,43,194,33,16,36,67,244,108,5,66,13,224,43,194,16,248,39,67,218,155,0,66,13,224,43,194,0,224,43,67,39,194,247,65,13,224,43,194,240,199,47,67,177,191,237,65,13,224,43,194,33,176,51,67,62,104,224,65,13,224,43,194,16,152,55,67,107,154,206,65,13,224,43,194,0,128,59,67,54,205,198,65,13,224,43,194,240,103,63,67,140,57,183,65,13,224,43,194,33,80,67,67,12,130,166,65,13,224,43,194,16,56,71,67,32,82,157,65,13,224,43,194,0,32,75,67,106,205,147,65,13,224,43,194,240,7,79,67,165,206,137,65,13,224,43,194,33,240,82,67,164,223,121,65,13,224,43,194,16,216,86,67,140,185,84,65,13,224,43,194,0,192,90,67,184,175,82,65,13,224,43,194,240,167,94,67,105,111,44,65,13,224,43,194,33,144,98,67,144,247,25,65,13,224,43,194,16,120,102,67,221,106,20,65,13,224,43,194,0,96,106,67,254,142,23,65,13,224,43,194,240,71,110,67,140,219,35,65,13,224,43,194,33,48,114,67,244,253,53,65,13,224,43,194,16,24,118,67,45,178,47,65,13,224,43,194,0,0,122,67,157,232,30,65,13,224,43,194,0,0,122,64,104,162,107,66,0,128,59,194,0,0,250,64,123,148,107,66,0,128,59,194,52,128,59,65,9,185,108,66,0,128,59,194,0,0,122,65,16,250,112,66,0,128,59,194,26,64,156,65,19,114,114,66,0,128,59,194,0,128,187,65,142,198,111,66,0,128,59,194,26,192,218,65,229,208,106,66,0,128,59,194,0,0,250,65,217,125,105,66,0,128,59,194,13,160,12,66,55,26,100,66,0,128,59,194,0,64,28,66,168,70,100,66,0,128,59,194,13,224,43,66,227,54,100,66,0,128,59,194,0,128,59,66,48,42,95,66,0,128,59,194,13,32,75,66,56,120,91,66,0,128,59,194,0,192,90,66,86,78,87,66,0,128,59,194,13,96,106,66,131,64,86,66,0,128,59,194,0,0,122,66,64,100,82,66,0,128,59,194,7,208,132,66,43,152,81,66,0,128,59,194,0,160,140,66,163,193,80,66,0,128,59,194,7,112,148,66,185,252,80,66,0,128,59,194,0,64,156,66,245,91,81,66,0,128,59,194,7,16,164,66,51,243,75,66,0,128,59,194,0,224,171,66,249,160,69,66,0,128,59,194,7,176,179,66,104,81,65,66,0,128,59,194,0,128,187,66,134,154,67,66,0,128,59,194,7,80,195,66,56,167,62,66,0,128,59,194,66,32,203,66,241,163,49,66,0,128,59,194,33,240,210,66,127,25,48,66,0,128,59,194,0,192,218,66,63,245,46,66,0,128,59,194,223,143,226,66,5,99,48,66,0,128,59,194,66,96,234,66,236,111,45,66,0,128,59,194,33,48,242,66,164,112,40,66,0,128,59,194,0,0,250,66,171,143,35,66,0,128,59,194,240,231,0,67,94,139,33,66,0,128,59,194,33,208,4,67,205,76,32,66,0,128,59,194,16,184,8,67,239,137,30,66,0,128,59,194,0,160,12,67,150,242,26,66,0,128,59,194,240,135,16,67,231,157,23,66,0,128,59,194,33,112,20,67,28,107,19,66,0,128,59,194,16,88,24,67,212,154,17,66,0,128,59,194,0,64,28,67,63,151,13,66,0,128,59,194,240,39,32,67,249,96,8,66,0,128,59,194,33,16,36,67,156,4,1,66,0,128,59,194,16,248,39,67,157,17,240,65,0,128,59,194,0,224,43,67,178,157,233,65,0,128,59,194,240,199,47,67,35,74,224,65,0,128,59,194,33,176,51,67,242,176,213,65,0,128,59,194,16,152,55,67,95,169,207,65,0,128,59,194,0,128,59,67,246,151,202,65,0,128,59,194,240,103,63,67,106,222,190,65,0,128,59,194,33,80,67,67,69,216,164,65,0,128,59,194,16,56,71,67,104,17,155,65,0,128,59,194,0,32,75,67,55,154,139,65,0,128,59,194,240,7,79,67,188,150,132,65,0,128,59,194,33,240,82,67,184,30,111,65,0,128,59,194,16,216,86,67,96,118,73,65,0,128,59,194,0,192,90,67,41,92,61,65,0,128,59,194,240,167,94,67,27,158,34,65,0,128,59,194,33,144,98,67,171,103,27,65,0,128,59,194,16,120,102,67,99,122,20,65,0,128,59,194,0,96,106,67,35,16,8,65,0,128,59,194,240,71,110,67,66,91,19,65,0,128,59,194,33,48,114,67,30,121,19,65,0,128,59,194,16,24,118,67,12,106,22,65,0,128,59,194,0,0,122,67,162,221,8,65,0,128,59,194,0,0,122,64,82,103,111,66,13,32,75,194,0,0,250,64,215,116,110,66,13,32,75,194,52,128,59,65,48,251,110,66,13,32,75,194,0,0,122,65,31,180,113,66,13,32,75,194,26,64,156,65,193,185,109,66,13,32,75,194,0,128,187,65,203,33,108,66,13,32,75,194,26,192,218,65,119,62,102,66,13,32,75,194,0,0,250,65,237,205,103,66,13,32,75,194,13,160,12,66,3,9,100,66,13,32,75,194,0,64,28,66,211,252,96,66,13,32,75,194,13,224,43,66,13,113,95,66,13,32,75,194,0,128,59,66,47,238,92,66,13,32,75,194,13,32,75,66,4,150,91,66,13,32,75,194,0,192,90,66,105,175,84,66,13,32,75,194,13,96,106,66,229,114,82,66,13,32,75,194,0,0,122,66,136,163,75,66,13,32,75,194,7,208,132,66,242,65,75,66,13,32,75,194,0,160,140,66,175,20,73,66,13,32,75,194,7,112,148,66,28,252,77,66,13,32,75,194,0,64,156,66,207,38,75,66,13,32,75,194,7,16,164,66,104,51,70,66,13,32,75,194,0,224,171,66,186,90,65,66,13,32,75,194,7,176,179,66,165,14,64,66,13,32,75,194,0,128,187,66,196,2,59,66,13,32,75,194,7,80,195,66,76,38,54,66,13,32,75,194,66,32,203,66,179,106,49,66,13,32,75,194,33,240,210,66,174,88,51,66,13,32,75,194,0,192,218,66,169,19,52,66,13,32,75,194,223,143,226,66,187,231,49,66,13,32,75,194,66,96,234,66,129,230,45,66,13,32,75,194,33,48,242,66,178,29,40,66,13,32,75,194,0,0,250,66,25,226,35,66,13,32,75,194,240,231,0,67,148,118,33,66,13,32,75,194,33,208,4,67,165,78,32,66,13,32,75,194,16,184,8,67,25,34,32,66,13,32,75,194,0,160,12,67,26,17,25,66,13,32,75,194,240,135,16,67,98,33,18,66,13,32,75,194,33,112,20,67,240,69,15,66,13,32,75,194,16,88,24,67,215,146,13,66,13,32,75,194,0,64,28,67,48,234,11,66,13,32,75,194,240,39,32,67,211,252,5,66,13,32,75,194,33,16,36,67,123,3,254,65,13,32,75,194,16,248,39,67,244,253,235,65,13,32,75,194,0,224,43,67,25,98,217,65,13,32,75,194,240,199,47,67,222,241,203,65,13,32,75,194,33,176,51,67,45,50,202,65,13,32,75,194,16,152,55,67,29,218,201,65,13,32,75,194,0,128,59,67,125,63,196,65,13,32,75,194,240,103,63,67,117,130,187,65,13,32,75,194,33,80,67,67,152,238,170,65,13,32,75,194,16,56,71,67,103,68,154,65,13,32,75,194,0,32,75,67,187,39,142,65,13,32,75,194,240,7,79,67,150,50,128,65,13,32,75,194,33,240,82,67,33,31,95,65,13,32,75,194,16,216,86,67,241,99,69,65,13,32,75,194,0,192,90,67,235,115,46,65,13,32,75,194,240,167,94,67,165,44,33,65,13,32,75,194,33,144,98,67,93,80,17,65,13,32,75,194,16,120,102,67,109,185,16,65,13,32,75,194,0,96,106,67,113,90,13,65,13,32,75,194,240,71,110,67,142,146,16,65,13,32,75,194,33,48,114,67,202,21,17,65,13,32,75,194,16,24,118,67,170,125,16,65,13,32,75,194,0,0,122,67,107,171,26,65,13,32,75,194,0,0,122,64,58,146,113,66,0,192,90,194,0,0,250,64,170,177,115,66,0,192,90,194,52,128,59,65,18,148,115,66,0,192,90,194,0,0,122,65,106,13,114,66,0,192,90,194,26,64,156,65,236,209,105,66,0,192,90,194,0,128,187,65,130,226,103,66,0,192,90,194,26,192,218,65,82,73,100,66,0,192,90,194,0,0,250,65,177,191,99,66,0,192,90,194,13,160,12,66,40,62,102,66,0,192,90,194,0,64,28,66,17,182,98,66,0,192,90,194,13,224,43,66,195,245,96,66,0,192,90,194,0,128,59,66,176,67,92,66,0,192,90,194,13,32,75,66,28,107,89,66,0,192,90,194,0,192,90,66,10,168,80,66,0,192,90,194,13,96,106,66,165,14,77,66,0,192,90,194,0,0,122,66,41,203,69,66,0,192,90,194,7,208,132,66,170,194,65,66,0,192,90,194,0,160,140,66,137,18,64,66,0,192,90,194,7,112,148,66,227,54,67,66,0,192,90,194,0,64,156,66,168,215,64,66,0,192,90,194,7,16,164,66,188,69,63,66,0,192,90,194,0,224,171,66,194,151,61,66,0,192,90,194,7,176,179,66,16,233,57,66,0,192,90,194,0,128,187,66,9,138,53,66,0,192,90,194,7,80,195,66,104,34,50,66,0,192,90,194,66,32,203,66,248,147,52,66,0,192,90,194,33,240,210,66,92,79,54,66,0,192,90,194,0,192,218,66,168,181,53,66,0,192,90,194,223,143,226,66,113,172,49,66,0,192,90,194,66,96,234,66,179,123,46,66,0,192,90,194,33,48,242,66,159,13,44,66,0,192,90,194,0,0,250,66,144,224,36,66,0,192,90,194,240,231,0,67,158,47,32,66,0,192,90,194,33,208,4,67,98,97,33,66,0,192,90,194,16,184,8,67,116,181,29,66,0,192,90,194,0,160,12,67,139,44,21,66,0,192,90,194,240,135,16,67,188,214,15,66,0,192,90,194,33,112,20,67,98,16,11,66,0,192,90,194,16,88,24,67,181,102,5,66,0,192,90,194,0,64,28,67,91,177,6,66,0,192,90,194,240,39,32,67,60,78,2,66,0,192,90,194,33,16,36,67,185,141,245,65,0,192,90,194,16,248,39,67,74,251,230,65,0,192,90,194,0,224,43,67,249,143,214,65,0,192,90,194,240,199,47,67,199,186,197,65,0,192,90,194,33,176,51,67,41,109,188,65,0,192,90,194,16,152,55,67,138,31,188,65,0,192,90,194,0,128,59,67,220,215,186,65,0,192,90,194,240,103,63,67,33,48,182,65,0,192,90,194,33,80,67,67,91,49,178,65,0,192,90,194,16,56,71,67,11,198,167,65,0,192,90,194,0,32,75,67,13,96,148,65,0,192,90,194,240,7,79,67,192,108,128,65,0,192,90,194,33,240,82,67,91,177,89,65,0,192,90,194,16,216,86,67,18,20,49,65,0,192,90,194,0,192,90,67,191,96,30,65,0,192,90,194,240,167,94,67,13,224,25,65,0,192,90,194,33,144,98,67,140,21,10,65,0,192,90,194,16,120,102,67,237,83,15,65,0,192,90,194,0,96,106,67,5,134,13,65,0,192,90,194,240,71,110,67,125,174,14,65,0,192,90,194,33,48,114,67,102,20,19,65,0,192,90,194,16,24,118,67,170,171,18,65,0,192,90,194,0,0,122,67,57,185,22,65,0,192,90,194,0,0,122,64,126,76,118,66,13,96,106,194,0,0,250,64,219,249,116,66,13,96,106,194,52,128,59,65,194,151,113,66,13,96,106,194,0,0,122,65,241,180,109,66,13,96,106,194,26,64,156,65,27,30,106,66,13,96,106,194,0,128,187,65,151,144,98,66,13,96,106,194,26,192,218,65,91,66,96,66,13,96,106,194,0,0,250,65,5,244,97,66,13,96,106,194,13,160,12,66,140,57,98,66,13,96,106,194,0,64,28,66,225,250,98,66,13,96,106,194,13,224,43,66,29,154,94,66,13,96,106,194,0,128,59,66,24,166,90,66,13,96,106,194,13,32,75,66,229,225,86,66,13,96,106,194,0,192,90,66,62,185,79,66,13,96,106,194,13,96,106,66,131,175,73,66,13,96,106,194,0,0,122,66,191,189,65,66,13,96,106,194,7,208,132,66,152,140,60,66,13,96,106,194,0,160,140,66,202,3,56,66,13,96,106,194,7,112,148,66,2,235,55,66,13,96,106,194,0,64,156,66,90,245,52,66,13,96,106,194,7,16,164,66,86,14,53,66,13,96,106,194,0,224,171,66,140,10,53,66,13,96,106,194,7,176,179,66,251,58,53,66,13,96,106,194,0,128,187,66,99,127,51,66,13,96,106,194,7,80,195,66,90,117,49,66,13,96,106,194,66,32,203,66,206,106,52,66,13,96,106,194,33,240,210,66,206,136,54,66,13,96,106,194,0,192,218,66,156,115,50,66,13,96,106,194,223,143,226,66,77,85,49,66,13,96,106,194,66,96,234,66,138,78,49,66,13,96,106,194,33,48,242,66,39,160,43,66,13,96,106,194,0,0,250,66,31,133,34,66,13,96,106,194,240,231,0,67,150,33,37,66,13,96,106,194,33,208,4,67,211,30,33,66,13,96,106,194,16,184,8,67,183,162,29,66,13,96,106,194,0,160,12,67,27,94,20,66,13,96,106,194,240,135,16,67,86,142,11,66,13,96,106,194,33,112,20,67,125,16,2,66,13,96,106,194,16,88,24,67,119,173,255,65,13,96,106,194,0,64,28,67,239,201,252,65,13,96,106,194,240,39,32,67,163,146,249,65,13,96,106,194,33,16,36,67,183,81,243,65,13,96,106,194,16,248,39,67,66,62,232,65,13,96,106,194,0,224,43,67,220,87,218,65,13,96,106,194,240,199,47,67,2,171,208,65,13,96,106,194,33,176,51,67,254,229,197,65,13,96,106,194,16,152,55,67,144,32,189,65,13,96,106,194,0,128,59,67,124,114,186,65,13,96,106,194,240,103,63,67,89,6,183,65,13,96,106,194,33,80,67,67,80,141,178,65,13,96,106,194,16,56,71,67,136,99,170,65,13,96,106,194,0,32,75,67,241,227,158,65,13,96,106,194,240,7,79,67,30,39,135,65,13,96,106,194,33,240,82,67,200,7,92,65,13,96,106,194,16,216,86,67,236,81,62,65,13,96,106,194,0,192,90,67,2,89,26,65,13,96,106,194,240,167,94,67,25,86,20,65,13,96,106,194,33,144,98,67,88,115,22,65,13,96,106,194,16,120,102,67,31,128,14,65,13,96,106,194,0,96,106,67,201,48,10,65,13,96,106,194,240,71,110,67,191,183,17,65,13,96,106,194,33,48,114,67,220,104,26,65,13,96,106,194,16,24,118,67,232,89,19,65,13,96,106,194,0,0,122,67,36,40,35,65,13,96,106,194,0,0,122,64,196,113,120,66,0,0,122,194,0,0,250,64,118,143,114,66,0,0,122,194,52,128,59,65,41,75,110,66,0,0,122,194,0,0,122,65,66,224,108,66,0,0,122,194,26,64,156,65,188,244,101,66,0,0,122,194,0,128,187,65,13,32,95,66,0,0,122,194,26,192,218,65,246,232,95,66,0,0,122,194,0,0,250,65,91,241,95,66,0,0,122,194,13,160,12,66,58,210,94,66,0,0,122,194,0,64,28,66,130,226,95,66,0,0,122,194,13,224,43,66,248,194,90,66,0,0,122,194,0,128,59,66,219,57,87,66,0,0,122,194,13,32,75,66,61,172,81,66,0,0,122,194,0,192,90,66,147,105,75,66,0,0,122,194,13,96,106,66,48,204,68,66,0,0,122,194,0,0,122,66,138,206,62,66,0,0,122,194,7,208,132,66,66,224,53,66,0,0,122,194,0,160,140,66,134,90,49,66,0,0,122,194,7,112,148,66,167,232,44,66,0,0,122,194,0,64,156,66,184,111,47,66,0,0,122,194,7,16,164,66,124,97,49,66,0,0,122,194,0,224,171,66,29,56,49,66,0,0,122,194,7,176,179,66,149,229,48,66,0,0,122,194,0,128,187,66,28,60,48,66,0,0,122,194,7,80,195,66,67,237,46,66,0,0,122,194,66,32,203,66,36,40,50,66,0,0,122,194,33,240,210,66,81,26,50,66,0,0,122,194,0,192,218,66,238,60,46,66,0,0,122,194,223,143,226,66,172,11,50,66,0,0,122,194,66,96,234,66,115,40,45,66,0,0,122,194,33,48,242,66,167,121,38,66,0,0,122,194,0,0,250,66,224,254,31,66,0,0,122,194,240,231,0,67,95,216,35,66,0,0,122,194,33,208,4,67,177,97,31,66,0,0,122,194,16,184,8,67,179,204,27,66,0,0,122,194,0,160,12,67,70,246,18,66,0,0,122,194,240,135,16,67,220,151,11,66,0,0,122,194,33,112,20,67,157,17,6,66,0,0,122,194,16,88,24,67,201,101,252,65,0,0,122,194,0,64,28,67,155,102,250,65,0,0,122,194,240,39,32,67,145,109,246,65,0,0,122,194,33,16,36,67,85,176,242,65,0,0,122,194,16,248,39,67,5,180,237,65,0,0,122,194,0,224,43,67,28,124,231,65,0,0,122,194,240,199,47,67,78,226,218,65,0,0,122,194,33,176,51,67,128,72,212,65,0,0,122,194,16,152,55,67,213,137,201,65,0,0,122,194,0,128,59,67,250,254,190,65,0,0,122,194,240,103,63,67,187,39,181,65,0,0,122,194,33,80,67,67,97,84,176,65,0,0,122,194,16,56,71,67,113,189,167,65,0,0,122,194,0,32,75,67,196,49,148,65,0,0,122,194,240,7,79,67,20,63,120,65,0,0,122,194,33,240,82,67,211,222,83,65,0,0,122,194,16,216,86,67,150,33,48,65,0,0,122,194,0,192,90,67,189,210,30,65,0,0,122,194,240,167,94,67,152,175,26,65,0,0,122,194,33,144,98,67,137,65,34,65,0,0,122,194,16,120,102,67,247,228,24,65,0,0,122,194,0,96,106,67,2,2,15,65,0,0,122,194,240,71,110,67,228,201,21,65,0,0,122,194,33,48,114,67,8,44,21,65,0,0,122,194,16,24,118,67,202,79,30,65,0,0,122,194,0,0,122,67,50,230,52,65,0,0,122,194,0,0,122,64,119,109,115,66,7,208,132,194,0,0,250,64,28,60,109,66,7,208,132,194,52,128,59,65,16,122,106,66,7,208,132,194,0,0,122,65,156,68,102,66,7,208,132,194,26,64,156,65,88,138,90,66,7,208,132,194,0,128,187,65,36,121,86,66,7,208,132,194,26,192,218,65,109,86,88,66,7,208,132,194,0,0,250,65,28,252,89,66,7,208,132,194,13,160,12,66,203,208,87,66,7,208,132,194,0,64,28,66,199,186,85,66,7,208,132,194,13,224,43,66,121,169,82,66,7,208,132,194,0,128,59,66,86,223,79,66,7,208,132,194,13,32,75,66,50,166,76,66,7,208,132,194,0,192,90,66,172,11,72,66,7,208,132,194,13,96,106,66,214,214,63,66,7,208,132,194,0,0,122,66,25,51,57,66,7,208,132,194,7,208,132,66,82,201,49,66,7,208,132,194,0,160,140,66,231,204,40,66,7,208,132,194,7,112,148,66,118,224,36,66,7,208,132,194,0,64,156,66,52,226,38,66,7,208,132,194,7,16,164,66,249,241,42,66,7,208,132,194,0,224,171,66,32,210,43,66,7,208,132,194,7,176,179,66,110,35,44,66,7,208,132,194,0,128,187,66,115,215,45,66,7,208,132,194,7,80,195,66,38,147,42,66,7,208,132,194,66,32,203,66,242,193,42,66,7,208,132,194,33,240,210,66,238,107,44,66,7,208,132,194,0,192,218,66,238,218,42,66,7,208,132,194,223,143,226,66,201,229,41,66,7,208,132,194,66,96,234,66,107,235,40,66,7,208,132,194,33,48,242,66,233,247,36,66,7,208,132,194,0,0,250,66,171,126,33,66,7,208,132,194,240,231,0,67,5,180,32,66,7,208,132,194,33,208,4,67,28,43,30,66,7,208,132,194,16,184,8,67,192,44,28,66,7,208,132,194,0,160,12,67,198,156,20,66,7,208,132,194,240,135,16,67,184,239,11,66,7,208,132,194,33,112,20,67,208,21,5,66,7,208,132,194,16,88,24,67,139,172,1,66,7,208,132,194,0,64,28,67,100,59,254,65,7,208,132,194,240,39,32,67,207,230,245,65,7,208,132,194,33,16,36,67,81,107,244,65,7,208,132,194,16,248,39,67,237,141,236,65,7,208,132,194,0,224,43,67,7,206,231,65,7,208,132,194,240,199,47,67,101,153,219,65,7,208,132,194,33,176,51,67,91,83,214,65,7,208,132,194,16,152,55,67,116,181,204,65,7,208,132,194,0,128,59,67,224,62,194,65,7,208,132,194,240,103,63,67,56,103,177,65,7,208,132,194,33,80,67,67,122,54,166,65,7,208,132,194,16,56,71,67,223,79,159,65,7,208,132,194,0,32,75,67,39,49,137,65,7,208,132,194,240,7,79,67,157,17,96,65,7,208,132,194,33,240,82,67,201,118,54,65,7,208,132,194,16,216,86,67,234,4,32,65,7,208,132,194,0,192,90,67,221,106,10,65,7,208,132,194,240,167,94,67,57,57,22,65,7,208,132,194,33,144,98,67,19,97,23,65,7,208,132,194,16,120,102,67,171,219,13,65,7,208,132,194,0,96,106,67,218,242,10,65,7,208,132,194,240,71,110,67,88,40,28,65,7,208,132,194,33,48,114,67,89,23,38,65,7,208,132,194,16,24,118,67,188,116,47,65,7,208,132,194,0,0,122,67,102,247,54,65,7,208,132,194,0,0,122,64,194,151,108,66,0,160,140,194,0,0,250,64,36,40,103,66,0,160,140,194,52,128,59,65,234,85,94,66,0,160,140,194,0,0,122,65,98,97,89,66,0,160,140,194,26,64,156,65,251,58,80,66,0,160,140,194,0,128,187,65,190,95,74,66,0,160,140,194,26,192,218,65,142,117,75,66,0,160,140,194,0,0,250,65,214,69,77,66,0,160,140,194,13,160,12,66,190,176,78,66,0,160,140,194,0,64,28,66,111,129,76,66,0,160,140,194,13,224,43,66,224,126,78,66,0,160,140,194,0,128,59,66,121,233,70,66,0,160,140,194,13,32,75,66,107,43,67,66,0,160,140,194,0,192,90,66,185,141,61,66,0,160,140,194,13,96,106,66,114,202,57,66,0,160,140,194,0,0,122,66,147,250,52,66,0,160,140,194,7,208,132,66,134,120,43,66,0,160,140,194,0,160,140,66,245,155,35,66,0,160,140,194,7,112,148,66,21,29,30,66,0,160,140,194,0,64,156,66,15,156,30,66,0,160,140,194,7,16,164,66,183,17,34,66,0,160,140,194,0,224,171,66,228,20,36,66,0,160,140,194,7,176,179,66,20,191,39,66,0,160,140,194,0,128,187,66,82,137,40,66,0,160,140,194,7,80,195,66,45,225,37,66,0,160,140,194,66,32,203,66,156,179,34,66,0,160,140,194,33,240,210,66,229,225,36,66,0,160,140,194,0,192,218,66,1,222,35,66,0,160,140,194,223,143,226,66,125,110,36,66,0,160,140,194,66,96,234,66,137,210,34,66,0,160,140,194,33,48,242,66,111,82,31,66,0,160,140,194,0,0,250,66,4,214,35,66,0,160,140,194,240,231,0,67,14,254,38,66,0,160,140,194,33,208,4,67,131,128,36,66,0,160,140,194,16,184,8,67,31,116,31,66,0,160,140,194,0,160,12,67,177,97,23,66,0,160,140,194,240,135,16,67,203,144,13,66,0,160,140,194,33,112,20,67,130,98,7,66,0,160,140,194,16,88,24,67,201,101,4,66], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([0,160,140,194,0,64,28,67,30,231,1,66,0,160,140,194,240,39,32,67,189,210,251,65,0,160,140,194,33,16,36,67,106,94,235,65,0,160,140,194,16,248,39,67,138,159,224,65,0,160,140,194,0,224,43,67,127,106,222,65,0,160,140,194,240,199,47,67,192,236,213,65,0,160,140,194,33,176,51,67,84,210,203,65,0,160,140,194,16,152,55,67,34,14,198,65,0,160,140,194,0,128,59,67,253,118,183,65,0,160,140,194,240,103,63,67,105,239,169,65,0,160,140,194,33,80,67,67,203,16,156,65,0,160,140,194,16,56,71,67,78,209,140,65,0,160,140,194,0,32,75,67,86,14,117,65,0,160,140,194,240,7,79,67,215,18,76,65,0,160,140,194,33,240,82,67,103,213,37,65,0,160,140,194,16,216,86,67,210,0,4,65,0,160,140,194,0,192,90,67,109,74,2,65,0,160,140,194,240,167,94,67,12,106,10,65,0,160,140,194,33,144,98,67,206,153,9,65,0,160,140,194,16,120,102,67,112,78,9,65,0,160,140,194,0,96,106,67,9,109,22,65,0,160,140,194,240,71,110,67,171,103,31,65,0,160,140,194,33,48,114,67,4,28,29,65,0,160,140,194,16,24,118,67,192,236,36,65,0,160,140,194,0,0,122,67,225,11,39,65,0,160,140,194,0,0,122,64,26,17,98,66,7,112,148,194,0,0,250,64,18,229,94,66,7,112,148,194,52,128,59,65,152,157,85,66,7,112,148,194,0,0,122,65,13,32,76,66,7,112,148,194,26,64,156,65,215,116,68,66,7,112,148,194,0,128,187,65,245,91,63,66,7,112,148,194,26,192,218,65,172,28,63,66,7,112,148,194,0,0,250,65,26,145,65,66,7,112,148,194,13,160,12,66,79,0,65,66,7,112,148,194,0,64,28,66,75,153,68,66,7,112,148,194,13,224,43,66,35,74,67,66,7,112,148,194,0,128,59,66,66,190,61,66,7,112,148,194,13,32,75,66,57,52,60,66,7,112,148,194,0,192,90,66,236,175,53,66,7,112,148,194,13,96,106,66,160,90,49,66,7,112,148,194,0,0,122,66,56,231,43,66,7,112,148,194,7,208,132,66,175,229,37,66,7,112,148,194,0,160,140,66,77,179,29,66,7,112,148,194,7,112,148,66,136,99,22,66,7,112,148,194,0,64,156,66,100,76,23,66,7,112,148,194,7,16,164,66,202,212,27,66,7,112,148,194,0,224,171,66,141,151,32,66,7,112,148,194,7,176,179,66,252,105,36,66,7,112,148,194,0,128,187,66,37,134,34,66,7,112,148,194,7,80,195,66,95,88,32,66,7,112,148,194,66,32,203,66,40,79,33,66,7,112,148,194,33,240,210,66,75,42,32,66,7,112,148,194,0,192,218,66,162,52,32,66,7,112,148,194,223,143,226,66,138,240,29,66,7,112,148,194,66,96,234,66,120,92,30,66,7,112,148,194,33,48,242,66,1,158,32,66,7,112,148,194,0,0,250,66,158,94,33,66,7,112,148,194,240,231,0,67,178,29,39,66,7,112,148,194,33,208,4,67,139,253,37,66,7,112,148,194,16,184,8,67,10,151,36,66,7,112,148,194,0,160,12,67,244,61,27,66,7,112,148,194,240,135,16,67,4,86,15,66,7,112,148,194,33,112,20,67,211,141,10,66,7,112,148,194,16,88,24,67,208,213,6,66,7,112,148,194,0,64,28,67,212,218,2,66,7,112,148,194,240,39,32,67,45,50,246,65,7,112,148,194,33,16,36,67,66,96,225,65,7,112,148,194,16,248,39,67,122,37,217,65,7,112,148,194,0,224,43,67,100,204,213,65,7,112,148,194,240,199,47,67,224,62,206,65,7,112,148,194,33,176,51,67,163,1,199,65,7,112,148,194,16,152,55,67,197,254,187,65,7,112,148,194,0,128,59,67,52,145,186,65,7,112,148,194,240,103,63,67,131,209,178,65,7,112,148,194,33,80,67,67,184,158,162,65,7,112,148,194,16,56,71,67,115,87,138,65,7,112,148,194,0,32,75,67,17,199,112,65,7,112,148,194,240,7,79,67,134,90,68,65,7,112,148,194,33,240,82,67,17,158,25,65,7,112,148,194,16,216,86,67,202,166,235,64,7,112,148,194,0,192,90,67,242,205,232,64,7,112,148,194,240,167,94,67,142,192,5,65,7,112,148,194,33,144,98,67,246,238,2,65,7,112,148,194,16,120,102,67,20,203,15,65,7,112,148,194,0,96,106,67,136,174,15,65,7,112,148,194,240,71,110,67,91,136,16,65,7,112,148,194,33,48,114,67,173,47,14,65,7,112,148,194,16,24,118,67,241,17,10,65,7,112,148,194,0,0,122,67,179,234,26,65,7,112,148,194,0,0,122,64,196,194,89,66,0,64,156,194,0,0,250,64,195,53,84,66,0,64,156,194,52,128,59,65,177,225,76,66,0,64,156,194,0,0,122,65,129,230,66,66,0,64,156,194,26,64,156,65,184,239,55,66,0,64,156,194,0,128,187,65,63,23,52,66,0,64,156,194,26,192,218,65,86,61,53,66,0,64,156,194,0,0,250,65,164,176,55,66,0,64,156,194,13,160,12,66,195,53,59,66,0,64,156,194,0,64,28,66,164,95,59,66,0,64,156,194,13,224,43,66,117,2,56,66,0,64,156,194,0,128,59,66,232,170,54,66,0,64,156,194,13,32,75,66,127,217,53,66,0,64,156,194,0,192,90,66,70,212,45,66,0,64,156,194,13,96,106,66,91,130,40,66,0,64,156,194,0,0,122,66,3,9,36,66,0,64,156,194,7,208,132,66,57,150,27,66,0,64,156,194,0,160,140,66,12,2,24,66,0,64,156,194,7,112,148,66,224,28,18,66,0,64,156,194,0,64,156,66,25,51,20,66,0,64,156,194,7,16,164,66,27,94,21,66,0,64,156,194,0,224,171,66,34,108,26,66,0,64,156,194,7,176,179,66,196,2,31,66,0,64,156,194,0,128,187,66,187,103,33,66,0,64,156,194,7,80,195,66,129,196,34,66,0,64,156,194,66,32,203,66,43,24,35,66,0,64,156,194,33,240,210,66,235,51,33,66,0,64,156,194,0,192,218,66,142,53,29,66,0,64,156,194,223,143,226,66,48,140,28,66,0,64,156,194,66,96,234,66,55,137,31,66,0,64,156,194,33,48,242,66,5,69,34,66,0,64,156,194,0,0,250,66,220,70,35,66,0,64,156,194,240,231,0,67,111,146,39,66,0,64,156,194,33,208,4,67,116,117,41,66,0,64,156,194,16,184,8,67,100,251,36,66,0,64,156,194,0,160,12,67,91,211,26,66,0,64,156,194,240,135,16,67,33,223,19,66,0,64,156,194,33,112,20,67,184,30,16,66,0,64,156,194,16,88,24,67,120,250,7,66,0,64,156,194,0,64,28,67,220,232,0,66,0,64,156,194,240,39,32,67,193,202,243,65,0,64,156,194,33,16,36,67,140,202,227,65,0,64,156,194,16,248,39,67,168,198,217,65,0,64,156,194,0,224,43,67,74,140,213,65,0,64,156,194,240,199,47,67,204,127,200,65,0,64,156,194,33,176,51,67,199,75,193,65,0,64,156,194,16,152,55,67,11,36,192,65,0,64,156,194,0,128,59,67,159,77,192,65,0,64,156,194,240,103,63,67,216,112,179,65,0,64,156,194,33,80,67,67,147,169,157,65,0,64,156,194,16,56,71,67,147,186,136,65,0,64,156,194,0,32,75,67,68,139,108,65,0,64,156,194,240,7,79,67,209,34,62,65,0,64,156,194,33,240,82,67,237,141,21,65,0,64,156,194,16,216,86,67,78,98,231,64,0,64,156,194,0,192,90,67,231,82,253,64,0,64,156,194,240,167,94,67,254,38,11,65,0,64,156,194,33,144,98,67,89,250,8,65,0,64,156,194,16,120,102,67,212,212,29,65,0,64,156,194,0,96,106,67,157,58,20,65,0,64,156,194,240,71,110,67,126,152,7,65,0,64,156,194,33,48,114,67,208,213,250,64,0,64,156,194,16,24,118,67,198,80,250,64,0,64,156,194,0,0,122,67,225,250,10,65,0,64,156,194,0,0,122,64,199,203,79,66,7,16,164,194,0,0,250,64,174,118,72,66,7,16,164,194,52,128,59,65,118,160,67,66,7,16,164,194,0,0,122,65,26,145,58,66,7,16,164,194,26,64,156,65,61,74,50,66,7,16,164,194,0,128,187,65,113,189,45,66,7,16,164,194,26,192,218,65,25,179,46,66,7,16,164,194,0,0,250,65,15,92,51,66,7,16,164,194,13,160,12,66,232,25,52,66,7,16,164,194,0,64,28,66,27,239,50,66,7,16,164,194,13,224,43,66,68,203,49,66,7,16,164,194,0,128,59,66,72,80,51,66,7,16,164,194,13,32,75,66,3,56,46,66,7,16,164,194,0,192,90,66,10,232,36,66,7,16,164,194,13,96,106,66,235,226,33,66,7,16,164,194,0,0,122,66,145,190,25,66,7,16,164,194,7,208,132,66,238,107,17,66,7,16,164,194,0,160,140,66,239,73,14,66,7,16,164,194,7,112,148,66,17,7,12,66,7,16,164,194,0,64,156,66,203,80,15,66,7,16,164,194,7,16,164,66,138,95,20,66,7,16,164,194,0,224,171,66,56,103,24,66,7,16,164,194,7,176,179,66,50,213,27,66,7,16,164,194,0,128,187,66,231,76,32,66,7,16,164,194,7,80,195,66,121,152,33,66,7,16,164,194,66,32,203,66,171,254,32,66,7,16,164,194,33,240,210,66,144,177,31,66,7,16,164,194,0,192,218,66,93,28,32,66,7,16,164,194,223,143,226,66,167,168,34,66,7,16,164,194,66,96,234,66,143,194,34,66,7,16,164,194,33,48,242,66,143,36,35,66,7,16,164,194,0,0,250,66,116,70,38,66,7,16,164,194,240,231,0,67,16,88,39,66,7,16,164,194,33,208,4,67,238,107,38,66,7,16,164,194,16,184,8,67,171,126,30,66,7,16,164,194,0,160,12,67,188,180,26,66,7,16,164,194,240,135,16,67,205,251,19,66,7,16,164,194,33,112,20,67,55,73,15,66,7,16,164,194,16,88,24,67,45,50,11,66,7,16,164,194,0,64,28,67,142,245,4,66,7,16,164,194,240,39,32,67,140,74,246,65,7,16,164,194,33,16,36,67,186,107,229,65,7,16,164,194,16,248,39,67,20,63,213,65,7,16,164,194,0,224,43,67,39,160,206,65,7,16,164,194,240,199,47,67,121,88,198,65,7,16,164,194,33,176,51,67,92,160,178,65,7,16,164,194,16,152,55,67,50,85,185,65,7,16,164,194,0,128,59,67,118,96,185,65,7,16,164,194,240,103,63,67,184,175,170,65,7,16,164,194,33,80,67,67,175,148,150,65,7,16,164,194,16,56,71,67,118,96,132,65,7,16,164,194,0,32,75,67,154,119,103,65,7,16,164,194,240,7,79,67,235,115,50,65,7,16,164,194,33,240,82,67,208,138,4,65,7,16,164,194,16,216,86,67,193,98,0,65,7,16,164,194,0,192,90,67,254,154,0,65,7,16,164,194,240,167,94,67,13,108,4,65,7,16,164,194,33,144,98,67,49,95,2,65,7,16,164,194,16,120,102,67,234,62,7,65,7,16,164,194,0,96,106,67,113,131,3,65,7,16,164,194,240,71,110,67,45,9,4,65,7,16,164,194,33,48,114,67,53,123,245,64,7,16,164,194,16,24,118,67,179,169,0,65,7,16,164,194,0,0,122,67,28,235,9,65,7,16,164,194,0,0,122,64,43,7,72,66,0,224,171,194,0,0,250,64,83,214,65,66,0,224,171,194,52,128,59,65,220,23,56,66,0,224,171,194,0,0,122,65,239,56,48,66,0,224,171,194,26,64,156,65,97,84,41,66,0,224,171,194,0,128,187,65,194,151,39,66,0,224,171,194,26,192,218,65,137,146,41,66,0,224,171,194,0,0,250,65,17,118,44,66,0,224,171,194,13,160,12,66,150,131,44,66,0,224,171,194,0,64,28,66,33,176,45,66,0,224,171,194,13,224,43,66,179,42,46,66,0,224,171,194,0,128,59,66,232,234,40,66,0,224,171,194,13,32,75,66,144,160,35,66,0,224,171,194,0,192,90,66,186,171,29,66,0,224,171,194,13,96,106,66,174,7,21,66,0,224,171,194,0,0,122,66,207,230,12,66,0,224,171,194,7,208,132,66,69,135,7,66,0,224,171,194,0,160,140,66,198,156,4,66,0,224,171,194,7,112,148,66,75,25,9,66,0,224,171,194,0,64,156,66,96,101,14,66,0,224,171,194,7,16,164,66,43,7,20,66,0,224,171,194,0,224,171,66,216,1,22,66,0,224,171,194,7,176,179,66,231,140,24,66,0,224,171,194,0,128,187,66,148,199,27,66,0,224,171,194,7,80,195,66,59,176,27,66,0,224,171,194,66,32,203,66,8,108,27,66,0,224,171,194,33,240,210,66,147,58,30,66,0,224,171,194,0,192,218,66,14,126,32,66,0,224,171,194,223,143,226,66,102,247,34,66,0,224,171,194,66,96,234,66,34,142,33,66,0,224,171,194,33,48,242,66,158,175,34,66,0,224,171,194,0,0,250,66,254,229,34,66,0,224,171,194,240,231,0,67,25,115,34,66,0,224,171,194,33,208,4,67,113,189,30,66,0,224,171,194,16,184,8,67,52,209,28,66,0,224,171,194,0,160,12,67,245,185,24,66,0,224,171,194,240,135,16,67,90,100,18,66,0,224,171,194,33,112,20,67,173,41,17,66,0,224,171,194,16,88,24,67,102,136,11,66,0,224,171,194,0,64,28,67,15,156,5,66,0,224,171,194,240,39,32,67,108,248,249,65,0,224,171,194,33,16,36,67,208,85,233,65,0,224,171,194,16,248,39,67,161,214,213,65,0,224,171,194,0,224,43,67,193,185,194,65,0,224,171,194,240,199,47,67,25,226,187,65,0,224,171,194,33,176,51,67,122,199,170,65,0,224,171,194,16,152,55,67,198,92,170,65,0,224,171,194,0,128,59,67,28,235,173,65,0,224,171,194,240,103,63,67,217,95,163,65,0,224,171,194,33,80,67,67,225,139,143,65,0,224,171,194,16,56,71,67,71,3,117,65,0,224,171,194,0,32,75,67,7,240,80,65,0,224,171,194,240,7,79,67,214,255,19,65,0,224,171,194,33,240,82,67,252,227,229,64,0,224,171,194,16,216,86,67,96,31,243,64,0,224,171,194,0,192,90,67,24,190,0,65,0,224,171,194,240,167,94,67,238,66,0,65,0,224,171,194,33,144,98,67,161,103,254,64,0,224,171,194,16,120,102,67,56,161,251,64,0,224,171,194,0,96,106,67,216,245,198,64,0,224,171,194,240,71,110,67,250,213,236,64,0,224,171,194,33,48,114,67,155,90,243,64,0,224,171,194,16,24,118,67,104,174,216,64,0,224,171,194,0,0,122,67,186,20,252,64,0,224,171,194,0,0,122,64,110,163,62,66,7,176,179,194,0,0,250,64,135,167,55,66,7,176,179,194,52,128,59,65,176,50,48,66,7,176,179,194,0,0,122,65,1,13,42,66,7,176,179,194,26,64,156,65,254,101,38,66,7,176,179,194,0,128,187,65,34,14,37,66,7,176,179,194,26,192,218,65,157,17,37,66,7,176,179,194,0,0,250,65,42,41,38,66,7,176,179,194,13,160,12,66,100,59,42,66,7,176,179,194,0,64,28,66,195,245,41,66,7,176,179,194,13,224,43,66,183,34,41,66,7,176,179,194,0,128,59,66,170,194,35,66,7,176,179,194,13,32,75,66,59,240,26,66,7,176,179,194,0,192,90,66,250,126,18,66,7,176,179,194,13,96,106,66,140,202,12,66,7,176,179,194,0,0,122,66,116,181,11,66,7,176,179,194,7,208,132,66,111,146,3,66,7,176,179,194,0,160,140,66,241,163,1,66,7,176,179,194,7,112,148,66,244,236,7,66,7,176,179,194,0,64,156,66,174,135,15,66,7,176,179,194,7,16,164,66,125,127,20,66,7,176,179,194,0,224,171,66,228,148,21,66,7,176,179,194,7,176,179,66,21,12,24,66,7,176,179,194,0,128,187,66,159,43,22,66,7,176,179,194,7,80,195,66,118,79,24,66,7,176,179,194,66,32,203,66,252,233,23,66,7,176,179,194,33,240,210,66,60,142,26,66,7,176,179,194,0,192,218,66,209,34,29,66,7,176,179,194,223,143,226,66,196,2,32,66,7,176,179,194,66,96,234,66,253,246,36,66,7,176,179,194,33,48,242,66,159,235,36,66,7,176,179,194,0,0,250,66,94,11,35,66,7,176,179,194,240,231,0,67,108,248,30,66,7,176,179,194,33,208,4,67,7,142,28,66,7,176,179,194,16,184,8,67,250,254,25,66,7,176,179,194,0,160,12,67,35,219,22,66,7,176,179,194,240,135,16,67,54,141,18,66,7,176,179,194,33,112,20,67,120,122,16,66,7,176,179,194,16,88,24,67,231,204,14,66,7,176,179,194,0,64,28,67,126,157,7,66,7,176,179,194,240,39,32,67,75,72,0,66,7,176,179,194,33,16,36,67,207,247,237,65,7,176,179,194,16,248,39,67,234,149,211,65,7,176,179,194,0,224,43,67,210,111,190,65,7,176,179,194,240,199,47,67,113,189,175,65,7,176,179,194,33,176,51,67,218,155,165,65,7,176,179,194,16,152,55,67,245,91,165,65,7,176,179,194,0,128,59,67,215,52,161,65,7,176,179,194,240,103,63,67,147,152,142,65,7,176,179,194,33,80,67,67,94,58,130,65,7,176,179,194,16,56,71,67,134,90,87,65,7,176,179,194,0,32,75,67,87,190,24,65,7,176,179,194,240,7,79,67,101,223,192,64,7,176,179,194,33,240,82,67,239,114,188,64,7,176,179,194,16,216,86,67,197,56,207,64,7,176,179,194,0,192,90,67,186,102,198,64,7,176,179,194,240,167,94,67,128,183,194,64,7,176,179,194,33,144,98,67,93,22,219,64,7,176,179,194,16,120,102,67,241,244,202,64,7,176,179,194,0,96,106,67,102,49,186,64,7,176,179,194,240,71,110,67,172,139,188,64,7,176,179,194,33,48,114,67,171,231,218,64,7,176,179,194,16,24,118,67,87,96,202,64,7,176,179,194,0,0,122,67,212,101,201,64,7,176,179,194,0,0,122,64,61,172,53,66,0,128,187,194,0,0,250,64,254,67,50,66,0,128,187,194,52,128,59,65,50,21,48,66,0,128,187,194,0,0,122,65,109,5,41,66,0,128,187,194,26,64,156,65,149,148,35,66,0,128,187,194,0,128,187,65,229,16,35,66,0,128,187,194,26,192,218,65,106,77,34,66,0,128,187,194,0,0,250,65,249,49,37,66,0,128,187,194,13,160,12,66,171,190,34,66,0,128,187,194,0,64,28,66,30,103,34,66,0,128,187,194,13,224,43,66,177,33,30,66,0,128,187,194,0,128,59,66,19,242,24,66,0,128,187,194,13,32,75,66,169,147,16,66,0,128,187,194,0,192,90,66,242,240,10,66,0,128,187,194,13,96,106,66,131,175,9,66,0,128,187,194,0,0,122,66,171,207,7,66,0,128,187,194,7,208,132,66,239,248,1,66,0,128,187,194,0,160,140,66,217,14,2,66,0,128,187,194,7,112,148,66,111,146,5,66,0,128,187,194,0,64,156,66,251,220,11,66,0,128,187,194,7,16,164,66,196,113,17,66,0,128,187,194,0,224,171,66,162,69,22,66,0,128,187,194,7,176,179,66,74,12,20,66,0,128,187,194,0,128,187,66,138,142,22,66,0,128,187,194,7,80,195,66,151,191,25,66,0,128,187,194,66,32,203,66,211,124,25,66,0,128,187,194,33,240,210,66,187,120,28,66,0,128,187,194,0,192,218,66,52,17,26,66,0,128,187,194,223,143,226,66,68,41,32,66,0,128,187,194,66,96,234,66,42,233,32,66,0,128,187,194,33,48,242,66,16,152,35,66,0,128,187,194,0,0,250,66,137,193,32,66,0,128,187,194,240,231,0,67,37,198,31,66,0,128,187,194,33,208,4,67,199,186,30,66,0,128,187,194,16,184,8,67,66,96,27,66,0,128,187,194,0,160,12,67,228,212,21,66,0,128,187,194,240,135,16,67,154,89,19,66,0,128,187,194,33,112,20,67,88,10,17,66,0,128,187,194,16,88,24,67,246,151,14,66,0,128,187,194,0,64,28,67,76,183,8,66,0,128,187,194,240,39,32,67,170,66,0,66,0,128,187,194,33,16,36,67,18,37,229,65,0,128,187,194,16,248,39,67,191,253,200,65,0,128,187,194,0,224,43,67,52,145,179,65,0,128,187,194,240,199,47,67,165,61,156,65,0,128,187,194,33,176,51,67,46,127,147,65,0,128,187,194,16,152,55,67,93,220,148,65,0,128,187,194,0,128,59,67,109,231,139,65,0,128,187,194,240,103,63,67,0,145,114,65,0,128,187,194,33,80,67,67,177,80,80,65,0,128,187,194,16,56,71,67,240,133,23,65,0,128,187,194,0,32,75,67,160,26,179,64,0,128,187,194,240,7,79,67,146,5,102,64,0,128,187,194,33,240,82,67,229,68,137,64,0,128,187,194,16,216,86,67,194,250,134,64,0,128,187,194,0,192,90,67,217,177,131,64,0,128,187,194,240,167,94,67,145,15,173,64,0,128,187,194,33,144,98,67,235,255,177,64,0,128,187,194,16,120,102,67,88,57,171,64,0,128,187,194,0,96,106,67,38,199,167,64,0,128,187,194,240,71,110,67,24,96,155,64,0,128,187,194,33,48,114,67,109,231,160,64,0,128,187,194,16,24,118,67,126,87,170,64,0,128,187,194,0,0,122,67,57,11,179,64,0,128,187,194,0,0,122,64,212,218,51,66,7,80,195,194,0,0,250,64,13,32,51,66,7,80,195,194,52,128,59,65,248,211,45,66,7,80,195,194,0,0,122,65,177,33,42,66,7,80,195,194,26,64,156,65,37,6,34,66,7,80,195,194,0,128,187,65,39,66,31,66,7,80,195,194,26,192,218,65,227,229,32,66,7,80,195,194,0,0,250,65,238,252,29,66,7,80,195,194,13,160,12,66,196,66,27,66,7,80,195,194,0,64,28,66,198,92,25,66,7,80,195,194,13,224,43,66,174,71,22,66,7,80,195,194,0,128,59,66,79,64,17,66,7,80,195,194,13,32,75,66,42,233,8,66,7,80,195,194,0,192,90,66,166,91,5,66,7,80,195,194,13,96,106,66,84,227,3,66,7,80,195,194,0,0,122,66,168,134,2,66,7,80,195,194,7,208,132,66,28,235,1,66,7,80,195,194,0,160,140,66,119,45,253,65,7,80,195,194,7,112,148,66,4,231,0,66,7,80,195,194,0,64,156,66,173,58,7,66,7,80,195,194,7,16,164,66,82,9,15,66,7,80,195,194,0,224,171,66,26,0,18,66,7,80,195,194,7,176,179,66,44,165,19,66,7,80,195,194,0,128,187,66,196,194,22,66,7,80,195,194,7,80,195,66,113,219,23,66,7,80,195,194,66,32,203,66,137,210,27,66,7,80,195,194,33,240,210,66,173,186,30,66,7,80,195,194,0,192,218,66,128,247,27,66,7,80,195,194,223,143,226,66,75,89,32,66,7,80,195,194,66,96,234,66,143,194,33,66,7,80,195,194,33,48,242,66,52,192,30,66,7,80,195,194,0,0,250,66,32,1,28,66,7,80,195,194,240,231,0,67,119,126,31,66,7,80,195,194,33,208,4,67,130,51,30,66,7,80,195,194,16,184,8,67,213,248,22,66,7,80,195,194,0,160,12,67,92,224,17,66,7,80,195,194,240,135,16,67,188,180,16,66,7,80,195,194,33,112,20,67,88,202,15,66,7,80,195,194,16,88,24,67,215,116,12,66,7,80,195,194,0,64,28,67,163,1,5,66,7,80,195,194,240,39,32,67,100,59,245,65,7,80,195,194,33,16,36,67,186,218,217,65,7,80,195,194,16,248,39,67,20,46,187,65,7,80,195,194,0,224,43,67,170,96,165,65,7,80,195,194,240,199,47,67,233,38,147,65,7,80,195,194,33,176,51,67,20,46,141,65,7,80,195,194,16,152,55,67,97,212,128,65,7,80,195,194,0,128,59,67,14,45,108,65,7,80,195,194,240,103,63,67,250,237,67,65,7,80,195,194,33,80,67,67,173,238,22,65,7,80,195,194,16,56,71,67,119,45,221,64,7,80,195,194,0,32,75,67,72,109,136,64,7,80,195,194,240,7,79,67,37,88,94,64,7,80,195,194,33,240,82,67,7,235,111,64,7,80,195,194,16,216,86,67,161,214,112,64,7,80,195,194,0,192,90,67,64,135,115,64,7,80,195,194,240,167,94,67,115,128,135,64,7,80,195,194,33,144,98,67,67,115,109,64,7,80,195,194,16,120,102,67,115,104,113,64,7,80,195,194,0,96,106,67,122,112,115,64,7,80,195,194,240,71,110,67,165,73,109,64,7,80,195,194,33,48,114,67,109,168,135,64,7,80,195,194,16,24,118,67,81,247,140,64,7,80,195,194,0,0,122,67,124,97,144,64,7,80,195,194,0,0,122,64,217,31,50,66,66,32,203,194,0,0,250,64,34,172,49,66,66,32,203,194,52,128,59,65,19,242,45,66,66,32,203,194,0,0,122,65,55,9,41,66,66,32,203,194,26,64,156,65,36,57,36,66,66,32,203,194,0,128,187,65,151,255,31,66,66,32,203,194,26,192,218,65,26,145,29,66,66,32,203,194,0,0,250,65,194,70,30,66,66,32,203,194,13,160,12,66,9,91,20,66,66,32,203,194,0,64,28,66,233,183,17,66,66,32,203,194,13,224,43,66,8,44,18,66,66,32,203,194,0,128,59,66,250,190,13,66,66,32,203,194,13,32,75,66,215,116,5,66,66,32,203,194,0,192,90,66,105,64,0,66,66,32,203,194,13,96,106,66,51,179,0,66,66,32,203,194,0,0,122,66,154,25,3,66,66,32,203,194,7,208,132,66,104,17,253,65,66,32,203,194,0,160,140,66,129,102,0,66,66,32,203,194,7,112,148,66,198,92,2,66,66,32,203,194,0,64,156,66,206,153,4,66,66,32,203,194,7,16,164,66,239,201,12,66,66,32,203,194,0,224,171,66,132,13,16,66,66,32,203,194,7,176,179,66,118,96,21,66,66,32,203,194,0,128,187,66,144,113,22,66,66,32,203,194,7,80,195,66,241,163,24,66,66,32,203,194,66,32,203,66,123,20,31,66,66,32,203,194,33,240,210,66,171,190,30,66,66,32,203,194,0,192,218,66,125,238,29,66,66,32,203,194,223,143,226,66,159,141,32,66,66,32,203,194,66,96,234,66,46,144,35,66,66,32,203,194,33,48,242,66,36,104,29,66,66,32,203,194,0,0,250,66,120,186,27,66,66,32,203,194,240,231,0,67,202,3,29,66,66,32,203,194,33,208,4,67,77,243,25,66,66,32,203,194,16,184,8,67,182,179,18,66,66,32,203,194,0,160,12,67,7,31,13,66,66,32,203,194,240,135,16,67,105,128,15,66,66,32,203,194,33,112,20,67,186,26,17,66,66,32,203,194,16,88,24,67,66,32,11,66,66,32,203,194,0,64,28,67,151,16,1,66,66,32,203,194,240,39,32,67,132,141,238,65,66,32,203,194,33,16,36,67,169,36,207,65,66,32,203,194,16,248,39,67,127,106,180,65,66,32,203,194,0,224,43,67,126,140,162,65,66,32,203,194,240,199,47,67,103,85,138,65,66,32,203,194,33,176,51,67,221,164,134,65,66,32,203,194,16,152,55,67,3,120,107,65,66,32,203,194,0,128,59,67,114,249,64,65,66,32,203,194,240,103,63,67,67,144,30,65,66,32,203,194,33,80,67,67,158,12,231,64,66,32,203,194,16,56,71,67,53,123,175,64,66,32,203,194,0,32,75,67,224,103,66,64,66,32,203,194,240,7,79,67,238,95,65,64,66,32,203,194,33,240,82,67,52,191,56,64,66,32,203,194,16,216,86,67,249,160,69,64,66,32,203,194,0,192,90,67,124,10,92,64,66,32,203,194,240,167,94,67,141,127,101,64,66,32,203,194,33,144,98,67,93,109,75,64,66,32,203,194,16,120,102,67,207,44,31,64,66,32,203,194,0,96,106,67,156,138,42,64,66,32,203,194,240,71,110,67,210,29,4,64,66,32,203,194,33,48,114,67,129,207,31,64,66,32,203,194,16,24,118,67,21,87,67,64,66,32,203,194,0,0,122,67,91,66,108,64,66,32,203,194,0,0,122,64,235,98,51,66,33,240,210,194,0,0,250,64,165,61,49,66,33,240,210,194,52,128,59,65,12,147,47,66,33,240,210,194,0,0,122,65,252,233,44,66,33,240,210,194,26,64,156,65,31,244,42,66,33,240,210,194,0,128,187,65,125,46,37,66,33,240,210,194,26,192,218,65,218,236,29,66,33,240,210,194,0,0,250,65,15,203,25,66,33,240,210,194,13,160,12,66,60,78,15,66,33,240,210,194,0,64,28,66,122,101,12,66,33,240,210,194,13,224,43,66,136,197,12,66,33,240,210,194,0,128,59,66,181,55,9,66,33,240,210,194,13,32,75,66,208,85,251,65,33,240,210,194,0,192,90,66,151,144,246,65,33,240,210,194,13,96,106,66,84,82,250,65,33,240,210,194,0,0,122,66,201,37,1,66,33,240,210,194,7,208,132,66,100,12,2,66,33,240,210,194,0,160,140,66,135,22,3,66,33,240,210,194,7,112,148,66,54,43,2,66,33,240,210,194,0,64,156,66,208,51,8,66,33,240,210,194,7,16,164,66,37,245,13,66,33,240,210,194,0,224,171,66,18,3,19,66,33,240,210,194,7,176,179,66,170,194,22,66,33,240,210,194,0,128,187,66,90,100,23,66,33,240,210,194,7,80,195,66,189,227,27,66,33,240,210,194,66,32,203,66,35,74,32,66,33,240,210,194,33,240,210,66,208,243,30,66,33,240,210,194,0,192,218,66,223,143,29,66,33,240,210,194,223,143,226,66,73,110,31,66,33,240,210,194,66,96,234,66,153,251,33,66,33,240,210,194,33,48,242,66,76,55,30,66,33,240,210,194,0,0,250,66,82,39,28,66,33,240,210,194,240,231,0,67,69,216,24,66,33,240,210,194,33,208,4,67,61,219,18,66,33,240,210,194,16,184,8,67,170,241,10,66,33,240,210,194,0,160,12,67,247,228,8,66,33,240,210,194,240,135,16,67,34,172,13,66,33,240,210,194,33,112,20,67,75,200,13,66,33,240,210,194,16,88,24,67,111,193,5,66,33,240,210,194,0,64,28,67,51,196,239,65,33,240,210,194,240,39,32,67,226,233,217,65,33,240,210,194,33,16,36,67,42,186,194,65,33,240,210,194,16,248,39,67,231,140,179,65,33,240,210,194,0,224,43,67,196,66,156,65,33,240,210,194,240,199,47,67,247,245,135,65,33,240,210,194,33,176,51,67,236,81,108,65,33,240,210,194,16,152,55,67,213,231,82,65,33,240,210,194,0,128,59,67,7,240,37,65,33,240,210,194,240,103,63,67,16,93,227,64,33,240,210,194,33,80,67,67,206,252,173,64,33,240,210,194,16,56,71,67,66,178,86,64,33,240,210,194,0,32,75,67,169,106,26,64,33,240,210,194,240,7,79,67,228,160,22,64,33,240,210,194,33,240,82,67,63,82,18,64,33,240,210,194,16,216,86,67,79,204,206,63,33,240,210,194,0,192,90,67,126,24,39,64,33,240,210,194,240,167,94,67,23,43,22,64,33,240,210,194,33,144,98,67,53,65,188,63,33,240,210,194,16,120,102,67,16,88,33,63,33,240,210,194,0,96,106,67,240,21,89,63,33,240,210,194,240,71,110,67,2,14,173,63,33,240,210,194,33,48,114,67,226,117,13,64,33,240,210,194,16,24,118,67,195,216,64,64,33,240,210,194,0,0,122,67,230,34,72,64,33,240,210,194,0,0,122,64,69,152,53,66,0,192,218,194,0,0,250,64,91,130,50,66,0,192,218,194,52,128,59,65,5,69,50,66,0,192,218,194,0,0,122,65,255,50,49,66,0,192,218,194,26,64,156,65,56,39,46,66,0,192,218,194,0,128,187,65,86,31,40,66,0,192,218,194,26,192,218,65,195,211,34,66,0,192,218,194,0,0,250,65,75,153,30,66,0,192,218,194,13,160,12,66,73,221,16,66,0,192,218,194,0,64,28,66,242,129,11,66,0,192,218,194,13,224,43,66,172,203,12,66,0,192,218,194,0,128,59,66,183,226,7,66,0,192,218,194,13,32,75,66,179,251,247,65,0,192,218,194,0,192,90,66,40,126,255,65,0,192,218,194,13,96,106,66,160,154,252,65,0,192,218,194,0,0,122,66,117,147,252,65,0,192,218,194,7,208,132,66,103,68,4,66,0,192,218,194,0,160,140,66,222,147,6,66,0,192,218,194,7,112,148,66,210,47,2,66,0,192,218,194,0,64,156,66,12,19,9,66,0,192,218,194,7,16,164,66,210,64,16,66,0,192,218,194,0,224,171,66,68,58,22,66,0,192,218,194,7,176,179,66,86,61,26,66,0,192,218,194,0,128,187,66,230,174,26,66,0,192,218,194,7,80,195,66,240,5,29,66,0,192,218,194,66,32,203,66,247,164,31,66,0,192,218,194,33,240,210,66,196,177,31,66,0,192,218,194,0,192,218,66,51,68,30,66,0,192,218,194,223,143,226,66,224,156,32,66,0,192,218,194,66,96,234,66,91,130,35,66,0,192,218,194,33,48,242,66,49,136,32,66,0,192,218,194,0,0,250,66,90,100,25,66,0,192,218,194,240,231,0,67,107,171,19,66,0,192,218,194,33,208,4,67,10,151,11,66,0,192,218,194,16,184,8,67,136,163,3,66,0,192,218,194,0,160,12,67,153,170,2,66,0,192,218,194,240,135,16,67,153,123,4,66,0,192,218,194,33,112,20,67,220,104,2,66,0,192,218,194,16,88,24,67,81,235,248,65,0,192,218,194,0,64,28,67,217,78,222,65,0,192,218,194,240,39,32,67,100,187,199,65,0,192,218,194,33,16,36,67,223,79,182,65,0,192,218,194,16,248,39,67,244,236,163,65,0,192,218,194,0,224,43,67,238,235,145,65,0,192,218,194,240,199,47,67,237,13,127,65,0,192,218,194,33,176,51,67,44,101,75,65,0,192,218,194,16,152,55,67,202,84,47,65,0,192,218,194,0,128,59,67,193,28,239,64,0,192,218,194,240,103,63,67,60,20,156,64,0,192,218,194,33,80,67,67,6,76,50,64,0,192,218,194,16,56,71,67,157,99,196,63,0,192,218,194,0,32,75,67,111,18,207,63,0,192,218,194,240,7,79,67,229,208,226,63,0,192,218,194,33,240,82,67,177,196,147,63,0,192,218,194,16,216,86,67,209,92,175,62,0,192,218,194,0,192,90,67,90,155,2,63,0,192,218,194,240,167,94,67,88,140,130,62,0,192,218,194,33,144,98,67,120,185,104,190,0,192,218,194,16,120,102,67,51,51,87,191,0,192,218,194,0,96,106,67,125,118,144,190,0,192,218,194,240,71,110,67,100,146,217,62,0,192,218,194,33,48,114,67,182,45,222,63,0,192,218,194,16,24,118,67,130,173,230,63,0,192,218,194,0,0,122,67,53,239,204,63,0,192,218,194,0,0,122,64,150,242,61,66,223,143,226,194,0,0,250,64,37,70,57,66,223,143,226,194,52,128,59,65,227,246,57,66,223,143,226,194,0,0,122,65,157,0,53,66,223,143,226,194,26,64,156,65,244,44,47,66,223,143,226,194,0,128,187,65,192,108,42,66,223,143,226,194,26,192,218,65,107,171,38,66,223,143,226,194,0,0,250,65,18,20,30,66,223,143,226,194,13,160,12,66,174,182,18,66,223,143,226,194,0,64,28,66,28,107,15,66,223,143,226,194,13,224,43,66,14,15,13,66,223,143,226,194,0,128,59,66,81,90,4,66,223,143,226,194,13,32,75,66,151,16,249,65,223,143,226,194,0,192,90,66,168,70,255,65,223,143,226,194,13,96,106,66,111,146,252,65,223,143,226,194,0,0,122,66,241,116,1,66,223,143,226,194,7,208,132,66,253,7,5,66,223,143,226,194,0,160,140,66,34,189,4,66,223,143,226,194,7,112,148,66,76,166,6,66,223,143,226,194,0,64,156,66,255,161,14,66,223,143,226,194,7,16,164,66,19,50,19,66,223,143,226,194,0,224,171,66,251,250,23,66,223,143,226,194,7,176,179,66,64,211,26,66,223,143,226,194,0,128,187,66,11,228,31,66,223,143,226,194,7,80,195,66,98,144,30,66,223,143,226,194,66,32,203,66,247,134,32,66,223,143,226,194,33,240,210,66,207,119,32,66,223,143,226,194,0,192,218,66,109,69,32,66,223,143,226,194,223,143,226,66,21,157,32,66,223,143,226,194,66,96,234,66,235,34,35,66,223,143,226,194,33,48,242,66,38,83,29,66,223,143,226,194,0,0,250,66,173,186,24,66,223,143,226,194,240,231,0,67,79,94,20,66,223,143,226,194,33,208,4,67,243,223,11,66,223,143,226,194,16,184,8,67,4,167,2,66,223,143,226,194,0,160,12,67,73,174,247,65,223,143,226,194,240,135,16,67,228,131,248,65,223,143,226,194,33,112,20,67,45,50,237,65,223,143,226,194,16,88,24,67,117,19,220,65,223,143,226,194,0,64,28,67,34,125,199,65,223,143,226,194,240,39,32,67,253,246,180,65,223,143,226,194,33,16,36,67,167,232,160,65,223,143,226,194,16,248,39,67,189,227,143,65,223,143,226,194,0,224,43,67,105,0,129,65,223,143,226,194,240,199,47,67,29,201,100,65,223,143,226,194,33,176,51,67,183,209,54,65,223,143,226,194,16,152,55,67,123,235,8,65,223,143,226,194,0,128,59,67,84,169,192,64,223,143,226,194,240,103,63,67,27,13,76,64,223,143,226,194,33,80,67,67,124,39,198,63,223,143,226,194,16,56,71,67,241,18,183,60,223,143,226,194,0,32,75,67,146,96,165,189,223,143,226,194,240,7,79,67,78,122,215,190,223,143,226,194,33,240,82,67,184,4,8,191,223,143,226,194,16,216,86,67,230,5,172,191,223,143,226,194,0,192,90,67,53,36,18,192,223,143,226,194,240,167,94,67,20,174,15,192,223,143,226,194,33,144,98,67,46,173,14,192,223,143,226,194,16,120,102,67,199,128,188,191,223,143,226,194,0,96,106,67,152,47,11,191,223,143,226,194,240,71,110,67,105,173,200,190,223,143,226,194,33,48,114,67,136,71,138,190,223,143,226,194,16,24,118,67,159,143,38,191,223,143,226,194,0,0,122,67,6,99,228,61,223,143,226,194,0,0,122,64,7,142,65,66,66,96,234,194,0,0,250,64,25,4,64,66,66,96,234,194,52,128,59,65,60,125,59,66,66,96,234,194,0,0,122,65,131,0,54,66,66,96,234,194,26,64,156,65,37,117,45,66,66,96,234,194,0,128,187,65,63,87,41,66,66,96,234,194,26,192,218,65,243,159,36,66,66,96,234,194,0,0,250,65,196,177,28,66,66,96,234,194,13,160,12,66,52,64,24,66,66,96,234,194,0,64,28,66,38,228,17,66,66,96,234,194,13,224,43,66,77,51,11,66,66,96,234,194,0,128,59,66,140,10,2,66,66,96,234,194,13,32,75,66,249,15,253,65,66,96,234,194,0,192,90,66,130,226,252,65,66,96,234,194,13,96,106,66,156,51,1,66,66,96,234,194,0,0,122,66,180,200,2,66,66,96,234,194,7,208,132,66,156,132,5,66,66,96,234,194,0,160,140,66,223,224,7,66,66,96,234,194,7,112,148,66,53,175,11,66,66,96,234,194,0,64,156,66,12,19,19,66,66,96,234,194,7,16,164,66,6,18,23,66,66,96,234,194,0,224,171,66,5,69,23,66,66,96,234,194,7,176,179,66,181,38,25,66,66,96,234,194,0,128,187,66,221,117,30,66,66,96,234,194,7,80,195,66,3,248,30,66,66,96,234,194,66,32,203,66,43,216,35,66,66,96,234,194,33,240,210,66,163,146,35,66,66,96,234,194,0,192,218,66,38,164,34,66,66,96,234,194,223,143,226,66,139,44,33,66,66,96,234,194,66,96,234,66,239,120,31,66,66,96,234,194,33,48,242,66,209,98,28,66,66,96,234,194,0,0,250,66,128,136,20,66,66,96,234,194,240,231,0,67,188,22,14,66,66,96,234,194,33,208,4,67,144,160,7,66,66,96,234,194,16,184,8,67,21,12,1,66,66,96,234,194,0,160,12,67,244,236,238,65,66,96,234,194,240,135,16,67,251,92,225,65,66,96,234,194,33,112,20,67,45,50,217,65,66,96,234,194,16,88,24,67,113,44,196,65,66,96,234,194,0,64,28,67,208,85,176,65,66,96,234,194,240,39,32,67,241,99,159,65,66,96,234,194,33,16,36,67,0,128,141,65,66,96,234,194,16,248,39,67,129,4,121,65,66,96,234,194,0,224,43,67,146,203,88,65,66,96,234,194,240,199,47,67,232,106,52,65,66,96,234,194,33,176,51,67,151,86,15,65,66,96,234,194,16,152,55,67,183,122,225,64,66,96,234,194,0,128,59,67,97,195,154,64,66,96,234,194,240,103,63,67,96,171,48,64,66,96,234,194,33,80,67,67,142,174,66,62,66,96,234,194,16,56,71,67,237,241,14,191,66,96,234,194,0,32,75,67,84,58,132,191,66,96,234,194,240,7,79,67,134,61,11,192,66,96,234,194,33,240,82,67,172,173,244,191,66,96,234,194,16,216,86,67,243,2,64,192,66,96,234,194,0,192,90,67,135,138,136,192,66,96,234,194,240,167,94,67,215,18,165,192,66,96,234,194,33,144,98,67,168,169,93,192,66,96,234,194,16,120,102,67,14,74,10,192,66,96,234,194,0,96,106,67,48,42,189,191,66,96,234,194,240,71,110,67,250,97,228,191,66,96,234,194,33,48,114,67,224,103,128,191,66,96,234,194,16,24,118,67,106,106,253,191,66,96,234,194,0,0,122,67,79,204,18,192,66,96,234,194,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,128,0,0,0,129,0,2,0,129,0,0,0,129,0,2,0,130,0,4,0,130,0,2,0,130,0,4,0,131,0,6,0,131,0,4,0,131,0,6,0,132,0,8,0,132,0,6,0,132,0,8,0,133,0,10,0,133,0,8,0,133,0,10,0,134,0,12,0,134,0,10,0,134,0,12,0,135,0,14,0,135,0,12,0,135,0,14,0,136,0,16,0,136,0,14,0,136,0,16,0,137,0,18,0,137,0,16,0,137,0,18,0,138,0,20,0,138,0,18,0,138,0,20,0,139,0,22,0,139,0,20,0,139,0,22,0,140,0,24,0,140,0,22,0,140,0,24,0,141,0,26,0,141,0,24,0,141,0,26,0,142,0,28,0,142,0,26,0,142,0,28,0,143,0,30,0,143,0,28,0,143,0,30,0,144,0,32,0,144,0,30,0,144,0,32,0,145,0,34,0,145,0,32,0,145,0,34,0,146,0,36,0,146,0,34,0,146,0,36,0,147,0,38,0,147,0,36,0,147,0,38,0,148,0,40,0,148,0,38,0,148,0,40,0,149,0,42,0,149,0,40,0,149,0,42,0,150,0,44,0,150,0,42,0,150,0,44,0,151,0,46,0,151,0,44,0,151,0,46,0,152,0,48,0,152,0,46,0,152,0,48,0,153,0,50,0,153,0,48,0,153,0,50,0,154,0,52,0,154,0,50,0,154,0,52,0,155,0,54,0,155,0,52,0,155,0,54,0,156,0,56,0,156,0,54,0,156,0,56,0,157,0,58,0,157,0,56,0,157,0,58,0,158,0,60,0,158,0,58,0,158,0,60,0,159,0,62,0,159,0,60,0,159,0,62,0,160,0,64,0,160,0,62,0,160,0,64,0,161,0,66,0,161,0,64,0,161,0,66,0,162,0,68,0,162,0,66,0,162,0,68,0,163,0,70,0,163,0,68,0,163,0,70,0,164,0,72,0,164,0,70,0,164,0,72,0,165,0,74,0,165,0,72,0,165,0,74,0,166,0,76,0,166,0,74,0,166,0,76,0,167,0,78,0,167,0,76,0,167,0,78,0,168,0,80,0,168,0,78,0,168,0,80,0,169,0,82,0,169,0,80,0,169,0,82,0,170,0,84,0,170,0,82,0,170,0,84,0,171,0,86,0,171,0,84,0,171,0,86,0,172,0,88,0,172,0,86,0,172,0,88,0,173,0,90,0,173,0,88,0,173,0,90,0,174,0,92,0,174,0,90,0,174,0,92,0,175,0,94,0,175,0,92,0,175,0,94,0,176,0,96,0,176,0,94,0,176,0,96,0,177,0,98,0,177,0,96,0,177,0,98,0,178,0,100,0,178,0,98,0,178,0,100,0,179,0,102,0,179,0,100,0,179,0,102,0,180,0,104,0,180,0,102,0,180,0,104,0,181,0,106,0,181,0,104,0,181,0,106,0,182,0,108,0,182,0,106,0,182,0,108,0,183,0,110,0,183,0,108,0,183,0,110,0,184,0,112,0,184,0,110,0,184,0,112,0,185,0,114,0,185,0,112,0,185,0,114,0,186,0,116,0,186,0,114,0,186,0,116,0,187,0,118,0,187,0,116,0,187,0,118,0,188,0,120,0,188,0,118,0,188,0,120,0,189,0,122,0,189,0,120,0,189,0,122,0,190,0,124,0,190,0,122,0,190,0,124,0,191,0,126,0,191,0,124,0,192,0,128,0,193,0,129,0,193,0,128,0,193,0,129,0,194,0,130,0,194,0,129,0,194,0,130,0,195,0,131,0,195,0,130,0,195,0,131,0,196,0,132,0,196,0,131,0,196,0,132,0,197,0,133,0,197,0,132,0,197,0,133,0,198,0,134,0,198,0,133,0,198,0,134,0,199,0,135,0,199,0,134,0,199,0,135,0,200,0,136,0,200,0,135,0,200,0,136,0,201,0,137,0,201,0,136,0,201,0,137,0,202,0,138,0,202,0,137,0,202,0,138,0,203,0,139,0,203,0,138,0,203,0,139,0,204,0,140,0,204,0,139,0,204,0,140,0,205,0,141,0,205,0,140,0,205,0,141,0,206,0,142,0,206,0,141,0,206,0,142,0,207,0,143,0,207,0,142,0,207,0,143,0,208,0,144,0,208,0,143,0,208,0,144,0,209,0,145,0,209,0,144,0,209,0,145,0,210,0,146,0,210,0,145,0,210,0,146,0,211,0,147,0,211,0,146,0,211,0,147,0,212,0,148,0,212,0,147,0,212,0,148,0,213,0,149,0,213,0,148,0,213,0,149,0,214,0,150,0,214,0,149,0,214,0,150,0,215,0,151,0,215,0,150,0,215,0,151,0,216,0,152,0,216,0,151,0,216,0,152,0,217,0,153,0,217,0,152,0,217,0,153,0,218,0,154,0,218,0,153,0,218,0,154,0,219,0,155,0,219,0,154,0,219,0,155,0,220,0,156,0,220,0,155,0,220,0,156,0,221,0,157,0,221,0,156,0,221,0,157,0,222,0,158,0,222,0,157,0,222,0,158,0,223,0,159,0,223,0,158,0,223,0,159,0,224,0,160,0,224,0,159,0,224,0,160,0,225,0,161,0,225,0,160,0,225,0,161,0,226,0,162,0,226,0,161,0,226,0,162,0,227,0,163,0,227,0,162,0,227,0,163,0,228,0,164,0,228,0,163,0,228,0,164,0,229,0,165,0,229,0,164,0,229,0,165,0,230,0,166,0,230,0,165,0,230,0,166,0,231,0,167,0,231,0,166,0,231,0,167,0,232,0,168,0,232,0,167,0,232,0,168,0,233,0,169,0,233,0,168,0,233,0,169,0,234,0,170,0,234,0,169,0,234,0,170,0,235,0,171,0,235,0,170,0,235,0,171,0,236,0,172,0,236,0,171,0,236,0,172,0,237,0,173,0,237,0,172,0,237,0,173,0,238,0,174,0,238,0,173,0,238,0,174,0,239,0,175,0,239,0,174,0,239,0,175,0,240,0,176,0,240,0,175,0,240,0,176,0,241,0,177,0,241,0,176,0,241,0,177,0,242,0,178,0,242,0,177,0,242,0,178,0,243,0,179,0,243,0,178,0,243,0,179,0,244,0,180,0,244,0,179,0,244,0,180,0,245,0,181,0,245,0,180,0,245,0,181,0,246,0,182,0,246,0,181,0,246,0,182,0,247,0,183,0,247,0,182,0,247,0,183,0,248,0,184,0,248,0,183,0,248,0,184,0,249,0,185,0,249,0,184,0,249,0,185,0,250,0,186,0,250,0,185,0,250,0,186,0,251,0,187,0,251,0,186,0,251,0,187,0,252,0,188,0,252,0,187,0,252,0,188,0,253,0,189,0,253,0,188,0,253,0,189,0,254,0,190,0,254,0,189,0,254,0,190,0,255,0,191,0,255,0,190,0,0,1,192,0,1,1,193,0,1,1,192,0,1,1,193,0,2,1,194,0,2,1,193,0,2,1,194,0,3,1,195,0,3,1,194,0,3,1,195,0,4,1,196,0,4,1,195,0,4,1,196,0,5,1,197,0,5,1,196,0,5,1,197,0,6,1,198,0,6,1,197,0,6,1,198,0,7,1,199,0,7,1,198,0,7,1,199,0,8,1,200,0,8,1,199,0,8,1,200,0,9,1,201,0,9,1,200,0,9,1,201,0,10,1,202,0,10,1,201,0,10,1,202,0,11,1,203,0,11,1,202,0,11,1,203,0,12,1,204,0,12,1,203,0,12,1,204,0,13,1,205,0,13,1,204,0,13,1,205,0,14,1,206,0,14,1,205,0,14,1,206,0,15,1,207,0,15,1,206,0,15,1,207,0,16,1,208,0,16,1,207,0,16,1,208,0,17,1,209,0,17,1,208,0,17,1,209,0,18,1,210,0,18,1,209,0,18,1,210,0,19,1,211,0,19,1,210,0,19,1,211,0,20,1,212,0,20,1,211,0,20,1,212,0,21,1,213,0,21,1,212,0,21,1,213,0,22,1,214,0,22,1,213,0,22,1,214,0,23,1,215,0,23,1,214,0,23,1,215,0,24,1,216,0,24,1,215,0,24,1,216,0,25,1,217,0,25,1,216,0,25,1,217,0,26,1,218,0,26,1,217,0,26,1,218,0,27,1,219,0,27,1,218,0,27,1,219,0,28,1,220,0,28,1,219,0,28,1,220,0,29,1,221,0,29,1,220,0,29,1,221,0,30,1,222,0,30,1,221,0,30,1,222,0,31,1,223,0,31,1,222,0,31,1,223,0,32,1,224,0,32,1,223,0,32,1,224,0,33,1,225,0,33,1,224,0,33,1,225,0,34,1,226,0,34,1,225,0,34,1,226,0,35,1,227,0,35,1,226,0,35,1,227,0,36,1,228,0,36,1,227,0,36,1,228,0,37,1,229,0,37,1,228,0,37,1,229,0,38,1,230,0,38,1,229,0,38,1,230,0,39,1,231,0,39,1,230,0,39,1,231,0,40,1,232,0,40,1,231,0,40,1,232,0,41,1,233,0,41,1,232,0,41,1,233,0,42,1,234,0,42,1,233,0,42,1,234,0,43,1,235,0,43,1,234,0,43,1,235,0,44,1,236,0,44,1,235,0,44,1,236,0,45,1,237,0,45,1,236,0,45,1,237,0,46,1,238,0,46,1,237,0,46,1,238,0,47,1,239,0,47,1,238,0,47,1,239,0,48,1,240,0,48,1,239,0,48,1,240,0,49,1,241,0,49,1,240,0,49,1,241,0,50,1,242,0,50,1,241,0,50,1,242,0,51,1,243,0,51,1,242,0,51,1,243,0,52,1,244,0,52,1,243,0,52,1,244,0,53,1,245,0,53,1,244,0,53,1,245,0,54,1,246,0,54,1,245,0,54,1,246,0,55,1,247,0,55,1,246,0,55,1,247,0,56,1,248,0,56,1,247,0,56,1,248,0,57,1,249,0,57,1,248,0,57,1,249,0,58,1,250,0,58,1,249,0,58,1,250,0,59,1,251,0,59,1,250,0,59,1,251,0,60,1,252,0,60,1,251,0,60,1,252,0,61,1,253,0,61,1,252,0,61,1,253,0,62,1,254,0,62,1,253,0,62,1,254,0,63,1,255,0,63,1,254,0,64,1,0,1,65,1,1,1,65,1,0,1,65,1,1,1,66,1,2,1,66,1,1,1,66,1,2,1,67,1,3,1,67,1,2,1,67,1,3,1,68,1,4,1,68,1,3,1,68,1,4,1,69,1,5,1,69,1,4,1,69,1,5,1,70,1,6,1,70,1,5,1,70,1,6,1,71,1,7,1,71,1,6,1,71,1,7,1,72,1,8,1,72,1,7,1,72,1,8,1,73,1,9,1,73,1,8,1,73,1,9,1,74,1,10,1,74,1,9,1,74,1,10,1,75,1,11,1,75,1,10,1,75,1,11,1,76,1,12,1,76,1,11,1,76,1,12,1,77,1,13,1,77,1,12,1,77,1,13,1,78,1,14,1,78,1,13,1,78,1,14,1,79,1,15,1,79,1,14,1,79,1,15,1,80,1,16,1,80,1,15,1,80,1,16,1,81,1,17,1,81,1,16,1,81,1,17,1,82,1,18,1,82,1,17,1,82,1,18,1,83,1,19,1,83,1,18,1,83,1,19,1,84,1,20,1,84,1,19,1,84,1,20,1,85,1,21,1,85,1,20,1,85,1,21,1,86,1,22,1,86,1,21,1,86,1,22,1,87,1,23,1,87,1,22,1,87,1,23,1,88,1,24,1,88,1,23,1,88,1,24,1,89,1,25,1,89,1,24,1,89,1,25,1,90,1,26,1,90,1,25,1,90,1,26,1,91,1,27,1,91,1,26,1,91,1,27,1,92,1,28,1,92,1,27,1,92,1,28,1,93,1,29,1,93,1,28,1,93,1,29,1,94,1,30,1,94,1,29,1,94,1,30,1,95,1,31,1,95,1,30,1,95,1,31,1,96,1,32,1,96,1,31,1,96,1,32,1,97,1,33,1,97,1,32,1,97,1,33,1,98,1,34,1,98,1,33,1,98,1,34,1,99,1,35,1,99,1,34,1,99,1,35,1,100,1,36,1,100,1,35,1,100,1,36,1,101,1,37,1,101,1,36,1,101,1,37,1,102,1,38,1,102,1,37,1,102,1,38,1,103,1,39,1,103,1,38,1,103,1,39,1,104,1,40,1,104,1,39,1,104,1,40,1,105,1,41,1,105,1,40,1,105,1,41,1,106,1,42,1,106,1,41,1,106,1,42,1,107,1,43,1,107,1,42,1,107,1,43,1,108,1,44,1,108,1,43,1,108,1,44,1,109,1,45,1,109,1,44,1,109,1,45,1,110,1,46,1,110,1,45,1,110,1,46,1,111,1,47,1,111,1,46,1,111,1,47,1,112,1,48,1,112,1,47,1,112,1,48,1,113,1,49,1,113,1,48,1,113,1,49,1,114,1,50,1,114,1,49,1,114,1,50,1,115,1,51,1,115,1,50,1,115,1,51,1,116,1,52,1,116,1,51,1,116,1,52,1,117,1,53,1,117,1,52,1,117,1,53,1,118,1,54,1,118,1,53,1,118,1,54,1,119,1,55,1,119,1,54,1,119,1,55,1,120,1,56,1,120,1,55,1,120,1,56,1,121,1,57,1,121,1,56,1,121,1,57,1,122,1,58,1,122,1,57,1,122,1,58,1,123,1,59,1,123,1,58,1,123,1,59,1,124,1,60,1,124,1,59,1,124,1,60,1,125,1,61,1,125,1,60,1,125,1,61,1,126,1,62,1,126,1,61,1,126,1,62,1,127,1,63,1,127,1,62,1,128,1,64,1,129,1,65,1,129,1,64,1,129,1,65,1,130,1,66,1,130,1,65,1,130,1,66,1,131,1,67,1,131,1,66,1,131,1,67,1,132,1,68,1,132,1,67,1,132,1,68,1,133,1,69,1,133,1,68,1,133,1,69,1,134,1,70,1,134,1,69,1,134,1,70,1,135,1,71,1,135,1,70,1,135,1,71,1,136,1,72,1,136,1,71,1,136,1,72,1,137,1,73,1,137,1,72,1,137,1,73,1,138,1,74,1,138,1,73,1,138,1,74,1,139,1,75,1,139,1,74,1,139,1,75,1,140,1,76,1,140,1,75,1,140,1,76,1,141,1,77,1,141,1,76,1,141,1,77,1,142,1,78,1,142,1,77,1,142,1,78,1,143,1,79,1,143,1,78,1,143,1,79,1,144,1,80,1,144,1,79,1,144,1,80,1,145,1,81,1,145,1,80,1,145,1,81,1,146,1,82,1,146,1,81,1,146,1,82,1,147,1,83,1,147,1,82,1,147,1,83,1,148,1,84,1,148,1,83,1,148,1,84,1,149,1,85,1,149,1,84,1,149,1,85,1,150,1,86,1,150,1,85,1,150,1,86,1,151,1,87,1,151,1,86,1,151,1,87,1,152,1,88,1,152,1,87,1,152,1,88,1,153,1,89,1,153,1,88,1,153,1,89,1,154,1,90,1,154,1,89,1,154,1,90,1,155,1,91,1,155,1,90,1,155,1,91,1,156,1,92,1,156,1,91,1,156,1,92,1,157,1,93,1,157,1,92,1,157,1,93,1,158,1,94,1,158,1,93,1,158,1,94,1,159,1,95,1,159,1,94,1,159,1,95,1,160,1,96,1,160,1,95,1,160,1,96,1,161,1,97,1,161,1,96,1,161,1,97,1,162,1,98,1,162,1,97,1,162,1,98,1,163,1,99,1,163,1,98,1,163,1,99,1,164,1,100,1,164,1,99,1,164,1,100,1,165,1,101,1,165,1,100,1,165,1,101,1,166,1,102,1,166,1,101,1,166,1,102,1,167,1,103,1,167,1,102,1,167,1,103,1,168,1,104,1,168,1,103,1,168,1,104,1,169,1,105,1,169,1,104,1,169,1,105,1,170,1,106,1,170,1,105,1,170,1,106,1,171,1,107,1,171,1,106,1,171,1,107,1,172,1,108,1,172,1,107,1,172,1,108,1,173,1,109,1,173,1,108,1,173,1,109,1,174,1,110,1,174,1,109,1,174,1,110,1,175,1,111,1,175,1,110,1,175,1,111,1,176,1,112,1,176,1,111,1,176,1,112,1,177,1,113,1,177,1,112,1,177,1,113,1,178,1,114,1,178,1,113,1,178,1,114,1,179,1,115,1,179,1,114,1,179,1,115,1,180,1,116,1,180,1,115,1,180,1,116,1,181,1,117,1,181,1,116,1,181,1,117,1,182,1,118,1,182,1,117,1,182,1,118,1,183,1,119,1,183,1,118,1,183,1,119,1,184,1,120,1,184,1,119,1,184,1,120,1,185,1,121,1,185,1,120,1,185,1,121,1,186,1,122,1,186,1,121,1,186,1,122,1,187,1,123,1,187,1,122,1,187,1,123,1,188,1,124,1,188,1,123,1,188,1,124,1,189,1,125,1,189,1,124,1,189,1,125,1,190,1,126,1,190,1,125,1,190,1,126,1,191,1,127,1,191,1,126,1,192,1,128,1,193,1,129,1,193,1,128,1,193,1,129,1,194,1,130,1,194,1,129,1,194,1,130,1,195,1,131,1,195,1,130,1,195,1,131,1,196,1,132,1,196,1,131,1,196,1,132,1,197,1,133,1,197,1,132,1,197,1,133,1,198,1,134,1,198,1,133,1,198,1,134,1,199,1,135,1,199,1,134,1,199,1,135,1,200,1,136,1,200,1,135,1,200,1,136,1,201,1,137,1,201,1,136,1,201,1,137,1,202,1,138,1,202,1,137,1,202,1,138,1,203,1,139,1,203,1,138,1,203,1,139,1,204,1,140,1,204,1,139,1,204,1,140,1,205,1,141,1,205,1,140,1,205,1,141,1,206,1,142,1,206,1,141,1,206,1,142,1,207,1,143,1,207,1,142,1,207,1,143,1,208,1,144,1,208,1,143,1,208,1,144,1,209,1,145,1,209,1,144,1,209,1,145,1,210,1,146,1,210,1,145,1,210,1,146,1,211,1,147,1,211,1,146,1,211,1,147,1,212,1,148,1,212,1,147,1,212,1,148,1,213,1,149,1,213,1,148,1,213,1,149,1,214,1,150,1,214,1,149,1,214,1,150,1,215,1,151,1,215,1,150,1,215,1,151,1,216,1,152,1,216,1,151,1,216,1,152,1,217,1,153,1,217,1,152,1,217,1,153,1,218,1,154,1,218,1,153,1,218,1,154,1,219,1,155,1,219,1,154,1,219,1,155,1,220,1,156,1,220,1,155,1,220,1,156,1,221,1,157,1,221,1,156,1,221,1,157,1,222,1,158,1,222,1,157,1,222,1,158,1,223,1,159,1,223,1,158,1,223,1,159,1,224,1,160,1,224,1,159,1,224,1,160,1,225,1,161,1,225,1,160,1,225,1,161,1,226,1,162,1,226,1,161,1,226,1,162,1,227,1,163,1,227,1,162,1,227,1,163,1,228,1,164,1,228,1,163,1,228,1,164,1,229,1,165,1,229,1,164,1,229,1,165,1,230,1,166,1,230,1,165,1,230,1,166,1,231,1,167,1,231,1,166,1,231,1,167,1,232,1,168,1,232,1,167,1,232,1,168,1,233,1,169,1,233,1,168,1,233,1,169,1,234,1,170,1,234,1,169,1,234,1,170,1,235,1,171,1,235,1,170,1,235,1,171,1,236,1,172,1,236,1,171,1,236,1,172,1,237,1,173,1,237,1,172,1,237,1,173,1,238,1,174,1,238,1,173,1,238,1,174,1,239,1,175,1,239,1,174,1,239,1,175,1,240,1,176,1,240,1,175,1,240,1,176,1,241,1,177,1,241,1,176,1,241,1,177,1,242,1,178,1,242,1,177,1,242,1,178,1,243,1,179,1,243,1,178,1,243,1,179,1,244,1,180,1,244,1,179,1,244,1,180,1,245,1,181,1,245,1,180,1,245,1,181,1,246,1,182,1,246,1,181,1,246,1,182,1,247,1,183,1,247,1,182,1,247,1,183,1,248,1,184,1,248,1,183,1,248,1,184,1,249,1,185,1,249,1,184,1,249,1,185,1,250,1,186,1,250,1,185,1,250,1,186,1,251,1,187,1,251,1,186,1,251,1,187,1,252,1,188,1,252,1,187,1,252,1,188,1,253,1,189,1,253,1,188,1,253,1,189,1,254,1,190,1,254,1,189,1,254,1,190,1,255,1,191,1,255,1,190,1,0,2,192,1,1,2,193,1,1,2,192,1,1,2,193,1,2,2,194,1,2,2,193,1,2,2,194,1,3,2,195,1,3,2,194,1,3,2,195,1,4,2,196,1,4,2,195,1,4,2,196,1,5,2,197,1,5,2,196,1,5,2,197,1,6,2,198,1,6,2,197,1,6,2,198,1,7,2,199,1,7,2,198,1,7,2,199,1,8,2,200,1,8,2,199,1,8,2,200,1,9,2,201,1,9,2,200,1,9,2,201,1,10,2,202,1,10,2,201,1,10,2,202,1,11,2,203,1,11,2,202,1,11,2,203,1,12,2,204,1,12,2,203,1,12,2,204,1,13,2,205,1,13,2,204,1,13,2,205,1,14,2,206,1,14,2,205,1,14,2,206,1,15,2,207,1,15,2,206,1,15,2,207,1,16,2,208,1,16,2,207,1,16,2,208,1,17,2,209,1,17,2,208,1,17,2,209,1,18,2,210,1,18,2,209,1,18,2,210,1,19,2,211,1,19,2,210,1,19,2,211,1,20,2,212,1,20,2,211,1,20,2,212,1,21,2,213,1,21,2,212,1,21,2,213,1,22,2,214,1,22,2,213,1,22,2,214,1,23,2,215,1,23,2,214,1,23,2,215,1,24,2,216,1,24,2,215,1,24,2,216,1,25,2,217,1,25,2,216,1,25,2,217,1,26,2,218,1,26,2,217,1,26,2,218,1,27,2,219,1,27,2,218,1,27,2,219,1,28,2,220,1,28,2,219,1,28,2,220,1,29,2,221,1,29,2,220,1,29,2,221,1,30,2,222,1,30,2,221,1,30,2,222,1,31,2,223,1,31,2,222,1,31,2,223,1,32,2,224,1,32,2,223,1,32,2,224,1,33,2,225,1,33,2,224,1,33,2,225,1,34,2,226,1,34,2,225,1,34,2,226,1,35,2,227,1,35,2,226,1,35,2,227,1,36,2,228,1,36,2,227,1,36,2,228,1,37,2,229,1,37,2,228,1,37,2,229,1,38,2,230,1,38,2,229,1,38,2,230,1,39,2,231,1,39,2,230,1,39,2,231,1,40,2,232,1,40,2,231,1,40,2,232,1,41,2,233,1,41,2,232,1,41,2,233,1,42,2,234,1,42,2,233,1,42,2,234,1,43,2,235,1,43,2,234,1,43,2,235,1,44,2,236,1,44,2,235,1,44,2,236,1,45,2,237,1,45,2,236,1,45,2,237,1,46,2,238,1,46,2,237,1,46,2,238,1,47,2,239,1,47,2,238,1,47,2,239,1,48,2,240,1,48,2,239,1,48,2,240,1,49,2,241,1,49,2,240,1,49,2,241,1,50,2,242,1,50,2,241,1,50,2,242,1,51,2,243,1,51,2,242,1,51,2,243,1,52,2,244,1,52,2,243,1,52,2,244,1,53,2,245,1,53,2,244,1,53,2,245,1,54,2,246,1,54,2,245,1,54,2,246,1,55,2,247,1,55,2,246,1,55,2,247,1,56,2,248,1,56,2,247,1,56,2,248,1,57,2,249,1,57,2,248,1,57,2,249,1,58,2,250,1,58,2,249,1,58,2,250,1,59,2,251,1,59,2,250,1,59,2,251,1,60,2,252,1,60,2,251,1,60,2,252,1,61,2,253,1,61,2,252,1,61,2,253,1,62,2,254,1,62,2,253,1,62,2,254,1,63,2,255,1,63,2,254,1,64,2,0,2,65,2,1,2,65,2,0,2,65,2,1,2,66,2,2,2,66,2,1,2,66,2,2,2,67,2,3,2,67,2,2,2,67,2,3,2,68,2,4,2,68,2,3,2,68,2,4,2,69,2,5,2,69,2,4,2,69,2,5,2,70,2,6,2,70,2,5,2,70,2,6,2,71,2,7,2,71,2,6,2,71,2,7,2,72,2,8,2,72,2,7,2,72,2,8,2,73,2,9,2,73,2,8,2,73,2,9,2,74,2,10,2,74,2,9,2,74,2,10,2,75,2,11,2,75,2,10,2,75,2,11,2,76,2,12,2,76,2,11,2,76,2,12,2,77,2,13,2,77,2,12,2,77,2,13,2,78,2,14,2,78,2,13,2,78,2,14,2,79,2,15,2,79,2,14,2,79,2,15,2,80,2,16,2,80,2,15,2,80,2,16,2,81,2,17,2,81,2,16,2,81,2,17,2,82,2,18,2,82,2,17,2,82,2,18,2,83,2,19,2,83,2,18,2,83,2,19,2,84,2,20,2,84,2,19,2,84,2,20,2,85,2,21,2,85,2,20,2,85,2,21,2,86,2,22,2,86,2,21,2,86,2,22,2,87,2,23,2,87,2,22,2,87,2,23,2,88,2,24,2,88,2,23,2,88,2,24,2,89,2,25,2,89,2,24,2,89,2,25,2,90,2,26,2,90,2,25,2,90,2,26,2,91,2,27,2,91,2,26,2,91,2,27,2,92,2,28,2,92,2,27,2,92,2,28,2,93,2,29,2,93,2,28,2,93,2,29,2,94,2,30,2,94,2,29,2,94,2,30,2,95,2,31,2,95,2,30,2,95,2,31,2,96,2,32,2,96,2,31,2,96,2,32,2,97,2,33,2,97,2,32,2,97,2,33,2,98,2,34,2,98,2,33,2,98,2,34,2,99,2,35,2,99,2,34,2,99,2,35,2,100,2,36,2,100,2,35,2,100,2,36,2,101,2,37,2,101,2,36,2,101,2,37,2,102,2,38,2,102,2,37,2,102,2,38,2,103,2,39,2,103,2,38,2,103,2,39,2,104,2,40,2,104,2,39,2,104,2,40,2,105,2,41,2,105,2,40,2,105,2,41,2,106,2,42,2,106,2,41,2,106,2,42,2,107,2,43,2,107,2,42,2,107,2,43,2,108,2,44,2,108,2,43,2,108,2,44,2,109,2,45,2,109,2,44,2,109,2,45,2,110,2,46,2,110,2,45,2,110,2,46,2,111,2,47,2,111,2,46,2,111,2,47,2,112,2,48,2,112,2,47,2,112,2,48,2,113,2,49,2,113,2,48,2,113,2,49,2,114,2,50,2,114,2,49,2,114,2,50,2,115,2,51,2,115,2,50,2,115,2,51,2,116,2,52,2,116,2,51,2,116,2,52,2,117,2,53,2,117,2,52,2,117,2,53,2,118,2,54,2,118,2,53,2,118,2,54,2,119,2,55,2,119,2,54,2,119,2,55,2,120,2,56,2,120,2,55,2,120,2,56,2,121,2,57,2,121,2,56,2,121,2,57,2,122,2,58,2,122,2,57,2,122,2,58,2,123,2,59,2,123,2,58,2,123,2,59,2,124,2,60,2,124,2,59,2,124,2,60,2,125,2,61,2,125,2,60,2,125,2,61,2,126,2,62,2,126,2,61,2,126,2,62,2,127,2,63,2,127,2,62,2,128,2,64,2,129,2,65,2,129,2,64,2,129,2,65,2,130,2,66,2,130,2,65,2,130,2,66,2,131,2,67,2,131,2,66,2,131,2,67,2,132,2,68,2,132,2,67,2,132,2,68,2,133,2,69,2,133,2,68,2,133,2,69,2,134,2,70,2,134,2,69,2,134,2,70,2,135,2,71,2,135,2,70,2,135,2,71,2,136,2,72,2,136,2,71,2,136,2,72,2,137,2,73,2,137,2,72,2,137,2,73,2,138,2,74,2,138,2,73,2,138,2,74,2,139,2,75,2,139,2,74,2,139,2,75,2,140,2,76,2,140,2,75,2,140,2,76,2,141,2,77,2,141,2,76,2,141,2,77,2,142,2,78,2,142,2,77,2,142,2,78,2,143,2,79,2,143,2,78,2,143,2,79,2,144,2,80,2,144,2,79,2,144,2,80,2,145,2,81,2,145,2,80,2,145,2,81,2,146,2,82,2,146,2,81,2,146,2,82,2,147,2,83,2,147,2,82,2,147,2,83,2,148,2,84,2,148,2,83,2,148,2,84,2,149,2,85,2,149,2,84,2,149,2,85,2,150,2,86,2,150,2,85,2,150,2,86,2,151,2,87,2,151,2,86,2,151,2,87,2,152,2,88,2,152,2,87,2,152,2,88,2,153,2,89,2,153,2,88,2,153,2,89,2,154,2,90,2,154,2,89,2,154,2,90,2,155,2,91,2,155,2,90,2,155,2,91,2,156,2,92,2,156,2,91,2,156,2,92,2,157,2,93,2,157,2,92,2,157,2,93,2,158,2,94,2,158,2,93,2,158,2,94,2,159,2,95,2,159,2,94,2,159,2,95,2,160,2,96,2,160,2,95,2,160,2,96,2,161,2,97,2,161,2,96,2,161,2,97,2,162,2,98,2,162,2,97,2,162,2,98,2,163,2,99,2,163,2,98,2,163,2,99,2,164,2,100,2,164,2,99,2,164,2,100,2,165,2,101,2,165,2,100,2,165,2,101,2,166,2,102,2,166,2,101,2,166,2,102,2,167,2,103,2,167,2,102,2,167,2,103,2,168,2,104,2,168,2,103,2,168,2,104,2,169,2,105,2,169,2,104,2,169,2,105,2,170,2,106,2,170,2,105,2,170,2,106,2,171,2,107,2,171,2,106,2,171,2,107,2,172,2,108,2,172,2,107,2,172,2,108,2,173,2,109,2,173,2,108,2,173,2,109,2,174,2,110,2,174,2,109,2,174,2,110,2,175,2,111,2,175,2,110,2,175,2,111,2,176,2,112,2,176,2,111,2,176,2,112,2,177,2,113,2,177,2,112,2,177,2,113,2,178,2,114,2,178,2,113,2,178,2,114,2,179,2,115,2,179,2,114,2,179,2,115,2,180,2,116,2,180,2,115,2,180,2,116,2,181,2,117,2,181,2,116,2,181,2,117,2,182,2,118,2,182,2,117,2,182,2,118,2,183,2,119,2,183,2,118,2,183,2,119,2,184,2,120,2,184,2,119,2,184,2,120,2,185,2,121,2,185,2,120,2,185,2,121,2,186,2,122,2,186,2,121,2,186,2,122,2,187,2,123,2,187,2,122,2,187,2,123,2,188,2,124,2,188,2,123,2,188,2,124,2,189,2,125,2,189,2,124,2,189,2,125,2,190,2,126,2,190,2,125,2,190,2,126,2,191,2,127,2,191,2,126,2,192,2,128,2,193,2,129,2,193,2,128,2,193,2,129,2,194,2,130,2,194,2,129,2,194,2,130,2,195,2,131,2,195,2,130,2,195,2,131,2,196,2,132,2,196,2,131,2,196,2,132,2,197,2,133,2,197,2,132,2,197,2,133,2,198,2,134,2,198,2,133,2,198,2,134,2,199,2,135,2,199,2,134,2,199,2,135,2,200,2,136,2,200,2,135,2,200,2,136,2,201,2,137,2,201,2,136,2,201,2,137,2,202,2,138,2,202,2,137,2,202,2,138,2,203,2,139,2,203,2,138,2,203,2,139,2,204,2,140,2,204,2,139,2,204,2,140,2,205,2,141,2,205,2,140,2,205,2,141,2,206,2,142,2,206,2,141,2,206,2,142,2,207,2,143,2,207,2,142,2,207,2,143,2,208,2,144,2,208,2,143,2,208,2,144,2,209,2,145,2,209,2,144,2,209,2,145,2,210,2,146,2,210,2,145,2,210,2,146,2,211,2,147,2,211,2,146,2,211,2,147,2,212,2,148,2,212,2,147,2,212,2,148,2,213,2,149,2,213,2,148,2,213,2,149,2,214,2,150,2,214,2,149,2,214,2,150,2,215,2,151,2,215,2,150,2,215,2,151,2,216,2,152,2,216,2,151,2,216,2,152,2,217,2,153,2,217,2,152,2,217,2,153,2,218,2,154,2,218,2,153,2,218,2,154,2,219,2,155,2,219,2,154,2,219,2,155,2,220,2,156,2,220,2,155,2,220,2,156,2,221,2,157,2,221,2,156,2,221,2,157,2,222,2,158,2,222,2,157,2,222,2,158,2,223,2,159,2,223,2,158,2,223,2,159,2,224,2,160,2,224,2,159,2,224,2,160,2,225,2,161,2,225,2,160,2,225,2,161,2,226,2,162,2,226,2,161,2,226,2,162,2,227,2,163,2,227,2,162,2,227,2,163,2,228,2,164,2,228,2,163,2,228,2,164,2,229,2,165,2,229,2,164,2,229,2,165,2,230,2,166,2,230,2,165,2,230,2,166,2,231,2,167,2,231,2,166,2,231,2,167,2,232,2,168,2,232,2,167,2,232,2,168,2,233,2,169,2,233,2,168,2,233,2,169,2,234,2,170,2,234,2,169,2,234,2,170,2,235,2,171,2,235,2,170,2,235,2,171,2,236,2,172,2,236,2,171,2,236,2,172,2,237,2,173,2,237,2,172,2,237,2,173,2,238,2,174,2,238,2,173,2,238,2,174,2,239,2,175,2,239,2,174,2,239,2,175,2,240,2,176,2,240,2,175,2,240,2,176,2,241,2,177,2,241,2,176,2,241,2,177,2,242,2,178,2,242,2,177,2,242,2,178,2,243,2,179,2,243,2,178,2,243,2,179,2,244,2,180,2,244,2,179,2,244,2,180,2,245,2,181,2,245,2,180,2,245,2,181,2,246,2,182,2,246,2,181,2,246,2,182,2,247,2,183,2,247,2,182,2,247,2,183,2,248,2,184,2,248,2,183,2,248,2,184,2,249,2,185,2,249,2,184,2,249,2,185,2,250,2,186,2,250,2,185,2,250,2,186,2,251,2,187,2,251,2,186,2,251,2,187,2,252,2,188,2,252,2,187,2,252,2,188,2,253,2,189,2,253,2,188,2,253,2,189,2,254,2,190,2,254,2,189,2,254,2,190,2,255,2,191,2,255,2,190,2,0,3,192,2,1,3,193,2,1,3,192,2,1,3,193,2,2,3,194,2,2,3,193,2,2,3,194,2,3,3,195,2,3,3,194,2,3,3,195,2,4,3,196,2,4,3,195,2,4,3,196,2,5,3,197,2,5,3,196,2,5,3,197,2,6,3,198,2,6,3,197,2,6,3,198,2,7,3,199,2,7,3,198,2,7,3,199,2,8,3,200,2,8,3,199,2,8,3,200,2,9,3,201,2,9,3,200,2,9,3,201,2,10,3,202,2,10,3,201,2,10,3,202,2,11,3,203,2,11,3,202,2,11,3,203,2,12,3,204,2,12,3,203,2,12,3,204,2,13,3,205,2,13,3,204,2,13,3,205,2,14,3,206,2,14,3,205,2,14,3,206,2,15,3,207,2,15,3,206,2,15,3,207,2,16,3,208,2,16,3,207,2,16,3,208,2,17,3,209,2,17,3,208,2,17,3,209,2,18,3,210,2,18,3,209,2,18,3,210,2,19,3,211,2,19,3,210,2,19,3,211,2,20,3,212,2,20,3,211,2,20,3,212,2,21,3,213,2,21,3,212,2,21,3,213,2,22,3,214,2,22,3,213,2,22,3,214,2,23,3,215,2,23,3,214,2,23,3,215,2,24,3,216,2,24,3,215,2,24,3,216,2,25,3,217,2,25,3,216,2,25,3,217,2,26,3,218,2,26,3,217,2,26,3,218,2,27,3,219,2,27,3,218,2,27,3,219,2,28,3,220,2,28,3,219,2,28,3,220,2,29,3,221,2,29,3,220,2,29,3,221,2,30,3,222,2,30,3,221,2,30,3,222,2,31,3,223,2,31,3,222,2,31,3,223,2,32,3,224,2,32,3,223,2,32,3,224,2,33,3,225,2,33,3,224,2,33,3,225,2,34,3,226,2,34,3,225,2,34,3,226,2,35,3,227,2,35,3,226,2,35,3,227,2,36,3,228,2,36,3,227,2,36,3,228,2,37,3,229,2,37,3,228,2,37,3,229,2,38,3,230,2,38,3,229,2,38,3,230,2,39,3,231,2,39,3,230,2,39,3,231,2,40,3,232,2,40,3,231,2,40,3,232,2,41,3,233,2,41,3,232,2,41,3,233,2,42,3,234,2,42,3,233,2,42,3,234,2,43,3,235,2,43,3,234,2,43,3,235,2,44,3,236,2,44,3,235,2,44,3,236,2,45,3,237,2,45,3,236,2,45,3,237,2,46,3,238,2,46,3,237,2,46,3,238,2,47,3,239,2,47,3,238,2,47,3,239,2,48,3,240,2,48,3,239,2,48,3,240,2,49,3,241,2,49,3,240,2,49,3,241,2,50,3,242,2,50,3,241,2,50,3,242,2,51,3,243,2,51,3,242,2,51,3,243,2,52,3,244,2,52,3,243,2,52,3,244,2,53,3,245,2,53,3,244,2,53,3,245,2,54,3,246,2,54,3,245,2,54,3,246,2,55,3,247,2,55,3,246,2,55,3,247,2,56,3,248,2,56,3,247,2,56,3,248,2,57,3,249,2,57,3,248,2,57,3,249,2,58,3,250,2,58,3,249,2,58,3,250,2,59,3,251,2,59,3,250,2,59,3,251,2,60,3,252,2,60,3,251,2,60,3,252,2,61,3,253,2,61,3,252,2,61,3,253,2,62,3,254,2,62,3,253,2,62,3,254,2,63,3,255,2,63,3,254,2,64,3,0,3,65,3,1,3,65,3,0,3,65,3,1,3,66,3,2,3,66,3,1,3,66,3,2,3,67,3,3,3,67,3,2,3,67,3,3,3,68,3,4,3,68,3,3,3,68,3,4,3,69,3,5,3,69,3,4,3,69,3,5,3,70,3,6,3,70,3,5,3,70,3,6,3,71,3,7,3,71,3,6,3,71,3,7,3,72,3,8,3,72,3,7,3,72,3,8,3,73,3,9,3,73,3,8,3,73,3,9,3,74,3,10,3,74,3,9,3,74,3,10,3,75,3,11,3,75,3,10,3,75,3,11,3,76,3,12,3,76,3,11,3,76,3,12,3,77,3,13,3,77,3,12,3,77,3,13,3,78,3,14,3,78,3,13,3,78,3,14,3,79,3,15,3,79,3,14,3,79,3,15,3,80,3,16,3,80,3,15,3,80,3,16,3,81,3,17,3,81,3,16,3,81,3,17,3,82,3,18,3,82,3,17,3,82,3,18,3,83,3,19,3,83,3,18,3,83,3,19,3,84,3,20,3,84,3,19,3,84,3,20,3,85,3,21,3,85,3,20,3,85,3,21,3,86,3,22,3,86,3,21,3,86,3,22,3,87,3,23,3,87,3,22,3,87,3,23,3,88,3,24,3,88,3,23,3,88,3,24,3,89,3,25,3,89,3,24,3,89,3,25,3,90,3,26,3,90,3,25,3,90,3,26,3,91,3,27,3,91,3,26,3,91,3,27,3,92,3,28,3,92,3,27,3,92,3,28,3,93,3,29,3,93,3,28,3,93,3,29,3,94,3,30,3,94,3,29,3,94,3,30,3,95,3,31,3,95,3,30,3,95,3,31,3,96,3,32,3,96,3,31,3,96,3,32,3,97,3,33,3,97,3,32,3,97,3,33,3,98,3,34,3,98,3,33,3,98,3,34,3,99,3,35,3,99,3,34,3,99,3,35,3,100,3,36,3,100,3,35,3,100,3,36,3,101,3,37,3,101,3,36,3,101,3,37,3,102,3,38,3,102,3,37,3,102,3,38,3,103,3,39,3,103,3,38,3,103,3,39,3,104,3,40,3,104,3,39,3,104,3,40,3,105,3,41,3,105,3,40,3,105,3,41,3,106,3,42,3,106,3,41,3,106,3,42,3,107,3,43,3,107,3,42,3,107,3,43,3,108,3,44,3,108,3,43,3,108,3,44,3,109,3,45,3,109,3,44,3,109,3,45,3,110,3,46,3,110,3,45,3,110,3,46,3,111,3,47,3,111,3,46,3,111,3,47,3,112,3,48,3,112,3,47,3,112,3,48,3,113,3,49,3,113,3,48,3,113,3,49,3,114,3,50,3,114,3,49,3,114,3,50,3,115,3,51,3,115,3,50,3,115,3,51,3,116,3,52,3,116,3,51,3,116,3,52,3,117,3,53,3,117,3,52,3,117,3,53,3,118,3,54,3,118,3,53,3,118,3,54,3,119,3,55,3,119,3,54,3,119,3,55,3,120,3,56,3,120,3,55,3,120,3,56,3,121,3,57,3,121,3,56,3,121,3,57,3,122,3,58,3,122,3,57,3,122,3,58,3,123,3,59,3,123,3,58,3,123,3,59,3,124,3,60,3,124,3,59,3,124,3,60,3,125,3,61,3,125,3,60,3,125,3,61,3,126,3,62,3,126,3,61,3,126,3,62,3,127,3,63,3,127,3,62,3,128,3,64,3,129,3,65,3,129,3,64,3,129,3,65,3,130,3,66,3,130,3,65,3,130,3,66,3,131,3,67,3,131,3,66,3,131,3,67,3,132,3,68,3,132,3,67,3,132,3,68,3,133,3,69,3,133,3,68,3,133,3,69,3,134,3,70,3,134,3,69,3,134,3,70,3,135,3,71,3,135,3,70,3,135,3,71,3,136,3,72,3,136,3,71,3,136,3,72,3,137,3,73,3,137,3,72,3,137,3,73,3,138,3,74,3,138,3,73,3,138,3,74,3,139,3,75,3,139,3,74,3,139,3,75,3,140,3,76,3,140,3,75,3,140,3,76,3,141,3,77,3,141,3,76,3,141,3,77,3,142,3,78,3,142,3,77,3,142,3,78,3,143,3,79,3,143,3,78,3,143,3,79,3,144,3,80,3,144,3,79,3,144,3,80,3,145,3,81,3,145,3,80,3,145,3,81,3,146,3,82,3,146,3,81,3,146,3,82,3,147,3,83,3,147,3,82,3,147,3,83,3,148,3,84,3,148,3,83,3,148,3,84,3,149,3,85,3,149,3,84,3,149,3,85,3,150,3,86,3,150,3,85,3,150,3,86,3,151,3,87,3,151,3,86,3,151,3,87,3,152,3,88,3,152,3,87,3,152,3,88,3,153,3,89,3,153,3,88,3,153,3,89,3,154,3,90,3,154,3,89,3,154,3,90,3,155,3,91,3,155,3,90,3,155,3,91,3,156,3,92,3,156,3,91,3,156,3,92,3,157,3,93,3,157,3,92,3,157,3,93,3,158,3,94,3,158,3,93,3,158,3,94,3,159,3,95,3,159,3,94,3,159,3,95,3,160,3,96,3,160,3,95,3,160,3,96,3,161,3,97,3,161,3,96,3,161,3,97,3,162,3,98,3,162,3,97,3,162,3,98,3,163,3,99,3,163,3,98,3,163,3,99,3,164,3,100,3,164,3,99,3,164,3,100,3,165,3,101,3,165,3,100,3,165,3,101,3,166,3,102,3,166,3,101,3,166,3,102,3,167,3,103,3,167,3,102,3,167,3,103,3,168,3,104,3,168,3,103,3,168,3,104,3,169,3,105,3,169,3,104,3,169,3,105,3,170,3,106,3,170,3,105,3,170,3,106,3,171,3,107,3,171,3,106,3,171,3,107,3,172,3,108,3,172,3,107,3,172,3,108,3,173,3,109,3,173,3,108,3,173,3,109,3,174,3,110,3,174,3,109,3,174,3,110,3,175,3,111,3,175,3,110,3,175,3,111,3,176,3,112,3,176,3,111,3,176,3,112,3,177,3,113,3,177,3,112,3,177,3,113,3,178,3,114,3,178,3,113,3,178,3,114,3,179,3,115,3,179,3,114,3,179,3,115,3,180,3,116,3,180,3,115,3,180,3,116,3,181,3,117,3,181,3,116,3,181,3,117,3,182,3,118,3,182,3,117,3,182,3,118,3,183,3,119,3,183,3,118,3,183,3,119,3,184,3,120,3,184,3,119,3,184,3,120,3,185,3,121,3,185,3,120,3,185,3,121,3,186,3,122,3,186,3,121,3,186,3,122,3,187,3,123,3,187,3,122,3,187,3,123,3,188,3,124,3,188,3,123,3,188,3,124,3,189,3,125,3,189,3,124,3,189,3,125,3,190,3,126,3,190,3,125,3,190,3,126,3,191,3,127,3,191,3,126,3,192,3,128,3,193,3,129,3,193,3,128,3,193,3,129,3,194,3,130,3,194,3,129,3,194,3,130,3,195,3,131,3,195,3,130,3,195,3,131,3,196,3,132,3,196,3,131,3,196,3,132,3,197,3,133,3,197,3,132,3,197,3,133,3,198,3,134,3,198,3,133,3,198,3,134,3,199,3,135,3,199,3,134,3,199,3,135,3,200,3,136,3,200,3,135,3,200,3,136,3,201,3,137,3,201,3,136,3,201,3,137,3,202,3,138,3,202,3,137,3,202,3,138,3,203,3,139,3,203,3,138,3,203,3,139,3,204,3,140,3,204,3,139,3,204,3,140,3,205,3,141,3,205,3,140,3,205,3,141,3,206,3,142,3,206,3,141,3,206,3,142,3,207,3,143,3,207,3,142,3,207,3,143,3,208,3,144,3,208,3,143,3,208,3,144,3,209,3,145,3,209,3,144,3,209,3,145,3,210,3,146,3,210,3,145,3,210,3,146,3,211,3,147,3,211,3,146,3,211,3,147,3,212,3,148,3,212,3,147,3,212,3,148,3,213,3,149,3,213,3,148,3,213,3,149,3,214,3,150,3,214,3,149,3,214,3,150,3,215,3,151,3,215,3,150,3,215,3,151,3,216,3,152,3,216,3,151,3,216,3,152,3,217,3,153,3,217,3,152,3,217,3,153,3,218,3,154,3,218,3,153,3,218,3,154,3,219,3,155,3,219,3,154,3,219,3,155,3,220,3,156,3,220,3,155,3,220,3,156,3,221,3,157,3,221,3,156,3,221,3,157,3,222,3,158,3,222,3,157,3,222,3,158,3,223,3,159,3,223,3,158,3,223,3,159,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);
/* memory initializer */ allocate([224,3,160,3,224,3,159,3,224,3,160,3,225,3,161,3,225,3,160,3,225,3,161,3,226,3,162,3,226,3,161,3,226,3,162,3,227,3,163,3,227,3,162,3,227,3,163,3,228,3,164,3,228,3,163,3,228,3,164,3,229,3,165,3,229,3,164,3,229,3,165,3,230,3,166,3,230,3,165,3,230,3,166,3,231,3,167,3,231,3,166,3,231,3,167,3,232,3,168,3,232,3,167,3,232,3,168,3,233,3,169,3,233,3,168,3,233,3,169,3,234,3,170,3,234,3,169,3,234,3,170,3,235,3,171,3,235,3,170,3,235,3,171,3,236,3,172,3,236,3,171,3,236,3,172,3,237,3,173,3,237,3,172,3,237,3,173,3,238,3,174,3,238,3,173,3,238,3,174,3,239,3,175,3,239,3,174,3,239,3,175,3,240,3,176,3,240,3,175,3,240,3,176,3,241,3,177,3,241,3,176,3,241,3,177,3,242,3,178,3,242,3,177,3,242,3,178,3,243,3,179,3,243,3,178,3,243,3,179,3,244,3,180,3,244,3,179,3,244,3,180,3,245,3,181,3,245,3,180,3,245,3,181,3,246,3,182,3,246,3,181,3,246,3,182,3,247,3,183,3,247,3,182,3,247,3,183,3,248,3,184,3,248,3,183,3,248,3,184,3,249,3,185,3,249,3,184,3,249,3,185,3,250,3,186,3,250,3,185,3,250,3,186,3,251,3,187,3,251,3,186,3,251,3,187,3,252,3,188,3,252,3,187,3,252,3,188,3,253,3,189,3,253,3,188,3,253,3,189,3,254,3,190,3,254,3,189,3,254,3,190,3,255,3,191,3,255,3,190,3,0,4,192,3,1,4,193,3,1,4,192,3,1,4,193,3,2,4,194,3,2,4,193,3,2,4,194,3,3,4,195,3,3,4,194,3,3,4,195,3,4,4,196,3,4,4,195,3,4,4,196,3,5,4,197,3,5,4,196,3,5,4,197,3,6,4,198,3,6,4,197,3,6,4,198,3,7,4,199,3,7,4,198,3,7,4,199,3,8,4,200,3,8,4,199,3,8,4,200,3,9,4,201,3,9,4,200,3,9,4,201,3,10,4,202,3,10,4,201,3,10,4,202,3,11,4,203,3,11,4,202,3,11,4,203,3,12,4,204,3,12,4,203,3,12,4,204,3,13,4,205,3,13,4,204,3,13,4,205,3,14,4,206,3,14,4,205,3,14,4,206,3,15,4,207,3,15,4,206,3,15,4,207,3,16,4,208,3,16,4,207,3,16,4,208,3,17,4,209,3,17,4,208,3,17,4,209,3,18,4,210,3,18,4,209,3,18,4,210,3,19,4,211,3,19,4,210,3,19,4,211,3,20,4,212,3,20,4,211,3,20,4,212,3,21,4,213,3,21,4,212,3,21,4,213,3,22,4,214,3,22,4,213,3,22,4,214,3,23,4,215,3,23,4,214,3,23,4,215,3,24,4,216,3,24,4,215,3,24,4,216,3,25,4,217,3,25,4,216,3,25,4,217,3,26,4,218,3,26,4,217,3,26,4,218,3,27,4,219,3,27,4,218,3,27,4,219,3,28,4,220,3,28,4,219,3,28,4,220,3,29,4,221,3,29,4,220,3,29,4,221,3,30,4,222,3,30,4,221,3,30,4,222,3,31,4,223,3,31,4,222,3,31,4,223,3,32,4,224,3,32,4,223,3,32,4,224,3,33,4,225,3,33,4,224,3,33,4,225,3,34,4,226,3,34,4,225,3,34,4,226,3,35,4,227,3,35,4,226,3,35,4,227,3,36,4,228,3,36,4,227,3,36,4,228,3,37,4,229,3,37,4,228,3,37,4,229,3,38,4,230,3,38,4,229,3,38,4,230,3,39,4,231,3,39,4,230,3,39,4,231,3,40,4,232,3,40,4,231,3,40,4,232,3,41,4,233,3,41,4,232,3,41,4,233,3,42,4,234,3,42,4,233,3,42,4,234,3,43,4,235,3,43,4,234,3,43,4,235,3,44,4,236,3,44,4,235,3,44,4,236,3,45,4,237,3,45,4,236,3,45,4,237,3,46,4,238,3,46,4,237,3,46,4,238,3,47,4,239,3,47,4,238,3,47,4,239,3,48,4,240,3,48,4,239,3,48,4,240,3,49,4,241,3,49,4,240,3,49,4,241,3,50,4,242,3,50,4,241,3,50,4,242,3,51,4,243,3,51,4,242,3,51,4,243,3,52,4,244,3,52,4,243,3,52,4,244,3,53,4,245,3,53,4,244,3,53,4,245,3,54,4,246,3,54,4,245,3,54,4,246,3,55,4,247,3,55,4,246,3,55,4,247,3,56,4,248,3,56,4,247,3,56,4,248,3,57,4,249,3,57,4,248,3,57,4,249,3,58,4,250,3,58,4,249,3,58,4,250,3,59,4,251,3,59,4,250,3,59,4,251,3,60,4,252,3,60,4,251,3,60,4,252,3,61,4,253,3,61,4,252,3,61,4,253,3,62,4,254,3,62,4,253,3,62,4,254,3,63,4,255,3,63,4,254,3,64,4,0,4,65,4,1,4,65,4,0,4,65,4,1,4,66,4,2,4,66,4,1,4,66,4,2,4,67,4,3,4,67,4,2,4,67,4,3,4,68,4,4,4,68,4,3,4,68,4,4,4,69,4,5,4,69,4,4,4,69,4,5,4,70,4,6,4,70,4,5,4,70,4,6,4,71,4,7,4,71,4,6,4,71,4,7,4,72,4,8,4,72,4,7,4,72,4,8,4,73,4,9,4,73,4,8,4,73,4,9,4,74,4,10,4,74,4,9,4,74,4,10,4,75,4,11,4,75,4,10,4,75,4,11,4,76,4,12,4,76,4,11,4,76,4,12,4,77,4,13,4,77,4,12,4,77,4,13,4,78,4,14,4,78,4,13,4,78,4,14,4,79,4,15,4,79,4,14,4,79,4,15,4,80,4,16,4,80,4,15,4,80,4,16,4,81,4,17,4,81,4,16,4,81,4,17,4,82,4,18,4,82,4,17,4,82,4,18,4,83,4,19,4,83,4,18,4,83,4,19,4,84,4,20,4,84,4,19,4,84,4,20,4,85,4,21,4,85,4,20,4,85,4,21,4,86,4,22,4,86,4,21,4,86,4,22,4,87,4,23,4,87,4,22,4,87,4,23,4,88,4,24,4,88,4,23,4,88,4,24,4,89,4,25,4,89,4,24,4,89,4,25,4,90,4,26,4,90,4,25,4,90,4,26,4,91,4,27,4,91,4,26,4,91,4,27,4,92,4,28,4,92,4,27,4,92,4,28,4,93,4,29,4,93,4,28,4,93,4,29,4,94,4,30,4,94,4,29,4,94,4,30,4,95,4,31,4,95,4,30,4,95,4,31,4,96,4,32,4,96,4,31,4,96,4,32,4,97,4,33,4,97,4,32,4,97,4,33,4,98,4,34,4,98,4,33,4,98,4,34,4,99,4,35,4,99,4,34,4,99,4,35,4,100,4,36,4,100,4,35,4,100,4,36,4,101,4,37,4,101,4,36,4,101,4,37,4,102,4,38,4,102,4,37,4,102,4,38,4,103,4,39,4,103,4,38,4,103,4,39,4,104,4,40,4,104,4,39,4,104,4,40,4,105,4,41,4,105,4,40,4,105,4,41,4,106,4,42,4,106,4,41,4,106,4,42,4,107,4,43,4,107,4,42,4,107,4,43,4,108,4,44,4,108,4,43,4,108,4,44,4,109,4,45,4,109,4,44,4,109,4,45,4,110,4,46,4,110,4,45,4,110,4,46,4,111,4,47,4,111,4,46,4,111,4,47,4,112,4,48,4,112,4,47,4,112,4,48,4,113,4,49,4,113,4,48,4,113,4,49,4,114,4,50,4,114,4,49,4,114,4,50,4,115,4,51,4,115,4,50,4,115,4,51,4,116,4,52,4,116,4,51,4,116,4,52,4,117,4,53,4,117,4,52,4,117,4,53,4,118,4,54,4,118,4,53,4,118,4,54,4,119,4,55,4,119,4,54,4,119,4,55,4,120,4,56,4,120,4,55,4,120,4,56,4,121,4,57,4,121,4,56,4,121,4,57,4,122,4,58,4,122,4,57,4,122,4,58,4,123,4,59,4,123,4,58,4,123,4,59,4,124,4,60,4,124,4,59,4,124,4,60,4,125,4,61,4,125,4,60,4,125,4,61,4,126,4,62,4,126,4,61,4,126,4,62,4,127,4,63,4,127,4,62,4,128,4,64,4,129,4,65,4,129,4,64,4,129,4,65,4,130,4,66,4,130,4,65,4,130,4,66,4,131,4,67,4,131,4,66,4,131,4,67,4,132,4,68,4,132,4,67,4,132,4,68,4,133,4,69,4,133,4,68,4,133,4,69,4,134,4,70,4,134,4,69,4,134,4,70,4,135,4,71,4,135,4,70,4,135,4,71,4,136,4,72,4,136,4,71,4,136,4,72,4,137,4,73,4,137,4,72,4,137,4,73,4,138,4,74,4,138,4,73,4,138,4,74,4,139,4,75,4,139,4,74,4,139,4,75,4,140,4,76,4,140,4,75,4,140,4,76,4,141,4,77,4,141,4,76,4,141,4,77,4,142,4,78,4,142,4,77,4,142,4,78,4,143,4,79,4,143,4,78,4,143,4,79,4,144,4,80,4,144,4,79,4,144,4,80,4,145,4,81,4,145,4,80,4,145,4,81,4,146,4,82,4,146,4,81,4,146,4,82,4,147,4,83,4,147,4,82,4,147,4,83,4,148,4,84,4,148,4,83,4,148,4,84,4,149,4,85,4,149,4,84,4,149,4,85,4,150,4,86,4,150,4,85,4,150,4,86,4,151,4,87,4,151,4,86,4,151,4,87,4,152,4,88,4,152,4,87,4,152,4,88,4,153,4,89,4,153,4,88,4,153,4,89,4,154,4,90,4,154,4,89,4,154,4,90,4,155,4,91,4,155,4,90,4,155,4,91,4,156,4,92,4,156,4,91,4,156,4,92,4,157,4,93,4,157,4,92,4,157,4,93,4,158,4,94,4,158,4,93,4,158,4,94,4,159,4,95,4,159,4,94,4,159,4,95,4,160,4,96,4,160,4,95,4,160,4,96,4,161,4,97,4,161,4,96,4,161,4,97,4,162,4,98,4,162,4,97,4,162,4,98,4,163,4,99,4,163,4,98,4,163,4,99,4,164,4,100,4,164,4,99,4,164,4,100,4,165,4,101,4,165,4,100,4,165,4,101,4,166,4,102,4,166,4,101,4,166,4,102,4,167,4,103,4,167,4,102,4,167,4,103,4,168,4,104,4,168,4,103,4,168,4,104,4,169,4,105,4,169,4,104,4,169,4,105,4,170,4,106,4,170,4,105,4,170,4,106,4,171,4,107,4,171,4,106,4,171,4,107,4,172,4,108,4,172,4,107,4,172,4,108,4,173,4,109,4,173,4,108,4,173,4,109,4,174,4,110,4,174,4,109,4,174,4,110,4,175,4,111,4,175,4,110,4,175,4,111,4,176,4,112,4,176,4,111,4,176,4,112,4,177,4,113,4,177,4,112,4,177,4,113,4,178,4,114,4,178,4,113,4,178,4,114,4,179,4,115,4,179,4,114,4,179,4,115,4,180,4,116,4,180,4,115,4,180,4,116,4,181,4,117,4,181,4,116,4,181,4,117,4,182,4,118,4,182,4,117,4,182,4,118,4,183,4,119,4,183,4,118,4,183,4,119,4,184,4,120,4,184,4,119,4,184,4,120,4,185,4,121,4,185,4,120,4,185,4,121,4,186,4,122,4,186,4,121,4,186,4,122,4,187,4,123,4,187,4,122,4,187,4,123,4,188,4,124,4,188,4,123,4,188,4,124,4,189,4,125,4,189,4,124,4,189,4,125,4,190,4,126,4,190,4,125,4,190,4,126,4,191,4,127,4,191,4,126,4,192,4,128,4,193,4,129,4,193,4,128,4,193,4,129,4,194,4,130,4,194,4,129,4,194,4,130,4,195,4,131,4,195,4,130,4,195,4,131,4,196,4,132,4,196,4,131,4,196,4,132,4,197,4,133,4,197,4,132,4,197,4,133,4,198,4,134,4,198,4,133,4,198,4,134,4,199,4,135,4,199,4,134,4,199,4,135,4,200,4,136,4,200,4,135,4,200,4,136,4,201,4,137,4,201,4,136,4,201,4,137,4,202,4,138,4,202,4,137,4,202,4,138,4,203,4,139,4,203,4,138,4,203,4,139,4,204,4,140,4,204,4,139,4,204,4,140,4,205,4,141,4,205,4,140,4,205,4,141,4,206,4,142,4,206,4,141,4,206,4,142,4,207,4,143,4,207,4,142,4,207,4,143,4,208,4,144,4,208,4,143,4,208,4,144,4,209,4,145,4,209,4,144,4,209,4,145,4,210,4,146,4,210,4,145,4,210,4,146,4,211,4,147,4,211,4,146,4,211,4,147,4,212,4,148,4,212,4,147,4,212,4,148,4,213,4,149,4,213,4,148,4,213,4,149,4,214,4,150,4,214,4,149,4,214,4,150,4,215,4,151,4,215,4,150,4,215,4,151,4,216,4,152,4,216,4,151,4,216,4,152,4,217,4,153,4,217,4,152,4,217,4,153,4,218,4,154,4,218,4,153,4,218,4,154,4,219,4,155,4,219,4,154,4,219,4,155,4,220,4,156,4,220,4,155,4,220,4,156,4,221,4,157,4,221,4,156,4,221,4,157,4,222,4,158,4,222,4,157,4,222,4,158,4,223,4,159,4,223,4,158,4,223,4,159,4,224,4,160,4,224,4,159,4,224,4,160,4,225,4,161,4,225,4,160,4,225,4,161,4,226,4,162,4,226,4,161,4,226,4,162,4,227,4,163,4,227,4,162,4,227,4,163,4,228,4,164,4,228,4,163,4,228,4,164,4,229,4,165,4,229,4,164,4,229,4,165,4,230,4,166,4,230,4,165,4,230,4,166,4,231,4,167,4,231,4,166,4,231,4,167,4,232,4,168,4,232,4,167,4,232,4,168,4,233,4,169,4,233,4,168,4,233,4,169,4,234,4,170,4,234,4,169,4,234,4,170,4,235,4,171,4,235,4,170,4,235,4,171,4,236,4,172,4,236,4,171,4,236,4,172,4,237,4,173,4,237,4,172,4,237,4,173,4,238,4,174,4,238,4,173,4,238,4,174,4,239,4,175,4,239,4,174,4,239,4,175,4,240,4,176,4,240,4,175,4,240,4,176,4,241,4,177,4,241,4,176,4,241,4,177,4,242,4,178,4,242,4,177,4,242,4,178,4,243,4,179,4,243,4,178,4,243,4,179,4,244,4,180,4,244,4,179,4,244,4,180,4,245,4,181,4,245,4,180,4,245,4,181,4,246,4,182,4,246,4,181,4,246,4,182,4,247,4,183,4,247,4,182,4,247,4,183,4,248,4,184,4,248,4,183,4,248,4,184,4,249,4,185,4,249,4,184,4,249,4,185,4,250,4,186,4,250,4,185,4,250,4,186,4,251,4,187,4,251,4,186,4,251,4,187,4,252,4,188,4,252,4,187,4,252,4,188,4,253,4,189,4,253,4,188,4,253,4,189,4,254,4,190,4,254,4,189,4,254,4,190,4,255,4,191,4,255,4,190,4,0,5,192,4,1,5,193,4,1,5,192,4,1,5,193,4,2,5,194,4,2,5,193,4,2,5,194,4,3,5,195,4,3,5,194,4,3,5,195,4,4,5,196,4,4,5,195,4,4,5,196,4,5,5,197,4,5,5,196,4,5,5,197,4,6,5,198,4,6,5,197,4,6,5,198,4,7,5,199,4,7,5,198,4,7,5,199,4,8,5,200,4,8,5,199,4,8,5,200,4,9,5,201,4,9,5,200,4,9,5,201,4,10,5,202,4,10,5,201,4,10,5,202,4,11,5,203,4,11,5,202,4,11,5,203,4,12,5,204,4,12,5,203,4,12,5,204,4,13,5,205,4,13,5,204,4,13,5,205,4,14,5,206,4,14,5,205,4,14,5,206,4,15,5,207,4,15,5,206,4,15,5,207,4,16,5,208,4,16,5,207,4,16,5,208,4,17,5,209,4,17,5,208,4,17,5,209,4,18,5,210,4,18,5,209,4,18,5,210,4,19,5,211,4,19,5,210,4,19,5,211,4,20,5,212,4,20,5,211,4,20,5,212,4,21,5,213,4,21,5,212,4,21,5,213,4,22,5,214,4,22,5,213,4,22,5,214,4,23,5,215,4,23,5,214,4,23,5,215,4,24,5,216,4,24,5,215,4,24,5,216,4,25,5,217,4,25,5,216,4,25,5,217,4,26,5,218,4,26,5,217,4,26,5,218,4,27,5,219,4,27,5,218,4,27,5,219,4,28,5,220,4,28,5,219,4,28,5,220,4,29,5,221,4,29,5,220,4,29,5,221,4,30,5,222,4,30,5,221,4,30,5,222,4,31,5,223,4,31,5,222,4,31,5,223,4,32,5,224,4,32,5,223,4,32,5,224,4,33,5,225,4,33,5,224,4,33,5,225,4,34,5,226,4,34,5,225,4,34,5,226,4,35,5,227,4,35,5,226,4,35,5,227,4,36,5,228,4,36,5,227,4,36,5,228,4,37,5,229,4,37,5,228,4,37,5,229,4,38,5,230,4,38,5,229,4,38,5,230,4,39,5,231,4,39,5,230,4,39,5,231,4,40,5,232,4,40,5,231,4,40,5,232,4,41,5,233,4,41,5,232,4,41,5,233,4,42,5,234,4,42,5,233,4,42,5,234,4,43,5,235,4,43,5,234,4,43,5,235,4,44,5,236,4,44,5,235,4,44,5,236,4,45,5,237,4,45,5,236,4,45,5,237,4,46,5,238,4,46,5,237,4,46,5,238,4,47,5,239,4,47,5,238,4,47,5,239,4,48,5,240,4,48,5,239,4,48,5,240,4,49,5,241,4,49,5,240,4,49,5,241,4,50,5,242,4,50,5,241,4,50,5,242,4,51,5,243,4,51,5,242,4,51,5,243,4,52,5,244,4,52,5,243,4,52,5,244,4,53,5,245,4,53,5,244,4,53,5,245,4,54,5,246,4,54,5,245,4,54,5,246,4,55,5,247,4,55,5,246,4,55,5,247,4,56,5,248,4,56,5,247,4,56,5,248,4,57,5,249,4,57,5,248,4,57,5,249,4,58,5,250,4,58,5,249,4,58,5,250,4,59,5,251,4,59,5,250,4,59,5,251,4,60,5,252,4,60,5,251,4,60,5,252,4,61,5,253,4,61,5,252,4,61,5,253,4,62,5,254,4,62,5,253,4,62,5,254,4,63,5,255,4,63,5,254,4,64,5,0,5,65,5,1,5,65,5,0,5,65,5,1,5,66,5,2,5,66,5,1,5,66,5,2,5,67,5,3,5,67,5,2,5,67,5,3,5,68,5,4,5,68,5,3,5,68,5,4,5,69,5,5,5,69,5,4,5,69,5,5,5,70,5,6,5,70,5,5,5,70,5,6,5,71,5,7,5,71,5,6,5,71,5,7,5,72,5,8,5,72,5,7,5,72,5,8,5,73,5,9,5,73,5,8,5,73,5,9,5,74,5,10,5,74,5,9,5,74,5,10,5,75,5,11,5,75,5,10,5,75,5,11,5,76,5,12,5,76,5,11,5,76,5,12,5,77,5,13,5,77,5,12,5,77,5,13,5,78,5,14,5,78,5,13,5,78,5,14,5,79,5,15,5,79,5,14,5,79,5,15,5,80,5,16,5,80,5,15,5,80,5,16,5,81,5,17,5,81,5,16,5,81,5,17,5,82,5,18,5,82,5,17,5,82,5,18,5,83,5,19,5,83,5,18,5,83,5,19,5,84,5,20,5,84,5,19,5,84,5,20,5,85,5,21,5,85,5,20,5,85,5,21,5,86,5,22,5,86,5,21,5,86,5,22,5,87,5,23,5,87,5,22,5,87,5,23,5,88,5,24,5,88,5,23,5,88,5,24,5,89,5,25,5,89,5,24,5,89,5,25,5,90,5,26,5,90,5,25,5,90,5,26,5,91,5,27,5,91,5,26,5,91,5,27,5,92,5,28,5,92,5,27,5,92,5,28,5,93,5,29,5,93,5,28,5,93,5,29,5,94,5,30,5,94,5,29,5,94,5,30,5,95,5,31,5,95,5,30,5,95,5,31,5,96,5,32,5,96,5,31,5,96,5,32,5,97,5,33,5,97,5,32,5,97,5,33,5,98,5,34,5,98,5,33,5,98,5,34,5,99,5,35,5,99,5,34,5,99,5,35,5,100,5,36,5,100,5,35,5,100,5,36,5,101,5,37,5,101,5,36,5,101,5,37,5,102,5,38,5,102,5,37,5,102,5,38,5,103,5,39,5,103,5,38,5,103,5,39,5,104,5,40,5,104,5,39,5,104,5,40,5,105,5,41,5,105,5,40,5,105,5,41,5,106,5,42,5,106,5,41,5,106,5,42,5,107,5,43,5,107,5,42,5,107,5,43,5,108,5,44,5,108,5,43,5,108,5,44,5,109,5,45,5,109,5,44,5,109,5,45,5,110,5,46,5,110,5,45,5,110,5,46,5,111,5,47,5,111,5,46,5,111,5,47,5,112,5,48,5,112,5,47,5,112,5,48,5,113,5,49,5,113,5,48,5,113,5,49,5,114,5,50,5,114,5,49,5,114,5,50,5,115,5,51,5,115,5,50,5,115,5,51,5,116,5,52,5,116,5,51,5,116,5,52,5,117,5,53,5,117,5,52,5,117,5,53,5,118,5,54,5,118,5,53,5,118,5,54,5,119,5,55,5,119,5,54,5,119,5,55,5,120,5,56,5,120,5,55,5,120,5,56,5,121,5,57,5,121,5,56,5,121,5,57,5,122,5,58,5,122,5,57,5,122,5,58,5,123,5,59,5,123,5,58,5,123,5,59,5,124,5,60,5,124,5,59,5,124,5,60,5,125,5,61,5,125,5,60,5,125,5,61,5,126,5,62,5,126,5,61,5,126,5,62,5,127,5,63,5,127,5,62,5,128,5,64,5,129,5,65,5,129,5,64,5,129,5,65,5,130,5,66,5,130,5,65,5,130,5,66,5,131,5,67,5,131,5,66,5,131,5,67,5,132,5,68,5,132,5,67,5,132,5,68,5,133,5,69,5,133,5,68,5,133,5,69,5,134,5,70,5,134,5,69,5,134,5,70,5,135,5,71,5,135,5,70,5,135,5,71,5,136,5,72,5,136,5,71,5,136,5,72,5,137,5,73,5,137,5,72,5,137,5,73,5,138,5,74,5,138,5,73,5,138,5,74,5,139,5,75,5,139,5,74,5,139,5,75,5,140,5,76,5,140,5,75,5,140,5,76,5,141,5,77,5,141,5,76,5,141,5,77,5,142,5,78,5,142,5,77,5,142,5,78,5,143,5,79,5,143,5,78,5,143,5,79,5,144,5,80,5,144,5,79,5,144,5,80,5,145,5,81,5,145,5,80,5,145,5,81,5,146,5,82,5,146,5,81,5,146,5,82,5,147,5,83,5,147,5,82,5,147,5,83,5,148,5,84,5,148,5,83,5,148,5,84,5,149,5,85,5,149,5,84,5,149,5,85,5,150,5,86,5,150,5,85,5,150,5,86,5,151,5,87,5,151,5,86,5,151,5,87,5,152,5,88,5,152,5,87,5,152,5,88,5,153,5,89,5,153,5,88,5,153,5,89,5,154,5,90,5,154,5,89,5,154,5,90,5,155,5,91,5,155,5,90,5,155,5,91,5,156,5,92,5,156,5,91,5,156,5,92,5,157,5,93,5,157,5,92,5,157,5,93,5,158,5,94,5,158,5,93,5,158,5,94,5,159,5,95,5,159,5,94,5,159,5,95,5,160,5,96,5,160,5,95,5,160,5,96,5,161,5,97,5,161,5,96,5,161,5,97,5,162,5,98,5,162,5,97,5,162,5,98,5,163,5,99,5,163,5,98,5,163,5,99,5,164,5,100,5,164,5,99,5,164,5,100,5,165,5,101,5,165,5,100,5,165,5,101,5,166,5,102,5,166,5,101,5,166,5,102,5,167,5,103,5,167,5,102,5,167,5,103,5,168,5,104,5,168,5,103,5,168,5,104,5,169,5,105,5,169,5,104,5,169,5,105,5,170,5,106,5,170,5,105,5,170,5,106,5,171,5,107,5,171,5,106,5,171,5,107,5,172,5,108,5,172,5,107,5,172,5,108,5,173,5,109,5,173,5,108,5,173,5,109,5,174,5,110,5,174,5,109,5,174,5,110,5,175,5,111,5,175,5,110,5,175,5,111,5,176,5,112,5,176,5,111,5,176,5,112,5,177,5,113,5,177,5,112,5,177,5,113,5,178,5,114,5,178,5,113,5,178,5,114,5,179,5,115,5,179,5,114,5,179,5,115,5,180,5,116,5,180,5,115,5,180,5,116,5,181,5,117,5,181,5,116,5,181,5,117,5,182,5,118,5,182,5,117,5,182,5,118,5,183,5,119,5,183,5,118,5,183,5,119,5,184,5,120,5,184,5,119,5,184,5,120,5,185,5,121,5,185,5,120,5,185,5,121,5,186,5,122,5,186,5,121,5,186,5,122,5,187,5,123,5,187,5,122,5,187,5,123,5,188,5,124,5,188,5,123,5,188,5,124,5,189,5,125,5,189,5,124,5,189,5,125,5,190,5,126,5,190,5,125,5,190,5,126,5,191,5,127,5,191,5,126,5,192,5,128,5,193,5,129,5,193,5,128,5,193,5,129,5,194,5,130,5,194,5,129,5,194,5,130,5,195,5,131,5,195,5,130,5,195,5,131,5,196,5,132,5,196,5,131,5,196,5,132,5,197,5,133,5,197,5,132,5,197,5,133,5,198,5,134,5,198,5,133,5,198,5,134,5,199,5,135,5,199,5,134,5,199,5,135,5,200,5,136,5,200,5,135,5,200,5,136,5,201,5,137,5,201,5,136,5,201,5,137,5,202,5,138,5,202,5,137,5,202,5,138,5,203,5,139,5,203,5,138,5,203,5,139,5,204,5,140,5,204,5,139,5,204,5,140,5,205,5,141,5,205,5,140,5,205,5,141,5,206,5,142,5,206,5,141,5,206,5,142,5,207,5,143,5,207,5,142,5,207,5,143,5,208,5,144,5,208,5,143,5,208,5,144,5,209,5,145,5,209,5,144,5,209,5,145,5,210,5,146,5,210,5,145,5,210,5,146,5,211,5,147,5,211,5,146,5,211,5,147,5,212,5,148,5,212,5,147,5,212,5,148,5,213,5,149,5,213,5,148,5,213,5,149,5,214,5,150,5,214,5,149,5,214,5,150,5,215,5,151,5,215,5,150,5,215,5,151,5,216,5,152,5,216,5,151,5,216,5,152,5,217,5,153,5,217,5,152,5,217,5,153,5,218,5,154,5,218,5,153,5,218,5,154,5,219,5,155,5,219,5,154,5,219,5,155,5,220,5,156,5,220,5,155,5,220,5,156,5,221,5,157,5,221,5,156,5,221,5,157,5,222,5,158,5,222,5,157,5,222,5,158,5,223,5,159,5,223,5,158,5,223,5,159,5,224,5,160,5,224,5,159,5,224,5,160,5,225,5,161,5,225,5,160,5,225,5,161,5,226,5,162,5,226,5,161,5,226,5,162,5,227,5,163,5,227,5,162,5,227,5,163,5,228,5,164,5,228,5,163,5,228,5,164,5,229,5,165,5,229,5,164,5,229,5,165,5,230,5,166,5,230,5,165,5,230,5,166,5,231,5,167,5,231,5,166,5,231,5,167,5,232,5,168,5,232,5,167,5,232,5,168,5,233,5,169,5,233,5,168,5,233,5,169,5,234,5,170,5,234,5,169,5,234,5,170,5,235,5,171,5,235,5,170,5,235,5,171,5,236,5,172,5,236,5,171,5,236,5,172,5,237,5,173,5,237,5,172,5,237,5,173,5,238,5,174,5,238,5,173,5,238,5,174,5,239,5,175,5,239,5,174,5,239,5,175,5,240,5,176,5,240,5,175,5,240,5,176,5,241,5,177,5,241,5,176,5,241,5,177,5,242,5,178,5,242,5,177,5,242,5,178,5,243,5,179,5,243,5,178,5,243,5,179,5,244,5,180,5,244,5,179,5,244,5,180,5,245,5,181,5,245,5,180,5,245,5,181,5,246,5,182,5,246,5,181,5,246,5,182,5,247,5,183,5,247,5,182,5,247,5,183,5,248,5,184,5,248,5,183,5,248,5,184,5,249,5,185,5,249,5,184,5,249,5,185,5,250,5,186,5,250,5,185,5,250,5,186,5,251,5,187,5,251,5,186,5,251,5,187,5,252,5,188,5,252,5,187,5,252,5,188,5,253,5,189,5,253,5,188,5,253,5,189,5,254,5,190,5,254,5,189,5,254,5,190,5,255,5,191,5,255,5,190,5,0,6,192,5,1,6,193,5,1,6,192,5,1,6,193,5,2,6,194,5,2,6,193,5,2,6,194,5,3,6,195,5,3,6,194,5,3,6,195,5,4,6,196,5,4,6,195,5,4,6,196,5,5,6,197,5,5,6,196,5,5,6,197,5,6,6,198,5,6,6,197,5,6,6,198,5,7,6,199,5,7,6,198,5,7,6,199,5,8,6,200,5,8,6,199,5,8,6,200,5,9,6,201,5,9,6,200,5,9,6,201,5,10,6,202,5,10,6,201,5,10,6,202,5,11,6,203,5,11,6,202,5,11,6,203,5,12,6,204,5,12,6,203,5,12,6,204,5,13,6,205,5,13,6,204,5,13,6,205,5,14,6,206,5,14,6,205,5,14,6,206,5,15,6,207,5,15,6,206,5,15,6,207,5,16,6,208,5,16,6,207,5,16,6,208,5,17,6,209,5,17,6,208,5,17,6,209,5,18,6,210,5,18,6,209,5,18,6,210,5,19,6,211,5,19,6,210,5,19,6,211,5,20,6,212,5,20,6,211,5,20,6,212,5,21,6,213,5,21,6,212,5,21,6,213,5,22,6,214,5,22,6,213,5,22,6,214,5,23,6,215,5,23,6,214,5,23,6,215,5,24,6,216,5,24,6,215,5,24,6,216,5,25,6,217,5,25,6,216,5,25,6,217,5,26,6,218,5,26,6,217,5,26,6,218,5,27,6,219,5,27,6,218,5,27,6,219,5,28,6,220,5,28,6,219,5,28,6,220,5,29,6,221,5,29,6,220,5,29,6,221,5,30,6,222,5,30,6,221,5,30,6,222,5,31,6,223,5,31,6,222,5,31,6,223,5,32,6,224,5,32,6,223,5,32,6,224,5,33,6,225,5,33,6,224,5,33,6,225,5,34,6,226,5,34,6,225,5,34,6,226,5,35,6,227,5,35,6,226,5,35,6,227,5,36,6,228,5,36,6,227,5,36,6,228,5,37,6,229,5,37,6,228,5,37,6,229,5,38,6,230,5,38,6,229,5,38,6,230,5,39,6,231,5,39,6,230,5,39,6,231,5,40,6,232,5,40,6,231,5,40,6,232,5,41,6,233,5,41,6,232,5,41,6,233,5,42,6,234,5,42,6,233,5,42,6,234,5,43,6,235,5,43,6,234,5,43,6,235,5,44,6,236,5,44,6,235,5,44,6,236,5,45,6,237,5,45,6,236,5,45,6,237,5,46,6,238,5,46,6,237,5,46,6,238,5,47,6,239,5,47,6,238,5,47,6,239,5,48,6,240,5,48,6,239,5,48,6,240,5,49,6,241,5,49,6,240,5,49,6,241,5,50,6,242,5,50,6,241,5,50,6,242,5,51,6,243,5,51,6,242,5,51,6,243,5,52,6,244,5,52,6,243,5,52,6,244,5,53,6,245,5,53,6,244,5,53,6,245,5,54,6,246,5,54,6,245,5,54,6,246,5,55,6,247,5,55,6,246,5,55,6,247,5,56,6,248,5,56,6,247,5,56,6,248,5,57,6,249,5,57,6,248,5,57,6,249,5,58,6,250,5,58,6,249,5,58,6,250,5,59,6,251,5,59,6,250,5,59,6,251,5,60,6,252,5,60,6,251,5,60,6,252,5,61,6,253,5,61,6,252,5,61,6,253,5,62,6,254,5,62,6,253,5,62,6,254,5,63,6,255,5,63,6,254,5,64,6,0,6,65,6,1,6,65,6,0,6,65,6,1,6,66,6,2,6,66,6,1,6,66,6,2,6,67,6,3,6,67,6,2,6,67,6,3,6,68,6,4,6,68,6,3,6,68,6,4,6,69,6,5,6,69,6,4,6,69,6,5,6,70,6,6,6,70,6,5,6,70,6,6,6,71,6,7,6,71,6,6,6,71,6,7,6,72,6,8,6,72,6,7,6,72,6,8,6,73,6,9,6,73,6,8,6,73,6,9,6,74,6,10,6,74,6,9,6,74,6,10,6,75,6,11,6,75,6,10,6,75,6,11,6,76,6,12,6,76,6,11,6,76,6,12,6,77,6,13,6,77,6,12,6,77,6,13,6,78,6,14,6,78,6,13,6,78,6,14,6,79,6,15,6,79,6,14,6,79,6,15,6,80,6,16,6,80,6,15,6,80,6,16,6,81,6,17,6,81,6,16,6,81,6,17,6,82,6,18,6,82,6,17,6,82,6,18,6,83,6,19,6,83,6,18,6,83,6,19,6,84,6,20,6,84,6,19,6,84,6,20,6,85,6,21,6,85,6,20,6,85,6,21,6,86,6,22,6,86,6,21,6,86,6,22,6,87,6,23,6,87,6,22,6,87,6,23,6,88,6,24,6,88,6,23,6,88,6,24,6,89,6,25,6,89,6,24,6,89,6,25,6,90,6,26,6,90,6,25,6,90,6,26,6,91,6,27,6,91,6,26,6,91,6,27,6,92,6,28,6,92,6,27,6,92,6,28,6,93,6,29,6,93,6,28,6,93,6,29,6,94,6,30,6,94,6,29,6,94,6,30,6,95,6,31,6,95,6,30,6,95,6,31,6,96,6,32,6,96,6,31,6,96,6,32,6,97,6,33,6,97,6,32,6,97,6,33,6,98,6,34,6,98,6,33,6,98,6,34,6,99,6,35,6,99,6,34,6,99,6,35,6,100,6,36,6,100,6,35,6,100,6,36,6,101,6,37,6,101,6,36,6,101,6,37,6,102,6,38,6,102,6,37,6,102,6,38,6,103,6,39,6,103,6,38,6,103,6,39,6,104,6,40,6,104,6,39,6,104,6,40,6,105,6,41,6,105,6,40,6,105,6,41,6,106,6,42,6,106,6,41,6,106,6,42,6,107,6,43,6,107,6,42,6,107,6,43,6,108,6,44,6,108,6,43,6,108,6,44,6,109,6,45,6,109,6,44,6,109,6,45,6,110,6,46,6,110,6,45,6,110,6,46,6,111,6,47,6,111,6,46,6,111,6,47,6,112,6,48,6,112,6,47,6,112,6,48,6,113,6,49,6,113,6,48,6,113,6,49,6,114,6,50,6,114,6,49,6,114,6,50,6,115,6,51,6,115,6,50,6,115,6,51,6,116,6,52,6,116,6,51,6,116,6,52,6,117,6,53,6,117,6,52,6,117,6,53,6,118,6,54,6,118,6,53,6,118,6,54,6,119,6,55,6,119,6,54,6,119,6,55,6,120,6,56,6,120,6,55,6,120,6,56,6,121,6,57,6,121,6,56,6,121,6,57,6,122,6,58,6,122,6,57,6,122,6,58,6,123,6,59,6,123,6,58,6,123,6,59,6,124,6,60,6,124,6,59,6,124,6,60,6,125,6,61,6,125,6,60,6,125,6,61,6,126,6,62,6,126,6,61,6,126,6,62,6,127,6,63,6,127,6,62,6,128,6,64,6,129,6,65,6,129,6,64,6,129,6,65,6,130,6,66,6,130,6,65,6,130,6,66,6,131,6,67,6,131,6,66,6,131,6,67,6,132,6,68,6,132,6,67,6,132,6,68,6,133,6,69,6,133,6,68,6,133,6,69,6,134,6,70,6,134,6,69,6,134,6,70,6,135,6,71,6,135,6,70,6,135,6,71,6,136,6,72,6,136,6,71,6,136,6,72,6,137,6,73,6,137,6,72,6,137,6,73,6,138,6,74,6,138,6,73,6,138,6,74,6,139,6,75,6,139,6,74,6,139,6,75,6,140,6,76,6,140,6,75,6,140,6,76,6,141,6,77,6,141,6,76,6,141,6,77,6,142,6,78,6,142,6,77,6,142,6,78,6,143,6,79,6,143,6,78,6,143,6,79,6,144,6,80,6,144,6,79,6,144,6,80,6,145,6,81,6,145,6,80,6,145,6,81,6,146,6,82,6,146,6,81,6,146,6,82,6,147,6,83,6,147,6,82,6,147,6,83,6,148,6,84,6,148,6,83,6,148,6,84,6,149,6,85,6,149,6,84,6,149,6,85,6,150,6,86,6,150,6,85,6,150,6,86,6,151,6,87,6,151,6,86,6,151,6,87,6,152,6,88,6,152,6,87,6,152,6,88,6,153,6,89,6,153,6,88,6,153,6,89,6,154,6,90,6,154,6,89,6,154,6,90,6,155,6,91,6,155,6,90,6,155,6,91,6,156,6,92,6,156,6,91,6,156,6,92,6,157,6,93,6,157,6,92,6,157,6,93,6,158,6,94,6,158,6,93,6,158,6,94,6,159,6,95,6,159,6,94,6,159,6,95,6,160,6,96,6,160,6,95,6,160,6,96,6,161,6,97,6,161,6,96,6,161,6,97,6,162,6,98,6,162,6,97,6,162,6,98,6,163,6,99,6,163,6,98,6,163,6,99,6,164,6,100,6,164,6,99,6,164,6,100,6,165,6,101,6,165,6,100,6,165,6,101,6,166,6,102,6,166,6,101,6,166,6,102,6,167,6,103,6,167,6,102,6,167,6,103,6,168,6,104,6,168,6,103,6,168,6,104,6,169,6,105,6,169,6,104,6,169,6,105,6,170,6,106,6,170,6,105,6,170,6,106,6,171,6,107,6,171,6,106,6,171,6,107,6,172,6,108,6,172,6,107,6,172,6,108,6,173,6,109,6,173,6,108,6,173,6,109,6,174,6,110,6,174,6,109,6,174,6,110,6,175,6,111,6,175,6,110,6,175,6,111,6,176,6,112,6,176,6,111,6,176,6,112,6,177,6,113,6,177,6,112,6,177,6,113,6,178,6,114,6,178,6,113,6,178,6,114,6,179,6,115,6,179,6,114,6,179,6,115,6,180,6,116,6,180,6,115,6,180,6,116,6,181,6,117,6,181,6,116,6,181,6,117,6,182,6,118,6,182,6,117,6,182,6,118,6,183,6,119,6,183,6,118,6,183,6,119,6,184,6,120,6,184,6,119,6,184,6,120,6,185,6,121,6,185,6,120,6,185,6,121,6,186,6,122,6,186,6,121,6,186,6,122,6,187,6,123,6,187,6,122,6,187,6,123,6,188,6,124,6,188,6,123,6,188,6,124,6,189,6,125,6,189,6,124,6,189,6,125,6,190,6,126,6,190,6,125,6,190,6,126,6,191,6,127,6,191,6,126,6,192,6,128,6,193,6,129,6,193,6,128,6,193,6,129,6,194,6,130,6,194,6,129,6,194,6,130,6,195,6,131,6,195,6,130,6,195,6,131,6,196,6,132,6,196,6,131,6,196,6,132,6,197,6,133,6,197,6,132,6,197,6,133,6,198,6,134,6,198,6,133,6,198,6,134,6,199,6,135,6,199,6,134,6,199,6,135,6,200,6,136,6,200,6,135,6,200,6,136,6,201,6,137,6,201,6,136,6,201,6,137,6,202,6,138,6,202,6,137,6,202,6,138,6,203,6,139,6,203,6,138,6,203,6,139,6,204,6,140,6,204,6,139,6,204,6,140,6,205,6,141,6,205,6,140,6,205,6,141,6,206,6,142,6,206,6,141,6,206,6,142,6,207,6,143,6,207,6,142,6,207,6,143,6,208,6,144,6,208,6,143,6,208,6,144,6,209,6,145,6,209,6,144,6,209,6,145,6,210,6,146,6,210,6,145,6,210,6,146,6,211,6,147,6,211,6,146,6,211,6,147,6,212,6,148,6,212,6,147,6,212,6,148,6,213,6,149,6,213,6,148,6,213,6,149,6,214,6,150,6,214,6,149,6,214,6,150,6,215,6,151,6,215,6,150,6,215,6,151,6,216,6,152,6,216,6,151,6,216,6,152,6,217,6,153,6,217,6,152,6,217,6,153,6,218,6,154,6,218,6,153,6,218,6,154,6,219,6,155,6,219,6,154,6,219,6,155,6,220,6,156,6,220,6,155,6,220,6,156,6,221,6,157,6,221,6,156,6,221,6,157,6,222,6,158,6,222,6,157,6,222,6,158,6,223,6,159,6,223,6,158,6,223,6,159,6,224,6,160,6,224,6,159,6,224,6,160,6,225,6,161,6,225,6,160,6,225,6,161,6,226,6,162,6,226,6,161,6,226,6,162,6,227,6,163,6,227,6,162,6,227,6,163,6,228,6,164,6,228,6,163,6,228,6,164,6,229,6,165,6,229,6,164,6,229,6,165,6,230,6,166,6,230,6,165,6,230,6,166,6,231,6,167,6,231,6,166,6,231,6,167,6,232,6,168,6,232,6,167,6,232,6,168,6,233,6,169,6,233,6,168,6,233,6,169,6,234,6,170,6,234,6,169,6,234,6,170,6,235,6,171,6,235,6,170,6,235,6,171,6,236,6,172,6,236,6,171,6,236,6,172,6,237,6,173,6,237,6,172,6,237,6,173,6,238,6,174,6,238,6,173,6,238,6,174,6,239,6,175,6,239,6,174,6,239,6,175,6,240,6,176,6,240,6,175,6,240,6,176,6,241,6,177,6,241,6,176,6,241,6,177,6,242,6,178,6,242,6,177,6,242,6,178,6,243,6,179,6,243,6,178,6,243,6,179,6,244,6,180,6,244,6,179,6,244,6,180,6,245,6,181,6,245,6,180,6,245,6,181,6,246,6,182,6,246,6,181,6,246,6,182,6,247,6,183,6,247,6,182,6,247,6,183,6,248,6,184,6,248,6,183,6,248,6,184,6,249,6,185,6,249,6,184,6,249,6,185,6,250,6,186,6,250,6,185,6,250,6,186,6,251,6,187,6,251,6,186,6,251,6,187,6,252,6,188,6,252,6,187,6,252,6,188,6,253,6,189,6,253,6,188,6,253,6,189,6,254,6,190,6,254,6,189,6,254,6,190,6,255,6,191,6,255,6,190,6,0,7,192,6,1,7,193,6,1,7,192,6,1,7,193,6,2,7,194,6,2,7,193,6,2,7,194,6,3,7,195,6,3,7,194,6,3,7,195,6,4,7,196,6,4,7,195,6,4,7,196,6,5,7,197,6,5,7,196,6,5,7,197,6,6,7,198,6,6,7,197,6,6,7,198,6,7,7,199,6,7,7,198,6,7,7,199,6,8,7,200,6,8,7,199,6,8,7,200,6,9,7,201,6,9,7,200,6,9,7,201,6,10,7,202,6,10,7,201,6,10,7,202,6,11,7,203,6,11,7,202,6,11,7,203,6,12,7,204,6,12,7,203,6,12,7,204,6,13,7,205,6,13,7,204,6,13,7,205,6,14,7,206,6,14,7,205,6,14,7,206,6,15,7,207,6,15,7,206,6,15,7,207,6,16,7,208,6,16,7,207,6,16,7,208,6,17,7,209,6,17,7,208,6,17,7,209,6,18,7,210,6,18,7,209,6,18,7,210,6,19,7,211,6,19,7,210,6,19,7,211,6,20,7,212,6,20,7,211,6,20,7,212,6,21,7,213,6,21,7,212,6,21,7,213,6,22,7,214,6,22,7,213,6,22,7,214,6,23,7,215,6,23,7,214,6,23,7,215,6,24,7,216,6,24,7,215,6,24,7,216,6,25,7,217,6,25,7,216,6,25,7,217,6,26,7,218,6,26,7,217,6,26,7,218,6,27,7,219,6,27,7,218,6,27,7,219,6,28,7,220,6,28,7,219,6,28,7,220,6,29,7,221,6,29,7,220,6,29,7,221,6,30,7,222,6,30,7,221,6,30,7,222,6,31,7,223,6,31,7,222,6,31,7,223,6,32,7,224,6,32,7,223,6,32,7,224,6,33,7,225,6,33,7,224,6,33,7,225,6,34,7,226,6,34,7,225,6,34,7,226,6,35,7,227,6,35,7,226,6,35,7,227,6,36,7,228,6,36,7,227,6,36,7,228,6,37,7,229,6,37,7,228,6,37,7,229,6,38,7,230,6,38,7,229,6,38,7,230,6,39,7,231,6,39,7,230,6,39,7,231,6,40,7,232,6,40,7,231,6,40,7,232,6,41,7,233,6,41,7,232,6,41,7,233,6,42,7,234,6,42,7,233,6,42,7,234,6,43,7,235,6,43,7,234,6,43,7,235,6,44,7,236,6,44,7,235,6,44,7,236,6,45,7,237,6,45,7,236,6,45,7,237,6,46,7,238,6,46,7,237,6,46,7,238,6,47,7,239,6,47,7,238,6,47,7,239,6,48,7,240,6,48,7,239,6,48,7,240,6,49,7,241,6,49,7,240,6,49,7,241,6,50,7,242,6,50,7,241,6,50,7,242,6,51,7,243,6,51,7,242,6,51,7,243,6,52,7,244,6,52,7,243,6,52,7,244,6,53,7,245,6,53,7,244,6,53,7,245,6,54,7,246,6,54,7,245,6,54,7,246,6,55,7,247,6,55,7,246,6,55,7,247,6,56,7,248,6,56,7,247,6,56,7,248,6,57,7,249,6,57,7,248,6,57,7,249,6,58,7,250,6,58,7,249,6,58,7,250,6,59,7,251,6,59,7,250,6,59,7,251,6,60,7,252,6,60,7,251,6,60,7,252,6,61,7,253,6,61,7,252,6,61,7,253,6,62,7,254,6,62,7,253,6,62,7,254,6,63,7,255,6,63,7,254,6,64,7,0,7,65,7,1,7,65,7,0,7,65,7,1,7,66,7,2,7,66,7,1,7,66,7,2,7,67,7,3,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81920);
/* memory initializer */ allocate([67,7,2,7,67,7,3,7,68,7,4,7,68,7,3,7,68,7,4,7,69,7,5,7,69,7,4,7,69,7,5,7,70,7,6,7,70,7,5,7,70,7,6,7,71,7,7,7,71,7,6,7,71,7,7,7,72,7,8,7,72,7,7,7,72,7,8,7,73,7,9,7,73,7,8,7,73,7,9,7,74,7,10,7,74,7,9,7,74,7,10,7,75,7,11,7,75,7,10,7,75,7,11,7,76,7,12,7,76,7,11,7,76,7,12,7,77,7,13,7,77,7,12,7,77,7,13,7,78,7,14,7,78,7,13,7,78,7,14,7,79,7,15,7,79,7,14,7,79,7,15,7,80,7,16,7,80,7,15,7,80,7,16,7,81,7,17,7,81,7,16,7,81,7,17,7,82,7,18,7,82,7,17,7,82,7,18,7,83,7,19,7,83,7,18,7,83,7,19,7,84,7,20,7,84,7,19,7,84,7,20,7,85,7,21,7,85,7,20,7,85,7,21,7,86,7,22,7,86,7,21,7,86,7,22,7,87,7,23,7,87,7,22,7,87,7,23,7,88,7,24,7,88,7,23,7,88,7,24,7,89,7,25,7,89,7,24,7,89,7,25,7,90,7,26,7,90,7,25,7,90,7,26,7,91,7,27,7,91,7,26,7,91,7,27,7,92,7,28,7,92,7,27,7,92,7,28,7,93,7,29,7,93,7,28,7,93,7,29,7,94,7,30,7,94,7,29,7,94,7,30,7,95,7,31,7,95,7,30,7,95,7,31,7,96,7,32,7,96,7,31,7,96,7,32,7,97,7,33,7,97,7,32,7,97,7,33,7,98,7,34,7,98,7,33,7,98,7,34,7,99,7,35,7,99,7,34,7,99,7,35,7,100,7,36,7,100,7,35,7,100,7,36,7,101,7,37,7,101,7,36,7,101,7,37,7,102,7,38,7,102,7,37,7,102,7,38,7,103,7,39,7,103,7,38,7,103,7,39,7,104,7,40,7,104,7,39,7,104,7,40,7,105,7,41,7,105,7,40,7,105,7,41,7,106,7,42,7,106,7,41,7,106,7,42,7,107,7,43,7,107,7,42,7,107,7,43,7,108,7,44,7,108,7,43,7,108,7,44,7,109,7,45,7,109,7,44,7,109,7,45,7,110,7,46,7,110,7,45,7,110,7,46,7,111,7,47,7,111,7,46,7,111,7,47,7,112,7,48,7,112,7,47,7,112,7,48,7,113,7,49,7,113,7,48,7,113,7,49,7,114,7,50,7,114,7,49,7,114,7,50,7,115,7,51,7,115,7,50,7,115,7,51,7,116,7,52,7,116,7,51,7,116,7,52,7,117,7,53,7,117,7,52,7,117,7,53,7,118,7,54,7,118,7,53,7,118,7,54,7,119,7,55,7,119,7,54,7,119,7,55,7,120,7,56,7,120,7,55,7,120,7,56,7,121,7,57,7,121,7,56,7,121,7,57,7,122,7,58,7,122,7,57,7,122,7,58,7,123,7,59,7,123,7,58,7,123,7,59,7,124,7,60,7,124,7,59,7,124,7,60,7,125,7,61,7,125,7,60,7,125,7,61,7,126,7,62,7,126,7,61,7,126,7,62,7,127,7,63,7,127,7,62,7,128,7,64,7,129,7,65,7,129,7,64,7,129,7,65,7,130,7,66,7,130,7,65,7,130,7,66,7,131,7,67,7,131,7,66,7,131,7,67,7,132,7,68,7,132,7,67,7,132,7,68,7,133,7,69,7,133,7,68,7,133,7,69,7,134,7,70,7,134,7,69,7,134,7,70,7,135,7,71,7,135,7,70,7,135,7,71,7,136,7,72,7,136,7,71,7,136,7,72,7,137,7,73,7,137,7,72,7,137,7,73,7,138,7,74,7,138,7,73,7,138,7,74,7,139,7,75,7,139,7,74,7,139,7,75,7,140,7,76,7,140,7,75,7,140,7,76,7,141,7,77,7,141,7,76,7,141,7,77,7,142,7,78,7,142,7,77,7,142,7,78,7,143,7,79,7,143,7,78,7,143,7,79,7,144,7,80,7,144,7,79,7,144,7,80,7,145,7,81,7,145,7,80,7,145,7,81,7,146,7,82,7,146,7,81,7,146,7,82,7,147,7,83,7,147,7,82,7,147,7,83,7,148,7,84,7,148,7,83,7,148,7,84,7,149,7,85,7,149,7,84,7,149,7,85,7,150,7,86,7,150,7,85,7,150,7,86,7,151,7,87,7,151,7,86,7,151,7,87,7,152,7,88,7,152,7,87,7,152,7,88,7,153,7,89,7,153,7,88,7,153,7,89,7,154,7,90,7,154,7,89,7,154,7,90,7,155,7,91,7,155,7,90,7,155,7,91,7,156,7,92,7,156,7,91,7,156,7,92,7,157,7,93,7,157,7,92,7,157,7,93,7,158,7,94,7,158,7,93,7,158,7,94,7,159,7,95,7,159,7,94,7,159,7,95,7,160,7,96,7,160,7,95,7,160,7,96,7,161,7,97,7,161,7,96,7,161,7,97,7,162,7,98,7,162,7,97,7,162,7,98,7,163,7,99,7,163,7,98,7,163,7,99,7,164,7,100,7,164,7,99,7,164,7,100,7,165,7,101,7,165,7,100,7,165,7,101,7,166,7,102,7,166,7,101,7,166,7,102,7,167,7,103,7,167,7,102,7,167,7,103,7,168,7,104,7,168,7,103,7,168,7,104,7,169,7,105,7,169,7,104,7,169,7,105,7,170,7,106,7,170,7,105,7,170,7,106,7,171,7,107,7,171,7,106,7,171,7,107,7,172,7,108,7,172,7,107,7,172,7,108,7,173,7,109,7,173,7,108,7,173,7,109,7,174,7,110,7,174,7,109,7,174,7,110,7,175,7,111,7,175,7,110,7,175,7,111,7,176,7,112,7,176,7,111,7,176,7,112,7,177,7,113,7,177,7,112,7,177,7,113,7,178,7,114,7,178,7,113,7,178,7,114,7,179,7,115,7,179,7,114,7,179,7,115,7,180,7,116,7,180,7,115,7,180,7,116,7,181,7,117,7,181,7,116,7,181,7,117,7,182,7,118,7,182,7,117,7,182,7,118,7,183,7,119,7,183,7,118,7,183,7,119,7,184,7,120,7,184,7,119,7,184,7,120,7,185,7,121,7,185,7,120,7,185,7,121,7,186,7,122,7,186,7,121,7,186,7,122,7,187,7,123,7,187,7,122,7,187,7,123,7,188,7,124,7,188,7,123,7,188,7,124,7,189,7,125,7,189,7,124,7,189,7,125,7,190,7,126,7,190,7,125,7,190,7,126,7,191,7,127,7,191,7,126,7,192,7,128,7,193,7,129,7,193,7,128,7,193,7,129,7,194,7,130,7,194,7,129,7,194,7,130,7,195,7,131,7,195,7,130,7,195,7,131,7,196,7,132,7,196,7,131,7,196,7,132,7,197,7,133,7,197,7,132,7,197,7,133,7,198,7,134,7,198,7,133,7,198,7,134,7,199,7,135,7,199,7,134,7,199,7,135,7,200,7,136,7,200,7,135,7,200,7,136,7,201,7,137,7,201,7,136,7,201,7,137,7,202,7,138,7,202,7,137,7,202,7,138,7,203,7,139,7,203,7,138,7,203,7,139,7,204,7,140,7,204,7,139,7,204,7,140,7,205,7,141,7,205,7,140,7,205,7,141,7,206,7,142,7,206,7,141,7,206,7,142,7,207,7,143,7,207,7,142,7,207,7,143,7,208,7,144,7,208,7,143,7,208,7,144,7,209,7,145,7,209,7,144,7,209,7,145,7,210,7,146,7,210,7,145,7,210,7,146,7,211,7,147,7,211,7,146,7,211,7,147,7,212,7,148,7,212,7,147,7,212,7,148,7,213,7,149,7,213,7,148,7,213,7,149,7,214,7,150,7,214,7,149,7,214,7,150,7,215,7,151,7,215,7,150,7,215,7,151,7,216,7,152,7,216,7,151,7,216,7,152,7,217,7,153,7,217,7,152,7,217,7,153,7,218,7,154,7,218,7,153,7,218,7,154,7,219,7,155,7,219,7,154,7,219,7,155,7,220,7,156,7,220,7,155,7,220,7,156,7,221,7,157,7,221,7,156,7,221,7,157,7,222,7,158,7,222,7,157,7,222,7,158,7,223,7,159,7,223,7,158,7,223,7,159,7,224,7,160,7,224,7,159,7,224,7,160,7,225,7,161,7,225,7,160,7,225,7,161,7,226,7,162,7,226,7,161,7,226,7,162,7,227,7,163,7,227,7,162,7,227,7,163,7,228,7,164,7,228,7,163,7,228,7,164,7,229,7,165,7,229,7,164,7,229,7,165,7,230,7,166,7,230,7,165,7,230,7,166,7,231,7,167,7,231,7,166,7,231,7,167,7,232,7,168,7,232,7,167,7,232,7,168,7,233,7,169,7,233,7,168,7,233,7,169,7,234,7,170,7,234,7,169,7,234,7,170,7,235,7,171,7,235,7,170,7,235,7,171,7,236,7,172,7,236,7,171,7,236,7,172,7,237,7,173,7,237,7,172,7,237,7,173,7,238,7,174,7,238,7,173,7,238,7,174,7,239,7,175,7,239,7,174,7,239,7,175,7,240,7,176,7,240,7,175,7,240,7,176,7,241,7,177,7,241,7,176,7,241,7,177,7,242,7,178,7,242,7,177,7,242,7,178,7,243,7,179,7,243,7,178,7,243,7,179,7,244,7,180,7,244,7,179,7,244,7,180,7,245,7,181,7,245,7,180,7,245,7,181,7,246,7,182,7,246,7,181,7,246,7,182,7,247,7,183,7,247,7,182,7,247,7,183,7,248,7,184,7,248,7,183,7,248,7,184,7,249,7,185,7,249,7,184,7,249,7,185,7,250,7,186,7,250,7,185,7,250,7,186,7,251,7,187,7,251,7,186,7,251,7,187,7,252,7,188,7,252,7,187,7,252,7,188,7,253,7,189,7,253,7,188,7,253,7,189,7,254,7,190,7,254,7,189,7,254,7,190,7,255,7,191,7,255,7,190,7,0,0,0,0,0,0,122,64,36,185,151,65,0,0,250,66,0,0,122,64,104,179,160,65,240,231,0,67,0,0,250,64,120,156,164,65,0,0,250,66,0,0,250,64,120,156,168,65,240,231,0,67,52,128,59,65,38,100,172,65,0,0,250,66,52,128,59,65,196,66,171,65,240,231,0,67,0,0,122,65,108,248,179,65,0,0,250,66,0,0,122,65,9,10,181,65,240,231,0,67,26,64,156,65,120,156,178,65,0,0,250,66,26,64,156,65,111,240,176,65,240,231,0,67,0,128,187,65,138,48,163,65,0,0,250,66,0,128,187,65,125,46,163,65,240,231,0,67,26,192,218,65,48,76,149,65,0,0,250,66,26,192,218,65,217,223,149,65,240,231,0,67,0,0,250,65,122,199,139,65,0,0,250,66,0,0,250,65,177,80,143,65,240,231,0,67,13,160,12,66,152,221,131,65,0,0,250,66,13,160,12,66,81,90,138,65,240,231,0,67,0,64,28,66,171,62,116,65,0,0,250,66,0,64,28,66,14,79,132,65,240,231,0,67,13,224,43,66,98,16,102,65,0,0,250,66,13,224,43,66,247,6,123,65,240,231,0,67,0,128,59,66,146,203,95,65,0,0,250,66,0,128,59,66,45,67,106,65,240,231,0,67,13,32,75,66,5,52,107,65,0,0,250,66,13,32,75,66,166,155,101,65,240,231,0,67,0,192,90,66,88,202,113,65,0,0,250,66,0,192,90,66,0,145,98,65,240,231,0,67,13,96,106,66,237,158,106,65,0,0,250,66,13,96,106,66,162,69,104,65,240,231,0,67,0,0,122,66,33,176,106,65,0,0,250,66,0,0,122,66,242,176,113,65,240,231,0,67,7,208,132,66,206,170,111,65,0,0,250,66,7,208,132,66,21,140,128,65,240,231,0,67,0,160,140,66,64,164,119,65,0,0,250,66,0,160,140,66,52,0,133,65,240,231,0,67,7,112,148,66,157,128,113,65,0,0,250,66,7,112,148,66,157,128,127,65,240,231,0,67,0,64,156,66,65,130,120,65,0,0,250,66,0,64,156,66,236,47,128,65,240,231,0,67,7,16,164,66,33,159,128,65,0,0,250,66,7,16,164,66,215,163,129,65,240,231,0,67,0,224,171,66,157,0,143,65,0,0,250,66,0,224,171,66,154,136,150,65,240,231,0,67,7,176,179,66,95,7,151,65,0,0,250,66,7,176,179,66,122,37,157,65,240,231,0,67,0,128,187,66,0,145,158,65,0,0,250,66,0,128,187,66,50,85,162,65,240,231,0,67,7,80,195,66,249,15,186,65,0,0,250,66,7,80,195,66,174,216,185,65,240,231,0,67,66,32,203,66,93,126,202,65,0,0,250,66,66,32,203,66,86,14,207,65,240,231,0,67,33,240,210,66,114,249,214,65,0,0,250,66,33,240,210,66,188,150,220,65,240,231,0,67,0,192,218,66,99,238,229,65,0,0,250,66,0,192,218,66,199,186,231,65,240,231,0,67,223,143,226,66,161,120,239,65,0,0,250,66,223,143,226,66,197,143,244,65,240,231,0,67,66,96,234,66,173,122,245,65,0,0,250,66,66,96,234,66,207,230,254,65,240,231,0,67,33,48,242,66,73,174,1,66,0,0,250,66,33,48,242,66,30,22,2,66,240,231,0,67,0,0,250,66,125,255,10,66,0,0,250,66,0,0,250,66,103,196,8,66,240,231,0,67,240,231,0,67,74,140,20,66,0,0,250,66,240,231,0,67,125,16,20,66,240,231,0,67,33,208,4,67,44,165,25,66,0,0,250,66,33,208,4,67,154,8,26,66,240,231,0,67,16,184,8,67,23,183,24,66,0,0,250,66,16,184,8,67,4,167,28,66,240,231,0,67,0,160,12,67,145,15,27,66,0,0,250,66,0,160,12,67,43,54,28,66,240,231,0,67,240,135,16,67,191,189,23,66,0,0,250,66,240,135,16,67,13,177,27,66,240,231,0,67,33,112,20,67,188,69,26,66,0,0,250,66,33,112,20,67,140,185,25,66,240,231,0,67,16,88,24,67,72,127,26,66,0,0,250,66,16,88,24,67,53,111,28,66,240,231,0,67,0,64,28,67,82,137,30,66,0,0,250,66,0,64,28,67,14,207,30,66,240,231,0,67,240,39,32,67,74,12,31,66,0,0,250,66,240,39,32,67,235,51,29,66,240,231,0,67,33,16,36,67,109,39,26,66,0,0,250,66,33,16,36,67,93,237,24,66,240,231,0,67,16,248,39,67,159,107,17,66,0,0,250,66,16,248,39,67,72,255,18,66,240,231,0,67,0,224,43,67,63,198,16,66,0,0,250,66,0,224,43,67,147,233,15,66,240,231,0,67,240,199,47,67,32,65,14,66,0,0,250,66,240,199,47,67,181,21,15,66,240,231,0,67,33,176,51,67,27,158,10,66,0,0,250,66,33,176,51,67,177,127,14,66,240,231,0,67,16,152,55,67,136,163,8,66,0,0,250,66,16,152,55,67,87,236,13,66,240,231,0,67,0,128,59,67,16,58,6,66,0,0,250,66,0,128,59,67,216,112,14,66,240,231,0,67,240,103,63,67,34,14,4,66,0,0,250,66,240,103,63,67,59,31,8,66,240,231,0,67,33,80,67,67,119,45,250,65,0,0,250,66,33,80,67,67,63,23,0,66,240,231,0,67,16,56,71,67,240,5,234,65,0,0,250,66,16,56,71,67,255,33,238,65,240,231,0,67,0,32,75,67,74,140,215,65,0,0,250,66,0,32,75,67,165,44,219,65,240,231,0,67,240,7,79,67,218,172,200,65,0,0,250,66,240,7,79,67,72,80,201,65,240,231,0,67,33,240,82,67,180,72,189,65,0,0,250,66,33,240,82,67,100,59,194,65,240,231,0,67,16,216,86,67,147,152,176,65,0,0,250,66,16,216,86,67,80,124,179,65,240,231,0,67,0,192,90,67,151,144,162,65,0,0,250,66,0,192,90,67,5,52,174,65,240,231,0,67,240,167,94,67,84,82,160,65,0,0,250,66,240,167,94,67,212,26,157,65,240,231,0,67,33,144,98,67,250,237,160,65,0,0,250,66,33,144,98,67,113,61,158,65,240,231,0,67,16,120,102,67,81,235,161,65,0,0,250,66,16,120,102,67,122,71,160,65,240,231,0,67,0,96,106,67,226,233,156,65,0,0,250,66,0,96,106,67,42,58,153,65,240,231,0,67,240,71,110,67,247,228,148,65,0,0,250,66,240,71,110,67,109,231,142,65,240,231,0,67,33,48,114,67,3,248,138,65,0,0,250,66,33,48,114,67,150,67,141,65,240,231,0,67,16,24,118,67,102,102,141,65,0,0,250,66,16,24,118,67,166,155,135,65,240,231,0,67,0,0,122,67,255,50,139,65,0,0,250,66,0,0,122,67,106,94,130,65,240,231,0,67,0,0,122,64,248,66,148,65,33,48,242,66,0,0,250,64,72,208,157,65,33,48,242,66,52,128,59,65,173,233,167,65,33,48,242,66,0,0,122,65,96,229,177,65,33,48,242,66,26,64,156,65,36,151,178,65,33,48,242,66,0,128,187,65,82,56,161,65,33,48,242,66,26,192,218,65,249,160,143,65,33,48,242,66,0,0,250,65,14,45,141,65,33,48,242,66,13,160,12,66,145,237,129,65,33,48,242,66,0,64,28,66,226,233,106,65,33,48,242,66,13,224,43,66,179,234,103,65,33,48,242,66,0,128,59,66,197,143,112,65,33,48,242,66,13,32,75,66,147,58,118,65,33,48,242,66,0,192,90,66,25,115,114,65,33,48,242,66,13,96,106,66,186,218,110,65,33,48,242,66,0,0,122,66,75,234,113,65,33,48,242,66,7,208,132,66,99,127,114,65,33,48,242,66,0,160,140,66,126,140,114,65,33,48,242,66,7,112,148,66,150,33,113,65,33,48,242,66,0,64,156,66,47,93,128,65,33,48,242,66,7,16,164,66,229,242,132,65,33,48,242,66,0,224,171,66,183,81,139,65,33,48,242,66,7,176,179,66,207,247,149,65,33,48,242,66,0,128,187,66,174,199,150,65,33,48,242,66,7,80,195,66,234,132,173,65,33,48,242,66,66,32,203,66,55,137,196,65,33,48,242,66,33,240,210,66,151,16,206,65,33,48,242,66,0,192,218,66,250,126,219,65,33,48,242,66,223,143,226,66,22,251,232,65,33,48,242,66,66,96,234,66,147,24,241,65,33,48,242,66,33,48,242,66,192,108,0,66,33,48,242,66,0,0,250,66,45,178,10,66,33,48,242,66,240,231,0,67,232,106,20,66,33,48,242,66,33,208,4,67,145,62,23,66,33,48,242,66,16,184,8,67,16,41,23,66,33,48,242,66,0,160,12,67,114,74,22,66,33,48,242,66,240,135,16,67,217,159,20,66,33,48,242,66,33,112,20,67,88,202,24,66,33,48,242,66,16,88,24,67,216,176,27,66,33,48,242,66,0,64,28,67,230,63,33,66,33,48,242,66,240,39,32,67,46,191,34,66,33,48,242,66,33,16,36,67,76,38,30,66,33,48,242,66,16,248,39,67,117,19,24,66,33,48,242,66,0,224,43,67,70,212,17,66,33,48,242,66,240,199,47,67,236,0,13,66,33,48,242,66,33,176,51,67,0,175,10,66,33,48,242,66,16,152,55,67,205,59,6,66,33,48,242,66,0,128,59,67,227,246,4,66,33,48,242,66,240,103,63,67,6,18,254,65,33,48,242,66,33,80,67,67,174,216,242,65,33,48,242,66,16,56,71,67,49,8,231,65,33,48,242,66,0,32,75,67,58,18,214,65,33,48,242,66,240,7,79,67,145,109,200,65,33,48,242,66,33,240,82,67,177,97,184,65,33,48,242,66,16,216,86,67,129,132,165,65,33,48,242,66,0,192,90,67,216,240,154,65,33,48,242,66,240,167,94,67,84,99,154,65,33,48,242,66,33,144,98,67,127,217,161,65,33,48,242,66,16,120,102,67,55,137,162,65,33,48,242,66,0,96,106,67,114,249,161,65,33,48,242,66,240,71,110,67,185,252,162,65,33,48,242,66,33,48,114,67,216,240,146,65,33,48,242,66,16,24,118,67,209,34,133,65,33,48,242,66,0,0,122,67,199,203,140,65,33,48,242,66,0,0,122,64,29,90,151,65,66,96,234,66,0,0,250,64,255,178,153,65,66,96,234,66,52,128,59,65,144,32,166,65,66,96,234,66,0,0,122,65,175,165,164,65,66,96,234,66,26,64,156,65,216,129,162,65,66,96,234,66,0,128,187,65,208,85,149,65,66,96,234,66,26,192,218,65,178,29,140,65,66,96,234,66,0,0,250,65,129,166,136,65,66,96,234,66,13,160,12,66,198,220,122,65,66,96,234,66,0,64,28,66,45,33,108,65,66,96,234,66,13,224,43,66,18,20,103,65,66,96,234,66,0,128,59,66,29,201,108,65,66,96,234,66,13,32,75,66,95,41,113,65,66,96,234,66,0,192,90,66,189,227,108,65,66,96,234,66,13,96,106,66,147,24,124,65,66,96,234,66,0,0,122,66,81,107,130,65,66,96,234,66,7,208,132,66,245,91,128,65,66,96,234,66,0,160,140,66,129,149,126,65,66,96,234,66,7,112,148,66,112,78,129,65,66,96,234,66,0,64,156,66,141,168,138,65,66,96,234,66,7,16,164,66,144,32,138,65,66,96,234,66,0,224,171,66,96,229,143,65,66,96,234,66,7,176,179,66,105,111,146,65,66,96,234,66,0,128,187,66,203,33,146,65,66,96,234,66,7,80,195,66,140,74,156,65,66,96,234,66,66,32,203,66,95,7,174,65,66,96,234,66,33,240,210,66,106,60,189,65,66,96,234,66,0,192,218,66,107,43,204,65,66,96,234,66,223,143,226,66,118,241,224,65,66,96,234,66,66,96,234,66,171,190,236,65,66,96,234,66,33,48,242,66,52,128,254,65,66,96,234,66,0,0,250,66,63,23,8,66,66,96,234,66,240,231,0,67,217,142,17,66,66,96,234,66,33,208,4,67,81,43,20,66,66,96,234,66,16,184,8,67,171,79,19,66,66,96,234,66,0,160,12,67,138,240,16,66,66,96,234,66,240,135,16,67,174,135,19,66,66,96,234,66,33,112,20,67,200,152,30,66,66,96,234,66,16,88,24,67,129,166,38,66,66,96,234,66,0,64,28,67,82,9,42,66,66,96,234,66,240,39,32,67,206,72,44,66,66,96,234,66,33,16,36,67,220,23,39,66,66,96,234,66,16,248,39,67,221,100,34,66,66,96,234,66,0,224,43,67,165,189,24,66,66,96,234,66,240,199,47,67,141,23,20,66,66,96,234,66,33,176,51,67,199,105,15,66,66,96,234,66,16,152,55,67,54,77,10,66,66,96,234,66,0,128,59,67,78,162,6,66,66,96,234,66,240,103,63,67,209,34,2,66,66,96,234,66,33,80,67,67,111,129,248,65,66,96,234,66,16,56,71,67,196,49,232,65,66,96,234,66,0,32,75,67,202,50,216,65,66,96,234,66,240,7,79,67,17,71,201,65,66,96,234,66,33,240,82,67,142,6,181,65,66,96,234,66,16,216,86,67,201,246,164,65,66,96,234,66,0,192,90,67,120,11,154,65,66,96,234,66,240,167,94,67,113,155,150,65,66,96,234,66,33,144,98,67,186,201,153,65,66,96,234,66,16,120,102,67,132,141,163,65,66,96,234,66,0,96,106,67,100,76,164,65,66,96,234,66,240,71,110,67,50,119,162,65,66,96,234,66,33,48,114,67,129,132,155,65,66,96,234,66,16,24,118,67,69,216,143,65,66,96,234,66,0,0,122,67,76,183,138,65,66,96,234,66,0,0,122,64,100,204,146,65,223,143,226,66,0,0,250,64,113,155,149,65,223,143,226,66,52,128,59,65,148,246,154,65,223,143,226,66,0,0,122,65,147,41,156,65,223,143,226,66,26,64,156,65,46,144,148,65,223,143,226,66,0,128,187,65,140,91,141,65,223,143,226,66,26,192,218,65,155,102,134,65,223,143,226,66,0,0,250,65,236,81,132,65,223,143,226,66,13,160,12,66,91,177,125,65,223,143,226,66,0,64,28,66,215,18,114,65,223,143,226,66,13,224,43,66,39,194,125,65,223,143,226,66,0,128,59,66,250,126,131,65,223,143,226,66,13,32,75,66,177,97,130,65,223,143,226,66,0,192,90,66,42,169,133,65,223,143,226,66,13,96,106,66,179,140,134,65,223,143,226,66,0,0,122,66,221,53,137,65,223,143,226,66,7,208,132,66,159,60,132,65,223,143,226,66,0,160,140,66,27,13,126,65,223,143,226,66,7,112,148,66,121,233,132,65,223,143,226,66,0,64,156,66,19,97,136,65,223,143,226,66,7,16,164,66,97,178,138,65,223,143,226,66,0,224,171,66,233,166,143,65,223,143,226,66,7,176,179,66,104,34,147,65,223,143,226,66,0,128,187,66,215,52,152,65,223,143,226,66,7,80,195,66,153,59,154,65,223,143,226,66,66,32,203,66,245,57,161,65,223,143,226,66,33,240,210,66,109,86,178,65,223,143,226,66,0,192,218,66,207,119,197,65,223,143,226,66,223,143,226,66,57,52,206,65,223,143,226,66,66,96,234,66,68,11,231,65,223,143,226,66,33,48,242,66,249,177,249,65,223,143,226,66,0,0,250,66,224,220,5,66,223,143,226,66,240,231,0,67,8,108,12,66,223,143,226,66,33,208,4,67,198,173,17,66,223,143,226,66,16,184,8,67,241,52,21,66,223,143,226,66,0,160,12,67,233,183,20,66,223,143,226,66,240,135,16,67,151,208,24,66,223,143,226,66,33,112,20,67,210,192,37,66,223,143,226,66,16,88,24,67,183,226,47,66,223,143,226,66,0,64,28,67,220,6,52,66,223,143,226,66,240,39,32,67,174,152,52,66,223,143,226,66,33,16,36,67,128,55,47,66,223,143,226,66,16,248,39,67,229,16,42,66,223,143,226,66,0,224,43,67,170,113,33,66,223,143,226,66,240,199,47,67,201,101,25,66,223,143,226,66,33,176,51,67,197,207,21,66,223,143,226,66,16,152,55,67,112,78,14,66,223,143,226,66,0,128,59,67,167,249,8,66,223,143,226,66,240,103,63,67,83,22,0,66,223,143,226,66,33,80,67,67,231,157,241,65,223,143,226,66,16,56,71,67,212,154,230,65,223,143,226,66,0,32,75,67,48,170,217,65,223,143,226,66,240,7,79,67,158,239,199,65,223,143,226,66,33,240,82,67,254,67,180,65,223,143,226,66,16,216,86,67,70,54,158,65,223,143,226,66,0,192,90,67,90,117,148,65,223,143,226,66,240,167,94,67,218,44,145,65,223,143,226,66,33,144,98,67,42,186,143,65,223,143,226,66,16,120,102,67,154,153,153,65,223,143,226,66,0,96,106,67,194,151,160,65,223,143,226,66,240,71,110,67,93,237,160,65,223,143,226,66,33,48,114,67,60,78,152,65,223,143,226,66,16,24,118,67,205,187,146,65,223,143,226,66,0,0,122,67,24,21,150,65,223,143,226,66,0,0,122,64,123,3,144,65,0,192,218,66,0,0,250,64,217,61,145,65,0,192,218,66,52,128,59,65,237,158,145,65,0,192,218,66,0,0,122,65,52,162,145,65,0,192,218,66,26,64,156,65,171,62,142,65,0,192,218,66,0,128,187,65,106,77,140,65,0,192,218,66,26,192,218,65,207,230,134,65,0,192,218,66,0,0,250,65,41,237,126,65,0,192,218,66,13,160,12,66,111,18,115,65,0,192,218,66,0,64,28,66,5,163,128,65,0,192,218,66,13,224,43,66,25,132,129,65,0,192,218,66,0,128,59,66,110,163,127,65,0,192,218,66,13,32,75,66,138,159,135,65,0,192,218,66,0,192,90,66,134,184,136,65,0,192,218,66,13,96,106,66,68,250,138,65,0,192,218,66,0,0,122,66,175,165,132,65,0,192,218,66,7,208,132,66,34,125,134,65,0,192,218,66,0,160,140,66,241,99,135,65,0,192,218,66,7,112,148,66,211,188,134,65,0,192,218,66,0,64,156,66,32,82,136,65,0,192,218,66,7,16,164,66,220,232,134,65,0,192,218,66,0,224,171,66,190,65,139,65,0,192,218,66,7,176,179,66,80,141,143,65,0,192,218,66,0,128,187,66,57,52,148,65,0,192,218,66,7,80,195,66,97,67,146,65,0,192,218,66,66,32,203,66,174,199,152,65,0,192,218,66,33,240,210,66,0,111,163,65,0,192,218,66,0,192,218,66,211,77,177,65,0,192,218,66,223,143,226,66,28,107,205,65,0,192,218,66,66,96,234,66,195,228,222,65,0,192,218,66,33,48,242,66,2,60,245,65,0,192,218,66,0,0,250,66,190,176,5,66,0,192,218,66,240,231,0,67,136,180,9,66,0,192,218,66,33,208,4,67,177,127,19,66,0,192,218,66,16,184,8,67,6,210,21,66,0,192,218,66,0,160,12,67,113,253,21,66,0,192,218,66,240,135,16,67,231,76,32,66,0,192,218,66,33,112,20,67,117,2,43,66,0,192,218,66,16,88,24,67,55,26,51,66,0,192,218,66,0,64,28,67,253,182,56,66,0,192,218,66,240,39,32,67,79,128,57,66,0,192,218,66,33,16,36,67,234,213,52,66,0,192,218,66,16,248,39,67,171,254,46,66,0,192,218,66,0,224,43,67,199,139,38,66,0,192,218,66,240,199,47,67,205,251,30,66,0,192,218,66,33,176,51,67,238,235,19,66,0,192,218,66,16,152,55,67,218,172,14,66,0,192,218,66,0,128,59,67,181,21,12,66,0,192,218,66,240,103,63,67,210,192,1,66,0,192,218,66,33,80,67,67,57,214,236,65,0,192,218,66,16,56,71,67,37,117,225,65,0,192,218,66,0,32,75,67,136,244,209,65,0,192,218,66,240,7,79,67,82,39,193,65,0,192,218,66,33,240,82,67,140,219,176,65,0,192,218,66,16,216,86,67,32,82,160,65,0,192,218,66,0,192,90,67,200,135,144,65,0,192,218,66,240,167,94,67,145,237,134,65,0,192,218,66,33,144,98,67,99,127,135,65,0,192,218,66,16,120,102,67,229,225,135,65,0,192,218,66,0,96,106,67,167,104,141,65,0,192,218,66,240,71,110,67,105,239,146,65,0,192,218,66,33,48,114,67,38,83,147,65,0,192,218,66,16,24,118,67,159,188,145,65,0,192,218,66,0,0,122,67,184,192,148,65,0,192,218,66,0,0,122,64,184,175,143,65,33,240,210,66,0,0,250,64,197,126,147,65,33,240,210,66,52,128,59,65,89,134,147,65,33,240,210,66,0,0,122,65,176,242,142,65,33,240,210,66,26,64,156,65,228,3,142,65,33,240,210,66,0,128,187,65,83,150,140,65,33,240,210,66,26,192,218,65,181,183,130,65,33,240,210,66,0,0,250,65,239,201,125,65,33,240,210,66,13,160,12,66,136,244,128,65,33,240,210,66,0,64,28,66,172,28,135,65,33,240,210,66,13,224,43,66,66,62,130,65,33,240,210,66,0,128,59,66,243,142,125,65,33,240,210,66,13,32,75,66,72,80,130,65,33,240,210,66,0,192,90,66,128,72,130,65,33,240,210,66,13,96,106,66,247,228,133,65,33,240,210,66,0,0,122,66,119,62,139,65,33,240,210,66,7,208,132,66,225,11,135,65,33,240,210,66,0,160,140,66,225,139,138,65,33,240,210,66,7,112,148,66,153,187,141,65,33,240,210,66,0,64,156,66,142,134,136,65,33,240,210,66,7,16,164,66,16,216,133,65,33,240,210,66,0,224,171,66,169,36,131,65,33,240,210,66,7,176,179,66,20,46,133,65,33,240,210,66,0,128,187,66,178,29,142,65,33,240,210,66,7,80,195,66,158,94,147,65,33,240,210,66,66,32,203,66,29,73,147,65,33,240,210,66,33,240,210,66,52,0,155,65,33,240,210,66,0,192,218,66,119,190,174,65,33,240,210,66,223,143,226,66,73,29,200,65,33,240,210,66,66,96,234,66,155,85,215,65,33,240,210,66,33,48,242,66,239,184,238,65,33,240,210,66,0,0,250,66,140,249,1,66,33,240,210,66,240,231,0,67,98,161,9,66,33,240,210,66,33,208,4,67,177,255,12,66,33,240,210,66,16,184,8,67,252,233,17,66,33,240,210,66,0,160,12,67,118,49,23,66,33,240,210,66,240,135,16,67,233,72,34,66,33,240,210,66,33,112,20,67,173,122,45,66,33,240,210,66,16,88,24,67,209,34,55,66,33,240,210,66,0,64,28,67,27,239,59,66,33,240,210,66,240,39,32,67,15,28,61,66,33,240,210,66,33,16,36,67,248,19,59,66,33,240,210,66,16,248,39,67,97,20,52,66,33,240,210,66,0,224,43,67,29,90,42,66,33,240,210,66,240,199,47,67,182,243,31,66,33,240,210,66,33,176,51,67,222,66,24,66,33,240,210,66,16,152,55,67,54,77,22,66,33,240,210,66,0,128,59,67,194,134,14,66,33,240,210,66,240,103,63,67,62,168,1,66,33,240,210,66,33,80,67,67,11,70,236,65,33,240,210,66,16,56,71,67,106,60,218,65,33,240,210,66,0,32,75,67,31,133,208,65,33,240,210,66,240,7,79,67,10,232,198,65,33,240,210,66,33,240,82,67,61,44,184,65,33,240,210,66,16,216,86,67,226,88,169,65,33,240,210,66,0,192,90,67,182,115,151,65,33,240,210,66,240,167,94,67,67,156,141,65,33,240,210,66,33,144,98,67,163,146,135,65,33,240,210,66,16,120,102,67,76,38,137,65,33,240,210,66,0,96,106,67,81,90,141,65,33,240,210,66,240,71,110,67,247,100,143,65,33,240,210,66,33,48,114,67,6,1,144,65,33,240,210,66,16,24,118,67,118,241,148,65,33,240,210,66,0,0,122,67,100,187,153,65,33,240,210,66,0,0,122,64,193,168,141,65,66,32,203,66,0,0,250,64,186,73,147,65,66,32,203,66,52,128,59,65,204,238,143,65,66,32,203,66,0,0,122,65,122,71,148,65,66,32,203,66,26,64,156,65,29,73,149,65,66,32,203,66,0,128,187,65,125,63,139,65,66,32,203,66,26,192,218,65,130,226,137,65,66,32,203,66,0,0,250,65,229,80,136,65,66,32,203,66,13,160,12,66,34,236,143,65,66,32,203,66,0,64,28,66,24,21,146,65,66,32,203,66,13,224,43,66,199,58,143,65,66,32,203,66,0,128,59,66,235,226,137,65,66,32,203,66,13,32,75,66,7,223,128,65,66,32,203,66,0,192,90,66,155,213,132,65,66,32,203,66,13,96,106,66,89,134,132,65,66,32,203,66,0,0,122,66,139,236,134,65,66,32,203,66,7,208,132,66,49,25,136,65,66,32,203,66,0,160,140,66,238,252,139,65,66,32,203,66,7,112,148,66,240,39,144,65,66,32,203,66,0,64,156,66,205,187,138,65,66,32,203,66,7,16,164,66,23,200,134,65,66,32,203,66,0,224,171,66,251,92,119,65,66,32,203,66,7,176,179,66,2,154,121,65,66,32,203,66,0,128,187,66,120,28,135,65,66,32,203,66,7,80,195,66,238,90,138,65,66,32,203,66,66,32,203,66,171,190,138,65,66,32,203,66,33,240,210,66,69,216,145,65,66,32,203,66,0,192,218,66,222,113,164,65,66,32,203,66,223,143,226,66,120,122,180,65,66,32,203,66,66,96,234,66,48,204,200,65,66,32,203,66,33,48,242,66,110,163,225,65,66,32,203,66,0,0,250,66,20,174,243,65,66,32,203,66,240,231,0,67,166,74,2,66,66,32,203,66,33,208,4,67,42,58,10,66,66,32,203,66,16,184,8,67,29,218,17,66,66,32,203,66,0,160,12,67,185,77,23,66,66,32,203,66,240,135,16,67,40,190,33,66,66,32,203,66,33,112,20,67,27,158,46,66,66,32,203,66,16,88,24,67,229,208,56,66,66,32,203,66,0,64,28,67,179,140,61,66,66,32,203,66,240,39,32,67,188,22,62,66,66,32,203,66,33,16,36,67,38,83,59,66,66,32,203,66,16,248,39,67,168,6,50,66,66,32,203,66,0,224,43,67,40,15,47,66,66,32,203,66,240,199,47,67,101,234,39,66,66,32,203,66,33,176,51,67,215,35,35,66,66,32,203,66,16,152,55,67,60,14,27,66,66,32,203,66,0,128,59,67,183,162,16,66,66,32,203,66,240,103,63,67,198,173,5,66,66,32,203,66,33,80,67,67,237,13,238,65,66,32,203,66,16,56,71,67,217,223,217,65,66,32,203,66,0,32,75,67,117,19,211,65,66,32,203,66,240,7,79,67,234,132,202,65,66,32,203,66,33,240,82,67,179,234,187,65,66,32,203,66,16,216,86,67,254,212,177,65,66,32,203,66,0,192,90,67,222,2,160,65,66,32,203,66,240,167,94,67,150,195,152,65,66,32,203,66,33,144,98,67,156,196,143,65,66,32,203,66,16,120,102,67,65,113,135,65,66,32,203,66,0,96,106,67,44,229,138,65,66,32,203,66,240,71,110,67,5,69,136,65,66,32,203,66,33,48,114,67,163,35,137,65,66,32,203,66,16,24,118,67,8,172,146,65,66,32,203,66,0,0,122,67,249,49,154,65,66,32,203,66,0,0,122,64,11,36,144,65,7,80,195,66,0,0,250,64,102,136,145,65,7,80,195,66,52,128,59,65,143,194,141,65,7,80,195,66,0,0,122,65,85,193,146,65,7,80,195,66,26,64,156,65,125,174,149,65,7,80,195,66,0,128,187,65,125,80,139,65,7,80,195,66,26,192,218,65,104,17,144,65,7,80,195,66,0,0,250,65,111,240,147,65,7,80,195,66,13,160,12,66,142,117,155,65,7,80,195,66,0,64,28,66,254,101,158,65,7,80,195,66,13,224,43,66,238,90,156,65,7,80,195,66,0,128,59,66,16,105,156,65,7,80,195,66,13,32,75,66,129,132,143,65,7,80,195,66,0,192,90,66,61,27,133,65,7,80,195,66,13,96,106,66,197,126,128,65,7,80,195,66,0,0,122,66,238,235,133,65,7,80,195,66,7,208,132,66,215,163,135,65,7,80,195,66,0,160,140,66,199,186,140,65,7,80,195,66,7,112,148,66,222,241,136,65,7,80,195,66,0,64,156,66,26,64,135,65,7,80,195,66,7,16,164,66,190,48,131,65,7,80,195,66,0,224,171,66,195,245,126,65,7,80,195,66,7,176,179,66,253,135,128,65,7,80,195,66,0,128,187,66,114,138,129,65,7,80,195,66,7,80,195,66,210,0,132,65,7,80,195,66,66,32,203,66,176,242,136,65,7,80,195,66,33,240,210,66,134,73,138,65,7,80,195,66,0,192,218,66,83,5,152,65,7,80,195,66,223,143,226,66,176,3,168,65,7,80,195,66,66,96,234,66,157,17,189,65,7,80,195,66,33,48,242,66,100,221,211,65,7,80,195,66,0,0,250,66,195,117,234,65,7,80,195,66,240,231,0,67,227,71,2,66,7,80,195,66,33,208,4,67,206,72,10,66,7,80,195,66,16,184,8,67,153,170,16,66,7,80,195,66,0,160,12,67,21,93,22,66,7,80,195,66,240,135,16,67,245,74,33,66,7,80,195,66,33,112,20,67,221,164,42,66,7,80,195,66,16,88,24,67,217,61,54,66,7,80,195,66,0,64,28,67,41,203,62,66,7,80,195,66,240,39,32,67,207,166,61,66,7,80,195,66,33,16,36,67,39,160,60,66,7,80,195,66,16,248,39,67,36,57,53,66,7,80,195,66,0,224,43,67,68,58,51,66,7,80,195,66,240,199,47,67,34,189,46,66,7,80,195,66,33,176,51,67,127,187,38,66,7,80,195,66,16,152,55,67,249,160,29,66,7,80,195,66,0,128,59,67,124,114,18,66,7,80,195,66,240,103,63,67,129,149,5,66,7,80,195,66,33,80,67,67,99,127,239,65,7,80,195,66,16,56,71,67,40,126,224,65,7,80,195,66,0,32,75,67,101,42,219,65,7,80,195,66,240,7,79,67,21,140,205,65,7,80,195,66,33,240,82,67,148,135,195,65,7,80,195,66,16,216,86,67,130,226,185,65,7,80,195,66,0,192,90,67,92,143,171,65,7,80,195,66,240,167,94,67,97,84,156,65,7,80,195,66,33,144,98,67,28,235,147,65,7,80,195,66,16,120,102,67,229,208,141,65,7,80,195,66,0,96,106,67,120,28,132,65,7,80,195,66,240,71,110,67,46,16,130,65,7,80,195,66,33,48,114,67,48,59,129,65,7,80,195,66,16,24,118,67,79,175,136,65,7,80,195,66,0,0,122,67,237,30,148,65,7,80,195,66,0,0,122,64,57,86,137,65,0,128,187,66,0,0,250,64,55,137,134,65,0,128,187,66,52,128,59,65,2,60,140,65,0,128,187,66,0,0,122,65,42,41,150,65,0,128,187,66,26,64,156,65,138,176,146,65,0,128,187,66,0,128,187,65,249,177,152,65,0,128,187,66,26,192,218,65,172,11,158,65,0,128,187,66,0,0,250,65,36,23,160,65,0,128,187,66,13,160,12,66,184,192,162,65,0,128,187,66,0,64,28,66,21,140,171,65,0,128,187,66,13,224,43,66,112,206,172,65,0,128,187,66,0,128,59,66,161,86,172,65,0,128,187,66,13,32,75,66,215,18,166,65,0,128,187,66,0,192,90,66,152,93,151,65,0,128,187,66,13,96,106,66,232,106,141,65,0,128,187,66,0,0,122,66,195,83,140,65,0,128,187,66,7,208,132,66,193,202,140,65,0,128,187,66,0,160,140,66,206,25,146,65,0,128,187,66,7,112,148,66,159,60,147,65,0,128,187,66,0,64,156,66,82,184,145,65,0,128,187,66,7,16,164,66,94,203,147,65,0,128,187,66,0,224,171,66,97,67,141,65,0,128,187,66,7,176,179,66,35,219,141,65,0,128,187,66,0,128,187,66,109,86,147,65,0,128,187,66,7,80,195,66,232,89,152,65,0,128,187,66,66,32,203,66,25,243,157,65,0,128,187,66,33,240,210,66,211,222,158,65,0,128,187,66,0,192,218,66,99,238,157,65,0,128,187,66,223,143,226,66,7,206,171,65,0,128,187,66,66,96,234,66,86,125,193,65,0,128,187,66,33,48,242,66,73,174,214,65,0,128,187,66,0,0,250,66,97,178,239,65,0,128,187,66,240,231,0,67,138,78,3,66,0,128,187,66,33,208,4,67,43,182,10,66,0,128,187,66,16,184,8,67,128,8,16,66,0,128,187,66,0,160,12,67,192,236,19,66,0,128,187,66,240,135,16,67,79,111,30,66,0,128,187,66,33,112,20,67,88,232,40,66,0,128,187,66,16,88,24,67,207,247,49,66,0,128,187,66,0,64,28,67,241,180,60,66,0,128,187,66,240,39,32,67,77,68,62,66,0,128,187,66,33,16,36,67,154,217,59,66,0,128,187,66,16,248,39,67,250,190,54,66,0,128,187,66,0,224,43,67,52,17,55,66,0,128,187,66,240,199,47,67,58,82,51,66,0,128,187,66,33,176,51,67,146,92,42,66,0,128,187,66,16,152,55,67,22,106,33,66,0,128,187,66,0,128,59,67,152,204,23,66,0,128,187,66,240,103,63,67,229,144,12,66,0,128,187,66,33,80,67,67,65,2,252,65,0,128,187,66,16,56,71,67,92,143,237,65,0,128,187,66,0,32,75,67,241,99,222,65,0,128,187,66,240,7,79,67,78,209,210,65,0,128,187,66,33,240,82,67,208,213,206,65,0,128,187,66,16,216,86,67,177,208,197,65,0,128,187,66,0,192,90,67,88,40,190,65,0,128,187,66,240,167,94,67,50,102,167,65,0,128,187,66,33,144,98,67,43,24,153,65,0,128,187,66,16,120,102,67,46,144,148,65,0,128,187,66,0,96,106,67,152,110,140,65,0,128,187,66,240,71,110,67,10,104,110,65,0,128,187,66,33,48,114,67,55,154,130,65,0,128,187,66,16,24,118,67,148,7,128,65,0,128,187,66,0,0,122,67,164,223,127,65,0,128,187,66,0,0,122,64,128,72,122,65,7,176,179,66,0,0,250,64,119,45,130,65,7,176,179,66,52,128,59,65,67,45,141,65,7,176,179,66,0,0,122,65,29,218,150,65,7,176,179,66,26,64,156,65,63,53,157,65,7,176,179,66,0,128,187,65,247,100,167,65,7,176,179,66,26,192,218,65,158,111,166,65,7,176,179,66,0,0,250,65,183,209,161,65,7,176,179,66,13,160,12,66,73,157,172,65,7,176,179,66,0,64,28,66,43,135,180,65,7,176,179,66,13,224,43,66,239,73,187,65,7,176,179,66,0,128,59,66,231,12,188,65,7,176,179,66,13,32,75,66,110,180,183,65,7,176,179,66,0,192,90,66,123,131,172,65,7,176,179,66,13,96,106,66,81,235,162,65,7,176,179,66,0,0,122,66,13,241,156,65,7,176,179,66,7,208,132,66,10,104,149,65,7,176,179,66,0,160,140,66,56,120,149,65,7,176,179,66,7,112,148,66,12,19,158,65,7,176,179,66,0,64,156,66,28,124,163,65,7,176,179,66,7,16,164,66,222,113,161,65,7,176,179,66,0,224,171,66,67,156,155,65,7,176,179,66,7,176,179,66,134,90,154,65,7,176,179,66,0,128,187,66,38,228,159,65,7,176,179,66,7,80,195,66,85,65,165,65,7,176,179,66,66,32,203,66,33,48,167,65,7,176,179,66,33,240,210,66,238,107,166,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92160);
/* memory initializer */ allocate([7,176,179,66,0,192,218,66,70,20,172,65,7,176,179,66,223,143,226,66,40,254,181,65,7,176,179,66,66,96,234,66,231,140,193,65,7,176,179,66,33,48,242,66,17,199,218,65,7,176,179,66,0,0,250,66,5,163,239,65,7,176,179,66,240,231,0,67,69,135,1,66,7,176,179,66,33,208,4,67,202,212,8,66,7,176,179,66,16,184,8,67,181,247,14,66,7,176,179,66,0,160,12,67,46,144,18,66,7,176,179,66,240,135,16,67,208,179,28,66,7,176,179,66,33,112,20,67,59,176,40,66,7,176,179,66,16,88,24,67,10,40,47,66,7,176,179,66,0,64,28,67,143,211,55,66,7,176,179,66,240,39,32,67,90,53,62,66,7,176,179,66,33,16,36,67,229,16,60,66,7,176,179,66,16,248,39,67,154,8,56,66,7,176,179,66,0,224,43,67,76,38,56,66,7,176,179,66,240,199,47,67,108,184,55,66,7,176,179,66,33,176,51,67,98,33,46,66,7,176,179,66,16,152,55,67,202,20,34,66,7,176,179,66,0,128,59,67,49,136,24,66,7,176,179,66,240,103,63,67,167,121,15,66,7,176,179,66,33,80,67,67,91,66,4,66,7,176,179,66,16,56,71,67,93,92,248,65,7,176,179,66,0,32,75,67,43,135,221,65,7,176,179,66,240,7,79,67,115,87,214,65,7,176,179,66,33,240,82,67,8,172,210,65,7,176,179,66,16,216,86,67,3,137,200,65,7,176,179,66,0,192,90,67,183,81,187,65,7,176,179,66,240,167,94,67,44,212,167,65,7,176,179,66,33,144,98,67,57,180,151,65,7,176,179,66,16,120,102,67,177,80,150,65,7,176,179,66,0,96,106,67,122,37,138,65,7,176,179,66,240,71,110,67,20,174,111,65,7,176,179,66,33,48,114,67,42,169,118,65,7,176,179,66,16,24,118,67,227,199,118,65,7,176,179,66,0,0,122,67,153,187,126,65,7,176,179,66,0,0,122,64,50,119,121,65,0,224,171,66,0,0,250,64,255,33,131,65,0,224,171,66,52,128,59,65,58,163,145,65,0,224,171,66,0,0,122,65,34,125,153,65,0,224,171,66,26,64,156,65,31,5,166,65,0,224,171,66,0,128,187,65,89,23,173,65,0,224,171,66,26,192,218,65,220,104,175,65,0,224,171,66,0,0,250,65,225,250,172,65,0,224,171,66,13,160,12,66,69,216,179,65,0,224,171,66,0,64,28,66,223,96,190,65,0,224,171,66,13,224,43,66,115,232,196,65,0,224,171,66,0,128,59,66,159,188,198,65,0,224,171,66,13,32,75,66,93,92,196,65,0,224,171,66,0,192,90,66,6,129,189,65,0,224,171,66,13,96,106,66,156,196,177,65,0,224,171,66,0,0,122,66,216,1,172,65,0,224,171,66,7,208,132,66,245,202,169,65,0,224,171,66,0,160,140,66,122,165,161,65,0,224,171,66,7,112,148,66,230,191,162,65,0,224,171,66,0,64,156,66,95,7,175,65,0,224,171,66,7,16,164,66,61,138,175,65,0,224,171,66,0,224,171,66,97,50,165,65,0,224,171,66,7,176,179,66,231,123,165,65,0,224,171,66,0,128,187,66,45,50,165,65,0,224,171,66,7,80,195,66,36,151,168,65,0,224,171,66,66,32,203,66,143,100,174,65,0,224,171,66,33,240,210,66,55,9,179,65,0,224,171,66,0,192,218,66,0,111,179,65,0,224,171,66,223,143,226,66,42,41,189,65,0,224,171,66,66,96,234,66,254,195,198,65,0,224,171,66,33,48,242,66,97,178,213,65,0,224,171,66,0,0,250,66,239,201,233,65,0,224,171,66,240,231,0,67,236,192,252,65,0,224,171,66,33,208,4,67,36,104,7,66,0,224,171,66,16,184,8,67,166,219,14,66,0,224,171,66,0,160,12,67,36,185,18,66,0,224,171,66,240,135,16,67,6,146,27,66,0,224,171,66,33,112,20,67,246,151,38,66,0,224,171,66,16,88,24,67,98,208,48,66,0,224,171,66,0,64,28,67,126,204,52,66,0,224,171,66,240,39,32,67,182,196,56,66,0,224,171,66,33,16,36,67,188,214,60,66,0,224,171,66,16,248,39,67,194,70,60,66,0,224,171,66,0,224,43,67,81,26,54,66,0,224,171,66,240,199,47,67,202,178,50,66,0,224,171,66,33,176,51,67,60,125,46,66,0,224,171,66,16,152,55,67,63,245,32,66,0,224,171,66,0,128,59,67,174,199,25,66,0,224,171,66,240,103,63,67,52,0,18,66,0,224,171,66,33,80,67,67,216,48,7,66,0,224,171,66,16,56,71,67,32,193,252,65,0,224,171,66,0,32,75,67,221,164,230,65,0,224,171,66,240,7,79,67,7,240,219,65,0,224,171,66,33,240,82,67,14,79,208,65,0,224,171,66,16,216,86,67,0,111,193,65,0,224,171,66,0,192,90,67,236,64,177,65,0,224,171,66,240,167,94,67,105,239,160,65,0,224,171,66,33,144,98,67,229,225,154,65,0,224,171,66,16,120,102,67,147,41,142,65,0,224,171,66,0,96,106,67,129,132,130,65,0,224,171,66,240,71,110,67,232,106,113,65,0,224,171,66,33,48,114,67,150,33,114,65,0,224,171,66,16,24,118,67,179,123,108,65,0,224,171,66,0,0,122,67,73,157,115,65,0,224,171,66,0,0,122,64,23,183,135,65,7,16,164,66,0,0,250,64,102,102,142,65,7,16,164,66,52,128,59,65,186,90,154,65,7,16,164,66,0,0,122,65,23,55,168,65,7,16,164,66,26,64,156,65,76,166,178,65,7,16,164,66,0,128,187,65,97,178,184,65,7,16,164,66,26,192,218,65,90,228,184,65,7,16,164,66,0,0,250,65,66,62,188,65,7,16,164,66,13,160,12,66,196,49,193,65,7,16,164,66,0,64,28,66,172,173,200,65,7,16,164,66,13,224,43,66,150,161,208,65,7,16,164,66,0,128,59,66,29,184,210,65,7,16,164,66,13,32,75,66,129,132,203,65,7,16,164,66,0,192,90,66,233,38,199,65,7,16,164,66,13,96,106,66,32,210,192,65,7,16,164,66,0,0,122,66,101,153,192,65,7,16,164,66,7,208,132,66,110,52,188,65,7,16,164,66,0,160,140,66,138,176,175,65,7,16,164,66,7,112,148,66,188,116,175,65,7,16,164,66,0,64,156,66,40,254,180,65,7,16,164,66,7,16,164,66,66,96,181,65,7,16,164,66,0,224,171,66,65,113,171,65,7,16,164,66,7,176,179,66,58,146,173,65,7,16,164,66,0,128,187,66,39,194,173,65,7,16,164,66,7,80,195,66,96,246,179,65,7,16,164,66,66,32,203,66,93,92,184,65,7,16,164,66,33,240,210,66,94,58,184,65,7,16,164,66,0,192,218,66,133,235,185,65,7,16,164,66,223,143,226,66,34,125,189,65,7,16,164,66,66,96,234,66,227,37,198,65,7,16,164,66,33,48,242,66,163,146,211,65,7,16,164,66,0,0,250,66,233,166,230,65,7,16,164,66,240,231,0,67,255,178,247,65,7,16,164,66,33,208,4,67,71,50,7,66,7,16,164,66,16,184,8,67,74,59,15,66,7,16,164,66,0,160,12,67,2,26,20,66,7,16,164,66,240,135,16,67,217,253,26,66,7,16,164,66,33,112,20,67,111,48,40,66,7,16,164,66,16,88,24,67,207,38,47,66,7,16,164,66,0,64,28,67,251,186,52,66,7,16,164,66,240,39,32,67,74,251,56,66,7,16,164,66,33,16,36,67,18,20,60,66,7,16,164,66,16,248,39,67,24,38,61,66,7,16,164,66,0,224,43,67,151,255,56,66,7,16,164,66,240,199,47,67,208,85,49,66,7,16,164,66,33,176,51,67,33,112,44,66,7,16,164,66,16,152,55,67,143,36,35,66,7,16,164,66,0,128,59,67,129,149,30,66,7,16,164,66,240,103,63,67,133,43,22,66,7,16,164,66,33,80,67,67,47,46,13,66,7,16,164,66,16,56,71,67,148,135,6,66,7,16,164,66,0,32,75,67,249,32,247,65,7,16,164,66,240,7,79,67,8,61,218,65,7,16,164,66,33,240,82,67,71,114,203,65,7,16,164,66,16,216,86,67,27,13,191,65,7,16,164,66,0,192,90,67,132,141,179,65,7,16,164,66,240,167,94,67,77,4,163,65,7,16,164,66,33,144,98,67,141,168,153,65,7,16,164,66,16,120,102,67,203,16,152,65,7,16,164,66,0,96,106,67,233,38,142,65,7,16,164,66,240,71,110,67,128,72,125,65,7,16,164,66,33,48,114,67,72,191,100,65,7,16,164,66,16,24,118,67,27,47,114,65,7,16,164,66,0,0,122,67,135,167,110,65,7,16,164,66,0,0,122,64,95,152,150,65,0,64,156,66,0,0,250,64,245,57,156,65,0,64,156,66,52,128,59,65,163,146,167,65,0,64,156,66,0,0,122,65,196,194,176,65,0,64,156,66,26,64,156,65,133,252,185,65,0,64,156,66,0,128,187,65,36,151,190,65,0,64,156,66,26,192,218,65,34,253,196,65,0,64,156,66,0,0,250,65,79,175,192,65,0,64,156,66,13,160,12,66,56,231,204,65,0,64,156,66,0,64,28,66,236,209,214,65,0,64,156,66,13,224,43,66,32,227,215,65,0,64,156,66,0,128,59,66,86,31,213,65,0,64,156,66,13,32,75,66,156,34,213,65,0,64,156,66,0,192,90,66,136,99,219,65,0,64,156,66,13,96,106,66,140,202,212,65,0,64,156,66,0,0,122,66,147,24,209,65,0,64,156,66,7,208,132,66,62,249,198,65,0,64,156,66,0,160,140,66,136,244,190,65,0,64,156,66,7,112,148,66,104,34,186,65,0,64,156,66,0,64,156,66,100,221,184,65,0,64,156,66,7,16,164,66,216,129,186,65,0,64,156,66,0,224,171,66,239,184,184,65,0,64,156,66,7,176,179,66,242,65,186,65,0,64,156,66,0,128,187,66,248,83,194,65,0,64,156,66,7,80,195,66,210,111,196,65,0,64,156,66,66,32,203,66,112,95,195,65,0,64,156,66,33,240,210,66,107,26,197,65,0,64,156,66,0,192,218,66,33,48,196,65,0,64,156,66,223,143,226,66,61,10,199,65,0,64,156,66,66,96,234,66,36,151,205,65,0,64,156,66,33,48,242,66,242,82,215,65,0,64,156,66,0,0,250,66,204,255,237,65,0,64,156,66,240,231,0,67,84,227,250,65,0,64,156,66,33,208,4,67,46,191,7,66,0,64,156,66,16,184,8,67,92,160,13,66,0,64,156,66,0,160,12,67,17,118,18,66,0,64,156,66,240,135,16,67,184,111,26,66,0,64,156,66,33,112,20,67,16,233,36,66,0,64,156,66,16,88,24,67,243,223,44,66,0,64,156,66,0,64,28,67,99,255,52,66,0,64,156,66,240,39,32,67,52,34,58,66,0,64,156,66,33,16,36,67,226,169,60,66,0,64,156,66,16,248,39,67,226,41,62,66,0,64,156,66,0,224,43,67,222,130,57,66,0,64,156,66,240,199,47,67,242,146,51,66,0,64,156,66,33,176,51,67,187,248,46,66,0,64,156,66,16,152,55,67,50,230,41,66,0,64,156,66,0,128,59,67,246,23,34,66,0,64,156,66,240,103,63,67,86,31,25,66,0,64,156,66,33,80,67,67,33,48,17,66,0,64,156,66,16,56,71,67,163,65,12,66,0,64,156,66,0,32,75,67,115,168,1,66,0,64,156,66,240,7,79,67,150,161,235,65,0,64,156,66,33,240,82,67,81,235,205,65,0,64,156,66,16,216,86,67,137,65,185,65,0,64,156,66,0,192,90,67,61,138,167,65,0,64,156,66,240,167,94,67,19,225,153,65,0,64,156,66,33,144,98,67,247,117,148,65,0,64,156,66,16,120,102,67,193,185,150,65,0,64,156,66,0,96,106,67,230,63,141,65,0,64,156,66,240,71,110,67,253,135,123,65,0,64,156,66,33,48,114,67,127,106,101,65,0,64,156,66,16,24,118,67,204,238,95,65,0,64,156,66,0,0,122,67,83,5,107,65,0,64,156,66,0,0,122,64,148,118,165,65,7,112,148,66,0,0,250,64,22,234,181,65,7,112,148,66,52,128,59,65,162,52,183,65,7,112,148,66,0,0,122,65,62,249,186,65,7,112,148,66,26,64,156,65,143,100,190,65,7,112,148,66,0,128,187,65,247,117,196,65,7,112,148,66,26,192,218,65,109,197,202,65,7,112,148,66,0,0,250,65,224,173,206,65,7,112,148,66,13,160,12,66,93,220,209,65,7,112,148,66,0,64,28,66,4,103,222,65,7,112,148,66,13,224,43,66,25,4,228,65,7,112,148,66,0,128,59,66,140,91,230,65,7,112,148,66,13,32,75,66,59,223,232,65,7,112,148,66,0,192,90,66,182,115,235,65,7,112,148,66,13,96,106,66,243,142,233,65,7,112,148,66,0,0,122,66,145,237,225,65,7,112,148,66,7,208,132,66,177,97,213,65,7,112,148,66,0,160,140,66,149,101,204,65,7,112,148,66,7,112,148,66,223,207,193,65,7,112,148,66,0,64,156,66,173,233,198,65,7,112,148,66,7,16,164,66,31,244,198,65,7,112,148,66,0,224,171,66,235,115,190,65,7,112,148,66,7,176,179,66,95,169,196,65,7,112,148,66,0,128,187,66,63,181,204,65,7,112,148,66,7,80,195,66,61,10,200,65,7,112,148,66,66,32,203,66,125,208,203,65,7,112,148,66,33,240,210,66,42,169,206,65,7,112,148,66,0,192,218,66,158,222,206,65,7,112,148,66,223,143,226,66,87,108,214,65,7,112,148,66,66,96,234,66,222,2,223,65,7,112,148,66,33,48,242,66,104,17,231,65,7,112,148,66,0,0,250,66,197,15,240,65,7,112,148,66,240,231,0,67,32,210,255,65,7,112,148,66,33,208,4,67,159,205,8,66,7,112,148,66,16,184,8,67,245,155,13,66,7,112,148,66,0,160,12,67,105,128,17,66,7,112,148,66,240,135,16,67,20,255,27,66,7,112,148,66,33,112,20,67,20,46,37,66,7,112,148,66,16,88,24,67,208,115,48,66,7,112,148,66,0,64,28,67,110,227,56,66,7,112,148,66,240,39,32,67,106,30,59,66,7,112,148,66,33,16,36,67,180,200,61,66,7,112,148,66,16,248,39,67,243,142,60,66,7,112,148,66,0,224,43,67,140,249,55,66,7,112,148,66,240,199,47,67,174,182,53,66,7,112,148,66,33,176,51,67,111,18,52,66,7,112,148,66,16,152,55,67,66,126,44,66,7,112,148,66,0,128,59,67,167,232,36,66,7,112,148,66,240,103,63,67,147,58,23,66,7,112,148,66,33,80,67,67,33,31,18,66,7,112,148,66,16,56,71,67,187,167,12,66,7,112,148,66,0,32,75,67,126,157,4,66,7,112,148,66,240,7,79,67,254,195,241,65,7,112,148,66,33,240,82,67,254,84,209,65,7,112,148,66,16,216,86,67,146,75,177,65,7,112,148,66,0,192,90,67,178,157,147,65,7,112,148,66,240,167,94,67,113,189,136,65,7,112,148,66,33,144,98,67,63,198,138,65,7,112,148,66,16,120,102,67,117,147,131,65,7,112,148,66,0,96,106,67,228,131,123,65,7,112,148,66,240,71,110,67,86,159,108,65,7,112,148,66,33,48,114,67,137,65,90,65,7,112,148,66,16,24,118,67,100,93,76,65,7,112,148,66,0,0,122,67,51,51,86,65,7,112,148,66,0,0,122,64,129,149,183,65,0,160,140,66,0,0,250,64,171,190,194,65,0,160,140,66,52,128,59,65,172,11,197,65,0,160,140,66,0,0,122,65,108,248,199,65,0,160,140,66,26,64,156,65,144,160,201,65,0,160,140,66,0,128,187,65,153,59,202,65,0,160,140,66,26,192,218,65,9,155,206,65,0,160,140,66,0,0,250,65,254,229,216,65,0,160,140,66,13,160,12,66,55,9,223,65,0,160,140,66,0,64,28,66,230,191,230,65,0,160,140,66,13,224,43,66,61,27,239,65,0,160,140,66,0,128,59,66,8,61,245,65,0,160,140,66,13,32,75,66,26,81,248,65,0,160,140,66,0,192,90,66,40,15,253,65,0,160,140,66,13,96,106,66,119,45,252,65,0,160,140,66,0,0,122,66,190,193,243,65,0,160,140,66,7,208,132,66,51,196,229,65,0,160,140,66,0,160,140,66,136,227,214,65,0,160,140,66,7,112,148,66,186,107,205,65,0,160,140,66,0,64,156,66,84,244,208,65,0,160,140,66,7,16,164,66,169,147,201,65,0,160,140,66,0,224,171,66,232,217,195,65,0,160,140,66,7,176,179,66,108,248,200,65,0,160,140,66,0,128,187,66,249,32,209,65,0,160,140,66,7,80,195,66,186,107,211,65,0,160,140,66,66,32,203,66,24,149,208,65,0,160,140,66,33,240,210,66,109,231,208,65,0,160,140,66,0,192,218,66,197,143,220,65,0,160,140,66,223,143,226,66,142,245,228,65,0,160,140,66,66,96,234,66,152,110,240,65,0,160,140,66,33,48,242,66,61,10,242,65,0,160,140,66,0,0,250,66,7,223,247,65,0,160,140,66,240,231,0,67,53,158,1,66,0,160,140,66,33,208,4,67,118,241,7,66,0,160,140,66,16,184,8,67,93,109,15,66,0,160,140,66,0,160,12,67,58,82,22,66,0,160,140,66,240,135,16,67,144,49,33,66,0,160,140,66,33,112,20,67,251,186,39,66,0,160,140,66,16,88,24,67,143,164,48,66,0,160,140,66,0,64,28,67,228,148,54,66,0,160,140,66,240,39,32,67,67,109,61,66,0,160,140,66,33,16,36,67,116,117,64,66,0,160,140,66,16,248,39,67,131,17,63,66,0,160,140,66,0,224,43,67,82,103,56,66,0,160,140,66,240,199,47,67,23,136,53,66,0,160,140,66,33,176,51,67,25,98,49,66,0,160,140,66,16,152,55,67,162,69,43,66,0,160,140,66,0,128,59,67,232,25,34,66,0,160,140,66,240,103,63,67,65,177,22,66,0,160,140,66,33,80,67,67,195,228,18,66,0,160,140,66,16,56,71,67,214,86,12,66,0,160,140,66,0,32,75,67,194,87,4,66,0,160,140,66,240,7,79,67,10,104,240,65,0,160,140,66,33,240,82,67,145,237,213,65,0,160,140,66,16,216,86,67,36,23,182,65,0,160,140,66,0,192,90,67,205,76,148,65,0,160,140,66,240,167,94,67,230,174,121,65,0,160,140,66,33,144,98,67,172,28,107,65,0,160,140,66,16,120,102,67,83,5,112,65,0,160,140,66,0,96,106,67,170,241,95,65,0,160,140,66,240,71,110,67,225,11,71,65,0,160,140,66,33,48,114,67,231,29,71,65,0,160,140,66,16,24,118,67,226,233,59,65,0,160,140,66,0,0,122,67,27,158,60,65,0,160,140,66,0,0,122,64,130,115,204,65,7,208,132,66,0,0,250,64,9,249,208,65,7,208,132,66,52,128,59,65,59,223,209,65,7,208,132,66,0,0,122,65,116,164,211,65,7,208,132,66,26,64,156,65,146,220,215,65,7,208,132,66,0,128,187,65,110,35,216,65,7,208,132,66,26,192,218,65,146,220,218,65,7,208,132,66,0,0,250,65,246,40,231,65,7,208,132,66,13,160,12,66,121,216,240,65,7,208,132,66,0,64,28,66,244,253,241,65,7,208,132,66,13,224,43,66,126,29,249,65,7,208,132,66,0,128,59,66,242,193,253,65,7,208,132,66,13,32,75,66,121,41,5,66,7,208,132,66,0,192,90,66,179,123,6,66,7,208,132,66,13,96,106,66,145,15,6,66,7,208,132,66,0,0,122,66,55,26,252,65,7,208,132,66,7,208,132,66,214,214,240,65,7,208,132,66,0,160,140,66,171,79,231,65,7,208,132,66,7,112,148,66,119,190,216,65,7,208,132,66,0,64,156,66,27,158,214,65,7,208,132,66,7,16,164,66,136,5,207,65,7,208,132,66,0,224,171,66,222,19,202,65,7,208,132,66,7,176,179,66,93,254,206,65,7,208,132,66,0,128,187,66,143,211,219,65,7,208,132,66,7,80,195,66,129,132,217,65,7,208,132,66,66,32,203,66,140,185,214,65,7,208,132,66,33,240,210,66,171,79,218,65,7,208,132,66,0,192,218,66,245,74,229,65,7,208,132,66,223,143,226,66,23,72,234,65,7,208,132,66,66,96,234,66,138,176,242,65,7,208,132,66,33,48,242,66,91,66,0,66,7,208,132,66,0,0,250,66,93,173,2,66,7,208,132,66,240,231,0,67,70,229,6,66,7,208,132,66,33,208,4,67,247,70,11,66,7,208,132,66,16,184,8,67,79,192,18,66,7,208,132,66,0,160,12,67,54,43,26,66,7,208,132,66,240,135,16,67,195,19,34,66,7,208,132,66,33,112,20,67,113,44,40,66,7,208,132,66,16,88,24,67,156,196,46,66,7,208,132,66,0,64,28,67,205,204,56,66,7,208,132,66,240,39,32,67,24,230,62,66,7,208,132,66,33,16,36,67,247,100,65,66,7,208,132,66,16,248,39,67,112,159,65,66,7,208,132,66,0,224,43,67,10,168,61,66,7,208,132,66,240,199,47,67,51,179,55,66,7,208,132,66,33,176,51,67,14,79,48,66,7,208,132,66,16,152,55,67,174,88,40,66,7,208,132,66,0,128,59,67,38,19,33,66,7,208,132,66,240,103,63,67,43,24,24,66,7,208,132,66,33,80,67,67,111,176,19,66,7,208,132,66,16,56,71,67,122,135,14,66,7,208,132,66,0,32,75,67,26,0,4,66,7,208,132,66,240,7,79,67,215,35,241,65,7,208,132,66,33,240,82,67,11,164,211,65,7,208,132,66,16,216,86,67,19,97,179,65,7,208,132,66,0,192,90,67,19,114,148,65,7,208,132,66,240,167,94,67,116,36,129,65,7,208,132,66,33,144,98,67,62,232,111,65,7,208,132,66,16,120,102,67,236,192,110,65,7,208,132,66,0,96,106,67,9,27,86,65,7,208,132,66,240,71,110,67,198,220,47,65,7,208,132,66,33,48,114,67,26,192,41,65,7,208,132,66,16,24,118,67,253,118,28,65,7,208,132,66,0,0,122,67,251,249,31,65,7,208,132,66,0,0,122,64,15,139,217,65,0,0,122,66,0,0,250,64,249,32,225,65,0,0,122,66,52,128,59,65,25,115,223,65,0,0,122,66,0,0,122,65,55,137,221,65,0,0,122,66,26,64,156,65,14,207,222,65,0,0,122,66,0,128,187,65,199,186,225,65,0,0,122,66,26,192,218,65,22,106,236,65,0,0,122,66,0,0,250,65,195,228,241,65,0,0,122,66,13,160,12,66,41,220,248,65,0,0,122,66,0,64,28,66,191,253,252,65,0,0,122,66,13,224,43,66,50,102,3,66,0,0,122,66,0,128,59,66,192,155,4,66,0,0,122,66,13,32,75,66,125,144,10,66,0,0,122,66,0,192,90,66,116,6,12,66,0,0,122,66,13,96,106,66,208,51,7,66,0,0,122,66,0,0,122,66,95,105,4,66,0,0,122,66,7,208,132,66,30,150,0,66,0,0,122,66,0,160,140,66,89,23,242,65,0,0,122,66,7,112,148,66,229,97,226,65,0,0,122,66,0,64,156,66,120,156,224,65,0,0,122,66,7,16,164,66,120,250,217,65,0,0,122,66,0,224,171,66,23,55,210,65,0,0,122,66,7,176,179,66,109,86,210,65,0,0,122,66,0,128,187,66,238,252,216,65,0,0,122,66,7,80,195,66,231,251,219,65,0,0,122,66,66,32,203,66,60,206,217,65,0,0,122,66,33,240,210,66,78,81,226,65,0,0,122,66,0,192,218,66,5,35,231,65,0,0,122,66,223,143,226,66,6,129,244,65,0,0,122,66,66,96,234,66,234,132,0,66,0,0,122,66,33,48,242,66,162,116,3,66,0,0,122,66,0,0,250,66,100,157,10,66,0,0,122,66,240,231,0,67,97,242,13,66,0,0,122,66,33,208,4,67,239,120,18,66,0,0,122,66,16,184,8,67,52,145,22,66,0,0,122,66,0,160,12,67,38,228,28,66,0,0,122,66,240,135,16,67,193,10,34,66,0,0,122,66,33,112,20,67,41,220,40,66,0,0,122,66,16,88,24,67,88,40,46,66,0,0,122,66,0,64,28,67,233,119,52,66,0,0,122,66,240,39,32,67,53,175,58,66,0,0,122,66,33,16,36,67,168,181,61,66,0,0,122,66,16,248,39,67,120,186,62,66,0,0,122,66,0,224,43,67,7,78,64,66,0,0,122,66,240,199,47,67,194,215,57,66,0,0,122,66,33,176,51,67,152,12,51,66,0,0,122,66,16,152,55,67,126,140,42,66,0,0,122,66,0,128,59,67,219,74,33,66,0,0,122,66,240,103,63,67,151,191,25,66,0,0,122,66,33,80,67,67,140,202,16,66,0,0,122,66,16,56,71,67,31,133,13,66,0,0,122,66,0,32,75,67,72,33,0,66,0,0,122,66,240,7,79,67,58,163,233,65,0,0,122,66,33,240,82,67,23,217,219,65,0,0,122,66,16,216,86,67,105,128,192,65,0,0,122,66,0,192,90,67,238,252,164,65,0,0,122,66,240,167,94,67,217,95,148,65,0,0,122,66,33,144,98,67,85,48,138,65,0,0,122,66,16,120,102,67,154,153,118,65,0,0,122,66,0,96,106,67,10,215,90,65,0,0,122,66,240,71,110,67,27,13,55,65,0,0,122,66,33,48,114,67,99,180,27,65,0,0,122,66,16,24,118,67,222,212,8,65,0,0,122,66,0,0,122,67,170,253,6,65,0,0,122,66,0,0,122,64,199,203,226,65,13,96,106,66,0,0,250,64,203,16,231,65,13,96,106,66,52,128,59,65,220,104,228,65,13,96,106,66,0,0,122,65,143,211,230,65,13,96,106,66,26,64,156,65,247,117,232,65,13,96,106,66,0,128,187,65,148,118,242,65,13,96,106,66,26,192,218,65,188,22,251,65,13,96,106,66,0,0,250,65,206,25,4,66,13,96,106,66,13,160,12,66,130,162,5,66,13,96,106,66,0,64,28,66,145,126,9,66,13,96,106,66,13,224,43,66,17,199,10,66,13,96,106,66,0,128,59,66,96,118,8,66,13,96,106,66,13,32,75,66,254,229,10,66,13,96,106,66,0,192,90,66,215,146,13,66,13,96,106,66,13,96,106,66,159,205,11,66,13,96,106,66,0,0,122,66,66,224,9,66,13,96,106,66,7,208,132,66,52,162,4,66,13,96,106,66,0,160,140,66,251,186,244,65,13,96,106,66,7,112,148,66,78,81,243,65,13,96,106,66,0,64,156,66,104,145,246,65,13,96,106,66,7,16,164,66,44,101,239,65,13,96,106,66,0,224,171,66,133,235,226,65,13,96,106,66,7,176,179,66,136,244,222,65,13,96,106,66,0,128,187,66,123,3,222,65,13,96,106,66,7,80,195,66,180,89,223,65,13,96,106,66,66,32,203,66,129,21,222,65,13,96,106,66,33,240,210,66,25,4,226,65,13,96,106,66,0,192,218,66,113,172,235,65,13,96,106,66,223,143,226,66,30,22,250,65,13,96,106,66,66,96,234,66,50,38,6,66,13,96,106,66,33,48,242,66,125,255,9,66,13,96,106,66,0,0,250,66,32,163,12,66,13,96,106,66,240,231,0,67,142,117,18,66,13,96,106,66,33,208,4,67,236,145,20,66,13,96,106,66,16,184,8,67,245,219,24,66,13,96,106,66,0,160,12,67,80,252,27,66,13,96,106,66,240,135,16,67,69,71,33,66,13,96,106,66,33,112,20,67,205,251,41,66,13,96,106,66,16,88,24,67,225,122,45,66,13,96,106,66,0,64,28,67,44,101,49,66,13,96,106,66,240,39,32,67,143,147,54,66,243,95,106,66,33,16,36,67,136,163,54,66,243,95,106,66,16,248,39,67,55,218,59,66,13,96,106,66,0,224,43,67,138,95,60,66,13,96,106,66,240,199,47,67,35,91,55,66,243,95,106,66,33,176,51,67,71,50,48,66,243,95,106,66,16,152,55,67,181,149,38,66,13,96,106,66,0,128,59,67,212,154,31,66,13,96,106,66,240,103,63,67,101,89,23,66,13,96,106,66,33,80,67,67,49,89,12,66,13,96,106,66,16,56,71,67,2,107,10,66,13,96,106,66,0,32,75,67,160,201,1,66,13,96,106,66,240,7,79,67,24,21,244,65,13,96,106,66,33,240,82,67,85,193,229,65,13,96,106,66,16,216,86,67,184,175,210,65,13,96,106,66,0,192,90,67,53,239,194,65,13,96,106,66,240,167,94,67,13,96,177,65,13,96,106,66,33,144,98,67,204,93,161,65,13,96,106,66,16,120,102,67,113,27,145,65,13,96,106,66,0,96,106,67,190,48,123,65,13,96,106,66,240,71,110,67,100,204,73,65,13,96,106,66,33,48,114,67,122,165,51,65,13,96,106,66,16,24,118,67,155,230,39,65,13,96,106,66,0,0,122,67,147,53,23,65,13,96,106,66,0,0,122,64,70,165,233,65,0,192,90,66,0,0,250,64,44,84,235,65,0,192,90,66,52,128,59,65,234,4,237,65,0,192,90,66,0,0,122,65,99,255,238,65,0,192,90,66,26,64,156,65,178,174,250,65,0,192,90,66,0,128,187,65,186,26,2,66,0,192,90,66,26,192,218,65,165,142,9,66,0,192,90,66,0,0,250,65,92,207,11,66,0,192,90,66,13,160,12,66,200,152,15,66,0,192,90,66,0,64,28,66,143,211,16,66,0,192,90,66,13,224,43,66,79,175,17,66,0,192,90,66,0,128,59,66,1,141,16,66,0,192,90,66,13,32,75,66,105,175,13,66,0,192,90,66,0,192,90,66,156,4,14,66,0,192,90,66,13,96,106,66,61,91,16,66,0,192,90,66,0,0,122,66,252,24,16,66,0,192,90,66,7,208,132,66,104,162,11,66,0,192,90,66,0,160,140,66,233,119,3,66,0,192,90,66,7,112,148,66,48,59,6,66,0,192,90,66,0,64,156,66,32,99,7,66,0,192,90,66,7,16,164,66,213,120,3,66,0,192,90,66,0,224,171,66,199,203,249,65,0,192,90,66,7,176,179,66,55,137,235,65,0,192,90,66,0,128,187,66,177,80,231,65,0,192,90,66,7,80,195,66,7,112,221,65,0,192,90,66,66,32,203,66,2,171,223,65,0,192,90,66,33,240,210,66,195,100,228,65,0,192,90,66,0,192,218,66,182,243,232,65,0,192,90,66,223,143,226,66,134,201,245,65,0,192,90,66,66,96,234,66,166,155,1,66,0,192,90,66,33,48,242,66,39,113,9,66,0,192,90,66,0,0,250,66,70,165,14,66,0,192,90,66,240,231,0,67,193,185,20,66,0,192,90,66,33,208,4,67,82,103,23,66,0,192,90,66,16,184,8,67,20,80,25,66,0,192,90,66,0,160,12,67,129,21,28,66,0,192,90,66,240,135,16,67,203,97,31,66,0,192,90,66,33,112,20,67,54,107,37,66,0,192,90,66,16,88,24,67,214,86,40,66,0,192,90,66,0,64,28,67,131,209,41,66,0,192,90,66,240,39,32,67,201,54,45,66,0,192,90,66,33,16,36,67,81,26,49,66,0,192,90,66,16,248,39,67,231,93,52,66,0,192,90,66,0,224,43,67,166,202,51,66,0,192,90,66,240,199,47,67,68,139,49,66,0,192,90,66,33,176,51,67,147,105,44,66,0,192,90,66,16,152,55,67,226,24,38,66,0,192,90,66,0,128,59,67,139,253,31,66,0,192,90,66,240,103,63,67,188,197,20,66,0,192,90,66,33,80,67,67,54,235,12,66,0,192,90,66,16,56,71,67,137,193,9,66,0,192,90,66,0,32,75,67,168,245,2,66,0,192,90,66,240,7,79,67,20,208,251,65,0,192,90,66,33,240,82,67,136,133,239,65,0,192,90,66,16,216,86,67,207,102,229,65,0,192,90,66,0,192,90,67,66,79,216,65,0,192,90,66,240,167,94,67,84,210,195,65,0,192,90,66,33,144,98,67,54,188,173,65,0,192,90,66,16,120,102,67,60,61,160,65,0,192,90,66,0,96,106,67,127,123,138,65,0,192,90,66,240,71,110,67,142,6,99,65,0,192,90,66,33,48,114,67,104,145,66,65,0,192,90,66,16,24,118,67,6,129,46,65,0,192,90,66,0,0,122,67,36,151,42,65,0,192,90,66,0,0,122,64,222,113,243,65,13,32,75,66,0,0,250,64,66,190,247,65,13,32,75,66,52,128,59,65,182,115,250,65,13,32,75,66,0,0,122,65,247,53,0,66,13,32,75,66,26,64,156,65,139,172,7,66,13,32,75,66,0,128,187,65,205,187,10,66,13,32,75,66,26,192,218,65,195,53,15,66,13,32,75,66,0,0,250,65,199,75,19,66,13,32,75,66,13,160,12,66,199,250,23,66,13,32,75,66,0,64,28,66,161,248,24,66,13,32,75,66,13,224,43,66,151,144,21,66,13,32,75,66,0,128,59,66,189,35,21,66,13,32,75,66,13,32,75,66,194,198,17,66,13,32,75,66,0,192,90,66,247,100,18,66,13,32,75,66,13,96,106,66,202,242,18,66,13,32,75,66,0,0,122,66,43,118,18,66,13,32,75,66,7,208,132,66,61,202,15,66,13,32,75,66,0,160,140,66,153,187,12,66,13,32,75,66,7,112,148,66,129,38,15,66,13,32,75,66,0,64,156,66,104,162,15,66,13,32,75,66,7,16,164,66,234,4,12,66,13,32,75,66,0,224,171,66,124,225,6,66,13,32,75,66,7,176,179,66,214,150,2,66,13,32,75,66,0,128,187,66,64,164,247,65,13,32,75,66,7,80,195,66,96,246,229,65,13,32,75,66,66,32,203,66,134,56,233,65,13,32,75,66,33,240,210,66,50,247,239,65,13,32,75,66,0,192,218,66,105,111,244,65,13,32,75,66,223,143,226,66,191,142,253,65,13,32,75,66,66,96,234,66,154,8,3,66,13,32,75,66,33,48,242,66,216,1,9,66,13,32,75,66,0,0,250,66,68,122,17,66,13,32,75,66,240,231,0,67,114,202,19,66,13,32,75,66,33,208,4,67,206,42,21,66,13,32,75,66,16,184,8,67,123,84,23,66,13,32,75,66,0,160,12,67,135,86,24,66,13,32,75,66,240,135,16,67,3,9,32,66,13,32,75,66,33,112,20,67,160,73,35,66,13,32,75,66,16,88,24,67,152,157,41,66,13,32,75,66,0,64,28,67,53,111,42,66,13,32,75,66,240,39,32,67,222,49,46,66,13,32,75,66,33,16,36,67,150,33,46,66,13,32,75,66,16,248,39,67,23,217,48,66,243,31,75,66,0,224,43,67,150,178,46,66,13,32,75,66,240,199,47,67,193,202,44,66,13,32,75,66,33,176,51,67,248,211,43,66,13,32,75,66,16,152,55,67,72,255,37,66,13,32,75,66,0,128,59,67,88,10,30,66,13,32,75,66,240,103,63,67,13,177,24,66,13,32,75,66,33,80,67,67,208,243,13,66,13,32,75,66,16,56,71,67,185,141,10,66,13,32,75,66,0,32,75,67,204,191,8,66,13,32,75,66,240,7,79,67,70,118,0,66,13,32,75,66,33,240,82,67,199,75,247,65,13,32,75,66,16,216,86,67,122,182,242,65,13,32,75,66,0,192,90,67,59,1,225,65,13,32,75,66,240,167,94,67,76,55,199,65,13,32,75,66,33,144,98,67,84,244,177,65,13,32,75,66,16,120,102,67,109,86,167,65,13,32,75,66,0,96,106,67,112,206,150,65,13,32,75,66,240,71,110,67,245,219,127,65,13,32,75,66,33,48,114,67,121,88,76,65,13,32,75,66,16,24,118,67,4,231,57,65,13,32,75,66,0,0,122,67,1,77,68,65,13,32,75,66,0,0,122,64,129,4,247,65,0,128,59,66,0,0,250,64,207,230,1,66,0,128,59,66,52,128,59,65,15,203,6,66,0,128,59,66,0,0,122,65,92,143,12,66,0,128,59,66,26,64,156,65,201,37,20,66,0,128,59,66,0,128,187,65,219,121,25,66,0,128,59,66,26,192,218,65,31,116,26,66,0,128,59,66,0,0,250,65,226,233,27,66,0,128,59,66,13,160,12,66,215,244,31,66,0,128,59,66,0,64,28,66,95,71,33,66,0,128,59,66,13,224,43,66,118,224,31,66,0,128,59,66,0,128,59,66,48,204,30,66,0,128,59,66,13,32,75,66,87,172,29,66,0,128,59,66,0,192,90,66,224,45,25,66,0,128,59,66,13,96,106,66,174,71,25,66,0,128,59,66,0,0,122,66,231,123,26,66,0,128,59,66,7,208,132,66,134,218,24,66,0,128,59,66,0,160,140,66,175,212,19,66,0,128,59,66,7,112,148,66,165,44,21,66,0,128,59,66,0,64,156,66,17,118,23,66,0,128,59,66,7,16,164,66,138,159,19,66,0,128,59,66,0,224,171,66,133,188,16,66,0,128,59,66,7,176,179,66,216,65,11,66,0,128,59,66,0,128,187,66,46,80,4,66,0,128,59,66,7,80,195,66,25,226,247,65,0,128,59,66,66,32,203,66,213,120,247,65,0,128,59,66,33,240,210,66,152,110,0,66,0,128,59,66,0,192,218,66,79,47,4,66,0,128,59,66,223,143,226,66,130,179,3,66,0,128,59,66,66,96,234,66,206,89,5,66,0,128,59,66,33,48,242,66,120,220,8,66,0,128,59,66,0,0,250,66,172,75,12,66,0,128,59,66,240,231,0,67,172,75,19,66,0,128,59,66,33,208,4,67,208,149,20,66,0,128,59,66,16,184,8,67,226,41,22,66,0,128,59,66,0,160,12,67,86,78,27,66,0,128,59,66,240,135,16,67,122,229,34,66,0,128,59,66,33,112,20,67,86,189,35,66,0,128,59,66,16,88,24,67,225,203,41,66,0,128,59,66,0,64,28,67,197,224,47,66,0,128,59,66,240,39,32,67,92,224,48,66,0,128,59,66,33,16,36,67,188,180,51,66,0,128,59,66,16,248,39,67,234,196,47,66,0,128,59,66,0,224,43,67,141,23,45,66,0,128,59,66,240,199,47,67,103,4,45,66,0,128,59,66,33,176,51,67,150,33,42,66,0,128,59,66,16,152,55,67,247,181,36,66,0,128,59,66,0,128,59,67,212,107,29,66,0,128,59,66,240,103,63,67,251,75,23,66,0,128,59,66,33,80,67,67,15,220,17,66,0,128,59,66,16,56,71,67,49,200,14,66,0,128,59,66,0,32,75,67,79,192,12,66,0,128,59,66,240,7,79,67,116,198,3,66,0,128,59,66,33,240,82,67,13,241,250,65,0,128,59,66,16,216,86,67,91,211,245,65,0,128,59,66,0,192,90,67,147,169,226,65,0,128,59,66,240,167,94,67,173,122,200,65,0,128,59,66,33,144,98,67,172,139,193,65,0,128,59,66,16,120,102,67,24,21,179,65,0,128,59,66,0,96,106,67,179,234,155,65,0,128,59,66,240,71,110,67,157,0,135,65,0,128,59,66,33,48,114,67,129,38,95,65,0,128,59,66,16,24,118,67,143,194,84,65,0,128,59,66,0,0,122,67,213,9,84,65,0,128,59,66,0,0,122,64,240,39,255,65,13,224,43,66,0,0,250,64,251,11,8,66,13,224,43,66,52,128,59,65,245,249,16,66,13,224,43,66,0,0,122,65,229,114,21,66,13,224,43,66,26,64,156,65,206,89,30,66,13,224,43,66,0,128,187,65,201,101,36,66,13,224,43,66,26,192,218,65,121,88,40,66,13,224,43,66,0,0,250,65,240,86,40,66,13,224,43,66,13,160,12,66,177,208,40,66,13,224,43,66,0,64,28,66,90,228,45,66,13,224,43,66,13,224,43,66,2,26,43,66,13,224,43,66,0,128,59,66,83,69,41,66,13,224,43,66,13,32,75,66,4,214,40,66,13,224,43,66,0,192,90,66,238,60,37,66,13,224,43,66,13,96,106,66,156,115,35,66,13,224,43,66,0,0,122,66,16,233,33,66,13,224,43,66,7,208,132,66,243,142,32,66,13,224,43,66,0,160,140,66,181,119,28,66,13,224,43,66,7,112,148,66,132,141,28,66,13,224,43,66,0,64,156,66,131,145,28,66,13,224,43,66,7,16,164,66,218,155,27,66,13,224,43,66,0,224,171,66,206,72,22,66,13,224,43,66,7,176,179,66,107,43,19,66,13,224,43,66,0,128,187,66,246,23,11,66,13,224,43,66,7,80,195,66,2,171,4,66,13,224,43,66,66,32,203,66,81,171,1,66,13,224,43,66,33,240,210,66,184,47,4,66,13,224,43,66,0,192,218,66,132,141,5,66,13,224,43,66,223,143,226,66,228,3,7,66,13,224,43,66,66,96,234,66,176,67,6,66,13,224,43,66,33,48,242,66,211,158,7,66,13,224,43,66,0,0,250,66,34,172,11,66,13,224,43,66,240,231,0,67,133,43,13,66,13,224,43,66,33,208,4,67,71,178,20,66,13,224,43,66,16,184,8,67,175,101,24,66,13,224,43,66,0,160,12,67,100,12,27,66,13,224,43,66,240,135,16,67,23,217,30,66,13,224,43,66,33,112,20,67,30,231,34,66,13,224,43,66,16,88,24,67,106,252,40,66,13,224,43,66,0,64,28,67,229,33,46,66,13,224,43,66,240,39,32,67,176,178,50,66,243,223,43,66,33,16,36,67,137,65,50,66,13,224,43,66,16,248,39,67,20,110,50,66,13,224,43,66,0,224,43,67,11,228,44,66,13,224,43,66,240,199,47,67,116,70,42,66,13,224,43,66,33,176,51,67,149,229,39,66,13,224,43,66,16,152,55,67,195,100,33,66,13,224,43,66,0,128,59,67,195,164,27,66,13,224,43,66,240,103,63,67,193,232,22,66,13,224,43,66,33,80,67,67,100,29,18,66,13,224,43,66,16,56,71,67,145,190,15,66,13,224,43,66,0,32,75,67,187,167,12,66,13,224,43,66,240,7,79,67,96,165,6,66,13,224,43,66,33,240,82,67,94,58,250,65,13,224,43,66,16,216,86,67,216,1,241,65,13,224,43,66,0,192,90,67,22,234,228,65,13,224,43,66,240,167,94,67,250,237,208,65,13,224,43,66,33,144,98,67,60,78,194,65,13,224,43,66,16,120,102,67,240,39,180,65,13,224,43,66,0,96,106,67,107,43,161,65,13,224,43,66,240,71,110,67,75,217,139,65,13,224,43,66,33,48,114,67,170,96,116,65,13,224,43,66,16,24,118,67,166,155,92,65,13,224,43,66,0,0,122,67,190,193,82,65,13,224,43,66,0,0,122,64,28,171,11,66,0,64,28,66,0,0,250,64,155,21,19,66,0,64,28,66,52,128,59,65,83,69,26,66,0,64,28,66,0,0,122,65,168,53,32,66,0,64,28,66,26,64,156,65,241,244,40,66,0,64,28,66,0,128,187,65,204,238,44,66,0,64,28,66,26,192,218,65,54,77,51,66,0,64,28,66,0,0,250,65,36,185,52,66,0,64,28,66,13,160,12,66,164,223,51,66,0,64,28,66,0,64,28,66,65,66,52,66,0,64,28,66,13,224,43,66,238,90,52,66,0,64,28,66,0,128,59,66,61,27,54,66,0,64,28,66,13,32,75,66,77,4,53,66,0,64,28,66,0,192,90,66,3,184,48,66,0,64,28,66,13,96,106,66,46,16,45,66,0,64,28,66,0,0,122,66,247,6,43,66,0,64,28,66,7,208,132,66,226,169,41,66,0,64,28,66,0,160,140,66,159,141,37,66,0,64,28,66,7,112,148,66,61,202,36,66,0,64,28,66,0,64,156,66,173,58,37,66,0,64,28,66,7,16,164,66,28,60,36,66,0,64,28,66,0,224,171,66,145,62,32,66,0,64,28,66,7,176,179,66,107,235,26,66,0,64,28,66,0,128,187,66,81,43,21,66,0,64,28,66,7,80,195,66,59,48,15,66,0,64,28,66,66,32,203,66,245,202,12,66,0,64,28,66,33,240,210,66,46,144,6,66,0,64,28,66,0,192,218,66,48,12,5,66,0,64,28,66,223,143,226,66,212,90,7,66,0,64,28,66,66,96,234,66,136,5,11,66,0,64,28,66,33,48,242,66,119,109,7,66,0,64,28,66,0,0,250,66,174,24,11,66,0,64,28,66,240,231,0,67,119,237,14,66,0,64,28,66,33,208,4,67,193,104,18,66,0,64,28,66,16,184,8,67,103,213,22,66,0,64,28,66,0,160,12,67,85,1,25,66,0,64,28,66,240,135,16,67,251,203,28,66,0,64,28,66,33,112,20,67,53,239,32,66,0,64,28,66,16,88,24,67,107,90,36,66,0,64,28,66,0,64,28,67,2,154,41,66,0,64,28,66,240,39,32,67,79,128,43,66,0,64,28,66,33,16,36,67,4,167,44,66,0,64,28,66,16,248,39,67,27,141,46,66,0,64,28,66,0,224,43,67,95,216,44,66,0,64,28,66,240,199,47,67,138,48,42,66,0,64,28,66,33,176,51,67,126,93,37,66,0,64,28,66,16,152,55,67,210,192,29,66,0,64,28,66,0,128,59,67,163,227,27,66,0,64,28,66], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102400);
/* memory initializer */ allocate([240,103,63,67,107,107,21,66,0,64,28,66,33,80,67,67,45,114,15,66,0,64,28,66,16,56,71,67,124,178,11,66,0,64,28,66,0,32,75,67,90,100,10,66,0,64,28,66,240,7,79,67,5,163,6,66,0,64,28,66,33,240,82,67,85,240,0,66,0,64,28,66,16,216,86,67,41,75,243,65,0,64,28,66,0,192,90,67,97,212,227,65,0,64,28,66,240,167,94,67,251,58,213,65,0,64,28,66,33,144,98,67,226,233,195,65,0,64,28,66,16,120,102,67,168,181,183,65,0,64,28,66,0,96,106,67,36,23,165,65,0,64,28,66,240,71,110,67,206,170,147,65,0,64,28,66,33,48,114,67,16,88,130,65,0,64,28,66,16,24,118,67,241,244,91,65,0,64,28,66,0,0,122,67,28,235,83,65,0,64,28,66,0,0,122,64,186,43,26,66,13,160,12,66,0,0,250,64,192,27,29,66,13,160,12,66,52,128,59,65,159,235,33,66,13,160,12,66,0,0,122,65,234,21,41,66,13,160,12,66,26,64,156,65,21,76,48,66,243,159,12,66,0,128,187,65,223,160,55,66,243,159,12,66,26,192,218,65,31,197,61,66,13,160,12,66,0,0,250,65,92,15,63,66,13,160,12,66,13,160,12,66,150,97,59,66,243,159,12,66,0,64,28,66,227,118,60,66,243,159,12,66,13,224,43,66,47,93,58,66,13,160,12,66,0,128,59,66,39,160,61,66,13,160,12,66,13,32,75,66,231,204,60,66,243,159,12,66,0,192,90,66,229,242,60,66,243,159,12,66,13,96,106,66,204,221,59,66,13,160,12,66,0,0,122,66,44,84,53,66,13,160,12,66,7,208,132,66,139,189,49,66,243,159,12,66,0,160,140,66,219,121,47,66,243,159,12,66,7,112,148,66,166,10,47,66,13,160,12,66,0,64,156,66,203,144,46,66,13,160,12,66,7,16,164,66,232,106,46,66,13,160,12,66,0,224,171,66,240,231,39,66,13,160,12,66,7,176,179,66,84,99,34,66,13,160,12,66,0,128,187,66,54,60,27,66,13,160,12,66,7,80,195,66,156,179,21,66,13,160,12,66,66,32,203,66,150,242,17,66,13,160,12,66,33,240,210,66,164,48,11,66,13,160,12,66,0,192,218,66,159,107,2,66,13,160,12,66,223,143,226,66,84,146,1,66,13,160,12,66,66,96,234,66,249,143,5,66,13,160,12,66,33,48,242,66,121,233,6,66,13,160,12,66,0,0,250,66,80,60,7,66,13,160,12,66,240,231,0,67,42,250,12,66,13,160,12,66,33,208,4,67,104,243,15,66,13,160,12,66,16,184,8,67,177,127,17,66,13,160,12,66,0,160,12,67,2,107,22,66,13,160,12,66,240,135,16,67,173,122,25,66,13,160,12,66,33,112,20,67,111,146,29,66,13,160,12,66,16,88,24,67,199,11,32,66,13,160,12,66,0,64,28,67,34,125,35,66,13,160,12,66,240,39,32,67,186,235,34,66,13,160,12,66,33,16,36,67,241,180,38,66,13,160,12,66,16,248,39,67,7,176,40,66,13,160,12,66,0,224,43,67,45,178,39,66,13,160,12,66,240,199,47,67,232,217,35,66,13,160,12,66,33,176,51,67,154,72,29,66,13,160,12,66,16,152,55,67,147,216,23,66,13,160,12,66,0,128,59,67,42,41,21,66,13,160,12,66,240,103,63,67,192,155,16,66,13,160,12,66,33,80,67,67,95,71,14,66,13,160,12,66,16,56,71,67,3,56,12,66,13,160,12,66,0,32,75,67,106,94,7,66,13,160,12,66,240,7,79,67,250,173,4,66,13,160,12,66,33,240,82,67,198,173,1,66,13,160,12,66,16,216,86,67,18,148,248,65,13,160,12,66,0,192,90,67,238,218,232,65,13,160,12,66,240,167,94,67,70,54,211,65,13,160,12,66,33,144,98,67,86,125,189,65,13,160,12,66,16,120,102,67,123,131,178,65,13,160,12,66,0,96,106,67,72,97,167,65,13,160,12,66,240,71,110,67,245,57,149,65,13,160,12,66,33,48,114,67,180,89,132,65,13,160,12,66,16,24,118,67,48,187,104,65,13,160,12,66,0,0,122,67,224,45,88,65,13,160,12,66,0,0,122,64,157,192,37,66,0,0,250,65,0,0,250,64,73,221,37,66,0,0,250,65,52,128,59,65,155,21,42,66,0,0,250,65,0,0,122,65,87,155,48,66,0,0,250,65,26,64,156,65,6,82,55,66,0,0,250,65,0,128,187,65,3,73,61,66,0,0,250,65,26,192,218,65,2,154,68,66,0,0,250,65,0,0,250,65,116,134,68,66,0,0,250,65,13,160,12,66,49,217,65,66,0,0,250,65,0,64,28,66,174,88,64,66,0,0,250,65,13,224,43,66,134,26,62,66,0,0,250,65,0,128,59,66,26,209,64,66,0,0,250,65,13,32,75,66,58,18,65,66,0,0,250,65,0,192,90,66,233,183,66,66,0,0,250,65,13,96,106,66,107,154,68,66,0,0,250,65,0,0,122,66,186,26,66,66,0,0,250,65,7,208,132,66,97,20,61,66,0,0,250,65,0,160,140,66,172,75,57,66,0,0,250,65,7,112,148,66,7,159,55,66,0,0,250,65,0,64,156,66,224,45,53,66,0,0,250,65,7,16,164,66,34,125,52,66,0,0,250,65,0,224,171,66,142,181,48,66,0,0,250,65,7,176,179,66,231,76,40,66,0,0,250,65,0,128,187,66,188,69,31,66,0,0,250,65,7,80,195,66,248,194,24,66,0,0,250,65,66,32,203,66,146,156,19,66,0,0,250,65,33,240,210,66,116,245,15,66,0,0,250,65,0,192,218,66,204,110,8,66,0,0,250,65,223,143,226,66,235,243,7,66,0,0,250,65,66,96,234,66,78,209,5,66,0,0,250,65,33,48,242,66,88,249,2,66,0,0,250,65,0,0,250,66,91,49,1,66,0,0,250,65,240,231,0,67,62,40,5,66,0,0,250,65,33,208,4,67,134,184,9,66,0,0,250,65,16,184,8,67,6,1,14,66,0,0,250,65,0,160,12,67,48,170,17,66,0,0,250,65,240,135,16,67,104,81,24,66,0,0,250,65,33,112,20,67,113,172,25,66,0,0,250,65,16,88,24,67,145,173,24,66,0,0,250,65,0,64,28,67,154,136,28,66,0,0,250,65,240,39,32,67,11,53,31,66,0,0,250,65,33,16,36,67,134,154,33,66,0,0,250,65,16,248,39,67,48,170,34,66,0,0,250,65,0,224,43,67,60,142,34,66,0,0,250,65,240,199,47,67,131,0,32,66,0,0,250,65,33,176,51,67,38,147,24,66,0,0,250,65,16,152,55,67,186,171,16,66,0,0,250,65,0,128,59,67,109,5,15,66,0,0,250,65,240,103,63,67,254,3,13,66,0,0,250,65,33,80,67,67,107,26,10,66,0,0,250,65,16,56,71,67,237,205,7,66,0,0,250,65,0,32,75,67,154,72,7,66,0,0,250,65,240,7,79,67,222,19,2,66,0,0,250,65,33,240,82,67,7,112,253,65,0,0,250,65,16,216,86,67,182,243,243,65,0,0,250,65,0,192,90,67,109,69,231,65,0,0,250,65,240,167,94,67,156,196,216,65,0,0,250,65,33,144,98,67,2,154,188,65,0,0,250,65,16,120,102,67,161,86,180,65,0,0,250,65,0,96,106,67,26,192,166,65,0,0,250,65,240,71,110,67,180,89,150,65,0,0,250,65,33,48,114,67,27,158,133,65,0,0,250,65,16,24,118,67,180,200,105,65,0,0,250,65,0,0,122,67,173,105,76,65,0,0,250,65,0,0,122,64,0,239,42,66,230,191,218,65,0,0,250,64,148,118,45,66,26,192,218,65,52,128,59,65,82,184,51,66,230,191,218,65,0,0,122,65,95,216,58,66,26,192,218,65,26,64,156,65,147,105,64,66,230,191,218,65,0,128,187,65,132,222,66,66,26,192,218,65,26,192,218,65,154,89,68,66,230,191,218,65,0,0,250,65,65,130,72,66,26,192,218,65,13,160,12,66,174,182,68,66,230,191,218,65,0,64,28,66,222,211,73,66,26,192,218,65,13,224,43,66,235,226,70,66,230,191,218,65,0,128,59,66,167,57,68,66,26,192,218,65,13,32,75,66,99,255,66,66,230,191,218,65,0,192,90,66,37,53,68,66,26,192,218,65,13,96,106,66,60,78,71,66,230,191,218,65,0,0,122,66,17,71,71,66,26,192,218,65,7,208,132,66,251,156,67,66,230,191,218,65,0,160,140,66,52,0,62,66,26,192,218,65,7,112,148,66,87,236,58,66,230,191,218,65,0,64,156,66,184,64,55,66,26,192,218,65,7,16,164,66,161,184,53,66,230,191,218,65,0,224,171,66,79,239,49,66,26,192,218,65,7,176,179,66,178,174,42,66,230,191,218,65,0,128,187,66,15,11,34,66,26,192,218,65,7,80,195,66,50,230,25,66,230,191,218,65,66,32,203,66,179,251,24,66,26,192,218,65,33,240,210,66,194,70,23,66,230,191,218,65,0,192,218,66,130,51,22,66,26,192,218,65,223,143,226,66,5,244,17,66,230,191,218,65,66,96,234,66,92,207,14,66,26,192,218,65,33,48,242,66,119,109,9,66,230,191,218,65,0,0,250,66,63,53,8,66,26,192,218,65,240,231,0,67,51,68,9,66,230,191,218,65,33,208,4,67,255,242,7,66,26,192,218,65,16,184,8,67,149,84,7,66,230,191,218,65,0,160,12,67,34,14,14,66,26,192,218,65,240,135,16,67,85,240,15,66,230,191,218,65,33,112,20,67,123,67,17,66,26,192,218,65,16,88,24,67,16,105,24,66,230,191,218,65,0,64,28,67,143,19,28,66,26,192,218,65,240,39,32,67,49,72,28,66,230,191,218,65,33,16,36,67,140,219,27,66,26,192,218,65,16,248,39,67,136,99,24,66,230,191,218,65,0,224,43,67,166,27,25,66,26,192,218,65,240,199,47,67,63,70,22,66,230,191,218,65,33,176,51,67,116,245,15,66,26,192,218,65,16,152,55,67,33,159,8,66,230,191,218,65,0,128,59,67,192,219,7,66,26,192,218,65,240,103,63,67,137,210,7,66,230,191,218,65,33,80,67,67,25,243,6,66,26,192,218,65,16,56,71,67,145,126,5,66,230,191,218,65,0,32,75,67,108,201,0,66,26,192,218,65,240,7,79,67,55,218,0,66,230,191,218,65,33,240,82,67,60,206,243,65,26,192,218,65,16,216,86,67,96,101,232,65,230,191,218,65,0,192,90,67,223,79,220,65,26,192,218,65,240,167,94,67,176,242,205,65,230,191,218,65,33,144,98,67,82,73,188,65,26,192,218,65,16,120,102,67,119,62,180,65,230,191,218,65,0,96,106,67,214,197,162,65,26,192,218,65,240,71,110,67,202,195,148,65,26,192,218,65,33,48,114,67,66,62,133,65,26,192,218,65,16,24,118,67,122,54,108,65,26,192,218,65,0,0,122,67,252,169,79,65,26,192,218,65,0,0,122,64,148,182,50,66,0,128,187,65,0,0,250,64,248,130,56,66,0,128,187,65,52,128,59,65,233,247,63,66,0,128,187,65,0,0,122,65,59,95,66,66,0,128,187,65,26,64,156,65,211,77,71,66,0,128,187,65,0,128,187,65,94,11,72,66,0,128,187,65,26,192,218,65,141,23,71,66,0,128,187,65,0,0,250,65,195,147,74,66,0,128,187,65,13,160,12,66,207,247,72,66,0,128,187,65,0,64,28,66,152,29,78,66,0,128,187,65,13,224,43,66,223,143,77,66,0,128,187,65,0,128,59,66,154,55,74,66,0,128,187,65,13,32,75,66,10,215,71,66,0,128,187,65,0,192,90,66,178,29,76,66,0,128,187,65,13,96,106,66,151,255,73,66,0,128,187,65,0,0,122,66,5,52,72,66,0,128,187,65,7,208,132,66,3,201,69,66,0,128,187,65,0,160,140,66,146,11,67,66,0,128,187,65,7,112,148,66,64,19,64,66,0,128,187,65,0,64,156,66,149,101,64,66,0,128,187,65,7,16,164,66,95,199,60,66,0,128,187,65,0,224,171,66,111,193,52,66,0,128,187,65,7,176,179,66,229,178,47,66,0,128,187,65,0,128,187,66,158,47,39,66,0,128,187,65,7,80,195,66,182,115,33,66,0,128,187,65,66,32,203,66,200,71,33,66,0,128,187,65,33,240,210,66,3,248,28,66,0,128,187,65,0,192,218,66,247,134,26,66,0,128,187,65,223,143,226,66,136,180,23,66,0,128,187,65,66,96,234,66,182,115,20,66,0,128,187,65,33,48,242,66,31,244,13,66,0,128,187,65,0,0,250,66,160,90,15,66,0,128,187,65,240,231,0,67,245,249,13,66,0,128,187,65,33,208,4,67,176,195,8,66,0,128,187,65,16,184,8,67,102,183,6,66,0,128,187,65,0,160,12,67,106,205,5,66,0,128,187,65,240,135,16,67,198,237,13,66,0,128,187,65,33,112,20,67,38,19,16,66,0,128,187,65,16,88,24,67,139,236,24,66,0,128,187,65,0,64,28,67,147,122,28,66,0,128,187,65,240,39,32,67,84,163,27,66,0,128,187,65,33,16,36,67,222,177,24,66,0,128,187,65,16,248,39,67,204,255,18,66,0,128,187,65,0,224,43,67,249,113,18,66,0,128,187,65,240,199,47,67,166,91,14,66,0,128,187,65,33,176,51,67,76,247,10,66,0,128,187,65,16,152,55,67,45,161,2,66,0,128,187,65,0,128,59,67,181,85,2,66,0,128,187,65,240,103,63,67,218,27,2,66,0,128,187,65,33,80,67,67,196,113,1,66,0,128,187,65,16,56,71,67,195,211,251,65,0,128,187,65,0,32,75,67,96,118,246,65,0,128,187,65,240,7,79,67,132,158,239,65,0,128,187,65,33,240,82,67,151,255,239,65,0,128,187,65,16,216,86,67,198,220,227,65,0,128,187,65,0,192,90,67,1,94,213,65,0,128,187,65,240,167,94,67,50,230,199,65,0,128,187,65,33,144,98,67,159,43,184,65,0,128,187,65,16,120,102,67,158,222,170,65,0,128,187,65,0,96,106,67,238,107,152,65,0,128,187,65,240,71,110,67,69,216,144,65,0,128,187,65,33,48,114,67,50,85,134,65,0,128,187,65,16,24,118,67,48,76,111,65,0,128,187,65,0,0,122,67,206,25,80,65,0,128,187,65,0,0,122,64,59,159,59,66,230,63,156,65,0,0,250,64,242,129,65,66,230,63,156,65,52,128,59,65,197,62,72,66,230,63,156,65,0,0,122,65,28,252,75,66,230,63,156,65,26,64,156,65,221,164,76,66,230,63,156,65,0,128,187,65,161,22,79,66,230,63,156,65,26,192,218,65,70,84,78,66,230,63,156,65,0,0,250,65,15,28,78,66,230,63,156,65,13,160,12,66,126,93,78,66,230,63,156,65,0,64,28,66,117,194,81,66,230,63,156,65,13,224,43,66,76,102,82,66,230,63,156,65,0,128,59,66,62,185,79,66,230,63,156,65,13,32,75,66,192,108,78,66,230,63,156,65,0,192,90,66,164,112,75,66,230,63,156,65,13,96,106,66,49,153,76,66,230,63,156,65,0,0,122,66,102,200,72,66,230,63,156,65,7,208,132,66,3,56,71,66,230,63,156,65,0,160,140,66,54,188,68,66,230,63,156,65,7,112,148,66,16,233,66,66,230,63,156,65,0,64,156,66,159,252,65,66,230,63,156,65,7,16,164,66,86,206,61,66,230,63,156,65,0,224,171,66,160,9,57,66,230,63,156,65,7,176,179,66,208,179,50,66,230,63,156,65,0,128,187,66,155,38,44,66,230,63,156,65,7,80,195,66,56,103,37,66,230,63,156,65,66,32,203,66,237,77,35,66,230,63,156,65,33,240,210,66,168,53,34,66,230,63,156,65,0,192,218,66,101,234,30,66,230,63,156,65,223,143,226,66,89,198,27,66,230,63,156,65,66,96,234,66,45,131,25,66,230,63,156,65,33,48,242,66,226,216,19,66,230,63,156,65,0,0,250,66,221,228,15,66,230,63,156,65,240,231,0,67,7,142,13,66,230,63,156,65,33,208,4,67,159,13,10,66,230,63,156,65,16,184,8,67,181,230,10,66,230,63,156,65,0,160,12,67,242,176,7,66,230,63,156,65,240,135,16,67,98,33,9,66,230,63,156,65,33,112,20,67,216,65,14,66,230,63,156,65,16,88,24,67,46,255,22,66,230,63,156,65,0,64,28,67,254,37,27,66,230,63,156,65,240,39,32,67,22,106,26,66,230,63,156,65,33,16,36,67,175,20,25,66,230,63,156,65,16,248,39,67,88,185,15,66,230,63,156,65,0,224,43,67,1,77,11,66,230,63,156,65,240,199,47,67,195,245,7,66,230,63,156,65,33,176,51,67,240,167,6,66,230,63,156,65,16,152,55,67,18,148,253,65,230,63,156,65,0,128,59,67,226,216,250,65,230,63,156,65,240,103,63,67,7,223,250,65,230,63,156,65,33,80,67,67,89,23,246,65,230,63,156,65,16,56,71,67,169,19,234,65,230,63,156,65,0,32,75,67,54,43,230,65,230,63,156,65,240,7,79,67,98,144,223,65,230,63,156,65,33,240,82,67,212,171,226,65,230,63,156,65,16,216,86,67,36,23,227,65,230,63,156,65,0,192,90,67,67,156,219,65,230,63,156,65,240,167,94,67,136,133,200,65,230,63,156,65,33,144,98,67,50,213,185,65,230,63,156,65,16,120,102,67,23,200,166,65,26,64,156,65,0,96,106,67,90,100,155,65,26,64,156,65,240,71,110,67,11,164,141,65,26,64,156,65,33,48,114,67,23,200,132,65,26,64,156,65,16,24,118,67,197,143,108,65,26,64,156,65,0,0,122,67,180,89,77,65,26,64,156,65,0,0,122,64,2,235,68,66,0,0,122,65,0,0,250,64,54,77,72,66,0,0,122,65,52,128,59,65,101,89,78,66,0,0,122,65,0,0,122,65,195,53,80,66,0,0,122,65,26,64,156,65,37,181,77,66,0,0,122,65,0,128,187,65,172,92,79,66,0,0,122,65,26,192,218,65,175,84,81,66,0,0,122,65,0,0,250,65,68,11,84,66,0,0,122,65,13,160,12,66,144,241,82,66,0,0,122,65,0,64,28,66,11,36,85,66,0,0,122,65,13,224,43,66,149,165,86,66,0,0,122,65,0,128,59,66,5,244,81,66,0,0,122,65,13,32,75,66,171,190,79,66,0,0,122,65,0,192,90,66,75,89,75,66,0,0,122,65,13,96,106,66,122,182,72,66,0,0,122,65,0,0,122,66,16,41,68,66,0,0,122,65,7,208,132,66,135,103,68,66,0,0,122,65,0,160,140,66,68,41,67,66,0,0,122,65,7,112,148,66,25,115,66,66,0,0,122,65,0,64,156,66,236,128,64,66,0,0,122,65,7,16,164,66,36,232,62,66,0,0,122,65,0,224,171,66,131,175,59,66,0,0,122,65,7,176,179,66,39,96,52,66,0,0,122,65,0,128,187,66,13,160,46,66,0,0,122,65,7,80,195,66,154,72,42,66,0,0,122,65,66,32,203,66,44,212,39,66,0,0,122,65,33,240,210,66,90,228,35,66,0,0,122,65,0,192,218,66,163,18,35,66,0,0,122,65,223,143,226,66,215,116,29,66,0,0,122,65,66,96,234,66,113,27,29,66,0,0,122,65,33,48,242,66,11,100,22,66,0,0,122,65,0,0,250,66,66,62,16,66,0,0,122,65,240,231,0,67,20,46,16,66,0,0,122,65,33,208,4,67,54,141,12,66,0,0,122,65,16,184,8,67,51,243,11,66,0,0,122,65,0,160,12,67,91,49,8,66,0,0,122,65,240,135,16,67,217,61,7,66,0,0,122,65,33,112,20,67,99,255,11,66,0,0,122,65,16,88,24,67,203,16,17,66,0,0,122,65,0,64,28,67,222,19,23,66,0,0,122,65,240,39,32,67,52,162,22,66,0,0,122,65,33,16,36,67,190,176,19,66,0,0,122,65,16,248,39,67,242,1,11,66,0,0,122,65,0,224,43,67,124,33,5,66,0,0,122,65,240,199,47,67,97,148,3,66,0,0,122,65,33,176,51,67,29,137,0,66,0,0,122,65,16,152,55,67,137,65,243,65,0,0,122,65,0,128,59,67,207,247,231,65,0,0,122,65,240,103,63,67,131,175,234,65,0,0,122,65,33,80,67,67,223,224,232,65,0,0,122,65,16,56,71,67,230,174,222,65,0,0,122,65,0,32,75,67,140,202,211,65,0,0,122,65,240,7,79,67,148,118,209,65,0,0,122,65,33,240,82,67,147,24,219,65,0,0,122,65,16,216,86,67,136,244,219,65,0,0,122,65,0,192,90,67,22,234,211,65,0,0,122,65,240,167,94,67,17,54,198,65,0,0,122,65,33,144,98,67,79,192,183,65,0,0,122,65,16,120,102,67,189,99,163,65,0,0,122,65,0,96,106,67,111,112,150,65,0,0,122,65,240,71,110,67,58,163,139,65,0,0,122,65,33,48,114,67,215,52,130,65,0,0,122,65,16,24,118,67,216,129,99,65,0,0,122,65,0,0,122,67,253,246,60,65,0,0,122,65,0,0,122,64,66,126,76,66,204,127,59,65,0,0,250,64,52,64,79,66,204,127,59,65,52,128,59,65,110,99,80,66,204,127,59,65,0,0,122,65,169,83,79,66,204,127,59,65,26,64,156,65,54,124,80,66,204,127,59,65,0,128,187,65,213,39,79,66,204,127,59,65,26,192,218,65,117,211,80,66,204,127,59,65,0,0,250,65,131,192,81,66,204,127,59,65,13,160,12,66,141,104,82,66,204,127,59,65,0,64,28,66,70,37,85,66,204,127,59,65,13,224,43,66,132,141,83,66,204,127,59,65,0,128,59,66,82,103,82,66,204,127,59,65,13,32,75,66,118,96,83,66,204,127,59,65,0,192,90,66,212,154,82,66,204,127,59,65,13,96,106,66,12,147,78,66,204,127,59,65,0,0,122,66,90,181,73,66,204,127,59,65,7,208,132,66,60,78,69,66,204,127,59,65,0,160,140,66,218,155,66,66,204,127,59,65,7,112,148,66,115,87,70,66,204,127,59,65,0,64,156,66,149,101,73,66,204,127,59,65,7,16,164,66,215,35,68,66,204,127,59,65,0,224,171,66,240,150,62,66,204,127,59,65,7,176,179,66,85,48,56,66,204,127,59,65,0,128,187,66,79,239,50,66,204,127,59,65,7,80,195,66,240,86,49,66,204,127,59,65,66,32,203,66,102,230,45,66,204,127,59,65,33,240,210,66,206,200,43,66,204,127,59,65,0,192,218,66,168,23,39,66,204,127,59,65,223,143,226,66,53,222,34,66,204,127,59,65,66,96,234,66,147,152,29,66,204,127,59,65,33,48,242,66,227,135,24,66,204,127,59,65,0,0,250,66,125,80,17,66,204,127,59,65,240,231,0,67,59,1,17,66,204,127,59,65,33,208,4,67,126,204,12,66,204,127,59,65,16,184,8,67,45,195,7,66,204,127,59,65,0,160,12,67,93,62,5,66,204,127,59,65,240,135,16,67,222,66,7,66,204,127,59,65,33,112,20,67,173,186,6,66,204,127,59,65,16,88,24,67,175,212,10,66,204,127,59,65,0,64,28,67,239,201,13,66,204,127,59,65,240,39,32,67,102,136,14,66,204,127,59,65,33,16,36,67,221,117,9,66,204,127,59,65,16,248,39,67,77,243,3,66,204,127,59,65,0,224,43,67,169,36,1,66,204,127,59,65,240,199,47,67,179,140,0,66,204,127,59,65,33,176,51,67,246,168,247,65,204,127,59,65,16,152,55,67,136,227,232,65,204,127,59,65,0,128,59,67,39,49,225,65,204,127,59,65,240,103,63,67,237,141,219,65,204,127,59,65,33,80,67,67,89,6,219,65,204,127,59,65,16,56,71,67,200,135,211,65,204,127,59,65,0,32,75,67,134,201,199,65,204,127,59,65,240,7,79,67,103,196,200,65,204,127,59,65,33,240,82,67,68,250,209,65,204,127,59,65,16,216,86,67,85,65,209,65,204,127,59,65,0,192,90,67,69,216,198,65,204,127,59,65,240,167,94,67,160,9,183,65,204,127,59,65,33,144,98,67,74,123,174,65,204,127,59,65,16,120,102,67,29,90,154,65,204,127,59,65,0,96,106,67,153,59,140,65,204,127,59,65,240,71,110,67,158,239,129,65,204,127,59,65,33,48,114,67,124,97,116,65,204,127,59,65,16,24,118,67,170,241,93,65,204,127,59,65,0,0,122,67,106,222,68,65,204,127,59,65,0,0,122,64,196,2,81,66,0,0,250,64,0,0,250,64,134,26,83,66,0,0,250,64,52,128,59,65,109,167,80,66,0,0,250,64,0,0,122,65,112,206,80,66,0,0,250,64,26,64,156,65,204,238,79,66,0,0,250,64,0,128,187,65,27,222,77,66,0,0,250,64,26,192,218,65,97,3,76,66,0,0,250,64,0,0,250,65,127,217,74,66,0,0,250,64,13,160,12,66,32,146,78,66,0,0,250,64,0,64,28,66,210,0,82,66,0,0,250,64,13,224,43,66,52,34,85,66,0,0,250,64,0,128,59,66,183,34,82,66,0,0,250,64,13,32,75,66,12,130,82,66,0,0,250,64,0,192,90,66,87,155,83,66,0,0,250,64,13,96,106,66,71,114,83,66,0,0,250,64,0,0,122,66,194,6,79,66,0,0,250,64,7,208,132,66,165,78,77,66,0,0,250,64,0,160,140,66,118,113,74,66,0,0,250,64,7,112,148,66,247,181,75,66,0,0,250,64,0,64,156,66,211,205,78,66,0,0,250,64,7,16,164,66,56,56,74,66,0,0,250,64,0,224,171,66,238,188,65,66,0,0,250,64,7,176,179,66,210,111,61,66,0,0,250,64,0,128,187,66,235,226,54,66,0,0,250,64,7,80,195,66,0,0,55,66,0,0,250,64,66,32,203,66,25,179,49,66,0,0,250,64,33,240,210,66,118,224,50,66,0,0,250,64,0,192,218,66,167,249,49,66,0,0,250,64,223,143,226,66,12,2,45,66,0,0,250,64,66,96,234,66,119,126,37,66,0,0,250,64,33,48,242,66,50,119,31,66,0,0,250,64,0,0,250,66,154,25,20,66,0,0,250,64,240,231,0,67,160,9,18,66,0,0,250,64,33,208,4,67,238,107,13,66,0,0,250,64,16,184,8,67,111,193,7,66,0,0,250,64,0,160,12,67,4,22,3,66,0,0,250,64,240,135,16,67,104,81,3,66,0,0,250,64,33,112,20,67,34,206,1,66,0,0,250,64,16,88,24,67,214,214,5,66,0,0,250,64,0,64,28,67,164,95,9,66,0,0,250,64,240,39,32,67,5,116,11,66,0,0,250,64,33,16,36,67,52,209,6,66,0,0,250,64,16,248,39,67,105,64,2,66,0,0,250,64,0,224,43,67,246,23,252,65,0,0,250,64,240,199,47,67,81,218,247,65,0,0,250,64,33,176,51,67,150,161,241,65,0,0,250,64,16,152,55,67,15,11,228,65,0,0,250,64,0,128,59,67,177,208,214,65,0,0,250,64,240,103,63,67,198,220,204,65,0,0,250,64,33,80,67,67,140,185,208,65,0,0,250,64,16,56,71,67,6,129,202,65,0,0,250,64,0,32,75,67,222,2,192,65,0,0,250,64,240,7,79,67,43,135,192,65,0,0,250,64,33,240,82,67,176,242,195,65,0,0,250,64,16,216,86,67,219,10,195,65,0,0,250,64,0,192,90,67,92,15,184,65,0,0,250,64,240,167,94,67,131,209,168,65,0,0,250,64,33,144,98,67,155,85,152,65,0,0,250,64,16,120,102,67,159,171,143,65,0,0,250,64,0,96,106,67,54,43,132,65,0,0,250,64,240,71,110,67,28,235,119,65,0,0,250,64,33,48,114,67,52,128,97,65,0,0,250,64,16,24,118,67,142,6,85,65,0,0,250,64,0,0,122,67,29,90,79,65,0,0,250,64,0,0,122,64,114,121,82,66,0,0,122,64,0,0,250,64,142,117,79,66,0,0,122,64,52,128,59,65,148,199,76,66,0,0,122,64,0,0,122,65,63,215,72,66,0,0,122,64,26,64,156,65,87,108,74,66,0,0,122,64,0,128,187,65,159,205,74,66,0,0,122,64,26,192,218,65,126,221,76,66,0,0,122,64,0,0,250,65,136,180,77,66,0,0,122,64,13,160,12,66,134,201,80,66,0,0,122,64,0,64,28,66,199,233,87,66,0,0,122,64,13,224,43,66,32,146,87,66,0,0,122,64,0,128,59,66,112,78,85,66,0,0,122,64,13,32,75,66,67,92,86,66,0,0,122,64,0,192,90,66,136,69,94,66,0,0,122,64,13,96,106,66,68,186,92,66,0,0,122,64,0,0,122,66,163,193,86,66,0,0,122,64,7,208,132,66,102,55,84,66,0,0,122,64,0,160,140,66,127,170,78,66,0,0,122,64,7,112,148,66,160,201,77,66,0,0,122,64,0,64,156,66,30,214,79,66,0,0,122,64,7,16,164,66,206,42,76,66,0,0,122,64,0,224,171,66,85,1,71,66,0,0,122,64,7,176,179,66,125,238,66,66,0,0,122,64,0,128,187,66,54,124,59,66,0,0,122,64,7,80,195,66,223,143,57,66,0,0,122,64,66,32,203,66,71,178,53,66,0,0,122,64,33,240,210,66,114,185,54,66,0,0,122,64,0,192,218,66,146,75,53,66,0,0,122,64,223,143,226,66,222,113,46,66,0,0,122,64,66,96,234,66,51,132,40,66,0,0,122,64,33,48,242,66,24,230,33,66,0,0,122,64,0,0,250,66,36,87,29,66,0,0,122,64,240,231,0,67,251,75,24,66,0,0,122,64,33,208,4,67,107,26,19,66,0,0,122,64,16,184,8,67,105,175,11,66,0,0,122,64,0,160,12,67,11,117,1,66,0,0,122,64,240,135,16,67,193,185,253,65,0,0,122,64,33,112,20,67,211,205,244,65,0,0,122,64,16,88,24,67,195,211,252,65,0,0,122,64,0,64,28,67,232,153,2,66,0,0,122,64,240,39,32,67,157,64,5,66,0,0,122,64,33,16,36,67,74,76,2,66,0,0,122,64,16,248,39,67,123,3,252,65,0,0,122,64,0,224,43,67,62,121,245,65,0,0,122,64,240,199,47,67,185,252,238,65,0,0,122,64,33,176,51,67,199,58,229,65,0,0,122,64,16,152,55,67,141,168,217,65,0,0,122,64,0,128,59,67,93,126,203,65,0,0,122,64,240,103,63,67,134,73,193,65,0,0,122,64,33,80,67,67,122,199,191,65,0,0,122,64,16,56,71,67,95,41,190,65,0,0,122,64,0,32,75,67,140,57,179,65,0,0,122,64,240,7,79,67,5,69,177,65,0,0,122,64,33,240,82,67,87,236,172,65,0,0,122,64,16,216,86,67,197,143,174,65,0,0,122,64,0,192,90,67,209,34,168,65,0,0,122,64,240,167,94,67,34,253,154,65,0,0,122,64,33,144,98,67,156,179,145,65,0,0,122,64,16,120,102,67,118,207,137,65,0,0,122,64,0,96,106,67,180,89,130,65,0,0,122,64,240,71,110,67,147,58,103,65,0,0,122,64,33,48,114,67,159,60,90,65,0,0,122,64,16,24,118,67,174,216,83,65,0,0,122,64,0,0,122,67,251,92,75,65,0,0,122,64,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,128,0,0,0,129,0,2,0,129,0,0,0,129,0,2,0,130,0,4,0,130,0,2,0,130,0,4,0,131,0,6,0,131,0,4,0,131,0,6,0,132,0,8,0,132,0,6,0,132,0,8,0,133,0,10,0,133,0,8,0,133,0,10,0,134,0,12,0,134,0,10,0,134,0,12,0,135,0,14,0,135,0,12,0,135,0,14,0,136,0,16,0,136,0,14,0,136,0,16,0,137,0,18,0,137,0,16,0,137,0,18,0,138,0,20,0,138,0,18,0,138,0,20,0,139,0,22,0,139,0,20,0,139,0,22,0,140,0,24,0,140,0,22,0,140,0,24,0,141,0,26,0,141,0,24,0,141,0,26,0,142,0,28,0,142,0,26,0,142,0,28,0,143,0,30,0,143,0,28,0,143,0,30,0,144,0,32,0,144,0,30,0,144,0,32,0,145,0,34,0,145,0,32,0,145,0,34,0,146,0,36,0,146,0,34,0,146,0,36,0,147,0,38,0,147,0,36,0,147,0,38,0,148,0,40,0,148,0,38,0,148,0,40,0,149,0,42,0,149,0,40,0,149,0,42,0,150,0,44,0,150,0,42,0,150,0,44,0,151,0,46,0,151,0,44,0,151,0,46,0,152,0,48,0,152,0,46,0,152,0,48,0,153,0,50,0,153,0,48,0,153,0,50,0,154,0,52,0,154,0,50,0,154,0,52,0,155,0,54,0,155,0,52,0,155,0,54,0,156,0,56,0,156,0,54,0,156,0,56,0,157,0,58,0,157,0,56,0,157,0,58,0,158,0,60,0,158,0,58,0,158,0,60,0,159,0,62,0,159,0,60,0,159,0,62,0,160,0,64,0,160,0,62,0,160,0,64,0,161,0,66,0,161,0,64,0,161,0,66,0,162,0,68,0,162,0,66,0,162,0,68,0,163,0,70,0,163,0,68,0,163,0,70,0,164,0,72,0,164,0,70,0,164,0,72,0,165,0,74,0,165,0,72,0,165,0,74,0,166,0,76,0,166,0,74,0,166,0,76,0,167,0,78,0,167,0,76,0,167,0,78,0,168,0,80,0,168,0,78,0,168,0,80,0,169,0,82,0,169,0,80,0,169,0,82,0,170,0,84,0,170,0,82,0,170,0,84,0,171,0,86,0,171,0,84,0,171,0,86,0,172,0,88,0,172,0,86,0,172,0,88,0,173,0,90,0,173,0,88,0,173,0,90,0,174,0,92,0,174,0,90,0,174,0,92,0,175,0,94,0,175,0,92,0,175,0,94,0,176,0,96,0,176,0,94,0,176,0,96,0,177,0,98,0,177,0,96,0,177,0,98,0,178,0,100,0,178,0,98,0,178,0,100,0,179,0,102,0,179,0,100,0,179,0,102,0,180,0,104,0,180,0,102,0,180,0,104,0,181,0,106,0,181,0,104,0,181,0,106,0,182,0,108,0,182,0,106,0,182,0,108,0,183,0,110,0,183,0,108,0,183,0,110,0,184,0,112,0,184,0,110,0,184,0,112,0,185,0,114,0,185,0,112,0,185,0,114,0,186,0,116,0,186,0,114,0,186,0,116,0,187,0,118,0,187,0,116,0,187,0,118,0,188,0,120,0,188,0,118,0,188,0,120,0,189,0,122,0,189,0,120,0,189,0,122,0,190,0,124,0,190,0,122,0,190,0,124,0,191,0,126,0,191,0,124,0,192,0,128,0,193,0,129,0,193,0,128,0,193,0,129,0,194,0,130,0,194,0,129,0,194,0,130,0,195,0,131,0,195,0,130,0,195,0,131,0,196,0,132,0,196,0,131,0,196,0,132,0,197,0,133,0,197,0,132,0,197,0,133,0,198,0,134,0,198,0,133,0,198,0,134,0,199,0,135,0,199,0,134,0,199,0,135,0,200,0,136,0,200,0,135,0,200,0,136,0,201,0,137,0,201,0,136,0,201,0,137,0,202,0,138,0,202,0,137,0,202,0,138,0,203,0,139,0,203,0,138,0,203,0,139,0,204,0,140,0,204,0,139,0,204,0,140,0,205,0,141,0,205,0,140,0,205,0,141,0,206,0,142,0,206,0,141,0,206,0,142,0,207,0,143,0,207,0,142,0,207,0,143,0,208,0,144,0,208,0,143,0,208,0,144,0,209,0,145,0,209,0,144,0,209,0,145,0,210,0,146,0,210,0,145,0,210,0,146,0,211,0,147,0,211,0,146,0,211,0,147,0,212,0,148,0,212,0,147,0,212,0,148,0,213,0,149,0,213,0,148,0,213,0,149,0,214,0,150,0,214,0,149,0,214,0,150,0,215,0,151,0,215,0,150,0,215,0,151,0,216,0,152,0,216,0,151,0,216,0,152,0,217,0,153,0,217,0,152,0,217,0,153,0,218,0,154,0,218,0,153,0,218,0,154,0,219,0,155,0,219,0,154,0,219,0,155,0,220,0,156,0,220,0,155,0,220,0,156,0,221,0,157,0,221,0,156,0,221,0,157,0,222,0,158,0,222,0,157,0,222,0,158,0,223,0,159,0,223,0,158,0,223,0,159,0,224,0,160,0,224,0,159,0,224,0,160,0,225,0,161,0,225,0,160,0,225,0,161,0,226,0,162,0,226,0,161,0,226,0,162,0,227,0,163,0,227,0,162,0,227,0,163,0,228,0,164,0,228,0,163,0,228,0,164,0,229,0,165,0,229,0,164,0,229,0,165,0,230,0,166,0,230,0,165,0,230,0,166,0,231,0,167,0,231,0,166,0,231,0,167,0,232,0,168,0,232,0,167,0,232,0,168,0,233,0,169,0,233,0,168,0,233,0,169,0,234,0,170,0,234,0,169,0,234,0,170,0,235,0,171,0,235,0,170,0,235,0,171,0,236,0,172,0,236,0,171,0,236,0,172,0,237,0,173,0,237,0,172,0,237,0,173,0,238,0,174,0,238,0,173,0,238,0,174,0,239,0,175,0,239,0,174,0,239,0,175,0,240,0,176,0,240,0,175,0,240,0,176,0,241,0,177,0,241,0,176,0,241,0,177,0,242,0,178,0,242,0,177,0,242,0,178,0,243,0,179,0,243,0,178,0,243,0,179,0,244,0,180,0,244,0,179,0,244,0,180,0,245,0,181,0,245,0,180,0,245,0,181,0,246,0,182,0,246,0,181,0,246,0,182,0,247,0,183,0,247,0,182,0,247,0,183,0,248,0,184,0,248,0,183,0,248,0,184,0,249,0,185,0,249,0,184,0,249,0,185,0,250,0,186,0,250,0,185,0,250,0,186,0,251,0,187,0,251,0,186,0,251,0,187,0,252,0,188,0,252,0,187,0,252,0,188,0,253,0,189,0,253,0,188,0,253,0,189,0,254,0,190,0,254,0,189,0,254,0,190,0,255,0,191,0,255,0,190,0,0,1,192,0,1,1,193,0,1,1,192,0,1,1,193,0,2,1,194,0,2,1,193,0,2,1,194,0,3,1,195,0,3,1,194,0,3,1,195,0,4,1,196,0,4,1,195,0,4,1,196,0,5,1,197,0,5,1,196,0,5,1,197,0,6,1,198,0,6,1,197,0,6,1,198,0,7,1,199,0,7,1,198,0,7,1,199,0,8,1,200,0,8,1,199,0,8,1,200,0,9,1,201,0,9,1,200,0,9,1,201,0,10,1,202,0,10,1,201,0,10,1,202,0,11,1,203,0,11,1,202,0,11,1,203,0,12,1,204,0,12,1,203,0,12,1,204,0,13,1,205,0,13,1,204,0,13,1,205,0,14,1,206,0,14,1,205,0,14,1,206,0,15,1,207,0,15,1,206,0,15,1,207,0,16,1,208,0,16,1,207,0,16,1,208,0,17,1,209,0,17,1,208,0,17,1,209,0,18,1,210,0,18,1,209,0,18,1,210,0,19,1,211,0,19,1,210,0,19,1,211,0,20,1,212,0,20,1,211,0,20,1,212,0,21,1,213,0,21,1,212,0,21,1,213,0,22,1,214,0,22,1,213,0,22,1,214,0,23,1,215,0,23,1,214,0,23,1,215,0,24,1,216,0,24,1,215,0,24,1,216,0,25,1,217,0,25,1,216,0,25,1,217,0,26,1,218,0,26,1,217,0,26,1,218,0,27,1,219,0,27,1,218,0,27,1,219,0,28,1,220,0,28,1,219,0,28,1,220,0,29,1,221,0,29,1,220,0,29,1,221,0,30,1,222,0,30,1,221,0,30,1,222,0,31,1,223,0,31,1,222,0,31,1,223,0,32,1,224,0,32,1,223,0,32,1,224,0,33,1,225,0,33,1,224,0,33,1,225,0,34,1,226,0,34,1,225,0,34,1,226,0,35,1,227,0,35,1,226,0,35,1,227,0,36,1,228,0,36,1,227,0,36,1,228,0,37,1,229,0,37,1,228,0,37,1,229,0,38,1,230,0,38,1,229,0,38,1,230,0,39,1,231,0,39,1,230,0,39,1,231,0,40,1,232,0,40,1,231,0,40,1,232,0,41,1,233,0,41,1,232,0,41,1,233,0,42,1,234,0,42,1,233,0,42,1,234,0,43,1,235,0,43,1,234,0,43,1,235,0,44,1,236,0,44,1,235,0,44,1,236,0,45,1,237,0,45,1,236,0,45,1,237,0,46,1,238,0,46,1,237,0,46,1,238,0,47,1,239,0,47,1,238,0,47,1,239,0,48,1,240,0,48,1,239,0,48,1,240,0,49,1,241,0,49,1,240,0,49,1,241,0,50,1,242,0,50,1,241,0,50,1,242,0,51,1,243,0,51,1,242,0,51,1,243,0,52,1,244,0,52,1,243,0,52,1,244,0,53,1,245,0,53,1,244,0,53,1,245,0,54,1,246,0,54,1,245,0,54,1,246,0,55,1,247,0,55,1,246,0,55,1,247,0,56,1,248,0,56,1,247,0,56,1,248,0,57,1,249,0,57,1,248,0,57,1,249,0,58,1,250,0,58,1,249,0,58,1,250,0,59,1,251,0,59,1,250,0,59,1,251,0,60,1,252,0,60,1,251,0,60,1,252,0,61,1,253,0,61,1,252,0,61,1,253,0,62,1,254,0,62,1,253,0,62,1,254,0,63,1,255,0,63,1,254,0,64,1,0,1,65,1,1,1,65,1,0,1,65,1,1,1,66,1,2,1,66,1,1,1,66,1,2,1,67,1,3,1,67,1,2,1,67,1,3,1,68,1,4,1,68,1,3,1,68,1,4,1,69,1,5,1,69,1,4,1,69,1,5,1,70,1,6,1,70,1,5,1,70,1,6,1,71,1,7,1,71,1,6,1,71,1,7,1,72,1,8,1,72,1,7,1,72,1,8,1,73,1,9,1,73,1,8,1,73,1,9,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112640);
/* memory initializer */ allocate([74,1,10,1,74,1,9,1,74,1,10,1,75,1,11,1,75,1,10,1,75,1,11,1,76,1,12,1,76,1,11,1,76,1,12,1,77,1,13,1,77,1,12,1,77,1,13,1,78,1,14,1,78,1,13,1,78,1,14,1,79,1,15,1,79,1,14,1,79,1,15,1,80,1,16,1,80,1,15,1,80,1,16,1,81,1,17,1,81,1,16,1,81,1,17,1,82,1,18,1,82,1,17,1,82,1,18,1,83,1,19,1,83,1,18,1,83,1,19,1,84,1,20,1,84,1,19,1,84,1,20,1,85,1,21,1,85,1,20,1,85,1,21,1,86,1,22,1,86,1,21,1,86,1,22,1,87,1,23,1,87,1,22,1,87,1,23,1,88,1,24,1,88,1,23,1,88,1,24,1,89,1,25,1,89,1,24,1,89,1,25,1,90,1,26,1,90,1,25,1,90,1,26,1,91,1,27,1,91,1,26,1,91,1,27,1,92,1,28,1,92,1,27,1,92,1,28,1,93,1,29,1,93,1,28,1,93,1,29,1,94,1,30,1,94,1,29,1,94,1,30,1,95,1,31,1,95,1,30,1,95,1,31,1,96,1,32,1,96,1,31,1,96,1,32,1,97,1,33,1,97,1,32,1,97,1,33,1,98,1,34,1,98,1,33,1,98,1,34,1,99,1,35,1,99,1,34,1,99,1,35,1,100,1,36,1,100,1,35,1,100,1,36,1,101,1,37,1,101,1,36,1,101,1,37,1,102,1,38,1,102,1,37,1,102,1,38,1,103,1,39,1,103,1,38,1,103,1,39,1,104,1,40,1,104,1,39,1,104,1,40,1,105,1,41,1,105,1,40,1,105,1,41,1,106,1,42,1,106,1,41,1,106,1,42,1,107,1,43,1,107,1,42,1,107,1,43,1,108,1,44,1,108,1,43,1,108,1,44,1,109,1,45,1,109,1,44,1,109,1,45,1,110,1,46,1,110,1,45,1,110,1,46,1,111,1,47,1,111,1,46,1,111,1,47,1,112,1,48,1,112,1,47,1,112,1,48,1,113,1,49,1,113,1,48,1,113,1,49,1,114,1,50,1,114,1,49,1,114,1,50,1,115,1,51,1,115,1,50,1,115,1,51,1,116,1,52,1,116,1,51,1,116,1,52,1,117,1,53,1,117,1,52,1,117,1,53,1,118,1,54,1,118,1,53,1,118,1,54,1,119,1,55,1,119,1,54,1,119,1,55,1,120,1,56,1,120,1,55,1,120,1,56,1,121,1,57,1,121,1,56,1,121,1,57,1,122,1,58,1,122,1,57,1,122,1,58,1,123,1,59,1,123,1,58,1,123,1,59,1,124,1,60,1,124,1,59,1,124,1,60,1,125,1,61,1,125,1,60,1,125,1,61,1,126,1,62,1,126,1,61,1,126,1,62,1,127,1,63,1,127,1,62,1,128,1,64,1,129,1,65,1,129,1,64,1,129,1,65,1,130,1,66,1,130,1,65,1,130,1,66,1,131,1,67,1,131,1,66,1,131,1,67,1,132,1,68,1,132,1,67,1,132,1,68,1,133,1,69,1,133,1,68,1,133,1,69,1,134,1,70,1,134,1,69,1,134,1,70,1,135,1,71,1,135,1,70,1,135,1,71,1,136,1,72,1,136,1,71,1,136,1,72,1,137,1,73,1,137,1,72,1,137,1,73,1,138,1,74,1,138,1,73,1,138,1,74,1,139,1,75,1,139,1,74,1,139,1,75,1,140,1,76,1,140,1,75,1,140,1,76,1,141,1,77,1,141,1,76,1,141,1,77,1,142,1,78,1,142,1,77,1,142,1,78,1,143,1,79,1,143,1,78,1,143,1,79,1,144,1,80,1,144,1,79,1,144,1,80,1,145,1,81,1,145,1,80,1,145,1,81,1,146,1,82,1,146,1,81,1,146,1,82,1,147,1,83,1,147,1,82,1,147,1,83,1,148,1,84,1,148,1,83,1,148,1,84,1,149,1,85,1,149,1,84,1,149,1,85,1,150,1,86,1,150,1,85,1,150,1,86,1,151,1,87,1,151,1,86,1,151,1,87,1,152,1,88,1,152,1,87,1,152,1,88,1,153,1,89,1,153,1,88,1,153,1,89,1,154,1,90,1,154,1,89,1,154,1,90,1,155,1,91,1,155,1,90,1,155,1,91,1,156,1,92,1,156,1,91,1,156,1,92,1,157,1,93,1,157,1,92,1,157,1,93,1,158,1,94,1,158,1,93,1,158,1,94,1,159,1,95,1,159,1,94,1,159,1,95,1,160,1,96,1,160,1,95,1,160,1,96,1,161,1,97,1,161,1,96,1,161,1,97,1,162,1,98,1,162,1,97,1,162,1,98,1,163,1,99,1,163,1,98,1,163,1,99,1,164,1,100,1,164,1,99,1,164,1,100,1,165,1,101,1,165,1,100,1,165,1,101,1,166,1,102,1,166,1,101,1,166,1,102,1,167,1,103,1,167,1,102,1,167,1,103,1,168,1,104,1,168,1,103,1,168,1,104,1,169,1,105,1,169,1,104,1,169,1,105,1,170,1,106,1,170,1,105,1,170,1,106,1,171,1,107,1,171,1,106,1,171,1,107,1,172,1,108,1,172,1,107,1,172,1,108,1,173,1,109,1,173,1,108,1,173,1,109,1,174,1,110,1,174,1,109,1,174,1,110,1,175,1,111,1,175,1,110,1,175,1,111,1,176,1,112,1,176,1,111,1,176,1,112,1,177,1,113,1,177,1,112,1,177,1,113,1,178,1,114,1,178,1,113,1,178,1,114,1,179,1,115,1,179,1,114,1,179,1,115,1,180,1,116,1,180,1,115,1,180,1,116,1,181,1,117,1,181,1,116,1,181,1,117,1,182,1,118,1,182,1,117,1,182,1,118,1,183,1,119,1,183,1,118,1,183,1,119,1,184,1,120,1,184,1,119,1,184,1,120,1,185,1,121,1,185,1,120,1,185,1,121,1,186,1,122,1,186,1,121,1,186,1,122,1,187,1,123,1,187,1,122,1,187,1,123,1,188,1,124,1,188,1,123,1,188,1,124,1,189,1,125,1,189,1,124,1,189,1,125,1,190,1,126,1,190,1,125,1,190,1,126,1,191,1,127,1,191,1,126,1,192,1,128,1,193,1,129,1,193,1,128,1,193,1,129,1,194,1,130,1,194,1,129,1,194,1,130,1,195,1,131,1,195,1,130,1,195,1,131,1,196,1,132,1,196,1,131,1,196,1,132,1,197,1,133,1,197,1,132,1,197,1,133,1,198,1,134,1,198,1,133,1,198,1,134,1,199,1,135,1,199,1,134,1,199,1,135,1,200,1,136,1,200,1,135,1,200,1,136,1,201,1,137,1,201,1,136,1,201,1,137,1,202,1,138,1,202,1,137,1,202,1,138,1,203,1,139,1,203,1,138,1,203,1,139,1,204,1,140,1,204,1,139,1,204,1,140,1,205,1,141,1,205,1,140,1,205,1,141,1,206,1,142,1,206,1,141,1,206,1,142,1,207,1,143,1,207,1,142,1,207,1,143,1,208,1,144,1,208,1,143,1,208,1,144,1,209,1,145,1,209,1,144,1,209,1,145,1,210,1,146,1,210,1,145,1,210,1,146,1,211,1,147,1,211,1,146,1,211,1,147,1,212,1,148,1,212,1,147,1,212,1,148,1,213,1,149,1,213,1,148,1,213,1,149,1,214,1,150,1,214,1,149,1,214,1,150,1,215,1,151,1,215,1,150,1,215,1,151,1,216,1,152,1,216,1,151,1,216,1,152,1,217,1,153,1,217,1,152,1,217,1,153,1,218,1,154,1,218,1,153,1,218,1,154,1,219,1,155,1,219,1,154,1,219,1,155,1,220,1,156,1,220,1,155,1,220,1,156,1,221,1,157,1,221,1,156,1,221,1,157,1,222,1,158,1,222,1,157,1,222,1,158,1,223,1,159,1,223,1,158,1,223,1,159,1,224,1,160,1,224,1,159,1,224,1,160,1,225,1,161,1,225,1,160,1,225,1,161,1,226,1,162,1,226,1,161,1,226,1,162,1,227,1,163,1,227,1,162,1,227,1,163,1,228,1,164,1,228,1,163,1,228,1,164,1,229,1,165,1,229,1,164,1,229,1,165,1,230,1,166,1,230,1,165,1,230,1,166,1,231,1,167,1,231,1,166,1,231,1,167,1,232,1,168,1,232,1,167,1,232,1,168,1,233,1,169,1,233,1,168,1,233,1,169,1,234,1,170,1,234,1,169,1,234,1,170,1,235,1,171,1,235,1,170,1,235,1,171,1,236,1,172,1,236,1,171,1,236,1,172,1,237,1,173,1,237,1,172,1,237,1,173,1,238,1,174,1,238,1,173,1,238,1,174,1,239,1,175,1,239,1,174,1,239,1,175,1,240,1,176,1,240,1,175,1,240,1,176,1,241,1,177,1,241,1,176,1,241,1,177,1,242,1,178,1,242,1,177,1,242,1,178,1,243,1,179,1,243,1,178,1,243,1,179,1,244,1,180,1,244,1,179,1,244,1,180,1,245,1,181,1,245,1,180,1,245,1,181,1,246,1,182,1,246,1,181,1,246,1,182,1,247,1,183,1,247,1,182,1,247,1,183,1,248,1,184,1,248,1,183,1,248,1,184,1,249,1,185,1,249,1,184,1,249,1,185,1,250,1,186,1,250,1,185,1,250,1,186,1,251,1,187,1,251,1,186,1,251,1,187,1,252,1,188,1,252,1,187,1,252,1,188,1,253,1,189,1,253,1,188,1,253,1,189,1,254,1,190,1,254,1,189,1,254,1,190,1,255,1,191,1,255,1,190,1,0,2,192,1,1,2,193,1,1,2,192,1,1,2,193,1,2,2,194,1,2,2,193,1,2,2,194,1,3,2,195,1,3,2,194,1,3,2,195,1,4,2,196,1,4,2,195,1,4,2,196,1,5,2,197,1,5,2,196,1,5,2,197,1,6,2,198,1,6,2,197,1,6,2,198,1,7,2,199,1,7,2,198,1,7,2,199,1,8,2,200,1,8,2,199,1,8,2,200,1,9,2,201,1,9,2,200,1,9,2,201,1,10,2,202,1,10,2,201,1,10,2,202,1,11,2,203,1,11,2,202,1,11,2,203,1,12,2,204,1,12,2,203,1,12,2,204,1,13,2,205,1,13,2,204,1,13,2,205,1,14,2,206,1,14,2,205,1,14,2,206,1,15,2,207,1,15,2,206,1,15,2,207,1,16,2,208,1,16,2,207,1,16,2,208,1,17,2,209,1,17,2,208,1,17,2,209,1,18,2,210,1,18,2,209,1,18,2,210,1,19,2,211,1,19,2,210,1,19,2,211,1,20,2,212,1,20,2,211,1,20,2,212,1,21,2,213,1,21,2,212,1,21,2,213,1,22,2,214,1,22,2,213,1,22,2,214,1,23,2,215,1,23,2,214,1,23,2,215,1,24,2,216,1,24,2,215,1,24,2,216,1,25,2,217,1,25,2,216,1,25,2,217,1,26,2,218,1,26,2,217,1,26,2,218,1,27,2,219,1,27,2,218,1,27,2,219,1,28,2,220,1,28,2,219,1,28,2,220,1,29,2,221,1,29,2,220,1,29,2,221,1,30,2,222,1,30,2,221,1,30,2,222,1,31,2,223,1,31,2,222,1,31,2,223,1,32,2,224,1,32,2,223,1,32,2,224,1,33,2,225,1,33,2,224,1,33,2,225,1,34,2,226,1,34,2,225,1,34,2,226,1,35,2,227,1,35,2,226,1,35,2,227,1,36,2,228,1,36,2,227,1,36,2,228,1,37,2,229,1,37,2,228,1,37,2,229,1,38,2,230,1,38,2,229,1,38,2,230,1,39,2,231,1,39,2,230,1,39,2,231,1,40,2,232,1,40,2,231,1,40,2,232,1,41,2,233,1,41,2,232,1,41,2,233,1,42,2,234,1,42,2,233,1,42,2,234,1,43,2,235,1,43,2,234,1,43,2,235,1,44,2,236,1,44,2,235,1,44,2,236,1,45,2,237,1,45,2,236,1,45,2,237,1,46,2,238,1,46,2,237,1,46,2,238,1,47,2,239,1,47,2,238,1,47,2,239,1,48,2,240,1,48,2,239,1,48,2,240,1,49,2,241,1,49,2,240,1,49,2,241,1,50,2,242,1,50,2,241,1,50,2,242,1,51,2,243,1,51,2,242,1,51,2,243,1,52,2,244,1,52,2,243,1,52,2,244,1,53,2,245,1,53,2,244,1,53,2,245,1,54,2,246,1,54,2,245,1,54,2,246,1,55,2,247,1,55,2,246,1,55,2,247,1,56,2,248,1,56,2,247,1,56,2,248,1,57,2,249,1,57,2,248,1,57,2,249,1,58,2,250,1,58,2,249,1,58,2,250,1,59,2,251,1,59,2,250,1,59,2,251,1,60,2,252,1,60,2,251,1,60,2,252,1,61,2,253,1,61,2,252,1,61,2,253,1,62,2,254,1,62,2,253,1,62,2,254,1,63,2,255,1,63,2,254,1,64,2,0,2,65,2,1,2,65,2,0,2,65,2,1,2,66,2,2,2,66,2,1,2,66,2,2,2,67,2,3,2,67,2,2,2,67,2,3,2,68,2,4,2,68,2,3,2,68,2,4,2,69,2,5,2,69,2,4,2,69,2,5,2,70,2,6,2,70,2,5,2,70,2,6,2,71,2,7,2,71,2,6,2,71,2,7,2,72,2,8,2,72,2,7,2,72,2,8,2,73,2,9,2,73,2,8,2,73,2,9,2,74,2,10,2,74,2,9,2,74,2,10,2,75,2,11,2,75,2,10,2,75,2,11,2,76,2,12,2,76,2,11,2,76,2,12,2,77,2,13,2,77,2,12,2,77,2,13,2,78,2,14,2,78,2,13,2,78,2,14,2,79,2,15,2,79,2,14,2,79,2,15,2,80,2,16,2,80,2,15,2,80,2,16,2,81,2,17,2,81,2,16,2,81,2,17,2,82,2,18,2,82,2,17,2,82,2,18,2,83,2,19,2,83,2,18,2,83,2,19,2,84,2,20,2,84,2,19,2,84,2,20,2,85,2,21,2,85,2,20,2,85,2,21,2,86,2,22,2,86,2,21,2,86,2,22,2,87,2,23,2,87,2,22,2,87,2,23,2,88,2,24,2,88,2,23,2,88,2,24,2,89,2,25,2,89,2,24,2,89,2,25,2,90,2,26,2,90,2,25,2,90,2,26,2,91,2,27,2,91,2,26,2,91,2,27,2,92,2,28,2,92,2,27,2,92,2,28,2,93,2,29,2,93,2,28,2,93,2,29,2,94,2,30,2,94,2,29,2,94,2,30,2,95,2,31,2,95,2,30,2,95,2,31,2,96,2,32,2,96,2,31,2,96,2,32,2,97,2,33,2,97,2,32,2,97,2,33,2,98,2,34,2,98,2,33,2,98,2,34,2,99,2,35,2,99,2,34,2,99,2,35,2,100,2,36,2,100,2,35,2,100,2,36,2,101,2,37,2,101,2,36,2,101,2,37,2,102,2,38,2,102,2,37,2,102,2,38,2,103,2,39,2,103,2,38,2,103,2,39,2,104,2,40,2,104,2,39,2,104,2,40,2,105,2,41,2,105,2,40,2,105,2,41,2,106,2,42,2,106,2,41,2,106,2,42,2,107,2,43,2,107,2,42,2,107,2,43,2,108,2,44,2,108,2,43,2,108,2,44,2,109,2,45,2,109,2,44,2,109,2,45,2,110,2,46,2,110,2,45,2,110,2,46,2,111,2,47,2,111,2,46,2,111,2,47,2,112,2,48,2,112,2,47,2,112,2,48,2,113,2,49,2,113,2,48,2,113,2,49,2,114,2,50,2,114,2,49,2,114,2,50,2,115,2,51,2,115,2,50,2,115,2,51,2,116,2,52,2,116,2,51,2,116,2,52,2,117,2,53,2,117,2,52,2,117,2,53,2,118,2,54,2,118,2,53,2,118,2,54,2,119,2,55,2,119,2,54,2,119,2,55,2,120,2,56,2,120,2,55,2,120,2,56,2,121,2,57,2,121,2,56,2,121,2,57,2,122,2,58,2,122,2,57,2,122,2,58,2,123,2,59,2,123,2,58,2,123,2,59,2,124,2,60,2,124,2,59,2,124,2,60,2,125,2,61,2,125,2,60,2,125,2,61,2,126,2,62,2,126,2,61,2,126,2,62,2,127,2,63,2,127,2,62,2,128,2,64,2,129,2,65,2,129,2,64,2,129,2,65,2,130,2,66,2,130,2,65,2,130,2,66,2,131,2,67,2,131,2,66,2,131,2,67,2,132,2,68,2,132,2,67,2,132,2,68,2,133,2,69,2,133,2,68,2,133,2,69,2,134,2,70,2,134,2,69,2,134,2,70,2,135,2,71,2,135,2,70,2,135,2,71,2,136,2,72,2,136,2,71,2,136,2,72,2,137,2,73,2,137,2,72,2,137,2,73,2,138,2,74,2,138,2,73,2,138,2,74,2,139,2,75,2,139,2,74,2,139,2,75,2,140,2,76,2,140,2,75,2,140,2,76,2,141,2,77,2,141,2,76,2,141,2,77,2,142,2,78,2,142,2,77,2,142,2,78,2,143,2,79,2,143,2,78,2,143,2,79,2,144,2,80,2,144,2,79,2,144,2,80,2,145,2,81,2,145,2,80,2,145,2,81,2,146,2,82,2,146,2,81,2,146,2,82,2,147,2,83,2,147,2,82,2,147,2,83,2,148,2,84,2,148,2,83,2,148,2,84,2,149,2,85,2,149,2,84,2,149,2,85,2,150,2,86,2,150,2,85,2,150,2,86,2,151,2,87,2,151,2,86,2,151,2,87,2,152,2,88,2,152,2,87,2,152,2,88,2,153,2,89,2,153,2,88,2,153,2,89,2,154,2,90,2,154,2,89,2,154,2,90,2,155,2,91,2,155,2,90,2,155,2,91,2,156,2,92,2,156,2,91,2,156,2,92,2,157,2,93,2,157,2,92,2,157,2,93,2,158,2,94,2,158,2,93,2,158,2,94,2,159,2,95,2,159,2,94,2,159,2,95,2,160,2,96,2,160,2,95,2,160,2,96,2,161,2,97,2,161,2,96,2,161,2,97,2,162,2,98,2,162,2,97,2,162,2,98,2,163,2,99,2,163,2,98,2,163,2,99,2,164,2,100,2,164,2,99,2,164,2,100,2,165,2,101,2,165,2,100,2,165,2,101,2,166,2,102,2,166,2,101,2,166,2,102,2,167,2,103,2,167,2,102,2,167,2,103,2,168,2,104,2,168,2,103,2,168,2,104,2,169,2,105,2,169,2,104,2,169,2,105,2,170,2,106,2,170,2,105,2,170,2,106,2,171,2,107,2,171,2,106,2,171,2,107,2,172,2,108,2,172,2,107,2,172,2,108,2,173,2,109,2,173,2,108,2,173,2,109,2,174,2,110,2,174,2,109,2,174,2,110,2,175,2,111,2,175,2,110,2,175,2,111,2,176,2,112,2,176,2,111,2,176,2,112,2,177,2,113,2,177,2,112,2,177,2,113,2,178,2,114,2,178,2,113,2,178,2,114,2,179,2,115,2,179,2,114,2,179,2,115,2,180,2,116,2,180,2,115,2,180,2,116,2,181,2,117,2,181,2,116,2,181,2,117,2,182,2,118,2,182,2,117,2,182,2,118,2,183,2,119,2,183,2,118,2,183,2,119,2,184,2,120,2,184,2,119,2,184,2,120,2,185,2,121,2,185,2,120,2,185,2,121,2,186,2,122,2,186,2,121,2,186,2,122,2,187,2,123,2,187,2,122,2,187,2,123,2,188,2,124,2,188,2,123,2,188,2,124,2,189,2,125,2,189,2,124,2,189,2,125,2,190,2,126,2,190,2,125,2,190,2,126,2,191,2,127,2,191,2,126,2,192,2,128,2,193,2,129,2,193,2,128,2,193,2,129,2,194,2,130,2,194,2,129,2,194,2,130,2,195,2,131,2,195,2,130,2,195,2,131,2,196,2,132,2,196,2,131,2,196,2,132,2,197,2,133,2,197,2,132,2,197,2,133,2,198,2,134,2,198,2,133,2,198,2,134,2,199,2,135,2,199,2,134,2,199,2,135,2,200,2,136,2,200,2,135,2,200,2,136,2,201,2,137,2,201,2,136,2,201,2,137,2,202,2,138,2,202,2,137,2,202,2,138,2,203,2,139,2,203,2,138,2,203,2,139,2,204,2,140,2,204,2,139,2,204,2,140,2,205,2,141,2,205,2,140,2,205,2,141,2,206,2,142,2,206,2,141,2,206,2,142,2,207,2,143,2,207,2,142,2,207,2,143,2,208,2,144,2,208,2,143,2,208,2,144,2,209,2,145,2,209,2,144,2,209,2,145,2,210,2,146,2,210,2,145,2,210,2,146,2,211,2,147,2,211,2,146,2,211,2,147,2,212,2,148,2,212,2,147,2,212,2,148,2,213,2,149,2,213,2,148,2,213,2,149,2,214,2,150,2,214,2,149,2,214,2,150,2,215,2,151,2,215,2,150,2,215,2,151,2,216,2,152,2,216,2,151,2,216,2,152,2,217,2,153,2,217,2,152,2,217,2,153,2,218,2,154,2,218,2,153,2,218,2,154,2,219,2,155,2,219,2,154,2,219,2,155,2,220,2,156,2,220,2,155,2,220,2,156,2,221,2,157,2,221,2,156,2,221,2,157,2,222,2,158,2,222,2,157,2,222,2,158,2,223,2,159,2,223,2,158,2,223,2,159,2,224,2,160,2,224,2,159,2,224,2,160,2,225,2,161,2,225,2,160,2,225,2,161,2,226,2,162,2,226,2,161,2,226,2,162,2,227,2,163,2,227,2,162,2,227,2,163,2,228,2,164,2,228,2,163,2,228,2,164,2,229,2,165,2,229,2,164,2,229,2,165,2,230,2,166,2,230,2,165,2,230,2,166,2,231,2,167,2,231,2,166,2,231,2,167,2,232,2,168,2,232,2,167,2,232,2,168,2,233,2,169,2,233,2,168,2,233,2,169,2,234,2,170,2,234,2,169,2,234,2,170,2,235,2,171,2,235,2,170,2,235,2,171,2,236,2,172,2,236,2,171,2,236,2,172,2,237,2,173,2,237,2,172,2,237,2,173,2,238,2,174,2,238,2,173,2,238,2,174,2,239,2,175,2,239,2,174,2,239,2,175,2,240,2,176,2,240,2,175,2,240,2,176,2,241,2,177,2,241,2,176,2,241,2,177,2,242,2,178,2,242,2,177,2,242,2,178,2,243,2,179,2,243,2,178,2,243,2,179,2,244,2,180,2,244,2,179,2,244,2,180,2,245,2,181,2,245,2,180,2,245,2,181,2,246,2,182,2,246,2,181,2,246,2,182,2,247,2,183,2,247,2,182,2,247,2,183,2,248,2,184,2,248,2,183,2,248,2,184,2,249,2,185,2,249,2,184,2,249,2,185,2,250,2,186,2,250,2,185,2,250,2,186,2,251,2,187,2,251,2,186,2,251,2,187,2,252,2,188,2,252,2,187,2,252,2,188,2,253,2,189,2,253,2,188,2,253,2,189,2,254,2,190,2,254,2,189,2,254,2,190,2,255,2,191,2,255,2,190,2,0,3,192,2,1,3,193,2,1,3,192,2,1,3,193,2,2,3,194,2,2,3,193,2,2,3,194,2,3,3,195,2,3,3,194,2,3,3,195,2,4,3,196,2,4,3,195,2,4,3,196,2,5,3,197,2,5,3,196,2,5,3,197,2,6,3,198,2,6,3,197,2,6,3,198,2,7,3,199,2,7,3,198,2,7,3,199,2,8,3,200,2,8,3,199,2,8,3,200,2,9,3,201,2,9,3,200,2,9,3,201,2,10,3,202,2,10,3,201,2,10,3,202,2,11,3,203,2,11,3,202,2,11,3,203,2,12,3,204,2,12,3,203,2,12,3,204,2,13,3,205,2,13,3,204,2,13,3,205,2,14,3,206,2,14,3,205,2,14,3,206,2,15,3,207,2,15,3,206,2,15,3,207,2,16,3,208,2,16,3,207,2,16,3,208,2,17,3,209,2,17,3,208,2,17,3,209,2,18,3,210,2,18,3,209,2,18,3,210,2,19,3,211,2,19,3,210,2,19,3,211,2,20,3,212,2,20,3,211,2,20,3,212,2,21,3,213,2,21,3,212,2,21,3,213,2,22,3,214,2,22,3,213,2,22,3,214,2,23,3,215,2,23,3,214,2,23,3,215,2,24,3,216,2,24,3,215,2,24,3,216,2,25,3,217,2,25,3,216,2,25,3,217,2,26,3,218,2,26,3,217,2,26,3,218,2,27,3,219,2,27,3,218,2,27,3,219,2,28,3,220,2,28,3,219,2,28,3,220,2,29,3,221,2,29,3,220,2,29,3,221,2,30,3,222,2,30,3,221,2,30,3,222,2,31,3,223,2,31,3,222,2,31,3,223,2,32,3,224,2,32,3,223,2,32,3,224,2,33,3,225,2,33,3,224,2,33,3,225,2,34,3,226,2,34,3,225,2,34,3,226,2,35,3,227,2,35,3,226,2,35,3,227,2,36,3,228,2,36,3,227,2,36,3,228,2,37,3,229,2,37,3,228,2,37,3,229,2,38,3,230,2,38,3,229,2,38,3,230,2,39,3,231,2,39,3,230,2,39,3,231,2,40,3,232,2,40,3,231,2,40,3,232,2,41,3,233,2,41,3,232,2,41,3,233,2,42,3,234,2,42,3,233,2,42,3,234,2,43,3,235,2,43,3,234,2,43,3,235,2,44,3,236,2,44,3,235,2,44,3,236,2,45,3,237,2,45,3,236,2,45,3,237,2,46,3,238,2,46,3,237,2,46,3,238,2,47,3,239,2,47,3,238,2,47,3,239,2,48,3,240,2,48,3,239,2,48,3,240,2,49,3,241,2,49,3,240,2,49,3,241,2,50,3,242,2,50,3,241,2,50,3,242,2,51,3,243,2,51,3,242,2,51,3,243,2,52,3,244,2,52,3,243,2,52,3,244,2,53,3,245,2,53,3,244,2,53,3,245,2,54,3,246,2,54,3,245,2,54,3,246,2,55,3,247,2,55,3,246,2,55,3,247,2,56,3,248,2,56,3,247,2,56,3,248,2,57,3,249,2,57,3,248,2,57,3,249,2,58,3,250,2,58,3,249,2,58,3,250,2,59,3,251,2,59,3,250,2,59,3,251,2,60,3,252,2,60,3,251,2,60,3,252,2,61,3,253,2,61,3,252,2,61,3,253,2,62,3,254,2,62,3,253,2,62,3,254,2,63,3,255,2,63,3,254,2,64,3,0,3,65,3,1,3,65,3,0,3,65,3,1,3,66,3,2,3,66,3,1,3,66,3,2,3,67,3,3,3,67,3,2,3,67,3,3,3,68,3,4,3,68,3,3,3,68,3,4,3,69,3,5,3,69,3,4,3,69,3,5,3,70,3,6,3,70,3,5,3,70,3,6,3,71,3,7,3,71,3,6,3,71,3,7,3,72,3,8,3,72,3,7,3,72,3,8,3,73,3,9,3,73,3,8,3,73,3,9,3,74,3,10,3,74,3,9,3,74,3,10,3,75,3,11,3,75,3,10,3,75,3,11,3,76,3,12,3,76,3,11,3,76,3,12,3,77,3,13,3,77,3,12,3,77,3,13,3,78,3,14,3,78,3,13,3,78,3,14,3,79,3,15,3,79,3,14,3,79,3,15,3,80,3,16,3,80,3,15,3,80,3,16,3,81,3,17,3,81,3,16,3,81,3,17,3,82,3,18,3,82,3,17,3,82,3,18,3,83,3,19,3,83,3,18,3,83,3,19,3,84,3,20,3,84,3,19,3,84,3,20,3,85,3,21,3,85,3,20,3,85,3,21,3,86,3,22,3,86,3,21,3,86,3,22,3,87,3,23,3,87,3,22,3,87,3,23,3,88,3,24,3,88,3,23,3,88,3,24,3,89,3,25,3,89,3,24,3,89,3,25,3,90,3,26,3,90,3,25,3,90,3,26,3,91,3,27,3,91,3,26,3,91,3,27,3,92,3,28,3,92,3,27,3,92,3,28,3,93,3,29,3,93,3,28,3,93,3,29,3,94,3,30,3,94,3,29,3,94,3,30,3,95,3,31,3,95,3,30,3,95,3,31,3,96,3,32,3,96,3,31,3,96,3,32,3,97,3,33,3,97,3,32,3,97,3,33,3,98,3,34,3,98,3,33,3,98,3,34,3,99,3,35,3,99,3,34,3,99,3,35,3,100,3,36,3,100,3,35,3,100,3,36,3,101,3,37,3,101,3,36,3,101,3,37,3,102,3,38,3,102,3,37,3,102,3,38,3,103,3,39,3,103,3,38,3,103,3,39,3,104,3,40,3,104,3,39,3,104,3,40,3,105,3,41,3,105,3,40,3,105,3,41,3,106,3,42,3,106,3,41,3,106,3,42,3,107,3,43,3,107,3,42,3,107,3,43,3,108,3,44,3,108,3,43,3,108,3,44,3,109,3,45,3,109,3,44,3,109,3,45,3,110,3,46,3,110,3,45,3,110,3,46,3,111,3,47,3,111,3,46,3,111,3,47,3,112,3,48,3,112,3,47,3,112,3,48,3,113,3,49,3,113,3,48,3,113,3,49,3,114,3,50,3,114,3,49,3,114,3,50,3,115,3,51,3,115,3,50,3,115,3,51,3,116,3,52,3,116,3,51,3,116,3,52,3,117,3,53,3,117,3,52,3,117,3,53,3,118,3,54,3,118,3,53,3,118,3,54,3,119,3,55,3,119,3,54,3,119,3,55,3,120,3,56,3,120,3,55,3,120,3,56,3,121,3,57,3,121,3,56,3,121,3,57,3,122,3,58,3,122,3,57,3,122,3,58,3,123,3,59,3,123,3,58,3,123,3,59,3,124,3,60,3,124,3,59,3,124,3,60,3,125,3,61,3,125,3,60,3,125,3,61,3,126,3,62,3,126,3,61,3,126,3,62,3,127,3,63,3,127,3,62,3,128,3,64,3,129,3,65,3,129,3,64,3,129,3,65,3,130,3,66,3,130,3,65,3,130,3,66,3,131,3,67,3,131,3,66,3,131,3,67,3,132,3,68,3,132,3,67,3,132,3,68,3,133,3,69,3,133,3,68,3,133,3,69,3,134,3,70,3,134,3,69,3,134,3,70,3,135,3,71,3,135,3,70,3,135,3,71,3,136,3,72,3,136,3,71,3,136,3,72,3,137,3,73,3,137,3,72,3,137,3,73,3,138,3,74,3,138,3,73,3,138,3,74,3,139,3,75,3,139,3,74,3,139,3,75,3,140,3,76,3,140,3,75,3,140,3,76,3,141,3,77,3,141,3,76,3,141,3,77,3,142,3,78,3,142,3,77,3,142,3,78,3,143,3,79,3,143,3,78,3,143,3,79,3,144,3,80,3,144,3,79,3,144,3,80,3,145,3,81,3,145,3,80,3,145,3,81,3,146,3,82,3,146,3,81,3,146,3,82,3,147,3,83,3,147,3,82,3,147,3,83,3,148,3,84,3,148,3,83,3,148,3,84,3,149,3,85,3,149,3,84,3,149,3,85,3,150,3,86,3,150,3,85,3,150,3,86,3,151,3,87,3,151,3,86,3,151,3,87,3,152,3,88,3,152,3,87,3,152,3,88,3,153,3,89,3,153,3,88,3,153,3,89,3,154,3,90,3,154,3,89,3,154,3,90,3,155,3,91,3,155,3,90,3,155,3,91,3,156,3,92,3,156,3,91,3,156,3,92,3,157,3,93,3,157,3,92,3,157,3,93,3,158,3,94,3,158,3,93,3,158,3,94,3,159,3,95,3,159,3,94,3,159,3,95,3,160,3,96,3,160,3,95,3,160,3,96,3,161,3,97,3,161,3,96,3,161,3,97,3,162,3,98,3,162,3,97,3,162,3,98,3,163,3,99,3,163,3,98,3,163,3,99,3,164,3,100,3,164,3,99,3,164,3,100,3,165,3,101,3,165,3,100,3,165,3,101,3,166,3,102,3,166,3,101,3,166,3,102,3,167,3,103,3,167,3,102,3,167,3,103,3,168,3,104,3,168,3,103,3,168,3,104,3,169,3,105,3,169,3,104,3,169,3,105,3,170,3,106,3,170,3,105,3,170,3,106,3,171,3,107,3,171,3,106,3,171,3,107,3,172,3,108,3,172,3,107,3,172,3,108,3,173,3,109,3,173,3,108,3,173,3,109,3,174,3,110,3,174,3,109,3,174,3,110,3,175,3,111,3,175,3,110,3,175,3,111,3,176,3,112,3,176,3,111,3,176,3,112,3,177,3,113,3,177,3,112,3,177,3,113,3,178,3,114,3,178,3,113,3,178,3,114,3,179,3,115,3,179,3,114,3,179,3,115,3,180,3,116,3,180,3,115,3,180,3,116,3,181,3,117,3,181,3,116,3,181,3,117,3,182,3,118,3,182,3,117,3,182,3,118,3,183,3,119,3,183,3,118,3,183,3,119,3,184,3,120,3,184,3,119,3,184,3,120,3,185,3,121,3,185,3,120,3,185,3,121,3,186,3,122,3,186,3,121,3,186,3,122,3,187,3,123,3,187,3,122,3,187,3,123,3,188,3,124,3,188,3,123,3,188,3,124,3,189,3,125,3,189,3,124,3,189,3,125,3,190,3,126,3,190,3,125,3,190,3,126,3,191,3,127,3,191,3,126,3,192,3,128,3,193,3,129,3,193,3,128,3,193,3,129,3,194,3,130,3,194,3,129,3,194,3,130,3,195,3,131,3,195,3,130,3,195,3,131,3,196,3,132,3,196,3,131,3,196,3,132,3,197,3,133,3,197,3,132,3,197,3,133,3,198,3,134,3,198,3,133,3,198,3,134,3,199,3,135,3,199,3,134,3,199,3,135,3,200,3,136,3,200,3,135,3,200,3,136,3,201,3,137,3,201,3,136,3,201,3,137,3,202,3,138,3,202,3,137,3,202,3,138,3,203,3,139,3,203,3,138,3,203,3,139,3,204,3,140,3,204,3,139,3,204,3,140,3,205,3,141,3,205,3,140,3,205,3,141,3,206,3,142,3,206,3,141,3,206,3,142,3,207,3,143,3,207,3,142,3,207,3,143,3,208,3,144,3,208,3,143,3,208,3,144,3,209,3,145,3,209,3,144,3,209,3,145,3,210,3,146,3,210,3,145,3,210,3,146,3,211,3,147,3,211,3,146,3,211,3,147,3,212,3,148,3,212,3,147,3,212,3,148,3,213,3,149,3,213,3,148,3,213,3,149,3,214,3,150,3,214,3,149,3,214,3,150,3,215,3,151,3,215,3,150,3,215,3,151,3,216,3,152,3,216,3,151,3,216,3,152,3,217,3,153,3,217,3,152,3,217,3,153,3,218,3,154,3,218,3,153,3,218,3,154,3,219,3,155,3,219,3,154,3,219,3,155,3,220,3,156,3,220,3,155,3,220,3,156,3,221,3,157,3,221,3,156,3,221,3,157,3,222,3,158,3,222,3,157,3,222,3,158,3,223,3,159,3,223,3,158,3,223,3,159,3,224,3,160,3,224,3,159,3,224,3,160,3,225,3,161,3,225,3,160,3,225,3,161,3,226,3,162,3,226,3,161,3,226,3,162,3,227,3,163,3,227,3,162,3,227,3,163,3,228,3,164,3,228,3,163,3,228,3,164,3,229,3,165,3,229,3,164,3,229,3,165,3,230,3,166,3,230,3,165,3,230,3,166,3,231,3,167,3,231,3,166,3,231,3,167,3,232,3,168,3,232,3,167,3,232,3,168,3,233,3,169,3,233,3,168,3,233,3,169,3,234,3,170,3,234,3,169,3,234,3,170,3,235,3,171,3,235,3,170,3,235,3,171,3,236,3,172,3,236,3,171,3,236,3,172,3,237,3,173,3,237,3,172,3,237,3,173,3,238,3,174,3,238,3,173,3,238,3,174,3,239,3,175,3,239,3,174,3,239,3,175,3,240,3,176,3,240,3,175,3,240,3,176,3,241,3,177,3,241,3,176,3,241,3,177,3,242,3,178,3,242,3,177,3,242,3,178,3,243,3,179,3,243,3,178,3,243,3,179,3,244,3,180,3,244,3,179,3,244,3,180,3,245,3,181,3,245,3,180,3,245,3,181,3,246,3,182,3,246,3,181,3,246,3,182,3,247,3,183,3,247,3,182,3,247,3,183,3,248,3,184,3,248,3,183,3,248,3,184,3,249,3,185,3,249,3,184,3,249,3,185,3,250,3,186,3,250,3,185,3,250,3,186,3,251,3,187,3,251,3,186,3,251,3,187,3,252,3,188,3,252,3,187,3,252,3,188,3,253,3,189,3,253,3,188,3,253,3,189,3,254,3,190,3,254,3,189,3,254,3,190,3,255,3,191,3,255,3,190,3,0,4,192,3,1,4,193,3,1,4,192,3,1,4,193,3,2,4,194,3,2,4,193,3,2,4,194,3,3,4,195,3,3,4,194,3,3,4,195,3,4,4,196,3,4,4,195,3,4,4,196,3,5,4,197,3,5,4,196,3,5,4,197,3,6,4,198,3,6,4,197,3,6,4,198,3,7,4,199,3,7,4,198,3,7,4,199,3,8,4,200,3,8,4,199,3,8,4,200,3,9,4,201,3,9,4,200,3,9,4,201,3,10,4,202,3,10,4,201,3,10,4,202,3,11,4,203,3,11,4,202,3,11,4,203,3,12,4,204,3,12,4,203,3,12,4,204,3,13,4,205,3,13,4,204,3,13,4,205,3,14,4,206,3,14,4,205,3,14,4,206,3,15,4,207,3,15,4,206,3,15,4,207,3,16,4,208,3,16,4,207,3,16,4,208,3,17,4,209,3,17,4,208,3,17,4,209,3,18,4,210,3,18,4,209,3,18,4,210,3,19,4,211,3,19,4,210,3,19,4,211,3,20,4,212,3,20,4,211,3,20,4,212,3,21,4,213,3,21,4,212,3,21,4,213,3,22,4,214,3,22,4,213,3,22,4,214,3,23,4,215,3,23,4,214,3,23,4,215,3,24,4,216,3,24,4,215,3,24,4,216,3,25,4,217,3,25,4,216,3,25,4,217,3,26,4,218,3,26,4,217,3,26,4,218,3,27,4,219,3,27,4,218,3,27,4,219,3,28,4,220,3,28,4,219,3,28,4,220,3,29,4,221,3,29,4,220,3,29,4,221,3,30,4,222,3,30,4,221,3,30,4,222,3,31,4,223,3,31,4,222,3,31,4,223,3,32,4,224,3,32,4,223,3,32,4,224,3,33,4,225,3,33,4,224,3,33,4,225,3,34,4,226,3,34,4,225,3,34,4,226,3,35,4,227,3,35,4,226,3,35,4,227,3,36,4,228,3,36,4,227,3,36,4,228,3,37,4,229,3,37,4,228,3,37,4,229,3,38,4,230,3,38,4,229,3,38,4,230,3,39,4,231,3,39,4,230,3,39,4,231,3,40,4,232,3,40,4,231,3,40,4,232,3,41,4,233,3,41,4,232,3,41,4,233,3,42,4,234,3,42,4,233,3,42,4,234,3,43,4,235,3,43,4,234,3,43,4,235,3,44,4,236,3,44,4,235,3,44,4,236,3,45,4,237,3,45,4,236,3,45,4,237,3,46,4,238,3,46,4,237,3,46,4,238,3,47,4,239,3,47,4,238,3,47,4,239,3,48,4,240,3,48,4,239,3,48,4,240,3,49,4,241,3,49,4,240,3,49,4,241,3,50,4,242,3,50,4,241,3,50,4,242,3,51,4,243,3,51,4,242,3,51,4,243,3,52,4,244,3,52,4,243,3,52,4,244,3,53,4,245,3,53,4,244,3,53,4,245,3,54,4,246,3,54,4,245,3,54,4,246,3,55,4,247,3,55,4,246,3,55,4,247,3,56,4,248,3,56,4,247,3,56,4,248,3,57,4,249,3,57,4,248,3,57,4,249,3,58,4,250,3,58,4,249,3,58,4,250,3,59,4,251,3,59,4,250,3,59,4,251,3,60,4,252,3,60,4,251,3,60,4,252,3,61,4,253,3,61,4,252,3,61,4,253,3,62,4,254,3,62,4,253,3,62,4,254,3,63,4,255,3,63,4,254,3,64,4,0,4,65,4,1,4,65,4,0,4,65,4,1,4,66,4,2,4,66,4,1,4,66,4,2,4,67,4,3,4,67,4,2,4,67,4,3,4,68,4,4,4,68,4,3,4,68,4,4,4,69,4,5,4,69,4,4,4,69,4,5,4,70,4,6,4,70,4,5,4,70,4,6,4,71,4,7,4,71,4,6,4,71,4,7,4,72,4,8,4,72,4,7,4,72,4,8,4,73,4,9,4,73,4,8,4,73,4,9,4,74,4,10,4,74,4,9,4,74,4,10,4,75,4,11,4,75,4,10,4,75,4,11,4,76,4,12,4,76,4,11,4,76,4,12,4,77,4,13,4,77,4,12,4,77,4,13,4,78,4,14,4,78,4,13,4,78,4,14,4,79,4,15,4,79,4,14,4,79,4,15,4,80,4,16,4,80,4,15,4,80,4,16,4,81,4,17,4,81,4,16,4,81,4,17,4,82,4,18,4,82,4,17,4,82,4,18,4,83,4,19,4,83,4,18,4,83,4,19,4,84,4,20,4,84,4,19,4,84,4,20,4,85,4,21,4,85,4,20,4,85,4,21,4,86,4,22,4,86,4,21,4,86,4,22,4,87,4,23,4,87,4,22,4,87,4,23,4,88,4,24,4,88,4,23,4,88,4,24,4,89,4,25,4,89,4,24,4,89,4,25,4,90,4,26,4,90,4,25,4,90,4,26,4,91,4,27,4,91,4,26,4,91,4,27,4,92,4,28,4,92,4,27,4,92,4,28,4,93,4,29,4,93,4,28,4,93,4,29,4,94,4,30,4,94,4,29,4,94,4,30,4,95,4,31,4,95,4,30,4,95,4,31,4,96,4,32,4,96,4,31,4,96,4,32,4,97,4,33,4,97,4,32,4,97,4,33,4,98,4,34,4,98,4,33,4,98,4,34,4,99,4,35,4,99,4,34,4,99,4,35,4,100,4,36,4,100,4,35,4,100,4,36,4,101,4,37,4,101,4,36,4,101,4,37,4,102,4,38,4,102,4,37,4,102,4,38,4,103,4,39,4,103,4,38,4,103,4,39,4,104,4,40,4,104,4,39,4,104,4,40,4,105,4,41,4,105,4,40,4,105,4,41,4,106,4,42,4,106,4,41,4,106,4,42,4,107,4,43,4,107,4,42,4,107,4,43,4,108,4,44,4,108,4,43,4,108,4,44,4,109,4,45,4,109,4,44,4,109,4,45,4,110,4,46,4,110,4,45,4,110,4,46,4,111,4,47,4,111,4,46,4,111,4,47,4,112,4,48,4,112,4,47,4,112,4,48,4,113,4,49,4,113,4,48,4,113,4,49,4,114,4,50,4,114,4,49,4,114,4,50,4,115,4,51,4,115,4,50,4,115,4,51,4,116,4,52,4,116,4,51,4,116,4,52,4,117,4,53,4,117,4,52,4,117,4,53,4,118,4,54,4,118,4,53,4,118,4,54,4,119,4,55,4,119,4,54,4,119,4,55,4,120,4,56,4,120,4,55,4,120,4,56,4,121,4,57,4,121,4,56,4,121,4,57,4,122,4,58,4,122,4,57,4,122,4,58,4,123,4,59,4,123,4,58,4,123,4,59,4,124,4,60,4,124,4,59,4,124,4,60,4,125,4,61,4,125,4,60,4,125,4,61,4,126,4,62,4,126,4,61,4,126,4,62,4,127,4,63,4,127,4,62,4,128,4,64,4,129,4,65,4,129,4,64,4,129,4,65,4,130,4,66,4,130,4,65,4,130,4,66,4,131,4,67,4,131,4,66,4,131,4,67,4,132,4,68,4,132,4,67,4,132,4,68,4,133,4,69,4,133,4,68,4,133,4,69,4,134,4,70,4,134,4,69,4,134,4,70,4,135,4,71,4,135,4,70,4,135,4,71,4,136,4,72,4,136,4,71,4,136,4,72,4,137,4,73,4,137,4,72,4,137,4,73,4,138,4,74,4,138,4,73,4,138,4,74,4,139,4,75,4,139,4,74,4,139,4,75,4,140,4,76,4,140,4,75,4,140,4,76,4,141,4,77,4,141,4,76,4,141,4,77,4,142,4,78,4,142,4,77,4,142,4,78,4,143,4,79,4,143,4,78,4,143,4,79,4,144,4,80,4,144,4,79,4,144,4,80,4,145,4,81,4,145,4,80,4,145,4,81,4,146,4,82,4,146,4,81,4,146,4,82,4,147,4,83,4,147,4,82,4,147,4,83,4,148,4,84,4,148,4,83,4,148,4,84,4,149,4,85,4,149,4,84,4,149,4,85,4,150,4,86,4,150,4,85,4,150,4,86,4,151,4,87,4,151,4,86,4,151,4,87,4,152,4,88,4,152,4,87,4,152,4,88,4,153,4,89,4,153,4,88,4,153,4,89,4,154,4,90,4,154,4,89,4,154,4,90,4,155,4,91,4,155,4,90,4,155,4,91,4,156,4,92,4,156,4,91,4,156,4,92,4,157,4,93,4,157,4,92,4,157,4,93,4,158,4,94,4,158,4,93,4,158,4,94,4,159,4,95,4,159,4,94,4,159,4,95,4,160,4,96,4,160,4,95,4,160,4,96,4,161,4,97,4,161,4,96,4,161,4,97,4,162,4,98,4,162,4,97,4,162,4,98,4,163,4,99,4,163,4,98,4,163,4,99,4,164,4,100,4,164,4,99,4,164,4,100,4,165,4,101,4,165,4,100,4,165,4,101,4,166,4,102,4,166,4,101,4,166,4,102,4,167,4,103,4,167,4,102,4,167,4,103,4,168,4,104,4,168,4,103,4,168,4,104,4,169,4,105,4,169,4,104,4,169,4,105,4,170,4,106,4,170,4,105,4,170,4,106,4,171,4,107,4,171,4,106,4,171,4,107,4,172,4,108,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122880);
/* memory initializer */ allocate([172,4,107,4,172,4,108,4,173,4,109,4,173,4,108,4,173,4,109,4,174,4,110,4,174,4,109,4,174,4,110,4,175,4,111,4,175,4,110,4,175,4,111,4,176,4,112,4,176,4,111,4,176,4,112,4,177,4,113,4,177,4,112,4,177,4,113,4,178,4,114,4,178,4,113,4,178,4,114,4,179,4,115,4,179,4,114,4,179,4,115,4,180,4,116,4,180,4,115,4,180,4,116,4,181,4,117,4,181,4,116,4,181,4,117,4,182,4,118,4,182,4,117,4,182,4,118,4,183,4,119,4,183,4,118,4,183,4,119,4,184,4,120,4,184,4,119,4,184,4,120,4,185,4,121,4,185,4,120,4,185,4,121,4,186,4,122,4,186,4,121,4,186,4,122,4,187,4,123,4,187,4,122,4,187,4,123,4,188,4,124,4,188,4,123,4,188,4,124,4,189,4,125,4,189,4,124,4,189,4,125,4,190,4,126,4,190,4,125,4,190,4,126,4,191,4,127,4,191,4,126,4,192,4,128,4,193,4,129,4,193,4,128,4,193,4,129,4,194,4,130,4,194,4,129,4,194,4,130,4,195,4,131,4,195,4,130,4,195,4,131,4,196,4,132,4,196,4,131,4,196,4,132,4,197,4,133,4,197,4,132,4,197,4,133,4,198,4,134,4,198,4,133,4,198,4,134,4,199,4,135,4,199,4,134,4,199,4,135,4,200,4,136,4,200,4,135,4,200,4,136,4,201,4,137,4,201,4,136,4,201,4,137,4,202,4,138,4,202,4,137,4,202,4,138,4,203,4,139,4,203,4,138,4,203,4,139,4,204,4,140,4,204,4,139,4,204,4,140,4,205,4,141,4,205,4,140,4,205,4,141,4,206,4,142,4,206,4,141,4,206,4,142,4,207,4,143,4,207,4,142,4,207,4,143,4,208,4,144,4,208,4,143,4,208,4,144,4,209,4,145,4,209,4,144,4,209,4,145,4,210,4,146,4,210,4,145,4,210,4,146,4,211,4,147,4,211,4,146,4,211,4,147,4,212,4,148,4,212,4,147,4,212,4,148,4,213,4,149,4,213,4,148,4,213,4,149,4,214,4,150,4,214,4,149,4,214,4,150,4,215,4,151,4,215,4,150,4,215,4,151,4,216,4,152,4,216,4,151,4,216,4,152,4,217,4,153,4,217,4,152,4,217,4,153,4,218,4,154,4,218,4,153,4,218,4,154,4,219,4,155,4,219,4,154,4,219,4,155,4,220,4,156,4,220,4,155,4,220,4,156,4,221,4,157,4,221,4,156,4,221,4,157,4,222,4,158,4,222,4,157,4,222,4,158,4,223,4,159,4,223,4,158,4,223,4,159,4,224,4,160,4,224,4,159,4,224,4,160,4,225,4,161,4,225,4,160,4,225,4,161,4,226,4,162,4,226,4,161,4,226,4,162,4,227,4,163,4,227,4,162,4,227,4,163,4,228,4,164,4,228,4,163,4,228,4,164,4,229,4,165,4,229,4,164,4,229,4,165,4,230,4,166,4,230,4,165,4,230,4,166,4,231,4,167,4,231,4,166,4,231,4,167,4,232,4,168,4,232,4,167,4,232,4,168,4,233,4,169,4,233,4,168,4,233,4,169,4,234,4,170,4,234,4,169,4,234,4,170,4,235,4,171,4,235,4,170,4,235,4,171,4,236,4,172,4,236,4,171,4,236,4,172,4,237,4,173,4,237,4,172,4,237,4,173,4,238,4,174,4,238,4,173,4,238,4,174,4,239,4,175,4,239,4,174,4,239,4,175,4,240,4,176,4,240,4,175,4,240,4,176,4,241,4,177,4,241,4,176,4,241,4,177,4,242,4,178,4,242,4,177,4,242,4,178,4,243,4,179,4,243,4,178,4,243,4,179,4,244,4,180,4,244,4,179,4,244,4,180,4,245,4,181,4,245,4,180,4,245,4,181,4,246,4,182,4,246,4,181,4,246,4,182,4,247,4,183,4,247,4,182,4,247,4,183,4,248,4,184,4,248,4,183,4,248,4,184,4,249,4,185,4,249,4,184,4,249,4,185,4,250,4,186,4,250,4,185,4,250,4,186,4,251,4,187,4,251,4,186,4,251,4,187,4,252,4,188,4,252,4,187,4,252,4,188,4,253,4,189,4,253,4,188,4,253,4,189,4,254,4,190,4,254,4,189,4,254,4,190,4,255,4,191,4,255,4,190,4,0,5,192,4,1,5,193,4,1,5,192,4,1,5,193,4,2,5,194,4,2,5,193,4,2,5,194,4,3,5,195,4,3,5,194,4,3,5,195,4,4,5,196,4,4,5,195,4,4,5,196,4,5,5,197,4,5,5,196,4,5,5,197,4,6,5,198,4,6,5,197,4,6,5,198,4,7,5,199,4,7,5,198,4,7,5,199,4,8,5,200,4,8,5,199,4,8,5,200,4,9,5,201,4,9,5,200,4,9,5,201,4,10,5,202,4,10,5,201,4,10,5,202,4,11,5,203,4,11,5,202,4,11,5,203,4,12,5,204,4,12,5,203,4,12,5,204,4,13,5,205,4,13,5,204,4,13,5,205,4,14,5,206,4,14,5,205,4,14,5,206,4,15,5,207,4,15,5,206,4,15,5,207,4,16,5,208,4,16,5,207,4,16,5,208,4,17,5,209,4,17,5,208,4,17,5,209,4,18,5,210,4,18,5,209,4,18,5,210,4,19,5,211,4,19,5,210,4,19,5,211,4,20,5,212,4,20,5,211,4,20,5,212,4,21,5,213,4,21,5,212,4,21,5,213,4,22,5,214,4,22,5,213,4,22,5,214,4,23,5,215,4,23,5,214,4,23,5,215,4,24,5,216,4,24,5,215,4,24,5,216,4,25,5,217,4,25,5,216,4,25,5,217,4,26,5,218,4,26,5,217,4,26,5,218,4,27,5,219,4,27,5,218,4,27,5,219,4,28,5,220,4,28,5,219,4,28,5,220,4,29,5,221,4,29,5,220,4,29,5,221,4,30,5,222,4,30,5,221,4,30,5,222,4,31,5,223,4,31,5,222,4,31,5,223,4,32,5,224,4,32,5,223,4,32,5,224,4,33,5,225,4,33,5,224,4,33,5,225,4,34,5,226,4,34,5,225,4,34,5,226,4,35,5,227,4,35,5,226,4,35,5,227,4,36,5,228,4,36,5,227,4,36,5,228,4,37,5,229,4,37,5,228,4,37,5,229,4,38,5,230,4,38,5,229,4,38,5,230,4,39,5,231,4,39,5,230,4,39,5,231,4,40,5,232,4,40,5,231,4,40,5,232,4,41,5,233,4,41,5,232,4,41,5,233,4,42,5,234,4,42,5,233,4,42,5,234,4,43,5,235,4,43,5,234,4,43,5,235,4,44,5,236,4,44,5,235,4,44,5,236,4,45,5,237,4,45,5,236,4,45,5,237,4,46,5,238,4,46,5,237,4,46,5,238,4,47,5,239,4,47,5,238,4,47,5,239,4,48,5,240,4,48,5,239,4,48,5,240,4,49,5,241,4,49,5,240,4,49,5,241,4,50,5,242,4,50,5,241,4,50,5,242,4,51,5,243,4,51,5,242,4,51,5,243,4,52,5,244,4,52,5,243,4,52,5,244,4,53,5,245,4,53,5,244,4,53,5,245,4,54,5,246,4,54,5,245,4,54,5,246,4,55,5,247,4,55,5,246,4,55,5,247,4,56,5,248,4,56,5,247,4,56,5,248,4,57,5,249,4,57,5,248,4,57,5,249,4,58,5,250,4,58,5,249,4,58,5,250,4,59,5,251,4,59,5,250,4,59,5,251,4,60,5,252,4,60,5,251,4,60,5,252,4,61,5,253,4,61,5,252,4,61,5,253,4,62,5,254,4,62,5,253,4,62,5,254,4,63,5,255,4,63,5,254,4,64,5,0,5,65,5,1,5,65,5,0,5,65,5,1,5,66,5,2,5,66,5,1,5,66,5,2,5,67,5,3,5,67,5,2,5,67,5,3,5,68,5,4,5,68,5,3,5,68,5,4,5,69,5,5,5,69,5,4,5,69,5,5,5,70,5,6,5,70,5,5,5,70,5,6,5,71,5,7,5,71,5,6,5,71,5,7,5,72,5,8,5,72,5,7,5,72,5,8,5,73,5,9,5,73,5,8,5,73,5,9,5,74,5,10,5,74,5,9,5,74,5,10,5,75,5,11,5,75,5,10,5,75,5,11,5,76,5,12,5,76,5,11,5,76,5,12,5,77,5,13,5,77,5,12,5,77,5,13,5,78,5,14,5,78,5,13,5,78,5,14,5,79,5,15,5,79,5,14,5,79,5,15,5,80,5,16,5,80,5,15,5,80,5,16,5,81,5,17,5,81,5,16,5,81,5,17,5,82,5,18,5,82,5,17,5,82,5,18,5,83,5,19,5,83,5,18,5,83,5,19,5,84,5,20,5,84,5,19,5,84,5,20,5,85,5,21,5,85,5,20,5,85,5,21,5,86,5,22,5,86,5,21,5,86,5,22,5,87,5,23,5,87,5,22,5,87,5,23,5,88,5,24,5,88,5,23,5,88,5,24,5,89,5,25,5,89,5,24,5,89,5,25,5,90,5,26,5,90,5,25,5,90,5,26,5,91,5,27,5,91,5,26,5,91,5,27,5,92,5,28,5,92,5,27,5,92,5,28,5,93,5,29,5,93,5,28,5,93,5,29,5,94,5,30,5,94,5,29,5,94,5,30,5,95,5,31,5,95,5,30,5,95,5,31,5,96,5,32,5,96,5,31,5,96,5,32,5,97,5,33,5,97,5,32,5,97,5,33,5,98,5,34,5,98,5,33,5,98,5,34,5,99,5,35,5,99,5,34,5,99,5,35,5,100,5,36,5,100,5,35,5,100,5,36,5,101,5,37,5,101,5,36,5,101,5,37,5,102,5,38,5,102,5,37,5,102,5,38,5,103,5,39,5,103,5,38,5,103,5,39,5,104,5,40,5,104,5,39,5,104,5,40,5,105,5,41,5,105,5,40,5,105,5,41,5,106,5,42,5,106,5,41,5,106,5,42,5,107,5,43,5,107,5,42,5,107,5,43,5,108,5,44,5,108,5,43,5,108,5,44,5,109,5,45,5,109,5,44,5,109,5,45,5,110,5,46,5,110,5,45,5,110,5,46,5,111,5,47,5,111,5,46,5,111,5,47,5,112,5,48,5,112,5,47,5,112,5,48,5,113,5,49,5,113,5,48,5,113,5,49,5,114,5,50,5,114,5,49,5,114,5,50,5,115,5,51,5,115,5,50,5,115,5,51,5,116,5,52,5,116,5,51,5,116,5,52,5,117,5,53,5,117,5,52,5,117,5,53,5,118,5,54,5,118,5,53,5,118,5,54,5,119,5,55,5,119,5,54,5,119,5,55,5,120,5,56,5,120,5,55,5,120,5,56,5,121,5,57,5,121,5,56,5,121,5,57,5,122,5,58,5,122,5,57,5,122,5,58,5,123,5,59,5,123,5,58,5,123,5,59,5,124,5,60,5,124,5,59,5,124,5,60,5,125,5,61,5,125,5,60,5,125,5,61,5,126,5,62,5,126,5,61,5,126,5,62,5,127,5,63,5,127,5,62,5,128,5,64,5,129,5,65,5,129,5,64,5,129,5,65,5,130,5,66,5,130,5,65,5,130,5,66,5,131,5,67,5,131,5,66,5,131,5,67,5,132,5,68,5,132,5,67,5,132,5,68,5,133,5,69,5,133,5,68,5,133,5,69,5,134,5,70,5,134,5,69,5,134,5,70,5,135,5,71,5,135,5,70,5,135,5,71,5,136,5,72,5,136,5,71,5,136,5,72,5,137,5,73,5,137,5,72,5,137,5,73,5,138,5,74,5,138,5,73,5,138,5,74,5,139,5,75,5,139,5,74,5,139,5,75,5,140,5,76,5,140,5,75,5,140,5,76,5,141,5,77,5,141,5,76,5,141,5,77,5,142,5,78,5,142,5,77,5,142,5,78,5,143,5,79,5,143,5,78,5,143,5,79,5,144,5,80,5,144,5,79,5,144,5,80,5,145,5,81,5,145,5,80,5,145,5,81,5,146,5,82,5,146,5,81,5,146,5,82,5,147,5,83,5,147,5,82,5,147,5,83,5,148,5,84,5,148,5,83,5,148,5,84,5,149,5,85,5,149,5,84,5,149,5,85,5,150,5,86,5,150,5,85,5,150,5,86,5,151,5,87,5,151,5,86,5,151,5,87,5,152,5,88,5,152,5,87,5,152,5,88,5,153,5,89,5,153,5,88,5,153,5,89,5,154,5,90,5,154,5,89,5,154,5,90,5,155,5,91,5,155,5,90,5,155,5,91,5,156,5,92,5,156,5,91,5,156,5,92,5,157,5,93,5,157,5,92,5,157,5,93,5,158,5,94,5,158,5,93,5,158,5,94,5,159,5,95,5,159,5,94,5,159,5,95,5,160,5,96,5,160,5,95,5,160,5,96,5,161,5,97,5,161,5,96,5,161,5,97,5,162,5,98,5,162,5,97,5,162,5,98,5,163,5,99,5,163,5,98,5,163,5,99,5,164,5,100,5,164,5,99,5,164,5,100,5,165,5,101,5,165,5,100,5,165,5,101,5,166,5,102,5,166,5,101,5,166,5,102,5,167,5,103,5,167,5,102,5,167,5,103,5,168,5,104,5,168,5,103,5,168,5,104,5,169,5,105,5,169,5,104,5,169,5,105,5,170,5,106,5,170,5,105,5,170,5,106,5,171,5,107,5,171,5,106,5,171,5,107,5,172,5,108,5,172,5,107,5,172,5,108,5,173,5,109,5,173,5,108,5,173,5,109,5,174,5,110,5,174,5,109,5,174,5,110,5,175,5,111,5,175,5,110,5,175,5,111,5,176,5,112,5,176,5,111,5,176,5,112,5,177,5,113,5,177,5,112,5,177,5,113,5,178,5,114,5,178,5,113,5,178,5,114,5,179,5,115,5,179,5,114,5,179,5,115,5,180,5,116,5,180,5,115,5,180,5,116,5,181,5,117,5,181,5,116,5,181,5,117,5,182,5,118,5,182,5,117,5,182,5,118,5,183,5,119,5,183,5,118,5,183,5,119,5,184,5,120,5,184,5,119,5,184,5,120,5,185,5,121,5,185,5,120,5,185,5,121,5,186,5,122,5,186,5,121,5,186,5,122,5,187,5,123,5,187,5,122,5,187,5,123,5,188,5,124,5,188,5,123,5,188,5,124,5,189,5,125,5,189,5,124,5,189,5,125,5,190,5,126,5,190,5,125,5,190,5,126,5,191,5,127,5,191,5,126,5,192,5,128,5,193,5,129,5,193,5,128,5,193,5,129,5,194,5,130,5,194,5,129,5,194,5,130,5,195,5,131,5,195,5,130,5,195,5,131,5,196,5,132,5,196,5,131,5,196,5,132,5,197,5,133,5,197,5,132,5,197,5,133,5,198,5,134,5,198,5,133,5,198,5,134,5,199,5,135,5,199,5,134,5,199,5,135,5,200,5,136,5,200,5,135,5,200,5,136,5,201,5,137,5,201,5,136,5,201,5,137,5,202,5,138,5,202,5,137,5,202,5,138,5,203,5,139,5,203,5,138,5,203,5,139,5,204,5,140,5,204,5,139,5,204,5,140,5,205,5,141,5,205,5,140,5,205,5,141,5,206,5,142,5,206,5,141,5,206,5,142,5,207,5,143,5,207,5,142,5,207,5,143,5,208,5,144,5,208,5,143,5,208,5,144,5,209,5,145,5,209,5,144,5,209,5,145,5,210,5,146,5,210,5,145,5,210,5,146,5,211,5,147,5,211,5,146,5,211,5,147,5,212,5,148,5,212,5,147,5,212,5,148,5,213,5,149,5,213,5,148,5,213,5,149,5,214,5,150,5,214,5,149,5,214,5,150,5,215,5,151,5,215,5,150,5,215,5,151,5,216,5,152,5,216,5,151,5,216,5,152,5,217,5,153,5,217,5,152,5,217,5,153,5,218,5,154,5,218,5,153,5,218,5,154,5,219,5,155,5,219,5,154,5,219,5,155,5,220,5,156,5,220,5,155,5,220,5,156,5,221,5,157,5,221,5,156,5,221,5,157,5,222,5,158,5,222,5,157,5,222,5,158,5,223,5,159,5,223,5,158,5,223,5,159,5,224,5,160,5,224,5,159,5,224,5,160,5,225,5,161,5,225,5,160,5,225,5,161,5,226,5,162,5,226,5,161,5,226,5,162,5,227,5,163,5,227,5,162,5,227,5,163,5,228,5,164,5,228,5,163,5,228,5,164,5,229,5,165,5,229,5,164,5,229,5,165,5,230,5,166,5,230,5,165,5,230,5,166,5,231,5,167,5,231,5,166,5,231,5,167,5,232,5,168,5,232,5,167,5,232,5,168,5,233,5,169,5,233,5,168,5,233,5,169,5,234,5,170,5,234,5,169,5,234,5,170,5,235,5,171,5,235,5,170,5,235,5,171,5,236,5,172,5,236,5,171,5,236,5,172,5,237,5,173,5,237,5,172,5,237,5,173,5,238,5,174,5,238,5,173,5,238,5,174,5,239,5,175,5,239,5,174,5,239,5,175,5,240,5,176,5,240,5,175,5,240,5,176,5,241,5,177,5,241,5,176,5,241,5,177,5,242,5,178,5,242,5,177,5,242,5,178,5,243,5,179,5,243,5,178,5,243,5,179,5,244,5,180,5,244,5,179,5,244,5,180,5,245,5,181,5,245,5,180,5,245,5,181,5,246,5,182,5,246,5,181,5,246,5,182,5,247,5,183,5,247,5,182,5,247,5,183,5,248,5,184,5,248,5,183,5,248,5,184,5,249,5,185,5,249,5,184,5,249,5,185,5,250,5,186,5,250,5,185,5,250,5,186,5,251,5,187,5,251,5,186,5,251,5,187,5,252,5,188,5,252,5,187,5,252,5,188,5,253,5,189,5,253,5,188,5,253,5,189,5,254,5,190,5,254,5,189,5,254,5,190,5,255,5,191,5,255,5,190,5,0,6,192,5,1,6,193,5,1,6,192,5,1,6,193,5,2,6,194,5,2,6,193,5,2,6,194,5,3,6,195,5,3,6,194,5,3,6,195,5,4,6,196,5,4,6,195,5,4,6,196,5,5,6,197,5,5,6,196,5,5,6,197,5,6,6,198,5,6,6,197,5,6,6,198,5,7,6,199,5,7,6,198,5,7,6,199,5,8,6,200,5,8,6,199,5,8,6,200,5,9,6,201,5,9,6,200,5,9,6,201,5,10,6,202,5,10,6,201,5,10,6,202,5,11,6,203,5,11,6,202,5,11,6,203,5,12,6,204,5,12,6,203,5,12,6,204,5,13,6,205,5,13,6,204,5,13,6,205,5,14,6,206,5,14,6,205,5,14,6,206,5,15,6,207,5,15,6,206,5,15,6,207,5,16,6,208,5,16,6,207,5,16,6,208,5,17,6,209,5,17,6,208,5,17,6,209,5,18,6,210,5,18,6,209,5,18,6,210,5,19,6,211,5,19,6,210,5,19,6,211,5,20,6,212,5,20,6,211,5,20,6,212,5,21,6,213,5,21,6,212,5,21,6,213,5,22,6,214,5,22,6,213,5,22,6,214,5,23,6,215,5,23,6,214,5,23,6,215,5,24,6,216,5,24,6,215,5,24,6,216,5,25,6,217,5,25,6,216,5,25,6,217,5,26,6,218,5,26,6,217,5,26,6,218,5,27,6,219,5,27,6,218,5,27,6,219,5,28,6,220,5,28,6,219,5,28,6,220,5,29,6,221,5,29,6,220,5,29,6,221,5,30,6,222,5,30,6,221,5,30,6,222,5,31,6,223,5,31,6,222,5,31,6,223,5,32,6,224,5,32,6,223,5,32,6,224,5,33,6,225,5,33,6,224,5,33,6,225,5,34,6,226,5,34,6,225,5,34,6,226,5,35,6,227,5,35,6,226,5,35,6,227,5,36,6,228,5,36,6,227,5,36,6,228,5,37,6,229,5,37,6,228,5,37,6,229,5,38,6,230,5,38,6,229,5,38,6,230,5,39,6,231,5,39,6,230,5,39,6,231,5,40,6,232,5,40,6,231,5,40,6,232,5,41,6,233,5,41,6,232,5,41,6,233,5,42,6,234,5,42,6,233,5,42,6,234,5,43,6,235,5,43,6,234,5,43,6,235,5,44,6,236,5,44,6,235,5,44,6,236,5,45,6,237,5,45,6,236,5,45,6,237,5,46,6,238,5,46,6,237,5,46,6,238,5,47,6,239,5,47,6,238,5,47,6,239,5,48,6,240,5,48,6,239,5,48,6,240,5,49,6,241,5,49,6,240,5,49,6,241,5,50,6,242,5,50,6,241,5,50,6,242,5,51,6,243,5,51,6,242,5,51,6,243,5,52,6,244,5,52,6,243,5,52,6,244,5,53,6,245,5,53,6,244,5,53,6,245,5,54,6,246,5,54,6,245,5,54,6,246,5,55,6,247,5,55,6,246,5,55,6,247,5,56,6,248,5,56,6,247,5,56,6,248,5,57,6,249,5,57,6,248,5,57,6,249,5,58,6,250,5,58,6,249,5,58,6,250,5,59,6,251,5,59,6,250,5,59,6,251,5,60,6,252,5,60,6,251,5,60,6,252,5,61,6,253,5,61,6,252,5,61,6,253,5,62,6,254,5,62,6,253,5,62,6,254,5,63,6,255,5,63,6,254,5,64,6,0,6,65,6,1,6,65,6,0,6,65,6,1,6,66,6,2,6,66,6,1,6,66,6,2,6,67,6,3,6,67,6,2,6,67,6,3,6,68,6,4,6,68,6,3,6,68,6,4,6,69,6,5,6,69,6,4,6,69,6,5,6,70,6,6,6,70,6,5,6,70,6,6,6,71,6,7,6,71,6,6,6,71,6,7,6,72,6,8,6,72,6,7,6,72,6,8,6,73,6,9,6,73,6,8,6,73,6,9,6,74,6,10,6,74,6,9,6,74,6,10,6,75,6,11,6,75,6,10,6,75,6,11,6,76,6,12,6,76,6,11,6,76,6,12,6,77,6,13,6,77,6,12,6,77,6,13,6,78,6,14,6,78,6,13,6,78,6,14,6,79,6,15,6,79,6,14,6,79,6,15,6,80,6,16,6,80,6,15,6,80,6,16,6,81,6,17,6,81,6,16,6,81,6,17,6,82,6,18,6,82,6,17,6,82,6,18,6,83,6,19,6,83,6,18,6,83,6,19,6,84,6,20,6,84,6,19,6,84,6,20,6,85,6,21,6,85,6,20,6,85,6,21,6,86,6,22,6,86,6,21,6,86,6,22,6,87,6,23,6,87,6,22,6,87,6,23,6,88,6,24,6,88,6,23,6,88,6,24,6,89,6,25,6,89,6,24,6,89,6,25,6,90,6,26,6,90,6,25,6,90,6,26,6,91,6,27,6,91,6,26,6,91,6,27,6,92,6,28,6,92,6,27,6,92,6,28,6,93,6,29,6,93,6,28,6,93,6,29,6,94,6,30,6,94,6,29,6,94,6,30,6,95,6,31,6,95,6,30,6,95,6,31,6,96,6,32,6,96,6,31,6,96,6,32,6,97,6,33,6,97,6,32,6,97,6,33,6,98,6,34,6,98,6,33,6,98,6,34,6,99,6,35,6,99,6,34,6,99,6,35,6,100,6,36,6,100,6,35,6,100,6,36,6,101,6,37,6,101,6,36,6,101,6,37,6,102,6,38,6,102,6,37,6,102,6,38,6,103,6,39,6,103,6,38,6,103,6,39,6,104,6,40,6,104,6,39,6,104,6,40,6,105,6,41,6,105,6,40,6,105,6,41,6,106,6,42,6,106,6,41,6,106,6,42,6,107,6,43,6,107,6,42,6,107,6,43,6,108,6,44,6,108,6,43,6,108,6,44,6,109,6,45,6,109,6,44,6,109,6,45,6,110,6,46,6,110,6,45,6,110,6,46,6,111,6,47,6,111,6,46,6,111,6,47,6,112,6,48,6,112,6,47,6,112,6,48,6,113,6,49,6,113,6,48,6,113,6,49,6,114,6,50,6,114,6,49,6,114,6,50,6,115,6,51,6,115,6,50,6,115,6,51,6,116,6,52,6,116,6,51,6,116,6,52,6,117,6,53,6,117,6,52,6,117,6,53,6,118,6,54,6,118,6,53,6,118,6,54,6,119,6,55,6,119,6,54,6,119,6,55,6,120,6,56,6,120,6,55,6,120,6,56,6,121,6,57,6,121,6,56,6,121,6,57,6,122,6,58,6,122,6,57,6,122,6,58,6,123,6,59,6,123,6,58,6,123,6,59,6,124,6,60,6,124,6,59,6,124,6,60,6,125,6,61,6,125,6,60,6,125,6,61,6,126,6,62,6,126,6,61,6,126,6,62,6,127,6,63,6,127,6,62,6,128,6,64,6,129,6,65,6,129,6,64,6,129,6,65,6,130,6,66,6,130,6,65,6,130,6,66,6,131,6,67,6,131,6,66,6,131,6,67,6,132,6,68,6,132,6,67,6,132,6,68,6,133,6,69,6,133,6,68,6,133,6,69,6,134,6,70,6,134,6,69,6,134,6,70,6,135,6,71,6,135,6,70,6,135,6,71,6,136,6,72,6,136,6,71,6,136,6,72,6,137,6,73,6,137,6,72,6,137,6,73,6,138,6,74,6,138,6,73,6,138,6,74,6,139,6,75,6,139,6,74,6,139,6,75,6,140,6,76,6,140,6,75,6,140,6,76,6,141,6,77,6,141,6,76,6,141,6,77,6,142,6,78,6,142,6,77,6,142,6,78,6,143,6,79,6,143,6,78,6,143,6,79,6,144,6,80,6,144,6,79,6,144,6,80,6,145,6,81,6,145,6,80,6,145,6,81,6,146,6,82,6,146,6,81,6,146,6,82,6,147,6,83,6,147,6,82,6,147,6,83,6,148,6,84,6,148,6,83,6,148,6,84,6,149,6,85,6,149,6,84,6,149,6,85,6,150,6,86,6,150,6,85,6,150,6,86,6,151,6,87,6,151,6,86,6,151,6,87,6,152,6,88,6,152,6,87,6,152,6,88,6,153,6,89,6,153,6,88,6,153,6,89,6,154,6,90,6,154,6,89,6,154,6,90,6,155,6,91,6,155,6,90,6,155,6,91,6,156,6,92,6,156,6,91,6,156,6,92,6,157,6,93,6,157,6,92,6,157,6,93,6,158,6,94,6,158,6,93,6,158,6,94,6,159,6,95,6,159,6,94,6,159,6,95,6,160,6,96,6,160,6,95,6,160,6,96,6,161,6,97,6,161,6,96,6,161,6,97,6,162,6,98,6,162,6,97,6,162,6,98,6,163,6,99,6,163,6,98,6,163,6,99,6,164,6,100,6,164,6,99,6,164,6,100,6,165,6,101,6,165,6,100,6,165,6,101,6,166,6,102,6,166,6,101,6,166,6,102,6,167,6,103,6,167,6,102,6,167,6,103,6,168,6,104,6,168,6,103,6,168,6,104,6,169,6,105,6,169,6,104,6,169,6,105,6,170,6,106,6,170,6,105,6,170,6,106,6,171,6,107,6,171,6,106,6,171,6,107,6,172,6,108,6,172,6,107,6,172,6,108,6,173,6,109,6,173,6,108,6,173,6,109,6,174,6,110,6,174,6,109,6,174,6,110,6,175,6,111,6,175,6,110,6,175,6,111,6,176,6,112,6,176,6,111,6,176,6,112,6,177,6,113,6,177,6,112,6,177,6,113,6,178,6,114,6,178,6,113,6,178,6,114,6,179,6,115,6,179,6,114,6,179,6,115,6,180,6,116,6,180,6,115,6,180,6,116,6,181,6,117,6,181,6,116,6,181,6,117,6,182,6,118,6,182,6,117,6,182,6,118,6,183,6,119,6,183,6,118,6,183,6,119,6,184,6,120,6,184,6,119,6,184,6,120,6,185,6,121,6,185,6,120,6,185,6,121,6,186,6,122,6,186,6,121,6,186,6,122,6,187,6,123,6,187,6,122,6,187,6,123,6,188,6,124,6,188,6,123,6,188,6,124,6,189,6,125,6,189,6,124,6,189,6,125,6,190,6,126,6,190,6,125,6,190,6,126,6,191,6,127,6,191,6,126,6,192,6,128,6,193,6,129,6,193,6,128,6,193,6,129,6,194,6,130,6,194,6,129,6,194,6,130,6,195,6,131,6,195,6,130,6,195,6,131,6,196,6,132,6,196,6,131,6,196,6,132,6,197,6,133,6,197,6,132,6,197,6,133,6,198,6,134,6,198,6,133,6,198,6,134,6,199,6,135,6,199,6,134,6,199,6,135,6,200,6,136,6,200,6,135,6,200,6,136,6,201,6,137,6,201,6,136,6,201,6,137,6,202,6,138,6,202,6,137,6,202,6,138,6,203,6,139,6,203,6,138,6,203,6,139,6,204,6,140,6,204,6,139,6,204,6,140,6,205,6,141,6,205,6,140,6,205,6,141,6,206,6,142,6,206,6,141,6,206,6,142,6,207,6,143,6,207,6,142,6,207,6,143,6,208,6,144,6,208,6,143,6,208,6,144,6,209,6,145,6,209,6,144,6,209,6,145,6,210,6,146,6,210,6,145,6,210,6,146,6,211,6,147,6,211,6,146,6,211,6,147,6,212,6,148,6,212,6,147,6,212,6,148,6,213,6,149,6,213,6,148,6,213,6,149,6,214,6,150,6,214,6,149,6,214,6,150,6,215,6,151,6,215,6,150,6,215,6,151,6,216,6,152,6,216,6,151,6,216,6,152,6,217,6,153,6,217,6,152,6,217,6,153,6,218,6,154,6,218,6,153,6,218,6,154,6,219,6,155,6,219,6,154,6,219,6,155,6,220,6,156,6,220,6,155,6,220,6,156,6,221,6,157,6,221,6,156,6,221,6,157,6,222,6,158,6,222,6,157,6,222,6,158,6,223,6,159,6,223,6,158,6,223,6,159,6,224,6,160,6,224,6,159,6,224,6,160,6,225,6,161,6,225,6,160,6,225,6,161,6,226,6,162,6,226,6,161,6,226,6,162,6,227,6,163,6,227,6,162,6,227,6,163,6,228,6,164,6,228,6,163,6,228,6,164,6,229,6,165,6,229,6,164,6,229,6,165,6,230,6,166,6,230,6,165,6,230,6,166,6,231,6,167,6,231,6,166,6,231,6,167,6,232,6,168,6,232,6,167,6,232,6,168,6,233,6,169,6,233,6,168,6,233,6,169,6,234,6,170,6,234,6,169,6,234,6,170,6,235,6,171,6,235,6,170,6,235,6,171,6,236,6,172,6,236,6,171,6,236,6,172,6,237,6,173,6,237,6,172,6,237,6,173,6,238,6,174,6,238,6,173,6,238,6,174,6,239,6,175,6,239,6,174,6,239,6,175,6,240,6,176,6,240,6,175,6,240,6,176,6,241,6,177,6,241,6,176,6,241,6,177,6,242,6,178,6,242,6,177,6,242,6,178,6,243,6,179,6,243,6,178,6,243,6,179,6,244,6,180,6,244,6,179,6,244,6,180,6,245,6,181,6,245,6,180,6,245,6,181,6,246,6,182,6,246,6,181,6,246,6,182,6,247,6,183,6,247,6,182,6,247,6,183,6,248,6,184,6,248,6,183,6,248,6,184,6,249,6,185,6,249,6,184,6,249,6,185,6,250,6,186,6,250,6,185,6,250,6,186,6,251,6,187,6,251,6,186,6,251,6,187,6,252,6,188,6,252,6,187,6,252,6,188,6,253,6,189,6,253,6,188,6,253,6,189,6,254,6,190,6,254,6,189,6,254,6,190,6,255,6,191,6,255,6,190,6,0,7,192,6,1,7,193,6,1,7,192,6,1,7,193,6,2,7,194,6,2,7,193,6,2,7,194,6,3,7,195,6,3,7,194,6,3,7,195,6,4,7,196,6,4,7,195,6,4,7,196,6,5,7,197,6,5,7,196,6,5,7,197,6,6,7,198,6,6,7,197,6,6,7,198,6,7,7,199,6,7,7,198,6,7,7,199,6,8,7,200,6,8,7,199,6,8,7,200,6,9,7,201,6,9,7,200,6,9,7,201,6,10,7,202,6,10,7,201,6,10,7,202,6,11,7,203,6,11,7,202,6,11,7,203,6,12,7,204,6,12,7,203,6,12,7,204,6,13,7,205,6,13,7,204,6,13,7,205,6,14,7,206,6,14,7,205,6,14,7,206,6,15,7,207,6,15,7,206,6,15,7,207,6,16,7,208,6,16,7,207,6,16,7,208,6,17,7,209,6,17,7,208,6,17,7,209,6,18,7,210,6,18,7,209,6,18,7,210,6,19,7,211,6,19,7,210,6,19,7,211,6,20,7,212,6,20,7,211,6,20,7,212,6,21,7,213,6,21,7,212,6,21,7,213,6,22,7,214,6,22,7,213,6,22,7,214,6,23,7,215,6,23,7,214,6,23,7,215,6,24,7,216,6,24,7,215,6,24,7,216,6,25,7,217,6,25,7,216,6,25,7,217,6,26,7,218,6,26,7,217,6,26,7,218,6,27,7,219,6,27,7,218,6,27,7,219,6,28,7,220,6,28,7,219,6,28,7,220,6,29,7,221,6,29,7,220,6,29,7,221,6,30,7,222,6,30,7,221,6,30,7,222,6,31,7,223,6,31,7,222,6,31,7,223,6,32,7,224,6,32,7,223,6,32,7,224,6,33,7,225,6,33,7,224,6,33,7,225,6,34,7,226,6,34,7,225,6,34,7,226,6,35,7,227,6,35,7,226,6,35,7,227,6,36,7,228,6,36,7,227,6,36,7,228,6,37,7,229,6,37,7,228,6,37,7,229,6,38,7,230,6,38,7,229,6,38,7,230,6,39,7,231,6,39,7,230,6,39,7,231,6,40,7,232,6,40,7,231,6,40,7,232,6,41,7,233,6,41,7,232,6,41,7,233,6,42,7,234,6,42,7,233,6,42,7,234,6,43,7,235,6,43,7,234,6,43,7,235,6,44,7,236,6,44,7,235,6,44,7,236,6,45,7,237,6,45,7,236,6,45,7,237,6,46,7,238,6,46,7,237,6,46,7,238,6,47,7,239,6,47,7,238,6,47,7,239,6,48,7,240,6,48,7,239,6,48,7,240,6,49,7,241,6,49,7,240,6,49,7,241,6,50,7,242,6,50,7,241,6,50,7,242,6,51,7,243,6,51,7,242,6,51,7,243,6,52,7,244,6,52,7,243,6,52,7,244,6,53,7,245,6,53,7,244,6,53,7,245,6,54,7,246,6,54,7,245,6,54,7,246,6,55,7,247,6,55,7,246,6,55,7,247,6,56,7,248,6,56,7,247,6,56,7,248,6,57,7,249,6,57,7,248,6,57,7,249,6,58,7,250,6,58,7,249,6,58,7,250,6,59,7,251,6,59,7,250,6,59,7,251,6,60,7,252,6,60,7,251,6,60,7,252,6,61,7,253,6,61,7,252,6,61,7,253,6,62,7,254,6,62,7,253,6,62,7,254,6,63,7,255,6,63,7,254,6,64,7,0,7,65,7,1,7,65,7,0,7,65,7,1,7,66,7,2,7,66,7,1,7,66,7,2,7,67,7,3,7,67,7,2,7,67,7,3,7,68,7,4,7,68,7,3,7,68,7,4,7,69,7,5,7,69,7,4,7,69,7,5,7,70,7,6,7,70,7,5,7,70,7,6,7,71,7,7,7,71,7,6,7,71,7,7,7,72,7,8,7,72,7,7,7,72,7,8,7,73,7,9,7,73,7,8,7,73,7,9,7,74,7,10,7,74,7,9,7,74,7,10,7,75,7,11,7,75,7,10,7,75,7,11,7,76,7,12,7,76,7,11,7,76,7,12,7,77,7,13,7,77,7,12,7,77,7,13,7,78,7,14,7,78,7,13,7,78,7,14,7,79,7,15,7,79,7,14,7,79,7,15,7,80,7,16,7,80,7,15,7,80,7,16,7,81,7,17,7,81,7,16,7,81,7,17,7,82,7,18,7,82,7,17,7,82,7,18,7,83,7,19,7,83,7,18,7,83,7,19,7,84,7,20,7,84,7,19,7,84,7,20,7,85,7,21,7,85,7,20,7,85,7,21,7,86,7,22,7,86,7,21,7,86,7,22,7,87,7,23,7,87,7,22,7,87,7,23,7,88,7,24,7,88,7,23,7,88,7,24,7,89,7,25,7,89,7,24,7,89,7,25,7,90,7,26,7,90,7,25,7,90,7,26,7,91,7,27,7,91,7,26,7,91,7,27,7,92,7,28,7,92,7,27,7,92,7,28,7,93,7,29,7,93,7,28,7,93,7,29,7,94,7,30,7,94,7,29,7,94,7,30,7,95,7,31,7,95,7,30,7,95,7,31,7,96,7,32,7,96,7,31,7,96,7,32,7,97,7,33,7,97,7,32,7,97,7,33,7,98,7,34,7,98,7,33,7,98,7,34,7,99,7,35,7,99,7,34,7,99,7,35,7,100,7,36,7,100,7,35,7,100,7,36,7,101,7,37,7,101,7,36,7,101,7,37,7,102,7,38,7,102,7,37,7,102,7,38,7,103,7,39,7,103,7,38,7,103,7,39,7,104,7,40,7,104,7,39,7,104,7,40,7,105,7,41,7,105,7,40,7,105,7,41,7,106,7,42,7,106,7,41,7,106,7,42,7,107,7,43,7,107,7,42,7,107,7,43,7,108,7,44,7,108,7,43,7,108,7,44,7,109,7,45,7,109,7,44,7,109,7,45,7,110,7,46,7,110,7,45,7,110,7,46,7,111,7,47,7,111,7,46,7,111,7,47,7,112,7,48,7,112,7,47,7,112,7,48,7,113,7,49,7,113,7,48,7,113,7,49,7,114,7,50,7,114,7,49,7,114,7,50,7,115,7,51,7,115,7,50,7,115,7,51,7,116,7,52,7,116,7,51,7,116,7,52,7,117,7,53,7,117,7,52,7,117,7,53,7,118,7,54,7,118,7,53,7,118,7,54,7,119,7,55,7,119,7,54,7,119,7,55,7,120,7,56,7,120,7,55,7,120,7,56,7,121,7,57,7,121,7,56,7,121,7,57,7,122,7,58,7,122,7,57,7,122,7,58,7,123,7,59,7,123,7,58,7,123,7,59,7,124,7,60,7,124,7,59,7,124,7,60,7,125,7,61,7,125,7,60,7,125,7,61,7,126,7,62,7,126,7,61,7,126,7,62,7,127,7,63,7,127,7,62,7,128,7,64,7,129,7,65,7,129,7,64,7,129,7,65,7,130,7,66,7,130,7,65,7,130,7,66,7,131,7,67,7,131,7,66,7,131,7,67,7,132,7,68,7,132,7,67,7,132,7,68,7,133,7,69,7,133,7,68,7,133,7,69,7,134,7,70,7,134,7,69,7,134,7,70,7,135,7,71,7,135,7,70,7,135,7,71,7,136,7,72,7,136,7,71,7,136,7,72,7,137,7,73,7,137,7,72,7,137,7,73,7,138,7,74,7,138,7,73,7,138,7,74,7,139,7,75,7,139,7,74,7,139,7,75,7,140,7,76,7,140,7,75,7,140,7,76,7,141,7,77,7,141,7,76,7,141,7,77,7,142,7,78,7,142,7,77,7,142,7,78,7,143,7,79,7,143,7,78,7,143,7,79,7,144,7,80,7,144,7,79,7,144,7,80,7,145,7,81,7,145,7,80,7,145,7,81,7,146,7,82,7,146,7,81,7,146,7,82,7,147,7,83,7,147,7,82,7,147,7,83,7,148,7,84,7,148,7,83,7,148,7,84,7,149,7,85,7,149,7,84,7,149,7,85,7,150,7,86,7,150,7,85,7,150,7,86,7,151,7,87,7,151,7,86,7,151,7,87,7,152,7,88,7,152,7,87,7,152,7,88,7,153,7,89,7,153,7,88,7,153,7,89,7,154,7,90,7,154,7,89,7,154,7,90,7,155,7,91,7,155,7,90,7,155,7,91,7,156,7,92,7,156,7,91,7,156,7,92,7,157,7,93,7,157,7,92,7,157,7,93,7,158,7,94,7,158,7,93,7,158,7,94,7,159,7,95,7,159,7,94,7,159,7,95,7,160,7,96,7,160,7,95,7,160,7,96,7,161,7,97,7,161,7,96,7,161,7,97,7,162,7,98,7,162,7,97,7,162,7,98,7,163,7,99,7,163,7,98,7,163,7,99,7,164,7,100,7,164,7,99,7,164,7,100,7,165,7,101,7,165,7,100,7,165,7,101,7,166,7,102,7,166,7,101,7,166,7,102,7,167,7,103,7,167,7,102,7,167,7,103,7,168,7,104,7,168,7,103,7,168,7,104,7,169,7,105,7,169,7,104,7,169,7,105,7,170,7,106,7,170,7,105,7,170,7,106,7,171,7,107,7,171,7,106,7,171,7,107,7,172,7,108,7,172,7,107,7,172,7,108,7,173,7,109,7,173,7,108,7,173,7,109,7,174,7,110,7,174,7,109,7,174,7,110,7,175,7,111,7,175,7,110,7,175,7,111,7,176,7,112,7,176,7,111,7,176,7,112,7,177,7,113,7,177,7,112,7,177,7,113,7,178,7,114,7,178,7,113,7,178,7,114,7,179,7,115,7,179,7,114,7,179,7,115,7,180,7,116,7,180,7,115,7,180,7,116,7,181,7,117,7,181,7,116,7,181,7,117,7,182,7,118,7,182,7,117,7,182,7,118,7,183,7,119,7,183,7,118,7,183,7,119,7,184,7,120,7,184,7,119,7,184,7,120,7,185,7,121,7,185,7,120,7,185,7,121,7,186,7,122,7,186,7,121,7,186,7,122,7,187,7,123,7,187,7,122,7,187,7,123,7,188,7,124,7,188,7,123,7,188,7,124,7,189,7,125,7,189,7,124,7,189,7,125,7,190,7,126,7,190,7,125,7,190,7,126,7,191,7,127,7,191,7,126,7,192,7,128,7,193,7,129,7,193,7,128,7,193,7,129,7,194,7,130,7,194,7,129,7,194,7,130,7,195,7,131,7,195,7,130,7,195,7,131,7,196,7,132,7,196,7,131,7,196,7,132,7,197,7,133,7,197,7,132,7,197,7,133,7,198,7,134,7,198,7,133,7,198,7,134,7,199,7,135,7,199,7,134,7,199,7,135,7,200,7,136,7,200,7,135,7,200,7,136,7,201,7,137,7,201,7,136,7,201,7,137,7,202,7,138,7,202,7,137,7,202,7,138,7,203,7,139,7,203,7,138,7,203,7,139,7,204,7,140,7,204,7,139,7,204,7,140,7,205,7,141,7,205,7,140,7,205,7,141,7,206,7,142,7,206,7,141,7,206,7,142,7,207,7,143,7,207,7,142,7,207,7,143,7,208,7,144,7,208,7,143,7,208,7,144,7,209,7,145,7,209,7,144,7,209,7,145,7,210,7,146,7,210,7,145,7,210,7,146,7,211,7,147,7,211,7,146,7,211,7,147,7,212,7,148,7,212,7,147,7,212,7,148,7,213,7,149,7,213,7,148,7,213,7,149,7,214,7,150,7,214,7,149,7,214,7,150,7,215,7,151,7,215,7,150,7,215,7,151,7,216,7,152,7,216,7,151,7,216,7,152,7,217,7,153,7,217,7,152,7,217,7,153,7,218,7,154,7,218,7,153,7,218,7,154,7,219,7,155,7,219,7,154,7,219,7,155,7,220,7,156,7,220,7,155,7,220,7,156,7,221,7,157,7,221,7,156,7,221,7,157,7,222,7,158,7,222,7,157,7,222,7,158,7,223,7,159,7,223,7,158,7,223,7,159,7,224,7,160,7,224,7,159,7,224,7,160,7,225,7,161,7,225,7,160,7,225,7,161,7,226,7,162,7,226,7,161,7,226,7,162,7,227,7,163,7,227,7,162,7,227,7,163,7,228,7,164,7,228,7,163,7,228,7,164,7,229,7,165,7,229,7,164,7,229,7,165,7,230,7,166,7,230,7,165,7,230,7,166,7,231,7,167,7,231,7,166,7,231,7,167,7,232,7,168,7,232,7,167,7,232,7,168,7,233,7,169,7,233,7,168,7,233,7,169,7,234,7,170,7,234,7,169,7,234,7,170,7,235,7,171,7,235,7,170,7,235,7,171,7,236,7,172,7,236,7,171,7,236,7,172,7,237,7,173,7,237,7,172,7,237,7,173,7,238,7,174,7,238,7,173,7,238,7,174,7,239,7,175,7,239,7,174,7,239,7,175,7,240,7,176,7,240,7,175,7,240,7,176,7,241,7,177,7,241,7,176,7,241,7,177,7,242,7,178,7,242,7,177,7,242,7,178,7,243,7,179,7,243,7,178,7,243,7,179,7,244,7,180,7,244,7,179,7,244,7,180,7,245,7,181,7,245,7,180,7,245,7,181,7,246,7,182,7,246,7,181,7,246,7,182,7,247,7,183,7,247,7,182,7,247,7,183,7,248,7,184,7,248,7,183,7,248,7,184,7,249,7,185,7,249,7,184,7,249,7,185,7,250,7,186,7,250,7,185,7,250,7,186,7,251,7,187,7,251,7,186,7,251,7,187,7,252,7,188,7,252,7,187,7,252,7,188,7,253,7,189,7,253,7,188,7,253,7,189,7,254,7,190,7,254,7,189,7,254,7,190,7,255,7,191,7,255,7,190,7,0,8,192,7,1,8,193,7,1,8,192,7,1,8,193,7,2,8,194,7,2,8,193,7,2,8,194,7,3,8,195,7,3,8,194,7,3,8,195,7,4,8,196,7,4,8,195,7,4,8,196,7,5,8,197,7,5,8,196,7,5,8,197,7,6,8,198,7,6,8,197,7,6,8,198,7,7,8,199,7,7,8,198,7,7,8,199,7,8,8,200,7,8,8,199,7,8,8,200,7,9,8,201,7,9,8,200,7,9,8,201,7,10,8,202,7,10,8,201,7,10,8,202,7,11,8,203,7,11,8,202,7,11,8,203,7,12,8,204,7,12,8,203,7,12,8,204,7,13,8,205,7,13,8,204,7,13,8,205,7,14,8,206,7,14,8,205,7,14,8,206,7,15,8,207,7,15,8,206,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133120);
/* memory initializer */ allocate([15,8,207,7,16,8,208,7,16,8,207,7,16,8,208,7,17,8,209,7,17,8,208,7,17,8,209,7,18,8,210,7,18,8,209,7,18,8,210,7,19,8,211,7,19,8,210,7,19,8,211,7,20,8,212,7,20,8,211,7,20,8,212,7,21,8,213,7,21,8,212,7,21,8,213,7,22,8,214,7,22,8,213,7,22,8,214,7,23,8,215,7,23,8,214,7,23,8,215,7,24,8,216,7,24,8,215,7,24,8,216,7,25,8,217,7,25,8,216,7,25,8,217,7,26,8,218,7,26,8,217,7,26,8,218,7,27,8,219,7,27,8,218,7,27,8,219,7,28,8,220,7,28,8,219,7,28,8,220,7,29,8,221,7,29,8,220,7,29,8,221,7,30,8,222,7,30,8,221,7,30,8,222,7,31,8,223,7,31,8,222,7,31,8,223,7,32,8,224,7,32,8,223,7,32,8,224,7,33,8,225,7,33,8,224,7,33,8,225,7,34,8,226,7,34,8,225,7,34,8,226,7,35,8,227,7,35,8,226,7,35,8,227,7,36,8,228,7,36,8,227,7,36,8,228,7,37,8,229,7,37,8,228,7,37,8,229,7,38,8,230,7,38,8,229,7,38,8,230,7,39,8,231,7,39,8,230,7,39,8,231,7,40,8,232,7,40,8,231,7,40,8,232,7,41,8,233,7,41,8,232,7,41,8,233,7,42,8,234,7,42,8,233,7,42,8,234,7,43,8,235,7,43,8,234,7,43,8,235,7,44,8,236,7,44,8,235,7,44,8,236,7,45,8,237,7,45,8,236,7,45,8,237,7,46,8,238,7,46,8,237,7,46,8,238,7,47,8,239,7,47,8,238,7,47,8,239,7,48,8,240,7,48,8,239,7,48,8,240,7,49,8,241,7,49,8,240,7,49,8,241,7,50,8,242,7,50,8,241,7,50,8,242,7,51,8,243,7,51,8,242,7,51,8,243,7,52,8,244,7,52,8,243,7,52,8,244,7,53,8,245,7,53,8,244,7,53,8,245,7,54,8,246,7,54,8,245,7,54,8,246,7,55,8,247,7,55,8,246,7,55,8,247,7,56,8,248,7,56,8,247,7,56,8,248,7,57,8,249,7,57,8,248,7,57,8,249,7,58,8,250,7,58,8,249,7,58,8,250,7,59,8,251,7,59,8,250,7,59,8,251,7,60,8,252,7,60,8,251,7,60,8,252,7,61,8,253,7,61,8,252,7,61,8,253,7,62,8,254,7,62,8,253,7,62,8,254,7,63,8,255,7,63,8,254,7,0,0,122,195,136,130,125,191,0,0,0,0,0,0,122,195,100,59,15,62,0,0,122,64,16,24,118,195,235,198,43,63,0,0,0,0,16,24,118,195,0,111,221,63,0,0,122,64,33,48,114,195,232,164,235,63,0,0,0,0,33,48,114,195,99,122,38,64,0,0,122,64,240,71,110,195,140,21,107,64,102,102,44,180,240,71,110,195,68,110,128,64,0,0,122,64,0,96,106,195,223,253,158,64,252,49,105,180,0,96,106,195,137,94,164,64,0,0,122,64,16,120,102,195,34,253,209,64,32,255,153,180,16,120,102,195,245,74,214,64,0,0,122,64,33,144,98,195,250,208,4,65,150,205,194,180,33,144,98,195,152,233,6,65,0,0,122,64,240,167,94,195,2,26,31,65,55,91,233,180,240,167,94,195,201,89,29,65,0,0,122,64,0,192,90,195,222,147,57,65,58,24,8,181,0,192,90,195,254,212,53,65,0,0,122,64,16,216,86,195,142,6,101,65,23,245,39,181,16,216,86,195,80,141,99,65,0,0,122,64,33,240,82,195,47,110,132,65,186,60,66,181,33,240,82,195,10,104,129,65,0,0,122,64,240,7,79,195,229,208,150,65,3,52,93,181,240,7,79,195,54,77,151,65,0,0,122,64,0,32,75,195,116,70,172,65,182,173,124,181,0,32,75,195,127,251,169,65,0,0,122,64,16,56,71,195,158,222,181,65,16,96,133,181,16,56,71,195,161,120,184,65,0,0,122,64,33,80,67,195,5,197,195,65,149,145,143,181,33,80,67,195,236,209,196,65,0,0,122,64,240,103,63,195,105,239,208,65,108,57,153,181,240,103,63,195,176,131,206,65,0,0,122,64,0,128,59,195,139,253,215,65,165,101,158,181,0,128,59,195,138,142,220,65,0,0,122,64,16,152,55,195,77,21,227,65,136,136,166,181,16,152,55,195,165,189,233,65,0,0,122,64,33,176,51,195,152,93,232,65,40,104,170,181,33,176,51,195,207,119,237,65,0,0,122,64,240,199,47,195,127,106,238,65,22,216,174,181,240,199,47,195,204,238,245,65,0,0,122,64,0,224,43,195,72,63,241,65,162,235,176,181,0,224,43,195,37,134,251,65,0,0,122,64,16,248,39,195,179,123,1,66,0,234,189,181,16,248,39,195,24,85,4,66,0,0,122,64,33,16,36,195,203,225,11,66,164,42,205,181,33,16,36,195,113,125,10,66,0,0,122,64,240,39,32,195,129,149,17,66,152,135,213,181,240,39,32,195,46,255,13,66,0,0,122,64,0,64,28,195,198,45,21,66,63,205,218,181,0,64,28,195,129,166,21,66,0,0,122,64,16,88,24,195,244,253,24,66,4,101,224,181,16,88,24,195,223,207,25,66,0,0,122,64,33,112,20,195,57,69,25,66,120,205,224,181,33,112,20,195,86,253,27,66,0,0,122,64,240,135,16,195,183,162,24,66,91,223,223,181,240,135,16,195,254,37,27,66,0,0,122,64,0,160,12,195,166,91,18,66,71,170,214,181,0,160,12,195,141,104,22,66,0,0,122,64,16,184,8,195,59,223,14,66,44,141,209,181,16,184,8,195,3,184,16,66,0,0,122,64,33,208,4,195,242,1,7,66,76,4,198,181,33,208,4,195,96,246,11,66,0,0,122,64,240,231,0,195,38,36,5,66,180,71,195,181,240,231,0,195,136,133,8,66,0,0,122,64,0,0,250,194,232,153,5,66,48,244,195,181,0,0,250,194,36,104,9,66,0,0,122,64,33,48,242,194,235,115,4,66,249,68,194,181,33,48,242,194,18,165,6,66,0,0,122,64,66,96,234,194,247,36,3,66,249,89,192,181,66,96,234,194,157,209,2,66,0,0,122,64,223,143,226,194,202,3,4,66,188,160,193,181,223,143,226,194,77,149,1,66,0,0,122,64,0,192,218,194,49,8,2,66,40,184,190,181,0,192,218,194,135,167,248,65,0,0,122,64,33,240,210,194,11,181,254,65,115,202,186,181,33,240,210,194,249,160,247,65,0,0,122,64,66,32,203,194,133,124,249,65,42,246,182,181,66,32,203,194,98,144,238,65,0,0,122,64,7,80,195,194,38,100,237,65,172,23,174,181,7,80,195,194,57,214,227,65,0,0,122,64,0,128,187,194,61,155,222,65,192,63,163,181,0,128,187,194,249,49,221,65,0,0,122,64,7,176,179,194,159,60,207,65,56,250,151,181,7,176,179,194,169,147,204,65,0,0,122,64,0,224,171,194,25,98,187,65,56,107,137,181,0,224,171,194,229,208,193,65,0,0,122,64,7,16,164,194,210,239,186,65,97,23,137,181,7,16,164,194,188,22,186,65,0,0,122,64,0,64,156,194,207,119,184,65,222,71,135,181,0,64,156,194,212,171,179,65,0,0,122,64,7,112,148,194,124,97,191,65,163,89,140,181,7,112,148,194,14,207,185,65,0,0,122,64,0,160,140,194,193,40,189,65,130,184,138,181,0,160,140,194,31,5,188,65,0,0,122,64,7,208,132,194,48,59,186,65,192,146,136,181,7,208,132,194,200,135,189,65,0,0,122,64,0,0,122,194,61,172,196,65,82,59,144,181,0,0,122,194,145,109,197,65,0,0,122,64,13,96,106,194,20,174,205,65,41,214,150,181,13,96,106,194,241,244,203,65,0,0,122,64,0,192,90,194,201,229,215,65,119,84,158,181,0,192,90,194,17,199,207,65,0,0,122,64,13,32,75,194,213,231,222,65,26,120,163,181,13,32,75,194,228,148,209,65,0,0,122,64,0,128,59,194,196,66,224,65,93,118,164,181,0,128,59,194,202,212,214,65,0,0,122,64,13,224,43,194,91,177,224,65,115,199,164,181,13,224,43,194,125,208,221,65,0,0,122,64,0,64,28,194,131,47,241,65,243,223,176,181,0,64,28,194,5,163,233,65,0,0,122,64,13,160,12,194,158,158,1,66,50,29,190,181,13,160,12,194,236,81,254,65,0,0,122,64,0,0,250,193,183,226,9,66,233,60,202,181,0,0,250,193,46,16,9,66,0,0,122,64,26,192,218,193,52,17,21,66,84,163,218,181,26,192,218,193,50,247,15,66,0,0,122,64,0,128,187,193,113,44,27,66,39,152,227,181,0,128,187,193,170,130,25,66,0,0,122,64,26,64,156,193,15,156,33,66,4,9,237,181,26,64,156,193,114,138,31,66,0,0,122,64,0,0,122,193,83,69,43,66,96,52,251,181,0,0,122,193,254,148,44,66,0,0,122,64,52,128,59,193,70,20,52,66,236,15,4,182,52,128,59,193,11,6,54,66,0,0,122,64,0,0,250,192,138,240,58,66,229,23,9,182,0,0,250,192,235,179,61,66,0,0,122,64,0,0,122,192,6,129,65,66,53,232,13,182,0,0,122,192,224,156,71,66,0,0,122,64,0,0,0,0,61,155,71,66,239,97,18,182,0,0,0,0,249,32,80,66,0,0,122,64,0,0,122,64,199,139,73,66,250,205,19,182,0,0,122,64,114,121,82,66,0,0,122,64,0,0,122,195,51,169,81,191,0,0,122,192,16,24,118,195,8,227,43,63,0,0,122,192,33,48,114,195,183,98,53,64,0,0,122,192,240,71,110,195,153,100,134,64,0,0,122,192,0,96,106,195,57,238,178,64,0,0,122,192,16,120,102,195,215,23,222,64,0,0,122,192,33,144,98,195,45,137,5,65,0,0,122,192,240,167,94,195,164,170,29,65,0,0,122,192,0,192,90,195,229,97,46,65,0,0,122,192,16,216,86,195,116,36,90,65,0,0,122,192,33,240,82,195,194,23,132,65,0,0,122,192,240,7,79,195,85,176,141,65,0,0,122,192,0,32,75,195,31,244,165,65,0,0,122,192,16,56,71,195,233,72,180,65,0,0,122,192,33,80,67,195,190,48,195,65,0,0,122,192,240,103,63,195,25,115,206,65,0,0,122,192,0,128,59,195,109,197,215,65,0,0,122,192,16,152,55,195,232,234,221,65,0,0,122,192,33,176,51,195,213,231,230,65,0,0,122,192,240,199,47,195,26,192,239,65,0,0,122,192,0,224,43,195,178,157,0,66,0,0,122,192,16,248,39,195,5,133,5,66,0,0,122,192,33,16,36,195,132,141,13,66,0,0,122,192,240,39,32,195,240,231,15,66,0,0,122,192,0,64,28,195,86,31,18,66,0,0,122,192,16,88,24,195,29,73,21,66,0,0,122,192,33,112,20,195,26,64,19,66,0,0,122,192,240,135,16,195,173,41,18,66,0,0,122,192,0,160,12,195,180,200,14,66,0,0,122,192,16,184,8,195,247,117,12,66,0,0,122,192,33,208,4,195,3,201,8,66,0,0,122,192,240,231,0,195,131,81,8,66,0,0,122,192,0,0,250,194,142,245,8,66,0,0,122,192,33,48,242,194,232,153,8,66,0,0,122,192,66,96,234,194,230,46,7,66,0,0,122,192,223,143,226,194,139,108,7,66,0,0,122,192,0,192,218,194,254,20,5,66,0,0,122,192,33,240,210,194,84,82,2,66,0,0,122,192,66,32,203,194,186,73,255,65,0,0,122,192,7,80,195,194,201,246,242,65,0,0,122,192,0,128,187,194,105,128,232,65,0,0,122,192,7,176,179,194,37,117,213,65,0,0,122,192,0,224,171,194,175,165,198,65,0,0,122,192,7,16,164,194,100,221,190,65,0,0,122,192,0,64,156,194,222,2,187,65,0,0,122,192,7,112,148,194,101,170,191,65,0,0,122,192,0,160,140,194,61,10,193,65,0,0,122,192,7,208,132,194,114,138,195,65,0,0,122,192,0,0,122,194,212,171,204,65,0,0,122,192,13,96,106,194,234,132,213,65,0,0,122,192,0,192,90,194,208,68,223,65,0,0,122,192,13,32,75,194,212,26,228,65,0,0,122,192,0,128,59,194,240,22,234,65,0,0,122,192,13,224,43,194,48,170,235,65,0,0,122,192,0,64,28,194,119,45,247,65,0,0,122,192,13,160,12,194,78,162,3,66,0,0,122,192,0,0,250,193,125,174,11,66,0,0,122,192,26,192,218,193,163,227,22,66,0,0,122,192,0,128,187,193,27,175,27,66,0,0,122,192,26,64,156,193,118,49,33,66,0,0,122,192,0,0,122,193,91,19,39,66,0,0,122,192,52,128,59,193,238,90,47,66,0,0,122,192,0,0,250,192,35,10,51,66,0,0,122,192,0,0,122,192,184,30,58,66,0,0,122,192,0,0,0,0,204,255,64,66,0,0,122,192,0,0,122,64,113,108,67,66,0,0,122,192,0,0,122,195,190,160,221,62,0,0,250,192,16,24,118,195,179,41,247,63,0,0,250,192,33,48,114,195,85,106,82,64,0,0,250,192,240,71,110,195,239,254,144,64,0,0,250,192,0,96,106,195,231,169,181,64,0,0,250,192,16,120,102,195,218,230,234,64,0,0,250,192,33,144,98,195,187,196,7,65,0,0,250,192,240,167,94,195,49,8,34,65,0,0,250,192,0,192,90,195,42,58,53,65,0,0,250,192,16,216,86,195,45,67,86,65,0,0,250,192,33,240,82,195,177,80,120,65,0,0,250,192,240,7,79,195,188,133,143,65,0,0,250,192,0,32,75,195,228,131,164,65,0,0,250,192,16,56,71,195,108,9,183,65,0,0,250,192,33,80,67,195,82,184,189,65,0,0,250,192,240,103,63,195,179,12,209,65,0,0,250,192,0,128,59,195,107,154,224,65,0,0,250,192,16,152,55,195,142,245,232,65,0,0,250,192,33,176,51,195,132,158,236,65,0,0,250,192,240,199,47,195,11,36,242,65,0,0,250,192,0,224,43,195,184,158,254,65,0,0,250,192,16,248,39,195,211,252,5,66,0,0,250,192,33,16,36,195,43,199,9,66,0,0,250,192,240,39,32,195,106,141,13,66,0,0,250,192,0,64,28,195,87,27,16,66,0,0,250,192,16,88,24,195,8,125,16,66,0,0,250,192,33,112,20,195,50,21,19,66,0,0,250,192,240,135,16,195,16,58,17,66,0,0,250,192,0,160,12,195,2,235,16,66,0,0,250,192,16,184,8,195,66,190,14,66,0,0,250,192,33,208,4,195,40,126,10,66,0,0,250,192,240,231,0,195,133,171,8,66,0,0,250,192,0,0,250,194,208,179,8,66,0,0,250,192,33,48,242,194,202,148,6,66,0,0,250,192,66,96,234,194,163,1,9,66,0,0,250,192,223,143,226,194,121,233,8,66,0,0,250,192,0,192,218,194,18,3,9,66,0,0,250,192,33,240,210,194,29,184,4,66,0,0,250,192,66,32,203,194,182,243,0,66,0,0,250,192,7,80,195,194,54,77,248,65,0,0,250,192,0,128,187,194,158,111,237,65,0,0,250,192,7,176,179,194,72,191,220,65,0,0,250,192,0,224,171,194,216,240,205,65,0,0,250,192,7,16,164,194,104,51,195,65,0,0,250,192,0,64,156,194,168,70,195,65,0,0,250,192,7,112,148,194,249,49,201,65,0,0,250,192,0,160,140,194,135,39,200,65,0,0,250,192,7,208,132,194,33,31,203,65,0,0,250,192,0,0,122,194,189,227,206,65,0,0,250,192,13,96,106,194,3,137,214,65,0,0,250,192,0,192,90,194,243,142,224,65,0,0,250,192,13,32,75,194,242,210,231,65,0,0,250,192,0,128,59,194,180,217,232,65,0,0,250,192,13,224,43,194,87,219,244,65,0,0,250,192,0,64,28,194,172,156,253,65,0,0,250,192,13,160,12,194,222,113,2,66,0,0,250,192,0,0,250,193,4,103,10,66,0,0,250,192,26,192,218,193,182,51,17,66,0,0,250,192,0,128,187,193,30,231,25,66,0,0,250,192,26,64,156,193,60,206,30,66,0,0,250,192,0,0,122,193,212,26,35,66,0,0,250,192,52,128,59,193,77,149,42,66,0,0,250,192,0,0,250,192,112,31,52,66,0,0,250,192,0,0,122,192,247,36,61,66,0,0,250,192,0,0,0,0,133,60,66,66,0,0,250,192,0,0,122,64,215,227,66,66,0,0,250,192,0,0,122,195,183,123,17,63,52,128,59,193,16,24,118,195,58,93,234,63,52,128,59,193,33,48,114,195,241,128,84,64,52,128,59,193,240,71,110,195,193,86,137,64,52,128,59,193,0,96,106,195,240,80,193,64,52,128,59,193,16,120,102,195,91,153,224,64,52,128,59,193,33,144,98,195,26,122,15,65,52,128,59,193,240,167,94,195,151,255,37,65,52,128,59,193,0,192,90,195,135,22,57,65,52,128,59,193,16,216,86,195,21,140,94,65,52,128,59,193,33,240,82,195,167,121,122,65,52,128,59,193,240,7,79,195,140,185,145,65,52,128,59,193,0,32,75,195,194,23,160,65,52,128,59,193,16,56,71,195,186,90,172,65,52,128,59,193,33,80,67,195,116,164,187,65,52,128,59,193,240,103,63,195,239,56,210,65,52,128,59,193,0,128,59,195,53,111,224,65,52,128,59,193,16,152,55,195,39,32,234,65,52,128,59,193,33,176,51,195,199,41,237,65,52,128,59,193,240,199,47,195,141,151,245,65,52,128,59,193,0,224,43,195,77,149,246,65,52,128,59,193,16,248,39,195,25,243,3,66,52,128,59,193,33,16,36,195,242,82,6,66,52,128,59,193,240,39,32,195,199,139,10,66,52,128,59,193,0,64,28,195,17,118,14,66,52,128,59,193,16,88,24,195,20,255,16,66,52,128,59,193,33,112,20,195,202,50,17,66,52,128,59,193,240,135,16,195,178,46,18,66,52,128,59,193,0,160,12,195,109,133,17,66,52,128,59,193,16,184,8,195,17,246,12,66,52,128,59,193,33,208,4,195,238,60,8,66,52,128,59,193,240,231,0,195,185,141,8,66,52,128,59,193,0,0,250,194,41,92,6,66,52,128,59,193,33,48,242,194,23,25,7,66,52,128,59,193,66,96,234,194,226,233,6,66,52,128,59,193,223,143,226,194,34,206,6,66,52,128,59,193,0,192,218,194,180,136,6,66,52,128,59,193,33,240,210,194,251,250,4,66,52,128,59,193,66,32,203,194,245,121,3,66,52,128,59,193,7,80,195,194,12,19,249,65,52,128,59,193,0,128,187,194,165,172,236,65,52,128,59,193,7,176,179,194,122,182,220,65,52,128,59,193,0,224,171,194,0,0,206,65,52,128,59,193,7,16,164,194,3,120,203,65,52,128,59,193,0,64,156,194,50,247,204,65,52,128,59,193,7,112,148,194,54,77,201,65,52,128,59,193,0,160,140,194,4,86,204,65,52,128,59,193,7,208,132,194,165,78,204,65,52,128,59,193,0,0,122,194,241,99,207,65,52,128,59,193,13,96,106,194,12,147,208,65,52,128,59,193,0,192,90,194,25,132,219,65,52,128,59,193,13,32,75,194,244,108,230,65,52,128,59,193,0,128,59,194,205,187,239,65,52,128,59,193,13,224,43,194,18,20,254,65,52,128,59,193,0,64,28,194,237,13,1,66,52,128,59,193,13,160,12,194,41,75,2,66,52,128,59,193,0,0,250,193,8,44,6,66,52,128,59,193,26,192,218,193,11,117,12,66,52,128,59,193,0,128,187,193,65,66,21,66,52,128,59,193,26,64,156,193,23,247,28,66,52,128,59,193,0,0,122,193,109,86,39,66,52,128,59,193,52,128,59,193,46,255,47,66,52,128,59,193,0,0,250,192,178,110,59,66,52,128,59,193,0,0,122,192,11,100,66,66,52,128,59,193,0,0,0,0,197,207,66,66,52,128,59,193,0,0,122,64,234,132,70,66,52,128,59,193,0,0,122,195,1,77,192,63,0,0,122,193,16,24,118,195,103,68,229,63,0,0,122,193,33,48,114,195,94,157,33,64,0,0,122,193,240,71,110,195,14,248,130,64,0,0,122,193,0,96,106,195,228,189,198,64,0,0,122,193,16,120,102,195,44,241,239,64,0,0,122,193,33,144,98,195,53,12,9,65,0,0,122,193,240,167,94,195,40,213,31,65,0,0,122,193,0,192,90,195,134,56,69,65,0,0,122,193,16,216,86,195,133,235,103,65,0,0,122,193,33,240,82,195,125,174,117,65,0,0,122,193,240,7,79,195,89,151,141,65,0,0,122,193,0,32,75,195,17,71,154,65,0,0,122,193,16,56,71,195,84,210,168,65,0,0,122,193,33,80,67,195,245,185,186,65,0,0,122,193,240,103,63,195,191,253,202,65,0,0,122,193,0,128,59,195,170,241,218,65,0,0,122,193,16,152,55,195,28,252,226,65,0,0,122,193,33,176,51,195,244,108,236,65,0,0,122,193,240,199,47,195,65,2,240,65,0,0,122,193,0,224,43,195,61,44,248,65,0,0,122,193,16,248,39,195,233,55,2,66,0,0,122,193,33,16,36,195,210,175,2,66,0,0,122,193,240,39,32,195,209,98,7,66,0,0,122,193,0,64,28,195,65,130,12,66,0,0,122,193,16,88,24,195,147,58,14,66,0,0,122,193,33,112,20,195,111,146,18,66,0,0,122,193,240,135,16,195,148,182,17,66,0,0,122,193,0,160,12,195,229,114,14,66,0,0,122,193,16,184,8,195,152,110,13,66,0,0,122,193,33,208,4,195,116,198,8,66,0,0,122,193,240,231,0,195,177,144,9,66,0,0,122,193,0,0,250,194,218,219,4,66,0,0,122,193,33,48,242,194,45,50,3,66,0,0,122,193,66,96,234,194,211,141,4,66,0,0,122,193,223,143,226,194,69,152,4,66,0,0,122,193,0,192,218,194,39,160,6,66,0,0,122,193,33,240,210,194,14,237,4,66,0,0,122,193,66,32,203,194,41,109,2,66,0,0,122,193,7,80,195,194,114,138,245,65,0,0,122,193,0,128,187,194,162,69,228,65,0,0,122,193,7,176,179,194,241,99,221,65,0,0,122,193,0,224,171,194,112,95,219,65,0,0,122,193,7,16,164,194,91,66,208,65,0,0,122,193,0,64,156,194,51,51,206,65,0,0,122,193,7,112,148,194,162,69,207,65,0,0,122,193,0,160,140,194,141,40,200,65,0,0,122,193,7,208,132,194,52,128,207,65,0,0,122,193,0,0,122,194,60,78,208,65,0,0,122,193,13,96,106,194,23,217,206,65,0,0,122,193,0,192,90,194,28,235,218,65,0,0,122,193,13,32,75,194,72,63,231,65,0,0,122,193,0,128,59,194,227,71,245,65,0,0,122,193,13,224,43,194,100,204,2,66,0,0,122,193,0,64,28,194,123,195,2,66,0,0,122,193,13,160,12,194,198,173,4,66,0,0,122,193,0,0,250,193,95,199,10,66,0,0,122,193,26,192,218,193,245,202,14,66,0,0,122,193,0,128,187,193,172,45,25,66,0,0,122,193,26,64,156,193,188,180,34,66,0,0,122,193,0,0,122,193,140,91,46,66,0,0,122,193,52,128,59,193,120,58,57,66,0,0,122,193,0,0,250,192,150,161,66,66,0,0,122,193,0,0,122,192,79,0,68,66,0,0,122,193,0,0,0,0,152,12,74,66,0,0,122,193,0,0,122,64,25,196,74,66,0,0,122,193,0,0,122,195,225,180,184,63,26,64,156,193,16,24,118,195,173,81,211,63,26,64,156,193,33,48,114,195,34,79,60,64,26,64,156,193,240,71,110,195,145,15,151,64,26,64,156,193,0,96,106,195,249,131,210,64,26,64,156,193,16,120,102,195,18,49,234,64,26,64,156,193,33,144,98,195,64,251,252,64,26,64,156,193,240,167,94,195,153,129,29,65,26,64,156,193,0,192,90,195,182,132,66,65,26,64,156,193,16,216,86,195,31,133,84,65,26,64,156,193,33,240,82,195,135,167,115,65,26,64,156,193,240,7,79,195,70,54,138,65,26,64,156,193,0,32,75,195,131,64,153,65,26,64,156,193,16,56,71,195,120,122,162,65,26,64,156,193,33,80,67,195,16,122,175,65,26,64,156,193,240,103,63,195,214,214,190,65,26,64,156,193,0,128,59,195,98,16,209,65,26,64,156,193,16,152,55,195,184,175,220,65,26,64,156,193,33,176,51,195,188,116,228,65,26,64,156,193,240,199,47,195,159,205,231,65,26,64,156,193,0,224,43,195,103,196,239,65,26,64,156,193,16,248,39,195,9,27,250,65,26,64,156,193,33,16,36,195,50,247,251,65,26,64,156,193,240,39,32,195,130,179,6,66,26,64,156,193,0,64,28,195,108,137,12,66,26,64,156,193,16,88,24,195,46,63,12,66,26,64,156,193,33,112,20,195,108,201,11,66,26,64,156,193,240,135,16,195,179,106,12,66,26,64,156,193,0,160,12,195,57,86,12,66,26,64,156,193,16,184,8,195,61,27,11,66,26,64,156,193,33,208,4,195,111,82,7,66,26,64,156,193,240,231,0,195,136,52,5,66,26,64,156,193,0,0,250,194,88,74,2,66,26,64,156,193,33,48,242,194,120,28,252,65,26,64,156,193,66,96,234,194,42,169,251,65,26,64,156,193,223,143,226,194,159,60,253,65,26,64,156,193,0,192,218,194,126,221,1,66,26,64,156,193,33,240,210,194,142,117,2,66,26,64,156,193,66,32,203,194,37,6,250,65,26,64,156,193,7,80,195,194,51,179,236,65,26,64,156,193,0,128,187,194,143,228,227,65,26,64,156,193,7,176,179,194,23,217,232,65,26,64,156,193,0,224,171,194,113,172,229,65,26,64,156,193,7,16,164,194,82,167,219,65,26,64,156,193,0,64,156,194,20,46,212,65,26,64,156,193,7,112,148,194,247,6,214,65,26,64,156,193,0,160,140,194,88,57,210,65,26,64,156,193,7,208,132,194,40,143,205,65,26,64,156,193,0,0,122,194,115,232,205,65,26,64,156,193,13,96,106,194,102,8,207,65,26,64,156,193,0,192,90,194,41,92,219,65,26,64,156,193,13,32,75,194,33,159,232,65,26,64,156,193,0,128,59,194,197,32,248,65,26,64,156,193,13,224,43,194,229,33,2,66,26,64,156,193,0,64,28,194,29,218,4,66,26,64,156,193,13,160,12,194,89,198,7,66,26,64,156,193,0,0,250,193,222,177,14,66,26,64,156,193,26,192,218,193,82,137,23,66,26,64,156,193,0,128,187,193,152,29,34,66,26,64,156,193,26,64,156,193,227,182,46,66,26,64,156,193,0,0,122,193,145,45,61,66,26,64,156,193,52,128,59,193,50,213,70,66,26,64,156,193,0,0,250,192,150,131,76,66,26,64,156,193,0,0,122,192,122,54,78,66,26,64,156,193,0,0,0,0,57,86,81,66,26,64,156,193,0,0,122,64,68,105,80,66,26,64,156,193,0,0,122,195,212,212,134,63,0,128,187,193,16,24,118,195,66,62,164,63,0,128,187,193,33,48,114,195,162,98,88,64,0,128,187,193,240,71,110,195,42,111,144,64,0,128,187,193,0,96,106,195,142,64,180,64,0,128,187,193,16,120,102,195,224,214,207,64,0,128,187,193,33,144,98,195,163,204,246,64,0,128,187,193,240,167,94,195,2,101,13,65,0,128,187,193,0,192,90,195,56,103,38,65,0,128,187,193,16,216,86,195,223,224,60,65,0,128,187,193,33,240,82,195,128,183,92,65,0,128,187,193,240,7,79,195,132,13,132,65,0,128,187,193,0,32,75,195,180,200,148,65,0,128,187,193,16,56,71,195,136,116,162,65,0,128,187,193,33,80,67,195,145,126,173,65,0,128,187,193,240,103,63,195,243,159,180,65,0,128,187,193,0,128,59,195,205,59,200,65,0,128,187,193,16,152,55,195,14,79,212,65,0,128,187,193,33,176,51,195,197,143,217,65,0,128,187,193,240,199,47,195,233,55,227,65,0,128,187,193,0,224,43,195,17,54,232,65,0,128,187,193,16,248,39,195,13,113,239,65,0,128,187,193,33,16,36,195,195,100,254,65,0,128,187,193,240,39,32,195,247,245,5,66,0,128,187,193,0,64,28,195,9,185,9,66,0,128,187,193,16,88,24,195,208,149,8,66,0,128,187,193,33,112,20,195,55,90,6,66,0,128,187,193,240,135,16,195,188,52,8,66,0,128,187,193,0,160,12,195,232,217,6,66,0,128,187,193,16,184,8,195,149,212,4,66,0,128,187,193,33,208,4,195,232,42,0,66,0,128,187,193,240,231,0,195,109,197,250,65,0,128,187,193,0,0,250,194,115,215,250,65,0,128,187,193,33,48,242,194,211,94,245,65,0,128,187,193,66,96,234,194,86,31,241,65,0,128,187,193,223,143,226,194,4,103,241,65,0,128,187,193,0,192,218,194,19,242,244,65,0,128,187,193,33,240,210,194,94,58,250,65,0,128,187,193,66,32,203,194,7,223,243,65,0,128,187,193,7,80,195,194,244,236,231,65,0,128,187,193,0,128,187,194,217,189,234,65,0,128,187,193,7,176,179,194,99,110,236,65,0,128,187,193,0,224,171,194,77,115,235,65,0,128,187,193,7,16,164,194,79,30,224,65,0,128,187,193,0,64,156,194,238,218,218,65,0,128,187,193,7,112,148,194,238,218,214,65,0,128,187,193,0,160,140,194,84,244,204,65,0,128,187,193,7,208,132,194,231,140,206,65,0,128,187,193,0,0,122,194,252,169,203,65,0,128,187,193,13,96,106,194,55,26,212,65,0,128,187,193,0,192,90,194,18,20,218,65,0,128,187,193,13,32,75,194,250,237,227,65,0,128,187,193,0,128,59,194,1,77,248,65,0,128,187,193,13,224,43,194,92,96,4,66,0,128,187,193,0,64,28,194,36,249,9,66,0,128,187,193,13,160,12,194,102,200,20,66,0,128,187,193,0,0,250,193,69,216,29,66,0,128,187,193,26,192,218,193,214,214,37,66,0,128,187,193,0,128,187,193,113,91,46,66,0,128,187,193,26,64,156,193,187,56,59,66,0,128,187,193,0,0,122,193,186,171,69,66,0,128,187,193,52,128,59,193,204,46,79,66,0,128,187,193,0,0,250,192,188,133,84,66,0,128,187,193,0,0,122,192,229,242,85,66,0,128,187,193,0,0,0,0,9,138,86,66,0,128,187,193,0,0,122,64,248,83,89,66,0,128,187,193,0,0,122,195,206,252,134,63,26,192,218,193,16,24,118,195,98,16,10,64,26,192,218,193,33,48,114,195,212,183,74,64,26,192,218,193,240,71,110,195,174,158,133,64,26,192,218,193,0,96,106,195,150,120,165,64,26,192,218,193,16,120,102,195,203,214,211,64,26,192,218,193,33,144,98,195,142,59,232,64,26,192,218,193,240,167,94,195,84,53,20,65,26,192,218,193,0,192,90,195,107,43,44,65,26,192,218,193,16,216,86,195,70,37,59,65,26,192,218,193,33,240,82,195,20,174,80,65,26,192,218,193,240,7,79,195,64,19,113,65,26,192,218,193,0,32,75,195,220,198,140,65,26,192,218,193,16,56,71,195,172,139,154,65,26,192,218,193,33,80,67,195,160,154,163,65,26,192,218,193,240,103,63,195,21,157,165,65,26,192,218,193,0,128,59,195,118,113,182,65,26,192,218,193,16,152,55,195,192,236,197,65,26,192,218,193,33,176,51,195,152,93,206,65,26,192,218,193,240,199,47,195,184,175,227,65,26,192,218,193,0,224,43,195,89,6,236,65,26,192,218,193,16,248,39,195,179,12,239,65,26,192,218,193,33,16,36,195,148,246,251,65,26,192,218,193,240,39,32,195,212,107,2,66,26,192,218,193,0,64,28,195,168,181,3,66,26,192,218,193,16,88,24,195,168,151,2,66,26,192,218,193,33,112,20,195,75,200,1,66,26,192,218,193,240,135,16,195,168,6,0,66,26,192,218,193,0,160,12,195,190,31,254,65,26,192,218,193,16,184,8,195,3,120,253,65,26,192,218,193,33,208,4,195,197,254,247,65,26,192,218,193,240,231,0,195,131,64,243,65,26,192,218,193,0,0,250,194,127,251,237,65,26,192,218,193,33,48,242,194,200,24,235,65,26,192,218,193,66,96,234,194,106,77,229,65,26,192,218,193,223,143,226,194,61,10,231,65,26,192,218,193,0,192,218,194,111,1,235,65,26,192,218,193,33,240,210,194,201,229,237,65,26,192,218,193,66,32,203,194,94,58,231,65,26,192,218,193,7,80,195,194,113,172,232,65,26,192,218,193,0,128,187,194,131,192,231,65,26,192,218,193,7,176,179,194,137,65,234,65,26,192,218,193,0,224,171,194,15,139,235,65,26,192,218,193,7,16,164,194,115,232,233,65,26,192,218,193,0,64,156,194,168,70,226,65,26,192,218,193,7,112,148,194,200,135,215,65,26,192,218,193,0,160,140,194,67,28,211,65,26,192,218,193,7,208,132,194,54,77,211,65,26,192,218,193,0,0,122,194,7,112,219,65,26,192,218,193,13,96,106,194,165,61,224,65,26,192,218,193,0,192,90,194,19,242,226,65,26,192,218,193,13,32,75,194,255,178,243,65,26,192,218,193,0,128,59,194,109,150,2,66,26,192,218,193,13,224,43,194,137,18,11,66,26,192,218,193,0,64,28,194,134,120,21,66,26,192,218,193,13,160,12,194,144,96,32,66,26,192,218,193,0,0,250,193,5,197,41,66,26,192,218,193,26,192,218,193,177,97,50,66,26,192,218,193,0,128,187,193,126,157,64,66,26,192,218,193,26,64,156,193,215,82,74,66,26,192,218,193,0,0,122,193,0,47,83,66,26,192,218,193,52,128,59,193,95,233,87,66,26,192,218,193,0,0,250,192,20,16,93,66,26,192,218,193,0,0,122,192,134,248,94,66,26,192,218,193,0,0,0,0,54,107,98,66,26,192,218,193,0,0,122,64,245,27,102,66,26,192,218,193,0,0,122,195,130,202,244,63,0,0,250,193,16,24,118,195,210,53,227,63,0,0,250,193,33,48,114,195,227,107,57,64,0,0,250,193,240,71,110,195,241,75,154,64,0,0,250,193,0,96,106,195,2,101,178,64,0,0,250,193,16,120,102,195,230,5,197,64,0,0,250,193,33,144,98,195,128,212,237,64,0,0,250,193,240,167,94,195,103,184,17,65,0,0,250,193,0,192,90,195,131,192,43,65,0,0,250,193,16,216,86,195,67,173,59,65,0,0,250,193,33,240,82,195,71,3,80,65,0,0,250,193,240,7,79,195,221,36,103,65,0,0,250,193,0,32,75,195,166,27,134,65,0,0,250,193,16,56,71,195,14,173,149,65,0,0,250,193,33,80,67,195,188,116,152,65,0,0,250,193,240,103,63,195,14,45,156,65,0,0,250,193,0,128,59,195,156,51,168,65,0,0,250,193,16,152,55,195,229,208,179,65,0,0,250,193,33,176,51,195,151,144,199,65,0,0,250,193,240,199,47,195,148,118,220,65,0,0,250,193,0,224,43,195,93,126,231,65,0,0,250,193,16,248,39,195,26,192,236,65,0,0,250,193,33,16,36,195,194,151,239,65,0,0,250,193,240,39,32,195,155,213,248,65,0,0,250,193,0,64,28,195,27,47,255,65,0,0,250,193,16,88,24,195,154,25,0,66,0,0,250,193,33,112,20,195,163,35,1,66,0,0,250,193,240,135,16,195,225,139,251,65,0,0,250,193,0,160,12,195,213,137,239,65,0,0,250,193,16,184,8,195,43,7,242,65,0,0,250,193,33,208,4,195,2,188,243,65,0,0,250,193,240,231,0,195,65,2,241,65,0,0,250,193,0,0,250,194,240,22,234,65,0,0,250,193,33,48,242,194,149,101,220,65,0,0,250,193,66,96,234,194,247,134,216,65,0,0,250,193,223,143,226,194,236,175,218,65,0,0,250,193,0,192,218,194,2,188,222,65,0,0,250,193,33,240,210,194,232,217,231,65,0,0,250,193,66,32,203,194,15,139,227,65,0,0,250,193,7,80,195,194,153,170,228,65,0,0,250,193,0,128,187,194,34,253,231,65,0,0,250,193,7,176,179,194,79,158,242,65,0,0,250,193,0,224,171,194,233,183,244,65,0,0,250,193,7,16,164,194,176,3,239,65,0,0,250,193,0,64,156,194,137,210,229,65,0,0,250,193,7,112,148,194,70,20,226,65,0,0,250,193,0,160,140,194,236,192,220,65,0,0,250,193,7,208,132,194,67,45,226,65,0,0,250,193,0,0,122,194,237,158,231,65,0,0,250,193,13,96,106,194,33,159,235,65,0,0,250,193,0,192,90,194,180,72,241,65,0,0,250,193,13,32,75,194,46,127,2,66,0,0,250,193,0,128,59,194,77,21,13,66,0,0,250,193,13,224,43,194,172,173,22,66,0,0,250,193,0,64,28,194,63,151,32,66,0,0,250,193,13,160,12,194,1,13,42,66,0,0,250,193,0,0,250,193,184,158,54,66,0,0,250,193,26,192,218,193,126,76,66,66,0,0,250,193,0,128,187,193,222,211,76,66,0,0,250,193,26,64,156,193,86,61,86,66,0,0,250,193,0,0,122,193,139,125,93,66,0,0,250,193,52,128,59,193,243,223,97,66,0,0,250,193,0,0,250,192,131,64,97,66,0,0,250,193,0,0,122,192,44,37,104,66,0,0,250,193,0,0,0,0,33,176,109,66,0,0,250,193,0,0,122,64,125,174,109,66,0,0,250,193,0,0,122,195,34,55,231,63,13,160,12,194,16,24,118,195,37,59,146,63,13,160,12,194,33,48,114,195,89,81,5,64,13,160,12,194,240,71,110,195,57,151,106,64,13,160,12,194,0,96,106,195,164,194,143,64,13,160,12,194,16,120,102,195,167,121,180,64,13,160,12,194,33,144,98,195,24,207,234,64,13,160,12,194,240,167,94,195,229,109,18,65,13,160,12,194,0,192,90,195,165,189,32,65,13,160,12,194,16,216,86,195,154,8,60,65,13,160,12,194,33,240,82,195,6,18,75,65,13,160,12,194,240,7,79,195,121,88,96,65,13,160,12,194,0,32,75,195,82,184,111,65,13,160,12,194,16,56,71,195,44,212,129,65,13,160,12,194,33,80,67,195,239,184,137,65,13,160,12,194,240,103,63,195,185,141,144,65,13,160,12,194,0,128,59,195,47,221,158,65,13,160,12,194,16,152,55,195,8,44,178,65,13,160,12,194,33,176,51,195,101,42,205,65,13,160,12,194,240,199,47,195,54,77,221,65,13,160,12,194,0,224,43,195,91,49,229,65,13,160,12,194,16,248,39,195,249,177,236,65,13,160,12,194,33,16,36,195,50,119,236,65,13,160,12,194,240,39,32,195,95,24,246,65,13,160,12,194,0,64,28,195,219,249,250,65,13,160,12,194,16,88,24,195,213,137,251,65,13,160,12,194,33,112,20,195,249,15,254,65,13,160,12,194,240,135,16,195,58,18,249,65,13,160,12,194,0,160,12,195,97,195,234,65,13,160,12,194,16,184,8,195,61,138,224,65,13,160,12,194,33,208,4,195,96,118,225,65,13,160,12,194,240,231,0,195,132,30,226,65,13,160,12,194,0,0,250,194,93,220,217,65,13,160,12,194,33,48,242,194,185,13,210,65,13,160,12,194,66,96,234,194,99,238,203,65,13,160,12,194,223,143,226,194,238,90,204,65,13,160,12,194,0,192,218,194,96,246,206,65,13,160,12,194,33,240,210,194,151,127,223,65,13,160,12,194,66,32,203,194,222,113,223,65,13,160,12,194,7,80,195,194,244,108,223,65,13,160,12,194,0,128,187,194,245,91,231,65,13,160,12,194,7,176,179,194,209,34,241,65,13,160,12,194,0,224,171,194,128,200,242,65,13,160,12,194,7,16,164,194,244,253,237,65,13,160,12,194,0,64,156,194,243,31,234,65,13,160,12,194,7,112,148,194,75,217,230,65,13,160,12,194,0,160,140,194,23,183,229,65,13,160,12,194,7,208,132,194,46,144,234,65,13,160,12,194,0,0,122,194,155,102,237,65,13,160,12,194,13,96,106,194,129,132,248,65,13,160,12,194,0,192,90,194,21,76,1,66,13,160,12,194,13,32,75,194,109,231,9,66,13,160,12,194,0,128,59,194,195,100,20,66,13,160,12,194,13,224,43,194,45,131,32,66,13,160,12,194,0,64,28,194,239,201,41,66,13,160,12,194,13,160,12,194,116,181,54,66,13,160,12,194,0,0,250,193,18,67,70,66,13,160,12,194,26,192,218,193,46,80,78,66,13,160,12,194,0,128,187,193,51,51,85,66,13,160,12,194,26,64,156,193,155,166,93,66,13,160,12,194,0,0,122,193,196,66,99,66,13,160,12,194,52,128,59,193,16,152,99,66,13,160,12,194,0,0,250,192,186,90,102,66,13,160,12,194,0,0,122,192,120,186,107,66,13,160,12,194,0,0,0,0,54,235,112,66,13,160,12,194,0,0,122,64,130,226,112,66,13,160,12,194,0,0,122,195,192,91,38,64,0,64,28,194,16,24,118,195,127,193,198,63,0,64,28,194,33,48,114,195,48,18,182,63,0,64,28,194,240,71,110,195,132,18,50,64,0,64,28,194,0,96,106,195,206,252,118,64,0,64,28,194,16,120,102,195,55,108,160,64,0,64,28,194,33,144,98,195,112,37,210,64,0,64,28,194,240,167,94,195,129,236,255,64,0,64,28,194,0,192,90,195,107,159,27,65,0,64,28,194,16,216,86,195,154,153,63,65,0,64,28,194,33,240,82,195,20,208,76,65,0,64,28,194,240,7,79,195,15,11,91,65,0,64,28,194,0,32,75,195,42,58,99,65,0,64,28,194,16,56,71,195,237,13,110,65,0,64,28,194,33,80,67,195,18,3,133,65,0,64,28,194,240,103,63,195,43,135,136,65,0,64,28,194,0,128,59,195,188,133,154,65,0,64,28,194,16,152,55,195,174,54,187,65,0,64,28,194,33,176,51,195,141,168,209,65,0,64,28,194,240,199,47,195,41,92,223,65,0,64,28,194,0,224,43,195,23,89,232,65,0,64,28,194,16,248,39,195,97,212,230,65,0,64,28,194,33,16,36,195,240,39,237,65,0,64,28,194,240,39,32,195,249,177,241,65,0,64,28,194,0,64,28,195,32,193,243,65,0,64,28,194,16,88,24,195,180,217,244,65,0,64,28,194,33,112,20,195,9,249,246,65,0,64,28,194,240,135,16,195,55,154,242,65,0,64,28,194,0,160,12,195,30,39,235,65,0,64,28,194,16,184,8,195,181,21,222,65,0,64,28,194,33,208,4,195,176,114,214,65,0,64,28,194,240,231,0,195,104,51,213,65,0,64,28,194,0,0,250,194,246,151,205,65,0,64,28,194,33,48,242,194,60,189,195,65,0,64,28,194,66,96,234,194,50,230,192,65,0,64,28,194,223,143,226,194,72,80,199,65,0,64,28,194,0,192,218,194,138,142,204,65,0,64,28,194,33,240,210,194,184,192,203,65,0,64,28,194,66,32,203,194,181,183,213,65,0,64,28,194,7,80,195,194,225,11,214,65,0,64,28,194,0,128,187,194,34,108,223,65,0,64,28,194,7,176,179,194,132,30,232,65,0,64,28,194,0,224,171,194,121,216,234,65,0,64,28,194,7,16,164,194,62,232,236,65,0,64,28,194,0,64,156,194,41,203,235,65,0,64,28,194,7,112,148,194,156,179,234,65,0,64,28,194,0,160,140,194,152,221,236,65,0,64,28,194,7,208,132,194,11,181,235,65,0,64,28,194,0,0,122,194,133,107,249,65,0,64,28,194,13,96,106,194,11,228,2,66,0,64,28,194,0,192,90,194,169,228,8,66,0,64,28,194,13,32,75,194,171,190,16,66,0,64,28,194,0,128,59,194,101,217,26,66,0,64,28,194,13,224,43,194,90,245,36,66,0,64,28,194,0,64,28,194,194,87,50,66,0,64,28,194,13,160,12,194,189,18,60,66,0,64,28,194,0,0,250,193,36,249,75,66,0,64,28,194,26,192,218,193,210,47,85,66,0,64,28,194,0,128,187,193,118,207,92,66,0,64,28,194,26,64,156,193,15,139,97,66,0,64,28,194,0,0,122,193,45,114,103,66,0,64,28,194,52,128,59,193,137,1,103,66,0,64,28,194,0,0,250,192,120,58,107,66,0,64,28,194,0,0,122,192,133,235,110,66,0,64,28,194,0,0,0,0,127,153,111,66,0,64,28,194,0,0,122,64,58,163,111,66,0,64,28,194,0,0,122,195,199,186,46,64,13,224,43,194,16,24,118,195,34,253,246,63,13,224,43,194,33,48,114,195,206,136,0,64,13,224,43,194,240,71,110,195,149,101,74,64,13,224,43,194,0,96,106,195,215,134,86,64,13,224,43,194,16,120,102,195,247,59,144,64,13,224,43,194,33,144,98,195,78,69,201,64,13,224,43,194,240,167,94,195,28,182,252,64,13,224,43,194,0,192,90,195,48,141,20,65,13,224,43,194,16,216,86,195,25,226,54,65,13,224,43,194,33,240,82,195,25,115,75,65,13,224,43,194,240,7,79,195,179,12,90,65,13,224,43,194,0,32,75,195,191,125,105,65,13,224,43,194,16,56,71,195], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143360);
/* memory initializer */ allocate([163,1,109,65,13,224,43,194,33,80,67,195,119,190,124,65,13,224,43,194,240,103,63,195,87,219,130,65,13,224,43,194,0,128,59,195,86,14,162,65,13,224,43,194,16,152,55,195,247,100,186,65,13,224,43,194,33,176,51,195,153,170,203,65,13,224,43,194,240,199,47,195,66,79,218,65,13,224,43,194,0,224,43,195,189,227,223,65,13,224,43,194,16,248,39,195,39,49,226,65,13,224,43,194,33,16,36,195,68,105,231,65,13,224,43,194,240,39,32,195,231,123,233,65,13,224,43,194,0,64,28,195,79,30,239,65,13,224,43,194,16,88,24,195,7,240,235,65,13,224,43,194,33,112,20,195,86,14,234,65,13,224,43,194,240,135,16,195,66,79,231,65,13,224,43,194,0,160,12,195,170,241,220,65,13,224,43,194,16,184,8,195,202,212,214,65,13,224,43,194,33,208,4,195,171,62,210,65,13,224,43,194,240,231,0,195,55,26,201,65,13,224,43,194,0,0,250,194,98,16,196,65,13,224,43,194,33,48,242,194,51,196,190,65,13,224,43,194,66,96,234,194,12,2,188,65,13,224,43,194,223,143,226,194,114,121,192,65,13,224,43,194,0,192,218,194,194,23,193,65,13,224,43,194,33,240,210,194,154,153,192,65,13,224,43,194,66,32,203,194,31,5,196,65,13,224,43,194,7,80,195,194,254,195,198,65,13,224,43,194,0,128,187,194,188,5,212,65,13,224,43,194,7,176,179,194,164,223,215,65,13,224,43,194,0,224,171,194,160,137,228,65,13,224,43,194,7,16,164,194,223,224,231,65,13,224,43,194,0,64,156,194,236,47,233,65,13,224,43,194,7,112,148,194,238,252,230,65,13,224,43,194,0,160,140,194,156,68,239,65,13,224,43,194,7,208,132,194,14,45,253,65,13,224,43,194,0,0,122,194,212,107,3,66,13,224,43,194,13,96,106,194,146,203,9,66,13,224,43,194,0,192,90,194,240,22,15,66,13,224,43,194,13,32,75,194,137,18,26,66,13,224,43,194,0,128,59,194,219,121,34,66,13,224,43,194,13,224,43,194,148,118,42,66,13,224,43,194,0,64,28,194,163,210,55,66,13,224,43,194,13,160,12,194,120,58,67,66,13,224,43,194,0,0,250,193,133,43,78,66,13,224,43,194,26,192,218,193,155,149,88,66,13,224,43,194,0,128,187,193,37,198,98,66,13,224,43,194,26,64,156,193,121,105,101,66,13,224,43,194,0,0,122,193,240,39,105,66,13,224,43,194,52,128,59,193,107,218,105,66,13,224,43,194,0,0,250,192,97,3,108,66,13,224,43,194,0,0,122,192,164,112,110,66,13,224,43,194,0,0,0,0,45,114,110,66,13,224,43,194,0,0,122,64,50,21,110,66,13,224,43,194,0,0,122,195,245,132,3,64,0,128,59,194,16,24,118,195,162,156,184,63,0,128,59,194,33,48,114,195,150,207,250,63,0,128,59,194,240,71,110,195,47,105,32,64,0,128,59,194,0,96,106,195,64,48,79,64,0,128,59,194,16,120,102,195,127,188,142,64,0,128,59,194,33,144,98,195,104,179,197,64,0,128,59,194,240,167,94,195,162,151,242,64,0,128,59,194,0,192,90,195,52,128,22,65,0,128,59,194,16,216,86,195,211,77,54,65,0,128,59,194,33,240,82,195,85,48,71,65,0,128,59,194,240,7,79,195,179,12,82,65,0,128,59,194,0,32,75,195,60,78,93,65,0,128,59,194,16,56,71,195,182,132,98,65,0,128,59,194,33,80,67,195,96,118,112,65,0,128,59,194,240,103,63,195,14,173,137,65,0,128,59,194,0,128,59,195,42,169,162,65,0,128,59,194,16,152,55,195,108,9,180,65,0,128,59,194,33,176,51,195,254,101,198,65,0,128,59,194,240,199,47,195,127,251,210,65,0,128,59,194,0,224,43,195,23,183,218,65,0,128,59,194,16,248,39,195,38,100,218,65,0,128,59,194,33,16,36,195,30,39,220,65,0,128,59,194,240,39,32,195,202,67,225,65,0,128,59,194,0,64,28,195,35,219,226,65,0,128,59,194,16,88,24,195,213,248,217,65,0,128,59,194,33,112,20,195,214,69,221,65,0,128,59,194,240,135,16,195,190,193,213,65,0,128,59,194,0,160,12,195,83,5,203,65,0,128,59,194,16,184,8,195,111,240,200,65,0,128,59,194,33,208,4,195,200,135,197,65,0,128,59,194,240,231,0,195,190,159,190,65,0,128,59,194,0,0,250,194,217,78,182,65,0,128,59,194,33,48,242,194,132,13,189,65,0,128,59,194,66,96,234,194,211,77,186,65,0,128,59,194,223,143,226,194,70,20,183,65,0,128,59,194,0,192,218,194,246,23,181,65,0,128,59,194,33,240,210,194,91,211,177,65,0,128,59,194,66,32,203,194,253,7,182,65,0,128,59,194,7,80,195,194,136,116,187,65,0,128,59,194,0,128,187,194,44,101,200,65,0,128,59,194,7,176,179,194,11,53,206,65,0,128,59,194,0,224,171,194,97,212,217,65,0,128,59,194,7,16,164,194,66,62,225,65,0,128,59,194,0,64,156,194,105,111,229,65,0,128,59,194,7,112,148,194,118,207,243,65,0,128,59,194,0,160,140,194,133,235,0,66,0,128,59,194,7,208,132,194,72,191,6,66,0,128,59,194,0,0,122,194,235,34,11,66,0,128,59,194,13,96,106,194,180,8,17,66,0,128,59,194,0,192,90,194,123,3,25,66,0,128,59,194,13,32,75,194,186,26,30,66,0,128,59,194,0,128,59,194,6,18,39,66,0,128,59,194,13,224,43,194,35,138,51,66,0,128,59,194,0,64,28,194,191,142,62,66,0,128,59,194,13,160,12,194,46,80,70,66,0,128,59,194,0,0,250,193,100,140,81,66,0,128,59,194,26,192,218,193,179,187,91,66,0,128,59,194,0,128,187,193,152,174,98,66,0,128,59,194,26,64,156,193,141,151,99,66,0,128,59,194,0,0,122,193,70,182,106,66,0,128,59,194,52,128,59,193,84,163,110,66,0,128,59,194,0,0,250,192,177,16,108,66,0,128,59,194,0,0,122,192,79,111,109,66,0,128,59,194,0,0,0,0,121,41,106,66,0,128,59,194,0,0,122,64,104,162,107,66,0,128,59,194,0,0,122,195,115,244,36,64,13,32,75,194,16,24,118,195,25,4,4,64,13,32,75,194,33,48,114,195,15,238,16,64,13,32,75,194,240,71,110,195,119,219,27,64,13,32,75,194,0,96,106,195,127,222,40,64,13,32,75,194,16,120,102,195,115,99,142,64,13,32,75,194,33,144,98,195,187,15,208,64,13,32,75,194,240,167,94,195,206,194,1,65,13,32,75,194,0,192,90,195,5,163,33,65,13,32,75,194,16,216,86,195,204,238,53,65,13,32,75,194,33,240,82,195,254,212,75,65,13,32,75,194,240,7,79,195,50,119,90,65,13,32,75,194,0,32,75,195,113,27,90,65,13,32,75,194,16,56,71,195,128,183,87,65,13,32,75,194,33,80,67,195,232,217,116,65,13,32,75,194,240,103,63,195,104,17,140,65,13,32,75,194,0,128,59,195,181,149,156,65,13,32,75,194,16,152,55,195,23,183,176,65,13,32,75,194,33,176,51,195,64,36,191,65,13,32,75,194,240,199,47,195,207,119,199,65,13,32,75,194,0,224,43,195,102,230,208,65,13,32,75,194,16,248,39,195,42,58,207,65,13,32,75,194,33,16,36,195,163,163,215,65,13,32,75,194,240,39,32,195,232,89,214,65,13,32,75,194,0,64,28,195,242,193,210,65,13,32,75,194,16,88,24,195,53,222,204,65,13,32,75,194,33,112,20,195,39,66,202,65,13,32,75,194,240,135,16,195,25,226,203,65,13,32,75,194,0,160,12,195,125,63,191,65,13,32,75,194,16,184,8,195,218,172,189,65,13,32,75,194,33,208,4,195,224,173,183,65,13,32,75,194,240,231,0,195,161,120,178,65,13,32,75,194,0,0,250,194,127,106,178,65,13,32,75,194,33,48,242,194,150,161,186,65,13,32,75,194,66,96,234,194,118,113,185,65,13,32,75,194,223,143,226,194,186,90,181,65,13,32,75,194,0,192,218,194,209,17,170,65,13,32,75,194,33,240,210,194,221,181,163,65,13,32,75,194,66,32,203,194,238,218,171,65,13,32,75,194,7,80,195,194,15,28,176,65,13,32,75,194,0,128,187,194,118,207,187,65,13,32,75,194,7,176,179,194,51,179,201,65,13,32,75,194,0,224,171,194,104,145,211,65,13,32,75,194,7,16,164,194,191,125,220,65,13,32,75,194,0,64,156,194,71,131,236,65,13,32,75,194,7,112,148,194,217,61,249,65,13,32,75,194,0,160,140,194,130,34,6,66,13,32,75,194,7,208,132,194,172,156,14,66,13,32,75,194,0,0,122,194,181,247,16,66,13,32,75,194,13,96,106,194,3,184,21,66,13,32,75,194,0,192,90,194,46,255,30,66,13,32,75,194,13,32,75,194,219,249,37,66,13,32,75,194,0,128,59,194,250,45,50,66,13,32,75,194,13,224,43,194,91,19,61,66,13,32,75,194,0,64,28,194,152,174,70,66,13,32,75,194,13,160,12,194,169,147,79,66,13,32,75,194,0,0,250,193,15,203,87,66,13,32,75,194,26,192,218,193,68,250,92,66,13,32,75,194,0,128,187,193,91,49,98,66,13,32,75,194,26,64,156,193,207,55,106,66,13,32,75,194,0,0,122,193,62,57,110,66,13,32,75,194,52,128,59,193,199,122,107,66,13,32,75,194,0,0,250,192,50,38,108,66,13,32,75,194,0,0,122,192,134,90,110,66,13,32,75,194,0,0,0,0,174,152,110,66,13,32,75,194,0,0,122,64,82,103,111,66,13,32,75,194,0,0,122,195,164,165,2,64,0,192,90,194,16,24,118,195,24,38,35,64,0,192,90,194,33,48,114,195,199,104,45,64,0,192,90,194,240,71,110,195,49,124,64,64,0,192,90,194,0,96,106,195,50,3,99,64,0,192,90,194,16,120,102,195,254,38,163,64,0,192,90,194,33,144,98,195,201,2,227,64,0,192,90,194,240,167,94,195,86,142,6,65,0,192,90,194,0,192,90,195,84,227,32,65,0,192,90,194,16,216,86,195,111,240,55,65,0,192,90,194,33,240,82,195,189,227,66,65,0,192,90,194,240,7,79,195,21,140,75,65,0,192,90,194,0,32,75,195,147,24,75,65,0,192,90,194,16,56,71,195,22,106,96,65,0,192,90,194,33,80,67,195,232,234,128,65,0,192,90,194,240,103,63,195,67,28,147,65,0,192,90,194,0,128,59,195,214,214,154,65,0,192,90,194,16,152,55,195,26,64,173,65,0,192,90,194,33,176,51,195,192,236,183,65,0,192,90,194,240,199,47,195,178,46,190,65,0,192,90,194,0,224,43,195,44,212,201,65,0,192,90,194,16,248,39,195,120,156,208,65,0,192,90,194,33,16,36,195,207,247,213,65,0,192,90,194,240,39,32,195,87,108,210,65,0,192,90,194,0,64,28,195,7,240,204,65,0,192,90,194,16,88,24,195,199,75,196,65,0,192,90,194,33,112,20,195,51,196,190,65,0,192,90,194,240,135,16,195,22,251,186,65,0,192,90,194,0,160,12,195,136,244,182,65,0,192,90,194,16,184,8,195,150,50,180,65,0,192,90,194,33,208,4,195,238,124,171,65,0,192,90,194,240,231,0,195,5,197,171,65,0,192,90,194,0,0,250,194,251,75,177,65,0,192,90,194,33,48,242,194,224,173,179,65,0,192,90,194,66,96,234,194,131,81,171,65,0,192,90,194,223,143,226,194,240,150,166,65,0,192,90,194,0,192,218,194,111,1,157,65,0,192,90,194,33,240,210,194,107,43,161,65,0,192,90,194,66,32,203,194,76,183,172,65,0,192,90,194,7,80,195,194,155,230,177,65,0,192,90,194,0,128,187,194,152,110,189,65,0,192,90,194,7,176,179,194,188,133,199,65,0,192,90,194,0,224,171,194,47,93,211,65,0,192,90,194,7,16,164,194,205,76,223,65,0,192,90,194,0,64,156,194,27,141,240,65,0,192,90,194,7,112,148,194,136,244,2,66,0,192,90,194,0,160,140,194,155,102,9,66,0,192,90,194,7,208,132,194,136,180,14,66,0,192,90,194,0,0,122,194,154,217,21,66,0,192,90,194,13,96,106,194,19,97,25,66,0,192,90,194,0,192,90,194,42,105,34,66,0,192,90,194,13,32,75,194,20,208,49,66,0,192,90,194,0,128,59,194,9,121,62,66,0,192,90,194,13,224,43,194,189,18,71,66,0,192,90,194,0,64,28,194,0,192,80,66,0,192,90,194,13,160,12,194,251,250,89,66,0,192,90,194,0,0,250,193,89,198,95,66,0,192,90,194,26,192,218,193,140,138,100,66,0,192,90,194,0,128,187,193,98,16,104,66,0,192,90,194,26,64,156,193,187,103,110,66,0,192,90,194,0,0,122,193,229,242,111,66,0,192,90,194,52,128,59,193,209,81,111,66,0,192,90,194,0,0,250,192,252,105,112,66,0,192,90,194,0,0,122,192,87,108,115,66,0,192,90,194,0,0,0,0,99,63,114,66,0,192,90,194,0,0,122,64,58,146,113,66,0,192,90,194,0,0,122,195,154,95,128,64,13,96,106,194,16,24,118,195,13,113,68,64,13,96,106,194,33,48,114,195,97,26,88,64,13,96,106,194,240,71,110,195,45,9,110,64,13,96,106,194,0,96,106,195,53,210,130,64,13,96,106,194,16,120,102,195,36,11,178,64,13,96,106,194,33,144,98,195,212,154,234,64,13,96,106,194,240,167,94,195,202,207,9,65,13,96,106,194,0,192,90,195,178,116,28,65,13,96,106,194,16,216,86,195,36,151,63,65,13,96,106,194,33,240,82,195,80,252,78,65,13,96,106,194,240,7,79,195,174,71,88,65,13,96,106,194,0,32,75,195,2,43,95,65,13,96,106,194,16,56,71,195,28,124,102,65,13,96,106,194,33,80,67,195,97,50,129,65,13,96,106,194,240,103,63,195,34,236,142,65,13,96,106,194,0,128,59,195,229,225,151,65,13,96,106,194,16,152,55,195,84,99,170,65,13,96,106,194,33,176,51,195,19,242,187,65,13,96,106,194,240,199,47,195,208,213,202,65,13,96,106,194,0,224,43,195,158,222,208,65,13,96,106,194,16,248,39,195,242,176,212,65,13,96,106,194,33,16,36,195,179,251,206,65,13,96,106,194,240,39,32,195,237,13,200,65,13,96,106,194,0,64,28,195,41,75,202,65,13,96,106,194,16,88,24,195,234,149,191,65,13,96,106,194,33,112,20,195,10,215,185,65,13,96,106,194,240,135,16,195,210,239,180,65,13,96,106,194,0,160,12,195,40,254,171,65,13,96,106,194,16,184,8,195,88,168,168,65,13,96,106,194,33,208,4,195,148,7,168,65,13,96,106,194,240,231,0,195,138,176,174,65,13,96,106,194,0,0,250,194,186,201,172,65,13,96,106,194,33,48,242,194,166,155,167,65,13,96,106,194,66,96,234,194,30,167,169,65,13,96,106,194,223,143,226,194,179,251,157,65,13,96,106,194,0,192,218,194,45,161,148,65,13,96,106,194,33,240,210,194,236,47,163,65,13,96,106,194,66,32,203,194,86,14,178,65,13,96,106,194,7,80,195,194,147,186,186,65,13,96,106,194,0,128,187,194,96,229,194,65,13,96,106,194,7,176,179,194,3,9,206,65,13,96,106,194,0,224,171,194,129,4,222,65,13,96,106,194,7,16,164,194,251,92,231,65,13,96,106,194,0,64,156,194,204,127,246,65,13,96,106,194,7,112,148,194,136,163,3,66,13,96,106,194,0,160,140,194,171,126,11,66,13,96,106,194,7,208,132,194,11,53,16,66,13,96,106,194,0,0,122,194,37,6,26,66,13,96,106,194,13,96,106,194,47,46,37,66,13,96,106,194,0,192,90,194,212,90,45,66,13,96,106,194,13,32,75,194,204,46,58,66,13,96,106,194,0,128,59,194,174,246,68,66,13,96,106,194,13,224,43,194,18,148,77,66,13,96,106,194,0,64,28,194,255,97,88,66,13,96,106,194,13,160,12,194,49,72,95,66,13,96,106,194,0,0,250,193,66,96,100,66,13,96,106,194,26,192,218,193,32,65,104,66,13,96,106,194,0,128,187,193,123,67,107,66,13,96,106,194,26,64,156,193,135,231,111,66,13,96,106,194,0,0,122,193,109,214,112,66,13,96,106,194,52,128,59,193,41,28,112,66,13,96,106,194,0,0,250,192,122,101,116,66,13,96,106,194,0,0,122,192,22,234,117,66,13,96,106,194,0,0,0,0,63,245,117,66,13,96,106,194,0,0,122,64,126,76,118,66,13,96,106,194,0,0,122,195,133,148,177,64,0,0,122,194,16,24,118,195,51,225,133,64,0,0,122,194,33,48,114,195,240,162,121,64,0,0,122,194,240,71,110,195,232,77,136,64,0,0,122,194,0,96,106,195,87,91,154,64,0,0,122,194,16,120,102,195,230,5,193,64,0,0,122,194,33,144,98,195,242,94,246,64,0,0,122,194,240,167,94,195,162,238,12,65,0,0,122,194,0,192,90,195,131,47,45,65,0,0,122,194,16,216,86,195,205,59,89,65,0,0,122,194,33,240,82,195,199,75,103,65,0,0,122,194,240,7,79,195,203,161,112,65,0,0,122,194,0,32,75,195,217,206,104,65,0,0,122,194,16,56,71,195,100,93,129,65,0,0,122,194,33,80,67,195,61,155,135,65,0,0,122,194,240,103,63,195,224,156,145,65,0,0,122,194,0,128,59,195,136,244,158,65,0,0,122,194,16,152,55,195,0,239,180,65,0,0,122,194,33,176,51,195,228,148,196,65,0,0,122,194,240,199,47,195,231,12,208,65,0,0,122,194,0,224,43,195,183,81,208,65,0,0,122,194,16,248,39,195,255,33,213,65,0,0,122,194,33,16,36,195,73,46,205,65,0,0,122,194,240,39,32,195,39,177,195,65,0,0,122,194,0,64,28,195,106,60,188,65,0,0,122,194,16,88,24,195,159,77,190,65,0,0,122,194,33,112,20,195,145,15,183,65,0,0,122,194,240,135,16,195,20,63,173,65,0,0,122,194,0,160,12,195,190,31,165,65,0,0,122,194,16,184,8,195,35,91,161,65,0,0,122,194,33,208,4,195,8,44,166,65,0,0,122,194,240,231,0,195,2,188,164,65,0,0,122,194,0,0,250,194,175,148,163,65,0,0,122,194,33,48,242,194,32,65,159,65,0,0,122,194,66,96,234,194,211,222,155,65,0,0,122,194,223,143,226,194,119,190,142,65,0,0,122,194,0,192,218,194,95,135,148,65,0,0,122,194,33,240,210,194,130,226,160,65,0,0,122,194,66,32,203,194,172,139,170,65,0,0,122,194,7,80,195,194,227,71,186,65,0,0,122,194,0,128,187,194,124,225,194,65,0,0,122,194,7,176,179,194,93,254,210,65,0,0,122,194,0,224,171,194,93,237,221,65,0,0,122,194,7,16,164,194,150,67,236,65,0,0,122,194,0,64,156,194,99,127,252,65,0,0,122,194,7,112,148,194,245,27,5,66,0,0,122,194,0,160,140,194,246,104,14,66,0,0,122,194,7,208,132,194,182,179,25,66,0,0,122,194,0,0,122,194,252,169,35,66,0,0,122,194,13,96,106,194,79,192,47,66,0,0,122,194,0,192,90,194,122,165,55,66,0,0,122,194,13,32,75,194,83,69,65,66,0,0,122,194,0,128,59,194,114,202,72,66,0,0,122,194,13,224,43,194,32,210,81,66,0,0,122,194,0,64,28,194,43,182,90,66,0,0,122,194,13,160,12,194,39,160,96,66,0,0,122,194,0,0,250,193,25,68,102,66,0,0,122,194,26,192,218,193,212,26,107,66,0,0,122,194,0,128,187,193,195,117,108,66,0,0,122,194,26,64,156,193,201,54,106,66,0,0,122,194,0,0,122,193,200,216,104,66,0,0,122,194,52,128,59,193,95,88,108,66,0,0,122,194,0,0,250,192,143,130,113,66,0,0,122,194,0,0,122,192,169,19,116,66,0,0,122,194,0,0,0,0,188,116,119,66,0,0,122,194,0,0,122,64,196,113,120,66,0,0,122,194,0,0,122,195,155,143,194,64,7,208,132,194,16,24,118,195,123,78,164,64,7,208,132,194,33,48,114,195,43,24,163,64,7,208,132,194,240,71,110,195,250,208,171,64,7,208,132,194,0,96,106,195,46,4,167,64,7,208,132,194,16,120,102,195,183,40,204,64,7,208,132,194,33,144,98,195,210,53,251,64,7,208,132,194,240,167,94,195,90,199,21,65,7,208,132,194,0,192,90,195,4,86,62,65,7,208,132,194,16,216,86,195,69,71,95,65,7,208,132,194,33,240,82,195,16,122,119,65,7,208,132,194,240,7,79,195,229,208,127,65,7,208,132,194,0,32,75,195,61,138,131,65,7,208,132,194,16,56,71,195,4,103,139,65,7,208,132,194,33,80,67,195,166,27,145,65,7,208,132,194,240,103,63,195,216,240,150,65,7,208,132,194,0,128,59,195,132,13,161,65,7,208,132,194,16,152,55,195,195,211,182,65,7,208,132,194,33,176,51,195,140,74,196,65,7,208,132,194,240,199,47,195,185,252,204,65,7,208,132,194,0,224,43,195,86,125,207,65,7,208,132,194,16,248,39,195,33,48,206,65,7,208,132,194,33,16,36,195,29,56,201,65,7,208,132,194,240,39,32,195,96,101,195,65,7,208,132,194,0,64,28,195,228,3,183,65,7,208,132,194,16,88,24,195,117,2,183,65,7,208,132,194,33,112,20,195,215,52,175,65,7,208,132,194,240,135,16,195,195,100,167,65,7,208,132,194,0,160,12,195,78,209,160,65,7,208,132,194,16,184,8,195,141,168,156,65,7,208,132,194,33,208,4,195,49,136,155,65,7,208,132,194,240,231,0,195,67,156,151,65,7,208,132,194,0,0,250,194,68,105,151,65,7,208,132,194,33,48,242,194,157,128,149,65,7,208,132,194,66,96,234,194,202,50,143,65,7,208,132,194,223,143,226,194,29,218,143,65,7,208,132,194,0,192,218,194,33,31,146,65,7,208,132,194,33,240,210,194,150,67,156,65,7,208,132,194,66,32,203,194,55,9,168,65,7,208,132,194,7,80,195,194,3,248,177,65,7,208,132,194,0,128,187,194,79,192,189,65,7,208,132,194,7,176,179,194,141,151,204,65,7,208,132,194,0,224,171,194,102,102,220,65,7,208,132,194,7,16,164,194,47,221,237,65,7,208,132,194,0,64,156,194,67,156,248,65,7,208,132,194,7,112,148,194,194,215,7,66,7,208,132,194,0,160,140,194,33,112,21,66,7,208,132,194,7,208,132,194,117,19,36,66,7,208,132,194,0,0,122,194,22,234,46,66,7,208,132,194,13,96,106,194,227,7,58,66,7,208,132,194,0,192,90,194,164,240,63,66,7,208,132,194,13,32,75,194,152,12,69,66,7,208,132,194,0,128,59,194,55,201,75,66,7,208,132,194,13,224,43,194,227,165,83,66,7,208,132,194,0,64,28,194,189,35,92,66,7,208,132,194,13,160,12,194,70,182,97,66,7,208,132,194,0,0,250,193,149,148,101,66,7,208,132,194,26,192,218,193,255,33,106,66,7,208,132,194,0,128,187,193,202,84,105,66,7,208,132,194,26,64,156,193,209,209,99,66,7,208,132,194,0,0,122,193,59,193,99,66,7,208,132,194,52,128,59,193,96,118,105,66,7,208,132,194,0,0,250,192,124,161,110,66,7,208,132,194,0,0,122,192,41,109,111,66,7,208,132,194,0,0,0,0,162,197,114,66,7,208,132,194,0,0,122,64,119,109,115,66,7,208,132,194,0,0,122,195,126,111,204,64,0,160,140,194,16,24,118,195,254,38,204,64,0,160,140,194,33,48,114,195,29,201,208,64,0,160,140,194,240,71,110,195,98,248,221,64,0,160,140,194,0,96,106,195,35,190,216,64,0,160,140,194,16,120,102,195,181,84,232,64,0,160,140,194,33,144,98,195,252,227,15,65,0,160,140,194,240,167,94,195,37,6,40,65,0,160,140,194,0,192,90,195,147,24,58,65,0,160,140,194,16,216,86,195,118,224,96,65,0,160,140,194,33,240,82,195,42,169,126,65,0,160,140,194,240,7,79,195,142,117,133,65,0,160,140,194,0,32,75,195,180,217,136,65,0,160,140,194,16,56,71,195,43,135,144,65,0,160,140,194,33,80,67,195,99,110,148,65,0,160,140,194,240,103,63,195,113,189,150,65,0,160,140,194,0,128,59,195,79,47,166,65,0,160,140,194,16,152,55,195,169,36,183,65,0,160,140,194,33,176,51,195,218,155,193,65,0,160,140,194,240,199,47,195,220,104,196,65,0,160,140,194,0,224,43,195,63,53,197,65,0,160,140,194,16,248,39,195,192,236,191,65,0,160,140,194,33,16,36,195,240,5,189,65,0,160,140,194,240,39,32,195,250,237,188,65,0,160,140,194,0,64,28,195,138,142,178,65,0,160,140,194,16,88,24,195,78,98,177,65,0,160,140,194,33,112,20,195,102,119,165,65,0,160,140,194,240,135,16,195,120,122,157,65,0,160,140,194,0,160,12,195,215,180,147,65,0,160,140,194,16,184,8,195,82,39,146,65,0,160,140,194,33,208,4,195,219,121,144,65,0,160,140,194,240,231,0,195,76,166,137,65,0,160,140,194,0,0,250,194,24,21,136,65,0,160,140,194,33,48,242,194,103,68,137,65,0,160,140,194,66,96,234,194,81,90,140,65,0,160,140,194,223,143,226,194,3,137,140,65,0,160,140,194,0,192,218,194,95,7,142,65,0,160,140,194,33,240,210,194,98,33,147,65,0,160,140,194,66,32,203,194,171,207,157,65,0,160,140,194,7,80,195,194,135,39,167,65,0,160,140,194,0,128,187,194,123,3,182,65,0,160,140,194,7,176,179,194,230,46,201,65,0,160,140,194,0,224,171,194,147,41,219,65,0,160,140,194,7,16,164,194,2,26,236,65,0,160,140,194,0,64,156,194,184,64,250,65,0,160,140,194,7,112,148,194,183,162,10,66,0,160,140,194,0,160,140,194,73,221,24,66,0,160,140,194,7,208,132,194,126,140,41,66,0,160,140,194,0,0,122,194,197,190,53,66,0,160,140,194,13,96,106,194,137,18,60,66,0,160,140,194,0,192,90,194,111,240,66,66,0,160,140,194,13,32,75,194,224,126,71,66,0,160,140,194,0,128,59,194,62,249,76,66,0,160,140,194,13,224,43,194,17,199,83,66,0,160,140,194,0,64,28,194,126,93,91,66,0,160,140,194,13,160,12,194,170,130,95,66,0,160,140,194,0,0,250,193,156,162,99,66,0,160,140,194,26,192,218,193,227,135,99,66,0,160,140,194,0,128,187,193,220,168,96,66,0,160,140,194,26,64,156,193,99,238,91,66,0,160,140,194,0,0,122,193,154,55,98,66,0,160,140,194,52,128,59,193,69,7,104,66,0,160,140,194,0,0,250,192,74,123,104,66,0,160,140,194,0,0,122,192,37,53,107,66,0,160,140,194,0,0,0,0,137,129,109,66,0,160,140,194,0,0,122,64,194,151,108,66,0,160,140,194,0,0,122,195,94,133,233,64,7,112,148,194,16,24,118,195,78,209,221,64,7,112,148,194,33,48,114,195,170,96,254,64,7,112,148,194,240,71,110,195,155,172,243,64,7,112,148,194,0,96,106,195,79,59,6,65,7,112,148,194,16,120,102,195,254,154,13,65,7,112,148,194,33,144,98,195,43,135,44,65,7,112,148,194,240,167,94,195,125,63,67,65,7,112,148,194,0,192,90,195,44,101,75,65,7,112,148,194,16,216,86,195,52,128,100,65,7,112,148,194,33,240,82,195,93,237,128,65,7,112,148,194,240,7,79,195,1,205,134,65,7,112,148,194,0,32,75,195,242,210,141,65,7,112,148,194,16,56,71,195,243,142,149,65,7,112,148,194,33,80,67,195,5,52,152,65,7,112,148,194,240,103,63,195,50,230,151,65,7,112,148,194,0,128,59,195,92,15,166,65,7,112,148,194,16,152,55,195,224,190,179,65,7,112,148,194,33,176,51,195,174,71,190,65,7,112,148,194,240,199,47,195,135,22,185,65,7,112,148,194,0,224,43,195,48,76,178,65,7,112,148,194,16,248,39,195,59,129,175,65,7,112,148,194,33,16,36,195,68,139,182,65,7,112,148,194,240,39,32,195,75,106,174,65,7,112,148,194,0,64,28,195,251,203,170,65,7,112,148,194,16,88,24,195,11,70,159,65,7,112,148,194,33,112,20,195,57,69,156,65,7,112,148,194,240,135,16,195,23,200,153,65,7,112,148,194,0,160,12,195,0,17,138,65,7,112,148,194,16,184,8,195,251,92,124,65,7,112,148,194,33,208,4,195,118,79,115,65,7,112,148,194,240,231,0,195,133,124,113,65,7,112,148,194,0,0,250,194,213,231,116,65,7,112,148,194,33,48,242,194,140,219,113,65,7,112,148,194,66,96,234,194,210,239,128,65,7,112,148,194,223,143,226,194,227,71,138,65,7,112,148,194,0,192,218,194,236,175,134,65,7,112,148,194,33,240,210,194,35,74,141,65,7,112,148,194,66,32,203,194,32,82,145,65,7,112,148,194,7,80,195,194,179,123,151,65,7,112,148,194,0,128,187,194,238,235,168,65,7,112,148,194,7,176,179,194,226,105,191,65,7,112,148,194,0,224,171,194,239,73,212,65,7,112,148,194,7,16,164,194,60,206,236,65,7,112,148,194,0,64,156,194,27,175,254,65,7,112,148,194,7,112,148,194,206,72,10,66,7,112,148,194,0,160,140,194,2,124,22,66,7,112,148,194,7,208,132,194,121,233,39,66,7,112,148,194,0,0,122,194,43,7,51,66,7,112,148,194,13,96,106,194,63,6,61,66,7,112,148,194,0,192,90,194,27,47,67,66,7,112,148,194,13,32,75,194,10,87,72,66,7,112,148,194,0,128,59,194,63,181,77,66,7,112,148,194,13,224,43,194,38,164,83,66,7,112,148,194,0,64,28,194,186,137,86,66,7,112,148,194,13,160,12,194,80,60,94,66,7,112,148,194,0,0,250,193,163,210,97,66,7,112,148,194,26,192,218,193,185,77,95,66,7,112,148,194,0,128,187,193,34,253,92,66,7,112,148,194,26,64,156,193,22,170,91,66,7,112,148,194,0,0,122,193,17,246,96,66,7,112,148,194,52,128,59,193,10,232,102,66,7,112,148,194,0,0,250,192,244,189,102,66,7,112,148,194,0,0,122,192,28,235,101,66,7,112,148,194,0,0,0,0,254,148,97,66,7,112,148,194,0,0,122,64,26,17,98,66,7,112,148,194,0,0,122,195,203,45,14,65,0,64,156,194,16,24,118,195,140,21,5,65,0,64,156,194,33,48,114,195,40,196,10,65,0,64,156,194,240,71,110,195,228,90,24,65,0,64,156,194,0,96,106,195,232,130,28,65,0,64,156,194,16,120,102,195,232,217,52,65,0,64,156,194,33,144,98,195,40,126,82,65,0,64,156,194,240,167,94,195,68,250,102,65,0,64,156,194,0,192,90,195,82,39,121,65,0,64,156,194,16,216,86,195,234,149,101,65,0,64,156,194,33,240,82,195,147,58,122,65,0,64,156,194,240,7,79,195,112,78,135,65,0,64,156,194,0,32,75,195,33,31,145,65,0,64,156,194,16,56,71,195,152,110,153,65,0,64,156,194,33,80,67,195,243,142,151,65,0,64,156,194,240,103,63,195,48,59,156,65,0,64,156,194,0,128,59,195,109,214,166,65,0,64,156,194,16,152,55,195,188,22,182,65,0,64,156,194,33,176,51,195,181,166,182,65,0,64,156,194,240,199,47,195,31,133,174,65,0,64,156,194,0,224,43,195,138,176,177,65,0,64,156,194,16,248,39,195,37,117,175,65,0,64,156,194,33,16,36,195,81,107,170,65,0,64,156,194,240,39,32,195,254,212,162,65,0,64,156,194,0,64,28,195,211,222,158,65,0,64,156,194,16,88,24,195,51,196,142,65,0,64,156,194,33,112,20,195,139,125,144,65,0,64,156,194,240,135,16,195,253,135,136,65,0,64,156,194,0,160,12,195,7,206,129,65,0,64,156,194,16,184,8,195,99,238,100,65,0,64,156,194,33,208,4,195,114,138,85,65,0,64,156,194,240,231,0,195,168,53,102,65,0,64,156,194,0,0,250,194,231,251,106,65,0,64,156,194,33,48,242,194,181,55,99,65,0,64,156,194,66,96,234,194,152,76,119,65,0,64,156,194,223,143,226,194,210,239,132,65,0,64,156,194,0,192,218,194,146,75,130,65,0,64,156,194,33,240,210,194,179,12,127,65,0,64,156,194,66,32,203,194,148,118,140,65,0,64,156,194,7,80,195,194,137,65,153,65,0,64,156,194,0,128,187,194,219,138,168,65,0,64,156,194,7,176,179,194,112,78,185,65,0,64,156,194,0,224,171,194,143,100,202,65,0,64,156,194,7,16,164,194,209,145,231,65,0,64,156,194,0,64,156,194,13,224,254,65,0,64,156,194,7,112,148,194,232,234,12,66,0,64,156,194,0,160,140,194,163,210,19,66,0,64,156,194,7,208,132,194,156,196,34,66,0,64,156,194,0,0,122,194,146,92,50,66,0,64,156,194,13,96,106,194,8,236,59,66,0,64,156,194,0,192,90,194,173,58,65,66,0,64,156,194,13,32,75,194,77,51,71,66,0,64,156,194,0,128,59,194,208,243,77,66,0,64,156,194,13,224,43,194,197,254,82,66,0,64,156,194,0,64,28,194,201,101,84,66,0,64,156,194,13,160,12,194,29,154,90,66,0,64,156,194,0,0,250,193,113,91,93,66,0,64,156,194,26,192,218,193,118,113,93,66,0,64,156,194,0,128,187,193,128,136,89,66,0,64,156,194,26,64,156,193,135,214,87,66,0,64,156,194,0,0,122,193,43,71,92,66,0,64,156,194,52,128,59,193,39,177,97,66,0,64,156,194,0,0,250,192,144,160,96,66,0,64,156,194,0,0,122,192,235,34,97,66,0,64,156,194,0,0,0,0,210,0,91,66,0,64,156,194,0,0,122,64,196,194,89,66,0,64,156,194,0,0,122,195,219,138,44,65,7,16,164,194,16,24,118,195,12,2,34,65,7,16,164,194,33,48,114,195,246,151,42,65,7,16,164,194,240,71,110,195,218,172,54,65,7,16,164,194,0,96,106,195,155,230,68,65,7,16,164,194,16,120,102,195,47,221,87,65,7,16,164,194,33,144,98,195,175,148,110,65,7,16,164,194,240,167,94,195,211,94,132,65,7,16,164,194,0,192,90,195,105,0,139,65,7,16,164,194,16,216,86,195,93,92,133,65,7,16,164,194,33,240,82,195,238,90,121,65,7,16,164,194,240,7,79,195,36,151,133,65,7,16,164,194,0,32,75,195,193,40,141,65,7,16,164,194,16,56,71,195,22,251,147,65,7,16,164,194,33,80,67,195,150,67,144,65,7,16,164,194,240,103,63,195,10,104,153,65,7,16,164,194,0,128,59,195,91,177,165,65,7,16,164,194,16,152,55,195,195,100,172,65,7,16,164,194,33,176,51,195,143,83,166,65,7,16,164,194,240,199,47,195,71,131,165,65,7,16,164,194,0,224,43,195,43,24,173,65,7,16,164,194,16,248,39,195,86,125,173,65,7,16,164,194,33,16,36,195,136,99,163,65,7,16,164,194,240,39,32,195,40,143,155,65,7,16,164,194,0,64,28,195,114,249,142,65,7,16,164,194,16,88,24,195,134,201,128,65,7,16,164,194,33,112,20,195,225,250,128,65,7,16,164,194,240,135,16,195,54,205,116,65,7,16,164,194,0,160,12,195,73,46,96,65,7,16,164,194,16,184,8,195,161,103,75,65,7,16,164,194,33,208,4,195,70,182,82,65,7,16,164,194,240,231,0,195,163,146,98,65,7,16,164,194,0,0,250,194,147,24,96,65,7,16,164,194,33,48,242,194,215,18,89,65,7,16,164,194,66,96,234,194,180,200,108,65,7,16,164,194,223,143,226,194,16,233,122,65,7,16,164,194,0,192,218,194,218,172,113,65,7,16,164,194,33,240,210,194,187,184,119,65,7,16,164,194,66,32,203,194,14,190,137,65,7,16,164,194,7,80,195,194,105,111,153,65,7,16,164,194,0,128,187,194,179,106,170,65,7,16,164,194,7,176,179,194,28,252,175,65,7,16,164,194,0,224,171,194,140,57,195,65,7,16,164,194,7,16,164,194,25,115,230,65,7,16,164,194,0,64,156,194,145,15,254,65,7,16,164,194,7,112,148,194,173,122,10,66,7,16,164,194,0,160,140,194,217,14,20,66,7,16,164,194,7,208,132,194,124,97,30,66,7,16,164,194,0,0,122,194,181,183,45,66,7,16,164,194,13,96,106,194,43,216,55,66,7,16,164,194,0,192,90,194,141,151,61,66,7,16,164,194,13,32,75,194,208,68,70,66,7,16,164,194,0,128,59,194,249,241,77,66,7,16,164,194,13,224,43,194,145,79,81,66,7,16,164,194,0,64,28,194,196,177,82,66,7,16,164,194,13,160,12,194,187,56,86,66,7,16,164,194,0,0,250,193,43,216,89,66,7,16,164,194,26,192,218,193,170,66,85,66,7,16,164,194,0,128,187,193,55,218,83,66,7,16,164,194,26,64,156,193,65,66,81,66,7,16,164,194,0,0,122,193,10,40,87,66,7,16,164,194,52,128,59,193,181,149,89,66,7,16,164,194,0,0,250,192,47,238,88,66,7,16,164,194,0,0,122,192,210,175,86,66,7,16,164,194,0,0,0,0,239,120,83,66,7,16,164,194,0,0,122,64,199,203,79,66,7,16,164,194,0,0,122,195,220,104,68,65,0,224,171,194,16,24,118,195,232,106,62,65,0,224,171,194,33,48,114,195,39,49,87,65,0,224,171,194,240,71,110,195,61,44,102,65,0,224,171,194,0,96,106,195,20,174,109,65,0,224,171,194,16,120,102,195,22,106,117,65,0,224,171,194,33,144,98,195,131,175,138,65,0,224,171,194,240,167,94,195,184,175,149,65,0,224,171,194,0,192,90,195,117,19,144,65,0,224,171,194,16,216,86,195,71,114,139,65,0,224,171,194,33,240,82,195,182,115,136,65,0,224,171,194,240,7,79,195,48,59,131,65,0,224,171,194,0,32,75,195,91,194,138,65,0,224,171,194,16,56,71,195,30,167,140,65,0,224,171,194,33,80,67,195,65,2,142,65,0,224,171,194,240,103,63,195,4,86,150,65,0,224,171,194,0,128,59,195,235,98,158,65,0,224,171,194,16,152,55,195,238,218,156,65,0,224,171,194,33,176,51,195,231,29,153,65,0,224,171,194,240,199,47,195,175,37,152,65,0,224,171,194,0,224,43,195,93,254,157,65,0,224,171,194,16,248,39,195,116,36,157,65,0,224,171,194,33,16,36,195,112,223,148,65,0,224,171,194,240,39,32,195,49,153,145,65,0,224,171,194,0,64,28,195,124,114,133,65,0,224,171,194,16,88,24,195,47,110,112,65,0,224,171,194,33,112,20,195,108,9,86,65,0,224,171,194,240,135,16,195,41,203,75,65,0,224,171,194,0,160,12,195,40,15,68,65,0,224,171,194,16,184,8,195,37,117,74,65,0,224,171,194,33,208,4,195,16,122,76,65,0,224,171,194,240,231,0,195,168,87,83,65,0,224,171,194,0,0,250,194,158,94,77,65,0,224,171,194,33,48,242,194,63,198,72,65,0,224,171,194,66,96,234,194,164,112,88,65,0,224,171,194,223,143,226,194,132,158,88,65,0,224,171,194,0,192,218,194,17,199,89,65,0,224,171,194,33,240,210,194,159,60,107,65,0,224,171,194,66,32,203,194,134,56,133,65,0,224,171,194,7,80,195,194,128,200,143,65,0,224,171,194,0,128,187,194,61,155,158,65,0,224,171,194,7,176,179,194,137,82,174,65,0,224,171,194,0,224,171,194,208,51,187,65,0,224,171,194,7,16,164,194,59,129,219,65,0,224,171,194,0,64,156,194,177,80,241,65,0,224,171,194,7,112,148,194,163,18,7,66,0,224,171,194,0,160,140,194,43,182,16,66,0,224,171,194,7,208,132,194,21,140,24,66,0,224,171,194,0,0,122,194,165,78,38,66,0,224,171,194,13,96,106,194,255,33,47,66,0,224,171,194,0,192,90,194,201,118,55,66,0,224,171,194,13,32,75,194,231,76,66,66,0,224,171,194,0,128,59,194,218,172,73,66,0,224,171,194,13,224,43,194,121,24,76,66,0,224,171,194,0,64,28,194,162,244,76,66,0,224,171,194,13,160,12,194,199,139,79,66,0,224,171,194,0,0,250,193,73,157,83,66,0,224,171,194,26,192,218,193,121,41,82,66,0,224,171,194,0,128,187,193,131,81,81,66,0,224,171,194,26,64,156,193,9,91,82,66,0,224,171,194,0,0,122,193,148,54,81,66,0,224,171,194,52,128,59,193,224,126,80,66,0,224,171,194,0,0,250,192,66,62,80,66,0,224,171,194,0,0,122,192,208,21,76,66,0,224,171,194,0,0,0,0,139,61,74,66,0,224,171,194,0,0,122,64,43,7,72,66,0,224,171,194,0,0,122,195,69,71,90,65,7,176,179,194,16,24,118,195,159,171,100,65,7,176,179,194,33,48,114,195,105,111,127,65,7,176,179,194,240,71,110,195,234,4,137,65,7,176,179,194,0,96,106,195,100,93,143,65,7,176,179,194,16,120,102,195,0,239,143,65,7,176,179,194,33,144,98,195,8,189,154,65,7,176,179,194,240,167,94,195,237,30,161,65,7,176,179,194,0,192,90,195,41,92,154,65,7,176,179,194,16,216,86,195,124,225,144,65,7,176,179,194,33,240,82,195,186,201,138,65,7,176,179,194,240,7,79,195,146,220,136,65,7,176,179,194,0,32,75,195,47,238,141,65,7,176,179,194,16,56,71,195,41,220,137,65,7,176,179,194,33,80,67,195,87,91,141,65,7,176,179,194,240,103,63,195,230,191,150,65,7,176,179,194,0,128,59,195,71,114,153,65,7,176,179,194,16,152,55,195,194,23,149,65,7,176,179,194,33,176,51,195,206,153,138,65,7,176,179,194,240,199,47,195,2,154,140,65,7,176,179,194,0,224,43,195,211,205,144,65,7,176,179,194,16,248,39,195,193,185,144,65,7,176,179,194,33,16,36,195,233,38,132,65,7,176,179,194,240,39,32,195,41,92,120,65,7,176,179,194,0,64,28,195,152,76,102,65,7,176,179,194,16,88,24,195,233,183,86,65,7,176,179,194,33,112,20,195,2,188,77,65,7,176,179,194,240,135,16,195,51,196,77,65,7,176,179,194,0,160,12,195,216,129,68,65,7,176,179,194,16,184,8,195,175,148,70,65,7,176,179,194,33,208,4,195,28,235,79,65,7,176,179,194,240,231,0,195,172,139,63,65,7,176,179,194,0,0,250,194,87,91,61,65,7,176,179,194,33,48,242,194,27,13,68,65,7,176,179,194,66,96,234,194,163,146,73,65,7,176,179,194,223,143,226,194,29,90,83,65,7,176,179,194,0,192,218,194,206,136,91,65,7,176,179,194,33,240,210,194,23,217,93,65,7,176,179,194,66,32,203,194,235,226,109,65,7,176,179,194,7,80,195,194,202,212,128,65,7,176,179,194,0,128,187,194,99,255,143,65,7,176,179,194,7,176,179,194,150,50,160,65,7,176,179,194,0,224,171,194,220,104,182,65,7,176,179,194,7,16,164,194,160,154,206,65,7,176,179,194,0,64,156,194,251,58,232,65,7,176,179,194,7,112,148,194,246,168,254,65,7,176,179,194,0,160,140,194,64,19,9,66,7,176,179,194,7,208,132,194,200,7,21,66,7,176,179,194,0,0,122,194,227,54,35,66,7,176,179,194,13,96,106,194,64,36,44,66,7,176,179,194,0,192,90,194,6,18,50,66,7,176,179,194,13,32,75,194,73,238,61,66,7,176,179,194,0,128,59,194,9,185,67,66,7,176,179,194,13,224,43,194,174,71,67,66,7,176,179,194,0,64,28,194,7,142,67,66,7,176,179,194,13,160,12,194,51,51,72,66,7,176,179,194,0,0,250,193,130,179,75,66,7,176,179,194,26,192,218,193,41,139,81,66,7,176,179,194,0,128,187,193,175,20,81,66,7,176,179,194,26,64,156,193,128,72,80,66,7,176,179,194,0,0,122,193,255,33,77,66,7,176,179,194,52,128,59,193,70,101,72,66,7,176,179,194,0,0,250,192,196,113,70,66,7,176,179,194,0,0,122,192,47,29,67,66,7,176,179,194,0,0,0,0,138,223,66,66,7,176,179,194,0,0,122,64,110,163,62,66,7,176,179,194,0,0,122,195,182,243,115,65,0,128,187,194,16,24,118,195,125,208,140,65,0,128,187,194,33,48,114,195,197,254,153,65,0,128,187,194,240,71,110,195,138,176,166,65,0,128,187,194,0,96,106,195,219,121,163,65,0,128,187,194,16,120,102,195,242,65,169,65,0,128,187,194,33,144,98,195,59,129,170,65,0,128,187,194,240,167,94,195,160,9,167,65,0,128,187,194,0,192,90,195,17,71,164,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+153600);
/* memory initializer */ allocate([0,128,187,194,16,216,86,195,226,216,154,65,0,128,187,194,33,240,82,195,84,244,145,65,0,128,187,194,240,7,79,195,146,203,140,65,0,128,187,194,0,32,75,195,208,68,144,65,0,128,187,194,16,56,71,195,229,114,144,65,0,128,187,194,33,80,67,195,78,98,141,65,0,128,187,194,240,103,63,195,162,180,149,65,0,128,187,194,0,128,59,195,232,106,147,65,0,128,187,194,16,152,55,195,190,159,144,65,0,128,187,194,33,176,51,195,32,99,134,65,0,128,187,194,240,199,47,195,43,118,129,65,0,128,187,194,0,224,43,195,230,191,132,65,0,128,187,194,16,248,39,195,243,142,128,65,0,128,187,194,33,16,36,195,104,179,111,65,0,128,187,194,240,39,32,195,177,191,82,65,0,128,187,194,0,64,28,195,227,199,66,65,0,128,187,194,16,88,24,195,252,169,67,65,0,128,187,194,33,112,20,195,28,124,68,65,0,128,187,194,240,135,16,195,127,106,72,65,0,128,187,194,0,160,12,195,222,113,62,65,0,128,187,194,16,184,8,195,234,149,69,65,0,128,187,194,33,208,4,195,245,219,59,65,0,128,187,194,240,231,0,195,94,186,56,65,0,128,187,194,0,0,250,194,86,14,58,65,0,128,187,194,33,48,242,194,227,165,55,65,0,128,187,194,66,96,234,194,117,147,56,65,0,128,187,194,223,143,226,194,136,244,61,65,0,128,187,194,0,192,218,194,143,194,73,65,0,128,187,194,33,240,210,194,213,9,75,65,0,128,187,194,66,32,203,194,135,167,82,65,0,128,187,194,7,80,195,194,36,151,105,65,0,128,187,194,0,128,187,194,223,207,132,65,0,128,187,194,7,176,179,194,15,139,159,65,0,128,187,194,0,224,171,194,206,25,183,65,0,128,187,194,7,16,164,194,52,145,210,65,0,128,187,194,0,64,156,194,32,210,230,65,0,128,187,194,7,112,148,194,13,96,242,65,0,128,187,194,0,160,140,194,136,163,4,66,0,128,187,194,7,208,132,194,40,15,17,66,0,128,187,194,0,0,122,194,103,196,28,66,0,128,187,194,13,96,106,194,28,171,37,66,0,128,187,194,0,192,90,194,56,184,45,66,0,128,187,194,13,32,75,194,218,44,54,66,0,128,187,194,0,128,59,194,45,131,58,66,0,128,187,194,13,224,43,194,209,34,59,66,0,128,187,194,0,64,28,194,178,93,61,66,0,128,187,194,13,160,12,194,50,55,66,66,0,128,187,194,0,0,250,193,29,73,74,66,0,128,187,194,26,192,218,193,122,54,76,66,0,128,187,194,0,128,187,193,242,18,79,66,0,128,187,194,26,64,156,193,136,116,77,66,0,128,187,194,0,0,122,193,254,131,70,66,0,128,187,194,52,128,59,193,249,32,72,66,0,128,187,194,0,0,250,192,254,131,66,66,0,128,187,194,0,0,122,192,220,23,59,66,0,128,187,194,0,0,0,0,175,101,54,66,0,128,187,194,0,0,122,64,61,172,53,66,0,128,187,194,0,0,122,195,200,7,148,65,7,80,195,194,16,24,118,195,142,245,160,65,7,80,195,194,33,48,114,195,90,228,181,65,7,80,195,194,240,71,110,195,238,124,194,65,7,80,195,194,0,96,106,195,191,14,194,65,7,80,195,194,16,120,102,195,88,168,194,65,7,80,195,194,33,144,98,195,1,205,194,65,7,80,195,194,240,167,94,195,146,203,186,65,7,80,195,194,0,192,90,195,64,36,174,65,7,80,195,194,16,216,86,195,39,66,165,65,7,80,195,194,33,240,82,195,165,206,150,65,7,80,195,194,240,7,79,195,129,21,145,65,7,80,195,194,0,32,75,195,197,160,148,65,7,80,195,194,16,56,71,195,163,163,145,65,7,80,195,194,33,80,67,195,14,79,139,65,7,80,195,194,240,103,63,195,78,226,148,65,7,80,195,194,0,128,59,195,236,175,144,65,7,80,195,194,16,152,55,195,249,160,138,65,7,80,195,194,33,176,51,195,174,71,133,65,7,80,195,194,240,199,47,195,36,151,114,65,7,80,195,194,0,224,43,195,4,86,100,65,7,80,195,194,16,248,39,195,125,174,87,65,7,80,195,194,33,16,36,195,97,50,74,65,7,80,195,194,240,39,32,195,116,36,55,65,7,80,195,194,0,64,28,195,67,173,56,65,7,80,195,194,16,88,24,195,82,184,60,65,7,80,195,194,33,112,20,195,163,146,46,65,7,80,195,194,240,135,16,195,21,140,51,65,7,80,195,194,0,160,12,195,81,218,48,65,7,80,195,194,16,184,8,195,183,209,56,65,7,80,195,194,33,208,4,195,212,154,58,65,7,80,195,194,240,231,0,195,168,87,47,65,7,80,195,194,0,0,250,194,225,11,38,65,7,80,195,194,33,48,242,194,52,104,31,65,7,80,195,194,66,96,234,194,202,195,42,65,7,80,195,194,223,143,226,194,163,35,52,65,7,80,195,194,0,192,218,194,234,4,52,65,7,80,195,194,33,240,210,194,170,241,65,65,7,80,195,194,66,32,203,194,235,115,65,65,7,80,195,194,7,80,195,194,4,86,89,65,7,80,195,194,0,128,187,194,147,58,133,65,7,80,195,194,7,176,179,194,230,174,157,65,7,80,195,194,0,224,171,194,246,168,182,65,7,80,195,194,7,16,164,194,7,240,213,65,7,80,195,194,0,64,156,194,66,207,235,65,7,80,195,194,7,112,148,194,27,47,241,65,7,80,195,194,0,160,140,194,104,98,6,66,7,80,195,194,7,208,132,194,139,172,16,66,7,80,195,194,0,0,122,194,142,117,21,66,7,80,195,194,13,96,106,194,43,199,29,66,7,80,195,194,0,192,90,194,173,122,33,66,7,80,195,194,13,32,75,194,186,9,45,66,7,80,195,194,0,128,59,194,208,51,47,66,7,80,195,194,13,224,43,194,49,89,51,66,7,80,195,194,0,64,28,194,226,152,59,66,7,80,195,194,13,160,12,194,196,66,67,66,7,80,195,194,0,0,250,193,211,30,73,66,7,80,195,194,26,192,218,193,149,229,70,66,7,80,195,194,0,128,187,193,155,102,71,66,7,80,195,194,26,64,156,193,93,109,71,66,7,80,195,194,0,0,122,193,138,78,65,66,7,80,195,194,52,128,59,193,141,104,63,66,7,80,195,194,0,0,250,192,121,88,61,66,7,80,195,194,0,0,122,192,190,159,56,66,7,80,195,194,0,0,0,0,30,150,51,66,7,80,195,194,0,0,122,64,212,218,51,66,7,80,195,194,0,0,122,195,103,68,168,65,66,32,203,194,16,24,118,195,119,190,184,65,66,32,203,194,33,48,114,195,232,89,203,65,66,32,203,194,240,71,110,195,225,122,218,65,66,32,203,194,0,96,106,195,18,148,214,65,66,32,203,194,16,120,102,195,0,0,211,65,66,32,203,194,33,144,98,195,165,44,214,65,66,32,203,194,240,167,94,195,226,233,202,65,66,32,203,194,0,192,90,195,95,24,190,65,66,32,203,194,16,216,86,195,0,145,171,65,66,32,203,194,33,240,82,195,72,63,158,65,66,32,203,194,240,7,79,195,152,110,152,65,66,32,203,194,0,32,75,195,158,222,156,65,66,32,203,194,16,56,71,195,157,0,154,65,66,32,203,194,33,80,67,195,175,165,144,65,66,32,203,194,240,103,63,195,0,0,142,65,66,32,203,194,0,128,59,195,154,8,137,65,66,32,203,194,16,152,55,195,134,184,129,65,66,32,203,194,33,176,51,195,233,72,126,65,66,32,203,194,240,199,47,195,29,201,103,65,66,32,203,194,0,224,43,195,96,118,94,65,66,32,203,194,16,248,39,195,176,114,68,65,66,32,203,194,33,16,36,195,82,73,57,65,66,32,203,194,240,39,32,195,66,62,64,65,66,32,203,194,0,64,28,195,124,97,59,65,66,32,203,194,16,88,24,195,93,254,43,65,66,32,203,194,33,112,20,195,71,189,26,65,66,32,203,194,240,135,16,195,216,158,27,65,66,32,203,194,0,160,12,195,209,249,31,65,66,32,203,194,16,184,8,195,98,16,40,65,66,32,203,194,33,208,4,195,154,119,49,65,66,32,203,194,240,231,0,195,197,254,39,65,66,32,203,194,0,0,250,194,14,248,17,65,66,32,203,194,33,48,242,194,22,147,5,65,66,32,203,194,66,96,234,194,90,187,14,65,66,32,203,194,223,143,226,194,88,45,23,65,66,32,203,194,0,192,218,194,199,186,40,65,66,32,203,194,33,240,210,194,96,229,43,65,66,32,203,194,66,32,203,194,196,66,58,65,66,32,203,194,7,80,195,194,163,146,99,65,66,32,203,194,0,128,187,194,71,131,136,65,66,32,203,194,7,176,179,194,57,197,164,65,66,32,203,194,0,224,171,194,73,174,183,65,66,32,203,194,7,16,164,194,110,180,208,65,66,32,203,194,0,64,156,194,196,194,226,65,66,32,203,194,7,112,148,194,18,148,243,65,66,32,203,194,0,160,140,194,191,14,7,66,66,32,203,194,7,208,132,194,199,58,17,66,66,32,203,194,0,0,122,194,240,69,24,66,66,32,203,194,13,96,106,194,136,163,28,66,66,32,203,194,0,192,90,194,192,91,33,66,66,32,203,194,13,32,75,194,120,250,37,66,66,32,203,194,0,128,59,194,248,2,44,66,66,32,203,194,13,224,43,194,164,95,51,66,66,32,203,194,0,64,28,194,109,214,60,66,66,32,203,194,13,160,12,194,45,97,61,66,66,32,203,194,0,0,250,193,172,203,68,66,66,32,203,194,26,192,218,193,72,97,67,66,66,32,203,194,0,128,187,193,61,138,62,66,66,32,203,194,26,64,156,193,244,189,63,66,66,32,203,194,0,0,122,193,91,147,60,66,66,32,203,194,52,128,59,193,76,183,55,66,66,32,203,194,0,0,250,192,138,159,59,66,66,32,203,194,0,0,122,192,119,126,56,66,66,32,203,194,0,0,0,0,223,15,53,66,66,32,203,194,0,0,122,64,217,31,50,66,66,32,203,194,0,0,122,195,59,1,192,65,33,240,210,194,16,24,118,195,47,221,213,65,33,240,210,194,33,48,114,195,170,113,227,65,33,240,210,194,240,71,110,195,69,88,232,65,33,240,210,194,0,96,106,195,254,67,225,65,33,240,210,194,16,120,102,195,116,36,224,65,33,240,210,194,33,144,98,195,154,136,219,65,33,240,210,194,240,167,94,195,151,16,216,65,33,240,210,194,0,192,90,195,128,183,199,65,33,240,210,194,16,216,86,195,108,248,182,65,33,240,210,194,33,240,82,195,9,155,171,65,33,240,210,194,240,7,79,195,122,165,169,65,33,240,210,194,0,32,75,195,191,125,166,65,33,240,210,194,16,56,71,195,38,211,165,65,33,240,210,194,33,80,67,195,235,226,157,65,33,240,210,194,240,103,63,195,82,201,147,65,33,240,210,194,0,128,59,195,0,128,137,65,33,240,210,194,16,152,55,195,71,3,119,65,33,240,210,194,33,176,51,195,127,106,98,65,33,240,210,194,240,199,47,195,172,28,94,65,33,240,210,194,0,224,43,195,173,105,78,65,33,240,210,194,16,248,39,195,158,239,51,65,33,240,210,194,33,16,36,195,40,15,50,65,33,240,210,194,240,39,32,195,207,247,43,65,33,240,210,194,0,64,28,195,59,1,56,65,33,240,210,194,16,88,24,195,143,228,37,65,33,240,210,194,33,112,20,195,177,249,29,65,33,240,210,194,240,135,16,195,59,112,26,65,33,240,210,194,0,160,12,195,194,233,5,65,33,240,210,194,16,184,8,195,111,245,17,65,33,240,210,194,33,208,4,195,82,167,22,65,33,240,210,194,240,231,0,195,58,163,15,65,33,240,210,194,0,0,250,194,117,171,252,64,33,240,210,194,33,48,242,194,25,115,230,64,33,240,210,194,66,96,234,194,191,96,212,64,33,240,210,194,223,143,226,194,89,105,4,65,33,240,210,194,0,192,218,194,154,66,6,65,33,240,210,194,33,240,210,194,28,25,27,65,33,240,210,194,66,32,203,194,98,161,67,65,33,240,210,194,7,80,195,194,86,14,118,65,33,240,210,194,0,128,187,194,125,80,145,65,33,240,210,194,7,176,179,194,213,248,166,65,33,240,210,194,0,224,171,194,169,19,188,65,33,240,210,194,7,16,164,194,88,168,201,65,33,240,210,194,0,64,156,194,44,212,222,65,33,240,210,194,7,112,148,194,177,191,246,65,33,240,210,194,0,160,140,194,30,150,7,66,33,240,210,194,7,208,132,194,40,62,17,66,33,240,210,194,0,0,122,194,102,183,23,66,33,240,210,194,13,96,106,194,105,47,31,66,33,240,210,194,0,192,90,194,187,56,34,66,33,240,210,194,13,32,75,194,179,140,40,66,33,240,210,194,0,128,59,194,126,12,43,66,33,240,210,194,13,224,43,194,253,71,50,66,33,240,210,194,0,64,28,194,178,221,57,66,33,240,210,194,13,160,12,194,190,112,58,66,33,240,210,194,0,0,250,193,167,121,60,66,33,240,210,194,26,192,218,193,63,53,64,66,33,240,210,194,0,128,187,193,84,35,63,66,33,240,210,194,26,64,156,193,123,67,63,66,33,240,210,194,0,0,122,193,218,27,59,66,33,240,210,194,52,128,59,193,97,3,56,66,33,240,210,194,0,0,250,192,247,36,61,66,33,240,210,194,0,0,122,192,204,238,59,66,33,240,210,194,0,0,0,0,188,150,54,66,33,240,210,194,0,0,122,64,235,98,51,66,33,240,210,194,0,0,122,195,219,10,216,65,0,192,218,194,16,24,118,195,254,229,227,65,0,192,218,194,33,48,114,195,64,147,238,65,0,192,218,194,240,71,110,195,229,114,240,65,0,192,218,194,0,96,106,195,72,80,234,65,0,192,218,194,16,120,102,195,20,191,236,65,0,192,218,194,33,144,98,195,37,245,230,65,0,192,218,194,240,167,94,195,161,231,219,65,0,192,218,194,0,192,90,195,100,187,205,65,0,192,218,194,16,216,86,195,238,252,191,65,0,192,218,194,33,240,82,195,153,42,187,65,0,192,218,194,240,7,79,195,134,218,186,65,0,192,218,194,0,32,75,195,24,166,186,65,0,192,218,194,16,56,71,195,242,176,177,65,0,192,218,194,33,80,67,195,146,92,168,65,0,192,218,194,240,103,63,195,239,184,161,65,0,192,218,194,0,128,59,195,197,143,150,65,0,192,218,194,16,152,55,195,254,101,134,65,0,192,218,194,33,176,51,195,165,78,126,65,0,192,218,194,240,199,47,195,32,210,109,65,0,192,218,194,0,224,43,195,41,92,82,65,0,192,218,194,16,248,39,195,205,204,75,65,0,192,218,194,33,16,36,195,250,237,43,65,0,192,218,194,240,39,32,195,30,167,36,65,0,192,218,194,0,64,28,195,157,116,26,65,0,192,218,194,16,88,24,195,108,9,34,65,0,192,218,194,33,112,20,195,49,177,30,65,0,192,218,194,240,135,16,195,179,193,14,65,0,192,218,194,0,160,12,195,58,117,5,65,0,192,218,194,16,184,8,195,246,64,250,64,0,192,218,194,33,208,4,195,59,170,229,64,0,192,218,194,240,231,0,195,90,13,233,64,0,192,218,194,0,0,250,194,77,50,222,64,0,192,218,194,33,48,242,194,58,122,210,64,0,192,218,194,66,96,234,194,155,3,182,64,0,192,218,194,223,143,226,194,76,84,181,64,0,192,218,194,0,192,218,194,45,67,222,64,0,192,218,194,33,240,210,194,60,247,28,65,0,192,218,194,66,32,203,194,64,164,74,65,0,192,218,194,7,80,195,194,246,151,115,65,0,192,218,194,0,128,187,194,150,33,147,65,0,192,218,194,7,176,179,194,251,92,168,65,0,192,218,194,0,224,171,194,251,220,186,65,0,192,218,194,7,16,164,194,205,59,200,65,0,192,218,194,0,64,156,194,168,181,231,65,0,192,218,194,7,112,148,194,235,226,255,65,0,192,218,194,0,160,140,194,117,83,10,66,0,192,218,194,7,208,132,194,23,153,20,66,0,192,218,194,0,0,122,194,254,37,26,66,0,192,218,194,13,96,106,194,21,204,30,66,0,192,218,194,0,192,90,194,91,83,37,66,0,192,218,194,13,32,75,194,197,79,41,66,0,192,218,194,0,128,59,194,147,152,45,66,0,192,218,194,13,224,43,194,161,150,51,66,0,192,218,194,0,64,28,194,86,206,57,66,0,192,218,194,13,160,12,194,113,172,58,66,0,192,218,194,0,0,250,193,18,20,61,66,0,192,218,194,26,192,218,193,50,213,64,66,0,192,218,194,0,128,187,193,50,21,61,66,0,192,218,194,26,64,156,193,217,206,63,66,0,192,218,194,0,0,122,193,156,162,61,66,0,192,218,194,52,128,59,193,168,151,61,66,0,192,218,194,0,0,250,192,112,78,64,66,0,192,218,194,0,0,122,192,86,253,61,66,0,192,218,194,0,0,0,0,16,186,56,66,0,192,218,194,0,0,122,64,69,152,53,66,0,192,218,194,0,0,122,195,196,49,228,65,223,143,226,194,16,24,118,195,244,108,242,65,223,143,226,194,33,48,114,195,84,244,249,65,223,143,226,194,240,71,110,195,47,221,245,65,223,143,226,194,0,96,106,195,71,242,249,65,223,143,226,194,16,120,102,195,199,169,252,65,223,143,226,194,33,144,98,195,10,104,242,65,223,143,226,194,240,167,94,195,223,224,225,65,223,143,226,194,0,192,90,195,40,126,206,65,223,143,226,194,16,216,86,195,43,246,202,65,223,143,226,194,33,240,82,195,125,191,198,65,223,143,226,194,240,7,79,195,234,4,206,65,223,143,226,194,0,32,75,195,77,4,208,65,223,143,226,194,16,56,71,195,29,56,199,65,223,143,226,194,33,80,67,195,223,224,189,65,223,143,226,194,240,103,63,195,184,175,175,65,223,143,226,194,0,128,59,195,184,175,161,65,223,143,226,194,16,152,55,195,57,180,151,65,223,143,226,194,33,176,51,195,220,87,142,65,223,143,226,194,240,199,47,195,102,230,130,65,223,143,226,194,0,224,43,195,164,112,106,65,223,143,226,194,16,248,39,195,243,31,87,65,223,143,226,194,33,16,36,195,46,144,56,65,223,143,226,194,240,39,32,195,223,79,39,65,223,143,226,194,0,64,28,195,86,229,29,65,223,143,226,194,16,88,24,195,124,56,28,65,223,143,226,194,33,112,20,195,33,135,22,65,223,143,226,194,240,135,16,195,126,24,6,65,223,143,226,194,0,160,12,195,19,126,0,65,223,143,226,194,16,184,8,195,228,131,238,64,223,143,226,194,33,208,4,195,41,92,202,64,223,143,226,194,240,231,0,195,27,18,189,64,223,143,226,194,0,0,250,194,205,30,174,64,223,143,226,194,33,48,242,194,77,21,177,64,223,143,226,194,66,96,234,194,214,57,171,64,223,143,226,194,223,143,226,194,222,142,196,64,223,143,226,194,0,192,218,194,240,51,247,64,223,143,226,194,33,240,210,194,197,213,31,65,223,143,226,194,66,32,203,194,69,71,78,65,223,143,226,194,7,80,195,194,104,145,122,65,223,143,226,194,0,128,187,194,166,138,147,65,223,143,226,194,7,176,179,194,215,180,163,65,223,143,226,194,0,224,171,194,134,201,178,65,223,143,226,194,7,16,164,194,124,242,205,65,223,143,226,194,0,64,156,194,234,132,236,65,223,143,226,194,7,112,148,194,104,243,2,66,223,143,226,194,0,160,140,194,197,207,9,66,223,143,226,194,7,208,132,194,213,9,20,66,223,143,226,194,0,0,122,194,168,6,25,66,223,143,226,194,13,96,106,194,149,148,31,66,223,143,226,194,0,192,90,194,252,41,37,66,223,143,226,194,13,32,75,194,62,104,42,66,223,143,226,194,0,128,59,194,25,115,45,66,223,143,226,194,13,224,43,194,45,97,49,66,223,143,226,194,0,64,28,194,69,199,53,66,223,143,226,194,13,160,12,194,20,16,56,66,223,143,226,194,0,0,250,193,30,167,62,66,223,143,226,194,26,192,218,193,11,198,62,66,223,143,226,194,0,128,187,193,250,237,57,66,223,143,226,194,26,64,156,193,77,21,65,66,223,143,226,194,0,0,122,193,176,3,66,66,223,143,226,194,52,128,59,193,207,183,62,66,223,143,226,194,0,0,250,192,149,229,65,66,223,143,226,194,0,0,122,192,55,9,66,66,223,143,226,194,0,0,0,0,100,157,61,66,223,143,226,194,0,0,122,64,150,242,61,66,223,143,226,194,0,0,122,195,9,155,245,65,66,96,234,194,16,24,118,195,205,76,253,65,66,96,234,194,33,48,114,195,200,152,254,65,66,96,234,194,240,71,110,195,251,250,1,66,66,96,234,194,0,96,106,195,186,107,5,66,66,96,234,194,16,120,102,195,8,253,2,66,66,96,234,194,33,144,98,195,62,121,246,65,66,96,234,194,240,167,94,195,12,130,226,65,66,96,234,194,0,192,90,195,199,186,216,65,66,96,234,194,16,216,86,195,175,37,216,65,66,96,234,194,33,240,82,195,197,143,220,65,66,96,234,194,240,7,79,195,229,114,223,65,66,96,234,194,0,32,75,195,42,186,224,65,66,96,234,194,16,56,71,195,102,136,213,65,66,96,234,194,33,80,67,195,30,150,205,65,66,96,234,194,240,103,63,195,93,126,192,65,66,96,234,194,0,128,59,195,73,46,177,65,66,96,234,194,16,152,55,195,70,182,167,65,66,96,234,194,33,176,51,195,52,34,153,65,66,96,234,194,240,199,47,195,184,192,144,65,66,96,234,194,0,224,43,195,82,201,130,65,66,96,234,194,16,248,39,195,180,89,94,65,66,96,234,194,33,16,36,195,211,77,67,65,66,96,234,194,240,39,32,195,31,244,38,65,66,96,234,194,0,64,28,195,121,134,20,65,66,96,234,194,16,88,24,195,106,89,3,65,66,96,234,194,33,112,20,195,87,33,246,64,66,96,234,194,240,135,16,195,41,174,225,64,66,96,234,194,0,160,12,195,19,97,204,64,66,96,234,194,16,184,8,195,147,111,188,64,66,96,234,194,33,208,4,195,188,92,143,64,66,96,234,194,240,231,0,195,198,249,128,64,66,96,234,194,0,0,250,194,184,233,158,64,66,96,234,194,33,48,242,194,246,151,194,64,66,96,234,194,66,96,234,194,186,107,216,64,66,96,234,194,223,143,226,194,217,37,237,64,66,96,234,194,0,192,218,194,45,33,241,64,66,96,234,194,33,240,210,194,56,21,30,65,66,96,234,194,66,32,203,194,29,56,62,65,66,96,234,194,7,80,195,194,240,133,103,65,66,96,234,194,0,128,187,194,230,191,137,65,66,96,234,194,7,176,179,194,245,202,161,65,66,96,234,194,0,224,171,194,122,54,178,65,66,96,234,194,7,16,164,194,119,190,207,65,66,96,234,194,0,64,156,194,161,86,234,65,66,96,234,194,7,112,148,194,41,220,255,65,66,96,234,194,0,160,140,194,106,77,8,66,66,96,234,194,7,208,132,194,73,174,15,66,66,96,234,194,0,0,122,194,4,167,23,66,66,96,234,194,13,96,106,194,75,234,28,66,66,96,234,194,0,192,90,194,47,93,34,66,66,96,234,194,13,32,75,194,143,19,42,66,66,96,234,194,0,128,59,194,18,229,42,66,66,96,234,194,13,224,43,194,238,90,47,66,66,96,234,194,0,64,28,194,67,220,52,66,66,96,234,194,13,160,12,194,78,98,52,66,66,96,234,194,0,0,250,193,43,246,55,66,66,96,234,194,26,192,218,193,160,9,53,66,66,96,234,194,0,128,187,193,230,238,54,66,66,96,234,194,26,64,156,193,255,178,61,66,66,96,234,194,0,0,122,193,238,124,64,66,66,96,234,194,52,128,59,193,243,31,64,66,66,96,234,194,0,0,250,192,34,44,68,66,66,96,234,194,0,0,122,192,33,31,69,66,66,96,234,194,0,0,0,0,70,54,67,66,66,96,234,194,0,0,122,64,7,142,65,66,66,96,234,194,0,0,122,195,99,255,253,65,33,48,242,194,16,24,118,195,172,45,251,65,33,48,242,194,33,48,114,195,251,75,0,66,33,48,242,194,240,71,110,195,192,155,4,66,33,48,242,194,0,96,106,195,93,109,6,66,33,48,242,194,16,120,102,195,29,218,255,65,33,48,242,194,33,144,98,195,152,93,242,65,33,48,242,194,240,167,94,195,40,143,228,65,33,48,242,194,0,192,90,195,178,174,226,65,33,48,242,194,16,216,86,195,211,188,230,65,33,48,242,194,33,240,82,195,0,111,235,65,33,48,242,194,240,7,79,195,51,68,234,65,33,48,242,194,0,32,75,195,100,76,227,65,33,48,242,194,16,56,71,195,98,144,219,65,33,48,242,194,33,80,67,195,14,62,215,65,33,48,242,194,240,103,63,195,253,135,198,65,33,48,242,194,0,128,59,195,247,134,179,65,33,48,242,194,16,152,55,195,140,91,172,65,33,48,242,194,33,176,51,195,155,85,165,65,33,48,242,194,240,199,47,195,60,206,151,65,33,48,242,194,0,224,43,195,62,121,134,65,33,48,242,194,16,248,39,195,197,254,103,65,33,48,242,194,33,16,36,195,249,49,80,65,33,48,242,194,240,39,32,195,122,165,52,65,33,48,242,194,0,64,28,195,70,54,26,65,33,48,242,194,16,88,24,195,26,11,10,65,33,48,242,194,33,112,20,195,25,202,235,64,33,48,242,194,240,135,16,195,2,43,206,64,33,48,242,194,0,160,12,195,242,65,176,64,33,48,242,194,16,184,8,195,151,28,192,64,33,48,242,194,33,208,4,195,217,177,149,64,33,48,242,194,240,231,0,195,100,146,123,64,33,48,242,194,0,0,250,194,213,149,172,64,33,48,242,194,33,48,242,194,249,131,222,64,33,48,242,194,66,96,234,194,176,27,0,65,33,48,242,194,223,143,226,194,153,158,248,64,33,48,242,194,0,192,218,194,104,145,9,65,33,48,242,194,33,240,210,194,180,130,27,65,33,48,242,194,66,32,203,194,147,169,55,65,33,48,242,194,7,80,195,194,233,38,89,65,33,48,242,194,0,128,187,194,159,60,128,65,33,48,242,194,7,176,179,194,46,16,148,65,33,48,242,194,0,224,171,194,131,47,180,65,33,48,242,194,7,16,164,194,161,214,205,65,33,48,242,194,0,64,156,194,57,86,232,65,33,48,242,194,7,112,148,194,24,38,255,65,33,48,242,194,0,160,140,194,40,190,6,66,33,48,242,194,7,208,132,194,149,148,15,66,33,48,242,194,0,0,122,194,150,178,21,66,33,48,242,194,13,96,106,194,233,136,28,66,33,48,242,194,0,192,90,194,159,188,34,66,33,48,242,194,13,32,75,194,23,136,39,66,33,48,242,194,0,128,59,194,190,240,43,66,33,48,242,194,13,224,43,194,249,113,41,66,33,48,242,194,0,64,28,194,52,64,48,66,33,48,242,194,13,160,12,194,20,127,45,66,33,48,242,194,0,0,250,193,11,245,44,66,33,48,242,194,26,192,218,193,245,202,48,66,33,48,242,194,0,128,187,193,75,25,53,66,33,48,242,194,26,64,156,193,155,149,58,66,33,48,242,194,0,0,122,193,29,90,61,66,33,48,242,194,52,128,59,193,247,134,64,66,33,48,242,194,0,0,250,192,190,112,69,66,33,48,242,194,0,0,122,192,104,179,70,66,33,48,242,194,0,0,0,0,196,113,69,66,33,48,242,194,0,0,122,64,37,181,70,66,33,48,242,194,0,0,122,195,82,56,251,65,0,0,250,194,16,24,118,195,254,84,251,65,0,0,250,194,33,48,114,195,137,65,1,66,0,0,250,194,240,71,110,195,198,237,3,66,0,0,250,194,0,96,106,195,233,200,2,66,0,0,250,194,16,120,102,195,213,231,250,65,0,0,250,194,33,144,98,195,71,131,235,65,0,0,250,194,240,167,94,195,233,38,236,65,0,0,250,194,0,192,90,195,181,149,235,65,0,0,250,194,16,216,86,195,233,200,238,65,0,0,250,194,33,240,82,195,150,67,243,65,0,0,250,194,240,7,79,195,248,83,242,65,0,0,250,194,0,32,75,195,120,250,229,65,0,0,250,194,16,56,71,195,235,115,225,65,0,0,250,194,33,80,67,195,109,69,218,65,0,0,250,194,240,103,63,195,73,157,205,65,0,0,250,194,0,128,59,195,60,78,186,65,0,0,250,194,16,152,55,195,140,74,177,65,0,0,250,194,33,176,51,195,150,67,165,65,0,0,250,194,240,199,47,195,20,191,150,65,0,0,250,194,0,224,43,195,121,233,130,65,0,0,250,194,16,248,39,195,67,173,107,65,0,0,250,194,33,16,36,195,63,198,79,65,0,0,250,194,240,39,32,195,35,74,53,65,0,0,250,194,0,64,28,195,203,16,35,65,0,0,250,194,16,88,24,195,226,88,6,65,0,0,250,194,33,112,20,195,21,116,199,64,0,0,250,194,240,135,16,195,218,172,175,64,0,0,250,194,0,160,12,195,43,217,165,64,0,0,250,194,16,184,8,195,90,240,177,64,0,0,250,194,33,208,4,195,221,12,184,64,0,0,250,194,240,231,0,195,14,74,170,64,0,0,250,194,0,0,250,194,218,3,197,64,0,0,250,194,33,48,242,194,81,20,241,64,0,0,250,194,66,96,234,194,43,48,6,65,0,0,250,194,223,143,226,194,170,72,10,65,0,0,250,194,0,192,218,194,149,253,7,65,0,0,250,194,33,240,210,194,190,234,19,65,0,0,250,194,66,32,203,194,233,72,56,65,0,0,250,194,7,80,195,194,175,148,86,65,0,0,250,194,0,128,187,194,197,254,119,65,0,0,250,194,7,176,179,194,54,205,138,65,0,0,250,194,0,224,171,194,206,136,166,65,0,0,250,194,7,16,164,194,37,134,199,65,0,0,250,194,0,64,156,194,222,241,222,65,0,0,250,194,7,112,148,194,45,50,241,65,0,0,250,194,0,160,140,194,196,194,1,66,0,0,250,194,7,208,132,194,202,3,9,66,0,0,250,194,0,0,122,194,204,63,18,66,0,0,250,194,13,96,106,194,93,156,27,66,0,0,250,194,0,192,90,194,16,122,32,66,0,0,250,194,13,32,75,194,216,193,39,66,0,0,250,194,0,128,59,194,137,129,39,66,0,0,250,194,13,224,43,194,100,140,38,66,0,0,250,194,0,64,28,194,163,146,38,66,0,0,250,194,13,160,12,194,11,36,37,66,0,0,250,194,0,0,250,193,105,64,38,66,0,0,250,194,26,192,218,193,178,46,41,66,0,0,250,194,0,128,187,193,58,227,47,66,0,0,250,194,26,64,156,193,143,228,56,66,0,0,250,194,0,0,122,193,217,61,61,66,0,0,250,194,52,128,59,193,144,96,62,66,0,0,250,194,0,0,250,192,16,122,68,66,0,0,250,194,0,0,122,192,82,137,70,66,0,0,250,194,0,0,0,0,116,100,73,66,0,0,250,194,0,0,122,64,90,53,73,66,0,0,250,194,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,126,0,127,0,128,0,129,0,128,0,127,0,128,0,129,0,130,0,131,0,130,0,129,0,132,0,0,0,133,0,2,0,133,0,0,0,133,0,2,0,134,0,4,0,134,0,2,0,134,0,4,0,135,0,6,0,135,0,4,0,135,0,6,0,136,0,8,0,136,0,6,0,136,0,8,0,137,0,10,0,137,0,8,0,137,0,10,0,138,0,12,0,138,0,10,0,138,0,12,0,139,0,14,0,139,0,12,0,139,0,14,0,140,0,16,0,140,0,14,0,140,0,16,0,141,0,18,0,141,0,16,0,141,0,18,0,142,0,20,0,142,0,18,0,142,0,20,0,143,0,22,0,143,0,20,0,143,0,22,0,144,0,24,0,144,0,22,0,144,0,24,0,145,0,26,0,145,0,24,0,145,0,26,0,146,0,28,0,146,0,26,0,146,0,28,0,147,0,30,0,147,0,28,0,147,0,30,0,148,0,32,0,148,0,30,0,148,0,32,0,149,0,34,0,149,0,32,0,149,0,34,0,150,0,36,0,150,0,34,0,150,0,36,0,151,0,38,0,151,0,36,0,151,0,38,0,152,0,40,0,152,0,38,0,152,0,40,0,153,0,42,0,153,0,40,0,153,0,42,0,154,0,44,0,154,0,42,0,154,0,44,0,155,0,46,0,155,0,44,0,155,0,46,0,156,0,48,0,156,0,46,0,156,0,48,0,157,0,50,0,157,0,48,0,157,0,50,0,158,0,52,0,158,0,50,0,158,0,52,0,159,0,54,0,159,0,52,0,159,0,54,0,160,0,56,0,160,0,54,0,160,0,56,0,161,0,58,0,161,0,56,0,161,0,58,0,162,0,60,0,162,0,58,0,162,0,60,0,163,0,62,0,163,0,60,0,163,0,62,0,164,0,64,0,164,0,62,0,164,0,64,0,165,0,66,0,165,0,64,0,165,0,66,0,166,0,68,0,166,0,66,0,166,0,68,0,167,0,70,0,167,0,68,0,167,0,70,0,168,0,72,0,168,0,70,0,168,0,72,0,169,0,74,0,169,0,72,0,169,0,74,0,170,0,76,0,170,0,74,0,170,0,76,0,171,0,78,0,171,0,76,0,171,0,78,0,172,0,80,0,172,0,78,0,172,0,80,0,173,0,82,0,173,0,80,0,173,0,82,0,174,0,84,0,174,0,82,0,174,0,84,0,175,0,86,0,175,0,84,0,175,0,86,0,176,0,88,0,176,0,86,0,176,0,88,0,177,0,90,0,177,0,88,0,177,0,90,0,178,0,92,0,178,0,90,0,178,0,92,0,179,0,94,0,179,0,92,0,179,0,94,0,180,0,96,0,180,0,94,0,180,0,96,0,181,0,98,0,181,0,96,0,181,0,98,0,182,0,100,0,182,0,98,0,182,0,100,0,183,0,102,0,183,0,100,0,183,0,102,0,184,0,104,0,184,0,102,0,184,0,104,0,185,0,106,0,185,0,104,0,185,0,106,0,186,0,108,0,186,0,106,0,186,0,108,0,187,0,110,0,187,0,108,0,187,0,110,0,188,0,112,0,188,0,110,0,188,0,112,0,189,0,114,0,189,0,112,0,189,0,114,0,190,0,116,0,190,0,114,0,190,0,116,0,191,0,118,0,191,0,116,0,191,0,118,0,192,0,120,0,192,0,118,0,192,0,120,0,193,0,122,0,193,0,120,0,193,0,122,0,194,0,124,0,194,0,122,0,194,0,124,0,195,0,126,0,195,0,124,0,195,0,126,0,196,0,128,0,196,0,126,0,196,0,128,0,197,0,130,0,197,0,128,0,198,0,132,0,199,0,133,0,199,0,132,0,199,0,133,0,200,0,134,0,200,0,133,0,200,0,134,0,201,0,135,0,201,0,134,0,201,0,135,0,202,0,136,0,202,0,135,0,202,0,136,0,203,0,137,0,203,0,136,0,203,0,137,0,204,0,138,0,204,0,137,0,204,0,138,0,205,0,139,0,205,0,138,0,205,0,139,0,206,0,140,0,206,0,139,0,206,0,140,0,207,0,141,0,207,0,140,0,207,0,141,0,208,0,142,0,208,0,141,0,208,0,142,0,209,0,143,0,209,0,142,0,209,0,143,0,210,0,144,0,210,0,143,0,210,0,144,0,211,0,145,0,211,0,144,0,211,0,145,0,212,0,146,0,212,0,145,0,212,0,146,0,213,0,147,0,213,0,146,0,213,0,147,0,214,0,148,0,214,0,147,0,214,0,148,0,215,0,149,0,215,0,148,0,215,0,149,0,216,0,150,0,216,0,149,0,216,0,150,0,217,0,151,0,217,0,150,0,217,0,151,0,218,0,152,0,218,0,151,0,218,0,152,0,219,0,153,0,219,0,152,0,219,0,153,0,220,0,154,0,220,0,153,0,220,0,154,0,221,0,155,0,221,0,154,0,221,0,155,0,222,0,156,0,222,0,155,0,222,0,156,0,223,0,157,0,223,0,156,0,223,0,157,0,224,0,158,0,224,0,157,0,224,0,158,0,225,0,159,0,225,0,158,0,225,0,159,0,226,0,160,0,226,0,159,0,226,0,160,0,227,0,161,0,227,0,160,0,227,0,161,0,228,0,162,0,228,0,161,0,228,0,162,0,229,0,163,0,229,0,162,0,229,0,163,0,230,0,164,0,230,0,163,0,230,0,164,0,231,0,165,0,231,0,164,0,231,0,165,0,232,0,166,0,232,0,165,0,232,0,166,0,233,0,167,0,233,0,166,0,233,0,167,0,234,0,168,0,234,0,167,0,234,0,168,0,235,0,169,0,235,0,168,0,235,0,169,0,236,0,170,0,236,0,169,0,236,0,170,0,237,0,171,0,237,0,170,0,237,0,171,0,238,0,172,0,238,0,171,0,238,0,172,0,239,0,173,0,239,0,172,0,239,0,173,0,240,0,174,0,240,0,173,0,240,0,174,0,241,0,175,0,241,0,174,0,241,0,175,0,242,0,176,0,242,0,175,0,242,0,176,0,243,0,177,0,243,0,176,0,243,0,177,0,244,0,178,0,244,0,177,0,244,0,178,0,245,0,179,0,245,0,178,0,245,0,179,0,246,0,180,0,246,0,179,0,246,0,180,0,247,0,181,0,247,0,180,0,247,0,181,0,248,0,182,0,248,0,181,0,248,0,182,0,249,0,183,0,249,0,182,0,249,0,183,0,250,0,184,0,250,0,183,0,250,0,184,0,251,0,185,0,251,0,184,0,251,0,185,0,252,0,186,0,252,0,185,0,252,0,186,0,253,0,187,0,253,0,186,0,253,0,187,0,254,0,188,0,254,0,187,0,254,0,188,0,255,0,189,0,255,0,188,0,255,0,189,0,0,1,190,0,0,1,189,0,0,1,190,0,1,1,191,0,1,1,190,0,1,1,191,0,2,1,192,0,2,1,191,0,2,1,192,0,3,1,193,0,3,1,192,0,3,1,193,0,4,1,194,0,4,1,193,0,4,1,194,0,5,1,195,0,5,1,194,0,5,1,195,0,6,1,196,0,6,1,195,0,6,1,196,0,7,1,197,0,7,1,196,0,8,1,198,0,9,1,199,0,9,1,198,0,9,1,199,0,10,1,200,0,10,1,199,0,10,1,200,0,11,1,201,0,11,1,200,0,11,1,201,0,12,1,202,0,12,1,201,0,12,1,202,0,13,1,203,0,13,1,202,0,13,1,203,0,14,1,204,0,14,1,203,0,14,1,204,0,15,1,205,0,15,1,204,0,15,1,205,0,16,1,206,0,16,1,205,0,16,1,206,0,17,1,207,0,17,1,206,0,17,1,207,0,18,1,208,0,18,1,207,0,18,1,208,0,19,1,209,0,19,1,208,0,19,1,209,0,20,1,210,0,20,1,209,0,20,1,210,0,21,1,211,0,21,1,210,0,21,1,211,0,22,1,212,0,22,1,211,0,22,1,212,0,23,1,213,0,23,1,212,0,23,1,213,0,24,1,214,0,24,1,213,0,24,1,214,0,25,1,215,0,25,1,214,0,25,1,215,0,26,1,216,0,26,1,215,0,26,1,216,0,27,1,217,0,27,1,216,0,27,1,217,0,28,1,218,0,28,1,217,0,28,1,218,0,29,1,219,0,29,1,218,0,29,1,219,0,30,1,220,0,30,1,219,0,30,1,220,0,31,1,221,0,31,1,220,0,31,1,221,0,32,1,222,0,32,1,221,0,32,1,222,0,33,1,223,0,33,1,222,0,33,1,223,0,34,1,224,0,34,1,223,0,34,1,224,0,35,1,225,0,35,1,224,0,35,1,225,0,36,1,226,0,36,1,225,0,36,1,226,0,37,1,227,0,37,1,226,0,37,1,227,0,38,1,228,0,38,1,227,0,38,1,228,0,39,1,229,0,39,1,228,0,39,1,229,0,40,1,230,0,40,1,229,0,40,1,230,0,41,1,231,0,41,1,230,0,41,1,231,0,42,1,232,0,42,1,231,0,42,1,232,0,43,1,233,0,43,1,232,0,43,1,233,0,44,1,234,0,44,1,233,0,44,1,234,0,45,1,235,0,45,1,234,0,45,1,235,0,46,1,236,0,46,1,235,0,46,1,236,0,47,1,237,0,47,1,236,0,47,1,237,0,48,1,238,0,48,1,237,0,48,1,238,0,49,1,239,0,49,1,238,0,49,1,239,0,50,1,240,0,50,1,239,0,50,1,240,0,51,1,241,0,51,1,240,0,51,1,241,0,52,1,242,0,52,1,241,0,52,1,242,0,53,1,243,0,53,1,242,0,53,1,243,0,54,1,244,0,54,1,243,0,54,1,244,0,55,1,245,0,55,1,244,0,55,1,245,0,56,1,246,0,56,1,245,0,56,1,246,0,57,1,247,0,57,1,246,0,57,1,247,0,58,1,248,0,58,1,247,0,58,1,248,0,59,1,249,0,59,1,248,0,59,1,249,0,60,1,250,0,60,1,249,0,60,1,250,0,61,1,251,0,61,1,250,0,61,1,251,0,62,1,252,0,62,1,251,0,62,1,252,0,63,1,253,0,63,1,252,0,63,1,253,0,64,1,254,0,64,1,253,0,64,1,254,0,65,1,255,0,65,1,254,0,65,1,255,0,66,1,0,1,66,1,255,0,66,1,0,1,67,1,1,1,67,1,0,1,67,1,1,1,68,1,2,1,68,1,1,1,68,1,2,1,69,1,3,1,69,1,2,1,69,1,3,1,70,1,4,1,70,1,3,1,70,1,4,1,71,1,5,1,71,1,4,1,71,1,5,1,72,1,6,1,72,1,5,1,72,1,6,1,73,1,7,1,73,1,6,1,74,1,8,1,75,1,9,1,75,1,8,1,75,1,9,1,76,1,10,1,76,1,9,1,76,1,10,1,77,1,11,1,77,1,10,1,77,1,11,1,78,1,12,1,78,1,11,1,78,1,12,1,79,1,13,1,79,1,12,1,79,1,13,1,80,1,14,1,80,1,13,1,80,1,14,1,81,1,15,1,81,1,14,1,81,1,15,1,82,1,16,1,82,1,15,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+163840);
/* memory initializer */ allocate([82,1,16,1,83,1,17,1,83,1,16,1,83,1,17,1,84,1,18,1,84,1,17,1,84,1,18,1,85,1,19,1,85,1,18,1,85,1,19,1,86,1,20,1,86,1,19,1,86,1,20,1,87,1,21,1,87,1,20,1,87,1,21,1,88,1,22,1,88,1,21,1,88,1,22,1,89,1,23,1,89,1,22,1,89,1,23,1,90,1,24,1,90,1,23,1,90,1,24,1,91,1,25,1,91,1,24,1,91,1,25,1,92,1,26,1,92,1,25,1,92,1,26,1,93,1,27,1,93,1,26,1,93,1,27,1,94,1,28,1,94,1,27,1,94,1,28,1,95,1,29,1,95,1,28,1,95,1,29,1,96,1,30,1,96,1,29,1,96,1,30,1,97,1,31,1,97,1,30,1,97,1,31,1,98,1,32,1,98,1,31,1,98,1,32,1,99,1,33,1,99,1,32,1,99,1,33,1,100,1,34,1,100,1,33,1,100,1,34,1,101,1,35,1,101,1,34,1,101,1,35,1,102,1,36,1,102,1,35,1,102,1,36,1,103,1,37,1,103,1,36,1,103,1,37,1,104,1,38,1,104,1,37,1,104,1,38,1,105,1,39,1,105,1,38,1,105,1,39,1,106,1,40,1,106,1,39,1,106,1,40,1,107,1,41,1,107,1,40,1,107,1,41,1,108,1,42,1,108,1,41,1,108,1,42,1,109,1,43,1,109,1,42,1,109,1,43,1,110,1,44,1,110,1,43,1,110,1,44,1,111,1,45,1,111,1,44,1,111,1,45,1,112,1,46,1,112,1,45,1,112,1,46,1,113,1,47,1,113,1,46,1,113,1,47,1,114,1,48,1,114,1,47,1,114,1,48,1,115,1,49,1,115,1,48,1,115,1,49,1,116,1,50,1,116,1,49,1,116,1,50,1,117,1,51,1,117,1,50,1,117,1,51,1,118,1,52,1,118,1,51,1,118,1,52,1,119,1,53,1,119,1,52,1,119,1,53,1,120,1,54,1,120,1,53,1,120,1,54,1,121,1,55,1,121,1,54,1,121,1,55,1,122,1,56,1,122,1,55,1,122,1,56,1,123,1,57,1,123,1,56,1,123,1,57,1,124,1,58,1,124,1,57,1,124,1,58,1,125,1,59,1,125,1,58,1,125,1,59,1,126,1,60,1,126,1,59,1,126,1,60,1,127,1,61,1,127,1,60,1,127,1,61,1,128,1,62,1,128,1,61,1,128,1,62,1,129,1,63,1,129,1,62,1,129,1,63,1,130,1,64,1,130,1,63,1,130,1,64,1,131,1,65,1,131,1,64,1,131,1,65,1,132,1,66,1,132,1,65,1,132,1,66,1,133,1,67,1,133,1,66,1,133,1,67,1,134,1,68,1,134,1,67,1,134,1,68,1,135,1,69,1,135,1,68,1,135,1,69,1,136,1,70,1,136,1,69,1,136,1,70,1,137,1,71,1,137,1,70,1,137,1,71,1,138,1,72,1,138,1,71,1,138,1,72,1,139,1,73,1,139,1,72,1,140,1,74,1,141,1,75,1,141,1,74,1,141,1,75,1,142,1,76,1,142,1,75,1,142,1,76,1,143,1,77,1,143,1,76,1,143,1,77,1,144,1,78,1,144,1,77,1,144,1,78,1,145,1,79,1,145,1,78,1,145,1,79,1,146,1,80,1,146,1,79,1,146,1,80,1,147,1,81,1,147,1,80,1,147,1,81,1,148,1,82,1,148,1,81,1,148,1,82,1,149,1,83,1,149,1,82,1,149,1,83,1,150,1,84,1,150,1,83,1,150,1,84,1,151,1,85,1,151,1,84,1,151,1,85,1,152,1,86,1,152,1,85,1,152,1,86,1,153,1,87,1,153,1,86,1,153,1,87,1,154,1,88,1,154,1,87,1,154,1,88,1,155,1,89,1,155,1,88,1,155,1,89,1,156,1,90,1,156,1,89,1,156,1,90,1,157,1,91,1,157,1,90,1,157,1,91,1,158,1,92,1,158,1,91,1,158,1,92,1,159,1,93,1,159,1,92,1,159,1,93,1,160,1,94,1,160,1,93,1,160,1,94,1,161,1,95,1,161,1,94,1,161,1,95,1,162,1,96,1,162,1,95,1,162,1,96,1,163,1,97,1,163,1,96,1,163,1,97,1,164,1,98,1,164,1,97,1,164,1,98,1,165,1,99,1,165,1,98,1,165,1,99,1,166,1,100,1,166,1,99,1,166,1,100,1,167,1,101,1,167,1,100,1,167,1,101,1,168,1,102,1,168,1,101,1,168,1,102,1,169,1,103,1,169,1,102,1,169,1,103,1,170,1,104,1,170,1,103,1,170,1,104,1,171,1,105,1,171,1,104,1,171,1,105,1,172,1,106,1,172,1,105,1,172,1,106,1,173,1,107,1,173,1,106,1,173,1,107,1,174,1,108,1,174,1,107,1,174,1,108,1,175,1,109,1,175,1,108,1,175,1,109,1,176,1,110,1,176,1,109,1,176,1,110,1,177,1,111,1,177,1,110,1,177,1,111,1,178,1,112,1,178,1,111,1,178,1,112,1,179,1,113,1,179,1,112,1,179,1,113,1,180,1,114,1,180,1,113,1,180,1,114,1,181,1,115,1,181,1,114,1,181,1,115,1,182,1,116,1,182,1,115,1,182,1,116,1,183,1,117,1,183,1,116,1,183,1,117,1,184,1,118,1,184,1,117,1,184,1,118,1,185,1,119,1,185,1,118,1,185,1,119,1,186,1,120,1,186,1,119,1,186,1,120,1,187,1,121,1,187,1,120,1,187,1,121,1,188,1,122,1,188,1,121,1,188,1,122,1,189,1,123,1,189,1,122,1,189,1,123,1,190,1,124,1,190,1,123,1,190,1,124,1,191,1,125,1,191,1,124,1,191,1,125,1,192,1,126,1,192,1,125,1,192,1,126,1,193,1,127,1,193,1,126,1,193,1,127,1,194,1,128,1,194,1,127,1,194,1,128,1,195,1,129,1,195,1,128,1,195,1,129,1,196,1,130,1,196,1,129,1,196,1,130,1,197,1,131,1,197,1,130,1,197,1,131,1,198,1,132,1,198,1,131,1,198,1,132,1,199,1,133,1,199,1,132,1,199,1,133,1,200,1,134,1,200,1,133,1,200,1,134,1,201,1,135,1,201,1,134,1,201,1,135,1,202,1,136,1,202,1,135,1,202,1,136,1,203,1,137,1,203,1,136,1,203,1,137,1,204,1,138,1,204,1,137,1,204,1,138,1,205,1,139,1,205,1,138,1,206,1,140,1,207,1,141,1,207,1,140,1,207,1,141,1,208,1,142,1,208,1,141,1,208,1,142,1,209,1,143,1,209,1,142,1,209,1,143,1,210,1,144,1,210,1,143,1,210,1,144,1,211,1,145,1,211,1,144,1,211,1,145,1,212,1,146,1,212,1,145,1,212,1,146,1,213,1,147,1,213,1,146,1,213,1,147,1,214,1,148,1,214,1,147,1,214,1,148,1,215,1,149,1,215,1,148,1,215,1,149,1,216,1,150,1,216,1,149,1,216,1,150,1,217,1,151,1,217,1,150,1,217,1,151,1,218,1,152,1,218,1,151,1,218,1,152,1,219,1,153,1,219,1,152,1,219,1,153,1,220,1,154,1,220,1,153,1,220,1,154,1,221,1,155,1,221,1,154,1,221,1,155,1,222,1,156,1,222,1,155,1,222,1,156,1,223,1,157,1,223,1,156,1,223,1,157,1,224,1,158,1,224,1,157,1,224,1,158,1,225,1,159,1,225,1,158,1,225,1,159,1,226,1,160,1,226,1,159,1,226,1,160,1,227,1,161,1,227,1,160,1,227,1,161,1,228,1,162,1,228,1,161,1,228,1,162,1,229,1,163,1,229,1,162,1,229,1,163,1,230,1,164,1,230,1,163,1,230,1,164,1,231,1,165,1,231,1,164,1,231,1,165,1,232,1,166,1,232,1,165,1,232,1,166,1,233,1,167,1,233,1,166,1,233,1,167,1,234,1,168,1,234,1,167,1,234,1,168,1,235,1,169,1,235,1,168,1,235,1,169,1,236,1,170,1,236,1,169,1,236,1,170,1,237,1,171,1,237,1,170,1,237,1,171,1,238,1,172,1,238,1,171,1,238,1,172,1,239,1,173,1,239,1,172,1,239,1,173,1,240,1,174,1,240,1,173,1,240,1,174,1,241,1,175,1,241,1,174,1,241,1,175,1,242,1,176,1,242,1,175,1,242,1,176,1,243,1,177,1,243,1,176,1,243,1,177,1,244,1,178,1,244,1,177,1,244,1,178,1,245,1,179,1,245,1,178,1,245,1,179,1,246,1,180,1,246,1,179,1,246,1,180,1,247,1,181,1,247,1,180,1,247,1,181,1,248,1,182,1,248,1,181,1,248,1,182,1,249,1,183,1,249,1,182,1,249,1,183,1,250,1,184,1,250,1,183,1,250,1,184,1,251,1,185,1,251,1,184,1,251,1,185,1,252,1,186,1,252,1,185,1,252,1,186,1,253,1,187,1,253,1,186,1,253,1,187,1,254,1,188,1,254,1,187,1,254,1,188,1,255,1,189,1,255,1,188,1,255,1,189,1,0,2,190,1,0,2,189,1,0,2,190,1,1,2,191,1,1,2,190,1,1,2,191,1,2,2,192,1,2,2,191,1,2,2,192,1,3,2,193,1,3,2,192,1,3,2,193,1,4,2,194,1,4,2,193,1,4,2,194,1,5,2,195,1,5,2,194,1,5,2,195,1,6,2,196,1,6,2,195,1,6,2,196,1,7,2,197,1,7,2,196,1,7,2,197,1,8,2,198,1,8,2,197,1,8,2,198,1,9,2,199,1,9,2,198,1,9,2,199,1,10,2,200,1,10,2,199,1,10,2,200,1,11,2,201,1,11,2,200,1,11,2,201,1,12,2,202,1,12,2,201,1,12,2,202,1,13,2,203,1,13,2,202,1,13,2,203,1,14,2,204,1,14,2,203,1,14,2,204,1,15,2,205,1,15,2,204,1,16,2,206,1,17,2,207,1,17,2,206,1,17,2,207,1,18,2,208,1,18,2,207,1,18,2,208,1,19,2,209,1,19,2,208,1,19,2,209,1,20,2,210,1,20,2,209,1,20,2,210,1,21,2,211,1,21,2,210,1,21,2,211,1,22,2,212,1,22,2,211,1,22,2,212,1,23,2,213,1,23,2,212,1,23,2,213,1,24,2,214,1,24,2,213,1,24,2,214,1,25,2,215,1,25,2,214,1,25,2,215,1,26,2,216,1,26,2,215,1,26,2,216,1,27,2,217,1,27,2,216,1,27,2,217,1,28,2,218,1,28,2,217,1,28,2,218,1,29,2,219,1,29,2,218,1,29,2,219,1,30,2,220,1,30,2,219,1,30,2,220,1,31,2,221,1,31,2,220,1,31,2,221,1,32,2,222,1,32,2,221,1,32,2,222,1,33,2,223,1,33,2,222,1,33,2,223,1,34,2,224,1,34,2,223,1,34,2,224,1,35,2,225,1,35,2,224,1,35,2,225,1,36,2,226,1,36,2,225,1,36,2,226,1,37,2,227,1,37,2,226,1,37,2,227,1,38,2,228,1,38,2,227,1,38,2,228,1,39,2,229,1,39,2,228,1,39,2,229,1,40,2,230,1,40,2,229,1,40,2,230,1,41,2,231,1,41,2,230,1,41,2,231,1,42,2,232,1,42,2,231,1,42,2,232,1,43,2,233,1,43,2,232,1,43,2,233,1,44,2,234,1,44,2,233,1,44,2,234,1,45,2,235,1,45,2,234,1,45,2,235,1,46,2,236,1,46,2,235,1,46,2,236,1,47,2,237,1,47,2,236,1,47,2,237,1,48,2,238,1,48,2,237,1,48,2,238,1,49,2,239,1,49,2,238,1,49,2,239,1,50,2,240,1,50,2,239,1,50,2,240,1,51,2,241,1,51,2,240,1,51,2,241,1,52,2,242,1,52,2,241,1,52,2,242,1,53,2,243,1,53,2,242,1,53,2,243,1,54,2,244,1,54,2,243,1,54,2,244,1,55,2,245,1,55,2,244,1,55,2,245,1,56,2,246,1,56,2,245,1,56,2,246,1,57,2,247,1,57,2,246,1,57,2,247,1,58,2,248,1,58,2,247,1,58,2,248,1,59,2,249,1,59,2,248,1,59,2,249,1,60,2,250,1,60,2,249,1,60,2,250,1,61,2,251,1,61,2,250,1,61,2,251,1,62,2,252,1,62,2,251,1,62,2,252,1,63,2,253,1,63,2,252,1,63,2,253,1,64,2,254,1,64,2,253,1,64,2,254,1,65,2,255,1,65,2,254,1,65,2,255,1,66,2,0,2,66,2,255,1,66,2,0,2,67,2,1,2,67,2,0,2,67,2,1,2,68,2,2,2,68,2,1,2,68,2,2,2,69,2,3,2,69,2,2,2,69,2,3,2,70,2,4,2,70,2,3,2,70,2,4,2,71,2,5,2,71,2,4,2,71,2,5,2,72,2,6,2,72,2,5,2,72,2,6,2,73,2,7,2,73,2,6,2,73,2,7,2,74,2,8,2,74,2,7,2,74,2,8,2,75,2,9,2,75,2,8,2,75,2,9,2,76,2,10,2,76,2,9,2,76,2,10,2,77,2,11,2,77,2,10,2,77,2,11,2,78,2,12,2,78,2,11,2,78,2,12,2,79,2,13,2,79,2,12,2,79,2,13,2,80,2,14,2,80,2,13,2,80,2,14,2,81,2,15,2,81,2,14,2,82,2,16,2,83,2,17,2,83,2,16,2,83,2,17,2,84,2,18,2,84,2,17,2,84,2,18,2,85,2,19,2,85,2,18,2,85,2,19,2,86,2,20,2,86,2,19,2,86,2,20,2,87,2,21,2,87,2,20,2,87,2,21,2,88,2,22,2,88,2,21,2,88,2,22,2,89,2,23,2,89,2,22,2,89,2,23,2,90,2,24,2,90,2,23,2,90,2,24,2,91,2,25,2,91,2,24,2,91,2,25,2,92,2,26,2,92,2,25,2,92,2,26,2,93,2,27,2,93,2,26,2,93,2,27,2,94,2,28,2,94,2,27,2,94,2,28,2,95,2,29,2,95,2,28,2,95,2,29,2,96,2,30,2,96,2,29,2,96,2,30,2,97,2,31,2,97,2,30,2,97,2,31,2,98,2,32,2,98,2,31,2,98,2,32,2,99,2,33,2,99,2,32,2,99,2,33,2,100,2,34,2,100,2,33,2,100,2,34,2,101,2,35,2,101,2,34,2,101,2,35,2,102,2,36,2,102,2,35,2,102,2,36,2,103,2,37,2,103,2,36,2,103,2,37,2,104,2,38,2,104,2,37,2,104,2,38,2,105,2,39,2,105,2,38,2,105,2,39,2,106,2,40,2,106,2,39,2,106,2,40,2,107,2,41,2,107,2,40,2,107,2,41,2,108,2,42,2,108,2,41,2,108,2,42,2,109,2,43,2,109,2,42,2,109,2,43,2,110,2,44,2,110,2,43,2,110,2,44,2,111,2,45,2,111,2,44,2,111,2,45,2,112,2,46,2,112,2,45,2,112,2,46,2,113,2,47,2,113,2,46,2,113,2,47,2,114,2,48,2,114,2,47,2,114,2,48,2,115,2,49,2,115,2,48,2,115,2,49,2,116,2,50,2,116,2,49,2,116,2,50,2,117,2,51,2,117,2,50,2,117,2,51,2,118,2,52,2,118,2,51,2,118,2,52,2,119,2,53,2,119,2,52,2,119,2,53,2,120,2,54,2,120,2,53,2,120,2,54,2,121,2,55,2,121,2,54,2,121,2,55,2,122,2,56,2,122,2,55,2,122,2,56,2,123,2,57,2,123,2,56,2,123,2,57,2,124,2,58,2,124,2,57,2,124,2,58,2,125,2,59,2,125,2,58,2,125,2,59,2,126,2,60,2,126,2,59,2,126,2,60,2,127,2,61,2,127,2,60,2,127,2,61,2,128,2,62,2,128,2,61,2,128,2,62,2,129,2,63,2,129,2,62,2,129,2,63,2,130,2,64,2,130,2,63,2,130,2,64,2,131,2,65,2,131,2,64,2,131,2,65,2,132,2,66,2,132,2,65,2,132,2,66,2,133,2,67,2,133,2,66,2,133,2,67,2,134,2,68,2,134,2,67,2,134,2,68,2,135,2,69,2,135,2,68,2,135,2,69,2,136,2,70,2,136,2,69,2,136,2,70,2,137,2,71,2,137,2,70,2,137,2,71,2,138,2,72,2,138,2,71,2,138,2,72,2,139,2,73,2,139,2,72,2,139,2,73,2,140,2,74,2,140,2,73,2,140,2,74,2,141,2,75,2,141,2,74,2,141,2,75,2,142,2,76,2,142,2,75,2,142,2,76,2,143,2,77,2,143,2,76,2,143,2,77,2,144,2,78,2,144,2,77,2,144,2,78,2,145,2,79,2,145,2,78,2,145,2,79,2,146,2,80,2,146,2,79,2,146,2,80,2,147,2,81,2,147,2,80,2,148,2,82,2,149,2,83,2,149,2,82,2,149,2,83,2,150,2,84,2,150,2,83,2,150,2,84,2,151,2,85,2,151,2,84,2,151,2,85,2,152,2,86,2,152,2,85,2,152,2,86,2,153,2,87,2,153,2,86,2,153,2,87,2,154,2,88,2,154,2,87,2,154,2,88,2,155,2,89,2,155,2,88,2,155,2,89,2,156,2,90,2,156,2,89,2,156,2,90,2,157,2,91,2,157,2,90,2,157,2,91,2,158,2,92,2,158,2,91,2,158,2,92,2,159,2,93,2,159,2,92,2,159,2,93,2,160,2,94,2,160,2,93,2,160,2,94,2,161,2,95,2,161,2,94,2,161,2,95,2,162,2,96,2,162,2,95,2,162,2,96,2,163,2,97,2,163,2,96,2,163,2,97,2,164,2,98,2,164,2,97,2,164,2,98,2,165,2,99,2,165,2,98,2,165,2,99,2,166,2,100,2,166,2,99,2,166,2,100,2,167,2,101,2,167,2,100,2,167,2,101,2,168,2,102,2,168,2,101,2,168,2,102,2,169,2,103,2,169,2,102,2,169,2,103,2,170,2,104,2,170,2,103,2,170,2,104,2,171,2,105,2,171,2,104,2,171,2,105,2,172,2,106,2,172,2,105,2,172,2,106,2,173,2,107,2,173,2,106,2,173,2,107,2,174,2,108,2,174,2,107,2,174,2,108,2,175,2,109,2,175,2,108,2,175,2,109,2,176,2,110,2,176,2,109,2,176,2,110,2,177,2,111,2,177,2,110,2,177,2,111,2,178,2,112,2,178,2,111,2,178,2,112,2,179,2,113,2,179,2,112,2,179,2,113,2,180,2,114,2,180,2,113,2,180,2,114,2,181,2,115,2,181,2,114,2,181,2,115,2,182,2,116,2,182,2,115,2,182,2,116,2,183,2,117,2,183,2,116,2,183,2,117,2,184,2,118,2,184,2,117,2,184,2,118,2,185,2,119,2,185,2,118,2,185,2,119,2,186,2,120,2,186,2,119,2,186,2,120,2,187,2,121,2,187,2,120,2,187,2,121,2,188,2,122,2,188,2,121,2,188,2,122,2,189,2,123,2,189,2,122,2,189,2,123,2,190,2,124,2,190,2,123,2,190,2,124,2,191,2,125,2,191,2,124,2,191,2,125,2,192,2,126,2,192,2,125,2,192,2,126,2,193,2,127,2,193,2,126,2,193,2,127,2,194,2,128,2,194,2,127,2,194,2,128,2,195,2,129,2,195,2,128,2,195,2,129,2,196,2,130,2,196,2,129,2,196,2,130,2,197,2,131,2,197,2,130,2,197,2,131,2,198,2,132,2,198,2,131,2,198,2,132,2,199,2,133,2,199,2,132,2,199,2,133,2,200,2,134,2,200,2,133,2,200,2,134,2,201,2,135,2,201,2,134,2,201,2,135,2,202,2,136,2,202,2,135,2,202,2,136,2,203,2,137,2,203,2,136,2,203,2,137,2,204,2,138,2,204,2,137,2,204,2,138,2,205,2,139,2,205,2,138,2,205,2,139,2,206,2,140,2,206,2,139,2,206,2,140,2,207,2,141,2,207,2,140,2,207,2,141,2,208,2,142,2,208,2,141,2,208,2,142,2,209,2,143,2,209,2,142,2,209,2,143,2,210,2,144,2,210,2,143,2,210,2,144,2,211,2,145,2,211,2,144,2,211,2,145,2,212,2,146,2,212,2,145,2,212,2,146,2,213,2,147,2,213,2,146,2,214,2,148,2,215,2,149,2,215,2,148,2,215,2,149,2,216,2,150,2,216,2,149,2,216,2,150,2,217,2,151,2,217,2,150,2,217,2,151,2,218,2,152,2,218,2,151,2,218,2,152,2,219,2,153,2,219,2,152,2,219,2,153,2,220,2,154,2,220,2,153,2,220,2,154,2,221,2,155,2,221,2,154,2,221,2,155,2,222,2,156,2,222,2,155,2,222,2,156,2,223,2,157,2,223,2,156,2,223,2,157,2,224,2,158,2,224,2,157,2,224,2,158,2,225,2,159,2,225,2,158,2,225,2,159,2,226,2,160,2,226,2,159,2,226,2,160,2,227,2,161,2,227,2,160,2,227,2,161,2,228,2,162,2,228,2,161,2,228,2,162,2,229,2,163,2,229,2,162,2,229,2,163,2,230,2,164,2,230,2,163,2,230,2,164,2,231,2,165,2,231,2,164,2,231,2,165,2,232,2,166,2,232,2,165,2,232,2,166,2,233,2,167,2,233,2,166,2,233,2,167,2,234,2,168,2,234,2,167,2,234,2,168,2,235,2,169,2,235,2,168,2,235,2,169,2,236,2,170,2,236,2,169,2,236,2,170,2,237,2,171,2,237,2,170,2,237,2,171,2,238,2,172,2,238,2,171,2,238,2,172,2,239,2,173,2,239,2,172,2,239,2,173,2,240,2,174,2,240,2,173,2,240,2,174,2,241,2,175,2,241,2,174,2,241,2,175,2,242,2,176,2,242,2,175,2,242,2,176,2,243,2,177,2,243,2,176,2,243,2,177,2,244,2,178,2,244,2,177,2,244,2,178,2,245,2,179,2,245,2,178,2,245,2,179,2,246,2,180,2,246,2,179,2,246,2,180,2,247,2,181,2,247,2,180,2,247,2,181,2,248,2,182,2,248,2,181,2,248,2,182,2,249,2,183,2,249,2,182,2,249,2,183,2,250,2,184,2,250,2,183,2,250,2,184,2,251,2,185,2,251,2,184,2,251,2,185,2,252,2,186,2,252,2,185,2,252,2,186,2,253,2,187,2,253,2,186,2,253,2,187,2,254,2,188,2,254,2,187,2,254,2,188,2,255,2,189,2,255,2,188,2,255,2,189,2,0,3,190,2,0,3,189,2,0,3,190,2,1,3,191,2,1,3,190,2,1,3,191,2,2,3,192,2,2,3,191,2,2,3,192,2,3,3,193,2,3,3,192,2,3,3,193,2,4,3,194,2,4,3,193,2,4,3,194,2,5,3,195,2,5,3,194,2,5,3,195,2,6,3,196,2,6,3,195,2,6,3,196,2,7,3,197,2,7,3,196,2,7,3,197,2,8,3,198,2,8,3,197,2,8,3,198,2,9,3,199,2,9,3,198,2,9,3,199,2,10,3,200,2,10,3,199,2,10,3,200,2,11,3,201,2,11,3,200,2,11,3,201,2,12,3,202,2,12,3,201,2,12,3,202,2,13,3,203,2,13,3,202,2,13,3,203,2,14,3,204,2,14,3,203,2,14,3,204,2,15,3,205,2,15,3,204,2,15,3,205,2,16,3,206,2,16,3,205,2,16,3,206,2,17,3,207,2,17,3,206,2,17,3,207,2,18,3,208,2,18,3,207,2,18,3,208,2,19,3,209,2,19,3,208,2,19,3,209,2,20,3,210,2,20,3,209,2,20,3,210,2,21,3,211,2,21,3,210,2,21,3,211,2,22,3,212,2,22,3,211,2,22,3,212,2,23,3,213,2,23,3,212,2,24,3,214,2,25,3,215,2,25,3,214,2,25,3,215,2,26,3,216,2,26,3,215,2,26,3,216,2,27,3,217,2,27,3,216,2,27,3,217,2,28,3,218,2,28,3,217,2,28,3,218,2,29,3,219,2,29,3,218,2,29,3,219,2,30,3,220,2,30,3,219,2,30,3,220,2,31,3,221,2,31,3,220,2,31,3,221,2,32,3,222,2,32,3,221,2,32,3,222,2,33,3,223,2,33,3,222,2,33,3,223,2,34,3,224,2,34,3,223,2,34,3,224,2,35,3,225,2,35,3,224,2,35,3,225,2,36,3,226,2,36,3,225,2,36,3,226,2,37,3,227,2,37,3,226,2,37,3,227,2,38,3,228,2,38,3,227,2,38,3,228,2,39,3,229,2,39,3,228,2,39,3,229,2,40,3,230,2,40,3,229,2,40,3,230,2,41,3,231,2,41,3,230,2,41,3,231,2,42,3,232,2,42,3,231,2,42,3,232,2,43,3,233,2,43,3,232,2,43,3,233,2,44,3,234,2,44,3,233,2,44,3,234,2,45,3,235,2,45,3,234,2,45,3,235,2,46,3,236,2,46,3,235,2,46,3,236,2,47,3,237,2,47,3,236,2,47,3,237,2,48,3,238,2,48,3,237,2,48,3,238,2,49,3,239,2,49,3,238,2,49,3,239,2,50,3,240,2,50,3,239,2,50,3,240,2,51,3,241,2,51,3,240,2,51,3,241,2,52,3,242,2,52,3,241,2,52,3,242,2,53,3,243,2,53,3,242,2,53,3,243,2,54,3,244,2,54,3,243,2,54,3,244,2,55,3,245,2,55,3,244,2,55,3,245,2,56,3,246,2,56,3,245,2,56,3,246,2,57,3,247,2,57,3,246,2,57,3,247,2,58,3,248,2,58,3,247,2,58,3,248,2,59,3,249,2,59,3,248,2,59,3,249,2,60,3,250,2,60,3,249,2,60,3,250,2,61,3,251,2,61,3,250,2,61,3,251,2,62,3,252,2,62,3,251,2,62,3,252,2,63,3,253,2,63,3,252,2,63,3,253,2,64,3,254,2,64,3,253,2,64,3,254,2,65,3,255,2,65,3,254,2,65,3,255,2,66,3,0,3,66,3,255,2,66,3,0,3,67,3,1,3,67,3,0,3,67,3,1,3,68,3,2,3,68,3,1,3,68,3,2,3,69,3,3,3,69,3,2,3,69,3,3,3,70,3,4,3,70,3,3,3,70,3,4,3,71,3,5,3,71,3,4,3,71,3,5,3,72,3,6,3,72,3,5,3,72,3,6,3,73,3,7,3,73,3,6,3,73,3,7,3,74,3,8,3,74,3,7,3,74,3,8,3,75,3,9,3,75,3,8,3,75,3,9,3,76,3,10,3,76,3,9,3,76,3,10,3,77,3,11,3,77,3,10,3,77,3,11,3,78,3,12,3,78,3,11,3,78,3,12,3,79,3,13,3,79,3,12,3,79,3,13,3,80,3,14,3,80,3,13,3,80,3,14,3,81,3,15,3,81,3,14,3,81,3,15,3,82,3,16,3,82,3,15,3,82,3,16,3,83,3,17,3,83,3,16,3,83,3,17,3,84,3,18,3,84,3,17,3,84,3,18,3,85,3,19,3,85,3,18,3,85,3,19,3,86,3,20,3,86,3,19,3,86,3,20,3,87,3,21,3,87,3,20,3,87,3,21,3,88,3,22,3,88,3,21,3,88,3,22,3,89,3,23,3,89,3,22,3,90,3,24,3,91,3,25,3,91,3,24,3,91,3,25,3,92,3,26,3,92,3,25,3,92,3,26,3,93,3,27,3,93,3,26,3,93,3,27,3,94,3,28,3,94,3,27,3,94,3,28,3,95,3,29,3,95,3,28,3,95,3,29,3,96,3,30,3,96,3,29,3,96,3,30,3,97,3,31,3,97,3,30,3,97,3,31,3,98,3,32,3,98,3,31,3,98,3,32,3,99,3,33,3,99,3,32,3,99,3,33,3,100,3,34,3,100,3,33,3,100,3,34,3,101,3,35,3,101,3,34,3,101,3,35,3,102,3,36,3,102,3,35,3,102,3,36,3,103,3,37,3,103,3,36,3,103,3,37,3,104,3,38,3,104,3,37,3,104,3,38,3,105,3,39,3,105,3,38,3,105,3,39,3,106,3,40,3,106,3,39,3,106,3,40,3,107,3,41,3,107,3,40,3,107,3,41,3,108,3,42,3,108,3,41,3,108,3,42,3,109,3,43,3,109,3,42,3,109,3,43,3,110,3,44,3,110,3,43,3,110,3,44,3,111,3,45,3,111,3,44,3,111,3,45,3,112,3,46,3,112,3,45,3,112,3,46,3,113,3,47,3,113,3,46,3,113,3,47,3,114,3,48,3,114,3,47,3,114,3,48,3,115,3,49,3,115,3,48,3,115,3,49,3,116,3,50,3,116,3,49,3,116,3,50,3,117,3,51,3,117,3,50,3,117,3,51,3,118,3,52,3,118,3,51,3,118,3,52,3,119,3,53,3,119,3,52,3,119,3,53,3,120,3,54,3,120,3,53,3,120,3,54,3,121,3,55,3,121,3,54,3,121,3,55,3,122,3,56,3,122,3,55,3,122,3,56,3,123,3,57,3,123,3,56,3,123,3,57,3,124,3,58,3,124,3,57,3,124,3,58,3,125,3,59,3,125,3,58,3,125,3,59,3,126,3,60,3,126,3,59,3,126,3,60,3,127,3,61,3,127,3,60,3,127,3,61,3,128,3,62,3,128,3,61,3,128,3,62,3,129,3,63,3,129,3,62,3,129,3,63,3,130,3,64,3,130,3,63,3,130,3,64,3,131,3,65,3,131,3,64,3,131,3,65,3,132,3,66,3,132,3,65,3,132,3,66,3,133,3,67,3,133,3,66,3,133,3,67,3,134,3,68,3,134,3,67,3,134,3,68,3,135,3,69,3,135,3,68,3,135,3,69,3,136,3,70,3,136,3,69,3,136,3,70,3,137,3,71,3,137,3,70,3,137,3,71,3,138,3,72,3,138,3,71,3,138,3,72,3,139,3,73,3,139,3,72,3,139,3,73,3,140,3,74,3,140,3,73,3,140,3,74,3,141,3,75,3,141,3,74,3,141,3,75,3,142,3,76,3,142,3,75,3,142,3,76,3,143,3,77,3,143,3,76,3,143,3,77,3,144,3,78,3,144,3,77,3,144,3,78,3,145,3,79,3,145,3,78,3,145,3,79,3,146,3,80,3,146,3,79,3,146,3,80,3,147,3,81,3,147,3,80,3,147,3,81,3,148,3,82,3,148,3,81,3,148,3,82,3,149,3,83,3,149,3,82,3,149,3,83,3,150,3,84,3,150,3,83,3,150,3,84,3,151,3,85,3,151,3,84,3,151,3,85,3,152,3,86,3,152,3,85,3,152,3,86,3,153,3,87,3,153,3,86,3,153,3,87,3,154,3,88,3,154,3,87,3,154,3,88,3,155,3,89,3,155,3,88,3,156,3,90,3,157,3,91,3,157,3,90,3,157,3,91,3,158,3,92,3,158,3,91,3,158,3,92,3,159,3,93,3,159,3,92,3,159,3,93,3,160,3,94,3,160,3,93,3,160,3,94,3,161,3,95,3,161,3,94,3,161,3,95,3,162,3,96,3,162,3,95,3,162,3,96,3,163,3,97,3,163,3,96,3,163,3,97,3,164,3,98,3,164,3,97,3,164,3,98,3,165,3,99,3,165,3,98,3,165,3,99,3,166,3,100,3,166,3,99,3,166,3,100,3,167,3,101,3,167,3,100,3,167,3,101,3,168,3,102,3,168,3,101,3,168,3,102,3,169,3,103,3,169,3,102,3,169,3,103,3,170,3,104,3,170,3,103,3,170,3,104,3,171,3,105,3,171,3,104,3,171,3,105,3,172,3,106,3,172,3,105,3,172,3,106,3,173,3,107,3,173,3,106,3,173,3,107,3,174,3,108,3,174,3,107,3,174,3,108,3,175,3,109,3,175,3,108,3,175,3,109,3,176,3,110,3,176,3,109,3,176,3,110,3,177,3,111,3,177,3,110,3,177,3,111,3,178,3,112,3,178,3,111,3,178,3,112,3,179,3,113,3,179,3,112,3,179,3,113,3,180,3,114,3,180,3,113,3,180,3,114,3,181,3,115,3,181,3,114,3,181,3,115,3,182,3,116,3,182,3,115,3,182,3,116,3,183,3,117,3,183,3,116,3,183,3,117,3,184,3,118,3,184,3,117,3,184,3,118,3,185,3,119,3,185,3,118,3,185,3,119,3,186,3,120,3,186,3,119,3,186,3,120,3,187,3,121,3,187,3,120,3,187,3,121,3,188,3,122,3,188,3,121,3,188,3,122,3,189,3,123,3,189,3,122,3,189,3,123,3,190,3,124,3,190,3,123,3,190,3,124,3,191,3,125,3,191,3,124,3,191,3,125,3,192,3,126,3,192,3,125,3,192,3,126,3,193,3,127,3,193,3,126,3,193,3,127,3,194,3,128,3,194,3,127,3,194,3,128,3,195,3,129,3,195,3,128,3,195,3,129,3,196,3,130,3,196,3,129,3,196,3,130,3,197,3,131,3,197,3,130,3,197,3,131,3,198,3,132,3,198,3,131,3,198,3,132,3,199,3,133,3,199,3,132,3,199,3,133,3,200,3,134,3,200,3,133,3,200,3,134,3,201,3,135,3,201,3,134,3,201,3,135,3,202,3,136,3,202,3,135,3,202,3,136,3,203,3,137,3,203,3,136,3,203,3,137,3,204,3,138,3,204,3,137,3,204,3,138,3,205,3,139,3,205,3,138,3,205,3,139,3,206,3,140,3,206,3,139,3,206,3,140,3,207,3,141,3,207,3,140,3,207,3,141,3,208,3,142,3,208,3,141,3,208,3,142,3,209,3,143,3,209,3,142,3,209,3,143,3,210,3,144,3,210,3,143,3,210,3,144,3,211,3,145,3,211,3,144,3,211,3,145,3,212,3,146,3,212,3,145,3,212,3,146,3,213,3,147,3,213,3,146,3,213,3,147,3,214,3,148,3,214,3,147,3,214,3,148,3,215,3,149,3,215,3,148,3,215,3,149,3,216,3,150,3,216,3,149,3,216,3,150,3,217,3,151,3,217,3,150,3,217,3,151,3,218,3,152,3,218,3,151,3,218,3,152,3,219,3,153,3,219,3,152,3,219,3,153,3,220,3,154,3,220,3,153,3,220,3,154,3,221,3,155,3,221,3,154,3,222,3,156,3,223,3,157,3,223,3,156,3,223,3,157,3,224,3,158,3,224,3,157,3,224,3,158,3,225,3,159,3,225,3,158,3,225,3,159,3,226,3,160,3,226,3,159,3,226,3,160,3,227,3,161,3,227,3,160,3,227,3,161,3,228,3,162,3,228,3,161,3,228,3,162,3,229,3,163,3,229,3,162,3,229,3,163,3,230,3,164,3,230,3,163,3,230,3,164,3,231,3,165,3,231,3,164,3,231,3,165,3,232,3,166,3,232,3,165,3,232,3,166,3,233,3,167,3,233,3,166,3,233,3,167,3,234,3,168,3,234,3,167,3,234,3,168,3,235,3,169,3,235,3,168,3,235,3,169,3,236,3,170,3,236,3,169,3,236,3,170,3,237,3,171,3,237,3,170,3,237,3,171,3,238,3,172,3,238,3,171,3,238,3,172,3,239,3,173,3,239,3,172,3,239,3,173,3,240,3,174,3,240,3,173,3,240,3,174,3,241,3,175,3,241,3,174,3,241,3,175,3,242,3,176,3,242,3,175,3,242,3,176,3,243,3,177,3,243,3,176,3,243,3,177,3,244,3,178,3,244,3,177,3,244,3,178,3,245,3,179,3,245,3,178,3,245,3,179,3,246,3,180,3,246,3,179,3,246,3,180,3,247,3,181,3,247,3,180,3,247,3,181,3,248,3,182,3,248,3,181,3,248,3,182,3,249,3,183,3,249,3,182,3,249,3,183,3,250,3,184,3,250,3,183,3,250,3,184,3,251,3,185,3,251,3,184,3,251,3,185,3,252,3,186,3,252,3,185,3,252,3,186,3,253,3,187,3,253,3,186,3,253,3,187,3,254,3,188,3,254,3,187,3,254,3,188,3,255,3,189,3,255,3,188,3,255,3,189,3,0,4,190,3,0,4,189,3,0,4,190,3,1,4,191,3,1,4,190,3,1,4,191,3,2,4,192,3,2,4,191,3,2,4,192,3,3,4,193,3,3,4,192,3,3,4,193,3,4,4,194,3,4,4,193,3,4,4,194,3,5,4,195,3,5,4,194,3,5,4,195,3,6,4,196,3,6,4,195,3,6,4,196,3,7,4,197,3,7,4,196,3,7,4,197,3,8,4,198,3,8,4,197,3,8,4,198,3,9,4,199,3,9,4,198,3,9,4,199,3,10,4,200,3,10,4,199,3,10,4,200,3,11,4,201,3,11,4,200,3,11,4,201,3,12,4,202,3,12,4,201,3,12,4,202,3,13,4,203,3,13,4,202,3,13,4,203,3,14,4,204,3,14,4,203,3,14,4,204,3,15,4,205,3,15,4,204,3,15,4,205,3,16,4,206,3,16,4,205,3,16,4,206,3,17,4,207,3,17,4,206,3,17,4,207,3,18,4,208,3,18,4,207,3,18,4,208,3,19,4,209,3,19,4,208,3,19,4,209,3,20,4,210,3,20,4,209,3,20,4,210,3,21,4,211,3,21,4,210,3,21,4,211,3,22,4,212,3,22,4,211,3,22,4,212,3,23,4,213,3,23,4,212,3,23,4,213,3,24,4,214,3,24,4,213,3,24,4,214,3,25,4,215,3,25,4,214,3,25,4,215,3,26,4,216,3,26,4,215,3,26,4,216,3,27,4,217,3,27,4,216,3,27,4,217,3,28,4,218,3,28,4,217,3,28,4,218,3,29,4,219,3,29,4,218,3,29,4,219,3,30,4,220,3,30,4,219,3,30,4,220,3,31,4,221,3,31,4,220,3,32,4,222,3,33,4,223,3,33,4,222,3,33,4,223,3,34,4,224,3,34,4,223,3,34,4,224,3,35,4,225,3,35,4,224,3,35,4,225,3,36,4,226,3,36,4,225,3,36,4,226,3,37,4,227,3,37,4,226,3,37,4,227,3,38,4,228,3,38,4,227,3,38,4,228,3,39,4,229,3,39,4,228,3,39,4,229,3,40,4,230,3,40,4,229,3,40,4,230,3,41,4,231,3,41,4,230,3,41,4,231,3,42,4,232,3,42,4,231,3,42,4,232,3,43,4,233,3,43,4,232,3,43,4,233,3,44,4,234,3,44,4,233,3,44,4,234,3,45,4,235,3,45,4,234,3,45,4,235,3,46,4,236,3,46,4,235,3,46,4,236,3,47,4,237,3,47,4,236,3,47,4,237,3,48,4,238,3,48,4,237,3,48,4,238,3,49,4,239,3,49,4,238,3,49,4,239,3,50,4,240,3,50,4,239,3,50,4,240,3,51,4,241,3,51,4,240,3,51,4,241,3,52,4,242,3,52,4,241,3,52,4,242,3,53,4,243,3,53,4,242,3,53,4,243,3,54,4,244,3,54,4,243,3,54,4,244,3,55,4,245,3,55,4,244,3,55,4,245,3,56,4,246,3,56,4,245,3,56,4,246,3,57,4,247,3,57,4,246,3,57,4,247,3,58,4,248,3,58,4,247,3,58,4,248,3,59,4,249,3,59,4,248,3,59,4,249,3,60,4,250,3,60,4,249,3,60,4,250,3,61,4,251,3,61,4,250,3,61,4,251,3,62,4,252,3,62,4,251,3,62,4,252,3,63,4,253,3,63,4,252,3,63,4,253,3,64,4,254,3,64,4,253,3,64,4,254,3,65,4,255,3,65,4,254,3,65,4,255,3,66,4,0,4,66,4,255,3,66,4,0,4,67,4,1,4,67,4,0,4,67,4,1,4,68,4,2,4,68,4,1,4,68,4,2,4,69,4,3,4,69,4,2,4,69,4,3,4,70,4,4,4,70,4,3,4,70,4,4,4,71,4,5,4,71,4,4,4,71,4,5,4,72,4,6,4,72,4,5,4,72,4,6,4,73,4,7,4,73,4,6,4,73,4,7,4,74,4,8,4,74,4,7,4,74,4,8,4,75,4,9,4,75,4,8,4,75,4,9,4,76,4,10,4,76,4,9,4,76,4,10,4,77,4,11,4,77,4,10,4,77,4,11,4,78,4,12,4,78,4,11,4,78,4,12,4,79,4,13,4,79,4,12,4,79,4,13,4,80,4,14,4,80,4,13,4,80,4,14,4,81,4,15,4,81,4,14,4,81,4,15,4,82,4,16,4,82,4,15,4,82,4,16,4,83,4,17,4,83,4,16,4,83,4,17,4,84,4,18,4,84,4,17,4,84,4,18,4,85,4,19,4,85,4,18,4,85,4,19,4,86,4,20,4,86,4,19,4,86,4,20,4,87,4,21,4,87,4,20,4,87,4,21,4,88,4,22,4,88,4,21,4,88,4,22,4,89,4,23,4,89,4,22,4,89,4,23,4,90,4,24,4,90,4,23,4,90,4,24,4,91,4,25,4,91,4,24,4,91,4,25,4,92,4,26,4,92,4,25,4,92,4,26,4,93,4,27,4,93,4,26,4,93,4,27,4,94,4,28,4,94,4,27,4,94,4,28,4,95,4,29,4,95,4,28,4,95,4,29,4,96,4,30,4,96,4,29,4,96,4,30,4,97,4,31,4,97,4,30,4,98,4,32,4,99,4,33,4,99,4,32,4,99,4,33,4,100,4,34,4,100,4,33,4,100,4,34,4,101,4,35,4,101,4,34,4,101,4,35,4,102,4,36,4,102,4,35,4,102,4,36,4,103,4,37,4,103,4,36,4,103,4,37,4,104,4,38,4,104,4,37,4,104,4,38,4,105,4,39,4,105,4,38,4,105,4,39,4,106,4,40,4,106,4,39,4,106,4,40,4,107,4,41,4,107,4,40,4,107,4,41,4,108,4,42,4,108,4,41,4,108,4,42,4,109,4,43,4,109,4,42,4,109,4,43,4,110,4,44,4,110,4,43,4,110,4,44,4,111,4,45,4,111,4,44,4,111,4,45,4,112,4,46,4,112,4,45,4,112,4,46,4,113,4,47,4,113,4,46,4,113,4,47,4,114,4,48,4,114,4,47,4,114,4,48,4,115,4,49,4,115,4,48,4,115,4,49,4,116,4,50,4,116,4,49,4,116,4,50,4,117,4,51,4,117,4,50,4,117,4,51,4,118,4,52,4,118,4,51,4,118,4,52,4,119,4,53,4,119,4,52,4,119,4,53,4,120,4,54,4,120,4,53,4,120,4,54,4,121,4,55,4,121,4,54,4,121,4,55,4,122,4,56,4,122,4,55,4,122,4,56,4,123,4,57,4,123,4,56,4,123,4,57,4,124,4,58,4,124,4,57,4,124,4,58,4,125,4,59,4,125,4,58,4,125,4,59,4,126,4,60,4,126,4,59,4,126,4,60,4,127,4,61,4,127,4,60,4,127,4,61,4,128,4,62,4,128,4,61,4,128,4,62,4,129,4,63,4,129,4,62,4,129,4,63,4,130,4,64,4,130,4,63,4,130,4,64,4,131,4,65,4,131,4,64,4,131,4,65,4,132,4,66,4,132,4,65,4,132,4,66,4,133,4,67,4,133,4,66,4,133,4,67,4,134,4,68,4,134,4,67,4,134,4,68,4,135,4,69,4,135,4,68,4,135,4,69,4,136,4,70,4,136,4,69,4,136,4,70,4,137,4,71,4,137,4,70,4,137,4,71,4,138,4,72,4,138,4,71,4,138,4,72,4,139,4,73,4,139,4,72,4,139,4,73,4,140,4,74,4,140,4,73,4,140,4,74,4,141,4,75,4,141,4,74,4,141,4,75,4,142,4,76,4,142,4,75,4,142,4,76,4,143,4,77,4,143,4,76,4,143,4,77,4,144,4,78,4,144,4,77,4,144,4,78,4,145,4,79,4,145,4,78,4,145,4,79,4,146,4,80,4,146,4,79,4,146,4,80,4,147,4,81,4,147,4,80,4,147,4,81,4,148,4,82,4,148,4,81,4,148,4,82,4,149,4,83,4,149,4,82,4,149,4,83,4,150,4,84,4,150,4,83,4,150,4,84,4,151,4,85,4,151,4,84,4,151,4,85,4,152,4,86,4,152,4,85,4,152,4,86,4,153,4,87,4,153,4,86,4,153,4,87,4,154,4,88,4,154,4,87,4,154,4,88,4,155,4,89,4,155,4,88,4,155,4,89,4,156,4,90,4,156,4,89,4,156,4,90,4,157,4,91,4,157,4,90,4,157,4,91,4,158,4,92,4,158,4,91,4,158,4,92,4,159,4,93,4,159,4,92,4,159,4,93,4,160,4,94,4,160,4,93,4,160,4,94,4,161,4,95,4,161,4,94,4,161,4,95,4,162,4,96,4,162,4,95,4,162,4,96,4,163,4,97,4,163,4,96,4,164,4,98,4,165,4,99,4,165,4,98,4,165,4,99,4,166,4,100,4,166,4,99,4,166,4,100,4,167,4,101,4,167,4,100,4,167,4,101,4,168,4,102,4,168,4,101,4,168,4,102,4,169,4,103,4,169,4,102,4,169,4,103,4,170,4,104,4,170,4,103,4,170,4,104,4,171,4,105,4,171,4,104,4,171,4,105,4,172,4,106,4,172,4,105,4,172,4,106,4,173,4,107,4,173,4,106,4,173,4,107,4,174,4,108,4,174,4,107,4,174,4,108,4,175,4,109,4,175,4,108,4,175,4,109,4,176,4,110,4,176,4,109,4,176,4,110,4,177,4,111,4,177,4,110,4,177,4,111,4,178,4,112,4,178,4,111,4,178,4,112,4,179,4,113,4,179,4,112,4,179,4,113,4,180,4,114,4,180,4,113,4,180,4,114,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+174080);
/* memory initializer */ allocate([181,4,115,4,181,4,114,4,181,4,115,4,182,4,116,4,182,4,115,4,182,4,116,4,183,4,117,4,183,4,116,4,183,4,117,4,184,4,118,4,184,4,117,4,184,4,118,4,185,4,119,4,185,4,118,4,185,4,119,4,186,4,120,4,186,4,119,4,186,4,120,4,187,4,121,4,187,4,120,4,187,4,121,4,188,4,122,4,188,4,121,4,188,4,122,4,189,4,123,4,189,4,122,4,189,4,123,4,190,4,124,4,190,4,123,4,190,4,124,4,191,4,125,4,191,4,124,4,191,4,125,4,192,4,126,4,192,4,125,4,192,4,126,4,193,4,127,4,193,4,126,4,193,4,127,4,194,4,128,4,194,4,127,4,194,4,128,4,195,4,129,4,195,4,128,4,195,4,129,4,196,4,130,4,196,4,129,4,196,4,130,4,197,4,131,4,197,4,130,4,197,4,131,4,198,4,132,4,198,4,131,4,198,4,132,4,199,4,133,4,199,4,132,4,199,4,133,4,200,4,134,4,200,4,133,4,200,4,134,4,201,4,135,4,201,4,134,4,201,4,135,4,202,4,136,4,202,4,135,4,202,4,136,4,203,4,137,4,203,4,136,4,203,4,137,4,204,4,138,4,204,4,137,4,204,4,138,4,205,4,139,4,205,4,138,4,205,4,139,4,206,4,140,4,206,4,139,4,206,4,140,4,207,4,141,4,207,4,140,4,207,4,141,4,208,4,142,4,208,4,141,4,208,4,142,4,209,4,143,4,209,4,142,4,209,4,143,4,210,4,144,4,210,4,143,4,210,4,144,4,211,4,145,4,211,4,144,4,211,4,145,4,212,4,146,4,212,4,145,4,212,4,146,4,213,4,147,4,213,4,146,4,213,4,147,4,214,4,148,4,214,4,147,4,214,4,148,4,215,4,149,4,215,4,148,4,215,4,149,4,216,4,150,4,216,4,149,4,216,4,150,4,217,4,151,4,217,4,150,4,217,4,151,4,218,4,152,4,218,4,151,4,218,4,152,4,219,4,153,4,219,4,152,4,219,4,153,4,220,4,154,4,220,4,153,4,220,4,154,4,221,4,155,4,221,4,154,4,221,4,155,4,222,4,156,4,222,4,155,4,222,4,156,4,223,4,157,4,223,4,156,4,223,4,157,4,224,4,158,4,224,4,157,4,224,4,158,4,225,4,159,4,225,4,158,4,225,4,159,4,226,4,160,4,226,4,159,4,226,4,160,4,227,4,161,4,227,4,160,4,227,4,161,4,228,4,162,4,228,4,161,4,228,4,162,4,229,4,163,4,229,4,162,4,230,4,164,4,231,4,165,4,231,4,164,4,231,4,165,4,232,4,166,4,232,4,165,4,232,4,166,4,233,4,167,4,233,4,166,4,233,4,167,4,234,4,168,4,234,4,167,4,234,4,168,4,235,4,169,4,235,4,168,4,235,4,169,4,236,4,170,4,236,4,169,4,236,4,170,4,237,4,171,4,237,4,170,4,237,4,171,4,238,4,172,4,238,4,171,4,238,4,172,4,239,4,173,4,239,4,172,4,239,4,173,4,240,4,174,4,240,4,173,4,240,4,174,4,241,4,175,4,241,4,174,4,241,4,175,4,242,4,176,4,242,4,175,4,242,4,176,4,243,4,177,4,243,4,176,4,243,4,177,4,244,4,178,4,244,4,177,4,244,4,178,4,245,4,179,4,245,4,178,4,245,4,179,4,246,4,180,4,246,4,179,4,246,4,180,4,247,4,181,4,247,4,180,4,247,4,181,4,248,4,182,4,248,4,181,4,248,4,182,4,249,4,183,4,249,4,182,4,249,4,183,4,250,4,184,4,250,4,183,4,250,4,184,4,251,4,185,4,251,4,184,4,251,4,185,4,252,4,186,4,252,4,185,4,252,4,186,4,253,4,187,4,253,4,186,4,253,4,187,4,254,4,188,4,254,4,187,4,254,4,188,4,255,4,189,4,255,4,188,4,255,4,189,4,0,5,190,4,0,5,189,4,0,5,190,4,1,5,191,4,1,5,190,4,1,5,191,4,2,5,192,4,2,5,191,4,2,5,192,4,3,5,193,4,3,5,192,4,3,5,193,4,4,5,194,4,4,5,193,4,4,5,194,4,5,5,195,4,5,5,194,4,5,5,195,4,6,5,196,4,6,5,195,4,6,5,196,4,7,5,197,4,7,5,196,4,7,5,197,4,8,5,198,4,8,5,197,4,8,5,198,4,9,5,199,4,9,5,198,4,9,5,199,4,10,5,200,4,10,5,199,4,10,5,200,4,11,5,201,4,11,5,200,4,11,5,201,4,12,5,202,4,12,5,201,4,12,5,202,4,13,5,203,4,13,5,202,4,13,5,203,4,14,5,204,4,14,5,203,4,14,5,204,4,15,5,205,4,15,5,204,4,15,5,205,4,16,5,206,4,16,5,205,4,16,5,206,4,17,5,207,4,17,5,206,4,17,5,207,4,18,5,208,4,18,5,207,4,18,5,208,4,19,5,209,4,19,5,208,4,19,5,209,4,20,5,210,4,20,5,209,4,20,5,210,4,21,5,211,4,21,5,210,4,21,5,211,4,22,5,212,4,22,5,211,4,22,5,212,4,23,5,213,4,23,5,212,4,23,5,213,4,24,5,214,4,24,5,213,4,24,5,214,4,25,5,215,4,25,5,214,4,25,5,215,4,26,5,216,4,26,5,215,4,26,5,216,4,27,5,217,4,27,5,216,4,27,5,217,4,28,5,218,4,28,5,217,4,28,5,218,4,29,5,219,4,29,5,218,4,29,5,219,4,30,5,220,4,30,5,219,4,30,5,220,4,31,5,221,4,31,5,220,4,31,5,221,4,32,5,222,4,32,5,221,4,32,5,222,4,33,5,223,4,33,5,222,4,33,5,223,4,34,5,224,4,34,5,223,4,34,5,224,4,35,5,225,4,35,5,224,4,35,5,225,4,36,5,226,4,36,5,225,4,36,5,226,4,37,5,227,4,37,5,226,4,37,5,227,4,38,5,228,4,38,5,227,4,38,5,228,4,39,5,229,4,39,5,228,4,40,5,230,4,41,5,231,4,41,5,230,4,41,5,231,4,42,5,232,4,42,5,231,4,42,5,232,4,43,5,233,4,43,5,232,4,43,5,233,4,44,5,234,4,44,5,233,4,44,5,234,4,45,5,235,4,45,5,234,4,45,5,235,4,46,5,236,4,46,5,235,4,46,5,236,4,47,5,237,4,47,5,236,4,47,5,237,4,48,5,238,4,48,5,237,4,48,5,238,4,49,5,239,4,49,5,238,4,49,5,239,4,50,5,240,4,50,5,239,4,50,5,240,4,51,5,241,4,51,5,240,4,51,5,241,4,52,5,242,4,52,5,241,4,52,5,242,4,53,5,243,4,53,5,242,4,53,5,243,4,54,5,244,4,54,5,243,4,54,5,244,4,55,5,245,4,55,5,244,4,55,5,245,4,56,5,246,4,56,5,245,4,56,5,246,4,57,5,247,4,57,5,246,4,57,5,247,4,58,5,248,4,58,5,247,4,58,5,248,4,59,5,249,4,59,5,248,4,59,5,249,4,60,5,250,4,60,5,249,4,60,5,250,4,61,5,251,4,61,5,250,4,61,5,251,4,62,5,252,4,62,5,251,4,62,5,252,4,63,5,253,4,63,5,252,4,63,5,253,4,64,5,254,4,64,5,253,4,64,5,254,4,65,5,255,4,65,5,254,4,65,5,255,4,66,5,0,5,66,5,255,4,66,5,0,5,67,5,1,5,67,5,0,5,67,5,1,5,68,5,2,5,68,5,1,5,68,5,2,5,69,5,3,5,69,5,2,5,69,5,3,5,70,5,4,5,70,5,3,5,70,5,4,5,71,5,5,5,71,5,4,5,71,5,5,5,72,5,6,5,72,5,5,5,72,5,6,5,73,5,7,5,73,5,6,5,73,5,7,5,74,5,8,5,74,5,7,5,74,5,8,5,75,5,9,5,75,5,8,5,75,5,9,5,76,5,10,5,76,5,9,5,76,5,10,5,77,5,11,5,77,5,10,5,77,5,11,5,78,5,12,5,78,5,11,5,78,5,12,5,79,5,13,5,79,5,12,5,79,5,13,5,80,5,14,5,80,5,13,5,80,5,14,5,81,5,15,5,81,5,14,5,81,5,15,5,82,5,16,5,82,5,15,5,82,5,16,5,83,5,17,5,83,5,16,5,83,5,17,5,84,5,18,5,84,5,17,5,84,5,18,5,85,5,19,5,85,5,18,5,85,5,19,5,86,5,20,5,86,5,19,5,86,5,20,5,87,5,21,5,87,5,20,5,87,5,21,5,88,5,22,5,88,5,21,5,88,5,22,5,89,5,23,5,89,5,22,5,89,5,23,5,90,5,24,5,90,5,23,5,90,5,24,5,91,5,25,5,91,5,24,5,91,5,25,5,92,5,26,5,92,5,25,5,92,5,26,5,93,5,27,5,93,5,26,5,93,5,27,5,94,5,28,5,94,5,27,5,94,5,28,5,95,5,29,5,95,5,28,5,95,5,29,5,96,5,30,5,96,5,29,5,96,5,30,5,97,5,31,5,97,5,30,5,97,5,31,5,98,5,32,5,98,5,31,5,98,5,32,5,99,5,33,5,99,5,32,5,99,5,33,5,100,5,34,5,100,5,33,5,100,5,34,5,101,5,35,5,101,5,34,5,101,5,35,5,102,5,36,5,102,5,35,5,102,5,36,5,103,5,37,5,103,5,36,5,103,5,37,5,104,5,38,5,104,5,37,5,104,5,38,5,105,5,39,5,105,5,38,5,106,5,40,5,107,5,41,5,107,5,40,5,107,5,41,5,108,5,42,5,108,5,41,5,108,5,42,5,109,5,43,5,109,5,42,5,109,5,43,5,110,5,44,5,110,5,43,5,110,5,44,5,111,5,45,5,111,5,44,5,111,5,45,5,112,5,46,5,112,5,45,5,112,5,46,5,113,5,47,5,113,5,46,5,113,5,47,5,114,5,48,5,114,5,47,5,114,5,48,5,115,5,49,5,115,5,48,5,115,5,49,5,116,5,50,5,116,5,49,5,116,5,50,5,117,5,51,5,117,5,50,5,117,5,51,5,118,5,52,5,118,5,51,5,118,5,52,5,119,5,53,5,119,5,52,5,119,5,53,5,120,5,54,5,120,5,53,5,120,5,54,5,121,5,55,5,121,5,54,5,121,5,55,5,122,5,56,5,122,5,55,5,122,5,56,5,123,5,57,5,123,5,56,5,123,5,57,5,124,5,58,5,124,5,57,5,124,5,58,5,125,5,59,5,125,5,58,5,125,5,59,5,126,5,60,5,126,5,59,5,126,5,60,5,127,5,61,5,127,5,60,5,127,5,61,5,128,5,62,5,128,5,61,5,128,5,62,5,129,5,63,5,129,5,62,5,129,5,63,5,130,5,64,5,130,5,63,5,130,5,64,5,131,5,65,5,131,5,64,5,131,5,65,5,132,5,66,5,132,5,65,5,132,5,66,5,133,5,67,5,133,5,66,5,133,5,67,5,134,5,68,5,134,5,67,5,134,5,68,5,135,5,69,5,135,5,68,5,135,5,69,5,136,5,70,5,136,5,69,5,136,5,70,5,137,5,71,5,137,5,70,5,137,5,71,5,138,5,72,5,138,5,71,5,138,5,72,5,139,5,73,5,139,5,72,5,139,5,73,5,140,5,74,5,140,5,73,5,140,5,74,5,141,5,75,5,141,5,74,5,141,5,75,5,142,5,76,5,142,5,75,5,142,5,76,5,143,5,77,5,143,5,76,5,143,5,77,5,144,5,78,5,144,5,77,5,144,5,78,5,145,5,79,5,145,5,78,5,145,5,79,5,146,5,80,5,146,5,79,5,146,5,80,5,147,5,81,5,147,5,80,5,147,5,81,5,148,5,82,5,148,5,81,5,148,5,82,5,149,5,83,5,149,5,82,5,149,5,83,5,150,5,84,5,150,5,83,5,150,5,84,5,151,5,85,5,151,5,84,5,151,5,85,5,152,5,86,5,152,5,85,5,152,5,86,5,153,5,87,5,153,5,86,5,153,5,87,5,154,5,88,5,154,5,87,5,154,5,88,5,155,5,89,5,155,5,88,5,155,5,89,5,156,5,90,5,156,5,89,5,156,5,90,5,157,5,91,5,157,5,90,5,157,5,91,5,158,5,92,5,158,5,91,5,158,5,92,5,159,5,93,5,159,5,92,5,159,5,93,5,160,5,94,5,160,5,93,5,160,5,94,5,161,5,95,5,161,5,94,5,161,5,95,5,162,5,96,5,162,5,95,5,162,5,96,5,163,5,97,5,163,5,96,5,163,5,97,5,164,5,98,5,164,5,97,5,164,5,98,5,165,5,99,5,165,5,98,5,165,5,99,5,166,5,100,5,166,5,99,5,166,5,100,5,167,5,101,5,167,5,100,5,167,5,101,5,168,5,102,5,168,5,101,5,168,5,102,5,169,5,103,5,169,5,102,5,169,5,103,5,170,5,104,5,170,5,103,5,170,5,104,5,171,5,105,5,171,5,104,5,172,5,106,5,173,5,107,5,173,5,106,5,173,5,107,5,174,5,108,5,174,5,107,5,174,5,108,5,175,5,109,5,175,5,108,5,175,5,109,5,176,5,110,5,176,5,109,5,176,5,110,5,177,5,111,5,177,5,110,5,177,5,111,5,178,5,112,5,178,5,111,5,178,5,112,5,179,5,113,5,179,5,112,5,179,5,113,5,180,5,114,5,180,5,113,5,180,5,114,5,181,5,115,5,181,5,114,5,181,5,115,5,182,5,116,5,182,5,115,5,182,5,116,5,183,5,117,5,183,5,116,5,183,5,117,5,184,5,118,5,184,5,117,5,184,5,118,5,185,5,119,5,185,5,118,5,185,5,119,5,186,5,120,5,186,5,119,5,186,5,120,5,187,5,121,5,187,5,120,5,187,5,121,5,188,5,122,5,188,5,121,5,188,5,122,5,189,5,123,5,189,5,122,5,189,5,123,5,190,5,124,5,190,5,123,5,190,5,124,5,191,5,125,5,191,5,124,5,191,5,125,5,192,5,126,5,192,5,125,5,192,5,126,5,193,5,127,5,193,5,126,5,193,5,127,5,194,5,128,5,194,5,127,5,194,5,128,5,195,5,129,5,195,5,128,5,195,5,129,5,196,5,130,5,196,5,129,5,196,5,130,5,197,5,131,5,197,5,130,5,197,5,131,5,198,5,132,5,198,5,131,5,198,5,132,5,199,5,133,5,199,5,132,5,199,5,133,5,200,5,134,5,200,5,133,5,200,5,134,5,201,5,135,5,201,5,134,5,201,5,135,5,202,5,136,5,202,5,135,5,202,5,136,5,203,5,137,5,203,5,136,5,203,5,137,5,204,5,138,5,204,5,137,5,204,5,138,5,205,5,139,5,205,5,138,5,205,5,139,5,206,5,140,5,206,5,139,5,206,5,140,5,207,5,141,5,207,5,140,5,207,5,141,5,208,5,142,5,208,5,141,5,208,5,142,5,209,5,143,5,209,5,142,5,209,5,143,5,210,5,144,5,210,5,143,5,210,5,144,5,211,5,145,5,211,5,144,5,211,5,145,5,212,5,146,5,212,5,145,5,212,5,146,5,213,5,147,5,213,5,146,5,213,5,147,5,214,5,148,5,214,5,147,5,214,5,148,5,215,5,149,5,215,5,148,5,215,5,149,5,216,5,150,5,216,5,149,5,216,5,150,5,217,5,151,5,217,5,150,5,217,5,151,5,218,5,152,5,218,5,151,5,218,5,152,5,219,5,153,5,219,5,152,5,219,5,153,5,220,5,154,5,220,5,153,5,220,5,154,5,221,5,155,5,221,5,154,5,221,5,155,5,222,5,156,5,222,5,155,5,222,5,156,5,223,5,157,5,223,5,156,5,223,5,157,5,224,5,158,5,224,5,157,5,224,5,158,5,225,5,159,5,225,5,158,5,225,5,159,5,226,5,160,5,226,5,159,5,226,5,160,5,227,5,161,5,227,5,160,5,227,5,161,5,228,5,162,5,228,5,161,5,228,5,162,5,229,5,163,5,229,5,162,5,229,5,163,5,230,5,164,5,230,5,163,5,230,5,164,5,231,5,165,5,231,5,164,5,231,5,165,5,232,5,166,5,232,5,165,5,232,5,166,5,233,5,167,5,233,5,166,5,233,5,167,5,234,5,168,5,234,5,167,5,234,5,168,5,235,5,169,5,235,5,168,5,235,5,169,5,236,5,170,5,236,5,169,5,236,5,170,5,237,5,171,5,237,5,170,5,238,5,172,5,239,5,173,5,239,5,172,5,239,5,173,5,240,5,174,5,240,5,173,5,240,5,174,5,241,5,175,5,241,5,174,5,241,5,175,5,242,5,176,5,242,5,175,5,242,5,176,5,243,5,177,5,243,5,176,5,243,5,177,5,244,5,178,5,244,5,177,5,244,5,178,5,245,5,179,5,245,5,178,5,245,5,179,5,246,5,180,5,246,5,179,5,246,5,180,5,247,5,181,5,247,5,180,5,247,5,181,5,248,5,182,5,248,5,181,5,248,5,182,5,249,5,183,5,249,5,182,5,249,5,183,5,250,5,184,5,250,5,183,5,250,5,184,5,251,5,185,5,251,5,184,5,251,5,185,5,252,5,186,5,252,5,185,5,252,5,186,5,253,5,187,5,253,5,186,5,253,5,187,5,254,5,188,5,254,5,187,5,254,5,188,5,255,5,189,5,255,5,188,5,255,5,189,5,0,6,190,5,0,6,189,5,0,6,190,5,1,6,191,5,1,6,190,5,1,6,191,5,2,6,192,5,2,6,191,5,2,6,192,5,3,6,193,5,3,6,192,5,3,6,193,5,4,6,194,5,4,6,193,5,4,6,194,5,5,6,195,5,5,6,194,5,5,6,195,5,6,6,196,5,6,6,195,5,6,6,196,5,7,6,197,5,7,6,196,5,7,6,197,5,8,6,198,5,8,6,197,5,8,6,198,5,9,6,199,5,9,6,198,5,9,6,199,5,10,6,200,5,10,6,199,5,10,6,200,5,11,6,201,5,11,6,200,5,11,6,201,5,12,6,202,5,12,6,201,5,12,6,202,5,13,6,203,5,13,6,202,5,13,6,203,5,14,6,204,5,14,6,203,5,14,6,204,5,15,6,205,5,15,6,204,5,15,6,205,5,16,6,206,5,16,6,205,5,16,6,206,5,17,6,207,5,17,6,206,5,17,6,207,5,18,6,208,5,18,6,207,5,18,6,208,5,19,6,209,5,19,6,208,5,19,6,209,5,20,6,210,5,20,6,209,5,20,6,210,5,21,6,211,5,21,6,210,5,21,6,211,5,22,6,212,5,22,6,211,5,22,6,212,5,23,6,213,5,23,6,212,5,23,6,213,5,24,6,214,5,24,6,213,5,24,6,214,5,25,6,215,5,25,6,214,5,25,6,215,5,26,6,216,5,26,6,215,5,26,6,216,5,27,6,217,5,27,6,216,5,27,6,217,5,28,6,218,5,28,6,217,5,28,6,218,5,29,6,219,5,29,6,218,5,29,6,219,5,30,6,220,5,30,6,219,5,30,6,220,5,31,6,221,5,31,6,220,5,31,6,221,5,32,6,222,5,32,6,221,5,32,6,222,5,33,6,223,5,33,6,222,5,33,6,223,5,34,6,224,5,34,6,223,5,34,6,224,5,35,6,225,5,35,6,224,5,35,6,225,5,36,6,226,5,36,6,225,5,36,6,226,5,37,6,227,5,37,6,226,5,37,6,227,5,38,6,228,5,38,6,227,5,38,6,228,5,39,6,229,5,39,6,228,5,39,6,229,5,40,6,230,5,40,6,229,5,40,6,230,5,41,6,231,5,41,6,230,5,41,6,231,5,42,6,232,5,42,6,231,5,42,6,232,5,43,6,233,5,43,6,232,5,43,6,233,5,44,6,234,5,44,6,233,5,44,6,234,5,45,6,235,5,45,6,234,5,45,6,235,5,46,6,236,5,46,6,235,5,46,6,236,5,47,6,237,5,47,6,236,5,48,6,238,5,49,6,239,5,49,6,238,5,49,6,239,5,50,6,240,5,50,6,239,5,50,6,240,5,51,6,241,5,51,6,240,5,51,6,241,5,52,6,242,5,52,6,241,5,52,6,242,5,53,6,243,5,53,6,242,5,53,6,243,5,54,6,244,5,54,6,243,5,54,6,244,5,55,6,245,5,55,6,244,5,55,6,245,5,56,6,246,5,56,6,245,5,56,6,246,5,57,6,247,5,57,6,246,5,57,6,247,5,58,6,248,5,58,6,247,5,58,6,248,5,59,6,249,5,59,6,248,5,59,6,249,5,60,6,250,5,60,6,249,5,60,6,250,5,61,6,251,5,61,6,250,5,61,6,251,5,62,6,252,5,62,6,251,5,62,6,252,5,63,6,253,5,63,6,252,5,63,6,253,5,64,6,254,5,64,6,253,5,64,6,254,5,65,6,255,5,65,6,254,5,65,6,255,5,66,6,0,6,66,6,255,5,66,6,0,6,67,6,1,6,67,6,0,6,67,6,1,6,68,6,2,6,68,6,1,6,68,6,2,6,69,6,3,6,69,6,2,6,69,6,3,6,70,6,4,6,70,6,3,6,70,6,4,6,71,6,5,6,71,6,4,6,71,6,5,6,72,6,6,6,72,6,5,6,72,6,6,6,73,6,7,6,73,6,6,6,73,6,7,6,74,6,8,6,74,6,7,6,74,6,8,6,75,6,9,6,75,6,8,6,75,6,9,6,76,6,10,6,76,6,9,6,76,6,10,6,77,6,11,6,77,6,10,6,77,6,11,6,78,6,12,6,78,6,11,6,78,6,12,6,79,6,13,6,79,6,12,6,79,6,13,6,80,6,14,6,80,6,13,6,80,6,14,6,81,6,15,6,81,6,14,6,81,6,15,6,82,6,16,6,82,6,15,6,82,6,16,6,83,6,17,6,83,6,16,6,83,6,17,6,84,6,18,6,84,6,17,6,84,6,18,6,85,6,19,6,85,6,18,6,85,6,19,6,86,6,20,6,86,6,19,6,86,6,20,6,87,6,21,6,87,6,20,6,87,6,21,6,88,6,22,6,88,6,21,6,88,6,22,6,89,6,23,6,89,6,22,6,89,6,23,6,90,6,24,6,90,6,23,6,90,6,24,6,91,6,25,6,91,6,24,6,91,6,25,6,92,6,26,6,92,6,25,6,92,6,26,6,93,6,27,6,93,6,26,6,93,6,27,6,94,6,28,6,94,6,27,6,94,6,28,6,95,6,29,6,95,6,28,6,95,6,29,6,96,6,30,6,96,6,29,6,96,6,30,6,97,6,31,6,97,6,30,6,97,6,31,6,98,6,32,6,98,6,31,6,98,6,32,6,99,6,33,6,99,6,32,6,99,6,33,6,100,6,34,6,100,6,33,6,100,6,34,6,101,6,35,6,101,6,34,6,101,6,35,6,102,6,36,6,102,6,35,6,102,6,36,6,103,6,37,6,103,6,36,6,103,6,37,6,104,6,38,6,104,6,37,6,104,6,38,6,105,6,39,6,105,6,38,6,105,6,39,6,106,6,40,6,106,6,39,6,106,6,40,6,107,6,41,6,107,6,40,6,107,6,41,6,108,6,42,6,108,6,41,6,108,6,42,6,109,6,43,6,109,6,42,6,109,6,43,6,110,6,44,6,110,6,43,6,110,6,44,6,111,6,45,6,111,6,44,6,111,6,45,6,112,6,46,6,112,6,45,6,112,6,46,6,113,6,47,6,113,6,46,6,114,6,48,6,115,6,49,6,115,6,48,6,115,6,49,6,116,6,50,6,116,6,49,6,116,6,50,6,117,6,51,6,117,6,50,6,117,6,51,6,118,6,52,6,118,6,51,6,118,6,52,6,119,6,53,6,119,6,52,6,119,6,53,6,120,6,54,6,120,6,53,6,120,6,54,6,121,6,55,6,121,6,54,6,121,6,55,6,122,6,56,6,122,6,55,6,122,6,56,6,123,6,57,6,123,6,56,6,123,6,57,6,124,6,58,6,124,6,57,6,124,6,58,6,125,6,59,6,125,6,58,6,125,6,59,6,126,6,60,6,126,6,59,6,126,6,60,6,127,6,61,6,127,6,60,6,127,6,61,6,128,6,62,6,128,6,61,6,128,6,62,6,129,6,63,6,129,6,62,6,129,6,63,6,130,6,64,6,130,6,63,6,130,6,64,6,131,6,65,6,131,6,64,6,131,6,65,6,132,6,66,6,132,6,65,6,132,6,66,6,133,6,67,6,133,6,66,6,133,6,67,6,134,6,68,6,134,6,67,6,134,6,68,6,135,6,69,6,135,6,68,6,135,6,69,6,136,6,70,6,136,6,69,6,136,6,70,6,137,6,71,6,137,6,70,6,137,6,71,6,138,6,72,6,138,6,71,6,138,6,72,6,139,6,73,6,139,6,72,6,139,6,73,6,140,6,74,6,140,6,73,6,140,6,74,6,141,6,75,6,141,6,74,6,141,6,75,6,142,6,76,6,142,6,75,6,142,6,76,6,143,6,77,6,143,6,76,6,143,6,77,6,144,6,78,6,144,6,77,6,144,6,78,6,145,6,79,6,145,6,78,6,145,6,79,6,146,6,80,6,146,6,79,6,146,6,80,6,147,6,81,6,147,6,80,6,147,6,81,6,148,6,82,6,148,6,81,6,148,6,82,6,149,6,83,6,149,6,82,6,149,6,83,6,150,6,84,6,150,6,83,6,150,6,84,6,151,6,85,6,151,6,84,6,151,6,85,6,152,6,86,6,152,6,85,6,152,6,86,6,153,6,87,6,153,6,86,6,153,6,87,6,154,6,88,6,154,6,87,6,154,6,88,6,155,6,89,6,155,6,88,6,155,6,89,6,156,6,90,6,156,6,89,6,156,6,90,6,157,6,91,6,157,6,90,6,157,6,91,6,158,6,92,6,158,6,91,6,158,6,92,6,159,6,93,6,159,6,92,6,159,6,93,6,160,6,94,6,160,6,93,6,160,6,94,6,161,6,95,6,161,6,94,6,161,6,95,6,162,6,96,6,162,6,95,6,162,6,96,6,163,6,97,6,163,6,96,6,163,6,97,6,164,6,98,6,164,6,97,6,164,6,98,6,165,6,99,6,165,6,98,6,165,6,99,6,166,6,100,6,166,6,99,6,166,6,100,6,167,6,101,6,167,6,100,6,167,6,101,6,168,6,102,6,168,6,101,6,168,6,102,6,169,6,103,6,169,6,102,6,169,6,103,6,170,6,104,6,170,6,103,6,170,6,104,6,171,6,105,6,171,6,104,6,171,6,105,6,172,6,106,6,172,6,105,6,172,6,106,6,173,6,107,6,173,6,106,6,173,6,107,6,174,6,108,6,174,6,107,6,174,6,108,6,175,6,109,6,175,6,108,6,175,6,109,6,176,6,110,6,176,6,109,6,176,6,110,6,177,6,111,6,177,6,110,6,177,6,111,6,178,6,112,6,178,6,111,6,178,6,112,6,179,6,113,6,179,6,112,6,180,6,114,6,181,6,115,6,181,6,114,6,181,6,115,6,182,6,116,6,182,6,115,6,182,6,116,6,183,6,117,6,183,6,116,6,183,6,117,6,184,6,118,6,184,6,117,6,184,6,118,6,185,6,119,6,185,6,118,6,185,6,119,6,186,6,120,6,186,6,119,6,186,6,120,6,187,6,121,6,187,6,120,6,187,6,121,6,188,6,122,6,188,6,121,6,188,6,122,6,189,6,123,6,189,6,122,6,189,6,123,6,190,6,124,6,190,6,123,6,190,6,124,6,191,6,125,6,191,6,124,6,191,6,125,6,192,6,126,6,192,6,125,6,192,6,126,6,193,6,127,6,193,6,126,6,193,6,127,6,194,6,128,6,194,6,127,6,194,6,128,6,195,6,129,6,195,6,128,6,195,6,129,6,196,6,130,6,196,6,129,6,196,6,130,6,197,6,131,6,197,6,130,6,197,6,131,6,198,6,132,6,198,6,131,6,198,6,132,6,199,6,133,6,199,6,132,6,199,6,133,6,200,6,134,6,200,6,133,6,200,6,134,6,201,6,135,6,201,6,134,6,201,6,135,6,202,6,136,6,202,6,135,6,202,6,136,6,203,6,137,6,203,6,136,6,203,6,137,6,204,6,138,6,204,6,137,6,204,6,138,6,205,6,139,6,205,6,138,6,205,6,139,6,206,6,140,6,206,6,139,6,206,6,140,6,207,6,141,6,207,6,140,6,207,6,141,6,208,6,142,6,208,6,141,6,208,6,142,6,209,6,143,6,209,6,142,6,209,6,143,6,210,6,144,6,210,6,143,6,210,6,144,6,211,6,145,6,211,6,144,6,211,6,145,6,212,6,146,6,212,6,145,6,212,6,146,6,213,6,147,6,213,6,146,6,213,6,147,6,214,6,148,6,214,6,147,6,214,6,148,6,215,6,149,6,215,6,148,6,215,6,149,6,216,6,150,6,216,6,149,6,216,6,150,6,217,6,151,6,217,6,150,6,217,6,151,6,218,6,152,6,218,6,151,6,218,6,152,6,219,6,153,6,219,6,152,6,219,6,153,6,220,6,154,6,220,6,153,6,220,6,154,6,221,6,155,6,221,6,154,6,221,6,155,6,222,6,156,6,222,6,155,6,222,6,156,6,223,6,157,6,223,6,156,6,223,6,157,6,224,6,158,6,224,6,157,6,224,6,158,6,225,6,159,6,225,6,158,6,225,6,159,6,226,6,160,6,226,6,159,6,226,6,160,6,227,6,161,6,227,6,160,6,227,6,161,6,228,6,162,6,228,6,161,6,228,6,162,6,229,6,163,6,229,6,162,6,229,6,163,6,230,6,164,6,230,6,163,6,230,6,164,6,231,6,165,6,231,6,164,6,231,6,165,6,232,6,166,6,232,6,165,6,232,6,166,6,233,6,167,6,233,6,166,6,233,6,167,6,234,6,168,6,234,6,167,6,234,6,168,6,235,6,169,6,235,6,168,6,235,6,169,6,236,6,170,6,236,6,169,6,236,6,170,6,237,6,171,6,237,6,170,6,237,6,171,6,238,6,172,6,238,6,171,6,238,6,172,6,239,6,173,6,239,6,172,6,239,6,173,6,240,6,174,6,240,6,173,6,240,6,174,6,241,6,175,6,241,6,174,6,241,6,175,6,242,6,176,6,242,6,175,6,242,6,176,6,243,6,177,6,243,6,176,6,243,6,177,6,244,6,178,6,244,6,177,6,244,6,178,6,245,6,179,6,245,6,178,6,246,6,180,6,247,6,181,6,247,6,180,6,247,6,181,6,248,6,182,6,248,6,181,6,248,6,182,6,249,6,183,6,249,6,182,6,249,6,183,6,250,6,184,6,250,6,183,6,250,6,184,6,251,6,185,6,251,6,184,6,251,6,185,6,252,6,186,6,252,6,185,6,252,6,186,6,253,6,187,6,253,6,186,6,253,6,187,6,254,6,188,6,254,6,187,6,254,6,188,6,255,6,189,6,255,6,188,6,255,6,189,6,0,7,190,6,0,7,189,6,0,7,190,6,1,7,191,6,1,7,190,6,1,7,191,6,2,7,192,6,2,7,191,6,2,7,192,6,3,7,193,6,3,7,192,6,3,7,193,6,4,7,194,6,4,7,193,6,4,7,194,6,5,7,195,6,5,7,194,6,5,7,195,6,6,7,196,6,6,7,195,6,6,7,196,6,7,7,197,6,7,7,196,6,7,7,197,6,8,7,198,6,8,7,197,6,8,7,198,6,9,7,199,6,9,7,198,6,9,7,199,6,10,7,200,6,10,7,199,6,10,7,200,6,11,7,201,6,11,7,200,6,11,7,201,6,12,7,202,6,12,7,201,6,12,7,202,6,13,7,203,6,13,7,202,6,13,7,203,6,14,7,204,6,14,7,203,6,14,7,204,6,15,7,205,6,15,7,204,6,15,7,205,6,16,7,206,6,16,7,205,6,16,7,206,6,17,7,207,6,17,7,206,6,17,7,207,6,18,7,208,6,18,7,207,6,18,7,208,6,19,7,209,6,19,7,208,6,19,7,209,6,20,7,210,6,20,7,209,6,20,7,210,6,21,7,211,6,21,7,210,6,21,7,211,6,22,7,212,6,22,7,211,6,22,7,212,6,23,7,213,6,23,7,212,6,23,7,213,6,24,7,214,6,24,7,213,6,24,7,214,6,25,7,215,6,25,7,214,6,25,7,215,6,26,7,216,6,26,7,215,6,26,7,216,6,27,7,217,6,27,7,216,6,27,7,217,6,28,7,218,6,28,7,217,6,28,7,218,6,29,7,219,6,29,7,218,6,29,7,219,6,30,7,220,6,30,7,219,6,30,7,220,6,31,7,221,6,31,7,220,6,31,7,221,6,32,7,222,6,32,7,221,6,32,7,222,6,33,7,223,6,33,7,222,6,33,7,223,6,34,7,224,6,34,7,223,6,34,7,224,6,35,7,225,6,35,7,224,6,35,7,225,6,36,7,226,6,36,7,225,6,36,7,226,6,37,7,227,6,37,7,226,6,37,7,227,6,38,7,228,6,38,7,227,6,38,7,228,6,39,7,229,6,39,7,228,6,39,7,229,6,40,7,230,6,40,7,229,6,40,7,230,6,41,7,231,6,41,7,230,6,41,7,231,6,42,7,232,6,42,7,231,6,42,7,232,6,43,7,233,6,43,7,232,6,43,7,233,6,44,7,234,6,44,7,233,6,44,7,234,6,45,7,235,6,45,7,234,6,45,7,235,6,46,7,236,6,46,7,235,6,46,7,236,6,47,7,237,6,47,7,236,6,47,7,237,6,48,7,238,6,48,7,237,6,48,7,238,6,49,7,239,6,49,7,238,6,49,7,239,6,50,7,240,6,50,7,239,6,50,7,240,6,51,7,241,6,51,7,240,6,51,7,241,6,52,7,242,6,52,7,241,6,52,7,242,6,53,7,243,6,53,7,242,6,53,7,243,6,54,7,244,6,54,7,243,6,54,7,244,6,55,7,245,6,55,7,244,6,56,7,246,6,57,7,247,6,57,7,246,6,57,7,247,6,58,7,248,6,58,7,247,6,58,7,248,6,59,7,249,6,59,7,248,6,59,7,249,6,60,7,250,6,60,7,249,6,60,7,250,6,61,7,251,6,61,7,250,6,61,7,251,6,62,7,252,6,62,7,251,6,62,7,252,6,63,7,253,6,63,7,252,6,63,7,253,6,64,7,254,6,64,7,253,6,64,7,254,6,65,7,255,6,65,7,254,6,65,7,255,6,66,7,0,7,66,7,255,6,66,7,0,7,67,7,1,7,67,7,0,7,67,7,1,7,68,7,2,7,68,7,1,7,68,7,2,7,69,7,3,7,69,7,2,7,69,7,3,7,70,7,4,7,70,7,3,7,70,7,4,7,71,7,5,7,71,7,4,7,71,7,5,7,72,7,6,7,72,7,5,7,72,7,6,7,73,7,7,7,73,7,6,7,73,7,7,7,74,7,8,7,74,7,7,7,74,7,8,7,75,7,9,7,75,7,8,7,75,7,9,7,76,7,10,7,76,7,9,7,76,7,10,7,77,7,11,7,77,7,10,7,77,7,11,7,78,7,12,7,78,7,11,7,78,7,12,7,79,7,13,7,79,7,12,7,79,7,13,7,80,7,14,7,80,7,13,7,80,7,14,7,81,7,15,7,81,7,14,7,81,7,15,7,82,7,16,7,82,7,15,7,82,7,16,7,83,7,17,7,83,7,16,7,83,7,17,7,84,7,18,7,84,7,17,7,84,7,18,7,85,7,19,7,85,7,18,7,85,7,19,7,86,7,20,7,86,7,19,7,86,7,20,7,87,7,21,7,87,7,20,7,87,7,21,7,88,7,22,7,88,7,21,7,88,7,22,7,89,7,23,7,89,7,22,7,89,7,23,7,90,7,24,7,90,7,23,7,90,7,24,7,91,7,25,7,91,7,24,7,91,7,25,7,92,7,26,7,92,7,25,7,92,7,26,7,93,7,27,7,93,7,26,7,93,7,27,7,94,7,28,7,94,7,27,7,94,7,28,7,95,7,29,7,95,7,28,7,95,7,29,7,96,7,30,7,96,7,29,7,96,7,30,7,97,7,31,7,97,7,30,7,97,7,31,7,98,7,32,7,98,7,31,7,98,7,32,7,99,7,33,7,99,7,32,7,99,7,33,7,100,7,34,7,100,7,33,7,100,7,34,7,101,7,35,7,101,7,34,7,101,7,35,7,102,7,36,7,102,7,35,7,102,7,36,7,103,7,37,7,103,7,36,7,103,7,37,7,104,7,38,7,104,7,37,7,104,7,38,7,105,7,39,7,105,7,38,7,105,7,39,7,106,7,40,7,106,7,39,7,106,7,40,7,107,7,41,7,107,7,40,7,107,7,41,7,108,7,42,7,108,7,41,7,108,7,42,7,109,7,43,7,109,7,42,7,109,7,43,7,110,7,44,7,110,7,43,7,110,7,44,7,111,7,45,7,111,7,44,7,111,7,45,7,112,7,46,7,112,7,45,7,112,7,46,7,113,7,47,7,113,7,46,7,113,7,47,7,114,7,48,7,114,7,47,7,114,7,48,7,115,7,49,7,115,7,48,7,115,7,49,7,116,7,50,7,116,7,49,7,116,7,50,7,117,7,51,7,117,7,50,7,117,7,51,7,118,7,52,7,118,7,51,7,118,7,52,7,119,7,53,7,119,7,52,7,119,7,53,7,120,7,54,7,120,7,53,7,120,7,54,7,121,7,55,7,121,7,54,7,122,7,56,7,123,7,57,7,123,7,56,7,123,7,57,7,124,7,58,7,124,7,57,7,124,7,58,7,125,7,59,7,125,7,58,7,125,7,59,7,126,7,60,7,126,7,59,7,126,7,60,7,127,7,61,7,127,7,60,7,127,7,61,7,128,7,62,7,128,7,61,7,128,7,62,7,129,7,63,7,129,7,62,7,129,7,63,7,130,7,64,7,130,7,63,7,130,7,64,7,131,7,65,7,131,7,64,7,131,7,65,7,132,7,66,7,132,7,65,7,132,7,66,7,133,7,67,7,133,7,66,7,133,7,67,7,134,7,68,7,134,7,67,7,134,7,68,7,135,7,69,7,135,7,68,7,135,7,69,7,136,7,70,7,136,7,69,7,136,7,70,7,137,7,71,7,137,7,70,7,137,7,71,7,138,7,72,7,138,7,71,7,138,7,72,7,139,7,73,7,139,7,72,7,139,7,73,7,140,7,74,7,140,7,73,7,140,7,74,7,141,7,75,7,141,7,74,7,141,7,75,7,142,7,76,7,142,7,75,7,142,7,76,7,143,7,77,7,143,7,76,7,143,7,77,7,144,7,78,7,144,7,77,7,144,7,78,7,145,7,79,7,145,7,78,7,145,7,79,7,146,7,80,7,146,7,79,7,146,7,80,7,147,7,81,7,147,7,80,7,147,7,81,7,148,7,82,7,148,7,81,7,148,7,82,7,149,7,83,7,149,7,82,7,149,7,83,7,150,7,84,7,150,7,83,7,150,7,84,7,151,7,85,7,151,7,84,7,151,7,85,7,152,7,86,7,152,7,85,7,152,7,86,7,153,7,87,7,153,7,86,7,153,7,87,7,154,7,88,7,154,7,87,7,154,7,88,7,155,7,89,7,155,7,88,7,155,7,89,7,156,7,90,7,156,7,89,7,156,7,90,7,157,7,91,7,157,7,90,7,157,7,91,7,158,7,92,7,158,7,91,7,158,7,92,7,159,7,93,7,159,7,92,7,159,7,93,7,160,7,94,7,160,7,93,7,160,7,94,7,161,7,95,7,161,7,94,7,161,7,95,7,162,7,96,7,162,7,95,7,162,7,96,7,163,7,97,7,163,7,96,7,163,7,97,7,164,7,98,7,164,7,97,7,164,7,98,7,165,7,99,7,165,7,98,7,165,7,99,7,166,7,100,7,166,7,99,7,166,7,100,7,167,7,101,7,167,7,100,7,167,7,101,7,168,7,102,7,168,7,101,7,168,7,102,7,169,7,103,7,169,7,102,7,169,7,103,7,170,7,104,7,170,7,103,7,170,7,104,7,171,7,105,7,171,7,104,7,171,7,105,7,172,7,106,7,172,7,105,7,172,7,106,7,173,7,107,7,173,7,106,7,173,7,107,7,174,7,108,7,174,7,107,7,174,7,108,7,175,7,109,7,175,7,108,7,175,7,109,7,176,7,110,7,176,7,109,7,176,7,110,7,177,7,111,7,177,7,110,7,177,7,111,7,178,7,112,7,178,7,111,7,178,7,112,7,179,7,113,7,179,7,112,7,179,7,113,7,180,7,114,7,180,7,113,7,180,7,114,7,181,7,115,7,181,7,114,7,181,7,115,7,182,7,116,7,182,7,115,7,182,7,116,7,183,7,117,7,183,7,116,7,183,7,117,7,184,7,118,7,184,7,117,7,184,7,118,7,185,7,119,7,185,7,118,7,185,7,119,7,186,7,120,7,186,7,119,7,186,7,120,7,187,7,121,7,187,7,120,7,188,7,122,7,189,7,123,7,189,7,122,7,189,7,123,7,190,7,124,7,190,7,123,7,190,7,124,7,191,7,125,7,191,7,124,7,191,7,125,7,192,7,126,7,192,7,125,7,192,7,126,7,193,7,127,7,193,7,126,7,193,7,127,7,194,7,128,7,194,7,127,7,194,7,128,7,195,7,129,7,195,7,128,7,195,7,129,7,196,7,130,7,196,7,129,7,196,7,130,7,197,7,131,7,197,7,130,7,197,7,131,7,198,7,132,7,198,7,131,7,198,7,132,7,199,7,133,7,199,7,132,7,199,7,133,7,200,7,134,7,200,7,133,7,200,7,134,7,201,7,135,7,201,7,134,7,201,7,135,7,202,7,136,7,202,7,135,7,202,7,136,7,203,7,137,7,203,7,136,7,203,7,137,7,204,7,138,7,204,7,137,7,204,7,138,7,205,7,139,7,205,7,138,7,205,7,139,7,206,7,140,7,206,7,139,7,206,7,140,7,207,7,141,7,207,7,140,7,207,7,141,7,208,7,142,7,208,7,141,7,208,7,142,7,209,7,143,7,209,7,142,7,209,7,143,7,210,7,144,7,210,7,143,7,210,7,144,7,211,7,145,7,211,7,144,7,211,7,145,7,212,7,146,7,212,7,145,7,212,7,146,7,213,7,147,7,213,7,146,7,213,7,147,7,214,7,148,7,214,7,147,7,214,7,148,7,215,7,149,7,215,7,148,7,215,7,149,7,216,7,150,7,216,7,149,7,216,7,150,7,217,7,151,7,217,7,150,7,217,7,151,7,218,7,152,7,218,7,151,7,218,7,152,7,219,7,153,7,219,7,152,7,219,7,153,7,220,7,154,7,220,7,153,7,220,7,154,7,221,7,155,7,221,7,154,7,221,7,155,7,222,7,156,7,222,7,155,7,222,7,156,7,223,7,157,7,223,7,156,7,223,7,157,7,224,7,158,7,224,7,157,7,224,7,158,7,225,7,159,7,225,7,158,7,225,7,159,7,226,7,160,7,226,7,159,7,226,7,160,7,227,7,161,7,227,7,160,7,227,7,161,7,228,7,162,7,228,7,161,7,228,7,162,7,229,7,163,7,229,7,162,7,229,7,163,7,230,7,164,7,230,7,163,7,230,7,164,7,231,7,165,7,231,7,164,7,231,7,165,7,232,7,166,7,232,7,165,7,232,7,166,7,233,7,167,7,233,7,166,7,233,7,167,7,234,7,168,7,234,7,167,7,234,7,168,7,235,7,169,7,235,7,168,7,235,7,169,7,236,7,170,7,236,7,169,7,236,7,170,7,237,7,171,7,237,7,170,7,237,7,171,7,238,7,172,7,238,7,171,7,238,7,172,7,239,7,173,7,239,7,172,7,239,7,173,7,240,7,174,7,240,7,173,7,240,7,174,7,241,7,175,7,241,7,174,7,241,7,175,7,242,7,176,7,242,7,175,7,242,7,176,7,243,7,177,7,243,7,176,7,243,7,177,7,244,7,178,7,244,7,177,7,244,7,178,7,245,7,179,7,245,7,178,7,245,7,179,7,246,7,180,7,246,7,179,7,246,7,180,7,247,7,181,7,247,7,180,7,247,7,181,7,248,7,182,7,248,7,181,7,248,7,182,7,249,7,183,7,249,7,182,7,249,7,183,7,250,7,184,7,250,7,183,7,250,7,184,7,251,7,185,7,251,7,184,7,251,7,185,7,252,7,186,7,252,7,185,7,252,7,186,7,253,7,187,7,253,7,186,7,254,7,188,7,255,7,189,7,255,7,188,7,255,7,189,7,0,8,190,7,0,8,189,7,0,8,190,7,1,8,191,7,1,8,190,7,1,8,191,7,2,8,192,7,2,8,191,7,2,8,192,7,3,8,193,7,3,8,192,7,3,8,193,7,4,8,194,7,4,8,193,7,4,8,194,7,5,8,195,7,5,8,194,7,5,8,195,7,6,8,196,7,6,8,195,7,6,8,196,7,7,8,197,7,7,8,196,7,7,8,197,7,8,8,198,7,8,8,197,7,8,8,198,7,9,8,199,7,9,8,198,7,9,8,199,7,10,8,200,7,10,8,199,7,10,8,200,7,11,8,201,7,11,8,200,7,11,8,201,7,12,8,202,7,12,8,201,7,12,8,202,7,13,8,203,7,13,8,202,7,13,8,203,7,14,8,204,7,14,8,203,7,14,8,204,7,15,8,205,7,15,8,204,7,15,8,205,7,16,8,206,7,16,8,205,7,16,8,206,7,17,8,207,7,17,8,206,7,17,8,207,7,18,8,208,7,18,8,207,7,18,8,208,7,19,8,209,7,19,8,208,7,19,8,209,7,20,8,210,7,20,8,209,7,20,8,210,7,21,8,211,7,21,8,210,7,21,8,211,7,22,8,212,7,22,8,211,7,22,8,212,7,23,8,213,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+184320);
/* memory initializer */ allocate([23,8,212,7,23,8,213,7,24,8,214,7,24,8,213,7,24,8,214,7,25,8,215,7,25,8,214,7,25,8,215,7,26,8,216,7,26,8,215,7,26,8,216,7,27,8,217,7,27,8,216,7,27,8,217,7,28,8,218,7,28,8,217,7,28,8,218,7,29,8,219,7,29,8,218,7,29,8,219,7,30,8,220,7,30,8,219,7,30,8,220,7,31,8,221,7,31,8,220,7,31,8,221,7,32,8,222,7,32,8,221,7,32,8,222,7,33,8,223,7,33,8,222,7,33,8,223,7,34,8,224,7,34,8,223,7,34,8,224,7,35,8,225,7,35,8,224,7,35,8,225,7,36,8,226,7,36,8,225,7,36,8,226,7,37,8,227,7,37,8,226,7,37,8,227,7,38,8,228,7,38,8,227,7,38,8,228,7,39,8,229,7,39,8,228,7,39,8,229,7,40,8,230,7,40,8,229,7,40,8,230,7,41,8,231,7,41,8,230,7,41,8,231,7,42,8,232,7,42,8,231,7,42,8,232,7,43,8,233,7,43,8,232,7,43,8,233,7,44,8,234,7,44,8,233,7,44,8,234,7,45,8,235,7,45,8,234,7,45,8,235,7,46,8,236,7,46,8,235,7,46,8,236,7,47,8,237,7,47,8,236,7,47,8,237,7,48,8,238,7,48,8,237,7,48,8,238,7,49,8,239,7,49,8,238,7,49,8,239,7,50,8,240,7,50,8,239,7,50,8,240,7,51,8,241,7,51,8,240,7,51,8,241,7,52,8,242,7,52,8,241,7,52,8,242,7,53,8,243,7,53,8,242,7,53,8,243,7,54,8,244,7,54,8,243,7,54,8,244,7,55,8,245,7,55,8,244,7,55,8,245,7,56,8,246,7,56,8,245,7,56,8,246,7,57,8,247,7,57,8,246,7,57,8,247,7,58,8,248,7,58,8,247,7,58,8,248,7,59,8,249,7,59,8,248,7,59,8,249,7,60,8,250,7,60,8,249,7,60,8,250,7,61,8,251,7,61,8,250,7,61,8,251,7,62,8,252,7,62,8,251,7,62,8,252,7,63,8,253,7,63,8,252,7,64,8,254,7,65,8,255,7,65,8,254,7,65,8,255,7,66,8,0,8,66,8,255,7,66,8,0,8,67,8,1,8,67,8,0,8,67,8,1,8,68,8,2,8,68,8,1,8,68,8,2,8,69,8,3,8,69,8,2,8,69,8,3,8,70,8,4,8,70,8,3,8,70,8,4,8,71,8,5,8,71,8,4,8,71,8,5,8,72,8,6,8,72,8,5,8,72,8,6,8,73,8,7,8,73,8,6,8,73,8,7,8,74,8,8,8,74,8,7,8,74,8,8,8,75,8,9,8,75,8,8,8,75,8,9,8,76,8,10,8,76,8,9,8,76,8,10,8,77,8,11,8,77,8,10,8,77,8,11,8,78,8,12,8,78,8,11,8,78,8,12,8,79,8,13,8,79,8,12,8,79,8,13,8,80,8,14,8,80,8,13,8,80,8,14,8,81,8,15,8,81,8,14,8,81,8,15,8,82,8,16,8,82,8,15,8,82,8,16,8,83,8,17,8,83,8,16,8,83,8,17,8,84,8,18,8,84,8,17,8,84,8,18,8,85,8,19,8,85,8,18,8,85,8,19,8,86,8,20,8,86,8,19,8,86,8,20,8,87,8,21,8,87,8,20,8,87,8,21,8,88,8,22,8,88,8,21,8,88,8,22,8,89,8,23,8,89,8,22,8,89,8,23,8,90,8,24,8,90,8,23,8,90,8,24,8,91,8,25,8,91,8,24,8,91,8,25,8,92,8,26,8,92,8,25,8,92,8,26,8,93,8,27,8,93,8,26,8,93,8,27,8,94,8,28,8,94,8,27,8,94,8,28,8,95,8,29,8,95,8,28,8,95,8,29,8,96,8,30,8,96,8,29,8,96,8,30,8,97,8,31,8,97,8,30,8,97,8,31,8,98,8,32,8,98,8,31,8,98,8,32,8,99,8,33,8,99,8,32,8,99,8,33,8,100,8,34,8,100,8,33,8,100,8,34,8,101,8,35,8,101,8,34,8,101,8,35,8,102,8,36,8,102,8,35,8,102,8,36,8,103,8,37,8,103,8,36,8,103,8,37,8,104,8,38,8,104,8,37,8,104,8,38,8,105,8,39,8,105,8,38,8,105,8,39,8,106,8,40,8,106,8,39,8,106,8,40,8,107,8,41,8,107,8,40,8,107,8,41,8,108,8,42,8,108,8,41,8,108,8,42,8,109,8,43,8,109,8,42,8,109,8,43,8,110,8,44,8,110,8,43,8,110,8,44,8,111,8,45,8,111,8,44,8,111,8,45,8,112,8,46,8,112,8,45,8,112,8,46,8,113,8,47,8,113,8,46,8,113,8,47,8,114,8,48,8,114,8,47,8,114,8,48,8,115,8,49,8,115,8,48,8,115,8,49,8,116,8,50,8,116,8,49,8,116,8,50,8,117,8,51,8,117,8,50,8,117,8,51,8,118,8,52,8,118,8,51,8,118,8,52,8,119,8,53,8,119,8,52,8,119,8,53,8,120,8,54,8,120,8,53,8,120,8,54,8,121,8,55,8,121,8,54,8,121,8,55,8,122,8,56,8,122,8,55,8,122,8,56,8,123,8,57,8,123,8,56,8,123,8,57,8,124,8,58,8,124,8,57,8,124,8,58,8,125,8,59,8,125,8,58,8,125,8,59,8,126,8,60,8,126,8,59,8,126,8,60,8,127,8,61,8,127,8,60,8,127,8,61,8,128,8,62,8,128,8,61,8,128,8,62,8,129,8,63,8,129,8,62,8,130,8,64,8,131,8,65,8,131,8,64,8,131,8,65,8,132,8,66,8,132,8,65,8,132,8,66,8,133,8,67,8,133,8,66,8,133,8,67,8,134,8,68,8,134,8,67,8,134,8,68,8,135,8,69,8,135,8,68,8,135,8,69,8,136,8,70,8,136,8,69,8,136,8,70,8,137,8,71,8,137,8,70,8,137,8,71,8,138,8,72,8,138,8,71,8,138,8,72,8,139,8,73,8,139,8,72,8,139,8,73,8,140,8,74,8,140,8,73,8,140,8,74,8,141,8,75,8,141,8,74,8,141,8,75,8,142,8,76,8,142,8,75,8,142,8,76,8,143,8,77,8,143,8,76,8,143,8,77,8,144,8,78,8,144,8,77,8,144,8,78,8,145,8,79,8,145,8,78,8,145,8,79,8,146,8,80,8,146,8,79,8,146,8,80,8,147,8,81,8,147,8,80,8,147,8,81,8,148,8,82,8,148,8,81,8,148,8,82,8,149,8,83,8,149,8,82,8,149,8,83,8,150,8,84,8,150,8,83,8,150,8,84,8,151,8,85,8,151,8,84,8,151,8,85,8,152,8,86,8,152,8,85,8,152,8,86,8,153,8,87,8,153,8,86,8,153,8,87,8,154,8,88,8,154,8,87,8,154,8,88,8,155,8,89,8,155,8,88,8,155,8,89,8,156,8,90,8,156,8,89,8,156,8,90,8,157,8,91,8,157,8,90,8,157,8,91,8,158,8,92,8,158,8,91,8,158,8,92,8,159,8,93,8,159,8,92,8,159,8,93,8,160,8,94,8,160,8,93,8,160,8,94,8,161,8,95,8,161,8,94,8,161,8,95,8,162,8,96,8,162,8,95,8,162,8,96,8,163,8,97,8,163,8,96,8,163,8,97,8,164,8,98,8,164,8,97,8,164,8,98,8,165,8,99,8,165,8,98,8,165,8,99,8,166,8,100,8,166,8,99,8,166,8,100,8,167,8,101,8,167,8,100,8,167,8,101,8,168,8,102,8,168,8,101,8,168,8,102,8,169,8,103,8,169,8,102,8,169,8,103,8,170,8,104,8,170,8,103,8,170,8,104,8,171,8,105,8,171,8,104,8,171,8,105,8,172,8,106,8,172,8,105,8,172,8,106,8,173,8,107,8,173,8,106,8,173,8,107,8,174,8,108,8,174,8,107,8,174,8,108,8,175,8,109,8,175,8,108,8,175,8,109,8,176,8,110,8,176,8,109,8,176,8,110,8,177,8,111,8,177,8,110,8,177,8,111,8,178,8,112,8,178,8,111,8,178,8,112,8,179,8,113,8,179,8,112,8,179,8,113,8,180,8,114,8,180,8,113,8,180,8,114,8,181,8,115,8,181,8,114,8,181,8,115,8,182,8,116,8,182,8,115,8,182,8,116,8,183,8,117,8,183,8,116,8,183,8,117,8,184,8,118,8,184,8,117,8,184,8,118,8,185,8,119,8,185,8,118,8,185,8,119,8,186,8,120,8,186,8,119,8,186,8,120,8,187,8,121,8,187,8,120,8,187,8,121,8,188,8,122,8,188,8,121,8,188,8,122,8,189,8,123,8,189,8,122,8,189,8,123,8,190,8,124,8,190,8,123,8,190,8,124,8,191,8,125,8,191,8,124,8,191,8,125,8,192,8,126,8,192,8,125,8,192,8,126,8,193,8,127,8,193,8,126,8,193,8,127,8,194,8,128,8,194,8,127,8,194,8,128,8,195,8,129,8,195,8,128,8,0,0,0,0,0,0,122,195,167,92,180,64,16,24,118,67,0,0,122,195,220,215,1,65,0,0,122,67,16,24,118,195,73,17,226,64,16,24,118,67,16,24,118,195,253,164,27,65,0,0,122,67,33,48,114,195,185,141,29,65,16,24,118,67,33,48,114,195,68,139,58,65,0,0,122,67,240,71,110,195,71,114,77,65,16,24,118,67,240,71,110,195,139,253,72,65,0,0,122,67,0,96,106,195,112,206,95,65,16,24,118,67,0,96,106,195,147,58,79,65,0,0,122,67,16,120,102,195,24,149,123,65,16,24,118,67,16,120,102,195,97,50,114,65,0,0,122,67,33,144,98,195,117,19,140,65,16,24,118,67,33,144,98,195,57,86,136,65,0,0,122,67,240,167,94,195,37,117,147,65,16,24,118,67,240,167,94,195,105,239,143,65,0,0,122,67,0,192,90,195,160,154,152,65,16,24,118,67,0,192,90,195,155,85,150,65,0,0,122,67,16,216,86,195,179,106,159,65,16,24,118,67,16,216,86,195,64,147,156,65,0,0,122,67,33,240,82,195,146,203,157,65,16,24,118,67,33,240,82,195,91,177,160,65,0,0,122,67,240,7,79,195,214,197,151,65,16,24,118,67,240,7,79,195,146,75,158,65,0,0,122,67,0,32,75,195,160,137,153,65,16,24,118,67,0,32,75,195,17,54,160,65,0,0,122,67,16,56,71,195,7,206,142,65,16,24,118,67,16,56,71,195,203,144,154,65,0,0,122,67,33,80,67,195,217,206,115,65,16,24,118,67,33,80,67,195,249,49,144,65,0,0,122,67,240,103,63,195,225,11,107,65,16,24,118,67,240,103,63,195,232,89,130,65,0,0,122,67,0,128,59,195,79,175,79,65,16,24,118,67,0,128,59,195,241,99,111,65,0,0,122,67,16,152,55,195,213,120,58,65,16,24,118,67,16,152,55,195,125,174,74,65,0,0,122,67,33,176,51,195,220,104,71,65,16,24,118,67,33,176,51,195,60,189,90,65,0,0,122,67,240,199,47,195,250,237,81,65,16,24,118,67,240,199,47,195,206,170,104,65,0,0,122,67,0,224,43,195,207,247,84,65,16,24,118,67,0,224,43,195,192,91,126,65,0,0,122,67,16,248,39,195,208,68,87,65,16,24,118,67,16,248,39,195,244,108,127,65,0,0,122,67,33,16,36,195,63,53,87,65,16,24,118,67,33,16,36,195,187,184,119,65,0,0,122,67,240,39,32,195,46,255,106,65,16,24,118,67,240,39,32,195,177,191,113,65,0,0,122,67,0,64,28,195,200,152,98,65,16,24,118,67,0,64,28,195,139,253,108,65,0,0,122,67,16,88,24,195,119,45,96,65,16,24,118,67,16,88,24,195,93,109,102,65,0,0,122,67,33,112,20,195,239,56,83,65,16,24,118,67,33,112,20,195,101,170,100,65,0,0,122,67,240,135,16,195,245,219,77,65,16,24,118,67,240,135,16,195,147,24,89,65,0,0,122,67,0,160,12,195,236,192,82,65,16,24,118,67,0,160,12,195,85,193,100,65,0,0,122,67,16,184,8,195,153,42,79,65,16,24,118,67,16,184,8,195,199,41,113,65,0,0,122,67,33,208,4,195,236,192,86,65,16,24,118,67,33,208,4,195,231,140,104,65,0,0,122,67,240,231,0,195,19,97,97,65,16,24,118,67,240,231,0,195,152,110,123,65,0,0,122,67,0,0,250,194,45,178,87,65,16,24,118,67,0,0,250,194,112,95,119,65,0,0,122,67,33,48,242,194,253,246,73,65,16,24,118,67,33,48,242,194,161,248,114,65,0,0,122,67,66,96,234,194,53,239,64,65,16,24,118,67,66,96,234,194,160,26,119,65,0,0,122,67,223,143,226,194,16,122,75,65,16,24,118,67,223,143,226,194,17,54,126,65,0,0,122,67,0,192,218,194,200,152,69,65,16,24,118,67,0,192,218,194,159,60,115,65,0,0,122,67,33,240,210,194,51,51,80,65,16,24,118,67,33,240,210,194,146,203,114,65,0,0,122,67,66,32,203,194,159,60,91,65,16,24,118,67,66,32,203,194,151,255,107,65,0,0,122,67,7,80,195,194,18,20,97,65,16,24,118,67,7,80,195,194,234,149,113,65,0,0,122,67,0,128,187,194,204,127,93,65,16,24,118,67,0,128,187,194,125,174,106,65,0,0,122,67,7,176,179,194,138,31,106,65,16,24,118,67,7,176,179,194,118,113,98,65,0,0,122,67,0,224,171,194,224,190,84,65,16,24,118,67,0,224,171,194,237,158,96,65,0,0,122,67,7,16,164,194,77,243,76,65,16,24,118,67,7,16,164,194,37,117,92,65,0,0,122,67,0,64,156,194,66,207,60,65,16,24,118,67,0,64,156,194,147,24,81,65,0,0,122,67,7,112,148,194,111,240,58,65,16,24,118,67,7,112,148,194,170,96,77,65,0,0,122,67,0,160,140,194,136,133,48,65,16,24,118,67,0,160,140,194,112,206,69,65,0,0,122,67,7,208,132,194,186,73,62,65,16,24,118,67,7,208,132,194,237,13,51,65,0,0,122,67,0,0,122,194,180,89,42,65,16,24,118,67,0,0,122,194,227,223,30,65,0,0,122,67,13,96,106,194,142,216,8,65,16,24,118,67,13,96,106,194,144,49,14,65,0,0,122,67,0,192,90,194,245,74,227,64,16,24,118,67,0,192,90,194,177,225,239,64,0,0,122,67,13,32,75,194,193,57,223,64,16,24,118,67,13,32,75,194,164,165,199,64,0,0,122,67,0,128,59,194,159,113,255,64,16,24,118,67,0,128,59,194,42,116,220,64,0,0,122,67,13,224,43,194,64,217,17,65,16,24,118,67,13,224,43,194,208,97,233,64,0,0,122,67,0,64,28,194,81,230,11,65,16,24,118,67,0,64,28,194,144,136,220,64,0,0,122,67,13,160,12,194,217,206,238,64,16,24,118,67,13,160,12,194,135,22,213,64,0,0,122,67,0,0,250,193,236,163,245,64,16,24,118,67,0,0,250,193,24,33,216,64,0,0,122,67,26,192,218,193,220,41,224,64,16,24,118,67,26,192,218,193,189,251,196,64,0,0,122,67,0,128,187,193,144,107,180,64,16,24,118,67,0,128,187,193,157,70,183,64,0,0,122,67,26,64,156,193,159,205,163,64,16,24,118,67,26,64,156,193,87,67,128,64,0,0,122,67,0,0,122,193,160,108,102,64,16,24,118,67,0,0,122,193,43,77,96,64,0,0,122,67,52,128,59,193,177,109,67,64,16,24,118,67,52,128,59,193,75,89,70,64,0,0,122,67,0,0,250,192,69,216,30,64,16,24,118,67,0,0,250,192,41,121,29,64,0,0,122,67,0,0,122,192,124,126,216,63,16,24,118,67,0,0,122,192,100,59,35,64,0,0,122,67,0,0,0,0,23,159,146,63,16,24,118,67,0,0,0,0,16,146,11,64,0,0,122,67,0,0,122,64,210,227,231,62,16,24,118,67,0,0,122,64,82,242,194,63,0,0,122,67,0,0,122,195,167,232,166,64,33,48,114,67,16,24,118,195,15,69,235,64,33,48,114,67,33,48,114,195,135,167,35,65,33,48,114,67,240,71,110,195,77,21,76,65,33,48,114,67,0,96,106,195,165,78,101,65,33,48,114,67,16,120,102,195,13,224,130,65,33,48,114,67,33,144,98,195,163,146,142,65,33,48,114,67,240,167,94,195,190,65,148,65,33,48,114,67,0,192,90,195,249,15,150,65,33,48,114,67,16,216,86,195,49,8,156,65,33,48,114,67,33,240,82,195,160,137,151,65,33,48,114,67,240,7,79,195,26,209,143,65,33,48,114,67,0,32,75,195,8,61,138,65,33,48,114,67,16,56,71,195,107,154,115,65,33,48,114,67,33,80,67,195,200,7,94,65,33,48,114,67,240,103,63,195,148,246,77,65,33,48,114,67,0,128,59,195,163,146,60,65,33,48,114,67,16,152,55,195,78,209,71,65,33,48,114,67,33,176,51,195,208,179,79,65,33,48,114,67,240,199,47,195,139,108,88,65,33,48,114,67,0,224,43,195,99,238,92,65,33,48,114,67,16,248,39,195,130,115,93,65,33,48,114,67,33,16,36,195,44,101,89,65,33,48,114,67,240,39,32,195,91,66,93,65,33,48,114,67,0,64,28,195,171,62,89,65,33,48,114,67,16,88,24,195,166,10,80,65,33,48,114,67,33,112,20,195,176,3,74,65,33,48,114,67,240,135,16,195,50,119,71,65,33,48,114,67,0,160,12,195,221,36,74,65,33,48,114,67,16,184,8,195,41,203,66,65,33,48,114,67,33,208,4,195,178,157,60,65,33,48,114,67,240,231,0,195,45,67,55,65,33,48,114,67,0,0,250,194,104,34,48,65,33,48,114,67,33,48,242,194,0,111,34,65,33,48,114,67,66,96,234,194,224,156,41,65,33,48,114,67,223,143,226,194,63,87,35,65,33,48,114,67,0,192,218,194,231,140,48,65,33,48,114,67,33,240,210,194,60,78,50,65,33,48,114,67,66,32,203,194,155,85,70,65,33,48,114,67,7,80,195,194,60,189,85,65,33,48,114,67,0,128,187,194,47,221,99,65,33,48,114,67,7,176,179,194,196,177,95,65,33,48,114,67,0,224,171,194,217,61,85,65,33,48,114,67,7,16,164,194,34,108,63,65,33,48,114,67,0,64,156,194,124,97,57,65,33,48,114,67,7,112,148,194,36,185,59,65,33,48,114,67,0,160,140,194,220,215,56,65,33,48,114,67,7,208,132,194,28,235,69,65,33,48,114,67,0,0,122,194,104,34,51,65,33,48,114,67,13,96,106,194,64,152,25,65,33,48,114,67,0,192,90,194,208,56,6,65,33,48,114,67,13,32,75,194,219,162,237,64,33,48,114,67,0,128,59,194,48,141,5,65,33,48,114,67,13,224,43,194,134,56,27,65,33,48,114,67,0,64,28,194,246,180,17,65,33,48,114,67,13,160,12,194,243,241,3,65,33,48,114,67,0,0,250,193,161,16,1,65,33,48,114,67,26,192,218,193,160,137,223,64,33,48,114,67,0,128,187,193,114,109,220,64,33,48,114,67,26,64,156,193,111,47,188,64,33,48,114,67,0,0,122,193,175,206,141,64,33,48,114,67,52,128,59,193,184,35,106,64,33,48,114,67,0,0,250,192,245,214,54,64,33,48,114,67,0,0,122,192,76,166,234,63,33,48,114,67,0,0,0,0,156,138,2,64,33,48,114,67,0,0,122,64,152,192,13,64,33,48,114,67,0,0,122,195,105,58,174,64,240,71,110,67,16,24,118,195,77,21,253,64,240,71,110,67,33,48,114,195,184,64,38,65,240,71,110,67,240,71,110,195,0,0,78,65,240,71,110,67,0,96,106,195,63,53,109,65,240,71,110,67,16,120,102,195,189,82,132,65,240,71,110,67,33,144,98,195,185,124,142,65,240,71,110,67,240,167,94,195,252,41,152,65,240,71,110,67,0,192,90,195,80,13,150,65,240,71,110,67,16,216,86,195,177,225,151,65,240,71,110,67,33,240,82,195,157,0,147,65,240,71,110,67,240,7,79,195,148,118,133,65,240,71,110,67,0,32,75,195,90,245,124,65,240,71,110,67,16,56,71,195,252,169,84,65,240,71,110,67,33,80,67,195,233,38,87,65,240,71,110,67,240,103,63,195,185,141,89,65,240,71,110,67,0,128,59,195,87,91,66,65,240,71,110,67,16,152,55,195,76,166,85,65,240,71,110,67,33,176,51,195,58,146,103,65,240,71,110,67,240,199,47,195,93,109,112,65,240,71,110,67,0,224,43,195,46,144,108,65,240,71,110,67,16,248,39,195,45,33,121,65,240,71,110,67,33,16,36,195,162,69,100,65,240,71,110,67,240,39,32,195,54,60,97,65,240,71,110,67,0,64,28,195,170,241,71,65,240,71,110,67,16,88,24,195,87,91,66,65,240,71,110,67,33,112,20,195,167,232,61,65,240,71,110,67,240,135,16,195,213,120,52,65,240,71,110,67,0,160,12,195,169,19,45,65,240,71,110,67,16,184,8,195,8,172,44,65,240,71,110,67,33,208,4,195,209,145,45,65,240,71,110,67,240,231,0,195,54,89,31,65,240,71,110,67,0,0,250,194,197,143,33,65,240,71,110,67,33,48,242,194,58,233,11,65,240,71,110,67,66,96,234,194,78,209,18,65,240,71,110,67,223,143,226,194,51,196,35,65,240,71,110,67,0,192,218,194,159,60,43,65,240,71,110,67,33,240,210,194,181,55,58,65,240,71,110,67,66,32,203,194,96,118,76,65,240,71,110,67,7,80,195,194,199,75,95,65,240,71,110,67,0,128,187,194,248,194,97,65,240,71,110,67,7,176,179,194,171,62,84,65,240,71,110,67,0,224,171,194,0,145,66,65,240,71,110,67,7,16,164,194,249,15,59,65,240,71,110,67,0,64,156,194,250,237,53,65,240,71,110,67,7,112,148,194,131,81,66,65,240,71,110,67,0,160,140,194,29,56,71,65,240,71,110,67,7,208,132,194,48,76,74,65,240,71,110,67,0,0,122,194,11,181,58,65,240,71,110,67,13,96,106,194,82,73,45,65,240,71,110,67,0,192,90,194,244,26,14,65,240,71,110,67,13,32,75,194,137,94,254,64,240,71,110,67,0,128,59,194,160,154,7,65,240,71,110,67,13,224,43,194,239,102,17,65,240,71,110,67,0,64,28,194,13,96,19,65,240,71,110,67,13,160,12,194,115,17,18,65,240,71,110,67,0,0,250,193,195,211,8,65,240,71,110,67,26,192,218,193,21,145,251,64,240,71,110,67,0,128,187,193,151,197,234,64,240,71,110,67,26,64,156,193,46,4,204,64,240,71,110,67,0,0,122,193,210,251,178,64,240,71,110,67,52,128,59,193,152,47,154,64,240,71,110,67,0,0,250,192,34,108,139,64,240,71,110,67,0,0,122,192,208,15,105,64,240,71,110,67,0,0,0,0,63,0,109,64,240,71,110,67,0,0,122,64,62,208,66,64,240,71,110,67,0,0,122,195,28,182,189,64,0,96,106,67,16,24,118,195,222,171,1,65,0,96,106,67,33,48,114,195,39,160,37,65,0,96,106,67,240,71,110,195,114,249,71,65,0,96,106,67,0,96,106,195,234,149,113,65,0,96,106,67,16,120,102,195,105,0,128,65,0,96,106,67,33,144,98,195,104,17,138,65,0,96,106,67,240,167,94,195,74,123,145,65,0,96,106,67,0,192,90,195,177,63,150,65,0,96,106,67,16,216,86,195,221,181,147,65,0,96,106,67,33,240,82,195,108,137,146,65,0,96,106,67,240,7,79,195,53,222,128,65,0,96,106,67,0,32,75,195,228,20,115,65,0,96,106,67,16,56,71,195,1,222,98,65,0,96,106,67,33,80,67,195,65,241,88,65,0,96,106,67,240,103,63,195,173,250,94,65,0,96,106,67,0,128,59,195,23,217,84,65,0,96,106,67,16,152,55,195,46,144,90,65,0,96,106,67,33,176,51,195,211,188,113,65,0,96,106,67,240,199,47,195,65,130,121,65,0,96,106,67,0,224,43,195,93,220,117,65,0,96,106,67,16,248,39,195,217,95,111,65,0,96,106,67,33,16,36,195,35,219,102,65,0,96,106,67,240,39,32,195,130,115,98,65,0,96,106,67,0,64,28,195,239,56,80,65,0,96,106,67,16,88,24,195,161,103,58,65,0,96,106,67,33,112,20,195,122,199,57,65,0,96,106,67,240,135,16,195,85,193,49,65,0,96,106,67,0,160,12,195,83,5,46,65,0,96,106,67,16,184,8,195,174,182,35,65,0,96,106,67,33,208,4,195,79,105,27,65,0,96,106,67,240,231,0,195,188,179,16,65,0,96,106,67,0,0,250,194,21,145,24,65,0,96,106,67,33,48,242,194,217,153,1,65,0,96,106,67,66,96,234,194,49,182,18,65,0,96,106,67,223,143,226,194,18,218,26,65,0,96,106,67,0,192,218,194,82,73,36,65,0,96,106,67,33,240,210,194,108,120,47,65,0,96,106,67,66,32,203,194,11,181,68,65,0,96,106,67,7,80,195,194,36,185,84,65,0,96,106,67,0,128,187,194,191,125,81,65,0,96,106,67,7,176,179,194,239,56,71,65,0,96,106,67,0,224,171,194,254,212,67,65,0,96,106,67,7,16,164,194,249,49,60,65,0,96,106,67,0,64,156,194,50,119,63,65,0,96,106,67,7,112,148,194,236,192,67,65,0,96,106,67,0,160,140,194,5,163,82,65,0,96,106,67,7,208,132,194,147,24,88,65,0,96,106,67,0,0,122,194,57,214,82,65,0,96,106,67,13,96,106,194,54,171,62,65,0,96,106,67,0,192,90,194,50,85,32,65,0,96,106,67,13,32,75,194,158,82,17,65,0,96,106,67,0,128,59,194,179,12,7,65,0,96,106,67,13,224,43,194,4,103,20,65,0,96,106,67,0,64,28,194,151,144,35,65,0,96,106,67,13,160,12,194,123,107,28,65,0,96,106,67,0,0,250,193,242,222,18,65,0,96,106,67,26,192,218,193,210,82,13,65,0,96,106,67,0,128,187,193,138,14,0,65,0,96,106,67,26,64,156,193,184,228,235,64,0,96,106,67,0,0,122,193,198,249,219,64,0,96,106,67,52,128,59,193,151,173,199,64,0,96,106,67,0,0,250,192,131,52,176,64,0,96,106,67,0,0,122,192,64,48,162,64,0,96,106,67,0,0,0,0,211,48,162,64,0,96,106,67,0,0,122,64,20,34,166,64,0,96,106,67,0,0,122,195,222,113,159,64,16,120,102,67,16,24,118,195,147,24,252,64,16,120,102,67,33,48,114,195,104,179,46,65,16,120,102,67,240,71,110,195,172,173,77,65,16,120,102,67,0,96,106,195,192,236,104,65,16,120,102,67,16,120,102,195,55,137,128,65,16,120,102,67,33,144,98,195,77,243,143,65,16,120,102,67,240,167,94,195,91,194,146,65,16,120,102,67,0,192,90,195,213,137,147,65,16,120,102,67,16,216,86,195,95,135,151,65,16,120,102,67,33,240,82,195,59,129,138,65,16,120,102,67,240,7,79,195,103,68,117,65,16,120,102,67,0,32,75,195,222,113,120,65,16,120,102,67,16,56,71,195,33,31,111,65,16,120,102,67,33,80,67,195,115,215,92,65,16,120,102,67,240,103,63,195,160,137,82,65,16,120,102,67,0,128,59,195,83,5,87,65,16,120,102,67,16,152,55,195,114,138,99,65,16,120,102,67,33,176,51,195,18,131,110,65,16,120,102,67,240,199,47,195,8,172,115,65,16,120,102,67,0,224,43,195,238,235,109,65,16,120,102,67,16,248,39,195,147,58,98,65,16,120,102,67,33,16,36,195,194,134,92,65,16,120,102,67,240,39,32,195,127,251,80,65,16,120,102,67,0,64,28,195,50,119,69,65,16,120,102,67,16,88,24,195,234,149,56,65,16,120,102,67,33,112,20,195,84,82,56,65,16,120,102,67,240,135,16,195,3,120,49,65,16,120,102,67,0,160,12,195,88,57,50,65,16,120,102,67,16,184,8,195,132,158,32,65,16,120,102,67,33,208,4,195,178,116,9,65,16,120,102,67,240,231,0,195,123,247,246,64,16,120,102,67,0,0,250,194,216,42,238,64,16,120,102,67,33,48,242,194,226,187,2,65,16,120,102,67,66,96,234,194,185,112,5,65,16,120,102,67,223,143,226,194,11,140,19,65,16,120,102,67,0,192,218,194,18,131,35,65,16,120,102,67,33,240,210,194,53,94,56,65,16,120,102,67,66,32,203,194,140,219,75,65,16,120,102,67,7,80,195,194,235,226,75,65,16,120,102,67,0,128,187,194,155,85,70,65,16,120,102,67,7,176,179,194,43,24,60,65,16,120,102,67,0,224,171,194,211,222,37,65,16,120,102,67,7,16,164,194,236,81,33,65,16,120,102,67,0,64,156,194,33,31,55,65,16,120,102,67,7,112,148,194,143,194,67,65,16,120,102,67,0,160,140,194,39,160,89,65,16,120,102,67,7,208,132,194,49,8,102,65,16,120,102,67,0,0,122,194,213,120,95,65,16,120,102,67,13,96,106,194,193,202,77,65,16,120,102,67,0,192,90,194,231,140,55,65,16,120,102,67,13,32,75,194,165,230,31,65,16,120,102,67,0,128,59,194,98,4,11,65,16,120,102,67,13,224,43,194,161,243,22,65,16,120,102,67,0,64,28,194,102,136,39,65,16,120,102,67,13,160,12,194,103,213,48,65,16,120,102,67,0,0,250,193,229,97,41,65,16,120,102,67,26,192,218,193,97,84,45,65,16,120,102,67,0,128,187,193,191,96,31,65,16,120,102,67,26,64,156,193,191,195,9,65,16,120,102,67,0,0,122,193,251,145,237,64,16,120,102,67,52,128,59,193,28,211,205,64,16,120,102,67,0,0,250,192,152,192,203,64,16,120,102,67,0,0,122,192,111,211,208,64,16,120,102,67,0,0,0,0,194,250,197,64,16,120,102,67,0,0,122,64,236,81,188,64,16,120,102,67,0,0,122,195,60,131,157,64,33,144,98,67,16,24,118,195,148,176,10,65,33,144,98,67,33,48,114,195,141,40,60,65,33,144,98,67,240,71,110,195,148,135,90,65,33,144,98,67,0,96,106,195,32,65,122,65,33,144,98,67,16,120,102,195,91,83,134,65,33,144,98,67,33,144,98,195,79,175,139,65,33,144,98,67,240,167,94,195,112,223,147,65,33,144,98,67,0,192,90,195,212,154,147,65,33,144,98,67,16,216,86,195,177,191,140,65,33,144,98,67,33,240,82,195,184,192,132,65,33,144,98,67,240,7,79,195,135,22,110,65,33,144,98,67,0,32,75,195,34,253,117,65,33,144,98,67,16,56,71,195,85,48,119,65,33,144,98,67,33,80,67,195,94,75,104,65,33,144,98,67,240,103,63,195,35,219,78,65,33,144,98,67,0,128,59,195,159,60,86,65,33,144,98,67,16,152,55,195,163,146,96,65,33,144,98,67,33,176,51,195,73,157,116,65,33,144,98,67,240,199,47,195,80,141,111,65,33,144,98,67,0,224,43,195,156,196,99,65,33,144,98,67,16,248,39,195,140,219,90,65,33,144,98,67,33,16,36,195,205,59,81,65,33,144,98,67,240,39,32,195,61,155,76,65,33,144,98,67,0,64,28,195,144,160,71,65,33,144,98,67,16,88,24,195,230,63,56,65,33,144,98,67,33,112,20,195,143,194,50,65,33,144,98,67,240,135,16,195,190,48,46,65,33,144,98,67,0,160,12,195,108,91,28,65,33,144,98,67,16,184,8,195,210,29,12,65,33,144,98,67,33,208,4,195,152,221,216,64,33,144,98,67,240,231,0,195,0,58,203,64,33,144,98,67,0,0,250,194,6,42,211,64,33,144,98,67,33,48,242,194,176,3,250,64,33,144,98,67,66,96,234,194,203,156,1,65,33,144,98,67,223,143,226,194,176,56,17,65,33,144,98,67,0,192,218,194,147,169,35,65,33,144,98,67,33,240,210,194,21,140,56,65,33,144,98,67,66,32,203,194,144,160,78,65,33,144,98,67,7,80,195,194,102,247,77,65,33,144,98,67,0,128,187,194,213,9,77,65,33,144,98,67,7,176,179,194,62,121,47,65,33,144,98,67,0,224,171,194,213,9,33,65,33,144,98,67,7,16,164,194,95,123,20,65,33,144,98,67,0,64,156,194,79,30,34,65,33,144,98,67,7,112,148,194,32,210,61,65,33,144,98,67,0,160,140,194,91,211,73,65,33,144,98,67,7,208,132,194,43,246,90,65,33,144,98,67,0,0,122,194,188,5,95,65,33,144,98,67,13,96,106,194,42,169,88,65,33,144,98,67,0,192,90,194,88,202,71,65,33,144,98,67,13,32,75,194,59,112,52,65,33,144,98,67,0,128,59,194,73,157,41,65,33,144,98,67,13,224,43,194,14,190,55,65,33,144,98,67,0,64,28,194,30,167,72,65,33,144,98,67,13,160,12,194,16,233,77,65,33,144,98,67,0,0,250,193,161,103,72,65,33,144,98,67,26,192,218,193,234,4,67,65,33,144,98,67,0,128,187,193,209,145,56,65,33,144,98,67,26,64,156,193,17,129,24,65,33,144,98,67,0,0,122,193,15,197,4,65,33,144,98,67,52,128,59,193,174,71,236,64,33,144,98,67,0,0,250,192,42,111,242,64,33,144,98,67,0,0,122,192,128,43,237,64,33,144,98,67,0,0,0,0,167,121,223,64,33,144,98,67,0,0,122,64,192,178,220,64,33,144,98,67,0,0,122,195,179,94,149,64,240,167,94,67,16,24,118,195,34,195,252,64,240,167,94,67,33,48,114,195,112,206,45,65,240,167,94,67,240,71,110,195,219,249,97,65,240,167,94,67,0,96,106,195,2,154,121,65,240,167,94,67,16,120,102,195,17,71,136,65,240,167,94,67,33,144,98,195,201,229,139,65,240,167,94,67,240,167,94,195,244,236,140,65,240,167,94,67,0,192,90,195,6,146,134,65,240,167,94,67,16,216,86,195,196,66,131,65,240,167,94,67,33,240,82,195,39,49,113,65,240,167,94,67,240,7,79,195,147,169,100,65,240,167,94,67,0,32,75,195,26,192,105,65,240,167,94,67,16,56,71,195,81,107,103,65,240,167,94,67,33,80,67,195,140,74,97,65,240,167,94,67,240,103,63,195,94,75,71,65,240,167,94,67,0,128,59,195,83,150,80,65,240,167,94,67,16,152,55,195,154,153,95,65,240,167,94,67,33,176,51,195,254,212,108,65,240,167,94,67,240,199,47,195,254,212,105,65,240,167,94,67,0,224,43,195,163,146,87,65,240,167,94,67,16,248,39,195,127,106,85,65,240,167,94,67,33,16,36,195,55,137,91,65,240,167,94,67,240,39,32,195,113,61,73,65,240,167,94,67,0,64,28,195,90,100,63,65,240,167,94,67,16,88,24,195,13,224,51,65,240,167,94,67,33,112,20,195,100,59,45,65,240,167,94,67,240,135,16,195,138,142,36,65,240,167,94,67,0,160,12,195,247,88,7,65,240,167,94,67,16,184,8,195,38,25,247,64,240,167,94,67,33,208,4,195,206,136,199,64,240,167,94,67,240,231,0,195,21,82,182,64,240,167,94,67,0,0,250,194,117,147,201,64,240,167,94,67,33,48,242,194,7,95,230,64,240,167,94,67,66,96,234,194,19,44,242,64,240,167,94,67,223,143,226,194,46,16,14,65,240,167,94,67,0,192,218,194,177,196,30,65,240,167,94,67,33,240,210,194,110,52,36,65,240,167,94,67,66,32,203,194,254,212,54,65,240,167,94,67,7,80,195,194,184,175,68,65,240,167,94,67,0,128,187,194,153,187,57,65,240,167,94,67,7,176,179,194,6,129,57,65,240,167,94,67,0,224,171,194,91,177,34,65,240,167,94,67,7,16,164,194,169,164,38,65,240,167,94,67,0,64,156,194,113,61,44,65,240,167,94,67,7,112,148,194,99,127,56,65,240,167,94,67,0,160,140,194,129,4,78,65,240,167,94,67,7,208,132,194,6,18,110,65,240,167,94,67,0,0,122,194,224,190,123,65,240,167,94,67,13,96,106,194,146,92,113,65,240,167,94,67,0,192,90,194,231,140,103,65,240,167,94,67,13,32,75,194,213,9,91,65,240,167,94,67,0,128,59,194,226,88,81,65,240,167,94,67,13,224,43,194,196,177,81,65,240,167,94,67,0,64,28,194,62,232,95,65,240,167,94,67,13,160,12,194,5,52,94,65,240,167,94,67,0,0,250,193,157,17,98,65,240,167,94,67,26,192,218,193,166,10,90,65,240,167,94,67,0,128,187,193,148,135,67,65,240,167,94,67,26,64,156,193,209,145,45,65,240,167,94,67,0,0,122,193,11,99,27,65,240,167,94,67,52,128,59,193,31,75,8,65,240,167,94,67,0,0,250,192,16,175,16,65,240,167,94,67,0,0,122,192,87,132,7,65,240,167,94,67,0,0,0,0,206,42,4,65,240,167,94,67,0,0,122,64,28,8,218,64,240,167,94,67,0,0,122,195,84,111,165,64,0,192,90,67,16,24,118,195,195,182,212,64,0,192,90,67,33,48,114,195,123,8,24,65,0,192,90,67,240,71,110,195,27,47,72,65,0,192,90,67,0,96,106,195,125,208,124,65,0,192,90,67,16,120,102,195,68,233,140,65,0,192,90,67,33,144,98,195,37,6,145,65,0,192,90,67,240,167,94,195,34,125,138,65,0,192,90,67,0,192,90,195,107,43,131,65,0,192,90,67,16,216,86,195,45,50,128,65,0,192,90,67,33,240,82,195,231,140,104,65,0,192,90,67,240,7,79,195,104,34,87,65,0,192,90,67,0,32,75,195,19,97,86,65,0,192,90,67,16,56,71,195,221,181,88,65,0,192,90,67,33,80,67,195,36,40,67,65,0,192,90,67,240,103,63,195,214,86,61,65,0,192,90,67,0,128,59,195,220,215,84,65,0,192,90,67,16,152,55,195,70,148,84,65,0,192,90,67,33,176,51,195,100,59,105,65,0,192,90,67,240,199,47,195,50,230,102,65,0,192,90,67,0,224,43,195,109,231,84,65,0,192,90,67,16,248,39,195,146,92,100,65,0,192,90,67,33,16,36,195,208,213,104,65,0,192,90,67,240,39,32,195,251,58,93,65,0,192,90,67,0,64,28,195,63,198,70,65,0,192,90,67,16,88,24,195,86,14,40,65,0,192,90,67,33,112,20,195,145,114,26,65,0,192,90,67,240,135,16,195,62,232,5,65,0,192,90,67,0,160,12,195,81,189,236,64,0,192,90,67,16,184,8,195,165,73,201,64,0,192,90,67,33,208,4,195,122,223,171,64,0,192,90,67,240,231,0,195,85,77,169,64,0,192,90,67,0,0,250,194,76,26,179,64,0,192,90,67,33,48,242,194,229,237,196,64,0,192,90,67,66,96,234,194,215,18,229,64,0,192,90,67,223,143,226,194,162,81,1,65,0,192,90,67,0,192,218,194,128,171,15,65,0,192,90,67,33,240,210,194,146,191,26,65,0,192,90,67,66,32,203,194,124,97,44,65,0,192,90,67,7,80,195,194,66,207,54,65,0,192,90,67,0,128,187,194,179,12,59,65,0,192,90,67,7,176,179,194,66,62,55,65,0,192,90,67,0,224,171,194,70,182,56,65,0,192,90,67,7,16,164,194,176,3,63,65,0,192,90,67,0,64,156,194,100,59,71,65,0,192,90,67,7,112,148,194,138,31,85,65,0,192,90,67,0,160,140,194,248,194,99,65,0,192,90,67,7,208,132,194,4,86,112,65,0,192,90,67,0,0,122,194,168,215,128,65,0,192,90,67,13,96,106,194,163,129,128,65,0,192,90,67,0,192,90,194,174,216,121,65,0,192,90,67,13,32,75,194,238,90,117,65,0,192,90,67,0,128,59,194,217,95,110,65,0,192,90,67,13,224,43,194,50,119,98,65,0,192,90,67,0,64,28,194,75,89,109,65,0,192,90,67,13,160,12,194,198,109,109,65,0,192,90,67,0,0,250,193,10,215,109,65,0,192,90,67,26,192,218,193,93,220,95,65,0,192,90,67,0,128,187,193,254,101,92,65,0,192,90,67,26,64,156,193,197,254,73,65,0,192,90,67,0,0,122,193,172,139,53,65,0,192,90,67,52,128,59,193,169,19,40,65,0,192,90,67,0,0,250,192,162,40,31,65,0,192,90,67,0,0,122,192,121,187,12,65,0,192,90,67,0,0,0,0,56,16,5,65,0,192,90,67,0,0,122,64,73,104,0,65,0,192,90,67,0,0,122,195,234,149,141,64,16,216,86,67,16,24,118,195,255,4,197,64,16,216,86,67,33,48,114,195,211,222,7,65,16,216,86,67,240,71,110,195,5,52,68,65,16,216,86,67,0,96,106,195,119,190,126,65,16,216,86,67,16,120,102,195,77,132,141,65,16,216,86,67,33,144,98,195,207,119,145,65,16,216,86,67,240,167,94,195,9,121,143,65,16,216,86,67,0,192,90,195,168,215,135,65,16,216,86,67,16,216,86,195,83,150,122,65,16,216,86,67,33,240,82,195,229,97,102,65,16,216,86,67,240,7,79,195,118,113,76,65,16,216,86,67,0,32,75,195,76,55,76,65,16,216,86,67,16,56,71,195,30,167,77,65,16,216,86,67,33,80,67,195,218,172,66,65,16,216,86,67,240,103,63,195,109,197,67,65,16,216,86,67,0,128,59,195,35,74,73,65,16,216,86,67,16,152,55,195,136,244,72,65,16,216,86,67,33,176,51,195,215,18,90,65,16,216,86,67,240,199,47,195,68,105,93,65,16,216,86,67,0,224,43,195,207,102,102,65,16,216,86,67,16,248,39,195,159,205,100,65,16,216,86,67,33,16,36,195,100,93,101,65,16,216,86,67,240,39,32,195,185,141,96,65,16,216,86,67,0,64,28,195,128,183,79,65,16,216,86,67,16,88,24,195,142,6,45,65,16,216,86,67,33,112,20,195,222,31,25,65,16,216,86,67,240,135,16,195,197,242,2,65,16,216,86,67,0,160,12,195,185,199,220,64,16,216,86,67,16,184,8,195,71,90,185,64,16,216,86,67,33,208,4,195,74,65,147,64,16,216,86,67,240,231,0,195,169,48,147,64,16,216,86,67,0,0,250,194,124,126,166,64,16,216,86,67,33,48,242,194,10,157,197,64,16,216,86,67,66,96,234,194,99,69,228,64,16,216,86,67,223,143,226,194,8,172,1,65,16,216,86,67,0,192,218,194,73,174,11,65,16,216,86,67,33,240,210,194,48,112,31,65,16,216,86,67,66,32,203,194,147,169,49,65,16,216,86,67,7,80,195,194,152,221,58,65,16,216,86,67,0,128,187,194,41,203,62,65,16,216,86,67,7,176,179,194,21,29,64,65,16,216,86,67,0,224,171,194,90,245,76,65,16,216,86,67,7,16,164,194,13,224,85,65,16,216,86,67,0,64,156,194,48,76,89,65,16,216,86,67,7,112,148,194,43,24,108,65,16,216,86,67,0,160,140,194,161,214,118,65,16,216,86,67,7,208,132,194,193,202,119,65,16,216,86,67,0,0,122,194,67,173,130,65,16,216,86,67,13,96,106,194,90,100,131,65,16,216,86,67,0,192,90,194,171,207,136,65,16,216,86,67,13,32,75,194,111,18,141,65,16,216,86,67,0,128,59,194,9,27,132,65,16,216,86,67,13,224,43,194,202,195,114,65,16,216,86,67,0,64,28,194,182,132,119,65,16,216,86,67,13,160,12,194,100,59,129,65,16,216,86,67,0,0,250,193,169,164,125,65,16,216,86,67,26,192,218,193,191,125,118,65,16,216,86,67,0,128,187,193,146,92,106,65,16,216,86,67,26,64,156,193,94,186,82,65,16,216,86,67,0,0,122,193,61,155,63,65,16,216,86,67,52,128,59,193,192,236,59,65,16,216,86,67,0,0,250,192,22,106,45,65,16,216,86,67,0,0,122,192,176,3,34,65,16,216,86,67,0,0,0,0,238,252,23,65,16,216,86,67,0,0,122,64,3,21,20,65,16,216,86,67,0,0,122,195,121,146,102,64,33,240,82,67,16,24,118,195,78,11,172,64,33,240,82,67,33,48,114,195,152,105,245,64,33,240,82,67,240,71,110,195,227,199,63,65,33,240,82,67,0,96,106,195,113,61,111,65,33,240,82,67,16,120,102,195,247,6,132,65,33,240,82,67,33,144,98,195,47,238,142,65,33,240,82,67,240,167,94,195,54,205,136,65,33,240,82,67,0,192,90,195,149,84,128,65,33,240,82,67,16,216,86,195,39,160,109,65,33,240,82,67,33,240,82,195,20,63,94,65,33,240,82,67,240,7,79,195,235,226,63,65,33,240,82,67,0,32,75,195,215,18,61,65,33,240,82,67,16,56,71,195,90,245,58,65,33,240,82,67,33,80,67,195,96,229,48,65,33,240,82,67,240,103,63,195,218,27,58,65,33,240,82,67,0,128,59,195,204,238,62,65,33,240,82,67,16,152,55,195,129,149,73,65,33,240,82,67,33,176,51,195,255,178,96,65,33,240,82,67,240,199,47,195,255,178,108,65,33,240,82,67,0,224,43,195,129,38,110,65,33,240,82,67,16,248,39,195,152,76,101,65,33,240,82,67,33,16,36,195,61,155,84,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+194560);
/* memory initializer */ allocate([33,240,82,67,240,39,32,195,16,122,69,65,33,240,82,67,0,64,28,195,249,160,55,65,33,240,82,67,16,88,24,195,241,29,31,65,33,240,82,67,33,112,20,195,148,135,248,64,33,240,82,67,240,135,16,195,35,243,210,64,33,240,82,67,0,160,12,195,140,243,207,64,33,240,82,67,16,184,8,195,152,221,167,64,33,240,82,67,33,208,4,195,70,177,136,64,33,240,82,67,240,231,0,195,54,234,149,64,33,240,82,67,0,0,250,194,134,201,168,64,33,240,82,67,33,48,242,194,97,26,196,64,33,240,82,67,66,96,234,194,186,90,0,65,33,240,82,67,223,143,226,194,173,52,15,65,33,240,82,67,0,192,218,194,91,206,30,65,33,240,82,67,33,240,210,194,40,126,38,65,33,240,82,67,66,32,203,194,70,148,52,65,33,240,82,67,7,80,195,194,110,163,59,65,33,240,82,67,0,128,187,194,123,20,69,65,33,240,82,67,7,176,179,194,220,70,74,65,33,240,82,67,0,224,171,194,9,138,83,65,33,240,82,67,7,16,164,194,163,1,95,65,33,240,82,67,0,64,156,194,202,84,117,65,33,240,82,67,7,112,148,194,125,80,130,65,33,240,82,67,0,160,140,194,91,211,128,65,33,240,82,67,7,208,132,194,147,58,134,65,33,240,82,67,0,0,122,194,47,110,134,65,33,240,82,67,13,96,106,194,199,58,129,65,33,240,82,67,0,192,90,194,222,113,139,65,33,240,82,67,13,32,75,194,6,129,138,65,33,240,82,67,0,128,59,194,237,13,130,65,33,240,82,67,13,224,43,194,122,54,128,65,33,240,82,67,0,64,28,194,187,167,135,65,33,240,82,67,13,160,12,194,30,150,144,65,33,240,82,67,0,0,250,193,189,210,139,65,33,240,82,67,26,192,218,193,232,89,138,65,33,240,82,67,0,128,187,193,125,46,129,65,33,240,82,67,26,64,156,193,68,139,118,65,33,240,82,67,0,0,122,193,200,7,96,65,33,240,82,67,52,128,59,193,76,166,85,65,33,240,82,67,0,0,250,192,128,183,71,65,33,240,82,67,0,0,122,192,21,140,60,65,33,240,82,67,0,0,0,0,217,61,49,65,33,240,82,67,0,0,122,64,48,42,41,65,33,240,82,67,0,0,122,195,200,239,95,64,240,7,79,67,16,24,118,195,137,7,128,64,240,7,79,67,33,48,114,195,106,251,225,64,240,7,79,67,240,71,110,195,56,103,34,65,240,7,79,67,0,96,106,195,81,107,80,65,240,7,79,67,16,120,102,195,240,167,120,65,240,7,79,67,33,144,98,195,36,57,131,65,240,7,79,67,240,167,94,195,194,151,128,65,240,7,79,67,0,192,90,195,250,237,117,65,240,7,79,67,16,216,86,195,122,165,101,65,240,7,79,67,33,240,82,195,95,41,82,65,240,7,79,67,240,7,79,195,208,179,52,65,240,7,79,67,0,32,75,195,111,240,54,65,240,7,79,67,16,56,71,195,72,225,54,65,240,7,79,67,33,80,67,195,67,173,41,65,240,7,79,67,240,103,63,195,119,190,45,65,240,7,79,67,0,128,59,195,228,131,61,65,240,7,79,67,16,152,55,195,186,73,77,65,240,7,79,67,33,176,51,195,234,149,110,65,240,7,79,67,240,199,47,195,41,92,112,65,240,7,79,67,0,224,43,195,80,141,109,65,240,7,79,67,16,248,39,195,65,241,91,65,240,7,79,67,33,16,36,195,224,190,74,65,240,7,79,67,240,39,32,195,222,113,38,65,240,7,79,67,0,64,28,195,243,200,25,65,240,7,79,67,16,88,24,195,1,94,17,65,240,7,79,67,33,112,20,195,135,191,222,64,240,7,79,67,240,135,16,195,165,189,213,64,240,7,79,67,0,160,12,195,88,144,194,64,240,7,79,67,16,184,8,195,208,242,160,64,240,7,79,67,33,208,4,195,39,20,158,64,240,7,79,67,240,231,0,195,92,143,158,64,240,7,79,67,0,0,250,194,178,128,167,64,240,7,79,67,33,48,242,194,81,136,228,64,240,7,79,67,66,96,234,194,253,118,19,65,240,7,79,67,223,143,226,194,77,21,46,65,240,7,79,67,0,192,218,194,44,212,48,65,240,7,79,67,33,240,210,194,150,33,57,65,240,7,79,67,66,32,203,194,206,136,68,65,240,7,79,67,7,80,195,194,46,255,75,65,240,7,79,67,0,128,187,194,163,146,74,65,240,7,79,67,7,176,179,194,161,214,69,65,240,7,79,67,0,224,171,194,79,175,82,65,240,7,79,67,7,16,164,194,240,167,88,65,240,7,79,67,0,64,156,194,77,132,101,65,240,7,79,67,7,112,148,194,15,156,121,65,240,7,79,67,0,160,140,194,224,28,136,65,240,7,79,67,7,208,132,194,29,73,139,65,240,7,79,67,0,0,122,194,55,9,144,65,240,7,79,67,13,96,106,194,254,67,141,65,240,7,79,67,0,192,90,194,211,60,136,65,240,7,79,67,13,32,75,194,146,75,133,65,240,7,79,67,0,128,59,194,123,3,137,65,240,7,79,67,13,224,43,194,145,126,144,65,240,7,79,67,0,64,28,194,141,40,150,65,240,7,79,67,13,160,12,194,93,109,154,65,240,7,79,67,0,0,250,193,184,64,153,65,240,7,79,67,26,192,218,193,183,226,152,65,240,7,79,67,0,128,187,193,110,163,138,65,240,7,79,67,26,64,156,193,194,134,123,65,240,7,79,67,0,0,122,193,240,133,108,65,240,7,79,67,52,128,59,193,66,62,99,65,240,7,79,67,0,0,250,192,122,54,89,65,240,7,79,67,0,0,122,192,147,24,83,65,240,7,79,67,0,0,0,0,64,164,61,65,240,7,79,67,0,0,122,64,45,67,39,65,240,7,79,67,0,0,122,195,147,0,119,64,0,32,75,67,16,24,118,195,67,115,115,64,0,32,75,67,33,48,114,195,196,177,218,64,0,32,75,67,240,71,110,195,52,128,32,65,0,32,75,67,0,96,106,195,149,212,79,65,0,32,75,67,16,120,102,195,114,138,114,65,0,32,75,67,33,144,98,195,114,249,121,65,0,32,75,67,240,167,94,195,193,202,113,65,0,32,75,67,0,192,90,195,87,236,104,65,0,32,75,67,16,216,86,195,243,31,97,65,0,32,75,67,33,240,82,195,5,163,85,65,0,32,75,67,240,7,79,195,188,5,66,65,0,32,75,67,0,32,75,195,141,151,48,65,0,32,75,67,16,56,71,195,10,104,37,65,0,32,75,67,33,80,67,195,205,204,52,65,0,32,75,67,240,103,63,195,182,243,42,65,0,32,75,67,0,128,59,195,159,60,59,65,0,32,75,67,16,152,55,195,140,74,83,65,0,32,75,67,33,176,51,195,178,157,95,65,0,32,75,67,240,199,47,195,109,231,111,65,0,32,75,67,0,224,43,195,16,88,106,65,0,32,75,67,16,248,39,195,112,206,87,65,0,32,75,67,33,16,36,195,185,252,64,65,0,32,75,67,240,39,32,195,143,83,42,65,0,32,75,67,0,64,28,195,14,79,36,65,0,32,75,67,16,88,24,195,28,83,5,65,0,32,75,67,33,112,20,195,212,96,243,64,0,32,75,67,240,135,16,195,227,83,198,64,0,32,75,67,0,160,12,195,159,205,184,64,0,32,75,67,16,184,8,195,188,63,169,64,0,32,75,67,33,208,4,195,55,108,163,64,0,32,75,67,240,231,0,195,116,210,179,64,0,32,75,67,0,0,250,194,139,137,234,64,0,32,75,67,33,48,242,194,29,119,17,65,0,32,75,67,66,96,234,194,138,31,43,65,0,32,75,67,223,143,226,194,72,225,56,65,0,32,75,67,0,192,218,194,214,86,73,65,0,32,75,67,33,240,210,194,67,28,87,65,0,32,75,67,66,32,203,194,9,27,101,65,0,32,75,67,7,80,195,194,164,223,104,65,0,32,75,67,0,128,187,194,224,190,94,65,0,32,75,67,7,176,179,194,184,30,81,65,0,32,75,67,0,224,171,194,146,203,80,65,0,32,75,67,7,16,164,194,227,54,94,65,0,32,75,67,0,64,156,194,220,70,99,65,0,32,75,67,7,112,148,194,72,63,130,65,0,32,75,67,0,160,140,194,227,54,137,65,0,32,75,67,7,208,132,194,10,232,147,65,0,32,75,67,0,0,122,194,233,200,153,65,0,32,75,67,13,96,106,194,193,40,152,65,0,32,75,67,0,192,90,194,79,175,147,65,0,32,75,67,13,32,75,194,247,117,138,65,0,32,75,67,0,128,59,194,117,2,136,65,0,32,75,67,13,224,43,194,229,114,147,65,0,32,75,67,0,64,28,194,112,206,159,65,0,32,75,67,13,160,12,194,105,0,161,65,0,32,75,67,0,0,250,193,12,2,161,65,0,32,75,67,26,192,218,193,186,107,151,65,0,32,75,67,0,128,187,193,129,38,147,65,0,32,75,67,26,64,156,193,229,114,133,65,0,32,75,67,0,0,122,193,57,214,123,65,0,32,75,67,52,128,59,193,48,42,107,65,0,32,75,67,0,0,250,192,113,27,108,65,0,32,75,67,0,0,122,192,49,8,102,65,0,32,75,67,0,0,0,0,225,11,80,65,0,32,75,67,0,0,122,64,148,135,55,65,0,32,75,67,0,0,122,195,164,223,149,64,16,56,71,67,16,24,118,195,106,251,148,64,16,56,71,67,33,48,114,195,14,45,203,64,16,56,71,67,240,71,110,195,30,150,16,65,16,56,71,67,0,96,106,195,214,86,55,65,16,56,71,67,16,120,102,195,38,228,95,65,16,56,71,67,33,144,98,195,147,58,109,65,16,56,71,67,240,167,94,195,25,226,96,65,16,56,71,67,0,192,90,195,197,32,103,65,16,56,71,67,16,216,86,195,130,226,100,65,16,56,71,67,33,240,82,195,230,63,73,65,16,56,71,67,240,7,79,195,171,62,57,65,16,56,71,67,0,32,75,195,17,170,30,65,16,56,71,67,16,56,71,195,71,85,19,65,16,56,71,67,33,80,67,195,140,185,33,65,16,56,71,67,240,103,63,195,83,5,41,65,16,56,71,67,0,128,59,195,110,163,58,65,16,56,71,67,16,152,55,195,71,3,86,65,16,56,71,67,33,176,51,195,137,65,115,65,16,56,71,67,240,199,47,195,237,13,107,65,16,56,71,67,0,224,43,195,204,127,96,65,16,56,71,67,16,248,39,195,143,228,74,65,16,56,71,67,33,16,36,195,78,98,74,65,16,56,71,67,240,39,32,195,255,33,58,65,16,56,71,67,0,64,28,195,205,59,46,65,16,56,71,67,16,88,24,195,219,167,11,65,16,56,71,67,33,112,20,195,73,215,241,64,16,56,71,67,240,135,16,195,68,105,214,64,16,56,71,67,0,160,12,195,226,6,169,64,16,56,71,67,16,184,8,195,171,38,175,64,16,56,71,67,33,208,4,195,139,55,232,64,16,56,71,67,240,231,0,195,229,254,16,65,16,56,71,67,0,0,250,194,26,168,30,65,16,56,71,67,33,48,242,194,172,28,46,65,16,56,71,67,66,96,234,194,106,77,61,65,16,56,71,67,223,143,226,194,0,145,79,65,16,56,71,67,0,192,218,194,149,212,97,65,16,56,71,67,33,240,210,194,49,153,112,65,16,56,71,67,66,32,203,194,226,233,118,65,16,56,71,67,7,80,195,194,128,183,127,65,16,56,71,67,0,128,187,194,247,117,119,65,16,56,71,67,7,176,179,194,231,140,102,65,16,56,71,67,0,224,171,194,243,142,98,65,16,56,71,67,7,16,164,194,75,200,102,65,16,56,71,67,0,64,156,194,226,88,108,65,16,56,71,67,7,112,148,194,204,93,118,65,16,56,71,67,0,160,140,194,17,54,131,65,16,56,71,67,7,208,132,194,188,150,143,65,16,56,71,67,0,0,122,194,123,3,155,65,16,56,71,67,13,96,106,194,140,219,157,65,16,56,71,67,0,192,90,194,182,132,152,65,16,56,71,67,13,32,75,194,28,252,145,65,16,56,71,67,0,128,59,194,162,52,137,65,16,56,71,67,13,224,43,194,120,11,149,65,16,56,71,67,0,64,28,194,34,253,153,65,16,56,71,67,13,160,12,194,194,134,162,65,16,56,71,67,0,0,250,193,30,39,157,65,16,56,71,67,26,192,218,193,208,213,149,65,16,56,71,67,0,128,187,193,165,61,143,65,16,56,71,67,26,64,156,193,88,57,138,65,16,56,71,67,0,0,122,193,148,135,129,65,16,56,71,67,52,128,59,193,96,229,117,65,16,56,71,67,0,0,250,192,207,102,109,65,16,56,71,67,0,0,122,192,124,97,94,65,16,56,71,67,0,0,0,0,49,8,73,65,16,56,71,67,0,0,122,64,247,228,65,65,16,56,71,67,0,0,122,195,65,188,182,64,33,80,67,67,16,24,118,195,249,218,149,64,33,80,67,67,33,48,114,195,149,154,169,64,33,80,67,67,240,71,110,195,188,34,247,64,33,80,67,67,0,96,106,195,218,172,47,65,33,80,67,67,16,120,102,195,24,38,74,65,33,80,67,67,33,144,98,195,214,86,94,65,33,80,67,67,240,167,94,195,157,128,83,65,33,80,67,67,0,192,90,195,10,104,96,65,33,80,67,67,16,216,86,195,222,113,105,65,33,80,67,67,33,240,82,195,211,222,74,65,33,80,67,67,240,7,79,195,0,145,29,65,33,80,67,67,0,32,75,195,13,236,0,65,33,80,67,67,16,56,71,195,94,215,245,64,33,80,67,67,33,80,67,195,182,132,16,65,33,80,67,67,240,103,63,195,190,193,44,65,33,80,67,67,0,128,59,195,244,108,66,65,33,80,67,67,16,152,55,195,83,5,83,65,33,80,67,67,33,176,51,195,43,24,100,65,33,80,67,67,240,199,47,195,94,186,96,65,33,80,67,67,0,224,43,195,188,116,84,65,33,80,67,67,16,248,39,195,192,91,76,65,33,80,67,67,33,16,36,195,195,245,72,65,33,80,67,67,240,39,32,195,105,111,55,65,33,80,67,67,0,64,28,195,63,87,42,65,33,80,67,67,16,88,24,195,136,232,21,65,33,80,67,67,33,112,20,195,168,29,252,64,33,80,67,67,240,135,16,195,134,3,217,64,33,80,67,67,0,160,12,195,205,117,170,64,33,80,67,67,16,184,8,195,16,35,212,64,33,80,67,67,33,208,4,195,204,168,15,65,33,80,67,67,240,231,0,195,18,20,37,65,33,80,67,67,0,0,250,194,232,106,51,65,33,80,67,67,33,48,242,194,228,131,68,65,33,80,67,67,66,96,234,194,248,194,91,65,33,80,67,67,223,143,226,194,72,80,96,65,33,80,67,67,0,192,218,194,48,187,120,65,33,80,67,67,33,240,210,194,33,31,129,65,33,80,67,67,66,32,203,194,13,96,133,65,33,80,67,67,7,80,195,194,92,32,130,65,33,80,67,67,0,128,187,194,159,77,132,65,33,80,67,67,7,176,179,194,249,15,114,65,33,80,67,67,0,224,171,194,152,76,108,65,33,80,67,67,7,16,164,194,186,107,119,65,33,80,67,67,0,64,156,194,244,108,117,65,33,80,67,67,7,112,148,194,97,195,109,65,33,80,67,67,0,160,140,194,42,41,130,65,33,80,67,67,7,208,132,194,218,155,143,65,33,80,67,67,0,0,122,194,47,221,152,65,33,80,67,67,13,96,106,194,208,51,156,65,33,80,67,67,0,192,90,194,131,81,153,65,33,80,67,67,13,32,75,194,204,127,144,65,33,80,67,67,0,128,59,194,196,194,137,65,33,80,67,67,13,224,43,194,254,84,155,65,33,80,67,67,0,64,28,194,89,6,163,65,33,80,67,67,13,160,12,194,53,94,158,65,33,80,67,67,0,0,250,193,112,223,151,65,33,80,67,67,26,192,218,193,176,131,146,65,33,80,67,67,0,128,187,193,18,148,145,65,33,80,67,67,26,64,156,193,200,24,140,65,33,80,67,67,0,0,122,193,116,198,132,65,33,80,67,67,52,128,59,193,147,169,117,65,33,80,67,67,0,0,250,192,71,114,103,65,33,80,67,67,0,0,122,192,191,14,93,65,33,80,67,67,0,0,0,0,46,144,71,65,33,80,67,67,0,0,122,64,32,210,92,65,33,80,67,67,0,0,122,195,132,129,194,64,240,103,63,67,16,24,118,195,98,243,174,64,240,103,63,67,33,48,114,195,234,120,143,64,240,103,63,67,240,71,110,195,159,176,215,64,240,103,63,67,0,96,106,195,19,27,28,65,240,103,63,67,16,120,102,195,120,156,56,65,240,103,63,67,33,144,98,195,94,75,79,65,240,103,63,67,240,167,94,195,226,233,73,65,240,103,63,67,0,192,90,195,193,57,71,65,240,103,63,67,16,216,86,195,73,46,89,65,240,103,63,67,33,240,82,195,2,188,67,65,240,103,63,67,240,7,79,195,49,206,21,65,240,103,63,67,0,32,75,195,69,245,241,64,240,103,63,67,16,56,71,195,143,194,4,65,240,103,63,67,33,80,67,195,242,176,32,65,240,103,63,67,240,103,63,195,176,114,56,65,240,103,63,67,0,128,59,195,216,240,78,65,240,103,63,67,16,152,55,195,3,9,95,65,240,103,63,67,33,176,51,195,220,70,98,65,240,103,63,67,240,199,47,195,29,56,92,65,240,103,63,67,0,224,43,195,214,197,76,65,240,103,63,67,16,248,39,195,171,207,73,65,240,103,63,67,33,16,36,195,184,30,65,65,240,103,63,67,240,39,32,195,91,66,59,65,240,103,63,67,0,64,28,195,62,232,37,65,240,103,63,67,16,88,24,195,244,195,20,65,240,103,63,67,33,112,20,195,86,72,253,64,240,103,63,67,240,135,16,195,77,103,219,64,240,103,63,67,0,160,12,195,159,246,0,65,240,103,63,67,16,184,8,195,193,197,13,65,240,103,63,67,33,208,4,195,109,231,48,65,240,103,63,67,240,231,0,195,25,115,70,65,240,103,63,67,0,0,250,194,143,228,86,65,240,103,63,67,33,48,242,194,161,248,93,65,240,103,63,67,66,96,234,194,84,227,112,65,240,103,63,67,223,143,226,194,218,44,128,65,240,103,63,67,0,192,218,194,179,234,134,65,240,103,63,67,33,240,210,194,38,83,135,65,240,103,63,67,66,32,203,194,75,217,135,65,240,103,63,67,7,80,195,194,28,107,137,65,240,103,63,67,0,128,187,194,235,98,135,65,240,103,63,67,7,176,179,194,104,179,117,65,240,103,63,67,0,224,171,194,201,229,103,65,240,103,63,67,7,16,164,194,214,197,121,65,240,103,63,67,0,64,156,194,78,98,127,65,240,103,63,67,7,112,148,194,27,47,106,65,240,103,63,67,0,160,140,194,231,140,120,65,240,103,63,67,7,208,132,194,158,111,139,65,240,103,63,67,0,0,122,194,231,29,146,65,240,103,63,67,13,96,106,194,252,41,152,65,240,103,63,67,0,192,90,194,4,103,152,65,240,103,63,67,13,32,75,194,148,135,141,65,240,103,63,67,0,128,59,194,235,115,141,65,240,103,63,67,13,224,43,194,235,115,150,65,240,103,63,67,0,64,28,194,85,193,158,65,240,103,63,67,13,160,12,194,220,87,150,65,240,103,63,67,0,0,250,193,244,125,149,65,240,103,63,67,26,192,218,193,108,137,152,65,240,103,63,67,0,128,187,193,204,93,149,65,240,103,63,67,26,64,156,193,162,197,141,65,240,103,63,67,0,0,122,193,208,196,131,65,240,103,63,67,52,128,59,193,117,147,119,65,240,103,63,67,0,0,250,192,9,27,106,65,240,103,63,67,0,0,122,192,225,11,94,65,240,103,63,67,0,0,0,0,118,113,92,65,240,103,63,67,0,0,122,64,48,76,102,65,240,103,63,67,0,0,122,195,241,17,200,64,0,128,59,67,16,24,118,195,196,153,191,64,0,128,59,67,33,48,114,195,217,8,176,64,0,128,59,67,240,71,110,195,219,167,176,64,0,128,59,67,0,96,106,195,96,234,251,64,0,128,59,67,16,120,102,195,241,99,32,65,0,128,59,67,33,144,98,195,143,83,47,65,0,128,59,67,240,167,94,195,125,174,54,65,0,128,59,67,0,192,90,195,102,136,50,65,0,128,59,67,16,216,86,195,116,70,65,65,0,128,59,67,33,240,82,195,95,41,45,65,0,128,59,67,240,7,79,195,58,158,14,65,0,128,59,67,0,32,75,195,79,6,247,64,0,128,59,67,16,56,71,195,223,137,15,65,0,128,59,67,33,80,67,195,206,25,46,65,0,128,59,67,240,103,63,195,254,101,73,65,0,128,59,67,0,128,59,195,3,120,85,65,0,128,59,67,16,152,55,195,79,64,90,65,0,128,59,67,33,176,51,195,40,15,94,65,0,128,59,67,240,199,47,195,54,171,92,65,0,128,59,67,0,224,43,195,164,112,79,65,0,128,59,67,16,248,39,195,7,95,68,65,0,128,59,67,33,16,36,195,104,179,57,65,0,128,59,67,240,39,32,195,135,167,46,65,0,128,59,67,0,64,28,195,75,234,35,65,0,128,59,67,16,88,24,195,186,61,21,65,0,128,59,67,33,112,20,195,218,213,18,65,0,128,59,67,240,135,16,195,62,162,24,65,0,128,59,67,0,160,12,195,65,241,38,65,0,128,59,67,16,184,8,195,200,7,61,65,0,128,59,67,33,208,4,195,250,237,84,65,0,128,59,67,240,231,0,195,209,34,89,65,0,128,59,67,0,0,250,194,134,201,94,65,0,128,59,67,33,48,242,194,170,130,118,65,0,128,59,67,66,96,234,194,79,192,135,65,0,128,59,67,223,143,226,194,96,229,143,65,0,128,59,67,0,192,218,194,57,69,150,65,0,128,59,67,33,240,210,194,138,48,150,65,0,128,59,67,66,32,203,194,50,85,149,65,0,128,59,67,7,80,195,194,226,216,147,65,0,128,59,67,0,128,187,194,127,217,146,65,0,128,59,67,7,176,179,194,213,248,130,65,0,128,59,67,0,224,171,194,214,197,104,65,0,128,59,67,7,16,164,194,210,111,111,65,0,128,59,67,0,64,156,194,75,217,128,65,0,128,59,67,7,112,148,194,68,139,103,65,0,128,59,67,0,160,140,194,177,80,109,65,0,128,59,67,7,208,132,194,114,121,130,65,0,128,59,67,0,0,122,194,221,164,138,65,0,128,59,67,13,96,106,194,76,166,146,65,0,128,59,67,0,192,90,194,193,74,146,65,0,128,59,67,13,32,75,194,151,127,139,65,0,128,59,67,0,128,59,194,168,215,143,65,0,128,59,67,13,224,43,194,152,110,149,65,0,128,59,67,0,64,28,194,241,227,153,65,0,128,59,67,13,160,12,194,216,240,159,65,0,128,59,67,0,0,250,193,197,15,159,65,0,128,59,67,26,192,218,193,150,67,154,65,0,128,59,67,0,128,187,193,151,16,152,65,0,128,59,67,26,64,156,193,107,26,140,65,0,128,59,67,0,0,122,193,56,103,133,65,0,128,59,67,52,128,59,193,45,178,122,65,0,128,59,67,0,0,250,192,20,208,105,65,0,128,59,67,0,0,122,192,24,38,95,65,0,128,59,67,0,0,0,0,148,135,99,65,0,128,59,67,0,0,122,64,227,199,98,65,0,128,59,67,0,0,122,195,22,53,227,64,16,152,55,67,16,24,118,195,175,153,204,64,16,152,55,67,33,48,114,195,39,247,184,64,16,152,55,67,240,71,110,195,177,80,162,64,16,152,55,67,0,96,106,195,93,138,191,64,16,152,55,67,16,120,102,195,53,239,244,64,16,152,55,67,33,144,98,195,20,22,12,65,16,152,55,67,240,167,94,195,3,137,30,65,16,152,55,67,0,192,90,195,165,78,35,65,16,152,55,67,16,216,86,195,251,58,35,65,16,152,55,67,33,240,82,195,36,185,19,65,16,152,55,67,240,7,79,195,217,119,245,64,16,152,55,67,0,32,75,195,196,124,2,65,16,152,55,67,16,56,71,195,87,195,22,65,16,152,55,67,33,80,67,195,164,223,44,65,16,152,55,67,240,103,63,195,1,222,84,65,16,152,55,67,0,128,59,195,31,244,95,65,16,152,55,67,16,152,55,195,158,239,89,65,16,152,55,67,33,176,51,195,173,250,88,65,16,152,55,67,240,199,47,195,58,146,88,65,16,152,55,67,0,224,43,195,120,11,78,65,16,152,55,67,16,248,39,195,178,157,64,65,16,152,55,67,33,16,36,195,142,6,55,65,16,152,55,67,240,39,32,195,217,206,38,65,16,152,55,67,0,64,28,195,113,27,41,65,16,152,55,67,16,88,24,195,36,185,40,65,16,152,55,67,33,112,20,195,147,24,56,65,16,152,55,67,240,135,16,195,172,139,66,65,16,152,55,67,0,160,12,195,111,240,73,65,16,152,55,67,16,184,8,195,61,10,88,65,16,152,55,67,33,208,4,195,124,97,101,65,16,152,55,67,240,231,0,195,97,84,104,65,16,152,55,67,0,0,250,194,220,215,119,65,16,152,55,67,33,48,242,194,36,57,139,65,16,152,55,67,66,96,234,194,45,161,143,65,16,152,55,67,223,143,226,194,244,108,148,65,16,152,55,67,0,192,218,194,232,89,154,65,16,152,55,67,33,240,210,194,157,0,154,65,16,152,55,67,66,32,203,194,129,4,159,65,16,152,55,67,7,80,195,194,4,103,157,65,16,152,55,67,0,128,187,194,44,101,149,65,16,152,55,67,7,176,179,194,242,82,142,65,16,152,55,67,0,224,171,194,88,74,129,65,16,152,55,67,7,16,164,194,219,138,124,65,16,152,55,67,0,64,156,194,18,131,122,65,16,152,55,67,7,112,148,194,113,172,102,65,16,152,55,67,0,160,140,194,153,187,105,65,16,152,55,67,7,208,132,194,77,243,120,65,16,152,55,67,0,0,122,194,6,18,129,65,16,152,55,67,13,96,106,194,62,232,136,65,16,152,55,67,0,192,90,194,185,141,134,65,16,152,55,67,13,32,75,194,12,130,141,65,16,152,55,67,0,128,59,194,202,67,148,65,16,152,55,67,13,224,43,194,32,227,157,65,16,152,55,67,0,64,28,194,112,95,166,65,16,152,55,67,13,160,12,194,223,79,163,65,16,152,55,67,0,0,250,193,5,69,161,65,16,152,55,67,26,192,218,193,12,130,159,65,16,152,55,67,0,128,187,193,85,193,147,65,16,152,55,67,26,64,156,193,41,203,135,65,16,152,55,67,0,0,122,193,243,142,128,65,16,152,55,67,52,128,59,193,70,37,119,65,16,152,55,67,0,0,250,192,127,251,112,65,16,152,55,67,0,0,122,192,201,118,115,65,16,152,55,67,0,0,0,0,17,54,100,65,16,152,55,67,0,0,122,64,7,206,95,65,16,152,55,67,0,0,122,195,107,183,2,65,33,176,51,67,16,24,118,195,114,167,224,64,33,176,51,67,33,48,114,195,155,201,207,64,33,176,51,67,240,71,110,195,219,167,197,64,33,176,51,67,0,96,106,195,214,28,149,64,33,176,51,67,16,120,102,195,204,69,169,64,33,176,51,67,33,144,98,195,114,109,227,64,33,176,51,67,240,167,94,195,107,125,0,65,33,176,51,67,0,192,90,195,44,60,21,65,33,176,51,67,16,216,86,195,13,171,19,65,33,176,51,67,33,240,82,195,134,85,10,65,33,176,51,67,240,7,79,195,170,125,248,64,33,176,51,67,0,32,75,195,33,2,6,65,33,176,51,67,16,56,71,195,7,211,9,65,33,176,51,67,33,80,67,195,113,27,44,65,33,176,51,67,240,103,63,195,58,35,67,65,33,176,51,67,0,128,59,195,33,31,88,65,33,176,51,67,16,152,55,195,178,46,89,65,33,176,51,67,33,176,51,195,181,166,89,65,33,176,51,67,240,199,47,195,237,158,88,65,33,176,51,67,0,224,43,195,20,174,80,65,33,176,51,67,16,248,39,195,127,106,89,65,33,176,51,67,33,16,36,195,254,67,84,65,33,176,51,67,240,39,32,195,240,133,60,65,33,176,51,67,0,64,28,195,144,160,69,65,33,176,51,67,16,88,24,195,89,23,82,65,33,176,51,67,33,112,20,195,104,179,90,65,33,176,51,67,240,135,16,195,197,32,92,65,33,176,51,67,0,160,12,195,53,94,96,65,33,176,51,67,16,184,8,195,34,108,114,65,33,176,51,67,33,208,4,195,49,8,128,65,33,176,51,67,240,231,0,195,91,49,135,65,33,176,51,67,0,0,250,194,143,228,138,65,33,176,51,67,33,48,242,194,226,216,148,65,33,176,51,67,66,96,234,194,67,156,154,65,33,176,51,67,223,143,226,194,151,144,153,65,33,176,51,67,0,192,218,194,143,100,158,65,33,176,51,67,33,240,210,194,142,134,165,65,33,176,51,67,66,32,203,194,175,165,173,65,33,176,51,67,7,80,195,194,219,121,172,65,33,176,51,67,0,128,187,194,242,65,163,65,33,176,51,67,7,176,179,194,198,109,153,65,33,176,51,67,0,224,171,194,229,80,146,65,33,176,51,67,7,16,164,194,32,65,137,65,33,176,51,67,0,64,156,194,29,201,116,65,33,176,51,67,7,112,148,194,136,133,97,65,33,176,51,67,0,160,140,194,45,178,100,65,33,176,51,67,7,208,132,194,41,237,112,65,33,176,51,67,0,0,122,194,95,152,117,65,33,176,51,67,13,96,106,194,5,163,118,65,33,176,51,67,0,192,90,194,188,5,138,65,33,176,51,67,13,32,75,194,61,10,147,65,33,176,51,67,0,128,59,194,119,190,154,65,33,176,51,67,13,224,43,194,134,184,161,65,33,176,51,67,0,64,28,194,131,47,169,65,33,176,51,67,13,160,12,194,139,125,166,65,33,176,51,67,0,0,250,193,176,242,154,65,33,176,51,67,26,192,218,193,9,249,147,65,33,176,51,67,0,128,187,193,250,237,136,65,33,176,51,67,26,64,156,193,38,100,129,65,33,176,51,67,0,0,122,193,199,186,113,65,33,176,51,67,52,128,59,193,193,57,121,65,33,176,51,67,0,0,250,192,81,235,130,65,33,176,51,67,0,0,122,192,243,142,130,65,33,176,51,67,0,0,0,0,77,243,122,65,33,176,51,67,0,0,122,64,35,219,106,65,33,176,51,67,0,0,122,195,102,49,21,65,240,199,47,67,16,24,118,195,232,2,6,65,240,199,47,67,33,48,114,195,144,102,242,64,240,199,47,67,240,71,110,195,162,122,224,64,240,199,47,67,0,96,106,195,5,134,181,64,240,199,47,67,16,120,102,195,194,134,138,64,240,199,47,67,33,144,98,195,157,104,166,64,240,199,47,67,240,167,94,195,132,240,201,64,240,199,47,67,0,192,90,195,136,17,242,64,240,199,47,67,16,216,86,195,102,189,5,65,240,199,47,67,33,240,82,195,208,237,3,65,240,199,47,67,240,7,79,195,127,217,242,64,240,199,47,67,0,32,75,195,50,201,3,65,240,199,47,67,16,56,71,195,27,71,10,65,240,199,47,67,33,80,67,195,72,191,39,65,240,199,47,67,240,103,63,195,11,70,61,65,240,199,47,67,0,128,59,195,191,125,88,65,240,199,47,67,16,152,55,195,167,121,101,65,240,199,47,67,33,176,51,195,246,40,97,65,240,199,47,67,240,199,47,195,154,153,105,65,240,199,47,67,0,224,43,195,159,205,95,65,240,199,47,67,16,248,39,195,240,22,92,65,240,199,47,67,33,16,36,195,106,77,87,65,240,199,47,67,240,39,32,195,179,234,90,65,240,199,47,67,0,64,28,195,147,58,100,65,240,199,47,67,16,88,24,195,237,13,104,65,240,199,47,67,33,112,20,195,225,122,110,65,240,199,47,67,240,135,16,195,202,84,112,65,240,199,47,67,0,160,12,195,90,100,116,65,240,199,47,67,16,184,8,195,219,10,134,65,240,199,47,67,33,208,4,195,84,210,143,65,240,199,47,67,240,231,0,195,217,95,148,65,240,199,47,67,0,0,250,194,82,167,153,65,240,199,47,67,33,48,242,194,62,232,153,65,240,199,47,67,66,96,234,194,145,254,155,65,240,199,47,67,223,143,226,194,32,210,161,65,240,199,47,67,0,192,218,194,36,40,171,65,240,199,47,67,33,240,210,194,120,122,176,65,240,199,47,67,66,32,203,194,159,43,186,65,240,199,47,67,7,80,195,194,81,90,181,65,240,199,47,67,0,128,187,194,197,126,170,65,240,199,47,67,7,176,179,194,204,221,164,65,240,199,47,67,0,224,171,194,25,243,155,65,240,199,47,67,7,16,164,194,49,153,145,65,240,199,47,67,0,64,156,194,121,88,124,65,240,199,47,67,7,112,148,194,155,230,99,65,240,199,47,67,0,160,140,194,104,145,102,65,240,199,47,67,7,208,132,194,163,1,115,65,240,199,47,67,0,0,122,194,174,182,124,65,240,199,47,67,13,96,106,194,115,215,129,65,240,199,47,67,0,192,90,194,174,216,136,65,240,199,47,67,13,32,75,194,26,192,151,65,240,199,47,67,0,128,59,194,74,123,154,65,240,199,47,67,13,224,43,194,33,31,155,65,240,199,47,67,0,64,28,194,106,60,157,65,240,199,47,67,13,160,12,194,195,83,154,65,240,199,47,67,0,0,250,193,217,78,148,65,240,199,47,67,26,192,218,193,170,130,131,65,240,199,47,67,0,128,187,193,238,235,120,65,240,199,47,67,26,64,156,193,146,92,124,65,240,199,47,67,0,0,122,193,59,1,131,65,240,199,47,67,52,128,59,193,104,179,135,65,240,199,47,67,0,0,250,192,131,192,137,65,240,199,47,67,0,0,122,192,6,129,136,65,240,199,47,67,0,0,0,0,32,227,130,65,240,199,47,67,0,0,122,64,165,189,116,65,240,199,47,67,0,0,122,195,194,134,32,65,0,224,43,67,16,24,118,195,74,41,9,65,0,224,43,67,33,48,114,195,95,41,250,64,0,224,43,67,240,71,110,195,220,215,223,64,0,224,43,67,0,96,106,195,149,241,178,64,0,224,43,67,16,120,102,195,80,252,153,64,0,224,43,67,33,144,98,195,75,200,151,64,0,224,43,67,240,167,94,195,151,168,173,64,0,224,43,67,0,192,90,195,235,57,197,64,0,224,43,67,16,216,86,195,230,87,212,64,0,224,43,67,33,240,82,195,151,57,223,64,0,224,43,67,240,7,79,195,242,239,239,64,0,224,43,67,0,32,75,195,79,47,8,65,0,224,43,67,16,56,71,195,165,49,254,64,0,224,43,67,33,80,67,195,22,36,24,65,0,224,43,67,240,103,63,195,197,143,47,65,0,224,43,67,0,128,59,195,95,152,82,65,0,224,43,67,16,152,55,195,202,50,93,65,0,224,43,67,33,176,51,195,123,20,115,65,0,224,43,67,240,199,47,195,186,218,110,65,0,224,43,67,0,224,43,195,215,163,94,65,0,224,43,67,16,248,39,195,224,156,99,65,0,224,43,67,33,16,36,195,195,245,86,65,0,224,43,67,240,39,32,195,114,249,94,65,0,224,43,67,0,64,28,195,63,87,110,65,0,224,43,67,16,88,24,195,91,177,116,65,0,224,43,67,33,112,20,195,202,50,112,65,0,224,43,67,240,135,16,195,91,66,113,65,0,224,43,67,0,160,12,195,255,33,115,65,0,224,43,67,16,184,8,195,63,53,137,65,0,224,43,67,33,208,4,195,9,10,151,65,0,224,43,67,240,231,0,195,233,55,156,65,0,224,43,67,0,0,250,194,228,131,157,65,0,224,43,67,33,48,242,194,61,44,157,65,0,224,43,67,66,96,234,194,184,192,164,65,0,224,43,67,223,143,226,194,138,48,172,65,0,224,43,67,0,192,218,194,23,89,180,65,0,224,43,67,33,240,210,194,151,144,184,65,0,224,43,67,66,32,203,194,121,233,188,65,0,224,43,67,7,80,195,194,192,91,179,65,0,224,43,67,0,128,187,194,172,173,175,65,0,224,43,67,7,176,179,194,216,112,178,65,0,224,43,67,0,224,171,194,154,247,173,65,0,224,43,67,7,16,164,194,225,11,161,65,0,224,43,67,0,64,156,194,125,208,140,65,0,224,43,67,7,112,148,194,45,178,113,65,0,224,43,67,0,160,140,194,159,171,128,65,0,224,43,67,7,208,132,194,137,82,131,65,0,224,43,67,0,0,122,194,63,70,135,65,0,224,43,67,13,96,106,194,130,243,133,65,0,224,43,67,0,192,90,194,42,186,131,65,0,224,43,67,13,32,75,194,227,182,144,65,0,224,43,67,0,128,59,194,110,163,150,65,0,224,43,67,13,224,43,194,8,172,147,65,0,224,43,67,0,64,28,194,45,195,144,65,0,224,43,67,13,160,12,194,3,248,145,65,0,224,43,67,0,0,250,193,0,128,136,65,0,224,43,67,26,192,218,193,240,22,117,65,0,224,43,67,0,128,187,193,111,240,114,65,0,224,43,67,26,64,156,193,184,158,137,65,0,224,43,67,0,0,122,193,228,131,146,65,0,224,43,67,52,128,59,193,44,84,147,65,0,224,43,67,0,0,250,192,138,159,146,65,0,224,43,67,0,0,122,192,142,134,140,65,0,224,43,67,0,0,0,0,70,165,129,65,0,224,43,67,0,0,122,64,255,161,128,65,0,224,43,67,0,0,122,195,60,107,23,65,16,248,39,67,16,24,118,195,56,178,14,65,16,248,39,67,33,48,114,195,188,174,250,64,16,248,39,67,240,71,110,195,57,69,237,64,16,248,39,67,0,96,106,195,12,200,202,64,16,248,39,67,16,120,102,195,215,47,174,64,16,248,39,67,33,144,98,195,28,153,140,64,16,248,39,67,240,167,94,195,225,64,92,64,16,248,39,67,0,192,90,195,207,73,142,64,16,248,39,67,16,216,86,195,140,190,171,64,16,248,39,67,33,240,82,195,248,83,201,64,16,248,39,67,240,7,79,195,74,123,203,64,16,248,39,67,0,32,75,195,192,149,235,64,16,248,39,67,16,56,71,195,96,118,249,64,16,248,39,67,33,80,67,195,23,72,22,65,16,248,39,67,240,103,63,195,131,81,52,65,16,248,39,67,0,128,59,195,148,246,69,65,16,248,39,67,16,152,55,195,54,60,107,65,16,248,39,67,33,176,51,195,28,235,118,65,16,248,39,67,240,199,47,195,178,157,115,65,16,248,39,67,0,224,43,195,30,167,90,65,16,248,39,67,16,248,39,195,222,147,96,65,16,248,39,67,33,16,36,195,195,100,89,65,16,248,39,67,240,39,32,195,154,153,107,65,16,248,39,67,0,64,28,195,36,185,120,65,16,248,39,67,16,88,24,195,176,242,130,65,16,248,39,67,33,112,20,195,159,43,136,65,16,248,39,67,240,135,16,195,75,200,129,65,16,248,39,67,0,160,12,195,251,203,113,65,16,248,39,67,16,184,8,195,161,120,135,65,16,248,39,67,33,208,4,195,82,56,147,65,16,248,39,67,240,231,0,195,188,244,159,65,16,248,39,67,0,0,250,194,85,65,163,65,16,248,39,67,33,48,242,194,117,147,171,65,16,248,39,67,66,96,234,194,111,18,179,65,16,248,39,67,223,143,226,194,140,219,179,65,16,248,39,67,0,192,218,194,227,54,183,65,16,248,39,67,33,240,210,194,229,242,187,65,16,248,39,67,66,32,203,194,104,17,184,65,16,248,39,67,7,80,195,194,233,183,182,65,16,248,39,67,0,128,187,194,232,89,186,65,16,248,39,67,7,176,179,194,54,171,186,65,16,248,39,67,0,224,171,194,163,129,181,65,16,248,39,67,7,16,164,194,105,0,175,65,16,248,39,67,0,64,156,194,253,246,149,65,16,248,39,67,7,112,148,194,74,140,132,65,16,248,39,67,0,160,140,194,152,110,137,65,16,248,39,67,7,208,132,194,245,219,144,65,16,248,39,67,0,0,122,194,90,228,151,65,16,248,39,67,13,96,106,194,124,225,139,65,16,248,39,67,0,192,90,194,106,60,138,65,16,248,39,67,13,32,75,194,72,80,135,65,16,248,39,67,0,128,59,194,193,57,137,65,16,248,39,67,13,224,43,194,53,94,142,65,16,248,39,67,0,64,28,194,145,126,141,65,16,248,39,67,13,160,12,194,254,101,134,65,16,248,39,67,0,0,250,193,222,113,128,65,16,248,39,67,26,192,218,193,24,149,108,65,16,248,39,67,0,128,187,193,116,181,134,65,16,248,39,67,26,64,156,193,165,189,143,65,16,248,39,67,0,0,122,193,177,80,147,65,16,248,39,67,52,128,59,193,254,101,151,65,16,248,39,67,0,0,250,192,242,176,147,65,16,248,39,67,0,0,122,192,242,193,137,65,16,248,39,67,0,0,0,0,119,173,133,65,16,248,39,67,0,0,122,64,252,41,137,65,16,248,39,67,0,0,122,195,48,117,20,65,33,16,36,67,16,24,118,195,41,220,10,65,33,16,36,67,33,48,114,195,117,72,6,65,33,16,36,67,240,71,110,195,10,75,241,64,33,16,36,67,0,96,106,195,157,244,203,64,33,16,36,67,16,120,102,195,17,54,160,64,33,16,36,67,33,144,98,195,47,105,104,64,33,16,36,67,240,167,94,195,207,218,49,64,33,16,36,67,0,192,90,195,1,251,56,64,33,16,36,67,16,216,86,195,86,130,128,64,33,16,36,67,33,240,82,195,54,176,144,64,33,16,36,67,240,7,79,195,6,100,155,64,33,16,36,67,0,32,75,195,127,246,198,64,33,16,36,67,16,56,71,195,131,23,4,65,33,16,36,67,33,80,67,195,107,43,38,65,33,16,36,67,240,103,63,195,126,140,58,65,33,16,36,67,0,128,59,195,206,136,72,65,33,16,36,67,16,152,55,195,159,171,97,65,33,16,36,67,33,176,51,195,213,9,109,65,33,16,36,67,240,199,47,195,152,221,111,65,33,16,36,67,0,224,43,195,229,242,105,65,33,16,36,67,16,248,39,195,49,153,104,65,33,16,36,67,33,16,36,195,149,101,92,65,33,16,36,67,240,39,32,195,221,181,113,65,33,16,36,67,0,64,28,195,20,46,132,65,33,16,36,67,16,88,24,195,120,156,142,65,33,16,36,67,33,112,20,195,145,15,148,65,33,16,36,67,240,135,16,195,19,225,140,65,33,16,36,67,0,160,12,195,140,185,131,65,33,16,36,67,16,184,8,195,116,53,134,65,33,16,36,67,33,208,4,195,84,82,153,65,33,16,36,67,240,231,0,195,31,133,164,65,33,16,36,67,0,0,250,194,140,57,174,65,33,16,36,67,33,48,242,194,36,23,182,65,33,16,36,67,66,96,234,194,43,152,188,65,33,16,36,67,223,143,226,194,134,218,186,65,33,16,36,67,0,192,218,194,143,66,195,65,33,16,36,67,33,240,210,194,2,154,195,65,33,16,36,67,66,32,203,194,29,90,192,65,33,16,36,67,7,80,195,194,29,90,197,65,33,16,36,67,0,128,187,194,87,91,198,65,33,16,36,67,7,176,179,194,17,199,191,65,33,16,36,67,0,224,171,194,28,252,185,65,33,16,36,67,7,16,164,194,146,92,179,65,33,16,36,67,0,64,156,194,81,218,155,65,33,16,36,67,7,112,148,194,87,219,146,65,33,16,36,67,0,160,140,194,86,142,154,65,33,16,36,67,7,208,132,194,83,5,157,65,33,16,36,67,0,0,122,194,51,51,158,65,33,16,36,67,13,96,106,194,60,61,147,65,33,16,36,67,0,192,90,194,49,153,141,65,33,16,36,67,13,32,75,194,38,100,134,65,33,16,36,67,0,128,59,194,227,71,132,65,33,16,36,67,13,224,43,194,54,171,128,65,33,16,36,67,0,64,28,194,138,142,131,65,33,16,36,67,13,160,12,194,228,131,112,65,33,16,36,67,0,0,250,193,184,175,98,65,33,16,36,67,26,192,218,193,106,94,128,65,33,16,36,67,0,128,187,193,72,225,135,65,33,16,36,67,26,64,156,193,249,160,138,65,33,16,36,67,0,0,122,193,229,208,147,65,33,16,36,67,52,128,59,193,34,253,142,65,33,16,36,67,0,0,250,192,124,114,142,65,33,16,36,67,0,0,122,192,199,169,137,65,33,16,36,67,0,0,0,0,73,46,134,65,33,16,36,67,0,0,122,64,97,178,131,65,33,16,36,67,0,0,122,195,119,4,9,65,240,39,32,67,16,24,118,195,203,185,0,65,240,39,32,67,33,48,114,195,114,249,246,64,240,39,32,67,240,71,110,195,161,132,230,64,240,39,32,67,0,96,106,195,79,117,176,64,240,39,32,67,16,120,102,195,82,44,160,64,240,39,32,67,33,144,98,195,196,206,139,64,240,39,32,67,240,167,94,195,62,121,66,64,240,39,32,67,0,192,90,195,50,119,59,64,240,39,32,67,16,216,86,195,118,195,40,64,240,39,32,67,33,240,82,195,147,82,44,64,240,39,32,67,240,7,79,195,255,178,99,64,240,39,32,67,0,32,75,195,15,185,179,64,240,39,32,67,16,56,71,195,114,138,243,64,240,39,32,67,33,80,67,195,177,92,26,65,240,39,32,67,240,103,63,195,138,142,52,65,240,39,32,67,0,128,59,195,202,50,76,65,240,39,32,67,16,152,55,195,154,153,84,65,240,39,32,67], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+204800);
/* memory initializer */ allocate([33,176,51,195,13,113,116,65,240,39,32,67,240,199,47,195,147,58,117,65,240,39,32,67,0,224,43,195,66,96,115,65,240,39,32,67,16,248,39,195,238,124,101,65,240,39,32,67,33,16,36,195,143,228,109,65,240,39,32,67,240,39,32,195,195,83,129,65,240,39,32,67,0,64,28,195,98,161,131,65,240,39,32,67,16,88,24,195,22,123,148,65,240,39,32,67,33,112,20,195,141,23,154,65,240,39,32,67,240,135,16,195,37,134,150,65,240,39,32,67,0,160,12,195,105,128,139,65,240,39,32,67,16,184,8,195,178,46,141,65,240,39,32,67,33,208,4,195,2,188,157,65,240,39,32,67,240,231,0,195,199,203,171,65,240,39,32,67,0,0,250,194,16,122,184,65,240,39,32,67,33,48,242,194,238,218,196,65,240,39,32,67,66,96,234,194,165,189,207,65,240,39,32,67,223,143,226,194,193,74,210,65,240,39,32,67,0,192,218,194,30,39,217,65,240,39,32,67,33,240,210,194,103,68,216,65,240,39,32,67,66,32,203,194,31,116,208,65,240,39,32,67,7,80,195,194,52,17,210,65,240,39,32,67,0,128,187,194,104,51,210,65,240,39,32,67,7,176,179,194,15,139,205,65,240,39,32,67,0,224,171,194,82,56,192,65,240,39,32,67,7,16,164,194,118,224,177,65,240,39,32,67,0,64,156,194,75,200,163,65,240,39,32,67,7,112,148,194,179,251,156,65,240,39,32,67,0,160,140,194,48,204,160,65,240,39,32,67,7,208,132,194,170,241,168,65,240,39,32,67,0,0,122,194,172,156,163,65,240,39,32,67,13,96,106,194,224,173,155,65,240,39,32,67,0,192,90,194,48,170,145,65,240,39,32,67,13,32,75,194,67,156,134,65,240,39,32,67,0,128,59,194,167,249,130,65,240,39,32,67,13,224,43,194,254,67,114,65,240,39,32,67,0,64,28,194,231,140,105,65,240,39,32,67,13,160,12,194,45,67,107,65,240,39,32,67,0,0,250,193,106,77,109,65,240,39,32,67,26,192,218,193,159,77,131,65,240,39,32,67,0,128,187,193,233,38,129,65,240,39,32,67,26,64,156,193,120,156,140,65,240,39,32,67,0,0,122,193,201,101,143,65,240,39,32,67,52,128,59,193,50,119,136,65,240,39,32,67,0,0,250,192,66,62,137,65,240,39,32,67,0,0,122,192,249,177,134,65,240,39,32,67,0,0,0,0,235,115,131,65,240,39,32,67,0,0,122,64,37,6,133,65,240,39,32,67,0,0,122,195,90,158,240,64,0,64,28,67,16,24,118,195,44,72,244,64,0,64,28,67,33,48,114,195,104,92,242,64,0,64,28,67,240,71,110,195,32,70,222,64,0,64,28,67,0,96,106,195,230,87,153,64,0,64,28,67,16,120,102,195,6,216,141,64,0,64,28,67,33,144,98,195,175,66,132,64,0,64,28,67,240,167,94,195,181,84,48,64,0,64,28,67,0,192,90,195,170,72,43,64,0,64,28,67,16,216,86,195,68,139,84,64,0,64,28,67,33,240,82,195,11,41,85,64,0,64,28,67,240,7,79,195,51,220,102,64,0,64,28,67,0,32,75,195,149,72,142,64,0,64,28,67,16,56,71,195,176,172,192,64,0,64,28,67,33,80,67,195,193,28,4,65,0,64,28,67,240,103,63,195,29,56,41,65,0,64,28,67,0,128,59,195,239,56,55,65,0,64,28,67,16,152,55,195,17,199,75,65,0,64,28,67,33,176,51,195,199,186,118,65,0,64,28,67,240,199,47,195,252,152,129,65,0,64,28,67,0,224,43,195,195,100,110,65,0,64,28,67,16,248,39,195,239,201,97,65,0,64,28,67,33,16,36,195,247,117,128,65,0,64,28,67,240,39,32,195,198,220,140,65,0,64,28,67,0,64,28,195,176,3,142,65,0,64,28,67,16,88,24,195,34,108,147,65,0,64,28,67,33,112,20,195,95,169,156,65,0,64,28,67,240,135,16,195,110,52,154,65,0,64,28,67,0,160,12,195,118,79,146,65,0,64,28,67,16,184,8,195,193,185,149,65,0,64,28,67,33,208,4,195,54,188,163,65,0,64,28,67,240,231,0,195,49,153,180,65,0,64,28,67,0,0,250,194,27,47,197,65,0,64,28,67,33,48,242,194,120,250,216,65,0,64,28,67,66,96,234,194,52,145,224,65,0,64,28,67,223,143,226,194,80,252,227,65,0,64,28,67,0,192,218,194,217,189,232,65,0,64,28,67,33,240,210,194,57,52,234,65,0,64,28,67,66,32,203,194,204,93,231,65,0,64,28,67,7,80,195,194,46,16,227,65,0,64,28,67,0,128,187,194,112,206,214,65,0,64,28,67,7,176,179,194,97,178,207,65,0,64,28,67,0,224,171,194,101,42,194,65,0,64,28,67,7,16,164,194,238,252,180,65,0,64,28,67,0,64,156,194,145,126,175,65,0,64,28,67,7,112,148,194,48,170,168,65,0,64,28,67,0,160,140,194,170,241,170,65,0,64,28,67,7,208,132,194,153,170,170,65,0,64,28,67,0,0,122,194,159,60,164,65,0,64,28,67,13,96,106,194,10,215,159,65,0,64,28,67,0,192,90,194,135,167,148,65,0,64,28,67,13,32,75,194,184,158,137,65,0,64,28,67,0,128,59,194,185,124,129,65,0,64,28,67,13,224,43,194,94,75,103,65,0,64,28,67,0,64,28,194,187,39,92,65,0,64,28,67,13,160,12,194,153,42,106,65,0,64,28,67,0,0,250,193,216,240,121,65,0,64,28,67,26,192,218,193,145,237,122,65,0,64,28,67,0,128,187,193,202,67,132,65,0,64,28,67,26,64,156,193,27,158,134,65,0,64,28,67,0,0,122,193,115,104,132,65,0,64,28,67,52,128,59,193,82,184,130,65,0,64,28,67,0,0,250,192,236,64,131,65,0,64,28,67,0,0,122,192,195,245,125,65,0,64,28,67,0,0,0,0,196,194,130,65,0,64,28,67,0,0,122,64,16,122,135,65,0,64,28,67,0,0,122,195,206,165,207,64,16,88,24,67,16,24,118,195,77,243,204,64,16,88,24,67,33,48,114,195,18,78,210,64,16,88,24,67,240,71,110,195,66,207,174,64,16,88,24,67,0,96,106,195,22,164,134,64,16,88,24,67,16,120,102,195,153,240,51,64,16,88,24,67,33,144,98,195,24,207,240,63,16,88,24,67,240,167,94,195,229,39,201,63,16,88,24,67,0,192,90,195,176,201,30,64,16,88,24,67,16,216,86,195,193,226,56,64,16,88,24,67,33,240,82,195,159,176,40,64,16,88,24,67,240,7,79,195,85,48,62,64,16,88,24,67,0,32,75,195,7,240,102,64,16,88,24,67,16,56,71,195,103,97,127,64,16,88,24,67,33,80,67,195,104,203,235,64,16,88,24,67,240,103,63,195,203,202,24,65,16,88,24,67,0,128,59,195,163,1,42,65,16,88,24,67,16,152,55,195,165,78,69,65,16,88,24,67,33,176,51,195,113,61,96,65,16,88,24,67,240,199,47,195,212,43,110,65,16,88,24,67,0,224,43,195,16,233,111,65,16,88,24,67,16,248,39,195,64,19,108,65,16,88,24,67,33,16,36,195,202,50,134,65,16,88,24,67,240,39,32,195,106,94,148,65,16,88,24,67,0,64,28,195,224,190,156,65,16,88,24,67,16,88,24,195,143,211,152,65,16,88,24,67,33,112,20,195,147,24,152,65,16,88,24,67,240,135,16,195,219,138,155,65,16,88,24,67,0,160,12,195,45,195,154,65,16,88,24,67,16,184,8,195,239,73,165,65,16,88,24,67,33,208,4,195,202,84,178,65,16,88,24,67,240,231,0,195,166,10,195,65,16,88,24,67,0,0,250,194,8,61,211,65,16,88,24,67,33,48,242,194,236,209,226,65,16,88,24,67,66,96,234,194,229,114,240,65,16,88,24,67,223,143,226,194,139,236,240,65,16,88,24,67,0,192,218,194,57,52,247,65,16,88,24,67,33,240,210,194,123,3,247,65,16,88,24,67,66,32,203,194,171,62,247,65,16,88,24,67,7,80,195,194,115,232,242,65,16,88,24,67,0,128,187,194,97,50,227,65,16,88,24,67,7,176,179,194,253,118,206,65,16,88,24,67,0,224,171,194,28,252,194,65,16,88,24,67,7,16,164,194,245,57,182,65,16,88,24,67,0,64,156,194,69,199,180,65,16,88,24,67,7,112,148,194,236,175,174,65,16,88,24,67,0,160,140,194,34,236,171,65,16,88,24,67,7,208,132,194,106,94,168,65,16,88,24,67,0,0,122,194,124,242,159,65,16,88,24,67,13,96,106,194,128,200,155,65,16,88,24,67,0,192,90,194,18,3,145,65,16,88,24,67,13,32,75,194,72,191,131,65,16,88,24,67,0,128,59,194,153,42,112,65,16,88,24,67,13,224,43,194,195,211,93,65,16,88,24,67,0,64,28,194,51,51,110,65,16,88,24,67,13,160,12,194,59,223,113,65,16,88,24,67,0,0,250,193,150,33,113,65,16,88,24,67,26,192,218,193,92,32,118,65,16,88,24,67,0,128,187,193,75,89,120,65,16,88,24,67,26,64,156,193,164,112,115,65,16,88,24,67,0,0,122,193,192,91,115,65,16,88,24,67,52,128,59,193,224,156,120,65,16,88,24,67,0,0,250,192,214,86,122,65,16,88,24,67,0,0,122,192,31,244,116,65,16,88,24,67,0,0,0,0,77,21,131,65,16,88,24,67,0,0,122,64,197,143,141,65,16,88,24,67,0,0,122,195,248,170,165,64,33,112,20,67,16,24,118,195,44,130,149,64,33,112,20,67,33,48,114,195,129,33,138,64,33,112,20,67,240,71,110,195,188,5,78,64,33,112,20,67,0,96,106,195,185,141,8,64,33,112,20,67,16,120,102,195,200,7,153,63,33,112,20,67,33,144,98,195,45,150,226,61,33,112,20,67,240,167,94,195,41,237,113,63,33,112,20,67,0,192,90,195,26,134,183,63,33,112,20,67,16,216,86,195,244,108,4,64,33,112,20,67,33,240,82,195,211,188,17,64,33,112,20,67,240,7,79,195,173,192,14,64,33,112,20,67,0,32,75,195,34,253,40,64,33,112,20,67,16,56,71,195,94,186,63,64,33,112,20,67,33,80,67,195,187,237,172,64,33,112,20,67,240,103,63,195,56,149,0,65,33,112,20,67,0,128,59,195,214,86,32,65,33,112,20,67,16,152,55,195,43,135,67,65,33,112,20,67,33,176,51,195,176,3,99,65,33,112,20,67,240,199,47,195,217,206,104,65,33,112,20,67,0,224,43,195,12,2,115,65,33,112,20,67,16,248,39,195,34,142,115,65,33,112,20,67,33,16,36,195,50,213,139,65,33,112,20,67,240,39,32,195,41,237,156,65,33,112,20,67,0,64,28,195,131,175,161,65,33,112,20,67,16,88,24,195,127,106,164,65,33,112,20,67,33,112,20,195,108,248,161,65,33,112,20,67,240,135,16,195,237,158,163,65,33,112,20,67,0,160,12,195,114,138,167,65,33,112,20,67,16,184,8,195,151,16,181,65,33,112,20,67,33,208,4,195,117,19,201,65,33,112,20,67,240,231,0,195,60,61,216,65,33,112,20,67,0,0,250,194,74,12,235,65,33,112,20,67,33,48,242,194,44,101,248,65,33,112,20,67,66,96,234,194,251,203,253,65,33,112,20,67,223,143,226,194,253,118,255,65,33,112,20,67,0,192,218,194,21,157,255,65,33,112,20,67,33,240,210,194,53,222,0,66,33,112,20,67,66,32,203,194,104,51,255,65,33,112,20,67,7,80,195,194,156,196,243,65,33,112,20,67,0,128,187,194,22,234,228,65,33,112,20,67,7,176,179,194,138,142,212,65,33,112,20,67,0,224,171,194,94,58,198,65,33,112,20,67,7,16,164,194,49,153,186,65,33,112,20,67,0,64,156,194,138,48,178,65,33,112,20,67,7,112,148,194,229,80,176,65,33,112,20,67,0,160,140,194,56,231,171,65,33,112,20,67,7,208,132,194,99,110,164,65,33,112,20,67,0,0,122,194,79,47,155,65,33,112,20,67,13,96,106,194,187,184,144,65,33,112,20,67,0,192,90,194,87,236,132,65,33,112,20,67,13,32,75,194,63,87,125,65,33,112,20,67,0,128,59,194,94,75,97,65,33,112,20,67,13,224,43,194,206,25,77,65,33,112,20,67,0,64,28,194,118,79,97,65,33,112,20,67,13,160,12,194,118,224,101,65,33,112,20,67,0,0,250,193,190,193,100,65,33,112,20,67,26,192,218,193,234,149,114,65,33,112,20,67,0,128,187,193,255,33,95,65,33,112,20,67,26,64,156,193,40,15,111,65,33,112,20,67,0,0,122,193,73,46,119,65,33,112,20,67,52,128,59,193,105,111,117,65,33,112,20,67,0,0,250,192,209,145,112,65,33,112,20,67,0,0,122,192,35,74,122,65,33,112,20,67,0,0,0,0,114,249,132,65,33,112,20,67,0,0,122,64,134,73,147,65,33,112,20,67,0,0,122,195,42,116,172,64,240,135,16,67,16,24,118,195,15,98,137,64,240,135,16,67,33,48,114,195,71,230,63,64,240,135,16,67,240,71,110,195,29,143,51,64,240,135,16,67,0,96,106,195,155,143,211,63,240,135,16,67,16,120,102,195,130,170,137,190,240,135,16,67,33,144,98,195,154,237,242,190,240,135,16,67,240,167,94,195,76,202,120,189,240,135,16,67,0,192,90,195,74,10,92,63,240,135,16,67,16,216,86,195,34,108,164,63,240,135,16,67,33,240,82,195,82,73,217,63,240,135,16,67,240,7,79,195,61,44,8,64,240,135,16,67,0,32,75,195,147,227,58,64,240,135,16,67,16,56,71,195,229,179,118,64,240,135,16,67,33,80,67,195,204,122,140,64,240,135,16,67,240,103,63,195,132,18,215,64,240,135,16,67,0,128,59,195,199,232,19,65,240,135,16,67,16,152,55,195,169,164,57,65,240,135,16,67,33,176,51,195,103,68,83,65,240,135,16,67,240,199,47,195,156,162,106,65,240,135,16,67,0,224,43,195,107,154,107,65,240,135,16,67,16,248,39,195,215,35,129,65,240,135,16,67,33,16,36,195,90,117,145,65,240,135,16,67,240,39,32,195,115,215,159,65,240,135,16,67,0,64,28,195,113,155,177,65,240,135,16,67,16,88,24,195,77,115,175,65,240,135,16,67,33,112,20,195,159,188,178,65,240,135,16,67,240,135,16,195,73,29,173,65,240,135,16,67,0,160,12,195,46,127,184,65,240,135,16,67,16,184,8,195,92,143,197,65,240,135,16,67,33,208,4,195,93,237,212,65,240,135,16,67,240,231,0,195,250,237,239,65,240,135,16,67,0,0,250,194,67,45,253,65,240,135,16,67,33,48,242,194,181,247,1,66,240,135,16,67,66,96,234,194,246,232,3,66,240,135,16,67,223,143,226,194,130,162,4,66,240,135,16,67,0,192,218,194,75,25,4,66,240,135,16,67,33,240,210,194,146,220,1,66,240,135,16,67,66,32,203,194,216,1,252,65,240,135,16,67,7,80,195,194,208,196,241,65,240,135,16,67,0,128,187,194,139,236,226,65,240,135,16,67,7,176,179,194,87,91,213,65,240,135,16,67,0,224,171,194,124,225,204,65,240,135,16,67,7,16,164,194,77,115,188,65,240,135,16,67,0,64,156,194,240,5,175,65,240,135,16,67,7,112,148,194,202,212,171,65,240,135,16,67,0,160,140,194,11,181,169,65,240,135,16,67,7,208,132,194,44,101,160,65,240,135,16,67,0,0,122,194,60,189,155,65,240,135,16,67,13,96,106,194,98,161,138,65,240,135,16,67,0,192,90,194,158,222,133,65,240,135,16,67,13,32,75,194,125,208,126,65,240,135,16,67,0,128,59,194,171,207,100,65,240,135,16,67,13,224,43,194,66,207,85,65,240,135,16,67,0,64,28,194,122,165,76,65,240,135,16,67,13,160,12,194,107,154,90,65,240,135,16,67,0,0,250,193,197,254,90,65,240,135,16,67,26,192,218,193,14,79,97,65,240,135,16,67,0,128,187,193,125,63,95,65,240,135,16,67,26,64,156,193,27,158,96,65,240,135,16,67,0,0,122,193,151,255,97,65,240,135,16,67,52,128,59,193,221,181,97,65,240,135,16,67,0,0,250,192,229,242,103,65,240,135,16,67,0,0,122,192,81,218,118,65,240,135,16,67,0,0,0,0,114,121,132,65,240,135,16,67,0,0,122,64,163,1,143,65,240,135,16,67,0,0,122,195,187,97,170,64,0,160,12,67,16,24,118,195,79,6,145,64,0,160,12,67,33,48,114,195,232,159,54,64,0,160,12,67,240,71,110,195,205,1,190,63,0,160,12,67,0,96,106,195,147,57,70,62,0,160,12,67,16,120,102,195,193,196,196,188,0,160,12,67,33,144,98,195,168,54,72,190,0,160,12,67,240,167,94,195,37,121,6,191,0,160,12,67,0,192,90,195,243,174,130,62,0,160,12,67,16,216,86,195,194,136,1,63,0,160,12,67,33,240,82,195,71,3,160,63,0,160,12,67,240,7,79,195,226,117,49,64,0,160,12,67,0,32,75,195,103,39,79,64,0,160,12,67,16,56,71,195,254,67,116,64,0,160,12,67,33,80,67,195,194,163,142,64,0,160,12,67,240,103,63,195,219,80,210,64,0,160,12,67,0,128,59,195,227,124,12,65,0,160,12,67,16,152,55,195,176,114,42,65,0,160,12,67,33,176,51,195,183,209,66,65,0,160,12,67,240,199,47,195,66,96,93,65,0,160,12,67,0,224,43,195,215,18,103,65,0,160,12,67,16,248,39,195,78,209,129,65,0,160,12,67,33,16,36,195,34,142,142,65,0,160,12,67,240,39,32,195,73,157,162,65,0,160,12,67,0,64,28,195,185,141,173,65,0,160,12,67,16,88,24,195,7,206,174,65,0,160,12,67,33,112,20,195,35,219,182,65,0,160,12,67,240,135,16,195,181,38,184,65,0,160,12,67,0,160,12,195,255,161,197,65,0,160,12,67,16,184,8,195,119,190,211,65,0,160,12,67,33,208,4,195,206,42,229,65,0,160,12,67,240,231,0,195,51,196,247,65,0,160,12,67,0,0,250,194,179,42,5,66,0,160,12,67,33,48,242,194,156,243,11,66,0,160,12,67,66,96,234,194,217,95,10,66,0,160,12,67,223,143,226,194,239,248,8,66,0,160,12,67,0,192,218,194,58,227,6,66,0,160,12,67,33,240,210,194,33,223,3,66,0,160,12,67,66,32,203,194,5,163,250,65,0,160,12,67,7,80,195,194,52,0,240,65,0,160,12,67,0,128,187,194,70,37,224,65,0,160,12,67,7,176,179,194,154,8,210,65,0,160,12,67,0,224,171,194,162,180,199,65,0,160,12,67,7,16,164,194,120,122,188,65,0,160,12,67,0,64,156,194,241,227,170,65,0,160,12,67,7,112,148,194,113,189,166,65,0,160,12,67,0,160,140,194,175,148,165,65,0,160,12,67,7,208,132,194,52,145,155,65,0,160,12,67,0,0,122,194,167,249,143,65,0,160,12,67,13,96,106,194,5,52,138,65,0,160,12,67,0,192,90,194,160,26,134,65,0,160,12,67,13,32,75,194,106,222,125,65,0,160,12,67,0,128,59,194,18,165,115,65,0,160,12,67,13,224,43,194,175,148,97,65,0,160,12,67,0,64,28,194,120,156,86,65,0,160,12,67,13,160,12,194,10,104,78,65,0,160,12,67,0,0,250,193,247,6,74,65,0,160,12,67,26,192,218,193,79,64,75,65,0,160,12,67,0,128,187,193,20,208,64,65,0,160,12,67,26,64,156,193,202,84,77,65,0,160,12,67,0,0,122,193,98,161,67,65,0,160,12,67,52,128,59,193,15,156,67,65,0,160,12,67,0,0,250,192,160,137,94,65,0,160,12,67,0,0,122,192,170,241,120,65,0,160,12,67,0,0,0,0,3,120,134,65,0,160,12,67,0,0,122,64,110,163,148,65,0,160,12,67,0,0,122,195,241,75,150,64,16,184,8,67,16,24,118,195,180,60,93,64,16,184,8,67,33,48,114,195,247,233,232,63,16,184,8,67,240,71,110,195,44,183,144,63,16,184,8,67,0,96,106,195,62,4,9,63,16,184,8,67,16,120,102,195,126,112,94,63,16,184,8,67,33,144,98,195,29,2,19,63,16,184,8,67,240,167,94,195,83,9,143,62,16,184,8,67,0,192,90,195,71,3,152,191,16,184,8,67,16,216,86,195,43,79,48,191,16,184,8,67,33,240,82,195,193,253,240,62,16,184,8,67,240,7,79,195,244,79,0,64,16,184,8,67,0,32,75,195,203,74,91,64,16,184,8,67,16,56,71,195,155,143,134,64,16,184,8,67,33,80,67,195,84,140,167,64,16,184,8,67,240,103,63,195,147,198,192,64,16,184,8,67,0,128,59,195,164,228,254,64,16,184,8,67,16,152,55,195,120,122,40,65,16,184,8,67,33,176,51,195,111,129,65,65,16,184,8,67,240,199,47,195,194,23,88,65,16,184,8,67,0,224,43,195,9,27,110,65,16,184,8,67,16,248,39,195,115,104,132,65,16,184,8,67,33,16,36,195,45,178,141,65,16,184,8,67,240,39,32,195,147,58,157,65,16,184,8,67,0,64,28,195,37,117,171,65,16,184,8,67,16,88,24,195,66,96,181,65,16,184,8,67,33,112,20,195,57,197,186,65,16,184,8,67,240,135,16,195,103,68,196,65,16,184,8,67,0,160,12,195,238,124,208,65,16,184,8,67,16,184,8,195,59,240,221,65,16,184,8,67,33,208,4,195,134,90,241,65,16,184,8,67,240,231,0,195,224,126,5,66,16,184,8,67,0,0,250,194,149,229,11,66,16,184,8,67,33,48,242,194,59,193,15,66,16,184,8,67,66,96,234,194,184,94,16,66,16,184,8,67,223,143,226,194,158,158,14,66,16,184,8,67,0,192,218,194,39,66,10,66,16,184,8,67,33,240,210,194,192,108,10,66,16,184,8,67,66,32,203,194,154,89,3,66,16,184,8,67,7,80,195,194,116,36,242,65,16,184,8,67,0,128,187,194,57,197,217,65,16,184,8,67,7,176,179,194,155,230,208,65,16,184,8,67,0,224,171,194,213,248,199,65,16,184,8,67,7,16,164,194,61,172,180,65,16,184,8,67,0,64,156,194,57,197,173,65,16,184,8,67,7,112,148,194,162,69,172,65,16,184,8,67,0,160,140,194,136,133,164,65,16,184,8,67,7,208,132,194,137,65,152,65,16,184,8,67,0,0,122,194,207,102,139,65,16,184,8,67,13,96,106,194,245,57,134,65,16,184,8,67,0,192,90,194,241,99,127,65,16,184,8,67,13,32,75,194,99,238,109,65,16,184,8,67,0,128,59,194,95,7,101,65,16,184,8,67,13,224,43,194,157,17,94,65,16,184,8,67,0,64,28,194,199,41,74,65,16,184,8,67,13,160,12,194,91,177,64,65,16,184,8,67,0,0,250,193,125,174,61,65,16,184,8,67,26,192,218,193,14,79,64,65,16,184,8,67,0,128,187,193,213,120,52,65,16,184,8,67,26,64,156,193,107,154,57,65,16,184,8,67,0,0,122,193,249,160,46,65,16,184,8,67,52,128,59,193,87,91,66,65,16,184,8,67,0,0,250,192,229,242,100,65,16,184,8,67,0,0,122,192,195,245,129,65,16,184,8,67,0,0,0,0,71,131,138,65,16,184,8,67,0,0,122,64,122,199,157,65,16,184,8,67,0,0,122,195,101,141,124,64,33,208,4,67,16,24,118,195,48,71,21,64,33,208,4,67,33,48,114,195,187,155,251,63,33,208,4,67,240,71,110,195,233,72,150,63,33,208,4,67,0,96,106,195,31,44,27,63,33,208,4,67,16,120,102,195,109,177,19,60,33,208,4,67,33,144,98,195,117,199,18,62,33,208,4,67,240,167,94,195,178,73,182,190,33,208,4,67,0,192,90,195,64,246,198,191,33,208,4,67,16,216,86,195,111,47,157,191,33,208,4,67,33,240,82,195,37,232,199,190,33,208,4,67,240,7,79,195,143,165,147,63,33,208,4,67,0,32,75,195,246,40,40,64,33,208,4,67,16,56,71,195,214,197,99,64,33,208,4,67,33,80,67,195,25,197,159,64,33,208,4,67,240,103,63,195,54,229,159,64,33,208,4,67,0,128,59,195,169,222,222,64,33,208,4,67,16,152,55,195,9,27,33,65,33,208,4,67,33,176,51,195,132,13,70,65,33,208,4,67,240,199,47,195,53,239,83,65,33,208,4,67,0,224,43,195,183,209,101,65,33,208,4,67,16,248,39,195,222,147,130,65,33,208,4,67,33,16,36,195,83,150,141,65,33,208,4,67,240,39,32,195,209,162,154,65,33,208,4,67,0,64,28,195,125,208,167,65,33,208,4,67,16,88,24,195,95,41,185,65,33,208,4,67,33,112,20,195,123,20,191,65,33,208,4,67,240,135,16,195,54,188,197,65,33,208,4,67,0,160,12,195,242,82,217,65,33,208,4,67,16,184,8,195,131,47,232,65,33,208,4,67,33,208,4,195,243,14,242,65,33,208,4,67,240,231,0,195,167,57,6,66,33,208,4,67,0,0,250,194,66,190,12,66,33,208,4,67,33,48,242,194,153,187,17,66,33,208,4,67,66,96,234,194,41,139,18,66,33,208,4,67,223,143,226,194,232,25,16,66,33,208,4,67,0,192,218,194,206,217,10,66,33,208,4,67,33,240,210,194,179,187,10,66,33,208,4,67,66,32,203,194,25,226,6,66,33,208,4,67,7,80,195,194,226,216,247,65,33,208,4,67,0,128,187,194,214,69,223,65,33,208,4,67,7,176,179,194,8,172,205,65,33,208,4,67,0,224,171,194,178,157,195,65,33,208,4,67,7,16,164,194,232,234,179,65,33,208,4,67,0,64,156,194,84,99,176,65,33,208,4,67,7,112,148,194,174,54,177,65,33,208,4,67,0,160,140,194,50,230,163,65,33,208,4,67,7,208,132,194,183,98,152,65,33,208,4,67,0,0,122,194,177,208,136,65,33,208,4,67,13,96,106,194,131,64,134,65,33,208,4,67,0,192,90,194,59,1,114,65,33,208,4,67,13,32,75,194,79,30,104,65,33,208,4,67,0,128,59,194,168,53,76,65,33,208,4,67,13,224,43,194,80,141,74,65,33,208,4,67,0,64,28,194,179,12,63,65,33,208,4,67,13,160,12,194,53,239,59,65,33,208,4,67,0,0,250,193,25,115,45,65,33,208,4,67,26,192,218,193,249,160,48,65,33,208,4,67,0,128,187,193,67,173,39,65,33,208,4,67,26,64,156,193,98,16,45,65,33,208,4,67,0,0,122,193,34,253,70,65,33,208,4,67,52,128,59,193,23,217,83,65,33,208,4,67,0,0,250,192,232,217,110,65,33,208,4,67,0,0,122,192,40,143,131,65,33,208,4,67,0,0,0,0,36,151,142,65,33,208,4,67,0,0,122,64,193,168,159,65,33,208,4,67,0,0,122,195,248,194,36,64,240,231,0,67,16,24,118,195,189,251,7,64,240,231,0,67,33,48,114,195,51,193,44,63,240,231,0,67,240,71,110,195,168,58,156,190,240,231,0,67,0,96,106,195,136,218,114,191,240,231,0,67,16,120,102,195,36,155,123,191,240,231,0,67,33,144,98,195,121,59,150,191,240,231,0,67,240,167,94,195,8,85,190,191,240,231,0,67,0,192,90,195,196,206,14,192,240,231,0,67,16,216,86,195,23,217,8,192,240,231,0,67,33,240,82,195,190,188,136,191,240,231,0,67,240,7,79,195,182,122,136,61,240,231,0,67,0,32,75,195,38,30,148,63,240,231,0,67,16,56,71,195,155,114,73,64,240,231,0,67,33,80,67,195,166,213,130,64,240,231,0,67,240,103,63,195,20,121,162,64,240,231,0,67,0,128,59,195,100,18,1,65,240,231,0,67,16,152,55,195,241,244,43,65,240,231,0,67,33,176,51,195,23,72,65,65,240,231,0,67,240,199,47,195,83,150,82,65,240,231,0,67,0,224,43,195,235,115,104,65,240,231,0,67,16,248,39,195,108,9,125,65,240,231,0,67,33,16,36,195,236,64,135,65,240,231,0,67,240,39,32,195,206,8,149,65,240,231,0,67,0,64,28,195,95,24,167,65,240,231,0,67,16,88,24,195,53,239,180,65,240,231,0,67,33,112,20,195,185,124,191,65,240,231,0,67,240,135,16,195,2,43,212,65,240,231,0,67,0,160,12,195,59,129,219,65,240,231,0,67,16,184,8,195,243,142,236,65,240,231,0,67,33,208,4,195,176,114,245,65,240,231,0,67,240,231,0,195,184,30,5,66,240,231,0,67,0,0,250,194,138,95,13,66,240,231,0,67,33,48,242,194,82,103,17,66,240,231,0,67,66,96,234,194,214,214,16,66,240,231,0,67,223,143,226,194,197,160,12,66,240,231,0,67,0,192,218,194,185,141,13,66,240,231,0,67,33,240,210,194,251,220,14,66,240,231,0,67,66,32,203,194,45,97,9,66,240,231,0,67,7,80,195,194,70,20,2,66,240,231,0,67,0,128,187,194,34,125,232,65,240,231,0,67,7,176,179,194,188,244,207,65,240,231,0,67,0,224,171,194,101,25,194,65,240,231,0,67,7,16,164,194,202,50,184,65,240,231,0,67,0,64,156,194,66,207,172,65,240,231,0,67,7,112,148,194,183,81,168,65,240,231,0,67,0,160,140,194,13,96,161,65,240,231,0,67,7,208,132,194,86,125,149,65,240,231,0,67,0,0,122,194,45,161,138,65,240,231,0,67,13,96,106,194,153,187,128,65,240,231,0,67,0,192,90,194,69,216,97,65,240,231,0,67,13,32,75,194,52,17,74,65,240,231,0,67,0,128,59,194,138,176,64,65,240,231,0,67,13,224,43,194,240,167,55,65,240,231,0,67,0,64,28,194,117,147,62,65,240,231,0,67,13,160,12,194,12,147,58,65,240,231,0,67,0,0,250,193,99,238,38,65,240,231,0,67,26,192,218,193,88,226,26,65,240,231,0,67,0,128,187,193,94,133,29,65,240,231,0,67,26,64,156,193,85,193,57,65,240,231,0,67,0,0,122,193,221,181,84,65,240,231,0,67,52,128,59,193,44,212,96,65,240,231,0,67,0,0,250,192,251,203,116,65,240,231,0,67,0,0,122,192,28,252,134,65,240,231,0,67,0,0,0,0,167,121,144,65,240,231,0,67,0,0,122,64,104,179,160,65,240,231,0,67,0,0,122,195,154,148,30,64,0,0,250,66,16,24,118,195,138,229,162,63,0,0,250,66,33,48,114,195,203,45,9,191,0,0,250,66,240,71,110,195,155,90,170,191,0,0,250,66,0,96,106,195,76,253,208,191,0,0,250,66,16,120,102,195,167,150,19,192,0,0,250,66,33,144,98,195,237,187,8,192,0,0,250,66,240,167,94,195,5,81,61,192,0,0,250,66,0,192,90,195,18,247,58,192,0,0,250,66,16,216,86,195,152,163,85,192,0,0,250,66,33,240,82,195,148,19,19,192,0,0,250,66,240,7,79,195,41,91,92,191,0,0,250,66,0,32,75,195,133,204,1,63,0,0,250,66,16,56,71,195,35,45,197,63,0,0,250,66,33,80,67,195,167,145,84,64,0,0,250,66,240,103,63,195,128,130,184,64,0,0,250,66,0,128,59,195,196,206,2,65,0,0,250,66,16,152,55,195,87,91,40,65,0,0,250,66,33,176,51,195,234,149,55,65,0,0,250,66,240,199,47,195,8,172,69,65,0,0,250,66,0,224,43,195,1,222,88,65,0,0,250,66,16,248,39,195,9,249,102,65,0,0,250,66,33,16,36,195,37,245,132,65,0,0,250,66,240,39,32,195,126,12,150,65,0,0,250,66,0,64,28,195,43,24,170,65,0,0,250,66,16,88,24,195,255,161,183,65,0,0,250,66,33,112,20,195,40,15,198,65,0,0,250,66,240,135,16,195,51,179,214,65,0,0,250,66,0,160,12,195,70,165,226,65,0,0,250,66,16,184,8,195,18,20,234,65,0,0,250,66,33,208,4,195,1,222,249,65,0,0,250,66,240,231,0,195,196,177,3,66,0,0,250,66,0,0,250,194,242,240,9,66,0,0,250,66,33,48,242,194,183,162,12,66,0,0,250,66,66,96,234,194,172,220,9,66,0,0,250,66,223,143,226,194,169,19,15,66,0,0,250,66,0,192,218,194,119,254,15,66,0,0,250,66,33,240,210,194,138,48,15,66,0,0,250,66,66,32,203,194,138,112,10,66,0,0,250,66,7,80,195,194,92,160,1,66,0,0,250,66,0,128,187,194,233,183,230,65,0,0,250,66,7,176,179,194,172,28,208,65,0,0,250,66,0,224,171,194,85,65,200,65,0,0,250,66,7,16,164,194,227,37,190,65,0,0,250,66,0,64,156,194,122,71,179,65,0,0,250,66,7,112,148,194,50,85,167,65,0,0,250,66,0,160,140,194,156,51,153,65,0,0,250,66,7,208,132,194,27,175,142,65,0,0,250,66,0,0,122,194,231,29,132,65,0,0,250,66,13,96,106,194,208,179,110,65,0,0,250,66,0,192,90,194,118,224,83,65,0,0,250,66,13,32,75,194,218,27,68,65,0,0,250,66,0,128,59,194,202,195,55,65,0,0,250,66,13,224,43,194,213,120,44,65,0,0,250,66,0,64,28,194,156,51,37,65,0,0,250,66,13,160,12,194,240,133,38,65,0,0,250,66,0,0,250,193,111,100,31,65,0,0,250,66,26,192,218,193,223,108,28,65,0,0,250,66,0,128,187,193,140,185,42,65,0,0,250,66,26,64,156,193,245,74,67,65,0,0,250,66,0,0,122,193,127,106,93,65,0,0,250,66,52,128,59,193,86,125,114,65,0,0,250,66,0,0,250,192,156,51,124,65,0,0,250,66,0,0,122,192,186,73,135,65,0,0,250,66,0,0,0,0,116,164,144,65,0,0,250,66,0,0,122,64,36,185,151,65,0,0,250,66,0,0,122,195,23,188,252,63,33,48,242,66,16,24,118,195,107,14,164,63,33,48,242,66,33,48,114,195,241,80,143,61,33,48,242,66,240,71,110,195,162,98,168,191,33,48,242,66,0,96,106,195,144,49,21,192,33,48,242,66,16,120,102,195,222,113,76,192,33,48,242,66,33,144,98,195,251,174,122,192,33,48,242,66,240,167,94,195,31,244,128,192,33,48,242,66,0,192,90,195,33,176,138,192,33,48,242,66,16,216,86,195,141,151,98,192,33,48,242,66,33,240,82,195,216,211,44,192,33,48,242,66,240,7,79,195,184,30,55,192,33,48,242,66,0,32,75,195,139,166,159,191,33,48,242,66,16,56,71,195,22,246,84,62,33,48,242,66,33,80,67,195,143,165,33,64,33,48,242,66,240,103,63,195,63,87,155,64,33,48,242,66,0,128,59,195,84,0,236,64,33,48,242,66,16,152,55,195,81,136,22,65,33,48,242,66,33,176,51,195,249,49,49,65,33,48,242,66,240,199,47,195,195,211,63,65,33,48,242,66,0,224,43,195,112,95,69,65,33,48,242,66,16,248,39,195,155,85,83,65,33,48,242,66,33,16,36,195,54,205,125,65,33,48,242,66,240,39,32,195,223,224,144,65,33,48,242,66,0,64,28,195,242,82,162,65,33,48,242,66,16,88,24,195,225,139,182,65,33,48,242,66,33,112,20,195,79,192,202,65,33,48,242,66,240,135,16,195,143,83,214,65,33,48,242,66,0,160,12,195,103,196,232,65,33,48,242,66,16,184,8,195,24,149,239,65,33,48,242,66,33,208,4,195,118,113,246,65,33,48,242,66,240,231,0,195,209,162,255,65,33,48,242,66,0,0,250,194,195,53,7,66,33,48,242,66,33,48,242,194,98,33,13,66,33,48,242,66,66,96,234,194,255,242,16,66,33,48,242,66,223,143,226,194,247,36,19,66,33,48,242,66,0,192,218,194,55,9,18,66,33,48,242,66,33,240,210,194,2,252,14,66,33,48,242,66,66,32,203,194,237,30,7,66,33,48,242,66,7,80,195,194,211,77,246,65,33,48,242,66,0,128,187,194,58,35,225,65,33,48,242,66,7,176,179,194,132,13,213,65,33,48,242,66,0,224,171,194,122,71,208,65,33,48,242,66,7,16,164,194,232,106,198,65,33,48,242,66,0,64,156,194,113,44,188,65,33,48,242,66,7,112,148,194,133,235,173,65,33,48,242,66,0,160,140,194,175,20,160,65,33,48,242,66,7,208,132,194,201,246,142,65,33,48,242,66,0,0,122,194,35,219,122,65,33,48,242,66,13,96,106,194,10,215,91,65,33,48,242,66,0,192,90,194,81,107,69,65,33,48,242,66,13,32,75,194,150,33,63,65,33,48,242,66,0,128,59,194,199,41,64,65,33,48,242,66,13,224,43,194,160,26,48,65,33,48,242,66,0,64,28,194,7,136,29,65,33,48,242,66,13,160,12,194,47,110,33,65,33,48,242,66,0,0,250,193,234,149,40,65,33,48,242,66,26,192,218,193,112,49,31,65,33,48,242,66,0,128,187,193,145,15,48,65,33,48,242,66,26,64,156,193,53,239,76,65,33,48,242,66,0,0,122,193,180,89,94,65,33,48,242,66,52,128,59,193,52,162,110,65,33,48,242,66,0,0,250,192,255,178,118,65,33,48,242,66,0,0,122,192,131,192,128,65,33,48,242,66,0,0,0,0,86,125,136,65,33,48,242,66,0,0,122,64,248,66,148,65,33,48,242,66,0,0,122,195,42,198,11,64,66,96,234,66,16,24,118,195,119,21,194,63,66,96,234,66,33,48,114,195,10,218,32,63,66,96,234,66,240,71,110,195,15,100,17,191,66,96,234,66,0,96,106,195,231,0,1,192,66,96,234,66,16,120,102,195,6,76,90,192,66,96,234,66,33,144,98,195,18,247,116,192,66,96,234,66,240,167,94,195,237,129,160,192,66,96,234,66,0,192,90,195,107,241,151,192,66,96,234,66,16,216,86,195,245,190,83,192,66,96,234,66,33,240,82,195,163,204,20,192,66,96,234,66,240,7,79,195,18,136,219,191,66,96,234,66,0,32,75,195,112,148,152,191,66,96,234,66,16,56,71,195,21,196,96,62,66,96,234,66,33,80,67,195,127,222,212,63,66,96,234,66,240,103,63,195,205,59,139,64,66,96,234,66,0,128,59,195,10,162,202,64,66,96,234,66,16,152,55,195,208,39,0,65,66,96,234,66,33,176,51,195,17,112,27,65,66,96,234,66,240,199,47,195,251,92,44,65,66,96,234,66,0,224,43,195,94,186,53,65,66,96,234,66,16,248,39,195,229,97,72,65,66,96,234,66,33,16,36,195,120,11,106,65,66,96,234,66,240,39,32,195,187,167,137,65,66,96,234,66,0,64,28,195,189,210,159,65,66,96,234,66,16,88,24,195,131,175,187,65,66,96,234,66,33,112,20,195,235,226,212,65,66,96,234,66,240,135,16,195,63,181,227,65,66,96,234,66,0,160,12,195,252,41,238,65,66,96,234,66,16,184,8,195,21,140,248,65,66,96,234,66,33,208,4,195,76,183,254,65,66,96,234,66,240,231,0,195,199,169,0,66,66,96,234,66,0,0,250,194,191,253,10,66,66,96,234,66,33,48,242,194,230,63,16,66,66,96,234,66,66,96,234,194,175,20,21,66,66,96,234,66,223,143,226,194,189,99,21,66,66,96,234,66,0,192,218,194,207,247,20,66,66,96,234,66,33,240,210,194,27,158,16,66,66,96,234,66,66,32,203,194,172,156,5,66,66,96,234,66,7,80,195,194,29,90,250,65,66,96,234,66,0,128,187,194,3,248,235,65,66,96,234,66,7,176,179,194,222,113,232,65,66,96,234,66,0,224,171,194,162,52,226,65,66,96,234,66,7,16,164,194,191,14,213,65,66,96,234,66,0,64,156,194,249,160,198,65,66,96,234,66,7,112,148,194,126,157,181,65,66,96,234,66,0,160,140,194,174,199,163,65,66,96,234,66,7,208,132,194,59,223,143,65,66,96,234,66,0,0,122,194,41,109,130,65,66,96,234,66,13,96,106,194,214,86,99,65,66,96,234,66,0,192,90,194,7,240,76,65,66,96,234,66,13,32,75,194,165,189,72,65,66,96,234,66,0,128,59,194,127,217,66,65,66,96,234,66,13,224,43,194,193,57,50,65,66,96,234,66,0,64,28,194,149,101,39,65,66,96,234,66,13,160,12,194,69,216,48,65,66,96,234,66,0,0,250,193,150,67,55,65,66,96,234,66,26,192,218,193,87,236,40,65,66,96,234,66,0,128,187,193,243,31,42,65,66,96,234,66,26,64,156,193,16,233,72,65,66,96,234,66,0,0,122,193,86,159,88,65,66,96,234,66,52,128,59,193,52,17,102,65,66,96,234,66,0,0,250,192,196,177,119,65,66,96,234,66,0,0,122,192,112,206,128,65,66,96,234,66,0,0,0,0,164,240,138,65,66,96,234,66,0,0,122,64,29,90,151,65,66,96,234,66,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,126,0,127,0,128,0,129,0,128,0,127,0,128,0,129,0,130,0,131,0,130,0,129,0,132,0,0,0,133,0,2,0,133,0,0,0,133,0,2,0,134,0,4,0,134,0,2,0,134,0,4,0,135,0,6,0,135,0,4,0,135,0,6,0,136,0,8,0,136,0,6,0,136,0,8,0,137,0,10,0,137,0,8,0,137,0,10,0,138,0,12,0,138,0,10,0,138,0,12,0,139,0,14,0,139,0,12,0,139,0,14,0,140,0,16,0,140,0,14,0,140,0,16,0,141,0,18,0,141,0,16,0,141,0,18,0,142,0,20,0,142,0,18,0,142,0,20,0,143,0,22,0,143,0,20,0,143,0,22,0,144,0,24,0,144,0,22,0,144,0,24,0,145,0,26,0,145,0,24,0,145,0,26,0,146,0,28,0,146,0,26,0,146,0,28], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+215040);
/* memory initializer */ allocate([147,0,30,0,147,0,28,0,147,0,30,0,148,0,32,0,148,0,30,0,148,0,32,0,149,0,34,0,149,0,32,0,149,0,34,0,150,0,36,0,150,0,34,0,150,0,36,0,151,0,38,0,151,0,36,0,151,0,38,0,152,0,40,0,152,0,38,0,152,0,40,0,153,0,42,0,153,0,40,0,153,0,42,0,154,0,44,0,154,0,42,0,154,0,44,0,155,0,46,0,155,0,44,0,155,0,46,0,156,0,48,0,156,0,46,0,156,0,48,0,157,0,50,0,157,0,48,0,157,0,50,0,158,0,52,0,158,0,50,0,158,0,52,0,159,0,54,0,159,0,52,0,159,0,54,0,160,0,56,0,160,0,54,0,160,0,56,0,161,0,58,0,161,0,56,0,161,0,58,0,162,0,60,0,162,0,58,0,162,0,60,0,163,0,62,0,163,0,60,0,163,0,62,0,164,0,64,0,164,0,62,0,164,0,64,0,165,0,66,0,165,0,64,0,165,0,66,0,166,0,68,0,166,0,66,0,166,0,68,0,167,0,70,0,167,0,68,0,167,0,70,0,168,0,72,0,168,0,70,0,168,0,72,0,169,0,74,0,169,0,72,0,169,0,74,0,170,0,76,0,170,0,74,0,170,0,76,0,171,0,78,0,171,0,76,0,171,0,78,0,172,0,80,0,172,0,78,0,172,0,80,0,173,0,82,0,173,0,80,0,173,0,82,0,174,0,84,0,174,0,82,0,174,0,84,0,175,0,86,0,175,0,84,0,175,0,86,0,176,0,88,0,176,0,86,0,176,0,88,0,177,0,90,0,177,0,88,0,177,0,90,0,178,0,92,0,178,0,90,0,178,0,92,0,179,0,94,0,179,0,92,0,179,0,94,0,180,0,96,0,180,0,94,0,180,0,96,0,181,0,98,0,181,0,96,0,181,0,98,0,182,0,100,0,182,0,98,0,182,0,100,0,183,0,102,0,183,0,100,0,183,0,102,0,184,0,104,0,184,0,102,0,184,0,104,0,185,0,106,0,185,0,104,0,185,0,106,0,186,0,108,0,186,0,106,0,186,0,108,0,187,0,110,0,187,0,108,0,187,0,110,0,188,0,112,0,188,0,110,0,188,0,112,0,189,0,114,0,189,0,112,0,189,0,114,0,190,0,116,0,190,0,114,0,190,0,116,0,191,0,118,0,191,0,116,0,191,0,118,0,192,0,120,0,192,0,118,0,192,0,120,0,193,0,122,0,193,0,120,0,193,0,122,0,194,0,124,0,194,0,122,0,194,0,124,0,195,0,126,0,195,0,124,0,195,0,126,0,196,0,128,0,196,0,126,0,196,0,128,0,197,0,130,0,197,0,128,0,198,0,132,0,199,0,133,0,199,0,132,0,199,0,133,0,200,0,134,0,200,0,133,0,200,0,134,0,201,0,135,0,201,0,134,0,201,0,135,0,202,0,136,0,202,0,135,0,202,0,136,0,203,0,137,0,203,0,136,0,203,0,137,0,204,0,138,0,204,0,137,0,204,0,138,0,205,0,139,0,205,0,138,0,205,0,139,0,206,0,140,0,206,0,139,0,206,0,140,0,207,0,141,0,207,0,140,0,207,0,141,0,208,0,142,0,208,0,141,0,208,0,142,0,209,0,143,0,209,0,142,0,209,0,143,0,210,0,144,0,210,0,143,0,210,0,144,0,211,0,145,0,211,0,144,0,211,0,145,0,212,0,146,0,212,0,145,0,212,0,146,0,213,0,147,0,213,0,146,0,213,0,147,0,214,0,148,0,214,0,147,0,214,0,148,0,215,0,149,0,215,0,148,0,215,0,149,0,216,0,150,0,216,0,149,0,216,0,150,0,217,0,151,0,217,0,150,0,217,0,151,0,218,0,152,0,218,0,151,0,218,0,152,0,219,0,153,0,219,0,152,0,219,0,153,0,220,0,154,0,220,0,153,0,220,0,154,0,221,0,155,0,221,0,154,0,221,0,155,0,222,0,156,0,222,0,155,0,222,0,156,0,223,0,157,0,223,0,156,0,223,0,157,0,224,0,158,0,224,0,157,0,224,0,158,0,225,0,159,0,225,0,158,0,225,0,159,0,226,0,160,0,226,0,159,0,226,0,160,0,227,0,161,0,227,0,160,0,227,0,161,0,228,0,162,0,228,0,161,0,228,0,162,0,229,0,163,0,229,0,162,0,229,0,163,0,230,0,164,0,230,0,163,0,230,0,164,0,231,0,165,0,231,0,164,0,231,0,165,0,232,0,166,0,232,0,165,0,232,0,166,0,233,0,167,0,233,0,166,0,233,0,167,0,234,0,168,0,234,0,167,0,234,0,168,0,235,0,169,0,235,0,168,0,235,0,169,0,236,0,170,0,236,0,169,0,236,0,170,0,237,0,171,0,237,0,170,0,237,0,171,0,238,0,172,0,238,0,171,0,238,0,172,0,239,0,173,0,239,0,172,0,239,0,173,0,240,0,174,0,240,0,173,0,240,0,174,0,241,0,175,0,241,0,174,0,241,0,175,0,242,0,176,0,242,0,175,0,242,0,176,0,243,0,177,0,243,0,176,0,243,0,177,0,244,0,178,0,244,0,177,0,244,0,178,0,245,0,179,0,245,0,178,0,245,0,179,0,246,0,180,0,246,0,179,0,246,0,180,0,247,0,181,0,247,0,180,0,247,0,181,0,248,0,182,0,248,0,181,0,248,0,182,0,249,0,183,0,249,0,182,0,249,0,183,0,250,0,184,0,250,0,183,0,250,0,184,0,251,0,185,0,251,0,184,0,251,0,185,0,252,0,186,0,252,0,185,0,252,0,186,0,253,0,187,0,253,0,186,0,253,0,187,0,254,0,188,0,254,0,187,0,254,0,188,0,255,0,189,0,255,0,188,0,255,0,189,0,0,1,190,0,0,1,189,0,0,1,190,0,1,1,191,0,1,1,190,0,1,1,191,0,2,1,192,0,2,1,191,0,2,1,192,0,3,1,193,0,3,1,192,0,3,1,193,0,4,1,194,0,4,1,193,0,4,1,194,0,5,1,195,0,5,1,194,0,5,1,195,0,6,1,196,0,6,1,195,0,6,1,196,0,7,1,197,0,7,1,196,0,8,1,198,0,9,1,199,0,9,1,198,0,9,1,199,0,10,1,200,0,10,1,199,0,10,1,200,0,11,1,201,0,11,1,200,0,11,1,201,0,12,1,202,0,12,1,201,0,12,1,202,0,13,1,203,0,13,1,202,0,13,1,203,0,14,1,204,0,14,1,203,0,14,1,204,0,15,1,205,0,15,1,204,0,15,1,205,0,16,1,206,0,16,1,205,0,16,1,206,0,17,1,207,0,17,1,206,0,17,1,207,0,18,1,208,0,18,1,207,0,18,1,208,0,19,1,209,0,19,1,208,0,19,1,209,0,20,1,210,0,20,1,209,0,20,1,210,0,21,1,211,0,21,1,210,0,21,1,211,0,22,1,212,0,22,1,211,0,22,1,212,0,23,1,213,0,23,1,212,0,23,1,213,0,24,1,214,0,24,1,213,0,24,1,214,0,25,1,215,0,25,1,214,0,25,1,215,0,26,1,216,0,26,1,215,0,26,1,216,0,27,1,217,0,27,1,216,0,27,1,217,0,28,1,218,0,28,1,217,0,28,1,218,0,29,1,219,0,29,1,218,0,29,1,219,0,30,1,220,0,30,1,219,0,30,1,220,0,31,1,221,0,31,1,220,0,31,1,221,0,32,1,222,0,32,1,221,0,32,1,222,0,33,1,223,0,33,1,222,0,33,1,223,0,34,1,224,0,34,1,223,0,34,1,224,0,35,1,225,0,35,1,224,0,35,1,225,0,36,1,226,0,36,1,225,0,36,1,226,0,37,1,227,0,37,1,226,0,37,1,227,0,38,1,228,0,38,1,227,0,38,1,228,0,39,1,229,0,39,1,228,0,39,1,229,0,40,1,230,0,40,1,229,0,40,1,230,0,41,1,231,0,41,1,230,0,41,1,231,0,42,1,232,0,42,1,231,0,42,1,232,0,43,1,233,0,43,1,232,0,43,1,233,0,44,1,234,0,44,1,233,0,44,1,234,0,45,1,235,0,45,1,234,0,45,1,235,0,46,1,236,0,46,1,235,0,46,1,236,0,47,1,237,0,47,1,236,0,47,1,237,0,48,1,238,0,48,1,237,0,48,1,238,0,49,1,239,0,49,1,238,0,49,1,239,0,50,1,240,0,50,1,239,0,50,1,240,0,51,1,241,0,51,1,240,0,51,1,241,0,52,1,242,0,52,1,241,0,52,1,242,0,53,1,243,0,53,1,242,0,53,1,243,0,54,1,244,0,54,1,243,0,54,1,244,0,55,1,245,0,55,1,244,0,55,1,245,0,56,1,246,0,56,1,245,0,56,1,246,0,57,1,247,0,57,1,246,0,57,1,247,0,58,1,248,0,58,1,247,0,58,1,248,0,59,1,249,0,59,1,248,0,59,1,249,0,60,1,250,0,60,1,249,0,60,1,250,0,61,1,251,0,61,1,250,0,61,1,251,0,62,1,252,0,62,1,251,0,62,1,252,0,63,1,253,0,63,1,252,0,63,1,253,0,64,1,254,0,64,1,253,0,64,1,254,0,65,1,255,0,65,1,254,0,65,1,255,0,66,1,0,1,66,1,255,0,66,1,0,1,67,1,1,1,67,1,0,1,67,1,1,1,68,1,2,1,68,1,1,1,68,1,2,1,69,1,3,1,69,1,2,1,69,1,3,1,70,1,4,1,70,1,3,1,70,1,4,1,71,1,5,1,71,1,4,1,71,1,5,1,72,1,6,1,72,1,5,1,72,1,6,1,73,1,7,1,73,1,6,1,74,1,8,1,75,1,9,1,75,1,8,1,75,1,9,1,76,1,10,1,76,1,9,1,76,1,10,1,77,1,11,1,77,1,10,1,77,1,11,1,78,1,12,1,78,1,11,1,78,1,12,1,79,1,13,1,79,1,12,1,79,1,13,1,80,1,14,1,80,1,13,1,80,1,14,1,81,1,15,1,81,1,14,1,81,1,15,1,82,1,16,1,82,1,15,1,82,1,16,1,83,1,17,1,83,1,16,1,83,1,17,1,84,1,18,1,84,1,17,1,84,1,18,1,85,1,19,1,85,1,18,1,85,1,19,1,86,1,20,1,86,1,19,1,86,1,20,1,87,1,21,1,87,1,20,1,87,1,21,1,88,1,22,1,88,1,21,1,88,1,22,1,89,1,23,1,89,1,22,1,89,1,23,1,90,1,24,1,90,1,23,1,90,1,24,1,91,1,25,1,91,1,24,1,91,1,25,1,92,1,26,1,92,1,25,1,92,1,26,1,93,1,27,1,93,1,26,1,93,1,27,1,94,1,28,1,94,1,27,1,94,1,28,1,95,1,29,1,95,1,28,1,95,1,29,1,96,1,30,1,96,1,29,1,96,1,30,1,97,1,31,1,97,1,30,1,97,1,31,1,98,1,32,1,98,1,31,1,98,1,32,1,99,1,33,1,99,1,32,1,99,1,33,1,100,1,34,1,100,1,33,1,100,1,34,1,101,1,35,1,101,1,34,1,101,1,35,1,102,1,36,1,102,1,35,1,102,1,36,1,103,1,37,1,103,1,36,1,103,1,37,1,104,1,38,1,104,1,37,1,104,1,38,1,105,1,39,1,105,1,38,1,105,1,39,1,106,1,40,1,106,1,39,1,106,1,40,1,107,1,41,1,107,1,40,1,107,1,41,1,108,1,42,1,108,1,41,1,108,1,42,1,109,1,43,1,109,1,42,1,109,1,43,1,110,1,44,1,110,1,43,1,110,1,44,1,111,1,45,1,111,1,44,1,111,1,45,1,112,1,46,1,112,1,45,1,112,1,46,1,113,1,47,1,113,1,46,1,113,1,47,1,114,1,48,1,114,1,47,1,114,1,48,1,115,1,49,1,115,1,48,1,115,1,49,1,116,1,50,1,116,1,49,1,116,1,50,1,117,1,51,1,117,1,50,1,117,1,51,1,118,1,52,1,118,1,51,1,118,1,52,1,119,1,53,1,119,1,52,1,119,1,53,1,120,1,54,1,120,1,53,1,120,1,54,1,121,1,55,1,121,1,54,1,121,1,55,1,122,1,56,1,122,1,55,1,122,1,56,1,123,1,57,1,123,1,56,1,123,1,57,1,124,1,58,1,124,1,57,1,124,1,58,1,125,1,59,1,125,1,58,1,125,1,59,1,126,1,60,1,126,1,59,1,126,1,60,1,127,1,61,1,127,1,60,1,127,1,61,1,128,1,62,1,128,1,61,1,128,1,62,1,129,1,63,1,129,1,62,1,129,1,63,1,130,1,64,1,130,1,63,1,130,1,64,1,131,1,65,1,131,1,64,1,131,1,65,1,132,1,66,1,132,1,65,1,132,1,66,1,133,1,67,1,133,1,66,1,133,1,67,1,134,1,68,1,134,1,67,1,134,1,68,1,135,1,69,1,135,1,68,1,135,1,69,1,136,1,70,1,136,1,69,1,136,1,70,1,137,1,71,1,137,1,70,1,137,1,71,1,138,1,72,1,138,1,71,1,138,1,72,1,139,1,73,1,139,1,72,1,140,1,74,1,141,1,75,1,141,1,74,1,141,1,75,1,142,1,76,1,142,1,75,1,142,1,76,1,143,1,77,1,143,1,76,1,143,1,77,1,144,1,78,1,144,1,77,1,144,1,78,1,145,1,79,1,145,1,78,1,145,1,79,1,146,1,80,1,146,1,79,1,146,1,80,1,147,1,81,1,147,1,80,1,147,1,81,1,148,1,82,1,148,1,81,1,148,1,82,1,149,1,83,1,149,1,82,1,149,1,83,1,150,1,84,1,150,1,83,1,150,1,84,1,151,1,85,1,151,1,84,1,151,1,85,1,152,1,86,1,152,1,85,1,152,1,86,1,153,1,87,1,153,1,86,1,153,1,87,1,154,1,88,1,154,1,87,1,154,1,88,1,155,1,89,1,155,1,88,1,155,1,89,1,156,1,90,1,156,1,89,1,156,1,90,1,157,1,91,1,157,1,90,1,157,1,91,1,158,1,92,1,158,1,91,1,158,1,92,1,159,1,93,1,159,1,92,1,159,1,93,1,160,1,94,1,160,1,93,1,160,1,94,1,161,1,95,1,161,1,94,1,161,1,95,1,162,1,96,1,162,1,95,1,162,1,96,1,163,1,97,1,163,1,96,1,163,1,97,1,164,1,98,1,164,1,97,1,164,1,98,1,165,1,99,1,165,1,98,1,165,1,99,1,166,1,100,1,166,1,99,1,166,1,100,1,167,1,101,1,167,1,100,1,167,1,101,1,168,1,102,1,168,1,101,1,168,1,102,1,169,1,103,1,169,1,102,1,169,1,103,1,170,1,104,1,170,1,103,1,170,1,104,1,171,1,105,1,171,1,104,1,171,1,105,1,172,1,106,1,172,1,105,1,172,1,106,1,173,1,107,1,173,1,106,1,173,1,107,1,174,1,108,1,174,1,107,1,174,1,108,1,175,1,109,1,175,1,108,1,175,1,109,1,176,1,110,1,176,1,109,1,176,1,110,1,177,1,111,1,177,1,110,1,177,1,111,1,178,1,112,1,178,1,111,1,178,1,112,1,179,1,113,1,179,1,112,1,179,1,113,1,180,1,114,1,180,1,113,1,180,1,114,1,181,1,115,1,181,1,114,1,181,1,115,1,182,1,116,1,182,1,115,1,182,1,116,1,183,1,117,1,183,1,116,1,183,1,117,1,184,1,118,1,184,1,117,1,184,1,118,1,185,1,119,1,185,1,118,1,185,1,119,1,186,1,120,1,186,1,119,1,186,1,120,1,187,1,121,1,187,1,120,1,187,1,121,1,188,1,122,1,188,1,121,1,188,1,122,1,189,1,123,1,189,1,122,1,189,1,123,1,190,1,124,1,190,1,123,1,190,1,124,1,191,1,125,1,191,1,124,1,191,1,125,1,192,1,126,1,192,1,125,1,192,1,126,1,193,1,127,1,193,1,126,1,193,1,127,1,194,1,128,1,194,1,127,1,194,1,128,1,195,1,129,1,195,1,128,1,195,1,129,1,196,1,130,1,196,1,129,1,196,1,130,1,197,1,131,1,197,1,130,1,197,1,131,1,198,1,132,1,198,1,131,1,198,1,132,1,199,1,133,1,199,1,132,1,199,1,133,1,200,1,134,1,200,1,133,1,200,1,134,1,201,1,135,1,201,1,134,1,201,1,135,1,202,1,136,1,202,1,135,1,202,1,136,1,203,1,137,1,203,1,136,1,203,1,137,1,204,1,138,1,204,1,137,1,204,1,138,1,205,1,139,1,205,1,138,1,206,1,140,1,207,1,141,1,207,1,140,1,207,1,141,1,208,1,142,1,208,1,141,1,208,1,142,1,209,1,143,1,209,1,142,1,209,1,143,1,210,1,144,1,210,1,143,1,210,1,144,1,211,1,145,1,211,1,144,1,211,1,145,1,212,1,146,1,212,1,145,1,212,1,146,1,213,1,147,1,213,1,146,1,213,1,147,1,214,1,148,1,214,1,147,1,214,1,148,1,215,1,149,1,215,1,148,1,215,1,149,1,216,1,150,1,216,1,149,1,216,1,150,1,217,1,151,1,217,1,150,1,217,1,151,1,218,1,152,1,218,1,151,1,218,1,152,1,219,1,153,1,219,1,152,1,219,1,153,1,220,1,154,1,220,1,153,1,220,1,154,1,221,1,155,1,221,1,154,1,221,1,155,1,222,1,156,1,222,1,155,1,222,1,156,1,223,1,157,1,223,1,156,1,223,1,157,1,224,1,158,1,224,1,157,1,224,1,158,1,225,1,159,1,225,1,158,1,225,1,159,1,226,1,160,1,226,1,159,1,226,1,160,1,227,1,161,1,227,1,160,1,227,1,161,1,228,1,162,1,228,1,161,1,228,1,162,1,229,1,163,1,229,1,162,1,229,1,163,1,230,1,164,1,230,1,163,1,230,1,164,1,231,1,165,1,231,1,164,1,231,1,165,1,232,1,166,1,232,1,165,1,232,1,166,1,233,1,167,1,233,1,166,1,233,1,167,1,234,1,168,1,234,1,167,1,234,1,168,1,235,1,169,1,235,1,168,1,235,1,169,1,236,1,170,1,236,1,169,1,236,1,170,1,237,1,171,1,237,1,170,1,237,1,171,1,238,1,172,1,238,1,171,1,238,1,172,1,239,1,173,1,239,1,172,1,239,1,173,1,240,1,174,1,240,1,173,1,240,1,174,1,241,1,175,1,241,1,174,1,241,1,175,1,242,1,176,1,242,1,175,1,242,1,176,1,243,1,177,1,243,1,176,1,243,1,177,1,244,1,178,1,244,1,177,1,244,1,178,1,245,1,179,1,245,1,178,1,245,1,179,1,246,1,180,1,246,1,179,1,246,1,180,1,247,1,181,1,247,1,180,1,247,1,181,1,248,1,182,1,248,1,181,1,248,1,182,1,249,1,183,1,249,1,182,1,249,1,183,1,250,1,184,1,250,1,183,1,250,1,184,1,251,1,185,1,251,1,184,1,251,1,185,1,252,1,186,1,252,1,185,1,252,1,186,1,253,1,187,1,253,1,186,1,253,1,187,1,254,1,188,1,254,1,187,1,254,1,188,1,255,1,189,1,255,1,188,1,255,1,189,1,0,2,190,1,0,2,189,1,0,2,190,1,1,2,191,1,1,2,190,1,1,2,191,1,2,2,192,1,2,2,191,1,2,2,192,1,3,2,193,1,3,2,192,1,3,2,193,1,4,2,194,1,4,2,193,1,4,2,194,1,5,2,195,1,5,2,194,1,5,2,195,1,6,2,196,1,6,2,195,1,6,2,196,1,7,2,197,1,7,2,196,1,7,2,197,1,8,2,198,1,8,2,197,1,8,2,198,1,9,2,199,1,9,2,198,1,9,2,199,1,10,2,200,1,10,2,199,1,10,2,200,1,11,2,201,1,11,2,200,1,11,2,201,1,12,2,202,1,12,2,201,1,12,2,202,1,13,2,203,1,13,2,202,1,13,2,203,1,14,2,204,1,14,2,203,1,14,2,204,1,15,2,205,1,15,2,204,1,16,2,206,1,17,2,207,1,17,2,206,1,17,2,207,1,18,2,208,1,18,2,207,1,18,2,208,1,19,2,209,1,19,2,208,1,19,2,209,1,20,2,210,1,20,2,209,1,20,2,210,1,21,2,211,1,21,2,210,1,21,2,211,1,22,2,212,1,22,2,211,1,22,2,212,1,23,2,213,1,23,2,212,1,23,2,213,1,24,2,214,1,24,2,213,1,24,2,214,1,25,2,215,1,25,2,214,1,25,2,215,1,26,2,216,1,26,2,215,1,26,2,216,1,27,2,217,1,27,2,216,1,27,2,217,1,28,2,218,1,28,2,217,1,28,2,218,1,29,2,219,1,29,2,218,1,29,2,219,1,30,2,220,1,30,2,219,1,30,2,220,1,31,2,221,1,31,2,220,1,31,2,221,1,32,2,222,1,32,2,221,1,32,2,222,1,33,2,223,1,33,2,222,1,33,2,223,1,34,2,224,1,34,2,223,1,34,2,224,1,35,2,225,1,35,2,224,1,35,2,225,1,36,2,226,1,36,2,225,1,36,2,226,1,37,2,227,1,37,2,226,1,37,2,227,1,38,2,228,1,38,2,227,1,38,2,228,1,39,2,229,1,39,2,228,1,39,2,229,1,40,2,230,1,40,2,229,1,40,2,230,1,41,2,231,1,41,2,230,1,41,2,231,1,42,2,232,1,42,2,231,1,42,2,232,1,43,2,233,1,43,2,232,1,43,2,233,1,44,2,234,1,44,2,233,1,44,2,234,1,45,2,235,1,45,2,234,1,45,2,235,1,46,2,236,1,46,2,235,1,46,2,236,1,47,2,237,1,47,2,236,1,47,2,237,1,48,2,238,1,48,2,237,1,48,2,238,1,49,2,239,1,49,2,238,1,49,2,239,1,50,2,240,1,50,2,239,1,50,2,240,1,51,2,241,1,51,2,240,1,51,2,241,1,52,2,242,1,52,2,241,1,52,2,242,1,53,2,243,1,53,2,242,1,53,2,243,1,54,2,244,1,54,2,243,1,54,2,244,1,55,2,245,1,55,2,244,1,55,2,245,1,56,2,246,1,56,2,245,1,56,2,246,1,57,2,247,1,57,2,246,1,57,2,247,1,58,2,248,1,58,2,247,1,58,2,248,1,59,2,249,1,59,2,248,1,59,2,249,1,60,2,250,1,60,2,249,1,60,2,250,1,61,2,251,1,61,2,250,1,61,2,251,1,62,2,252,1,62,2,251,1,62,2,252,1,63,2,253,1,63,2,252,1,63,2,253,1,64,2,254,1,64,2,253,1,64,2,254,1,65,2,255,1,65,2,254,1,65,2,255,1,66,2,0,2,66,2,255,1,66,2,0,2,67,2,1,2,67,2,0,2,67,2,1,2,68,2,2,2,68,2,1,2,68,2,2,2,69,2,3,2,69,2,2,2,69,2,3,2,70,2,4,2,70,2,3,2,70,2,4,2,71,2,5,2,71,2,4,2,71,2,5,2,72,2,6,2,72,2,5,2,72,2,6,2,73,2,7,2,73,2,6,2,73,2,7,2,74,2,8,2,74,2,7,2,74,2,8,2,75,2,9,2,75,2,8,2,75,2,9,2,76,2,10,2,76,2,9,2,76,2,10,2,77,2,11,2,77,2,10,2,77,2,11,2,78,2,12,2,78,2,11,2,78,2,12,2,79,2,13,2,79,2,12,2,79,2,13,2,80,2,14,2,80,2,13,2,80,2,14,2,81,2,15,2,81,2,14,2,82,2,16,2,83,2,17,2,83,2,16,2,83,2,17,2,84,2,18,2,84,2,17,2,84,2,18,2,85,2,19,2,85,2,18,2,85,2,19,2,86,2,20,2,86,2,19,2,86,2,20,2,87,2,21,2,87,2,20,2,87,2,21,2,88,2,22,2,88,2,21,2,88,2,22,2,89,2,23,2,89,2,22,2,89,2,23,2,90,2,24,2,90,2,23,2,90,2,24,2,91,2,25,2,91,2,24,2,91,2,25,2,92,2,26,2,92,2,25,2,92,2,26,2,93,2,27,2,93,2,26,2,93,2,27,2,94,2,28,2,94,2,27,2,94,2,28,2,95,2,29,2,95,2,28,2,95,2,29,2,96,2,30,2,96,2,29,2,96,2,30,2,97,2,31,2,97,2,30,2,97,2,31,2,98,2,32,2,98,2,31,2,98,2,32,2,99,2,33,2,99,2,32,2,99,2,33,2,100,2,34,2,100,2,33,2,100,2,34,2,101,2,35,2,101,2,34,2,101,2,35,2,102,2,36,2,102,2,35,2,102,2,36,2,103,2,37,2,103,2,36,2,103,2,37,2,104,2,38,2,104,2,37,2,104,2,38,2,105,2,39,2,105,2,38,2,105,2,39,2,106,2,40,2,106,2,39,2,106,2,40,2,107,2,41,2,107,2,40,2,107,2,41,2,108,2,42,2,108,2,41,2,108,2,42,2,109,2,43,2,109,2,42,2,109,2,43,2,110,2,44,2,110,2,43,2,110,2,44,2,111,2,45,2,111,2,44,2,111,2,45,2,112,2,46,2,112,2,45,2,112,2,46,2,113,2,47,2,113,2,46,2,113,2,47,2,114,2,48,2,114,2,47,2,114,2,48,2,115,2,49,2,115,2,48,2,115,2,49,2,116,2,50,2,116,2,49,2,116,2,50,2,117,2,51,2,117,2,50,2,117,2,51,2,118,2,52,2,118,2,51,2,118,2,52,2,119,2,53,2,119,2,52,2,119,2,53,2,120,2,54,2,120,2,53,2,120,2,54,2,121,2,55,2,121,2,54,2,121,2,55,2,122,2,56,2,122,2,55,2,122,2,56,2,123,2,57,2,123,2,56,2,123,2,57,2,124,2,58,2,124,2,57,2,124,2,58,2,125,2,59,2,125,2,58,2,125,2,59,2,126,2,60,2,126,2,59,2,126,2,60,2,127,2,61,2,127,2,60,2,127,2,61,2,128,2,62,2,128,2,61,2,128,2,62,2,129,2,63,2,129,2,62,2,129,2,63,2,130,2,64,2,130,2,63,2,130,2,64,2,131,2,65,2,131,2,64,2,131,2,65,2,132,2,66,2,132,2,65,2,132,2,66,2,133,2,67,2,133,2,66,2,133,2,67,2,134,2,68,2,134,2,67,2,134,2,68,2,135,2,69,2,135,2,68,2,135,2,69,2,136,2,70,2,136,2,69,2,136,2,70,2,137,2,71,2,137,2,70,2,137,2,71,2,138,2,72,2,138,2,71,2,138,2,72,2,139,2,73,2,139,2,72,2,139,2,73,2,140,2,74,2,140,2,73,2,140,2,74,2,141,2,75,2,141,2,74,2,141,2,75,2,142,2,76,2,142,2,75,2,142,2,76,2,143,2,77,2,143,2,76,2,143,2,77,2,144,2,78,2,144,2,77,2,144,2,78,2,145,2,79,2,145,2,78,2,145,2,79,2,146,2,80,2,146,2,79,2,146,2,80,2,147,2,81,2,147,2,80,2,148,2,82,2,149,2,83,2,149,2,82,2,149,2,83,2,150,2,84,2,150,2,83,2,150,2,84,2,151,2,85,2,151,2,84,2,151,2,85,2,152,2,86,2,152,2,85,2,152,2,86,2,153,2,87,2,153,2,86,2,153,2,87,2,154,2,88,2,154,2,87,2,154,2,88,2,155,2,89,2,155,2,88,2,155,2,89,2,156,2,90,2,156,2,89,2,156,2,90,2,157,2,91,2,157,2,90,2,157,2,91,2,158,2,92,2,158,2,91,2,158,2,92,2,159,2,93,2,159,2,92,2,159,2,93,2,160,2,94,2,160,2,93,2,160,2,94,2,161,2,95,2,161,2,94,2,161,2,95,2,162,2,96,2,162,2,95,2,162,2,96,2,163,2,97,2,163,2,96,2,163,2,97,2,164,2,98,2,164,2,97,2,164,2,98,2,165,2,99,2,165,2,98,2,165,2,99,2,166,2,100,2,166,2,99,2,166,2,100,2,167,2,101,2,167,2,100,2,167,2,101,2,168,2,102,2,168,2,101,2,168,2,102,2,169,2,103,2,169,2,102,2,169,2,103,2,170,2,104,2,170,2,103,2,170,2,104,2,171,2,105,2,171,2,104,2,171,2,105,2,172,2,106,2,172,2,105,2,172,2,106,2,173,2,107,2,173,2,106,2,173,2,107,2,174,2,108,2,174,2,107,2,174,2,108,2,175,2,109,2,175,2,108,2,175,2,109,2,176,2,110,2,176,2,109,2,176,2,110,2,177,2,111,2,177,2,110,2,177,2,111,2,178,2,112,2,178,2,111,2,178,2,112,2,179,2,113,2,179,2,112,2,179,2,113,2,180,2,114,2,180,2,113,2,180,2,114,2,181,2,115,2,181,2,114,2,181,2,115,2,182,2,116,2,182,2,115,2,182,2,116,2,183,2,117,2,183,2,116,2,183,2,117,2,184,2,118,2,184,2,117,2,184,2,118,2,185,2,119,2,185,2,118,2,185,2,119,2,186,2,120,2,186,2,119,2,186,2,120,2,187,2,121,2,187,2,120,2,187,2,121,2,188,2,122,2,188,2,121,2,188,2,122,2,189,2,123,2,189,2,122,2,189,2,123,2,190,2,124,2,190,2,123,2,190,2,124,2,191,2,125,2,191,2,124,2,191,2,125,2,192,2,126,2,192,2,125,2,192,2,126,2,193,2,127,2,193,2,126,2,193,2,127,2,194,2,128,2,194,2,127,2,194,2,128,2,195,2,129,2,195,2,128,2,195,2,129,2,196,2,130,2,196,2,129,2,196,2,130,2,197,2,131,2,197,2,130,2,197,2,131,2,198,2,132,2,198,2,131,2,198,2,132,2,199,2,133,2,199,2,132,2,199,2,133,2,200,2,134,2,200,2,133,2,200,2,134,2,201,2,135,2,201,2,134,2,201,2,135,2,202,2,136,2,202,2,135,2,202,2,136,2,203,2,137,2,203,2,136,2,203,2,137,2,204,2,138,2,204,2,137,2,204,2,138,2,205,2,139,2,205,2,138,2,205,2,139,2,206,2,140,2,206,2,139,2,206,2,140,2,207,2,141,2,207,2,140,2,207,2,141,2,208,2,142,2,208,2,141,2,208,2,142,2,209,2,143,2,209,2,142,2,209,2,143,2,210,2,144,2,210,2,143,2,210,2,144,2,211,2,145,2,211,2,144,2,211,2,145,2,212,2,146,2,212,2,145,2,212,2,146,2,213,2,147,2,213,2,146,2,214,2,148,2,215,2,149,2,215,2,148,2,215,2,149,2,216,2,150,2,216,2,149,2,216,2,150,2,217,2,151,2,217,2,150,2,217,2,151,2,218,2,152,2,218,2,151,2,218,2,152,2,219,2,153,2,219,2,152,2,219,2,153,2,220,2,154,2,220,2,153,2,220,2,154,2,221,2,155,2,221,2,154,2,221,2,155,2,222,2,156,2,222,2,155,2,222,2,156,2,223,2,157,2,223,2,156,2,223,2,157,2,224,2,158,2,224,2,157,2,224,2,158,2,225,2,159,2,225,2,158,2,225,2,159,2,226,2,160,2,226,2,159,2,226,2,160,2,227,2,161,2,227,2,160,2,227,2,161,2,228,2,162,2,228,2,161,2,228,2,162,2,229,2,163,2,229,2,162,2,229,2,163,2,230,2,164,2,230,2,163,2,230,2,164,2,231,2,165,2,231,2,164,2,231,2,165,2,232,2,166,2,232,2,165,2,232,2,166,2,233,2,167,2,233,2,166,2,233,2,167,2,234,2,168,2,234,2,167,2,234,2,168,2,235,2,169,2,235,2,168,2,235,2,169,2,236,2,170,2,236,2,169,2,236,2,170,2,237,2,171,2,237,2,170,2,237,2,171,2,238,2,172,2,238,2,171,2,238,2,172,2,239,2,173,2,239,2,172,2,239,2,173,2,240,2,174,2,240,2,173,2,240,2,174,2,241,2,175,2,241,2,174,2,241,2,175,2,242,2,176,2,242,2,175,2,242,2,176,2,243,2,177,2,243,2,176,2,243,2,177,2,244,2,178,2,244,2,177,2,244,2,178,2,245,2,179,2,245,2,178,2,245,2,179,2,246,2,180,2,246,2,179,2,246,2,180,2,247,2,181,2,247,2,180,2,247,2,181,2,248,2,182,2,248,2,181,2,248,2,182,2,249,2,183,2,249,2,182,2,249,2,183,2,250,2,184,2,250,2,183,2,250,2,184,2,251,2,185,2,251,2,184,2,251,2,185,2,252,2,186,2,252,2,185,2,252,2,186,2,253,2,187,2,253,2,186,2,253,2,187,2,254,2,188,2,254,2,187,2,254,2,188,2,255,2,189,2,255,2,188,2,255,2,189,2,0,3,190,2,0,3,189,2,0,3,190,2,1,3,191,2,1,3,190,2,1,3,191,2,2,3,192,2,2,3,191,2,2,3,192,2,3,3,193,2,3,3,192,2,3,3,193,2,4,3,194,2,4,3,193,2,4,3,194,2,5,3,195,2,5,3,194,2,5,3,195,2,6,3,196,2,6,3,195,2,6,3,196,2,7,3,197,2,7,3,196,2,7,3,197,2,8,3,198,2,8,3,197,2,8,3,198,2,9,3,199,2,9,3,198,2,9,3,199,2,10,3,200,2,10,3,199,2,10,3,200,2,11,3,201,2,11,3,200,2,11,3,201,2,12,3,202,2,12,3,201,2,12,3,202,2,13,3,203,2,13,3,202,2,13,3,203,2,14,3,204,2,14,3,203,2,14,3,204,2,15,3,205,2,15,3,204,2,15,3,205,2,16,3,206,2,16,3,205,2,16,3,206,2,17,3,207,2,17,3,206,2,17,3,207,2,18,3,208,2,18,3,207,2,18,3,208,2,19,3,209,2,19,3,208,2,19,3,209,2,20,3,210,2,20,3,209,2,20,3,210,2,21,3,211,2,21,3,210,2,21,3,211,2,22,3,212,2,22,3,211,2,22,3,212,2,23,3,213,2,23,3,212,2,24,3,214,2,25,3,215,2,25,3,214,2,25,3,215,2,26,3,216,2,26,3,215,2,26,3,216,2,27,3,217,2,27,3,216,2,27,3,217,2,28,3,218,2,28,3,217,2,28,3,218,2,29,3,219,2,29,3,218,2,29,3,219,2,30,3,220,2,30,3,219,2,30,3,220,2,31,3,221,2,31,3,220,2,31,3,221,2,32,3,222,2,32,3,221,2,32,3,222,2,33,3,223,2,33,3,222,2,33,3,223,2,34,3,224,2,34,3,223,2,34,3,224,2,35,3,225,2,35,3,224,2,35,3,225,2,36,3,226,2,36,3,225,2,36,3,226,2,37,3,227,2,37,3,226,2,37,3,227,2,38,3,228,2,38,3,227,2,38,3,228,2,39,3,229,2,39,3,228,2,39,3,229,2,40,3,230,2,40,3,229,2,40,3,230,2,41,3,231,2,41,3,230,2,41,3,231,2,42,3,232,2,42,3,231,2,42,3,232,2,43,3,233,2,43,3,232,2,43,3,233,2,44,3,234,2,44,3,233,2,44,3,234,2,45,3,235,2,45,3,234,2,45,3,235,2,46,3,236,2,46,3,235,2,46,3,236,2,47,3,237,2,47,3,236,2,47,3,237,2,48,3,238,2,48,3,237,2,48,3,238,2,49,3,239,2,49,3,238,2,49,3,239,2,50,3,240,2,50,3,239,2,50,3,240,2,51,3,241,2,51,3,240,2,51,3,241,2,52,3,242,2,52,3,241,2,52,3,242,2,53,3,243,2,53,3,242,2,53,3,243,2,54,3,244,2,54,3,243,2,54,3,244,2,55,3,245,2,55,3,244,2,55,3,245,2,56,3,246,2,56,3,245,2,56,3,246,2,57,3,247,2,57,3,246,2,57,3,247,2,58,3,248,2,58,3,247,2,58,3,248,2,59,3,249,2,59,3,248,2,59,3,249,2,60,3,250,2,60,3,249,2,60,3,250,2,61,3,251,2,61,3,250,2,61,3,251,2,62,3,252,2,62,3,251,2,62,3,252,2,63,3,253,2,63,3,252,2,63,3,253,2,64,3,254,2,64,3,253,2,64,3,254,2,65,3,255,2,65,3,254,2,65,3,255,2,66,3,0,3,66,3,255,2,66,3,0,3,67,3,1,3,67,3,0,3,67,3,1,3,68,3,2,3,68,3,1,3,68,3,2,3,69,3,3,3,69,3,2,3,69,3,3,3,70,3,4,3,70,3,3,3,70,3,4,3,71,3,5,3,71,3,4,3,71,3,5,3,72,3,6,3,72,3,5,3,72,3,6,3,73,3,7,3,73,3,6,3,73,3,7,3,74,3,8,3,74,3,7,3,74,3,8,3,75,3,9,3,75,3,8,3,75,3,9,3,76,3,10,3,76,3,9,3,76,3,10,3,77,3,11,3,77,3,10,3,77,3,11,3,78,3,12,3,78,3,11,3,78,3,12,3,79,3,13,3,79,3,12,3,79,3,13,3,80,3,14,3,80,3,13,3,80,3,14,3,81,3,15,3,81,3,14,3,81,3,15,3,82,3,16,3,82,3,15,3,82,3,16,3,83,3,17,3,83,3,16,3,83,3,17,3,84,3,18,3,84,3,17,3,84,3,18,3,85,3,19,3,85,3,18,3,85,3,19,3,86,3,20,3,86,3,19,3,86,3,20,3,87,3,21,3,87,3,20,3,87,3,21,3,88,3,22,3,88,3,21,3,88,3,22,3,89,3,23,3,89,3,22,3,90,3,24,3,91,3,25,3,91,3,24,3,91,3,25,3,92,3,26,3,92,3,25,3,92,3,26,3,93,3,27,3,93,3,26,3,93,3,27,3,94,3,28,3,94,3,27,3,94,3,28,3,95,3,29,3,95,3,28,3,95,3,29,3,96,3,30,3,96,3,29,3,96,3,30,3,97,3,31,3,97,3,30,3,97,3,31,3,98,3,32,3,98,3,31,3,98,3,32,3,99,3,33,3,99,3,32,3,99,3,33,3,100,3,34,3,100,3,33,3,100,3,34,3,101,3,35,3,101,3,34,3,101,3,35,3,102,3,36,3,102,3,35,3,102,3,36,3,103,3,37,3,103,3,36,3,103,3,37,3,104,3,38,3,104,3,37,3,104,3,38,3,105,3,39,3,105,3,38,3,105,3,39,3,106,3,40,3,106,3,39,3,106,3,40,3,107,3,41,3,107,3,40,3,107,3,41,3,108,3,42,3,108,3,41,3,108,3,42,3,109,3,43,3,109,3,42,3,109,3,43,3,110,3,44,3,110,3,43,3,110,3,44,3,111,3,45,3,111,3,44,3,111,3,45,3,112,3,46,3,112,3,45,3,112,3,46,3,113,3,47,3,113,3,46,3,113,3,47,3,114,3,48,3,114,3,47,3,114,3,48,3,115,3,49,3,115,3,48,3,115,3,49,3,116,3,50,3,116,3,49,3,116,3,50,3,117,3,51,3,117,3,50,3,117,3,51,3,118,3,52,3,118,3,51,3,118,3,52,3,119,3,53,3,119,3,52,3,119,3,53,3,120,3,54,3,120,3,53,3,120,3,54,3,121,3,55,3,121,3,54,3,121,3,55,3,122,3,56,3,122,3,55,3,122,3,56,3,123,3,57,3,123,3,56,3,123,3,57,3,124,3,58,3,124,3,57,3,124,3,58,3,125,3,59,3,125,3,58,3,125,3,59,3,126,3,60,3,126,3,59,3,126,3,60,3,127,3,61,3,127,3,60,3,127,3,61,3,128,3,62,3,128,3,61,3,128,3,62,3,129,3,63,3,129,3,62,3,129,3,63,3,130,3,64,3,130,3,63,3,130,3,64,3,131,3,65,3,131,3,64,3,131,3,65,3,132,3,66,3,132,3,65,3,132,3,66,3,133,3,67,3,133,3,66,3,133,3,67,3,134,3,68,3,134,3,67,3,134,3,68,3,135,3,69,3,135,3,68,3,135,3,69,3,136,3,70,3,136,3,69,3,136,3,70,3,137,3,71,3,137,3,70,3,137,3,71,3,138,3,72,3,138,3,71,3,138,3,72,3,139,3,73,3,139,3,72,3,139,3,73,3,140,3,74,3,140,3,73,3,140,3,74,3,141,3,75,3,141,3,74,3,141,3,75,3,142,3,76,3,142,3,75,3,142,3,76,3,143,3,77,3,143,3,76,3,143,3,77,3,144,3,78,3,144,3,77,3,144,3,78,3,145,3,79,3,145,3,78,3,145,3,79,3,146,3,80,3,146,3,79,3,146,3,80,3,147,3,81,3,147,3,80,3,147,3,81,3,148,3,82,3,148,3,81,3,148,3,82,3,149,3,83,3,149,3,82,3,149,3,83,3,150,3,84,3,150,3,83,3,150,3,84,3,151,3,85,3,151,3,84,3,151,3,85,3,152,3,86,3,152,3,85,3,152,3,86,3,153,3,87,3,153,3,86,3,153,3,87,3,154,3,88,3,154,3,87,3,154,3,88,3,155,3,89,3,155,3,88,3,156,3,90,3,157,3,91,3,157,3,90,3,157,3,91,3,158,3,92,3,158,3,91,3,158,3,92,3,159,3,93,3,159,3,92,3,159,3,93,3,160,3,94,3,160,3,93,3,160,3,94,3,161,3,95,3,161,3,94,3,161,3,95,3,162,3,96,3,162,3,95,3,162,3,96,3,163,3,97,3,163,3,96,3,163,3,97,3,164,3,98,3,164,3,97,3,164,3,98,3,165,3,99,3,165,3,98,3,165,3,99,3,166,3,100,3,166,3,99,3,166,3,100,3,167,3,101,3,167,3,100,3,167,3,101,3,168,3,102,3,168,3,101,3,168,3,102,3,169,3,103,3,169,3,102,3,169,3,103,3,170,3,104,3,170,3,103,3,170,3,104,3,171,3,105,3,171,3,104,3,171,3,105,3,172,3,106,3,172,3,105,3,172,3,106,3,173,3,107,3,173,3,106,3,173,3,107,3,174,3,108,3,174,3,107,3,174,3,108,3,175,3,109,3,175,3,108,3,175,3,109,3,176,3,110,3,176,3,109,3,176,3,110,3,177,3,111,3,177,3,110,3,177,3,111,3,178,3,112,3,178,3,111,3,178,3,112,3,179,3,113,3,179,3,112,3,179,3,113,3,180,3,114,3,180,3,113,3,180,3,114,3,181,3,115,3,181,3,114,3,181,3,115,3,182,3,116,3,182,3,115,3,182,3,116,3,183,3,117,3,183,3,116,3,183,3,117,3,184,3,118,3,184,3,117,3,184,3,118,3,185,3,119,3,185,3,118,3,185,3,119,3,186,3,120,3,186,3,119,3,186,3,120,3,187,3,121,3,187,3,120,3,187,3,121,3,188,3,122,3,188,3,121,3,188,3,122,3,189,3,123,3,189,3,122,3,189,3,123,3,190,3,124,3,190,3,123,3,190,3,124,3,191,3,125,3,191,3,124,3,191,3,125,3,192,3,126,3,192,3,125,3,192,3,126,3,193,3,127,3,193,3,126,3,193,3,127,3,194,3,128,3,194,3,127,3,194,3,128,3,195,3,129,3,195,3,128,3,195,3,129,3,196,3,130,3,196,3,129,3,196,3,130,3,197,3,131,3,197,3,130,3,197,3,131,3,198,3,132,3,198,3,131,3,198,3,132,3,199,3,133,3,199,3,132,3,199,3,133,3,200,3,134,3,200,3,133,3,200,3,134,3,201,3,135,3,201,3,134,3,201,3,135,3,202,3,136,3,202,3,135,3,202,3,136,3,203,3,137,3,203,3,136,3,203,3,137,3,204,3,138,3,204,3,137,3,204,3,138,3,205,3,139,3,205,3,138,3,205,3,139,3,206,3,140,3,206,3,139,3,206,3,140,3,207,3,141,3,207,3,140,3,207,3,141,3,208,3,142,3,208,3,141,3,208,3,142,3,209,3,143,3,209,3,142,3,209,3,143,3,210,3,144,3,210,3,143,3,210,3,144,3,211,3,145,3,211,3,144,3,211,3,145,3,212,3,146,3,212,3,145,3,212,3,146,3,213,3,147,3,213,3,146,3,213,3,147,3,214,3,148,3,214,3,147,3,214,3,148,3,215,3,149,3,215,3,148,3,215,3,149,3,216,3,150,3,216,3,149,3,216,3,150,3,217,3,151,3,217,3,150,3,217,3,151,3,218,3,152,3,218,3,151,3,218,3,152,3,219,3,153,3,219,3,152,3,219,3,153,3,220,3,154,3,220,3,153,3,220,3,154,3,221,3,155,3,221,3,154,3,222,3,156,3,223,3,157,3,223,3,156,3,223,3,157,3,224,3,158,3,224,3,157,3,224,3,158,3,225,3,159,3,225,3,158,3,225,3,159,3,226,3,160,3,226,3,159,3,226,3,160,3,227,3,161,3,227,3,160,3,227,3,161,3,228,3,162,3,228,3,161,3,228,3,162,3,229,3,163,3,229,3,162,3,229,3,163,3,230,3,164,3,230,3,163,3,230,3,164,3,231,3,165,3,231,3,164,3,231,3,165,3,232,3,166,3,232,3,165,3,232,3,166,3,233,3,167,3,233,3,166,3,233,3,167,3,234,3,168,3,234,3,167,3,234,3,168,3,235,3,169,3,235,3,168,3,235,3,169,3,236,3,170,3,236,3,169,3,236,3,170,3,237,3,171,3,237,3,170,3,237,3,171,3,238,3,172,3,238,3,171,3,238,3,172,3,239,3,173,3,239,3,172,3,239,3,173,3,240,3,174,3,240,3,173,3,240,3,174,3,241,3,175,3,241,3,174,3,241,3,175,3,242,3,176,3,242,3,175,3,242,3,176,3,243,3,177,3,243,3,176,3,243,3,177,3,244,3,178,3,244,3,177,3,244,3,178,3,245,3,179,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+225280);
/* memory initializer */ allocate([245,3,178,3,245,3,179,3,246,3,180,3,246,3,179,3,246,3,180,3,247,3,181,3,247,3,180,3,247,3,181,3,248,3,182,3,248,3,181,3,248,3,182,3,249,3,183,3,249,3,182,3,249,3,183,3,250,3,184,3,250,3,183,3,250,3,184,3,251,3,185,3,251,3,184,3,251,3,185,3,252,3,186,3,252,3,185,3,252,3,186,3,253,3,187,3,253,3,186,3,253,3,187,3,254,3,188,3,254,3,187,3,254,3,188,3,255,3,189,3,255,3,188,3,255,3,189,3,0,4,190,3,0,4,189,3,0,4,190,3,1,4,191,3,1,4,190,3,1,4,191,3,2,4,192,3,2,4,191,3,2,4,192,3,3,4,193,3,3,4,192,3,3,4,193,3,4,4,194,3,4,4,193,3,4,4,194,3,5,4,195,3,5,4,194,3,5,4,195,3,6,4,196,3,6,4,195,3,6,4,196,3,7,4,197,3,7,4,196,3,7,4,197,3,8,4,198,3,8,4,197,3,8,4,198,3,9,4,199,3,9,4,198,3,9,4,199,3,10,4,200,3,10,4,199,3,10,4,200,3,11,4,201,3,11,4,200,3,11,4,201,3,12,4,202,3,12,4,201,3,12,4,202,3,13,4,203,3,13,4,202,3,13,4,203,3,14,4,204,3,14,4,203,3,14,4,204,3,15,4,205,3,15,4,204,3,15,4,205,3,16,4,206,3,16,4,205,3,16,4,206,3,17,4,207,3,17,4,206,3,17,4,207,3,18,4,208,3,18,4,207,3,18,4,208,3,19,4,209,3,19,4,208,3,19,4,209,3,20,4,210,3,20,4,209,3,20,4,210,3,21,4,211,3,21,4,210,3,21,4,211,3,22,4,212,3,22,4,211,3,22,4,212,3,23,4,213,3,23,4,212,3,23,4,213,3,24,4,214,3,24,4,213,3,24,4,214,3,25,4,215,3,25,4,214,3,25,4,215,3,26,4,216,3,26,4,215,3,26,4,216,3,27,4,217,3,27,4,216,3,27,4,217,3,28,4,218,3,28,4,217,3,28,4,218,3,29,4,219,3,29,4,218,3,29,4,219,3,30,4,220,3,30,4,219,3,30,4,220,3,31,4,221,3,31,4,220,3,32,4,222,3,33,4,223,3,33,4,222,3,33,4,223,3,34,4,224,3,34,4,223,3,34,4,224,3,35,4,225,3,35,4,224,3,35,4,225,3,36,4,226,3,36,4,225,3,36,4,226,3,37,4,227,3,37,4,226,3,37,4,227,3,38,4,228,3,38,4,227,3,38,4,228,3,39,4,229,3,39,4,228,3,39,4,229,3,40,4,230,3,40,4,229,3,40,4,230,3,41,4,231,3,41,4,230,3,41,4,231,3,42,4,232,3,42,4,231,3,42,4,232,3,43,4,233,3,43,4,232,3,43,4,233,3,44,4,234,3,44,4,233,3,44,4,234,3,45,4,235,3,45,4,234,3,45,4,235,3,46,4,236,3,46,4,235,3,46,4,236,3,47,4,237,3,47,4,236,3,47,4,237,3,48,4,238,3,48,4,237,3,48,4,238,3,49,4,239,3,49,4,238,3,49,4,239,3,50,4,240,3,50,4,239,3,50,4,240,3,51,4,241,3,51,4,240,3,51,4,241,3,52,4,242,3,52,4,241,3,52,4,242,3,53,4,243,3,53,4,242,3,53,4,243,3,54,4,244,3,54,4,243,3,54,4,244,3,55,4,245,3,55,4,244,3,55,4,245,3,56,4,246,3,56,4,245,3,56,4,246,3,57,4,247,3,57,4,246,3,57,4,247,3,58,4,248,3,58,4,247,3,58,4,248,3,59,4,249,3,59,4,248,3,59,4,249,3,60,4,250,3,60,4,249,3,60,4,250,3,61,4,251,3,61,4,250,3,61,4,251,3,62,4,252,3,62,4,251,3,62,4,252,3,63,4,253,3,63,4,252,3,63,4,253,3,64,4,254,3,64,4,253,3,64,4,254,3,65,4,255,3,65,4,254,3,65,4,255,3,66,4,0,4,66,4,255,3,66,4,0,4,67,4,1,4,67,4,0,4,67,4,1,4,68,4,2,4,68,4,1,4,68,4,2,4,69,4,3,4,69,4,2,4,69,4,3,4,70,4,4,4,70,4,3,4,70,4,4,4,71,4,5,4,71,4,4,4,71,4,5,4,72,4,6,4,72,4,5,4,72,4,6,4,73,4,7,4,73,4,6,4,73,4,7,4,74,4,8,4,74,4,7,4,74,4,8,4,75,4,9,4,75,4,8,4,75,4,9,4,76,4,10,4,76,4,9,4,76,4,10,4,77,4,11,4,77,4,10,4,77,4,11,4,78,4,12,4,78,4,11,4,78,4,12,4,79,4,13,4,79,4,12,4,79,4,13,4,80,4,14,4,80,4,13,4,80,4,14,4,81,4,15,4,81,4,14,4,81,4,15,4,82,4,16,4,82,4,15,4,82,4,16,4,83,4,17,4,83,4,16,4,83,4,17,4,84,4,18,4,84,4,17,4,84,4,18,4,85,4,19,4,85,4,18,4,85,4,19,4,86,4,20,4,86,4,19,4,86,4,20,4,87,4,21,4,87,4,20,4,87,4,21,4,88,4,22,4,88,4,21,4,88,4,22,4,89,4,23,4,89,4,22,4,89,4,23,4,90,4,24,4,90,4,23,4,90,4,24,4,91,4,25,4,91,4,24,4,91,4,25,4,92,4,26,4,92,4,25,4,92,4,26,4,93,4,27,4,93,4,26,4,93,4,27,4,94,4,28,4,94,4,27,4,94,4,28,4,95,4,29,4,95,4,28,4,95,4,29,4,96,4,30,4,96,4,29,4,96,4,30,4,97,4,31,4,97,4,30,4,98,4,32,4,99,4,33,4,99,4,32,4,99,4,33,4,100,4,34,4,100,4,33,4,100,4,34,4,101,4,35,4,101,4,34,4,101,4,35,4,102,4,36,4,102,4,35,4,102,4,36,4,103,4,37,4,103,4,36,4,103,4,37,4,104,4,38,4,104,4,37,4,104,4,38,4,105,4,39,4,105,4,38,4,105,4,39,4,106,4,40,4,106,4,39,4,106,4,40,4,107,4,41,4,107,4,40,4,107,4,41,4,108,4,42,4,108,4,41,4,108,4,42,4,109,4,43,4,109,4,42,4,109,4,43,4,110,4,44,4,110,4,43,4,110,4,44,4,111,4,45,4,111,4,44,4,111,4,45,4,112,4,46,4,112,4,45,4,112,4,46,4,113,4,47,4,113,4,46,4,113,4,47,4,114,4,48,4,114,4,47,4,114,4,48,4,115,4,49,4,115,4,48,4,115,4,49,4,116,4,50,4,116,4,49,4,116,4,50,4,117,4,51,4,117,4,50,4,117,4,51,4,118,4,52,4,118,4,51,4,118,4,52,4,119,4,53,4,119,4,52,4,119,4,53,4,120,4,54,4,120,4,53,4,120,4,54,4,121,4,55,4,121,4,54,4,121,4,55,4,122,4,56,4,122,4,55,4,122,4,56,4,123,4,57,4,123,4,56,4,123,4,57,4,124,4,58,4,124,4,57,4,124,4,58,4,125,4,59,4,125,4,58,4,125,4,59,4,126,4,60,4,126,4,59,4,126,4,60,4,127,4,61,4,127,4,60,4,127,4,61,4,128,4,62,4,128,4,61,4,128,4,62,4,129,4,63,4,129,4,62,4,129,4,63,4,130,4,64,4,130,4,63,4,130,4,64,4,131,4,65,4,131,4,64,4,131,4,65,4,132,4,66,4,132,4,65,4,132,4,66,4,133,4,67,4,133,4,66,4,133,4,67,4,134,4,68,4,134,4,67,4,134,4,68,4,135,4,69,4,135,4,68,4,135,4,69,4,136,4,70,4,136,4,69,4,136,4,70,4,137,4,71,4,137,4,70,4,137,4,71,4,138,4,72,4,138,4,71,4,138,4,72,4,139,4,73,4,139,4,72,4,139,4,73,4,140,4,74,4,140,4,73,4,140,4,74,4,141,4,75,4,141,4,74,4,141,4,75,4,142,4,76,4,142,4,75,4,142,4,76,4,143,4,77,4,143,4,76,4,143,4,77,4,144,4,78,4,144,4,77,4,144,4,78,4,145,4,79,4,145,4,78,4,145,4,79,4,146,4,80,4,146,4,79,4,146,4,80,4,147,4,81,4,147,4,80,4,147,4,81,4,148,4,82,4,148,4,81,4,148,4,82,4,149,4,83,4,149,4,82,4,149,4,83,4,150,4,84,4,150,4,83,4,150,4,84,4,151,4,85,4,151,4,84,4,151,4,85,4,152,4,86,4,152,4,85,4,152,4,86,4,153,4,87,4,153,4,86,4,153,4,87,4,154,4,88,4,154,4,87,4,154,4,88,4,155,4,89,4,155,4,88,4,155,4,89,4,156,4,90,4,156,4,89,4,156,4,90,4,157,4,91,4,157,4,90,4,157,4,91,4,158,4,92,4,158,4,91,4,158,4,92,4,159,4,93,4,159,4,92,4,159,4,93,4,160,4,94,4,160,4,93,4,160,4,94,4,161,4,95,4,161,4,94,4,161,4,95,4,162,4,96,4,162,4,95,4,162,4,96,4,163,4,97,4,163,4,96,4,164,4,98,4,165,4,99,4,165,4,98,4,165,4,99,4,166,4,100,4,166,4,99,4,166,4,100,4,167,4,101,4,167,4,100,4,167,4,101,4,168,4,102,4,168,4,101,4,168,4,102,4,169,4,103,4,169,4,102,4,169,4,103,4,170,4,104,4,170,4,103,4,170,4,104,4,171,4,105,4,171,4,104,4,171,4,105,4,172,4,106,4,172,4,105,4,172,4,106,4,173,4,107,4,173,4,106,4,173,4,107,4,174,4,108,4,174,4,107,4,174,4,108,4,175,4,109,4,175,4,108,4,175,4,109,4,176,4,110,4,176,4,109,4,176,4,110,4,177,4,111,4,177,4,110,4,177,4,111,4,178,4,112,4,178,4,111,4,178,4,112,4,179,4,113,4,179,4,112,4,179,4,113,4,180,4,114,4,180,4,113,4,180,4,114,4,181,4,115,4,181,4,114,4,181,4,115,4,182,4,116,4,182,4,115,4,182,4,116,4,183,4,117,4,183,4,116,4,183,4,117,4,184,4,118,4,184,4,117,4,184,4,118,4,185,4,119,4,185,4,118,4,185,4,119,4,186,4,120,4,186,4,119,4,186,4,120,4,187,4,121,4,187,4,120,4,187,4,121,4,188,4,122,4,188,4,121,4,188,4,122,4,189,4,123,4,189,4,122,4,189,4,123,4,190,4,124,4,190,4,123,4,190,4,124,4,191,4,125,4,191,4,124,4,191,4,125,4,192,4,126,4,192,4,125,4,192,4,126,4,193,4,127,4,193,4,126,4,193,4,127,4,194,4,128,4,194,4,127,4,194,4,128,4,195,4,129,4,195,4,128,4,195,4,129,4,196,4,130,4,196,4,129,4,196,4,130,4,197,4,131,4,197,4,130,4,197,4,131,4,198,4,132,4,198,4,131,4,198,4,132,4,199,4,133,4,199,4,132,4,199,4,133,4,200,4,134,4,200,4,133,4,200,4,134,4,201,4,135,4,201,4,134,4,201,4,135,4,202,4,136,4,202,4,135,4,202,4,136,4,203,4,137,4,203,4,136,4,203,4,137,4,204,4,138,4,204,4,137,4,204,4,138,4,205,4,139,4,205,4,138,4,205,4,139,4,206,4,140,4,206,4,139,4,206,4,140,4,207,4,141,4,207,4,140,4,207,4,141,4,208,4,142,4,208,4,141,4,208,4,142,4,209,4,143,4,209,4,142,4,209,4,143,4,210,4,144,4,210,4,143,4,210,4,144,4,211,4,145,4,211,4,144,4,211,4,145,4,212,4,146,4,212,4,145,4,212,4,146,4,213,4,147,4,213,4,146,4,213,4,147,4,214,4,148,4,214,4,147,4,214,4,148,4,215,4,149,4,215,4,148,4,215,4,149,4,216,4,150,4,216,4,149,4,216,4,150,4,217,4,151,4,217,4,150,4,217,4,151,4,218,4,152,4,218,4,151,4,218,4,152,4,219,4,153,4,219,4,152,4,219,4,153,4,220,4,154,4,220,4,153,4,220,4,154,4,221,4,155,4,221,4,154,4,221,4,155,4,222,4,156,4,222,4,155,4,222,4,156,4,223,4,157,4,223,4,156,4,223,4,157,4,224,4,158,4,224,4,157,4,224,4,158,4,225,4,159,4,225,4,158,4,225,4,159,4,226,4,160,4,226,4,159,4,226,4,160,4,227,4,161,4,227,4,160,4,227,4,161,4,228,4,162,4,228,4,161,4,228,4,162,4,229,4,163,4,229,4,162,4,230,4,164,4,231,4,165,4,231,4,164,4,231,4,165,4,232,4,166,4,232,4,165,4,232,4,166,4,233,4,167,4,233,4,166,4,233,4,167,4,234,4,168,4,234,4,167,4,234,4,168,4,235,4,169,4,235,4,168,4,235,4,169,4,236,4,170,4,236,4,169,4,236,4,170,4,237,4,171,4,237,4,170,4,237,4,171,4,238,4,172,4,238,4,171,4,238,4,172,4,239,4,173,4,239,4,172,4,239,4,173,4,240,4,174,4,240,4,173,4,240,4,174,4,241,4,175,4,241,4,174,4,241,4,175,4,242,4,176,4,242,4,175,4,242,4,176,4,243,4,177,4,243,4,176,4,243,4,177,4,244,4,178,4,244,4,177,4,244,4,178,4,245,4,179,4,245,4,178,4,245,4,179,4,246,4,180,4,246,4,179,4,246,4,180,4,247,4,181,4,247,4,180,4,247,4,181,4,248,4,182,4,248,4,181,4,248,4,182,4,249,4,183,4,249,4,182,4,249,4,183,4,250,4,184,4,250,4,183,4,250,4,184,4,251,4,185,4,251,4,184,4,251,4,185,4,252,4,186,4,252,4,185,4,252,4,186,4,253,4,187,4,253,4,186,4,253,4,187,4,254,4,188,4,254,4,187,4,254,4,188,4,255,4,189,4,255,4,188,4,255,4,189,4,0,5,190,4,0,5,189,4,0,5,190,4,1,5,191,4,1,5,190,4,1,5,191,4,2,5,192,4,2,5,191,4,2,5,192,4,3,5,193,4,3,5,192,4,3,5,193,4,4,5,194,4,4,5,193,4,4,5,194,4,5,5,195,4,5,5,194,4,5,5,195,4,6,5,196,4,6,5,195,4,6,5,196,4,7,5,197,4,7,5,196,4,7,5,197,4,8,5,198,4,8,5,197,4,8,5,198,4,9,5,199,4,9,5,198,4,9,5,199,4,10,5,200,4,10,5,199,4,10,5,200,4,11,5,201,4,11,5,200,4,11,5,201,4,12,5,202,4,12,5,201,4,12,5,202,4,13,5,203,4,13,5,202,4,13,5,203,4,14,5,204,4,14,5,203,4,14,5,204,4,15,5,205,4,15,5,204,4,15,5,205,4,16,5,206,4,16,5,205,4,16,5,206,4,17,5,207,4,17,5,206,4,17,5,207,4,18,5,208,4,18,5,207,4,18,5,208,4,19,5,209,4,19,5,208,4,19,5,209,4,20,5,210,4,20,5,209,4,20,5,210,4,21,5,211,4,21,5,210,4,21,5,211,4,22,5,212,4,22,5,211,4,22,5,212,4,23,5,213,4,23,5,212,4,23,5,213,4,24,5,214,4,24,5,213,4,24,5,214,4,25,5,215,4,25,5,214,4,25,5,215,4,26,5,216,4,26,5,215,4,26,5,216,4,27,5,217,4,27,5,216,4,27,5,217,4,28,5,218,4,28,5,217,4,28,5,218,4,29,5,219,4,29,5,218,4,29,5,219,4,30,5,220,4,30,5,219,4,30,5,220,4,31,5,221,4,31,5,220,4,31,5,221,4,32,5,222,4,32,5,221,4,32,5,222,4,33,5,223,4,33,5,222,4,33,5,223,4,34,5,224,4,34,5,223,4,34,5,224,4,35,5,225,4,35,5,224,4,35,5,225,4,36,5,226,4,36,5,225,4,36,5,226,4,37,5,227,4,37,5,226,4,37,5,227,4,38,5,228,4,38,5,227,4,38,5,228,4,39,5,229,4,39,5,228,4,40,5,230,4,41,5,231,4,41,5,230,4,41,5,231,4,42,5,232,4,42,5,231,4,42,5,232,4,43,5,233,4,43,5,232,4,43,5,233,4,44,5,234,4,44,5,233,4,44,5,234,4,45,5,235,4,45,5,234,4,45,5,235,4,46,5,236,4,46,5,235,4,46,5,236,4,47,5,237,4,47,5,236,4,47,5,237,4,48,5,238,4,48,5,237,4,48,5,238,4,49,5,239,4,49,5,238,4,49,5,239,4,50,5,240,4,50,5,239,4,50,5,240,4,51,5,241,4,51,5,240,4,51,5,241,4,52,5,242,4,52,5,241,4,52,5,242,4,53,5,243,4,53,5,242,4,53,5,243,4,54,5,244,4,54,5,243,4,54,5,244,4,55,5,245,4,55,5,244,4,55,5,245,4,56,5,246,4,56,5,245,4,56,5,246,4,57,5,247,4,57,5,246,4,57,5,247,4,58,5,248,4,58,5,247,4,58,5,248,4,59,5,249,4,59,5,248,4,59,5,249,4,60,5,250,4,60,5,249,4,60,5,250,4,61,5,251,4,61,5,250,4,61,5,251,4,62,5,252,4,62,5,251,4,62,5,252,4,63,5,253,4,63,5,252,4,63,5,253,4,64,5,254,4,64,5,253,4,64,5,254,4,65,5,255,4,65,5,254,4,65,5,255,4,66,5,0,5,66,5,255,4,66,5,0,5,67,5,1,5,67,5,0,5,67,5,1,5,68,5,2,5,68,5,1,5,68,5,2,5,69,5,3,5,69,5,2,5,69,5,3,5,70,5,4,5,70,5,3,5,70,5,4,5,71,5,5,5,71,5,4,5,71,5,5,5,72,5,6,5,72,5,5,5,72,5,6,5,73,5,7,5,73,5,6,5,73,5,7,5,74,5,8,5,74,5,7,5,74,5,8,5,75,5,9,5,75,5,8,5,75,5,9,5,76,5,10,5,76,5,9,5,76,5,10,5,77,5,11,5,77,5,10,5,77,5,11,5,78,5,12,5,78,5,11,5,78,5,12,5,79,5,13,5,79,5,12,5,79,5,13,5,80,5,14,5,80,5,13,5,80,5,14,5,81,5,15,5,81,5,14,5,81,5,15,5,82,5,16,5,82,5,15,5,82,5,16,5,83,5,17,5,83,5,16,5,83,5,17,5,84,5,18,5,84,5,17,5,84,5,18,5,85,5,19,5,85,5,18,5,85,5,19,5,86,5,20,5,86,5,19,5,86,5,20,5,87,5,21,5,87,5,20,5,87,5,21,5,88,5,22,5,88,5,21,5,88,5,22,5,89,5,23,5,89,5,22,5,89,5,23,5,90,5,24,5,90,5,23,5,90,5,24,5,91,5,25,5,91,5,24,5,91,5,25,5,92,5,26,5,92,5,25,5,92,5,26,5,93,5,27,5,93,5,26,5,93,5,27,5,94,5,28,5,94,5,27,5,94,5,28,5,95,5,29,5,95,5,28,5,95,5,29,5,96,5,30,5,96,5,29,5,96,5,30,5,97,5,31,5,97,5,30,5,97,5,31,5,98,5,32,5,98,5,31,5,98,5,32,5,99,5,33,5,99,5,32,5,99,5,33,5,100,5,34,5,100,5,33,5,100,5,34,5,101,5,35,5,101,5,34,5,101,5,35,5,102,5,36,5,102,5,35,5,102,5,36,5,103,5,37,5,103,5,36,5,103,5,37,5,104,5,38,5,104,5,37,5,104,5,38,5,105,5,39,5,105,5,38,5,106,5,40,5,107,5,41,5,107,5,40,5,107,5,41,5,108,5,42,5,108,5,41,5,108,5,42,5,109,5,43,5,109,5,42,5,109,5,43,5,110,5,44,5,110,5,43,5,110,5,44,5,111,5,45,5,111,5,44,5,111,5,45,5,112,5,46,5,112,5,45,5,112,5,46,5,113,5,47,5,113,5,46,5,113,5,47,5,114,5,48,5,114,5,47,5,114,5,48,5,115,5,49,5,115,5,48,5,115,5,49,5,116,5,50,5,116,5,49,5,116,5,50,5,117,5,51,5,117,5,50,5,117,5,51,5,118,5,52,5,118,5,51,5,118,5,52,5,119,5,53,5,119,5,52,5,119,5,53,5,120,5,54,5,120,5,53,5,120,5,54,5,121,5,55,5,121,5,54,5,121,5,55,5,122,5,56,5,122,5,55,5,122,5,56,5,123,5,57,5,123,5,56,5,123,5,57,5,124,5,58,5,124,5,57,5,124,5,58,5,125,5,59,5,125,5,58,5,125,5,59,5,126,5,60,5,126,5,59,5,126,5,60,5,127,5,61,5,127,5,60,5,127,5,61,5,128,5,62,5,128,5,61,5,128,5,62,5,129,5,63,5,129,5,62,5,129,5,63,5,130,5,64,5,130,5,63,5,130,5,64,5,131,5,65,5,131,5,64,5,131,5,65,5,132,5,66,5,132,5,65,5,132,5,66,5,133,5,67,5,133,5,66,5,133,5,67,5,134,5,68,5,134,5,67,5,134,5,68,5,135,5,69,5,135,5,68,5,135,5,69,5,136,5,70,5,136,5,69,5,136,5,70,5,137,5,71,5,137,5,70,5,137,5,71,5,138,5,72,5,138,5,71,5,138,5,72,5,139,5,73,5,139,5,72,5,139,5,73,5,140,5,74,5,140,5,73,5,140,5,74,5,141,5,75,5,141,5,74,5,141,5,75,5,142,5,76,5,142,5,75,5,142,5,76,5,143,5,77,5,143,5,76,5,143,5,77,5,144,5,78,5,144,5,77,5,144,5,78,5,145,5,79,5,145,5,78,5,145,5,79,5,146,5,80,5,146,5,79,5,146,5,80,5,147,5,81,5,147,5,80,5,147,5,81,5,148,5,82,5,148,5,81,5,148,5,82,5,149,5,83,5,149,5,82,5,149,5,83,5,150,5,84,5,150,5,83,5,150,5,84,5,151,5,85,5,151,5,84,5,151,5,85,5,152,5,86,5,152,5,85,5,152,5,86,5,153,5,87,5,153,5,86,5,153,5,87,5,154,5,88,5,154,5,87,5,154,5,88,5,155,5,89,5,155,5,88,5,155,5,89,5,156,5,90,5,156,5,89,5,156,5,90,5,157,5,91,5,157,5,90,5,157,5,91,5,158,5,92,5,158,5,91,5,158,5,92,5,159,5,93,5,159,5,92,5,159,5,93,5,160,5,94,5,160,5,93,5,160,5,94,5,161,5,95,5,161,5,94,5,161,5,95,5,162,5,96,5,162,5,95,5,162,5,96,5,163,5,97,5,163,5,96,5,163,5,97,5,164,5,98,5,164,5,97,5,164,5,98,5,165,5,99,5,165,5,98,5,165,5,99,5,166,5,100,5,166,5,99,5,166,5,100,5,167,5,101,5,167,5,100,5,167,5,101,5,168,5,102,5,168,5,101,5,168,5,102,5,169,5,103,5,169,5,102,5,169,5,103,5,170,5,104,5,170,5,103,5,170,5,104,5,171,5,105,5,171,5,104,5,172,5,106,5,173,5,107,5,173,5,106,5,173,5,107,5,174,5,108,5,174,5,107,5,174,5,108,5,175,5,109,5,175,5,108,5,175,5,109,5,176,5,110,5,176,5,109,5,176,5,110,5,177,5,111,5,177,5,110,5,177,5,111,5,178,5,112,5,178,5,111,5,178,5,112,5,179,5,113,5,179,5,112,5,179,5,113,5,180,5,114,5,180,5,113,5,180,5,114,5,181,5,115,5,181,5,114,5,181,5,115,5,182,5,116,5,182,5,115,5,182,5,116,5,183,5,117,5,183,5,116,5,183,5,117,5,184,5,118,5,184,5,117,5,184,5,118,5,185,5,119,5,185,5,118,5,185,5,119,5,186,5,120,5,186,5,119,5,186,5,120,5,187,5,121,5,187,5,120,5,187,5,121,5,188,5,122,5,188,5,121,5,188,5,122,5,189,5,123,5,189,5,122,5,189,5,123,5,190,5,124,5,190,5,123,5,190,5,124,5,191,5,125,5,191,5,124,5,191,5,125,5,192,5,126,5,192,5,125,5,192,5,126,5,193,5,127,5,193,5,126,5,193,5,127,5,194,5,128,5,194,5,127,5,194,5,128,5,195,5,129,5,195,5,128,5,195,5,129,5,196,5,130,5,196,5,129,5,196,5,130,5,197,5,131,5,197,5,130,5,197,5,131,5,198,5,132,5,198,5,131,5,198,5,132,5,199,5,133,5,199,5,132,5,199,5,133,5,200,5,134,5,200,5,133,5,200,5,134,5,201,5,135,5,201,5,134,5,201,5,135,5,202,5,136,5,202,5,135,5,202,5,136,5,203,5,137,5,203,5,136,5,203,5,137,5,204,5,138,5,204,5,137,5,204,5,138,5,205,5,139,5,205,5,138,5,205,5,139,5,206,5,140,5,206,5,139,5,206,5,140,5,207,5,141,5,207,5,140,5,207,5,141,5,208,5,142,5,208,5,141,5,208,5,142,5,209,5,143,5,209,5,142,5,209,5,143,5,210,5,144,5,210,5,143,5,210,5,144,5,211,5,145,5,211,5,144,5,211,5,145,5,212,5,146,5,212,5,145,5,212,5,146,5,213,5,147,5,213,5,146,5,213,5,147,5,214,5,148,5,214,5,147,5,214,5,148,5,215,5,149,5,215,5,148,5,215,5,149,5,216,5,150,5,216,5,149,5,216,5,150,5,217,5,151,5,217,5,150,5,217,5,151,5,218,5,152,5,218,5,151,5,218,5,152,5,219,5,153,5,219,5,152,5,219,5,153,5,220,5,154,5,220,5,153,5,220,5,154,5,221,5,155,5,221,5,154,5,221,5,155,5,222,5,156,5,222,5,155,5,222,5,156,5,223,5,157,5,223,5,156,5,223,5,157,5,224,5,158,5,224,5,157,5,224,5,158,5,225,5,159,5,225,5,158,5,225,5,159,5,226,5,160,5,226,5,159,5,226,5,160,5,227,5,161,5,227,5,160,5,227,5,161,5,228,5,162,5,228,5,161,5,228,5,162,5,229,5,163,5,229,5,162,5,229,5,163,5,230,5,164,5,230,5,163,5,230,5,164,5,231,5,165,5,231,5,164,5,231,5,165,5,232,5,166,5,232,5,165,5,232,5,166,5,233,5,167,5,233,5,166,5,233,5,167,5,234,5,168,5,234,5,167,5,234,5,168,5,235,5,169,5,235,5,168,5,235,5,169,5,236,5,170,5,236,5,169,5,236,5,170,5,237,5,171,5,237,5,170,5,238,5,172,5,239,5,173,5,239,5,172,5,239,5,173,5,240,5,174,5,240,5,173,5,240,5,174,5,241,5,175,5,241,5,174,5,241,5,175,5,242,5,176,5,242,5,175,5,242,5,176,5,243,5,177,5,243,5,176,5,243,5,177,5,244,5,178,5,244,5,177,5,244,5,178,5,245,5,179,5,245,5,178,5,245,5,179,5,246,5,180,5,246,5,179,5,246,5,180,5,247,5,181,5,247,5,180,5,247,5,181,5,248,5,182,5,248,5,181,5,248,5,182,5,249,5,183,5,249,5,182,5,249,5,183,5,250,5,184,5,250,5,183,5,250,5,184,5,251,5,185,5,251,5,184,5,251,5,185,5,252,5,186,5,252,5,185,5,252,5,186,5,253,5,187,5,253,5,186,5,253,5,187,5,254,5,188,5,254,5,187,5,254,5,188,5,255,5,189,5,255,5,188,5,255,5,189,5,0,6,190,5,0,6,189,5,0,6,190,5,1,6,191,5,1,6,190,5,1,6,191,5,2,6,192,5,2,6,191,5,2,6,192,5,3,6,193,5,3,6,192,5,3,6,193,5,4,6,194,5,4,6,193,5,4,6,194,5,5,6,195,5,5,6,194,5,5,6,195,5,6,6,196,5,6,6,195,5,6,6,196,5,7,6,197,5,7,6,196,5,7,6,197,5,8,6,198,5,8,6,197,5,8,6,198,5,9,6,199,5,9,6,198,5,9,6,199,5,10,6,200,5,10,6,199,5,10,6,200,5,11,6,201,5,11,6,200,5,11,6,201,5,12,6,202,5,12,6,201,5,12,6,202,5,13,6,203,5,13,6,202,5,13,6,203,5,14,6,204,5,14,6,203,5,14,6,204,5,15,6,205,5,15,6,204,5,15,6,205,5,16,6,206,5,16,6,205,5,16,6,206,5,17,6,207,5,17,6,206,5,17,6,207,5,18,6,208,5,18,6,207,5,18,6,208,5,19,6,209,5,19,6,208,5,19,6,209,5,20,6,210,5,20,6,209,5,20,6,210,5,21,6,211,5,21,6,210,5,21,6,211,5,22,6,212,5,22,6,211,5,22,6,212,5,23,6,213,5,23,6,212,5,23,6,213,5,24,6,214,5,24,6,213,5,24,6,214,5,25,6,215,5,25,6,214,5,25,6,215,5,26,6,216,5,26,6,215,5,26,6,216,5,27,6,217,5,27,6,216,5,27,6,217,5,28,6,218,5,28,6,217,5,28,6,218,5,29,6,219,5,29,6,218,5,29,6,219,5,30,6,220,5,30,6,219,5,30,6,220,5,31,6,221,5,31,6,220,5,31,6,221,5,32,6,222,5,32,6,221,5,32,6,222,5,33,6,223,5,33,6,222,5,33,6,223,5,34,6,224,5,34,6,223,5,34,6,224,5,35,6,225,5,35,6,224,5,35,6,225,5,36,6,226,5,36,6,225,5,36,6,226,5,37,6,227,5,37,6,226,5,37,6,227,5,38,6,228,5,38,6,227,5,38,6,228,5,39,6,229,5,39,6,228,5,39,6,229,5,40,6,230,5,40,6,229,5,40,6,230,5,41,6,231,5,41,6,230,5,41,6,231,5,42,6,232,5,42,6,231,5,42,6,232,5,43,6,233,5,43,6,232,5,43,6,233,5,44,6,234,5,44,6,233,5,44,6,234,5,45,6,235,5,45,6,234,5,45,6,235,5,46,6,236,5,46,6,235,5,46,6,236,5,47,6,237,5,47,6,236,5,48,6,238,5,49,6,239,5,49,6,238,5,49,6,239,5,50,6,240,5,50,6,239,5,50,6,240,5,51,6,241,5,51,6,240,5,51,6,241,5,52,6,242,5,52,6,241,5,52,6,242,5,53,6,243,5,53,6,242,5,53,6,243,5,54,6,244,5,54,6,243,5,54,6,244,5,55,6,245,5,55,6,244,5,55,6,245,5,56,6,246,5,56,6,245,5,56,6,246,5,57,6,247,5,57,6,246,5,57,6,247,5,58,6,248,5,58,6,247,5,58,6,248,5,59,6,249,5,59,6,248,5,59,6,249,5,60,6,250,5,60,6,249,5,60,6,250,5,61,6,251,5,61,6,250,5,61,6,251,5,62,6,252,5,62,6,251,5,62,6,252,5,63,6,253,5,63,6,252,5,63,6,253,5,64,6,254,5,64,6,253,5,64,6,254,5,65,6,255,5,65,6,254,5,65,6,255,5,66,6,0,6,66,6,255,5,66,6,0,6,67,6,1,6,67,6,0,6,67,6,1,6,68,6,2,6,68,6,1,6,68,6,2,6,69,6,3,6,69,6,2,6,69,6,3,6,70,6,4,6,70,6,3,6,70,6,4,6,71,6,5,6,71,6,4,6,71,6,5,6,72,6,6,6,72,6,5,6,72,6,6,6,73,6,7,6,73,6,6,6,73,6,7,6,74,6,8,6,74,6,7,6,74,6,8,6,75,6,9,6,75,6,8,6,75,6,9,6,76,6,10,6,76,6,9,6,76,6,10,6,77,6,11,6,77,6,10,6,77,6,11,6,78,6,12,6,78,6,11,6,78,6,12,6,79,6,13,6,79,6,12,6,79,6,13,6,80,6,14,6,80,6,13,6,80,6,14,6,81,6,15,6,81,6,14,6,81,6,15,6,82,6,16,6,82,6,15,6,82,6,16,6,83,6,17,6,83,6,16,6,83,6,17,6,84,6,18,6,84,6,17,6,84,6,18,6,85,6,19,6,85,6,18,6,85,6,19,6,86,6,20,6,86,6,19,6,86,6,20,6,87,6,21,6,87,6,20,6,87,6,21,6,88,6,22,6,88,6,21,6,88,6,22,6,89,6,23,6,89,6,22,6,89,6,23,6,90,6,24,6,90,6,23,6,90,6,24,6,91,6,25,6,91,6,24,6,91,6,25,6,92,6,26,6,92,6,25,6,92,6,26,6,93,6,27,6,93,6,26,6,93,6,27,6,94,6,28,6,94,6,27,6,94,6,28,6,95,6,29,6,95,6,28,6,95,6,29,6,96,6,30,6,96,6,29,6,96,6,30,6,97,6,31,6,97,6,30,6,97,6,31,6,98,6,32,6,98,6,31,6,98,6,32,6,99,6,33,6,99,6,32,6,99,6,33,6,100,6,34,6,100,6,33,6,100,6,34,6,101,6,35,6,101,6,34,6,101,6,35,6,102,6,36,6,102,6,35,6,102,6,36,6,103,6,37,6,103,6,36,6,103,6,37,6,104,6,38,6,104,6,37,6,104,6,38,6,105,6,39,6,105,6,38,6,105,6,39,6,106,6,40,6,106,6,39,6,106,6,40,6,107,6,41,6,107,6,40,6,107,6,41,6,108,6,42,6,108,6,41,6,108,6,42,6,109,6,43,6,109,6,42,6,109,6,43,6,110,6,44,6,110,6,43,6,110,6,44,6,111,6,45,6,111,6,44,6,111,6,45,6,112,6,46,6,112,6,45,6,112,6,46,6,113,6,47,6,113,6,46,6,114,6,48,6,115,6,49,6,115,6,48,6,115,6,49,6,116,6,50,6,116,6,49,6,116,6,50,6,117,6,51,6,117,6,50,6,117,6,51,6,118,6,52,6,118,6,51,6,118,6,52,6,119,6,53,6,119,6,52,6,119,6,53,6,120,6,54,6,120,6,53,6,120,6,54,6,121,6,55,6,121,6,54,6,121,6,55,6,122,6,56,6,122,6,55,6,122,6,56,6,123,6,57,6,123,6,56,6,123,6,57,6,124,6,58,6,124,6,57,6,124,6,58,6,125,6,59,6,125,6,58,6,125,6,59,6,126,6,60,6,126,6,59,6,126,6,60,6,127,6,61,6,127,6,60,6,127,6,61,6,128,6,62,6,128,6,61,6,128,6,62,6,129,6,63,6,129,6,62,6,129,6,63,6,130,6,64,6,130,6,63,6,130,6,64,6,131,6,65,6,131,6,64,6,131,6,65,6,132,6,66,6,132,6,65,6,132,6,66,6,133,6,67,6,133,6,66,6,133,6,67,6,134,6,68,6,134,6,67,6,134,6,68,6,135,6,69,6,135,6,68,6,135,6,69,6,136,6,70,6,136,6,69,6,136,6,70,6,137,6,71,6,137,6,70,6,137,6,71,6,138,6,72,6,138,6,71,6,138,6,72,6,139,6,73,6,139,6,72,6,139,6,73,6,140,6,74,6,140,6,73,6,140,6,74,6,141,6,75,6,141,6,74,6,141,6,75,6,142,6,76,6,142,6,75,6,142,6,76,6,143,6,77,6,143,6,76,6,143,6,77,6,144,6,78,6,144,6,77,6,144,6,78,6,145,6,79,6,145,6,78,6,145,6,79,6,146,6,80,6,146,6,79,6,146,6,80,6,147,6,81,6,147,6,80,6,147,6,81,6,148,6,82,6,148,6,81,6,148,6,82,6,149,6,83,6,149,6,82,6,149,6,83,6,150,6,84,6,150,6,83,6,150,6,84,6,151,6,85,6,151,6,84,6,151,6,85,6,152,6,86,6,152,6,85,6,152,6,86,6,153,6,87,6,153,6,86,6,153,6,87,6,154,6,88,6,154,6,87,6,154,6,88,6,155,6,89,6,155,6,88,6,155,6,89,6,156,6,90,6,156,6,89,6,156,6,90,6,157,6,91,6,157,6,90,6,157,6,91,6,158,6,92,6,158,6,91,6,158,6,92,6,159,6,93,6,159,6,92,6,159,6,93,6,160,6,94,6,160,6,93,6,160,6,94,6,161,6,95,6,161,6,94,6,161,6,95,6,162,6,96,6,162,6,95,6,162,6,96,6,163,6,97,6,163,6,96,6,163,6,97,6,164,6,98,6,164,6,97,6,164,6,98,6,165,6,99,6,165,6,98,6,165,6,99,6,166,6,100,6,166,6,99,6,166,6,100,6,167,6,101,6,167,6,100,6,167,6,101,6,168,6,102,6,168,6,101,6,168,6,102,6,169,6,103,6,169,6,102,6,169,6,103,6,170,6,104,6,170,6,103,6,170,6,104,6,171,6,105,6,171,6,104,6,171,6,105,6,172,6,106,6,172,6,105,6,172,6,106,6,173,6,107,6,173,6,106,6,173,6,107,6,174,6,108,6,174,6,107,6,174,6,108,6,175,6,109,6,175,6,108,6,175,6,109,6,176,6,110,6,176,6,109,6,176,6,110,6,177,6,111,6,177,6,110,6,177,6,111,6,178,6,112,6,178,6,111,6,178,6,112,6,179,6,113,6,179,6,112,6,180,6,114,6,181,6,115,6,181,6,114,6,181,6,115,6,182,6,116,6,182,6,115,6,182,6,116,6,183,6,117,6,183,6,116,6,183,6,117,6,184,6,118,6,184,6,117,6,184,6,118,6,185,6,119,6,185,6,118,6,185,6,119,6,186,6,120,6,186,6,119,6,186,6,120,6,187,6,121,6,187,6,120,6,187,6,121,6,188,6,122,6,188,6,121,6,188,6,122,6,189,6,123,6,189,6,122,6,189,6,123,6,190,6,124,6,190,6,123,6,190,6,124,6,191,6,125,6,191,6,124,6,191,6,125,6,192,6,126,6,192,6,125,6,192,6,126,6,193,6,127,6,193,6,126,6,193,6,127,6,194,6,128,6,194,6,127,6,194,6,128,6,195,6,129,6,195,6,128,6,195,6,129,6,196,6,130,6,196,6,129,6,196,6,130,6,197,6,131,6,197,6,130,6,197,6,131,6,198,6,132,6,198,6,131,6,198,6,132,6,199,6,133,6,199,6,132,6,199,6,133,6,200,6,134,6,200,6,133,6,200,6,134,6,201,6,135,6,201,6,134,6,201,6,135,6,202,6,136,6,202,6,135,6,202,6,136,6,203,6,137,6,203,6,136,6,203,6,137,6,204,6,138,6,204,6,137,6,204,6,138,6,205,6,139,6,205,6,138,6,205,6,139,6,206,6,140,6,206,6,139,6,206,6,140,6,207,6,141,6,207,6,140,6,207,6,141,6,208,6,142,6,208,6,141,6,208,6,142,6,209,6,143,6,209,6,142,6,209,6,143,6,210,6,144,6,210,6,143,6,210,6,144,6,211,6,145,6,211,6,144,6,211,6,145,6,212,6,146,6,212,6,145,6,212,6,146,6,213,6,147,6,213,6,146,6,213,6,147,6,214,6,148,6,214,6,147,6,214,6,148,6,215,6,149,6,215,6,148,6,215,6,149,6,216,6,150,6,216,6,149,6,216,6,150,6,217,6,151,6,217,6,150,6,217,6,151,6,218,6,152,6,218,6,151,6,218,6,152,6,219,6,153,6,219,6,152,6,219,6,153,6,220,6,154,6,220,6,153,6,220,6,154,6,221,6,155,6,221,6,154,6,221,6,155,6,222,6,156,6,222,6,155,6,222,6,156,6,223,6,157,6,223,6,156,6,223,6,157,6,224,6,158,6,224,6,157,6,224,6,158,6,225,6,159,6,225,6,158,6,225,6,159,6,226,6,160,6,226,6,159,6,226,6,160,6,227,6,161,6,227,6,160,6,227,6,161,6,228,6,162,6,228,6,161,6,228,6,162,6,229,6,163,6,229,6,162,6,229,6,163,6,230,6,164,6,230,6,163,6,230,6,164,6,231,6,165,6,231,6,164,6,231,6,165,6,232,6,166,6,232,6,165,6,232,6,166,6,233,6,167,6,233,6,166,6,233,6,167,6,234,6,168,6,234,6,167,6,234,6,168,6,235,6,169,6,235,6,168,6,235,6,169,6,236,6,170,6,236,6,169,6,236,6,170,6,237,6,171,6,237,6,170,6,237,6,171,6,238,6,172,6,238,6,171,6,238,6,172,6,239,6,173,6,239,6,172,6,239,6,173,6,240,6,174,6,240,6,173,6,240,6,174,6,241,6,175,6,241,6,174,6,241,6,175,6,242,6,176,6,242,6,175,6,242,6,176,6,243,6,177,6,243,6,176,6,243,6,177,6,244,6,178,6,244,6,177,6,244,6,178,6,245,6,179,6,245,6,178,6,246,6,180,6,247,6,181,6,247,6,180,6,247,6,181,6,248,6,182,6,248,6,181,6,248,6,182,6,249,6,183,6,249,6,182,6,249,6,183,6,250,6,184,6,250,6,183,6,250,6,184,6,251,6,185,6,251,6,184,6,251,6,185,6,252,6,186,6,252,6,185,6,252,6,186,6,253,6,187,6,253,6,186,6,253,6,187,6,254,6,188,6,254,6,187,6,254,6,188,6,255,6,189,6,255,6,188,6,255,6,189,6,0,7,190,6,0,7,189,6,0,7,190,6,1,7,191,6,1,7,190,6,1,7,191,6,2,7,192,6,2,7,191,6,2,7,192,6,3,7,193,6,3,7,192,6,3,7,193,6,4,7,194,6,4,7,193,6,4,7,194,6,5,7,195,6,5,7,194,6,5,7,195,6,6,7,196,6,6,7,195,6,6,7,196,6,7,7,197,6,7,7,196,6,7,7,197,6,8,7,198,6,8,7,197,6,8,7,198,6,9,7,199,6,9,7,198,6,9,7,199,6,10,7,200,6,10,7,199,6,10,7,200,6,11,7,201,6,11,7,200,6,11,7,201,6,12,7,202,6,12,7,201,6,12,7,202,6,13,7,203,6,13,7,202,6,13,7,203,6,14,7,204,6,14,7,203,6,14,7,204,6,15,7,205,6,15,7,204,6,15,7,205,6,16,7,206,6,16,7,205,6,16,7,206,6,17,7,207,6,17,7,206,6,17,7,207,6,18,7,208,6,18,7,207,6,18,7,208,6,19,7,209,6,19,7,208,6,19,7,209,6,20,7,210,6,20,7,209,6,20,7,210,6,21,7,211,6,21,7,210,6,21,7,211,6,22,7,212,6,22,7,211,6,22,7,212,6,23,7,213,6,23,7,212,6,23,7,213,6,24,7,214,6,24,7,213,6,24,7,214,6,25,7,215,6,25,7,214,6,25,7,215,6,26,7,216,6,26,7,215,6,26,7,216,6,27,7,217,6,27,7,216,6,27,7,217,6,28,7,218,6,28,7,217,6,28,7,218,6,29,7,219,6,29,7,218,6,29,7,219,6,30,7,220,6,30,7,219,6,30,7,220,6,31,7,221,6,31,7,220,6,31,7,221,6,32,7,222,6,32,7,221,6,32,7,222,6,33,7,223,6,33,7,222,6,33,7,223,6,34,7,224,6,34,7,223,6,34,7,224,6,35,7,225,6,35,7,224,6,35,7,225,6,36,7,226,6,36,7,225,6,36,7,226,6,37,7,227,6,37,7,226,6,37,7,227,6,38,7,228,6,38,7,227,6,38,7,228,6,39,7,229,6,39,7,228,6,39,7,229,6,40,7,230,6,40,7,229,6,40,7,230,6,41,7,231,6,41,7,230,6,41,7,231,6,42,7,232,6,42,7,231,6,42,7,232,6,43,7,233,6,43,7,232,6,43,7,233,6,44,7,234,6,44,7,233,6,44,7,234,6,45,7,235,6,45,7,234,6,45,7,235,6,46,7,236,6,46,7,235,6,46,7,236,6,47,7,237,6,47,7,236,6,47,7,237,6,48,7,238,6,48,7,237,6,48,7,238,6,49,7,239,6,49,7,238,6,49,7,239,6,50,7,240,6,50,7,239,6,50,7,240,6,51,7,241,6,51,7,240,6,51,7,241,6,52,7,242,6,52,7,241,6,52,7,242,6,53,7,243,6,53,7,242,6,53,7,243,6,54,7,244,6,54,7,243,6,54,7,244,6,55,7,245,6,55,7,244,6,56,7,246,6,57,7,247,6,57,7,246,6,57,7,247,6,58,7,248,6,58,7,247,6,58,7,248,6,59,7,249,6,59,7,248,6,59,7,249,6,60,7,250,6,60,7,249,6,60,7,250,6,61,7,251,6,61,7,250,6,61,7,251,6,62,7,252,6,62,7,251,6,62,7,252,6,63,7,253,6,63,7,252,6,63,7,253,6,64,7,254,6,64,7,253,6,64,7,254,6,65,7,255,6,65,7,254,6,65,7,255,6,66,7,0,7,66,7,255,6,66,7,0,7,67,7,1,7,67,7,0,7,67,7,1,7,68,7,2,7,68,7,1,7,68,7,2,7,69,7,3,7,69,7,2,7,69,7,3,7,70,7,4,7,70,7,3,7,70,7,4,7,71,7,5,7,71,7,4,7,71,7,5,7,72,7,6,7,72,7,5,7,72,7,6,7,73,7,7,7,73,7,6,7,73,7,7,7,74,7,8,7,74,7,7,7,74,7,8,7,75,7,9,7,75,7,8,7,75,7,9,7,76,7,10,7,76,7,9,7,76,7,10,7,77,7,11,7,77,7,10,7,77,7,11,7,78,7,12,7,78,7,11,7,78,7,12,7,79,7,13,7,79,7,12,7,79,7,13,7,80,7,14,7,80,7,13,7,80,7,14,7,81,7,15,7,81,7,14,7,81,7,15,7,82,7,16,7,82,7,15,7,82,7,16,7,83,7,17,7,83,7,16,7,83,7,17,7,84,7,18,7,84,7,17,7,84,7,18,7,85,7,19,7,85,7,18,7,85,7,19,7,86,7,20,7,86,7,19,7,86,7,20,7,87,7,21,7,87,7,20,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+235520);
/* memory initializer */ allocate([87,7,21,7,88,7,22,7,88,7,21,7,88,7,22,7,89,7,23,7,89,7,22,7,89,7,23,7,90,7,24,7,90,7,23,7,90,7,24,7,91,7,25,7,91,7,24,7,91,7,25,7,92,7,26,7,92,7,25,7,92,7,26,7,93,7,27,7,93,7,26,7,93,7,27,7,94,7,28,7,94,7,27,7,94,7,28,7,95,7,29,7,95,7,28,7,95,7,29,7,96,7,30,7,96,7,29,7,96,7,30,7,97,7,31,7,97,7,30,7,97,7,31,7,98,7,32,7,98,7,31,7,98,7,32,7,99,7,33,7,99,7,32,7,99,7,33,7,100,7,34,7,100,7,33,7,100,7,34,7,101,7,35,7,101,7,34,7,101,7,35,7,102,7,36,7,102,7,35,7,102,7,36,7,103,7,37,7,103,7,36,7,103,7,37,7,104,7,38,7,104,7,37,7,104,7,38,7,105,7,39,7,105,7,38,7,105,7,39,7,106,7,40,7,106,7,39,7,106,7,40,7,107,7,41,7,107,7,40,7,107,7,41,7,108,7,42,7,108,7,41,7,108,7,42,7,109,7,43,7,109,7,42,7,109,7,43,7,110,7,44,7,110,7,43,7,110,7,44,7,111,7,45,7,111,7,44,7,111,7,45,7,112,7,46,7,112,7,45,7,112,7,46,7,113,7,47,7,113,7,46,7,113,7,47,7,114,7,48,7,114,7,47,7,114,7,48,7,115,7,49,7,115,7,48,7,115,7,49,7,116,7,50,7,116,7,49,7,116,7,50,7,117,7,51,7,117,7,50,7,117,7,51,7,118,7,52,7,118,7,51,7,118,7,52,7,119,7,53,7,119,7,52,7,119,7,53,7,120,7,54,7,120,7,53,7,120,7,54,7,121,7,55,7,121,7,54,7,122,7,56,7,123,7,57,7,123,7,56,7,123,7,57,7,124,7,58,7,124,7,57,7,124,7,58,7,125,7,59,7,125,7,58,7,125,7,59,7,126,7,60,7,126,7,59,7,126,7,60,7,127,7,61,7,127,7,60,7,127,7,61,7,128,7,62,7,128,7,61,7,128,7,62,7,129,7,63,7,129,7,62,7,129,7,63,7,130,7,64,7,130,7,63,7,130,7,64,7,131,7,65,7,131,7,64,7,131,7,65,7,132,7,66,7,132,7,65,7,132,7,66,7,133,7,67,7,133,7,66,7,133,7,67,7,134,7,68,7,134,7,67,7,134,7,68,7,135,7,69,7,135,7,68,7,135,7,69,7,136,7,70,7,136,7,69,7,136,7,70,7,137,7,71,7,137,7,70,7,137,7,71,7,138,7,72,7,138,7,71,7,138,7,72,7,139,7,73,7,139,7,72,7,139,7,73,7,140,7,74,7,140,7,73,7,140,7,74,7,141,7,75,7,141,7,74,7,141,7,75,7,142,7,76,7,142,7,75,7,142,7,76,7,143,7,77,7,143,7,76,7,143,7,77,7,144,7,78,7,144,7,77,7,144,7,78,7,145,7,79,7,145,7,78,7,145,7,79,7,146,7,80,7,146,7,79,7,146,7,80,7,147,7,81,7,147,7,80,7,147,7,81,7,148,7,82,7,148,7,81,7,148,7,82,7,149,7,83,7,149,7,82,7,149,7,83,7,150,7,84,7,150,7,83,7,150,7,84,7,151,7,85,7,151,7,84,7,151,7,85,7,152,7,86,7,152,7,85,7,152,7,86,7,153,7,87,7,153,7,86,7,153,7,87,7,154,7,88,7,154,7,87,7,154,7,88,7,155,7,89,7,155,7,88,7,155,7,89,7,156,7,90,7,156,7,89,7,156,7,90,7,157,7,91,7,157,7,90,7,157,7,91,7,158,7,92,7,158,7,91,7,158,7,92,7,159,7,93,7,159,7,92,7,159,7,93,7,160,7,94,7,160,7,93,7,160,7,94,7,161,7,95,7,161,7,94,7,161,7,95,7,162,7,96,7,162,7,95,7,162,7,96,7,163,7,97,7,163,7,96,7,163,7,97,7,164,7,98,7,164,7,97,7,164,7,98,7,165,7,99,7,165,7,98,7,165,7,99,7,166,7,100,7,166,7,99,7,166,7,100,7,167,7,101,7,167,7,100,7,167,7,101,7,168,7,102,7,168,7,101,7,168,7,102,7,169,7,103,7,169,7,102,7,169,7,103,7,170,7,104,7,170,7,103,7,170,7,104,7,171,7,105,7,171,7,104,7,171,7,105,7,172,7,106,7,172,7,105,7,172,7,106,7,173,7,107,7,173,7,106,7,173,7,107,7,174,7,108,7,174,7,107,7,174,7,108,7,175,7,109,7,175,7,108,7,175,7,109,7,176,7,110,7,176,7,109,7,176,7,110,7,177,7,111,7,177,7,110,7,177,7,111,7,178,7,112,7,178,7,111,7,178,7,112,7,179,7,113,7,179,7,112,7,179,7,113,7,180,7,114,7,180,7,113,7,180,7,114,7,181,7,115,7,181,7,114,7,181,7,115,7,182,7,116,7,182,7,115,7,182,7,116,7,183,7,117,7,183,7,116,7,183,7,117,7,184,7,118,7,184,7,117,7,184,7,118,7,185,7,119,7,185,7,118,7,185,7,119,7,186,7,120,7,186,7,119,7,186,7,120,7,187,7,121,7,187,7,120,7,188,7,122,7,189,7,123,7,189,7,122,7,189,7,123,7,190,7,124,7,190,7,123,7,190,7,124,7,191,7,125,7,191,7,124,7,191,7,125,7,192,7,126,7,192,7,125,7,192,7,126,7,193,7,127,7,193,7,126,7,193,7,127,7,194,7,128,7,194,7,127,7,194,7,128,7,195,7,129,7,195,7,128,7,195,7,129,7,196,7,130,7,196,7,129,7,196,7,130,7,197,7,131,7,197,7,130,7,197,7,131,7,198,7,132,7,198,7,131,7,198,7,132,7,199,7,133,7,199,7,132,7,199,7,133,7,200,7,134,7,200,7,133,7,200,7,134,7,201,7,135,7,201,7,134,7,201,7,135,7,202,7,136,7,202,7,135,7,202,7,136,7,203,7,137,7,203,7,136,7,203,7,137,7,204,7,138,7,204,7,137,7,204,7,138,7,205,7,139,7,205,7,138,7,205,7,139,7,206,7,140,7,206,7,139,7,206,7,140,7,207,7,141,7,207,7,140,7,207,7,141,7,208,7,142,7,208,7,141,7,208,7,142,7,209,7,143,7,209,7,142,7,209,7,143,7,210,7,144,7,210,7,143,7,210,7,144,7,211,7,145,7,211,7,144,7,211,7,145,7,212,7,146,7,212,7,145,7,212,7,146,7,213,7,147,7,213,7,146,7,213,7,147,7,214,7,148,7,214,7,147,7,214,7,148,7,215,7,149,7,215,7,148,7,215,7,149,7,216,7,150,7,216,7,149,7,216,7,150,7,217,7,151,7,217,7,150,7,217,7,151,7,218,7,152,7,218,7,151,7,218,7,152,7,219,7,153,7,219,7,152,7,219,7,153,7,220,7,154,7,220,7,153,7,220,7,154,7,221,7,155,7,221,7,154,7,221,7,155,7,222,7,156,7,222,7,155,7,222,7,156,7,223,7,157,7,223,7,156,7,223,7,157,7,224,7,158,7,224,7,157,7,224,7,158,7,225,7,159,7,225,7,158,7,225,7,159,7,226,7,160,7,226,7,159,7,226,7,160,7,227,7,161,7,227,7,160,7,227,7,161,7,228,7,162,7,228,7,161,7,228,7,162,7,229,7,163,7,229,7,162,7,229,7,163,7,230,7,164,7,230,7,163,7,230,7,164,7,231,7,165,7,231,7,164,7,231,7,165,7,232,7,166,7,232,7,165,7,232,7,166,7,233,7,167,7,233,7,166,7,233,7,167,7,234,7,168,7,234,7,167,7,234,7,168,7,235,7,169,7,235,7,168,7,235,7,169,7,236,7,170,7,236,7,169,7,236,7,170,7,237,7,171,7,237,7,170,7,237,7,171,7,238,7,172,7,238,7,171,7,238,7,172,7,239,7,173,7,239,7,172,7,239,7,173,7,240,7,174,7,240,7,173,7,240,7,174,7,241,7,175,7,241,7,174,7,241,7,175,7,242,7,176,7,242,7,175,7,242,7,176,7,243,7,177,7,243,7,176,7,243,7,177,7,244,7,178,7,244,7,177,7,244,7,178,7,245,7,179,7,245,7,178,7,245,7,179,7,246,7,180,7,246,7,179,7,246,7,180,7,247,7,181,7,247,7,180,7,247,7,181,7,248,7,182,7,248,7,181,7,248,7,182,7,249,7,183,7,249,7,182,7,249,7,183,7,250,7,184,7,250,7,183,7,250,7,184,7,251,7,185,7,251,7,184,7,251,7,185,7,252,7,186,7,252,7,185,7,252,7,186,7,253,7,187,7,253,7,186,7,254,7,188,7,255,7,189,7,255,7,188,7,255,7,189,7,0,8,190,7,0,8,189,7,0,8,190,7,1,8,191,7,1,8,190,7,1,8,191,7,2,8,192,7,2,8,191,7,2,8,192,7,3,8,193,7,3,8,192,7,3,8,193,7,4,8,194,7,4,8,193,7,4,8,194,7,5,8,195,7,5,8,194,7,5,8,195,7,6,8,196,7,6,8,195,7,6,8,196,7,7,8,197,7,7,8,196,7,7,8,197,7,8,8,198,7,8,8,197,7,8,8,198,7,9,8,199,7,9,8,198,7,9,8,199,7,10,8,200,7,10,8,199,7,10,8,200,7,11,8,201,7,11,8,200,7,11,8,201,7,12,8,202,7,12,8,201,7,12,8,202,7,13,8,203,7,13,8,202,7,13,8,203,7,14,8,204,7,14,8,203,7,14,8,204,7,15,8,205,7,15,8,204,7,15,8,205,7,16,8,206,7,16,8,205,7,16,8,206,7,17,8,207,7,17,8,206,7,17,8,207,7,18,8,208,7,18,8,207,7,18,8,208,7,19,8,209,7,19,8,208,7,19,8,209,7,20,8,210,7,20,8,209,7,20,8,210,7,21,8,211,7,21,8,210,7,21,8,211,7,22,8,212,7,22,8,211,7,22,8,212,7,23,8,213,7,23,8,212,7,23,8,213,7,24,8,214,7,24,8,213,7,24,8,214,7,25,8,215,7,25,8,214,7,25,8,215,7,26,8,216,7,26,8,215,7,26,8,216,7,27,8,217,7,27,8,216,7,27,8,217,7,28,8,218,7,28,8,217,7,28,8,218,7,29,8,219,7,29,8,218,7,29,8,219,7,30,8,220,7,30,8,219,7,30,8,220,7,31,8,221,7,31,8,220,7,31,8,221,7,32,8,222,7,32,8,221,7,32,8,222,7,33,8,223,7,33,8,222,7,33,8,223,7,34,8,224,7,34,8,223,7,34,8,224,7,35,8,225,7,35,8,224,7,35,8,225,7,36,8,226,7,36,8,225,7,36,8,226,7,37,8,227,7,37,8,226,7,37,8,227,7,38,8,228,7,38,8,227,7,38,8,228,7,39,8,229,7,39,8,228,7,39,8,229,7,40,8,230,7,40,8,229,7,40,8,230,7,41,8,231,7,41,8,230,7,41,8,231,7,42,8,232,7,42,8,231,7,42,8,232,7,43,8,233,7,43,8,232,7,43,8,233,7,44,8,234,7,44,8,233,7,44,8,234,7,45,8,235,7,45,8,234,7,45,8,235,7,46,8,236,7,46,8,235,7,46,8,236,7,47,8,237,7,47,8,236,7,47,8,237,7,48,8,238,7,48,8,237,7,48,8,238,7,49,8,239,7,49,8,238,7,49,8,239,7,50,8,240,7,50,8,239,7,50,8,240,7,51,8,241,7,51,8,240,7,51,8,241,7,52,8,242,7,52,8,241,7,52,8,242,7,53,8,243,7,53,8,242,7,53,8,243,7,54,8,244,7,54,8,243,7,54,8,244,7,55,8,245,7,55,8,244,7,55,8,245,7,56,8,246,7,56,8,245,7,56,8,246,7,57,8,247,7,57,8,246,7,57,8,247,7,58,8,248,7,58,8,247,7,58,8,248,7,59,8,249,7,59,8,248,7,59,8,249,7,60,8,250,7,60,8,249,7,60,8,250,7,61,8,251,7,61,8,250,7,61,8,251,7,62,8,252,7,62,8,251,7,62,8,252,7,63,8,253,7,63,8,252,7,64,8,254,7,65,8,255,7,65,8,254,7,65,8,255,7,66,8,0,8,66,8,255,7,66,8,0,8,67,8,1,8,67,8,0,8,67,8,1,8,68,8,2,8,68,8,1,8,68,8,2,8,69,8,3,8,69,8,2,8,69,8,3,8,70,8,4,8,70,8,3,8,70,8,4,8,71,8,5,8,71,8,4,8,71,8,5,8,72,8,6,8,72,8,5,8,72,8,6,8,73,8,7,8,73,8,6,8,73,8,7,8,74,8,8,8,74,8,7,8,74,8,8,8,75,8,9,8,75,8,8,8,75,8,9,8,76,8,10,8,76,8,9,8,76,8,10,8,77,8,11,8,77,8,10,8,77,8,11,8,78,8,12,8,78,8,11,8,78,8,12,8,79,8,13,8,79,8,12,8,79,8,13,8,80,8,14,8,80,8,13,8,80,8,14,8,81,8,15,8,81,8,14,8,81,8,15,8,82,8,16,8,82,8,15,8,82,8,16,8,83,8,17,8,83,8,16,8,83,8,17,8,84,8,18,8,84,8,17,8,84,8,18,8,85,8,19,8,85,8,18,8,85,8,19,8,86,8,20,8,86,8,19,8,86,8,20,8,87,8,21,8,87,8,20,8,87,8,21,8,88,8,22,8,88,8,21,8,88,8,22,8,89,8,23,8,89,8,22,8,89,8,23,8,90,8,24,8,90,8,23,8,90,8,24,8,91,8,25,8,91,8,24,8,91,8,25,8,92,8,26,8,92,8,25,8,92,8,26,8,93,8,27,8,93,8,26,8,93,8,27,8,94,8,28,8,94,8,27,8,94,8,28,8,95,8,29,8,95,8,28,8,95,8,29,8,96,8,30,8,96,8,29,8,96,8,30,8,97,8,31,8,97,8,30,8,97,8,31,8,98,8,32,8,98,8,31,8,98,8,32,8,99,8,33,8,99,8,32,8,99,8,33,8,100,8,34,8,100,8,33,8,100,8,34,8,101,8,35,8,101,8,34,8,101,8,35,8,102,8,36,8,102,8,35,8,102,8,36,8,103,8,37,8,103,8,36,8,103,8,37,8,104,8,38,8,104,8,37,8,104,8,38,8,105,8,39,8,105,8,38,8,105,8,39,8,106,8,40,8,106,8,39,8,106,8,40,8,107,8,41,8,107,8,40,8,107,8,41,8,108,8,42,8,108,8,41,8,108,8,42,8,109,8,43,8,109,8,42,8,109,8,43,8,110,8,44,8,110,8,43,8,110,8,44,8,111,8,45,8,111,8,44,8,111,8,45,8,112,8,46,8,112,8,45,8,112,8,46,8,113,8,47,8,113,8,46,8,113,8,47,8,114,8,48,8,114,8,47,8,114,8,48,8,115,8,49,8,115,8,48,8,115,8,49,8,116,8,50,8,116,8,49,8,116,8,50,8,117,8,51,8,117,8,50,8,117,8,51,8,118,8,52,8,118,8,51,8,118,8,52,8,119,8,53,8,119,8,52,8,119,8,53,8,120,8,54,8,120,8,53,8,120,8,54,8,121,8,55,8,121,8,54,8,121,8,55,8,122,8,56,8,122,8,55,8,122,8,56,8,123,8,57,8,123,8,56,8,123,8,57,8,124,8,58,8,124,8,57,8,124,8,58,8,125,8,59,8,125,8,58,8,125,8,59,8,126,8,60,8,126,8,59,8,126,8,60,8,127,8,61,8,127,8,60,8,127,8,61,8,128,8,62,8,128,8,61,8,128,8,62,8,129,8,63,8,129,8,62,8,130,8,64,8,131,8,65,8,131,8,64,8,131,8,65,8,132,8,66,8,132,8,65,8,132,8,66,8,133,8,67,8,133,8,66,8,133,8,67,8,134,8,68,8,134,8,67,8,134,8,68,8,135,8,69,8,135,8,68,8,135,8,69,8,136,8,70,8,136,8,69,8,136,8,70,8,137,8,71,8,137,8,70,8,137,8,71,8,138,8,72,8,138,8,71,8,138,8,72,8,139,8,73,8,139,8,72,8,139,8,73,8,140,8,74,8,140,8,73,8,140,8,74,8,141,8,75,8,141,8,74,8,141,8,75,8,142,8,76,8,142,8,75,8,142,8,76,8,143,8,77,8,143,8,76,8,143,8,77,8,144,8,78,8,144,8,77,8,144,8,78,8,145,8,79,8,145,8,78,8,145,8,79,8,146,8,80,8,146,8,79,8,146,8,80,8,147,8,81,8,147,8,80,8,147,8,81,8,148,8,82,8,148,8,81,8,148,8,82,8,149,8,83,8,149,8,82,8,149,8,83,8,150,8,84,8,150,8,83,8,150,8,84,8,151,8,85,8,151,8,84,8,151,8,85,8,152,8,86,8,152,8,85,8,152,8,86,8,153,8,87,8,153,8,86,8,153,8,87,8,154,8,88,8,154,8,87,8,154,8,88,8,155,8,89,8,155,8,88,8,155,8,89,8,156,8,90,8,156,8,89,8,156,8,90,8,157,8,91,8,157,8,90,8,157,8,91,8,158,8,92,8,158,8,91,8,158,8,92,8,159,8,93,8,159,8,92,8,159,8,93,8,160,8,94,8,160,8,93,8,160,8,94,8,161,8,95,8,161,8,94,8,161,8,95,8,162,8,96,8,162,8,95,8,162,8,96,8,163,8,97,8,163,8,96,8,163,8,97,8,164,8,98,8,164,8,97,8,164,8,98,8,165,8,99,8,165,8,98,8,165,8,99,8,166,8,100,8,166,8,99,8,166,8,100,8,167,8,101,8,167,8,100,8,167,8,101,8,168,8,102,8,168,8,101,8,168,8,102,8,169,8,103,8,169,8,102,8,169,8,103,8,170,8,104,8,170,8,103,8,170,8,104,8,171,8,105,8,171,8,104,8,171,8,105,8,172,8,106,8,172,8,105,8,172,8,106,8,173,8,107,8,173,8,106,8,173,8,107,8,174,8,108,8,174,8,107,8,174,8,108,8,175,8,109,8,175,8,108,8,175,8,109,8,176,8,110,8,176,8,109,8,176,8,110,8,177,8,111,8,177,8,110,8,177,8,111,8,178,8,112,8,178,8,111,8,178,8,112,8,179,8,113,8,179,8,112,8,179,8,113,8,180,8,114,8,180,8,113,8,180,8,114,8,181,8,115,8,181,8,114,8,181,8,115,8,182,8,116,8,182,8,115,8,182,8,116,8,183,8,117,8,183,8,116,8,183,8,117,8,184,8,118,8,184,8,117,8,184,8,118,8,185,8,119,8,185,8,118,8,185,8,119,8,186,8,120,8,186,8,119,8,186,8,120,8,187,8,121,8,187,8,120,8,187,8,121,8,188,8,122,8,188,8,121,8,188,8,122,8,189,8,123,8,189,8,122,8,189,8,123,8,190,8,124,8,190,8,123,8,190,8,124,8,191,8,125,8,191,8,124,8,191,8,125,8,192,8,126,8,192,8,125,8,192,8,126,8,193,8,127,8,193,8,126,8,193,8,127,8,194,8,128,8,194,8,127,8,194,8,128,8,195,8,129,8,195,8,128,8,196,8,130,8,197,8,131,8,197,8,130,8,197,8,131,8,198,8,132,8,198,8,131,8,198,8,132,8,199,8,133,8,199,8,132,8,199,8,133,8,200,8,134,8,200,8,133,8,200,8,134,8,201,8,135,8,201,8,134,8,201,8,135,8,202,8,136,8,202,8,135,8,202,8,136,8,203,8,137,8,203,8,136,8,203,8,137,8,204,8,138,8,204,8,137,8,204,8,138,8,205,8,139,8,205,8,138,8,205,8,139,8,206,8,140,8,206,8,139,8,206,8,140,8,207,8,141,8,207,8,140,8,207,8,141,8,208,8,142,8,208,8,141,8,208,8,142,8,209,8,143,8,209,8,142,8,209,8,143,8,210,8,144,8,210,8,143,8,210,8,144,8,211,8,145,8,211,8,144,8,211,8,145,8,212,8,146,8,212,8,145,8,212,8,146,8,213,8,147,8,213,8,146,8,213,8,147,8,214,8,148,8,214,8,147,8,214,8,148,8,215,8,149,8,215,8,148,8,215,8,149,8,216,8,150,8,216,8,149,8,216,8,150,8,217,8,151,8,217,8,150,8,217,8,151,8,218,8,152,8,218,8,151,8,218,8,152,8,219,8,153,8,219,8,152,8,219,8,153,8,220,8,154,8,220,8,153,8,220,8,154,8,221,8,155,8,221,8,154,8,221,8,155,8,222,8,156,8,222,8,155,8,222,8,156,8,223,8,157,8,223,8,156,8,223,8,157,8,224,8,158,8,224,8,157,8,224,8,158,8,225,8,159,8,225,8,158,8,225,8,159,8,226,8,160,8,226,8,159,8,226,8,160,8,227,8,161,8,227,8,160,8,227,8,161,8,228,8,162,8,228,8,161,8,228,8,162,8,229,8,163,8,229,8,162,8,229,8,163,8,230,8,164,8,230,8,163,8,230,8,164,8,231,8,165,8,231,8,164,8,231,8,165,8,232,8,166,8,232,8,165,8,232,8,166,8,233,8,167,8,233,8,166,8,233,8,167,8,234,8,168,8,234,8,167,8,234,8,168,8,235,8,169,8,235,8,168,8,235,8,169,8,236,8,170,8,236,8,169,8,236,8,170,8,237,8,171,8,237,8,170,8,237,8,171,8,238,8,172,8,238,8,171,8,238,8,172,8,239,8,173,8,239,8,172,8,239,8,173,8,240,8,174,8,240,8,173,8,240,8,174,8,241,8,175,8,241,8,174,8,241,8,175,8,242,8,176,8,242,8,175,8,242,8,176,8,243,8,177,8,243,8,176,8,243,8,177,8,244,8,178,8,244,8,177,8,244,8,178,8,245,8,179,8,245,8,178,8,245,8,179,8,246,8,180,8,246,8,179,8,246,8,180,8,247,8,181,8,247,8,180,8,247,8,181,8,248,8,182,8,248,8,181,8,248,8,182,8,249,8,183,8,249,8,182,8,249,8,183,8,250,8,184,8,250,8,183,8,250,8,184,8,251,8,185,8,251,8,184,8,251,8,185,8,252,8,186,8,252,8,185,8,252,8,186,8,253,8,187,8,253,8,186,8,253,8,187,8,254,8,188,8,254,8,187,8,254,8,188,8,255,8,189,8,255,8,188,8,255,8,189,8,0,9,190,8,0,9,189,8,0,9,190,8,1,9,191,8,1,9,190,8,1,9,191,8,2,9,192,8,2,9,191,8,2,9,192,8,3,9,193,8,3,9,192,8,3,9,193,8,4,9,194,8,4,9,193,8,4,9,194,8,5,9,195,8,5,9,194,8,0,0,122,64,37,181,70,66,33,48,242,194,0,0,122,64,7,142,65,66,66,96,234,194,0,0,250,64,140,121,67,66,33,48,242,194,0,0,250,64,25,4,64,66,66,96,234,194,52,128,59,65,150,97,61,66,33,48,242,194,52,128,59,65,60,125,59,66,66,96,234,194,0,0,122,65,30,167,51,66,33,48,242,194,0,0,122,65,131,0,54,66,66,96,234,194,26,64,156,65,67,156,44,66,33,48,242,194,26,64,156,65,37,117,45,66,66,96,234,194,0,128,187,65,18,148,37,66,33,48,242,194,0,128,187,65,63,87,41,66,66,96,234,194,26,192,218,65,35,138,32,66,33,48,242,194,26,192,218,65,243,159,36,66,66,96,234,194,0,0,250,65,220,23,29,66,33,48,242,194,0,0,250,65,196,177,28,66,66,96,234,194,13,160,12,66,185,124,25,66,33,48,242,194,13,160,12,66,52,64,24,66,66,96,234,194,0,64,28,66,215,163,20,66,33,48,242,194,0,64,28,66,38,228,17,66,66,96,234,194,13,224,43,66,58,18,13,66,33,48,242,194,13,224,43,66,77,51,11,66,66,96,234,194,0,128,59,66,95,105,3,66,33,48,242,194,0,128,59,66,140,10,2,66,66,96,234,194,13,32,75,66,158,94,0,66,33,48,242,194,13,32,75,66,249,15,253,65,66,96,234,194,0,192,90,66,34,206,4,66,33,48,242,194,0,192,90,66,130,226,252,65,66,96,234,194,13,96,106,66,127,153,8,66,33,48,242,194,13,96,106,66,156,51,1,66,66,96,234,194,0,0,122,66,236,17,7,66,33,48,242,194,0,0,122,66,180,200,2,66,66,96,234,194,7,208,132,66,241,244,9,66,33,48,242,194,7,208,132,66,156,132,5,66,66,96,234,194,0,160,140,66,245,249,10,66,33,48,242,194,0,160,140,66,223,224,7,66,66,96,234,194,7,112,148,66,37,198,13,66,33,48,242,194,7,112,148,66,53,175,11,66,66,96,234,194,0,64,156,66,26,192,18,66,33,48,242,194,0,64,156,66,12,19,19,66,66,96,234,194,7,16,164,66,75,136,23,66,33,48,242,194,7,16,164,66,6,18,23,66,66,96,234,194,0,224,171,66,199,105,23,66,33,48,242,194,0,224,171,66,5,69,23,66,66,96,234,194,7,176,179,66,159,252,24,66,33,48,242,194,7,176,179,66,181,38,25,66,66,96,234,194,0,128,187,66,134,90,30,66,33,48,242,194,0,128,187,66,221,117,30,66,66,96,234,194,7,80,195,66,152,221,30,66,33,48,242,194,7,80,195,66,3,248,30,66,66,96,234,194,66,32,203,66,27,47,33,66,33,48,242,194,66,32,203,66,43,216,35,66,66,96,234,194,33,240,210,66,136,227,34,66,33,48,242,194,33,240,210,66,163,146,35,66,66,96,234,194,0,192,218,66,136,133,32,66,33,48,242,194,0,192,218,66,38,164,34,66,66,96,234,194,223,143,226,66,143,211,29,66,33,48,242,194,223,143,226,66,139,44,33,66,66,96,234,194,66,96,234,66,18,3,28,66,33,48,242,194,66,96,234,66,239,120,31,66,66,96,234,194,33,48,242,66,47,93,24,66,33,48,242,194,33,48,242,66,209,98,28,66,66,96,234,194,0,0,250,66,47,221,20,66,33,48,242,194,0,0,250,66,128,136,20,66,66,96,234,194,240,231,0,67,55,218,13,66,33,48,242,194,240,231,0,67,188,22,14,66,66,96,234,194,33,208,4,67,19,225,5,66,33,48,242,194,33,208,4,67,144,160,7,66,66,96,234,194,16,184,8,67,173,105,252,65,33,48,242,194,16,184,8,67,21,12,1,66,66,96,234,194,0,160,12,67,63,87,229,65,33,48,242,194,0,160,12,67,244,236,238,65,66,96,234,194,240,135,16,67,89,134,212,65,33,48,242,194,240,135,16,67,251,92,225,65,66,96,234,194,33,112,20,67,209,145,193,65,33,48,242,194,33,112,20,67,45,50,217,65,66,96,234,194,16,88,24,67,32,193,177,65,33,48,242,194,16,88,24,67,113,44,196,65,66,96,234,194,0,64,28,67,84,116,161,65,33,48,242,194,0,64,28,67,208,85,176,65,66,96,234,194,240,39,32,67,143,228,140,65,33,48,242,194,240,39,32,67,241,99,159,65,66,96,234,194,33,16,36,67,5,163,120,65,33,48,242,194,33,16,36,67,0,128,141,65,66,96,234,194,16,248,39,67,85,193,92,65,33,48,242,194,16,248,39,67,129,4,121,65,66,96,234,194,0,224,43,67,101,170,59,65,33,48,242,194,0,224,43,67,146,203,88,65,66,96,234,194,240,199,47,67,253,19,21,65,33,48,242,194,240,199,47,67,232,106,52,65,66,96,234,194,33,176,51,67,4,86,211,64,33,48,242,194,33,176,51,67,151,86,15,65,66,96,234,194,16,152,55,67,103,10,144,64,33,48,242,194,16,152,55,67,183,122,225,64,66,96,234,194,0,128,59,67,139,166,49,64,33,48,242,194,0,128,59,67,97,195,154,64,66,96,234,194,240,103,63,67,52,75,178,63,33,48,242,194,240,103,63,67,96,171,48,64,66,96,234,194,33,80,67,67,91,153,180,191,33,48,242,194,33,80,67,67,142,174,66,62,66,96,234,194,16,56,71,67,232,217,8,192,33,48,242,194,16,56,71,67,237,241,14,191,66,96,234,194,0,32,75,67,97,166,27,192,33,48,242,194,0,32,75,67,84,58,132,191,66,96,234,194,240,7,79,67,94,157,111,192,33,48,242,194,240,7,79,67,134,61,11,192,66,96,234,194,33,240,82,67,5,23,138,192,33,48,242,194,33,240,82,67,172,173,244,191,66,96,234,194,16,216,86,67,177,191,173,192,33,48,242,194,16,216,86,67,243,2,64,192,66,96,234,194,0,192,90,67,253,106,214,192,33,48,242,194,0,192,90,67,135,138,136,192,66,96,234,194,240,167,94,67,175,66,198,192,33,48,242,194,240,167,94,67,215,18,165,192,66,96,234,194,33,144,98,67,94,215,149,192,33,48,242,194,33,144,98,67,168,169,93,192,66,96,234,194,16,120,102,67,157,99,84,192,33,48,242,194,16,120,102,67,14,74,10,192,66,96,234,194,0,96,106,67,11,152,120,192,33,48,242,194,0,96,106,67,48,42,189,191,66,96,234,194,240,71,110,67,203,103,115,192,33,48,242,194,240,71,110,67,250,97,228,191,66,96,234,194,33,48,114,67,172,226,91,192,33,48,242,194,33,48,114,67,224,103,128,191,66,96,234,194,16,24,118,67,198,162,113,192,33,48,242,194,16,24,118,67,106,106,253,191,66,96,234,194,0,0,122,67,105,58,117,192,33,48,242,194,0,0,122,67,79,204,18,192,66,96,234,194,0,0,122,64,90,53,73,66,0,0,250,194,0,0,250,64,12,19,72,66,0,0,250,194,52,128,59,65,221,53,63,66,0,0,250,194,0,0,122,65,24,166,53,66,0,0,250,194,26,64,156,65,177,225,42,66,0,0,250,194,0,128,187,65,236,111,40,66,0,0,250,194,26,192,218,65,208,68,36,66,0,0,250,194,0,0,250,65,215,52,33,66,0,0,250,194,13,160,12,66,160,154,25,66,0,0,250,194,0,64,28,66,12,83,18,66,0,0,250,194,13,224,43,66,243,78,12,66,0,0,250,194,0,128,59,66,182,179,3,66,0,0,250,194,13,32,75,66,85,48,250,65,0,0,250,194,0,192,90,66,75,217,5,66,0,0,250,194,13,96,106,66,137,65,9,66,0,0,250,194,0,0,122,66,139,172,9,66,0,0,250,194,7,208,132,66,231,123,10,66,0,0,250,194,0,160,140,66,20,208,11,66,0,0,250,194,7,112,148,66,8,236,14,66,0,0,250,194,0,64,156,66,69,199,21,66,0,0,250,194,7,16,164,66,199,186,22,66,0,0,250,194,0,224,171,66,27,239,23,66,0,0,250,194,7,176,179,66,3,73,26,66,0,0,250,194,0,128,187,66,113,61,30,66,0,0,250,194,7,80,195,66,12,66,32,66,0,0,250,194,66,32,203,66,222,177,31,66,0,0,250,194,33,240,210,66,151,144,31,66,0,0,250,194,0,192,218,66,7,223,31,66,0,0,250,194,223,143,226,66,229,16,31,66,0,0,250,194,66,96,234,66,49,8,27,66,0,0,250,194,33,48,242,66,249,177,22,66,0,0,250,194,0,0,250,66,4,86,19,66,0,0,250,194,240,231,0,67,7,14,11,66,0,0,250,194,33,208,4,67,184,192,255,65,0,0,250,194,16,184,8,67,75,217,245,65,0,0,250,194,0,160,12,67,125,208,223,65,0,0,250,194,240,135,16,67,143,194,201,65,0,0,250,194,33,112,20,67,194,23,178,65,0,0,250,194,16,88,24,67,132,30,165,65,0,0,250,194,0,64,28,67,139,125,151,65,0,0,250,194,240,39,32,67,188,5,135,65,0,0,250,194,33,16,36,67,72,225,107,65,0,0,250,194,16,248,39,67,223,224,70,65,0,0,250,194,0,224,43,67,144,160,33,65,0,0,250,194,240,199,47,67,73,75,250,64,0,0,250,194,33,176,51,67,114,225,174,64,0,0,250,194,16,152,55,67,24,125,45,64,0,0,250,194,0,128,59,67,239,230,137,63,0,0,250,194,240,103,63,67,32,183,23,191,0,0,250,194,33,80,67,67,129,120,63,192,0,0,250,194,16,56,71,67,244,195,137,192,0,0,250,194,0,32,75,67,24,120,153,192,0,0,250,194,240,7,79,67,105,116,202,192,0,0,250,194,33,240,82,67,243,31,214,192,0,0,250,194,16,216,86,67,87,120,5,193,0,0,250,194,0,192,90,67,112,25,15,193,0,0,250,194,240,167,94,67,225,64,229,192,0,0,250,194,33,144,98,67,209,63,177,192,0,0,250,194,16,120,102,67,40,68,163,192,0,0,250,194,0,96,106,67,96,205,184,192,0,0,250,194,240,71,110,67,154,8,179,192,0,0,250,194,33,48,114,67,223,253,185,192,0,0,250,194,16,24,118,67,0,116,175,192,0,0,250,194,0,0,122,67,165,78,170,192,0,0,250,194,0,0,122,64,235,226,73,66,240,231,0,195,0,0,250,64,157,145,73,66,240,231,0,195,52,128,59,65,24,102,64,66,240,231,0,195,0,0,122,65,63,245,51,66,240,231,0,195,26,64,156,65,23,55,45,66,240,231,0,195,0,128,187,65,156,132,43,66,240,231,0,195,26,192,218,65,172,92,40,66,240,231,0,195,0,0,250,65,245,57,32,66,240,231,0,195,13,160,12,66,66,207,22,66,240,231,0,195,0,64,28,66,97,3,15,66,240,231,0,195,13,224,43,66,199,250,3,66,240,231,0,195,0,128,59,66,22,251,253,65,240,231,0,195,13,32,75,66,200,135,247,65,240,231,0,195,0,192,90,66,191,125,255,65,240,231,0,195,13,96,106,66,171,207,4,66,240,231,0,195,0,0,122,66,140,10,8,66,240,231,0,195,7,208,132,66,26,64,9,66,240,231,0,195,0,160,140,66,59,112,10,66,240,231,0,195,7,112,148,66,94,139,15,66,240,231,0,195,0,64,156,66,54,77,18,66,240,231,0,195,7,16,164,66,134,154,19,66,240,231,0,195,0,224,171,66,219,121,21,66,240,231,0,195,7,176,179,66,246,23,25,66,240,231,0,195,0,128,187,66,216,1,27,66,240,231,0,195,7,80,195,66,200,7,31,66,240,231,0,195,66,32,203,66,126,93,29,66,240,231,0,195,33,240,210,66,138,176,33,66,240,231,0,195,0,192,218,66,37,6,34,66,240,231,0,195,223,143,226,66,236,0,31,66,240,231,0,195,66,96,234,66,179,123,26,66,240,231,0,195,33,48,242,66,238,154,20,66,240,231,0,195,0,0,250,66,18,3,16,66,240,231,0,195,240,231,0,67,214,133,8,66,240,231,0,195,33,208,4,67,28,107,252,65,240,231,0,195,16,184,8,67,55,154,233,65,240,231,0,195,0,160,12,67,114,249,210,65,240,231,0,195,240,135,16,67,73,174,192,65,240,231,0,195,33,112,20,67,195,100,168,65,240,231,0,195,16,88,24,67,103,196,151,65,240,231,0,195,0,64,28,67,198,109,132,65,240,231,0,195,240,39,32,67,216,240,104,65,240,231,0,195,33,16,36,67,232,106,77,65,240,231,0,195,16,248,39,67,124,242,52,65,240,231,0,195,0,224,43,67,118,26,19,65,240,231,0,195,240,199,47,67,211,19,219,64,240,231,0,195,33,176,51,67,92,61,115,64,240,231,0,195,16,152,55,67,164,24,60,63,240,231,0,195,0,128,59,67,13,225,248,61,240,231,0,195,240,103,63,67,100,204,245,191,240,231,0,195,33,80,67,67,10,75,171,192,240,231,0,195,16,56,71,67,160,26,226,192,240,231,0,195,0,32,75,67,59,95,4,193,240,231,0,195,240,7,79,67,225,52,13,193,240,231,0,195,33,240,82,67,35,202,21,193,240,231,0,195,16,216,86,67,85,193,45,193,240,231,0,195,0,192,90,67,184,30,43,193,240,231,0,195,240,167,94,67,218,143,14,193,240,231,0,195,33,144,98,67,213,248,3,193,240,231,0,195,16,120,102,67,204,122,249,192,240,231,0,195,0,96,106,67,110,221,215,192,240,231,0,195,240,71,110,67,17,54,237,192,240,231,0,195,33,48,114,67,105,116,224,192,240,231,0,195,16,24,118,67,134,85,221,192,240,231,0,195,0,0,122,67,11,41,195,192,240,231,0,195,0,0,122,64,238,107,68,66,33,208,4,195,0,0,250,64,129,21,67,66,33,208,4,195,52,128,59,65,240,231,59,66,33,208,4,195,0,0,122,65,247,228,49,66,33,208,4,195,26,64,156,65,118,207,44,66,33,208,4,195,0,128,187,65,193,40,41,66,33,208,4,195,26,192,218,65,46,255,38,66,33,208,4,195,0,0,250,65,26,81,30,66,33,208,4,195,13,160,12,66,222,66,18,66,33,208,4,195,0,64,28,66,171,62,6,66,33,208,4,195,13,224,43,66,230,174,255,65,33,208,4,195,0,128,59,66,190,159,247,65,33,208,4,195,13,32,75,66,199,186,244,65,33,208,4,195,0,192,90,66,123,20,254,65,33,208,4,195,13,96,106,66,83,86,4,66,33,208,4,195,0,0,122,66,173,186,5,66,33,208,4,195,7,208,132,66,162,180,7,66,33,208,4,195,0,160,140,66,11,181,7,66,33,208,4,195,7,112,148,66,177,63,7,66,33,208,4,195,0,64,156,66,75,200,11,66,33,208,4,195,7,16,164,66,240,133,14,66,33,208,4,195,0,224,171,66,169,83,15,66,33,208,4,195,7,176,179,66,80,77,19,66,33,208,4,195,0,128,187,66,249,79,22,66,33,208,4,195,7,80,195,66,7,48,28,66,33,208,4,195,66,32,203,66,184,158,27,66,33,208,4,195,33,240,210,66,96,118,29,66,33,208,4,195,0,192,218,66,229,225,31,66,33,208,4,195,223,143,226,66,22,59,27,66,33,208,4,195,66,96,234,66,232,89,23,66,33,208,4,195,33,48,242,66,226,88,19,66,33,208,4,195,0,0,250,66,189,99,15,66,33,208,4,195,240,231,0,67,155,102,7,66,33,208,4,195,33,208,4,67,52,0,253,65,33,208,4,195,16,184,8,67,140,57,226,65,33,208,4,195,0,160,12,67,112,223,199,65,33,208,4,195,240,135,16,67,38,211,177,65,33,208,4,195,33,112,20,67,19,97,154,65,33,208,4,195,16,88,24,67,122,54,137,65,33,208,4,195,0,64,28,67,20,63,108,65,33,208,4,195,240,39,32,67,204,238,82,65,33,208,4,195,33,16,36,67,94,75,48,65,33,208,4,195,16,248,39,67,219,138,18,65,33,208,4,195,0,224,43,67,34,113,218,64,33,208,4,195,240,199,47,67,117,205,137,64,33,208,4,195,33,176,51,67,103,10,3,64,33,208,4,195,16,152,55,67,182,219,62,191,33,208,4,195,0,128,59,67,196,153,159,191,33,208,4,195,240,103,63,67,162,93,109,192,33,208,4,195,33,80,67,67,13,137,230,192,33,208,4,195,16,56,71,67,209,22,26,193,33,208,4,195,0,32,75,67,242,65,42,193,33,208,4,195,240,7,79,67,99,127,50,193,33,208,4,195,33,240,82,67,46,255,63,193,33,208,4,195,16,216,86,67,190,48,82,193,33,208,4,195,0,192,90,67,208,68,71,193,33,208,4,195,240,167,94,67,179,12,56,193,33,208,4,195,33,144,98,67,68,105,55,193,33,208,4,195,16,120,102,67,114,249,40,193,33,208,4,195,0,96,106,67,219,92,31,193,33,208,4,195,240,71,110,67,93,63,26,193,33,208,4,195,33,48,114,67,109,168,12,193,33,208,4,195,16,24,118,67,188,92,5,193,33,208,4,195,0,0,122,67,155,114,202,192,33,208,4,195,0,0,122,64,154,153,63,66,16,184,8,195,0,0,250,64,81,43,60,66,16,184,8,195,52,128,59,65,79,111,56,66,16,184,8,195,0,0,122,65,154,72,43,66,16,184,8,195,26,64,156,65,213,137,39,66,16,184,8,195,0,128,187,65,223,160,37,66,16,184,8,195,26,192,218,65,29,184,30,66,16,184,8,195,0,0,250,65,157,192,24,66,16,184,8,195,13,160,12,66,175,148,13,66,16,184,8,195,0,64,28,66,58,163,254,65,16,184,8,195,13,224,43,66,172,28,248,65,16,184,8,195,0,128,59,66,236,81,234,65,16,184,8,195,13,32,75,66,98,144,235,65,16,184,8,195,0,192,90,66,170,241,242,65,16,184,8,195,13,96,106,66,65,2,253,65,16,184,8,195,0,0,122,66,219,10,255,65,16,184,8,195,7,208,132,66,165,61,3,66,16,184,8,195,0,160,140,66,127,187,5,66,16,184,8,195,7,112,148,66,143,194,4,66,16,184,8,195,0,64,156,66,195,245,6,66,16,184,8,195,7,16,164,66,54,107,12,66,16,184,8,195,0,224,171,66,114,249,16,66,16,184,8,195,7,176,179,66,161,248,17,66,16,184,8,195,0,128,187,66,156,196,16,66,16,184,8,195,7,80,195,66,33,48,22,66,16,184,8,195,66,32,203,66,184,64,24,66,16,184,8,195,33,240,210,66,211,158,26,66,16,184,8,195,0,192,218,66,41,203,25,66,16,184,8,195,223,143,226,66,79,94,23,66,16,184,8,195,66,96,234,66,54,60,22,66,16,184,8,195,33,48,242,66,172,28,21,66,16,184,8,195,0,0,250,66,153,106,13,66,16,184,8,195,240,231,0,67,39,96,4,66,16,184,8,195,33,208,4,67,14,45,244,65,16,184,8,195,16,184,8,67,254,195,220,65,16,184,8,195,0,160,12,67,14,173,195,65,16,184,8,195,240,135,16,67,156,68,168,65,16,184,8,195,33,112,20,67,98,33,144,65,16,184,8,195,16,88,24,67,186,218,117,65,16,184,8,195,0,64,28,67,37,117,86,65,16,184,8,195,240,39,32,67,16,233,58,65,16,184,8,195,33,16,36,67,97,253,26,65,16,184,8,195,16,248,39,67,149,43,242,64,16,184,8,195,0,224,43,67,183,209,143,64,16,184,8,195,240,199,47,67,118,195,198,63,16,184,8,195,33,176,51,67,69,212,140,62,16,184,8,195,16,152,55,67,83,232,12,192,16,184,8,195,0,128,59,67,101,199,74,192,16,184,8,195,240,103,63,67,114,191,183,192,16,184,8,195,33,80,67,67,72,109,5,193,16,184,8,195,16,56,71,67,177,225,63,193,16,184,8,195,0,32,75,67,171,207,91,193,16,184,8,195,240,7,79,67,247,117,99,193,16,184,8,195,33,240,82,67,246,40,108,193,16,184,8,195,16,216,86,67,206,170,108,193,16,184,8,195,0,192,90,67,180,89,119,193,16,184,8,195,240,167,94,67,238,90,108,193,16,184,8,195,33,144,98,67,152,76,108,193,16,184,8,195,16,120,102,67,159,205,80,193,16,184,8,195,0,96,106,67,3,9,76,193,16,184,8,195,240,71,110,67,15,11,66,193,16,184,8,195,33,48,114,67,33,176,63,193,16,184,8,195,16,24,118,67,40,68,20,193,16,184,8,195,0,0,122,67,156,167,205,192,16,184,8,195,0,0,122,64,137,18,61,66,0,160,12,195,0,0,250,64,187,103,57,66,0,160,12,195,52,128,59,65,239,120,52,66,0,160,12,195,0,0,122,65,83,214,43,66,0,160,12,195,26,64,156,65,246,40,32,66,0,160,12,195,0,128,187,65,173,169,24,66,0,160,12,195,26,192,218,65,202,3,21,66,0,160,12,195,0,0,250,65,241,180,14,66,0,160,12,195,13,160,12,66,126,93,5,66,0,160,12,195,0,64,28,66,120,11,246,65,0,160,12,195,13,224,43,66,215,52,232,65,0,160,12,195,0,128,59,66,99,127,222,65,0,160,12,195,13,32,75,66,15,156,219,65,0,160,12,195,0,192,90,66,148,135,225,65,0,160,12,195,13,96,106,66,123,131,238,65,0,160,12,195,0,0,122,66,126,29,241,65,0,160,12,195,7,208,132,66,27,175,245,65,0,160,12,195,0,160,140,66,158,111,255,65,0,160,12,195,7,112,148,66,244,172,2,66,0,160,12,195,0,64,156,66,91,177,3,66,0,160,12,195,7,16,164,66,161,22,14,66,0,160,12,195,0,224,171,66,201,182,16,66,0,160,12,195,7,176,179,66,188,116,15,66,0,160,12,195,0,128,187,66,60,253,12,66,0,160,12,195,7,80,195,66,154,136,14,66,0,160,12,195,66,32,203,66,185,77,18,66,0,160,12,195,33,240,210,66,157,0,21,66,0,160,12,195,0,192,218,66,76,230,18,66,0,160,12,195,223,143,226,66,253,182,17,66,0,160,12,195,66,96,234,66,68,186,18,66,0,160,12,195,33,48,242,66,181,183,17,66,0,160,12,195,0,0,250,66,118,241,12,66,0,160,12,195,240,231,0,67,150,242,3,66,0,160,12,195,33,208,4,67,125,63,241,65,0,160,12,195,16,184,8,67,118,96,216,65,0,160,12,195,0,160,12,67,220,215,190,65,0,160,12,195,240,135,16,67,196,49,163,65,0,160,12,195,33,112,20,67,173,250,132,65,0,160,12,195,16,88,24,67,145,237,80,65,0,160,12,195,0,64,28,67,233,38,50,65,0,160,12,195,240,39,32,67,12,159,21,65,0,160,12,195,33,16,36,67,3,149,235,64,0,160,12,195,16,248,39,67,157,46,170,64,0,160,12,195,0,224,43,67,88,86,50,64,0,160,12,195,240,199,47,67,155,117,94,63,0,160,12,195,33,176,51,67], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+245760);
/* memory initializer */ allocate([116,70,168,191,0,160,12,195,16,152,55,67,93,22,105,192,0,160,12,195,0,128,59,67,61,68,172,192,0,160,12,195,240,103,63,67,246,81,1,193,0,160,12,195,33,80,67,67,196,177,46,193,0,160,12,195,16,56,71,67,19,97,100,193,0,160,12,195,0,32,75,67,45,50,129,193,0,160,12,195,240,7,79,67,165,78,135,193,0,160,12,195,33,240,82,67,246,168,135,193,0,160,12,195,16,216,86,67,131,209,140,193,0,160,12,195,0,192,90,67,112,78,141,193,0,160,12,195,240,167,94,67,162,69,137,193,0,160,12,195,33,144,98,67,76,166,129,193,0,160,12,195,16,120,102,67,199,75,124,193,0,160,12,195,0,96,106,67,13,224,112,193,0,160,12,195,240,71,110,67,163,146,108,193,0,160,12,195,33,48,114,67,135,167,77,193,0,160,12,195,16,24,118,67,188,75,19,193,0,160,12,195,0,0,122,67,245,103,179,192,0,160,12,195,0,0,122,64,142,245,52,66,240,135,16,195,0,0,250,64,212,43,52,66,240,135,16,195,52,128,59,65,187,120,48,66,240,135,16,195,0,0,122,65,168,198,41,66,240,135,16,195,26,64,156,65,145,237,30,66,240,135,16,195,0,128,187,65,13,49,20,66,240,135,16,195,26,192,218,65,25,115,9,66,240,135,16,195,0,0,250,65,85,1,5,66,240,135,16,195,13,160,12,66,179,234,248,65,240,135,16,195,0,64,28,66,73,46,234,65,240,135,16,195,13,224,43,66,247,134,218,65,240,135,16,195,0,128,59,66,40,254,216,65,240,135,16,195,13,32,75,66,29,56,213,65,240,135,16,195,0,192,90,66,107,171,210,65,240,135,16,195,13,96,106,66,145,143,222,65,240,135,16,195,0,0,122,66,202,195,222,65,240,135,16,195,7,208,132,66,18,165,222,65,240,135,16,195,0,160,140,66,249,32,239,65,240,135,16,195,7,112,148,66,154,136,248,65,240,135,16,195,0,64,156,66,171,79,2,66,240,135,16,195,7,16,164,66,130,34,10,66,240,135,16,195,0,224,171,66,50,149,12,66,240,135,16,195,7,176,179,66,66,15,11,66,240,135,16,195,0,128,187,66,33,95,8,66,240,135,16,195,7,80,195,66,113,44,9,66,240,135,16,195,66,32,203,66,233,55,11,66,240,135,16,195,33,240,210,66,151,255,16,66,240,135,16,195,0,192,218,66,36,87,15,66,240,135,16,195,223,143,226,66,140,74,15,66,240,135,16,195,66,96,234,66,125,255,14,66,240,135,16,195,33,48,242,66,248,83,11,66,240,135,16,195,0,0,250,66,36,87,9,66,240,135,16,195,240,231,0,67,201,229,1,66,240,135,16,195,33,208,4,67,215,146,237,65,240,135,16,195,16,184,8,67,160,26,210,65,240,135,16,195,0,160,12,67,69,216,186,65,240,135,16,195,240,135,16,67,72,208,154,65,240,135,16,195,33,112,20,67,248,83,103,65,240,135,16,195,16,88,24,67,118,224,51,65,240,135,16,195,0,64,28,67,14,21,28,65,240,135,16,195,240,39,32,67,72,196,254,64,240,135,16,195,33,16,36,67,155,114,181,64,240,135,16,195,16,248,39,67,218,143,130,64,240,135,16,195,0,224,43,67,180,2,219,63,240,135,16,195,240,199,47,67,159,85,106,191,240,135,16,195,33,176,51,67,163,117,42,192,240,135,16,195,16,152,55,67,120,156,178,192,240,135,16,195,0,128,59,67,153,100,249,192,240,135,16,195,240,103,63,67,208,213,34,193,240,135,16,195,33,80,67,67,165,189,88,193,240,135,16,195,16,56,71,67,185,141,128,193,240,135,16,195,0,32,75,67,6,1,138,193,240,135,16,195,240,7,79,67,245,202,149,193,240,135,16,195,33,240,82,67,4,214,149,193,240,135,16,195,16,216,86,67,102,102,154,193,240,135,16,195,0,192,90,67,120,139,162,193,240,135,16,195,240,167,94,67,149,229,155,193,240,135,16,195,33,144,98,67,59,95,148,193,240,135,16,195,16,120,102,67,51,51,140,193,240,135,16,195,0,96,106,67,145,15,132,193,240,135,16,195,240,71,110,67,188,150,113,193,240,135,16,195,33,48,114,67,70,37,81,193,240,135,16,195,16,24,118,67,159,217,31,193,240,135,16,195,0,0,122,67,121,146,180,192,240,135,16,195,0,0,122,64,179,170,45,66,33,112,20,195,0,0,250,64,195,19,44,66,33,112,20,195,52,128,59,65,46,127,42,66,33,112,20,195,0,0,122,65,75,136,35,66,33,112,20,195,26,64,156,65,199,186,26,66,33,112,20,195,0,128,187,65,32,18,16,66,33,112,20,195,26,192,218,65,146,220,3,66,33,112,20,195,0,0,250,65,45,50,251,65,33,112,20,195,13,160,12,66,175,20,236,65,33,112,20,195,0,64,28,66,159,171,219,65,33,112,20,195,13,224,43,66,49,8,201,65,33,112,20,195,0,128,59,66,92,160,203,65,33,112,20,195,13,32,75,66,79,175,205,65,33,112,20,195,0,192,90,66,96,229,205,65,33,112,20,195,13,96,106,66,82,73,209,65,33,112,20,195,0,0,122,66,254,229,217,65,33,112,20,195,7,208,132,66,115,232,218,65,33,112,20,195,0,160,140,66,199,58,222,65,33,112,20,195,7,112,148,66,140,185,232,65,33,112,20,195,0,64,156,66,144,49,251,65,33,112,20,195,7,16,164,66,204,191,3,66,33,112,20,195,0,224,171,66,213,248,6,66,33,112,20,195,7,176,179,66,188,180,9,66,33,112,20,195,0,128,187,66,154,25,6,66,33,112,20,195,7,80,195,66,219,74,7,66,33,112,20,195,66,32,203,66,251,186,10,66,33,112,20,195,33,240,210,66,41,28,12,66,33,112,20,195,0,192,218,66,231,221,9,66,33,112,20,195,223,143,226,66,10,232,10,66,33,112,20,195,66,96,234,66,177,80,8,66,33,112,20,195,33,48,242,66,39,2,5,66,33,112,20,195,0,0,250,66,254,195,0,66,33,112,20,195,240,231,0,67,193,57,246,65,33,112,20,195,33,208,4,67,90,228,230,65,33,112,20,195,16,184,8,67,235,243,202,65,33,112,20,195,0,160,12,67,249,160,172,65,33,112,20,195,240,135,16,67,13,96,138,65,33,112,20,195,33,112,20,67,123,20,83,65,33,112,20,195,16,88,24,67,222,2,33,65,33,112,20,195,0,64,28,67,247,47,5,65,33,112,20,195,240,39,32,67,144,131,210,64,33,112,20,195,33,16,36,67,82,237,133,64,33,112,20,195,16,248,39,67,233,14,16,64,33,112,20,195,0,224,43,67,210,83,228,62,33,112,20,195,240,199,47,67,0,87,222,191,33,112,20,195,33,176,51,67,31,186,92,192,33,112,20,195,16,152,55,67,176,172,216,192,33,112,20,195,0,128,59,67,59,42,20,193,33,112,20,195,240,103,63,67,123,20,70,193,33,112,20,195,33,80,67,67,38,83,106,193,33,112,20,195,16,56,71,67,250,126,125,193,33,112,20,195,0,32,75,67,246,151,138,193,33,112,20,195,240,7,79,67,70,37,155,193,33,112,20,195,33,240,82,67,33,48,158,193,33,112,20,195,16,216,86,67,206,8,161,193,33,112,20,195,0,192,90,67,33,159,164,193,33,112,20,195,240,167,94,67,76,183,165,193,33,112,20,195,33,144,98,67,184,30,165,193,33,112,20,195,16,120,102,67,169,147,157,193,33,112,20,195,0,96,106,67,71,3,140,193,33,112,20,195,240,71,110,67,211,77,106,193,33,112,20,195,33,48,114,67,77,243,68,193,33,112,20,195,16,24,118,67,73,157,34,193,33,112,20,195,0,0,122,67,227,112,217,192,33,112,20,195,0,0,122,64,130,226,42,66,16,88,24,195,0,0,250,64,54,252,38,66,16,88,24,195,52,128,59,65,127,25,34,66,16,88,24,195,0,0,122,65,10,23,30,66,16,88,24,195,26,64,156,65,108,201,18,66,16,88,24,195,0,128,187,65,174,7,8,66,16,88,24,195,26,192,218,65,169,164,249,65,16,88,24,195,0,0,250,65,54,205,230,65,16,88,24,195,13,160,12,66,154,25,218,65,16,88,24,195,0,64,28,66,200,152,199,65,16,88,24,195,13,224,43,66,181,183,188,65,16,88,24,195,0,128,59,66,103,196,187,65,16,88,24,195,13,32,75,66,152,110,193,65,16,88,24,195,0,192,90,66,2,43,200,65,16,88,24,195,13,96,106,66,202,84,205,65,16,88,24,195,0,0,122,66,129,166,205,65,16,88,24,195,7,208,132,66,219,138,213,65,16,88,24,195,0,160,140,66,218,155,214,65,16,88,24,195,7,112,148,66,9,10,226,65,16,88,24,195,0,64,156,66,202,178,242,65,16,88,24,195,7,16,164,66,136,244,252,65,16,88,24,195,0,224,171,66,244,172,3,66,16,88,24,195,7,176,179,66,100,221,2,66,16,88,24,195,0,128,187,66,26,0,4,66,16,88,24,195,7,80,195,66,71,195,9,66,16,88,24,195,66,32,203,66,64,83,12,66,16,88,24,195,33,240,210,66,62,168,9,66,16,88,24,195,0,192,218,66,248,19,6,66,16,88,24,195,223,143,226,66,63,181,3,66,16,88,24,195,66,96,234,66,134,154,2,66,16,88,24,195,33,48,242,66,195,181,2,66,16,88,24,195,0,0,250,66,147,24,247,65,16,88,24,195,240,231,0,67,210,111,227,65,16,88,24,195,33,208,4,67,99,110,212,65,16,88,24,195,16,184,8,67,116,164,192,65,16,88,24,195,0,160,12,67,104,145,161,65,16,88,24,195,240,135,16,67,53,111,131,65,16,88,24,195,33,112,20,67,85,48,77,65,16,88,24,195,16,88,24,67,148,60,28,65,16,88,24,195,0,64,28,67,193,139,228,64,16,88,24,195,240,39,32,67,29,230,151,64,16,88,24,195,33,16,36,67,131,52,19,64,16,88,24,195,16,248,39,67,203,190,191,63,16,88,24,195,0,224,43,67,134,143,32,191,16,88,24,195,240,199,47,67,161,185,254,191,16,88,24,195,33,176,51,67,23,217,153,192,16,88,24,195,16,152,55,67,99,40,0,193,16,88,24,195,0,128,59,67,52,162,55,193,16,88,24,195,240,103,63,67,34,253,77,193,16,88,24,195,33,80,67,67,9,249,93,193,16,88,24,195,16,56,71,67,202,50,113,193,16,88,24,195,0,32,75,67,32,99,135,193,16,88,24,195,240,7,79,67,61,155,146,193,16,88,24,195,33,240,82,67,51,68,157,193,16,88,24,195,16,216,86,67,77,132,167,193,16,88,24,195,0,192,90,67,241,116,174,193,16,88,24,195,240,167,94,67,41,237,171,193,16,88,24,195,33,144,98,67,39,194,171,193,16,88,24,195,16,120,102,67,182,4,155,193,16,88,24,195,0,96,106,67,192,91,136,193,16,88,24,195,240,71,110,67,97,50,96,193,16,88,24,195,33,48,114,67,146,203,51,193,16,88,24,195,16,24,118,67,70,206,17,193,16,88,24,195,0,0,122,67,205,146,216,192,16,88,24,195,0,0,122,64,124,242,38,66,0,64,28,195,0,0,250,64,201,101,35,66,0,64,28,195,52,128,59,65,22,234,28,66,0,64,28,195,0,0,122,65,226,233,21,66,0,64,28,195,26,64,156,65,84,35,16,66,0,64,28,195,0,128,187,65,235,226,7,66,0,64,28,195,26,192,218,65,204,110,250,65,0,64,28,195,0,0,250,65,84,210,231,65,0,64,28,195,13,160,12,66,72,191,208,65,0,64,28,195,0,64,28,66,210,239,189,65,0,64,28,195,13,224,43,66,83,133,179,65,0,64,28,195,0,128,59,66,139,253,176,65,0,64,28,195,13,32,75,66,208,85,181,65,0,64,28,195,0,192,90,66,95,41,190,65,0,64,28,195,13,96,106,66,61,10,197,65,0,64,28,195,0,0,122,66,76,183,201,65,0,64,28,195,7,208,132,66,124,225,212,65,0,64,28,195,0,160,140,66,99,238,218,65,0,64,28,195,7,112,148,66,207,247,224,65,0,64,28,195,0,64,156,66,119,62,236,65,0,64,28,195,7,16,164,66,93,126,243,65,0,64,28,195,0,224,171,66,25,4,245,65,0,64,28,195,7,176,179,66,97,67,243,65,0,64,28,195,0,128,187,66,217,223,0,66,0,64,28,195,7,80,195,66,153,42,5,66,0,64,28,195,66,32,203,66,245,57,7,66,0,64,28,195,33,240,210,66,140,27,2,66,0,64,28,195,0,192,218,66,231,76,0,66,0,64,28,195,223,143,226,66,8,61,248,65,0,64,28,195,66,96,234,66,44,229,247,65,0,64,28,195,33,48,242,66,93,220,247,65,0,64,28,195,0,0,250,66,114,138,232,65,0,64,28,195,240,231,0,67,190,48,215,65,0,64,28,195,33,208,4,67,231,157,192,65,0,64,28,195,16,184,8,67,56,120,174,65,0,64,28,195,0,160,12,67,15,139,150,65,0,64,28,195,240,135,16,67,9,249,99,65,0,64,28,195,33,112,20,67,17,199,46,65,0,64,28,195,16,88,24,67,161,243,16,65,0,64,28,195,0,64,28,67,63,140,219,64,0,64,28,195,240,39,32,67,134,114,96,64,0,64,28,195,33,16,36,67,106,19,147,63,0,64,28,195,16,248,39,67,3,205,35,191,0,64,28,195,0,224,43,67,251,63,47,192,0,64,28,195,240,199,47,67,80,194,128,192,0,64,28,195,33,176,51,67,90,216,196,192,0,64,28,195,16,152,55,67,57,255,12,193,0,64,28,195,0,128,59,67,154,119,37,193,0,64,28,195,240,103,63,67,49,8,51,193,0,64,28,195,33,80,67,67,168,87,82,193,0,64,28,195,16,56,71,67,64,164,104,193,0,64,28,195,0,32,75,67,77,21,127,193,0,64,28,195,240,7,79,67,158,239,139,193,0,64,28,195,33,240,82,67,173,122,152,193,0,64,28,195,16,216,86,67,124,225,168,193,0,64,28,195,0,192,90,67,252,24,171,193,0,64,28,195,240,167,94,67,79,47,169,193,0,64,28,195,33,144,98,67,208,68,162,193,0,64,28,195,16,120,102,67,220,87,145,193,0,64,28,195,0,96,106,67,31,133,123,193,0,64,28,195,240,71,110,67,143,83,87,193,0,64,28,195,33,48,114,67,38,83,34,193,0,64,28,195,16,24,118,67,121,129,1,193,0,64,28,195,0,0,122,67,148,222,174,192,0,64,28,195,0,0,122,64,233,230,33,66,240,39,32,195,0,0,250,64,45,50,29,66,240,39,32,195,52,128,59,65,188,150,21,66,240,39,32,195,0,0,122,65,242,193,16,66,240,39,32,195,26,64,156,65,85,65,9,66,240,39,32,195,0,128,187,65,111,146,3,66,240,39,32,195,26,192,218,65,172,156,243,65,240,39,32,195,0,0,250,65,122,165,228,65,240,39,32,195,13,160,12,66,58,18,207,65,240,39,32,195,0,64,28,66,211,205,190,65,240,39,32,195,13,224,43,66,19,114,178,65,240,39,32,195,0,128,59,66,206,136,171,65,240,39,32,195,13,32,75,66,103,196,175,65,240,39,32,195,0,192,90,66,0,17,184,65,240,39,32,195,13,96,106,66,39,49,199,65,240,39,32,195,0,0,122,66,57,180,201,65,240,39,32,195,7,208,132,66,116,36,209,65,240,39,32,195,0,160,140,66,215,35,218,65,240,39,32,195,7,112,148,66,165,172,224,65,240,39,32,195,0,64,156,66,70,148,231,65,240,39,32,195,7,16,164,66,249,15,236,65,240,39,32,195,0,224,171,66,114,249,237,65,240,39,32,195,7,176,179,66,149,229,246,65,240,39,32,195,0,128,187,66,52,0,252,65,240,39,32,195,7,80,195,66,62,121,0,66,240,39,32,195,66,32,203,66,82,39,250,65,240,39,32,195,33,240,210,66,238,252,243,65,240,39,32,195,0,192,218,66,145,126,235,65,240,39,32,195,223,143,226,66,222,130,245,65,240,39,32,195,66,96,234,66,139,253,236,65,240,39,32,195,33,48,242,66,138,48,229,65,240,39,32,195,0,0,250,66,9,138,210,65,240,39,32,195,240,231,0,67,102,230,196,65,240,39,32,195,33,208,4,67,43,152,177,65,240,39,32,195,16,184,8,67,175,37,155,65,240,39,32,195,0,160,12,67,152,93,132,65,240,39,32,195,240,135,16,67,59,112,86,65,240,39,32,195,33,112,20,67,146,46,27,65,240,39,32,195,16,88,24,67,249,32,2,65,240,39,32,195,0,64,28,67,156,167,207,64,240,39,32,195,240,39,32,67,28,240,35,64,240,39,32,195,33,16,36,67,153,37,150,61,240,39,32,195,16,248,39,67,36,156,142,191,240,39,32,195,0,224,43,67,92,3,67,192,240,39,32,195,240,199,47,67,35,248,197,192,240,39,32,195,33,176,51,67,207,102,237,192,240,39,32,195,16,152,55,67,177,191,18,193,240,39,32,195,0,128,59,67,252,123,28,193,240,39,32,195,240,103,63,67,41,203,40,193,240,39,32,195,33,80,67,67,73,157,75,193,240,39,32,195,16,56,71,67,65,130,94,193,240,39,32,195,0,32,75,67,156,162,119,193,240,39,32,195,240,7,79,67,148,7,141,193,240,39,32,195,33,240,82,67,105,0,154,193,240,39,32,195,16,216,86,67,193,168,156,193,240,39,32,195,0,192,90,67,191,125,154,193,240,39,32,195,240,167,94,67,122,54,156,193,240,39,32,195,33,144,98,67,190,193,142,193,240,39,32,195,16,120,102,67,238,107,130,193,240,39,32,195,0,96,106,67,37,6,104,193,240,39,32,195,240,71,110,67,91,211,63,193,240,39,32,195,33,48,114,67,25,103,22,193,240,39,32,195,16,24,118,67,1,106,212,192,240,39,32,195,0,0,122,67,133,206,109,192,240,39,32,195,0,0,122,64,5,116,27,66,33,16,36,195,0,0,250,64,184,192,21,66,33,16,36,195,52,128,59,65,183,226,14,66,33,16,36,195,0,0,122,65,224,62,8,66,33,16,36,195,26,64,156,65,255,97,4,66,33,16,36,195,0,128,187,65,201,37,0,66,33,16,36,195,26,192,218,65,67,173,237,65,33,16,36,195,0,0,250,65,163,146,218,65,33,16,36,195,13,160,12,66,241,244,201,65,33,16,36,195,0,64,28,66,87,219,188,65,33,16,36,195,13,224,43,66,84,244,177,65,33,16,36,195,0,128,59,66,224,62,170,65,33,16,36,195,13,32,75,66,82,73,168,65,33,16,36,195,0,192,90,66,166,138,182,65,33,16,36,195,13,96,106,66,21,140,195,65,33,16,36,195,0,0,122,66,154,25,201,65,33,16,36,195,7,208,132,66,224,156,202,65,33,16,36,195,0,160,140,66,177,225,212,65,33,16,36,195,7,112,148,66,85,65,221,65,33,16,36,195,0,64,156,66,49,153,222,65,33,16,36,195,7,16,164,66,57,86,224,65,33,16,36,195,0,224,171,66,13,96,233,65,33,16,36,195,7,176,179,66,138,159,239,65,33,16,36,195,0,128,187,66,117,147,247,65,33,16,36,195,7,80,195,66,130,243,244,65,33,16,36,195,66,32,203,66,149,84,238,65,33,16,36,195,33,240,210,66,133,124,221,65,33,16,36,195,0,192,218,66,83,150,218,65,33,16,36,195,223,143,226,66,182,132,222,65,33,16,36,195,66,96,234,66,87,219,218,65,33,16,36,195,33,48,242,66,242,65,209,65,33,16,36,195,0,0,250,66,121,216,190,65,33,16,36,195,240,231,0,67,61,27,173,65,33,16,36,195,33,208,4,67,120,139,152,65,33,16,36,195,16,184,8,67,177,225,133,65,33,16,36,195,0,160,12,67,10,104,102,65,33,16,36,195,240,135,16,67,223,79,49,65,33,16,36,195,33,112,20,67,93,51,6,65,33,16,36,195,16,88,24,67,61,44,224,64,33,16,36,195,0,64,28,67,101,112,158,64,33,16,36,195,240,39,32,67,78,69,30,64,33,16,36,195,33,16,36,67,194,22,71,63,33,16,36,195,16,248,39,67,241,99,184,191,33,16,36,195,0,224,43,67,153,158,100,192,33,16,36,195,240,199,47,67,1,222,202,192,33,16,36,195,33,176,51,67,215,250,239,192,33,16,36,195,16,152,55,67,48,204,18,193,33,16,36,195,0,128,59,67,50,213,30,193,33,16,36,195,240,103,63,67,224,45,49,193,33,16,36,195,33,80,67,67,239,56,77,193,33,16,36,195,16,56,71,67,189,227,110,193,33,16,36,195,0,32,75,67,233,72,127,193,33,16,36,195,240,7,79,67,233,183,136,193,33,16,36,195,33,240,82,67,245,57,148,193,33,16,36,195,16,216,86,67,41,92,148,193,33,16,36,195,0,192,90,67,139,108,148,193,33,16,36,195,240,167,94,67,123,148,140,193,33,16,36,195,33,144,98,67,118,79,122,193,33,16,36,195,16,120,102,67,61,10,105,193,33,16,36,195,0,96,106,67,192,236,72,193,33,16,36,195,240,71,110,67,149,101,42,193,33,16,36,195,33,48,114,67,131,134,4,193,33,16,36,195,16,24,118,67,233,14,188,192,33,16,36,195,0,0,122,67,107,43,34,192,33,16,36,195,0,0,122,64,45,225,20,66,16,248,39,195,0,0,250,64,122,182,18,66,16,248,39,195,52,128,59,65,11,245,16,66,16,248,39,195,0,0,122,65,227,229,5,66,16,248,39,195,26,64,156,65,7,95,0,66,16,248,39,195,0,128,187,65,148,135,244,65,16,248,39,195,26,192,218,65,63,198,228,65,16,248,39,195,0,0,250,65,59,112,211,65,16,248,39,195,13,160,12,66,64,147,191,65,16,248,39,195,0,64,28,66,254,84,180,65,16,248,39,195,13,224,43,66,21,157,174,65,16,248,39,195,0,128,59,66,119,173,169,65,16,248,39,195,13,32,75,66,61,172,168,65,16,248,39,195,0,192,90,66,54,77,174,65,16,248,39,195,13,96,106,66,22,123,183,65,16,248,39,195,0,0,122,66,71,131,192,65,16,248,39,195,7,208,132,66,41,92,195,65,16,248,39,195,0,160,140,66,27,175,198,65,16,248,39,195,7,112,148,66,42,41,202,65,16,248,39,195,0,64,156,66,156,51,208,65,16,248,39,195,7,16,164,66,189,227,214,65,16,248,39,195,0,224,171,66,161,103,219,65,16,248,39,195,7,176,179,66,182,243,231,65,16,248,39,195,0,128,187,66,173,105,233,65,16,248,39,195,7,80,195,66,212,43,223,65,16,248,39,195,66,32,203,66,113,27,213,65,16,248,39,195,33,240,210,66,13,224,199,65,16,248,39,195,0,192,218,66,3,137,200,65,16,248,39,195,223,143,226,66,117,147,196,65,16,248,39,195,66,96,234,66,236,64,190,65,16,248,39,195,33,48,242,66,212,171,177,65,16,248,39,195,0,0,250,66,61,27,158,65,16,248,39,195,240,231,0,67,43,24,142,65,16,248,39,195,33,208,4,67,14,190,123,65,16,248,39,195,16,184,8,67,195,245,87,65,16,248,39,195,0,160,12,67,75,200,59,65,16,248,39,195,240,135,16,67,250,167,29,65,16,248,39,195,33,112,20,67,90,216,0,65,16,248,39,195,16,88,24,67,43,48,223,64,16,248,39,195,0,64,28,67,251,174,163,64,16,248,39,195,240,39,32,67,98,74,72,64,16,248,39,195,33,16,36,67,241,99,200,63,16,248,39,195,16,248,39,67,89,23,227,191,16,248,39,195,0,224,43,67,25,57,133,192,16,248,39,195,240,199,47,67,187,68,187,192,16,248,39,195,33,176,51,67,80,83,255,192,16,248,39,195,16,152,55,67,142,18,30,193,16,248,39,195,0,128,59,67,81,107,36,193,16,248,39,195,240,103,63,67,170,130,56,193,16,248,39,195,33,80,67,67,122,199,85,193,16,248,39,195,16,56,71,67,53,239,117,193,16,248,39,195,0,32,75,67,9,138,132,193,16,248,39,195,240,7,79,67,188,133,141,193,16,248,39,195,33,240,82,67,136,99,141,193,16,248,39,195,16,216,86,67,203,144,134,193,16,248,39,195,0,192,90,67,5,52,136,193,16,248,39,195,240,167,94,67,216,240,130,193,16,248,39,195,33,144,98,67,111,129,100,193,16,248,39,195,16,120,102,67,175,148,85,193,16,248,39,195,0,96,106,67,181,55,64,193,16,248,39,195,240,71,110,67,39,107,30,193,16,248,39,195,33,48,114,67,206,136,253,192,16,248,39,195,16,24,118,67,97,79,173,192,16,248,39,195,0,0,122,67,35,190,239,191,16,248,39,195,0,0,122,64,40,143,13,66,0,224,43,195,0,0,250,64,196,2,13,66,0,224,43,195,52,128,59,65,109,69,9,66,0,224,43,195,0,0,122,65,94,75,4,66,0,224,43,195,26,64,156,65,221,53,251,65,0,224,43,195,0,128,187,65,214,86,231,65,0,224,43,195,26,192,218,65,35,219,212,65,0,224,43,195,0,0,250,65,122,54,198,65,0,224,43,195,13,160,12,66,20,174,185,65,0,224,43,195,0,64,28,66,88,57,175,65,0,224,43,195,13,224,43,66,51,51,166,65,0,224,43,195,0,128,59,66,121,233,160,65,0,224,43,195,13,32,75,66,70,148,157,65,0,224,43,195,0,192,90,66,124,97,165,65,0,224,43,195,13,96,106,66,145,237,177,65,0,224,43,195,0,0,122,66,154,153,176,65,0,224,43,195,7,208,132,66,179,106,181,65,0,224,43,195,0,160,140,66,151,144,179,65,0,224,43,195,7,112,148,66,22,234,182,65,0,224,43,195,0,64,156,66,125,208,197,65,0,224,43,195,7,16,164,66,126,157,205,65,0,224,43,195,0,224,171,66,241,244,208,65,0,224,43,195,7,176,179,66,192,236,204,65,0,224,43,195,0,128,187,66,7,78,198,65,0,224,43,195,7,80,195,66,40,15,192,65,0,224,43,195,66,32,203,66,140,202,187,65,0,224,43,195,33,240,210,66,96,229,186,65,0,224,43,195,0,192,218,66,77,21,178,65,0,224,43,195,223,143,226,66,181,55,170,65,0,224,43,195,66,96,234,66,131,64,158,65,0,224,43,195,33,48,242,66,177,191,143,65,0,224,43,195,0,0,250,66,157,145,130,65,0,224,43,195,240,231,0,67,168,53,100,65,0,224,43,195,33,208,4,67,198,220,71,65,0,224,43,195,16,184,8,67,60,78,38,65,0,224,43,195,0,160,12,67,120,168,14,65,0,224,43,195,240,135,16,67,19,201,18,65,0,224,43,195,33,112,20,67,229,237,234,64,0,224,43,195,16,88,24,67,140,45,196,64,0,224,43,195,0,64,28,67,164,165,146,64,0,224,43,195,240,39,32,67,71,85,49,64,0,224,43,195,33,16,36,67,202,79,142,63,0,224,43,195,16,248,39,67,146,5,0,192,0,224,43,195,0,224,43,67,199,75,105,192,0,224,43,195,240,199,47,67,91,8,164,192,0,224,43,195,33,176,51,67,236,81,5,193,0,224,43,195,16,152,55,67,140,74,33,193,0,224,43,195,0,128,59,67,192,91,46,193,0,224,43,195,240,103,63,67,149,101,63,193,0,224,43,195,33,80,67,67,203,16,104,193,0,224,43,195,16,56,71,67,112,206,125,193,0,224,43,195,0,32,75,67,164,223,137,193,0,224,43,195,240,7,79,67,147,58,146,193,0,224,43,195,33,240,82,67,37,134,135,193,0,224,43,195,16,216,86,67,11,70,129,193,0,224,43,195,0,192,90,67,130,226,127,193,0,224,43,195,240,167,94,67,184,175,110,193,0,224,43,195,33,144,98,67,194,23,90,193,0,224,43,195,16,120,102,67,233,38,77,193,0,224,43,195,0,96,106,67,208,68,48,193,0,224,43,195,240,71,110,67,170,171,8,193,0,224,43,195,33,48,114,67,187,68,197,192,0,224,43,195,16,24,118,67,162,98,139,192,0,224,43,195,0,0,122,67,34,195,234,191,0,224,43,195,0,0,122,64,193,74,11,66,240,199,47,195,0,0,250,64,49,217,7,66,240,199,47,195,52,128,59,65,241,227,6,66,240,199,47,195,0,0,122,65,87,219,255,65,240,199,47,195,26,64,156,65,225,139,237,65,240,199,47,195,0,128,187,65,219,249,217,65,240,199,47,195,26,192,218,65,126,29,201,65,240,199,47,195,0,0,250,65,0,128,186,65,240,199,47,195,13,160,12,66,211,77,170,65,240,199,47,195,0,64,28,66,19,242,169,65,240,199,47,195,13,224,43,66,255,161,157,65,240,199,47,195,0,128,59,66,53,111,154,65,240,199,47,195,13,32,75,66,3,137,148,65,240,199,47,195,0,192,90,66,143,83,156,65,240,199,47,195,13,96,106,66,34,108,162,65,240,199,47,195,0,0,122,66,129,149,164,65,240,199,47,195,7,208,132,66,152,76,166,65,240,199,47,195,0,160,140,66,9,155,171,65,240,199,47,195,7,112,148,66,50,85,183,65,240,199,47,195,0,64,156,66,65,130,189,65,240,199,47,195,7,16,164,66,171,79,195,65,240,199,47,195,0,224,171,66,170,224,200,65,240,199,47,195,7,176,179,66,178,29,193,65,240,199,47,195,0,128,187,66,193,57,188,65,240,199,47,195,7,80,195,66,7,78,182,65,240,199,47,195,66,32,203,66,107,171,169,65,240,199,47,195,33,240,210,66,54,43,165,65,240,199,47,195,0,192,218,66,5,197,157,65,240,199,47,195,223,143,226,66,38,100,143,65,240,199,47,195,66,96,234,66,72,80,135,65,240,199,47,195,33,48,242,66,202,67,129,65,240,199,47,195,0,0,250,66,164,223,113,65,240,199,47,195,240,231,0,67,135,22,82,65,240,199,47,195,33,208,4,67,35,219,36,65,240,199,47,195,16,184,8,67,72,138,254,64,240,199,47,195,0,160,12,67,255,236,239,64,240,199,47,195,240,135,16,67,188,121,248,64,240,199,47,195,33,112,20,67,85,251,218,64,240,199,47,195,16,88,24,67,30,167,192,64,240,199,47,195,0,64,28,67,10,215,154,64,240,199,47,195,240,39,32,67,0,87,38,64,240,199,47,195,33,16,36,67,162,11,174,63,240,199,47,195,16,248,39,67,64,164,179,191,240,199,47,195,0,224,43,67,57,180,108,192,240,199,47,195,240,199,47,67,102,107,179,192,240,199,47,195,33,176,51,67,214,139,2,193,240,199,47,195,16,152,55,67,86,159,16,193,240,199,47,195,0,128,59,67,0,111,52,193,240,199,47,195,240,103,63,67,73,46,82,193,240,199,47,195,33,80,67,67,31,133,109,193,240,199,47,195,16,56,71,67,246,40,126,193,240,199,47,195,0,32,75,67,5,35,141,193,240,199,47,195,240,7,79,67,222,147,145,193,240,199,47,195,33,240,82,67,217,61,131,193,240,199,47,195,16,216,86,67,27,158,131,193,240,199,47,195,0,192,90,67,181,55,125,193,240,199,47,195,240,167,94,67,213,231,90,193,240,199,47,195,33,144,98,67,47,110,77,193,240,199,47,195,16,120,102,67,63,53,58,193,240,199,47,195,0,96,106,67,216,1,14,193,240,199,47,195,240,71,110,67,66,67,218,192,240,199,47,195,33,48,114,67,193,28,117,192,240,199,47,195,16,24,118,67,134,27,22,192,240,199,47,195,0,0,122,67,176,85,58,191,240,199,47,195,0,0,122,64,206,200,3,66,33,176,51,195,0,0,250,64,98,97,0,66,33,176,51,195,52,128,59,65,198,237,248,65,33,176,51,195,0,0,122,65,51,51,235,65,33,176,51,195,26,64,156,65,36,40,220,65,33,176,51,195,0,128,187,65,73,174,210,65,33,176,51,195,26,192,218,65,151,144,192,65,33,176,51,195,0,0,250,65,217,189,175,65,33,176,51,195,13,160,12,66,254,67,161,65,33,176,51,195,0,64,28,66,25,226,154,65,33,176,51,195,13,224,43,66,199,186,148,65,33,176,51,195,0,128,59,66,14,173,144,65,33,176,51,195,13,32,75,66,177,63,144,65,33,176,51,195,0,192,90,66,97,84,140,65,33,176,51,195,13,96,106,66,193,202,141,65,33,176,51,195,0,0,122,66,207,102,145,65,33,176,51,195,7,208,132,66,125,191,150,65,33,176,51,195,0,160,140,66,15,28,167,65,33,176,51,195,7,112,148,66,220,87,175,65,33,176,51,195,0,64,156,66,105,111,178,65,33,176,51,195,7,16,164,66,91,49,177,65,33,176,51,195,0,224,171,66,135,22,186,65,33,176,51,195,7,176,179,66,145,109,179,65,33,176,51,195,0,128,187,66,128,72,172,65,33,176,51,195,7,80,195,66,132,30,157,65,33,176,51,195,66,32,203,66,179,12,145,65,33,176,51,195,33,240,210,66,37,134,136,65,33,176,51,195,0,192,218,66,67,45,129,65,33,176,51,195,223,143,226,66,168,53,125,65,33,176,51,195,66,96,234,66,217,95,111,65,33,176,51,195,33,48,242,66,122,54,119,65,33,176,51,195,0,0,250,66,95,152,110,65,33,176,51,195,240,231,0,67,131,81,69,65,33,176,51,195,33,208,4,67,189,58,31,65,33,176,51,195,16,184,8,67,95,41,234,64,33,176,51,195,0,160,12,67,166,39,221,64,33,176,51,195,240,135,16,67,189,111,233,64,33,176,51,195,33,112,20,67,117,171,215,64,33,176,51,195,16,88,24,67,168,198,193,64,33,176,51,195,0,64,28,67,110,134,173,64,33,176,51,195,240,39,32,67,56,45,118,64,33,176,51,195,33,16,36,67,102,131,28,64,33,176,51,195,16,248,39,67,28,121,64,190,33,176,51,195,0,224,43,67,144,102,64,192,33,176,51,195,240,199,47,67,34,84,172,192,33,176,51,195,33,176,51,67,48,158,207,192,33,176,51,195,16,152,55,67,78,226,19,193,33,176,51,195,0,128,59,67,249,49,56,193,33,176,51,195,240,103,63,67,168,198,74,193,33,176,51,195,33,80,67,67,229,242,98,193,33,176,51,195,16,56,71,67,193,168,119,193,33,176,51,195,0,32,75,67,75,217,132,193,33,176,51,195,240,7,79,67,164,240,136,193,33,176,51,195,33,240,82,67,14,45,128,193,33,176,51,195,16,216,86,67,90,245,126,193,33,176,51,195,0,192,90,67,211,222,105,193,33,176,51,195,240,167,94,67,205,59,80,193,33,176,51,195,33,144,98,67,51,51,67,193,33,176,51,195,16,120,102,67,175,252,28,193,33,176,51,195,0,96,106,67,151,28,215,192,33,176,51,195,240,71,110,67,132,187,131,192,33,176,51,195,33,48,114,67,239,143,11,192,33,176,51,195,16,24,118,67,241,155,2,191,33,176,51,195,0,0,122,67,59,54,190,63,33,176,51,195,0,0,122,64,136,5,240,65,16,152,55,195,0,0,250,64,38,228,236,65,16,152,55,195,52,128,59,65,106,188,226,65,16,152,55,195,0,0,122,65,163,129,215,65,16,152,55,195,26,64,156,65,218,44,208,65,16,152,55,195,0,128,187,65,209,34,200,65,16,152,55,195,26,192,218,65,227,71,182,65,16,152,55,195,0,0,250,65,190,48,165,65,16,152,55,195,13,160,12,66,131,175,149,65,16,152,55,195,0,64,28,66,227,182,136,65,16,152,55,195,13,224,43,66,235,115,139,65,16,152,55,195,0,128,59,66,157,145,138,65,16,152,55,195,13,32,75,66,32,65,132,65,16,152,55,195,0,192,90,66,15,156,129,65,16,152,55,195,13,96,106,66,27,175,136,65,16,152,55,195,0,0,122,66,68,250,137,65,16,152,55,195,7,208,132,66,49,25,144,65,16,152,55,195,0,160,140,66,213,120,149,65,16,152,55,195,7,112,148,66,0,0,157,65,16,152,55,195,0,64,156,66,185,141,159,65,16,152,55,195,7,16,164,66,136,99,159,65,16,152,55,195,0,224,171,66,44,212,153,65,16,152,55,195,7,176,179,66,82,73,156,65,16,152,55,195,0,128,187,66,152,110,147,65,16,152,55,195,7,80,195,66,237,13,129,65,16,152,55,195,66,32,203,66,158,239,101,65,16,152,55,195,33,240,210,66,211,77,94,65,16,152,55,195,0,192,218,66,48,187,88,65,16,152,55,195,223,143,226,66,190,193,91,65,16,152,55,195,66,96,234,66,243,31,96,65,16,152,55,195,33,48,242,66,66,62,100,65,16,152,55,195,0,0,250,66,219,138,89,65,16,152,55,195,240,231,0,67,122,165,53,65,16,152,55,195,33,208,4,67,179,251,6,65,16,152,55,195,16,184,8,67,217,119,222,64,16,152,55,195,0,160,12,67,184,35,229,64,16,152,55,195,240,135,16,67,12,7,215,64,16,152,55,195,33,112,20,67,27,100,171,64,16,152,55,195,16,88,24,67,61,68,167,64,16,152,55,195,0,64,28,67,32,65,162,64,16,152,55,195,240,39,32,67,82,155,92,64,16,152,55,195,33,16,36,67,116,65,21,64,16,152,55,195,16,248,39,67,2,158,236,62,16,152,55,195,0,224,43,67,20,34,20,192,16,152,55,195,240,199,47,67,53,181,156,192,16,152,55,195,33,176,51,67,3,96,213,192,16,152,55,195,16,152,55,67,60,37,20,193,16,152,55,195,0,128,59,67,157,244,30,193,16,152,55,195,240,103,63,67,58,146,64,193,16,152,55,195,33,80,67,67,140,219,86,193,16,152,55,195,16,56,71,67,62,121,103,193,16,152,55,195,0,32,75,67,199,41,112,193,16,152,55,195,240,7,79,67,102,247,108,193,16,152,55,195,33,240,82,67,163,146,87,193,16,152,55,195,16,216,86,67,221,36,97,193,16,152,55,195,0,192,90,67,152,221,99,193,16,152,55,195,240,167,94,67,59,112,68,193,16,152,55,195,33,144,98,67,67,173,49,193,16,152,55,195,16,120,102,67,145,155,11,193,16,152,55,195,0,96,106,67,31,46,176,192,16,152,55,195,240,71,110,67,204,98,52,192,16,152,55,195,33,48,114,67,37,36,14,191,16,152,55,195,16,24,118,67,194,47,137,63,16,152,55,195,0,0,122,67,114,138,70,64,16,152,55,195,0,0,122,64,190,31,221,65,0,128,59,195,0,0,250,64,71,3,217,65,0,128,59,195,52,128,59,65,184,192,208,65,0,128,59,195,0,0,122,65,135,39,201,65,0,128,59,195,26,64,156,65,34,253,196,65,0,128,59,195,0,128,187,65,183,209,189,65,0,128,59,195,26,192,218,65,52,162,180,65,0,128,59,195,0,0,250,65,80,252,157,65,0,128,59,195,13,160,12,66,148,118,141,65,0,128,59,195,0,64,28,66,43,118,132,65,0,128,59,195,13,224,43,66,78,209,125,65,0,128,59,195,0,128,59,66,63,198,128,65,0,128,59,195,13,32,75,66,127,251,120,65,0,128,59,195,0,192,90,66,176,114,119,65,0,128,59,195,13,96,106,66,152,110,130,65,0,128,59,195,0,0,122,66,48,42,134,65,0,128,59,195,7,208,132,66,88,40,131,65,0,128,59,195,0,160,140,66,167,104,133,65,0,128,59,195,7,112,148,66,2,26,134,65,0,128,59,195,0,64,156,66,46,16,138,65,0,128,59,195,7,16,164,66,51,196,133,65,0,128,59,195,0,224,171,66,239,56,132,65,0,128,59,195,7,176,179,66,1,205,129,65,0,128,59,195,0,128,187,66,131,47,113,65,0,128,59,195,7,80,195,66,110,52,100,65,0,128,59,195,66,32,203,66,121,233,70,65,0,128,59,195,33,240,210,66,5,52,46,65,0,128,59,195,0,192,218,66,176,114,62,65,0,128,59,195,223,143,226,66,56,248,72,65,0,128,59,195,66,96,234,66,66,62,84,65,0,128,59,195,33,48,242,66,249,15,91,65,0,128,59,195,0,0,250,66,243,142,76,65,0,128,59,195,240,231,0,67,230,174,39,65,0,128,59,195,33,208,4,67,78,11,12,65,0,128,59,195,16,184,8,67,234,236,220,64,0,128,59,195,0,160,12,67,210,82,221,64,0,128,59,195,240,135,16,67,246,11,217,64,0,128,59,195,33,112,20,67,184,35,168,64,0,128,59,195,16,88,24,67,102,160,132,64,0,128,59,195,0,64,28,67,161,103,101,64,0,128,59,195,240,39,32,67,109,57,107,64,0,128,59,195,33,16,36,67,224,219,240,63,0,128,59,195,16,248,39,67,48,240,148,63,0,128,59,195,0,224,43,67,46,202,104,191,0,128,59,195,240,199,47,67,150,4,128,192,0,128,59,195,33,176,51,67,37,6,209,192,0,128,59,195,16,152,55,67,248,170,4,193,0,128,59,195,0,128,59,67,72,80,16,193,0,128,59,195,240,103,63,67,4,231,33,193,0,128,59,195,33,80,67,67,141,40,50,193,0,128,59,195,16,56,71,67,202,195,71,193,0,128,59,195,0,32,75,67,233,183,75,193,0,128,59,195,240,7,79,67,27,47,79,193,0,128,59,195,33,240,82,67,204,238,61,193,0,128,59,195,16,216,86,67,37,6,68,193,0,128,59,195,0,192,90,67,43,135,77,193,0,128,59,195,240,167,94,67,67,173,44,193,0,128,59,195,33,144,98,67,68,64,13,193,0,128,59,195,16,120,102,67,47,192,235,192,0,128,59,195,0,96,106,67,167,150,167,192,0,128,59,195,240,71,110,67,164,136,40,192,0,128,59,195,33,48,114,67,242,122,248,62,0,128,59,195,16,24,118,67,17,25,50,64,0,128,59,195,0,0,122,67,236,163,125,64,0,128,59,195,0,0,122,64,238,235,202,65,240,103,63,195,0,0,250,64,137,193,197,65,240,103,63,195,52,128,59,65,49,8,200,65,240,103,63,195,0,0,122,65,28,107,193,65,240,103,63,195,26,64,156,65,127,234,181,65,240,103,63,195,0,128,187,65,140,202,171,65,240,103,63,195,26,192,218,65,242,82,168,65,240,103,63,195,0,0,250,65,36,168,146,65,240,103,63,195,13,160,12,66,194,151,135,65,240,103,63,195,0,64,28,66,108,9,115,65,240,103,63,195,13,224,43,66,226,88,105,65,240,103,63,195,0,128,59,66,119,190,99,65,240,103,63,195,13,32,75,66,55,26,97,65,240,103,63,195,0,192,90,66,151,144,118,65,240,103,63,195,13,96,106,66,202,50,113,65,240,103,63,195,0,0,122,66,95,7,107,65,240,103,63,195,7,208,132,66,19,97,110,65,240,103,63,195,0,160,140,66,203,16,103,65,240,103,63,195,7,112,148,66,99,127,101,65,240,103,63,195,0,64,156,66,180,89,89,65,240,103,63,195,7,16,164,66,229,97,86,65,240,103,63,195,0,224,171,66,42,58,102,65,240,103,63,195,7,176,179,66,131,192,85,65,240,103,63,195,0,128,187,66,112,206,84,65,240,103,63,195,7,80,195,66,242,176,61,65,240,103,63,195,66,32,203,66,218,15,24,65,240,103,63,195,33,240,210,66,166,114,17,65,240,103,63,195,0,192,218,66,212,43,36,65,240,103,63,195,223,143,226,66,113,61,53,65,240,103,63,195,66,96,234,66,159,60,62,65,240,103,63,195,33,48,242,66,4,86,63,65,240,103,63,195,0,0,250,66,237,13,48,65,240,103,63,195,240,231,0,67,92,32,33,65,240,103,63,195,33,208,4,67,249,131,13,65,240,103,63,195,16,184,8,67,37,59,242,64,240,103,63,195,0,160,12,67,250,68,213,64,240,103,63,195,240,135,16,67,35,103,178,64,240,103,63,195,33,112,20,67,208,15,142,64,240,103,63,195,16,88,24,67,174,240,96,64,240,103,63,195,0,64,28,67,40,155,58,64,240,103,63,195,240,39,32,67,128,159,91,64,240,103,63,195,33,16,36,67,138,2,253,63,240,103,63,195,16,248,39,67,149,183,175,63,240,103,63,195,0,224,43,67,26,196,11,191,240,103,63,195,240,199,47,67,58,64,114,192,240,103,63,195,33,176,51,67,217,8,195,192,240,103,63,195,16,152,55,67,196,153,206,192,240,103,63,195,0,128,59,67,164,194,232,192,240,103,63,195,240,103,63,67,217,223,15,193,240,103,63,195,33,80,67,67,235,98,30,193,240,103,63,195,16,56,71,67,112,95,47,193,240,103,63,195,0,32,75,67,81,107,45,193,240,103,63,195,240,7,79,67,232,106,40,193,240,103,63,195,33,240,82,67,27,47,34,193,240,103,63,195,16,216,86,67,147,24,42,193,240,103,63,195,0,192,90,67,247,117,45,193,240,103,63,195,240,167,94,67,151,156,16,193,240,103,63,195,33,144,98,67,168,169,236,192,240,103,63,195,16,120,102,67,167,232,154,192,240,103,63,195,0,96,106,67,88,144,94,192,240,103,63,195,240,71,110,67,50,3,209,191,240,103,63,195,33,48,114,67,167,92,185,63,240,103,63,195,16,24,118,67,57,156,59,64,240,103,63,195,0,0,122,67,241,70,129,64,240,103,63,195,0,0,122,64,94,203,184,65,33,80,67,195,0,0,250,64,226,216,185,65,33,80,67,195,52,128,59,65,53,111,187,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+256000);
/* memory initializer */ allocate([33,80,67,195,0,0,122,65,61,138,179,65,33,80,67,195,26,64,156,65,139,236,171,65,33,80,67,195,0,128,187,65,236,64,157,65,33,80,67,195,26,192,218,65,40,15,145,65,33,80,67,195,0,0,250,65,252,24,139,65,33,80,67,195,13,160,12,66,184,30,130,65,33,80,67,195,0,64,28,66,63,87,93,65,33,80,67,195,13,224,43,66,215,52,76,65,33,80,67,195,0,128,59,66,15,156,81,65,33,80,67,195,13,32,75,66,209,145,85,65,33,80,67,195,0,192,90,66,198,220,92,65,33,80,67,195,13,96,106,66,93,254,80,65,33,80,67,195,0,0,122,66,22,251,70,65,33,80,67,195,7,208,132,66,207,247,75,65,33,80,67,195,0,160,140,66,51,196,68,65,33,80,67,195,7,112,148,66,44,101,54,65,33,80,67,195,0,64,156,66,132,158,66,65,33,80,67,195,7,16,164,66,198,109,67,65,33,80,67,195,0,224,171,66,114,138,65,65,33,80,67,195,7,176,179,66,126,140,53,65,33,80,67,195,0,128,187,66,55,26,51,65,33,80,67,195,7,80,195,66,101,13,21,65,33,80,67,195,66,32,203,66,38,83,16,65,33,80,67,195,33,240,210,66,191,67,6,65,33,80,67,195,0,192,218,66,164,153,11,65,33,80,67,195,223,143,226,66,83,5,22,65,33,80,67,195,66,96,234,66,52,29,25,65,33,80,67,195,33,48,242,66,40,172,24,65,33,80,67,195,0,0,250,66,252,239,20,65,33,80,67,195,240,231,0,67,59,95,16,65,33,80,67,195,33,208,4,67,143,182,8,65,33,80,67,195,16,184,8,67,157,70,253,64,33,80,67,195,0,160,12,67,141,151,188,64,33,80,67,195,240,135,16,67,103,213,152,64,33,80,67,195,33,112,20,67,155,32,66,64,33,80,67,195,16,88,24,67,153,245,40,64,33,80,67,195,0,64,28,67,8,32,237,63,33,80,67,195,240,39,32,67,76,113,37,64,33,80,67,195,33,16,36,67,41,232,238,63,33,80,67,195,16,248,39,67,99,208,241,62,33,80,67,195,0,224,43,67,214,201,81,191,33,80,67,195,240,199,47,67,87,236,81,192,33,80,67,195,33,176,51,67,181,79,130,192,33,80,67,195,16,152,55,67,69,100,167,192,33,80,67,195,0,128,59,67,25,231,189,192,33,80,67,195,240,103,63,67,153,211,236,192,33,80,67,195,33,80,67,67,75,106,24,193,33,80,67,195,16,56,71,67,13,14,17,193,33,80,67,195,0,32,75,67,84,87,10,193,33,80,67,195,240,7,79,67,82,97,11,193,33,80,67,195,33,240,82,67,55,108,245,192,33,80,67,195,16,216,86,67,37,134,3,193,33,80,67,195,0,192,90,67,178,99,12,193,33,80,67,195,240,167,94,67,15,156,249,192,33,80,67,195,33,144,98,67,166,97,169,192,33,80,67,195,16,120,102,67,230,150,72,192,33,80,67,195,0,96,106,67,110,105,189,191,33,80,67,195,240,71,110,67,211,186,50,61,33,80,67,195,33,48,114,67,26,168,200,63,33,80,67,195,16,24,118,67,38,83,81,64,33,80,67,195,0,0,122,67,40,68,172,64,33,80,67,195,0,0,122,64,95,169,172,65,16,56,71,195,0,0,250,64,11,181,172,65,16,56,71,195,52,128,59,65,216,112,176,65,16,56,71,195,0,0,122,65,25,132,169,65,16,56,71,195,26,64,156,65,5,180,159,65,16,56,71,195,0,128,187,65,71,131,145,65,16,56,71,195,26,192,218,65,150,33,139,65,16,56,71,195,0,0,250,65,253,135,124,65,16,56,71,195,13,160,12,66,91,66,95,65,16,56,71,195,0,64,28,66,84,116,60,65,16,56,71,195,13,224,43,66,87,91,74,65,16,56,71,195,0,128,59,66,45,178,66,65,16,56,71,195,13,32,75,66,58,35,68,65,16,56,71,195,0,192,90,66,18,131,64,65,16,56,71,195,13,96,106,66,61,10,72,65,16,56,71,195,0,0,122,66,253,135,67,65,16,56,71,195,7,208,132,66,99,238,38,65,16,56,71,195,0,160,140,66,75,89,35,65,16,56,71,195,7,112,148,66,183,11,25,65,16,56,71,195,0,64,156,66,203,16,40,65,16,56,71,195,7,16,164,66,27,158,46,65,16,56,71,195,0,224,171,66,181,21,42,65,16,56,71,195,7,176,179,66,53,94,50,65,16,56,71,195,0,128,187,66,108,120,35,65,16,56,71,195,7,80,195,66,84,29,9,65,16,56,71,195,66,32,203,66,219,22,13,65,16,56,71,195,33,240,210,66,232,164,253,64,16,56,71,195,0,192,218,66,178,157,255,64,16,56,71,195,223,143,226,66,186,44,1,65,16,56,71,195,66,96,234,66,83,162,6,65,16,56,71,195,33,48,242,66,57,23,7,65,16,56,71,195,0,0,250,66,47,238,14,65,16,56,71,195,240,231,0,67,213,91,0,65,16,56,71,195,33,208,4,67,204,69,249,64,16,56,71,195,16,184,8,67,166,208,231,64,16,56,71,195,0,160,12,67,56,243,212,64,16,56,71,195,240,135,16,67,36,98,180,64,16,56,71,195,33,112,20,67,20,5,110,64,16,56,71,195,16,88,24,67,255,149,249,63,16,56,71,195,0,64,28,67,46,255,201,63,16,56,71,195,240,39,32,67,125,203,34,64,16,56,71,195,33,16,36,67,181,166,15,64,16,56,71,195,16,248,39,67,67,30,49,62,16,56,71,195,0,224,43,67,57,209,158,191,16,56,71,195,240,199,47,67,68,23,6,192,16,56,71,195,33,176,51,67,139,113,38,192,16,56,71,195,16,152,55,67,179,239,86,192,16,56,71,195,0,128,59,67,12,229,160,192,16,56,71,195,240,103,63,67,236,76,216,192,16,56,71,195,33,80,67,67,138,147,251,192,16,56,71,195,16,56,71,67,202,108,243,192,16,56,71,195,0,32,75,67,97,195,227,192,16,56,71,195,240,7,79,67,46,4,231,192,16,56,71,195,33,240,82,67,248,83,203,192,16,56,71,195,16,216,86,67,225,93,200,192,16,56,71,195,0,192,90,67,110,139,236,192,16,56,71,195,240,167,94,67,3,62,195,192,16,56,71,195,33,144,98,67,67,4,133,192,16,56,71,195,16,120,102,67,11,152,220,191,16,56,71,195,0,96,106,67,162,178,97,62,16,56,71,195,240,71,110,67,115,133,219,63,16,56,71,195,33,48,114,67,42,145,20,64,16,56,71,195,16,24,118,67,102,136,123,64,16,56,71,195,0,0,122,67,40,242,223,64,16,56,71,195,0,0,122,64,15,139,162,65,0,32,75,195,0,0,250,64,200,7,152,65,0,32,75,195,52,128,59,65,55,9,159,65,0,32,75,195,0,0,122,65,109,231,150,65,0,32,75,195,26,64,156,65,170,2,138,65,0,32,75,195,0,128,187,65,147,58,134,65,0,32,75,195,26,192,218,65,27,175,131,65,0,32,75,195,0,0,250,65,170,130,97,65,0,32,75,195,13,160,12,66,119,190,74,65,0,32,75,195,0,64,28,66,36,151,68,65,0,32,75,195,13,224,43,66,220,104,64,65,0,32,75,195,0,128,59,66,143,228,54,65,0,32,75,195,13,32,75,66,106,222,56,65,0,32,75,195,0,192,90,66,249,49,45,65,0,32,75,195,13,96,106,66,178,157,72,65,0,32,75,195,0,0,122,66,112,206,66,65,0,32,75,195,7,208,132,66,7,95,33,65,0,32,75,195,0,160,140,66,222,200,11,65,0,32,75,195,7,112,148,66,213,166,5,65,0,32,75,195,0,64,156,66,2,2,12,65,0,32,75,195,7,16,164,66,124,39,27,65,0,32,75,195,0,224,171,66,4,4,31,65,0,32,75,195,7,176,179,66,223,236,31,65,0,32,75,195,0,128,187,66,66,161,20,65,0,32,75,195,7,80,195,66,53,12,3,65,0,32,75,195,66,32,203,66,109,115,250,64,0,32,75,195,33,240,210,66,218,114,214,64,0,32,75,195,0,192,218,66,69,71,203,64,0,32,75,195,223,143,226,66,10,220,217,64,0,32,75,195,66,96,234,66,202,79,252,64,0,32,75,195,33,48,242,66,114,80,12,65,0,32,75,195,0,0,250,66,20,109,21,65,0,32,75,195,240,231,0,67,13,14,18,65,0,32,75,195,33,208,4,67,214,226,243,64,0,32,75,195,16,184,8,67,86,130,202,64,0,32,75,195,0,160,12,67,24,178,201,64,0,32,75,195,240,135,16,67,4,28,185,64,0,32,75,195,33,112,20,67,91,177,135,64,0,32,75,195,16,88,24,67,221,181,48,64,0,32,75,195,0,64,28,67,211,193,250,63,0,32,75,195,240,39,32,67,225,98,17,64,0,32,75,195,33,16,36,67,214,86,14,64,0,32,75,195,16,248,39,67,149,183,143,63,0,32,75,195,0,224,43,67,84,30,45,190,0,32,75,195,240,199,47,67,213,60,99,191,0,32,75,195,33,176,51,67,81,131,101,191,0,32,75,195,16,152,55,67,102,160,26,192,0,32,75,195,0,128,59,67,57,151,104,192,0,32,75,195,240,103,63,67,170,67,192,192,0,32,75,195,33,80,67,67,237,240,187,192,0,32,75,195,16,56,71,67,101,1,166,192,0,32,75,195,0,32,75,67,149,154,135,192,0,32,75,195,240,7,79,67,74,123,151,192,0,32,75,195,33,240,82,67,100,59,156,192,0,32,75,195,16,216,86,67,227,83,154,192,0,32,75,195,0,192,90,67,53,7,162,192,0,32,75,195,240,167,94,67,86,101,164,192,0,32,75,195,33,144,98,67,183,127,47,192,0,32,75,195,16,120,102,67,231,77,170,61,0,32,75,195,0,96,106,67,140,161,0,64,0,32,75,195,240,71,110,67,71,143,57,64,0,32,75,195,33,48,114,67,199,215,114,64,0,32,75,195,16,24,118,67,209,5,174,64,0,32,75,195,0,0,122,67,55,142,7,65,0,32,75,195,0,0,122,64,234,132,146,65,240,7,79,195,0,0,250,64,84,116,135,65,240,7,79,195,52,128,59,65,202,178,133,65,240,7,79,195,0,0,122,65,43,135,128,65,240,7,79,195,26,64,156,65,13,113,125,65,240,7,79,195,0,128,187,65,54,171,111,65,240,7,79,195,26,192,218,65,181,55,88,65,240,7,79,195,0,0,250,65,86,14,69,65,240,7,79,195,13,160,12,66,140,219,70,65,240,7,79,195,0,64,28,66,74,123,73,65,240,7,79,195,13,224,43,66,57,180,70,65,240,7,79,195,0,128,59,66,214,86,59,65,240,7,79,195,13,32,75,66,235,115,46,65,240,7,79,195,0,192,90,66,225,122,35,65,240,7,79,195,13,96,106,66,242,176,43,65,240,7,79,195,0,0,122,66,81,218,30,65,240,7,79,195,7,208,132,66,82,213,17,65,240,7,79,195,0,160,140,66,98,45,218,64,240,7,79,195,7,112,148,66,254,96,219,64,240,7,79,195,0,64,156,66,31,104,223,64,240,7,79,195,7,16,164,66,199,145,6,65,240,7,79,195,0,224,171,66,127,246,12,65,240,7,79,195,7,176,179,66,32,36,20,65,240,7,79,195,0,128,187,66,241,244,7,65,240,7,79,195,7,80,195,66,174,158,227,64,240,7,79,195,66,32,203,66,47,163,195,64,240,7,79,195,33,240,210,66,176,85,145,64,240,7,79,195,0,192,218,66,219,249,126,64,240,7,79,195,223,143,226,66,18,136,199,64,240,7,79,195,66,96,234,66,89,110,237,64,240,7,79,195,33,48,242,66,155,102,6,65,240,7,79,195,0,0,250,66,135,92,19,65,240,7,79,195,240,231,0,67,58,158,17,65,240,7,79,195,33,208,4,67,101,42,11,65,240,7,79,195,16,184,8,67,21,169,226,64,240,7,79,195,0,160,12,67,35,132,196,64,240,7,79,195,240,135,16,67,71,61,155,64,240,7,79,195,33,112,20,67,211,246,144,64,240,7,79,195,16,88,24,67,107,96,151,64,240,7,79,195,0,64,28,67,69,71,96,64,240,7,79,195,240,39,32,67,235,86,65,64,240,7,79,195,33,16,36,67,138,205,41,64,240,7,79,195,16,248,39,67,151,173,245,63,240,7,79,195,0,224,43,67,36,127,168,63,240,7,79,195,240,199,47,67,123,187,33,63,240,7,79,195,33,176,51,67,92,117,61,190,240,7,79,195,16,152,55,67,230,232,133,191,240,7,79,195,0,128,59,67,226,35,38,192,240,7,79,195,240,103,63,67,246,209,103,192,240,7,79,195,33,80,67,67,63,29,75,192,240,7,79,195,16,56,71,67,97,50,69,192,240,7,79,195,0,32,75,67,113,172,13,192,240,7,79,195,240,7,79,67,28,211,65,192,240,7,79,195,33,240,82,67,118,26,132,192,240,7,79,195,16,216,86,67,92,3,91,192,240,7,79,195,0,192,90,67,64,77,117,192,240,7,79,195,240,167,94,67,219,109,117,192,240,7,79,195,33,144,98,67,56,45,232,191,240,7,79,195,16,120,102,67,184,233,135,63,240,7,79,195,0,96,106,67,56,103,64,64,240,7,79,195,240,71,110,67,172,115,126,64,240,7,79,195,33,48,114,67,215,47,168,64,240,7,79,195,16,24,118,67,145,126,195,64,240,7,79,195,0,0,122,67,51,80,30,65,240,7,79,195,0,0,122,64,181,183,129,65,33,240,82,195,0,0,250,64,74,12,125,65,33,240,82,195,52,128,59,65,194,134,111,65,33,240,82,195,0,0,122,65,253,246,106,65,33,240,82,195,26,64,156,65,84,82,101,65,33,240,82,195,0,128,187,65,227,199,96,65,33,240,82,195,26,192,218,65,140,74,67,65,33,240,82,195,0,0,250,65,166,10,76,65,33,240,82,195,13,160,12,66,75,89,82,65,33,240,82,195,0,64,28,66,16,88,79,65,33,240,82,195,13,224,43,66,35,74,70,65,33,240,82,195,0,128,59,66,38,83,63,65,33,240,82,195,13,32,75,66,15,156,40,65,33,240,82,195,0,192,90,66,249,131,20,65,33,240,82,195,13,96,106,66,254,55,19,65,33,240,82,195,0,0,122,66,191,229,11,65,33,240,82,195,7,208,132,66,151,168,242,64,33,240,82,195,0,160,140,66,34,166,191,64,33,240,82,195,7,112,148,66,114,138,189,64,33,240,82,195,0,64,156,66,164,170,201,64,33,240,82,195,7,16,164,66,172,115,235,64,33,240,82,195,0,224,171,66,154,182,244,64,33,240,82,195,7,176,179,66,40,155,252,64,33,240,82,195,0,128,187,66,185,165,244,64,33,240,82,195,7,80,195,66,207,73,181,64,33,240,82,195,66,32,203,66,72,80,132,64,33,240,82,195,33,240,210,66,98,243,41,64,33,240,82,195,0,192,218,66,200,152,134,64,33,240,82,195,223,143,226,66,15,127,186,64,33,240,82,195,66,96,234,66,109,168,221,64,33,240,82,195,33,48,242,66,77,86,8,65,33,240,82,195,0,0,250,66,228,201,20,65,33,240,82,195,240,231,0,67,143,83,34,65,33,240,82,195,33,208,4,67,121,93,22,65,33,240,82,195,16,184,8,67,245,161,11,65,33,240,82,195,0,160,12,67,121,35,253,64,33,240,82,195,240,135,16,67,216,129,170,64,33,240,82,195,33,112,20,67,81,165,169,64,33,240,82,195,16,88,24,67,63,116,159,64,33,240,82,195,0,64,28,67,245,190,168,64,33,240,82,195,240,39,32,67,94,186,129,64,33,240,82,195,33,16,36,67,214,28,136,64,33,240,82,195,16,248,39,67,255,231,102,64,33,240,82,195,0,224,43,67,23,188,60,64,33,240,82,195,240,199,47,67,238,61,252,63,33,240,82,195,33,176,51,67,100,59,155,63,33,240,82,195,16,152,55,67,154,233,214,190,33,240,82,195,0,128,59,67,199,215,226,191,33,240,82,195,240,103,63,67,241,75,249,191,33,240,82,195,33,80,67,67,31,46,169,191,33,240,82,195,16,56,71,67,194,76,223,191,33,240,82,195,0,32,75,67,41,233,49,191,33,240,82,195,240,7,79,67,33,234,226,191,33,240,82,195,33,240,82,67,80,83,25,192,33,240,82,195,16,216,86,67,174,13,39,192,33,240,82,195,0,192,90,67,113,61,74,192,33,240,82,195,240,167,94,67,237,211,29,192,33,240,82,195,33,144,98,67,171,177,92,191,33,240,82,195,16,120,102,67,0,111,185,63,33,240,82,195,0,96,106,67,30,80,92,64,33,240,82,195,240,71,110,67,118,108,173,64,33,240,82,195,33,48,114,67,215,23,201,64,33,240,82,195,16,24,118,67,109,255,231,64,33,240,82,195,0,0,122,67,46,144,43,65,33,240,82,195,0,0,122,64,68,139,100,65,16,216,86,195,0,0,250,64,250,126,96,65,16,216,86,195,52,128,59,65,120,11,77,65,16,216,86,195,0,0,122,65,147,169,68,65,16,216,86,195,26,64,156,65,27,13,65,65,16,216,86,195,0,128,187,65,138,31,71,65,16,216,86,195,26,192,218,65,125,63,75,65,16,216,86,195,0,0,250,65,13,113,69,65,16,216,86,195,13,160,12,66,231,140,83,65,16,216,86,195,0,64,28,66,182,132,78,65,16,216,86,195,13,224,43,66,145,126,73,65,16,216,86,195,0,128,59,66,21,140,55,65,16,216,86,195,13,32,75,66,156,196,40,65,16,216,86,195,0,192,90,66,110,250,22,65,16,216,86,195,13,96,106,66,58,146,33,65,16,216,86,195,0,0,122,66,132,216,21,65,16,216,86,195,7,208,132,66,192,38,1,65,16,216,86,195,0,160,140,66,121,88,206,64,16,216,86,195,7,112,148,66,122,194,185,64,16,216,86,195,0,64,156,66,195,100,179,64,16,216,86,195,7,16,164,66,25,197,212,64,16,216,86,195,0,224,171,66,208,155,244,64,16,216,86,195,7,176,179,66,242,251,4,65,16,216,86,195,0,128,187,66,108,38,255,64,16,216,86,195,7,80,195,66,219,167,172,64,16,216,86,195,66,32,203,66,253,193,106,64,16,216,86,195,33,240,210,66,112,206,76,64,16,216,86,195,0,192,218,66,71,61,189,64,16,216,86,195,223,143,226,66,146,232,236,64,16,216,86,195,66,96,234,66,219,237,4,65,16,216,86,195,33,48,242,66,180,31,28,65,16,216,86,195,0,0,250,66,20,208,35,65,16,216,86,195,240,231,0,67,235,115,37,65,16,216,86,195,33,208,4,67,234,4,42,65,16,216,86,195,16,184,8,67,218,27,46,65,16,216,86,195,0,160,12,67,52,116,17,65,16,216,86,195,240,135,16,67,0,116,207,64,16,216,86,195,33,112,20,67,88,173,160,64,16,216,86,195,16,88,24,67,185,54,191,64,16,216,86,195,0,64,28,67,180,147,202,64,16,216,86,195,240,39,32,67,188,34,189,64,16,216,86,195,33,16,36,67,207,247,160,64,16,216,86,195,16,248,39,67,99,98,160,64,16,216,86,195,0,224,43,67,78,151,139,64,16,216,86,195,240,199,47,67,10,75,108,64,16,216,86,195,33,176,51,67,243,200,61,64,16,216,86,195,16,152,55,67,200,12,184,63,16,216,86,195,0,128,59,67,97,164,191,190,16,216,86,195,240,103,63,67,109,168,116,191,16,216,86,195,33,80,67,67,154,122,253,189,16,216,86,195,16,56,71,67,34,81,232,189,16,216,86,195,0,32,75,67,140,229,140,188,16,216,86,195,240,7,79,67,95,152,140,191,16,216,86,195,33,240,82,67,197,3,142,191,16,216,86,195,16,216,86,67,230,92,246,191,16,216,86,195,0,192,90,67,211,193,16,192,16,216,86,195,240,167,94,67,187,10,169,191,16,216,86,195,33,144,98,67,132,45,86,62,16,216,86,195,16,120,102,67,11,94,26,64,16,216,86,195,0,96,106,67,19,102,149,64,16,216,86,195,240,71,110,67,1,135,201,64,16,216,86,195,33,48,114,67,121,117,230,64,16,216,86,195,16,24,118,67,107,72,1,65,16,216,86,195,0,0,122,67,38,228,36,65,16,216,86,195,0,0,122,64,29,90,84,65,0,192,90,195,0,0,250,64,24,38,77,65,0,192,90,195,52,128,59,65,148,246,60,65,0,192,90,195,0,0,122,65,53,94,59,65,0,192,90,195,26,64,156,65,60,78,56,65,0,192,90,195,0,128,187,65,59,1,66,65,0,192,90,195,26,192,218,65,244,108,64,65,0,192,90,195,0,0,250,65,172,173,69,65,0,192,90,195,13,160,12,66,126,29,70,65,0,192,90,195,0,64,28,66,186,73,68,65,0,192,90,195,13,224,43,66,3,9,72,65,0,192,90,195,0,128,59,66,212,154,52,65,0,192,90,195,13,32,75,66,179,234,34,65,0,192,90,195,0,192,90,66,88,202,38,65,0,192,90,195,13,96,106,66,64,19,32,65,0,192,90,195,0,0,122,66,169,94,31,65,0,192,90,195,7,208,132,66,51,97,10,65,0,192,90,195,0,160,140,66,128,154,206,64,0,192,90,195,7,112,148,66,104,174,169,64,0,192,90,195,0,64,156,66,248,83,169,64,0,192,90,195,7,16,164,66,113,61,232,64,0,192,90,195,0,224,171,66,65,130,2,65,0,192,90,195,7,176,179,66,44,154,15,65,0,192,90,195,0,128,187,66,160,84,247,64,0,192,90,195,7,80,195,66,195,71,173,64,0,192,90,195,66,32,203,66,33,176,135,64,0,192,90,195,33,240,210,66,219,133,172,64,0,192,90,195,0,192,218,66,234,62,246,64,0,192,90,195,223,143,226,66,192,4,14,65,0,192,90,195,66,96,234,66,74,41,23,65,0,192,90,195,33,48,242,66,137,111,19,65,0,192,90,195,0,0,250,66,131,47,34,65,0,192,90,195,240,231,0,67,165,189,57,65,0,192,90,195,33,208,4,67,255,33,64,65,0,192,90,195,16,184,8,67,43,24,69,65,0,192,90,195,0,160,12,67,52,128,45,65,0,192,90,195,240,135,16,67,94,17,245,64,0,192,90,195,33,112,20,67,84,87,194,64,0,192,90,195,16,88,24,67,248,194,206,64,0,192,90,195,0,64,28,67,140,161,224,64,0,192,90,195,240,39,32,67,49,37,232,64,0,192,90,195,33,16,36,67,153,13,202,64,0,192,90,195,16,248,39,67,6,100,207,64,0,192,90,195,0,224,43,67,83,145,188,64,0,192,90,195,240,199,47,67,255,207,182,64,0,192,90,195,33,176,51,67,72,191,137,64,0,192,90,195,16,152,55,67,246,209,31,64,0,192,90,195,0,128,59,67,36,180,149,63,0,192,90,195,240,103,63,67,207,189,155,63,0,192,90,195,33,80,67,67,145,39,153,63,0,192,90,195,16,56,71,67,187,155,163,63,0,192,90,195,0,32,75,67,147,24,136,63,0,192,90,195,240,7,79,67,22,80,8,62,0,192,90,195,33,240,82,67,217,61,145,190,0,192,90,195,16,216,86,67,64,81,241,190,0,192,90,195,0,192,90,67,79,8,113,191,0,192,90,195,240,167,94,67,148,47,116,191,0,192,90,195,33,144,98,67,177,79,64,63,0,192,90,195,16,120,102,67,128,183,34,64,0,192,90,195,0,96,106,67,86,183,165,64,0,192,90,195,240,71,110,67,11,65,231,64,0,192,90,195,33,48,114,67,219,39,7,65,0,192,90,195,16,24,118,67,5,122,9,65,0,192,90,195,0,0,122,67,204,238,38,65,0,192,90,195,0,0,122,64,131,81,80,65,240,167,94,195,0,0,250,64,198,220,82,65,240,167,94,195,52,128,59,65,229,97,71,65,240,167,94,195,0,0,122,65,52,162,45,65,240,167,94,195,26,64,156,65,77,21,52,65,240,167,94,195,0,128,187,65,188,150,66,65,240,167,94,195,26,192,218,65,99,238,73,65,240,167,94,195,0,0,250,65,18,131,75,65,240,167,94,195,13,160,12,66,215,52,74,65,240,167,94,195,0,64,28,66,44,101,72,65,240,167,94,195,13,224,43,66,239,201,56,65,240,167,94,195,0,128,59,66,229,242,49,65,240,167,94,195,13,32,75,66,88,168,49,65,240,167,94,195,0,192,90,66,135,167,52,65,240,167,94,195,13,96,106,66,115,244,31,65,240,167,94,195,0,0,122,66,203,33,17,65,240,167,94,195,7,208,132,66,65,125,251,64,240,167,94,195,0,160,140,66,201,2,192,64,240,167,94,195,7,112,148,66,150,120,198,64,240,167,94,195,0,64,156,66,65,212,220,64,240,167,94,195,7,16,164,66,14,132,2,65,240,167,94,195,0,224,171,66,225,209,14,65,240,167,94,195,7,176,179,66,95,169,24,65,240,167,94,195,0,128,187,66,45,224,0,65,240,167,94,195,7,80,195,66,45,207,185,64,240,167,94,195,66,32,203,66,108,178,160,64,240,167,94,195,33,240,210,66,164,252,228,64,240,167,94,195,0,192,218,66,42,41,15,65,240,167,94,195,223,143,226,66,104,220,29,65,240,167,94,195,66,96,234,66,11,70,42,65,240,167,94,195,33,48,242,66,39,160,44,65,240,167,94,195,0,0,250,66,70,37,49,65,240,167,94,195,240,231,0,67,156,51,74,65,240,167,94,195,33,208,4,67,46,255,70,65,240,167,94,195,16,184,8,67,44,212,65,65,240,167,94,195,0,160,12,67,222,113,54,65,240,167,94,195,240,135,16,67,29,61,15,65,240,167,94,195,33,112,20,67,88,144,218,64,240,167,94,195,16,88,24,67,148,222,244,64,240,167,94,195,0,64,28,67,173,64,4,65,240,167,94,195,240,39,32,67,145,237,254,64,240,167,94,195,33,16,36,67,196,177,240,64,240,167,94,195,16,248,39,67,188,174,229,64,240,167,94,195,0,224,43,67,38,228,191,64,240,167,94,195,240,199,47,67,242,205,184,64,240,167,94,195,33,176,51,67,35,219,152,64,240,167,94,195,16,152,55,67,14,79,89,64,240,167,94,195,0,128,59,67,15,98,61,64,240,167,94,195,240,103,63,67,99,69,237,63,240,167,94,195,33,80,67,67,175,37,168,63,240,167,94,195,16,56,71,67,250,39,144,63,240,167,94,195,0,32,75,67,121,6,189,63,240,167,94,195,240,7,79,67,170,125,242,63,240,167,94,195,33,240,82,67,97,108,33,63,240,167,94,195,16,216,86,67,113,90,152,62,240,167,94,195,0,192,90,67,129,56,52,188,240,167,94,195,240,167,94,67,229,123,102,190,240,167,94,195,33,144,98,67,195,240,33,63,240,167,94,195,16,120,102,67,233,125,57,64,240,167,94,195,0,96,106,67,156,191,180,64,240,167,94,195,240,71,110,67,40,44,231,64,240,167,94,195,33,48,114,67,201,200,252,64,240,167,94,195,16,24,118,67,252,210,12,65,240,167,94,195,0,0,122,67,251,92,47,65,240,167,94,195,0,0,122,64,163,146,63,65,33,144,98,195,0,0,250,64,224,45,78,65,33,144,98,195,52,128,59,65,132,13,66,65,33,144,98,195,0,0,122,65,12,147,43,65,33,144,98,195,26,64,156,65,80,252,58,65,33,144,98,195,0,128,187,65,179,123,74,65,33,144,98,195,26,192,218,65,202,195,75,65,33,144,98,195,0,0,250,65,134,201,60,65,33,144,98,195,13,160,12,66,168,53,51,65,33,144,98,195,0,64,28,66,182,132,47,65,33,144,98,195,13,224,43,66,171,62,44,65,33,144,98,195,0,128,59,66,75,234,47,65,33,144,98,195,13,32,75,66,50,119,52,65,33,144,98,195,0,192,90,66,70,37,49,65,33,144,98,195,13,96,106,66,226,88,43,65,33,144,98,195,0,0,122,66,231,157,18,65,33,144,98,195,7,208,132,66,150,4,243,64,33,144,98,195,0,160,140,66,175,235,213,64,33,144,98,195,7,112,148,66,14,103,223,64,33,144,98,195,0,64,156,66,210,29,247,64,33,144,98,195,7,16,164,66,0,12,16,65,33,144,98,195,0,224,171,66,151,168,23,65,33,144,98,195,7,176,179,66,0,29,15,65,33,144,98,195,0,128,187,66,196,124,249,64,33,144,98,195,7,80,195,66,233,125,194,64,33,144,98,195,66,32,203,66,238,95,211,64,33,144,98,195,33,240,210,66,15,11,9,65,33,144,98,195,0,192,218,66,36,151,36,65,33,144,98,195,223,143,226,66,2,154,55,65,33,144,98,195,66,96,234,66,90,245,57,65,33,144,98,195,33,48,242,66,233,72,65,65,33,144,98,195,0,0,250,66,55,137,72,65,33,144,98,195,240,231,0,67,3,120,89,65,33,144,98,195,33,208,4,67,128,183,78,65,33,144,98,195,16,184,8,67,4,86,56,65,33,144,98,195,0,160,12,67,208,68,42,65,33,144,98,195,240,135,16,67,198,109,13,65,33,144,98,195,33,112,20,67,98,202,12,65,33,144,98,195,16,88,24,67,235,226,23,65,33,144,98,195,0,64,28,67,153,100,31,65,33,144,98,195,240,39,32,67,119,21,12,65,33,144,98,195,33,16,36,67,190,135,244,64,33,144,98,195,16,248,39,67,23,72,230,64,33,144,98,195,0,224,43,67,119,219,218,64,33,144,98,195,240,199,47,67,173,105,195,64,33,144,98,195,33,176,51,67,38,141,150,64,33,144,98,195,16,152,55,67,198,133,145,64,33,144,98,195,0,128,59,67,165,131,101,64,33,144,98,195,240,103,63,67,254,183,62,64,33,144,98,195,33,80,67,67,250,242,190,63,33,144,98,195,16,56,71,67,22,222,237,63,33,144,98,195,0,32,75,67,124,213,190,63,33,144,98,195,240,7,79,67,125,34,179,63,33,144,98,195,33,240,82,67,179,237,92,63,33,144,98,195,16,216,86,67,29,230,147,63,33,144,98,195,0,192,90,67,222,255,27,63,33,144,98,195,240,167,94,67,130,139,133,63,33,144,98,195,33,144,98,67,228,73,202,63,33,144,98,195,16,120,102,67,24,178,131,64,33,144,98,195,0,96,106,67,229,179,180,64,33,144,98,195,240,71,110,67,102,189,211,64,33,144,98,195,33,48,114,67,43,246,233,64,33,144,98,195,16,24,118,67,224,28,9,65,33,144,98,195,0,0,122,67,39,160,44,65,33,144,98,195,0,0,122,64,241,99,39,65,16,120,102,195,0,0,250,64,184,175,54,65,16,120,102,195,52,128,59,65,172,139,44,65,16,120,102,195,0,0,122,65,80,141,41,65,16,120,102,195,26,64,156,65,151,255,47,65,16,120,102,195,0,128,187,65,34,142,57,65,16,120,102,195,26,192,218,65,233,72,55,65,16,120,102,195,0,0,250,65,190,159,33,65,16,120,102,195,13,160,12,66,141,151,38,65,16,120,102,195,0,64,28,66,140,161,27,65,16,120,102,195,13,224,43,66,4,132,27,65,16,120,102,195,0,128,59,66,93,109,44,65,16,120,102,195,13,32,75,66,61,10,46,65,16,120,102,195,0,192,90,66,252,24,37,65,16,120,102,195,13,96,106,66,104,179,38,65,16,120,102,195,0,0,122,66,62,46,15,65,16,120,102,195,7,208,132,66,20,121,253,64,16,120,102,195,0,160,140,66,42,186,7,65,16,120,102,195,7,112,148,66,18,247,11,65,16,120,102,195,0,64,156,66,127,19,14,65,16,120,102,195,7,16,164,66,43,251,26,65,16,120,102,195,0,224,171,66,131,204,24,65,16,120,102,195,7,176,179,66,102,189,16,65,16,120,102,195,0,128,187,66,182,231,7,65,16,120,102,195,7,80,195,66,117,205,252,64,16,120,102,195,66,32,203,66,28,78,19,65,16,120,102,195,33,240,210,66,178,46,40,65,16,120,102,195,0,192,218,66,84,116,56,65,16,120,102,195,223,143,226,66,212,154,64,65,16,120,102,195,66,96,234,66,108,9,79,65,16,120,102,195,33,48,242,66,229,97,82,65,16,120,102,195,0,0,250,66,192,91,94,65,16,120,102,195,240,231,0,67,169,19,104,65,16,120,102,195,33,208,4,67,179,234,82,65,16,120,102,195,16,184,8,67,43,246,57,65,16,120,102,195,0,160,12,67,214,197,49,65,16,120,102,195,240,135,16,67,54,171,32,65,16,120,102,195,33,112,20,67,217,61,35,65,16,120,102,195,16,88,24,67,4,86,47,65,16,120,102,195,0,64,28,67,173,105,48,65,16,120,102,195,240,39,32,67,23,43,30,65,16,120,102,195,33,16,36,67,91,206,14,65,16,120,102,195,16,248,39,67,222,229,252,64,16,120,102,195,0,224,43,67,53,152,231,64,16,120,102,195,240,199,47,67,124,10,195,64,16,120,102,195,33,176,51,67,32,210,164,64,16,120,102,195,16,152,55,67,167,92,151,64,16,120,102,195,0,128,59,67,14,161,129,64,16,120,102,195,240,103,63,67,124,44,65,64,16,120,102,195,33,80,67,67,81,165,234,63,16,120,102,195,16,56,71,67,130,226,49,64,16,120,102,195,0,32,75,67,233,154,67,64,16,120,102,195,240,7,79,67,7,124,4,64,16,120,102,195,33,240,82,67,136,70,1,64,16,120,102,195,16,216,86,67,94,162,8,64,16,120,102,195,0,192,90,67,71,61,212,63,16,120,102,195,240,167,94,67,58,146,235,63,16,120,102,195,33,144,98,67,46,28,50,64,16,120,102,195,16,120,102,67,224,132,124,64,16,120,102,195,0,96,106,67,235,144,186,64,16,120,102,195,240,71,110,67,252,24,221,64,16,120,102,195,33,48,114,67,20,203,254,64,16,120,102,195,16,24,118,67,56,45,244,64,16,120,102,195,0,0,122,67,28,235,35,65,16,120,102,195,0,0,122,64,198,162,13,65,0,96,106,195,0,0,250,64,24,108,22,65,0,96,106,195,52,128,59,65,221,12,26,65,0,96,106,195,0,0,122,65,49,136,31,65,0,96,106,195,26,64,156,65,38,95,31,65,0,96,106,195,0,128,187,65,92,73,27,65,0,96,106,195,26,192,218,65,45,178,32,65,0,96,106,195,0,0,250,65,155,189,29,65,0,96,106,195,13,160,12,66,208,109,24,65,0,96,106,195,0,64,28,66,248,13,12,65,0,96,106,195,13,224,43,66,35,243,15,65,0,96,106,195,0,128,59,66,107,2,25,65,0,96,106,195,13,32,75,66,191,183,24,65,0,96,106,195,0,192,90,66,41,92,32,65,0,96,106,195,13,96,106,66,230,5,25,65,0,96,106,195,0,0,122,66,178,244,18,65,0,96,106,195,7,208,132,66,92,172,20,65,0,96,106,195,0,160,140,66,66,207,39,65,0,96,106,195,7,112,148,66,27,47,46,65,0,96,106,195,0,64,156,66,84,82,48,65,0,96,106,195,7,16,164,66,238,90,60,65,0,96,106,195,0,224,171,66,49,153,50,65,0,96,106,195,7,176,179,66,203,161,41,65,0,96,106,195,0,128,187,66,234,236,30,65,0,96,106,195,7,80,195,66,27,13,36,65,0,96,106,195,66,32,203,66,87,91,49,65,0,96,106,195,33,240,210,66,136,133,74,65,0,96,106,195,0,192,218,66,30,167,87,65,0,96,106,195,223,143,226,66,134,201,108,65,0,96,106,195,66,96,234,66,181,21,118,65,0,96,106,195,33,48,242,66,219,249,127,65,0,96,106,195,0,0,250,66,188,116,110,65,0,96,106,195,240,231,0,67,16,88,100,65,0,96,106,195,33,208,4,67,36,40,96,65,0,96,106,195,16,184,8,67,91,211,81,65,0,96,106,195,0,160,12,67,94,75,73,65,0,96,106,195,240,135,16,67,113,172,61,65,0,96,106,195,33,112,20,67,180,89,56,65,0,96,106,195,16,88,24,67,175,37,62,65,0,96,106,195,0,64,28,67,148,135,58,65,0,96,106,195,240,39,32,67,140,74,45,65,0,96,106,195,33,16,36,67,214,86,36,65,0,96,106,195,16,248,39,67,211,89,9,65,0,96,106,195,0,224,43,67,127,48,224,64,0,96,106,195,240,199,47,67,26,250,180,64,0,96,106,195,33,176,51,67,149,96,162,64,0,96,106,195,16,152,55,67,12,31,141,64,0,96,106,195,0,128,59,67,87,33,125,64,0,96,106,195,240,103,63,67,24,9,91,64,0,96,106,195,33,80,67,67,21,198,34,64,0,96,106,195,16,56,71,67,86,101,125,64,0,96,106,195,0,32,75,67,86,125,122,64,0,96,106,195,240,7,79,67,29,3,58,64,0,96,106,195,33,240,82,67,66,96,71,64,0,96,106,195,16,216,86,67,215,52,85,64,0,96,106,195,0,192,90,67,72,27,41,64,0,96,106,195,240,167,94,67,206,54,41,64,0,96,106,195,33,144,98,67,109,231,75,64,0,96,106,195,16,120,102,67,201,200,142,64,0,96,106,195,0,96,106,67,201,176,189,64,0,96,106,195,240,71,110,67,251,150,217,64,0,96,106,195,33,48,114,67,165,78,11,65,0,96,106,195,16,24,118,67,79,146,7,65,0,96,106,195,0,0,122,67,116,36,38,65,0,96,106,195,0,0,122,64,64,217,255,64,240,71,110,195,0,0,250,64,172,243,9,65,240,71,110,195,52,128,59,65,58,18,17,65,240,71,110,195,0,0,122,65,165,3,18,65,240,71,110,195,26,64,156,65,13,171,15,65,240,71,110,195,0,128,187,65,58,6,28,65,240,71,110,195,26,192,218,65,61,73,25,65,240,71,110,195,0,0,250,65,185,211,20,65,240,71,110,195,13,160,12,66,4,45,10,65,240,71,110,195,0,64,28,66,249,172,11,65,240,71,110,195,13,224,43,66,13,236,7,65,240,71,110,195,0,128,59,66,181,137,12,65,240,71,110,195,13,32,75,66,216,1,12,65,240,71,110,195,0,192,90,66,199,99,15,65,240,71,110,195,13,96,106,66,68,250,32,65,240,71,110,195,0,0,122,66,61,10,50,65,240,71,110,195,7,208,132,66,104,34,45,65,240,71,110,195,0,160,140,66,61,44,64,65,240,71,110,195,7,112,148,66,207,102,83,65,240,71,110,195,0,64,156,66,231,29,98,65,240,71,110,195,7,16,164,66,82,184,101,65,240,71,110,195,0,224,171,66,25,115,84,65,240,71,110,195,7,176,179,66,161,214,76,65,240,71,110,195,0,128,187,66,63,198,64,65,240,71,110,195,7,80,195,66,79,64,76,65,240,71,110,195,66,32,203,66,191,125,96,65,240,71,110,195,33,240,210,66,165,78,127,65,240,71,110,195,0,192,218,66,14,62,142,65,240,71,110,195,223,143,226,66,33,159,152,65,240,71,110,195,66,96,234,66,68,11,150,65,240,71,110,195,33,48,242,66,210,128,150,65,240,71,110,195,0,0,250,66,121,216,139,65,240,71,110,195,240,231,0,67,181,55,131,65,240,71,110,195,33,208,4,67,123,20,128,65,240,71,110,195,16,184,8,67,148,246,114,65,240,71,110,195,0,160,12,67,177,225,94,65,240,71,110,195,240,135,16,67,70,37,78,65,240,71,110,195,33,112,20,67,112,95,59,65,240,71,110,195,16,88,24,67,190,159,54,65,240,71,110,195,0,64,28,67,96,229,48,65,240,71,110,195,240,39,32,67,155,230,45,65,240,71,110,195,33,16,36,67,64,19,41,65,240,71,110,195,16,248,39,67,52,128,33,65,240,71,110,195,0,224,43,67,143,141,247,64,240,71,110,195,240,199,47,67,191,96,190,64,240,71,110,195,33,176,51,67,221,123,176,64,240,71,110,195,16,152,55,67,159,200,168,64,240,71,110,195,0,128,59,67,252,82,158,64,240,71,110,195,240,103,63,67,38,54,132,64,240,71,110,195,33,80,67,67,91,8,102,64,240,71,110,195,16,56,71,67,29,3,129,64,240,71,110,195,0,32,75,67,92,56,140,64,240,71,110,195,240,7,79,67,175,95,70,64,240,71,110,195,33,240,82,67,106,77,75,64,240,71,110,195,16,216,86,67,88,168,67,64,240,71,110,195,0,192,90,67,180,2,77,64,240,71,110,195,240,167,94,67,23,72,34,64,240,71,110,195,33,144,98,67,246,40,72,64,240,71,110,195,16,120,102,67,249,131,145,64,240,71,110,195,0,96,106,67,136,244,189,64,240,71,110,195,240,71,110,67,30,254,223,64,240,71,110,195,33,48,114,67,128,84,3,65,240,71,110,195,16,24,118,67,233,14,25,65,240,71,110,195,0,0,122,67,2,154,55,65,240,71,110,195,0,0,122,64,104,232,204,64,33,48,114,195,0,0,250,64,170,101,252,64,33,48,114,195,52,128,59,65,173,180,9,65,33,48,114,195,0,0,122,65,145,27,9,65,33,48,114,195,26,64,156,65,175,177,9,65,33,48,114,195,0,128,187,65,252,29,10,65,33,48,114,195,26,192,218,65,123,131,5,65,33,48,114,195,0,0,250,65,53,70,240,64,33,48,114,195,13,160,12,66,3,125,244,64,33,48,114,195,0,64,28,66,183,69,248,64,33,48,114,195,13,224,43,66,146,34,242,64,33,48,114,195,0,128,59,66,151,173,255,64,33,48,114,195,13,32,75,66,137,251,25,65,33,48,114,195,0,192,90,66,1,152,20,65,33,48,114,195,13,96,106,66,52,17,38,65,33,48,114,195,0,0,122,66,3,120,52,65,33,48,114,195,7,208,132,66,118,224,68,65,33,48,114,195,0,160,140,66,105,111,88,65,33,48,114,195,7,112,148,66,95,41,104,65,33,48,114,195,0,64,156,66,121,88,115,65,33,48,114,195,7,16,164,66,68,105,126,65,33,48,114,195,0,224,171,66,146,92,119,65,33,48,114,195,7,176,179,66,11,70,104,65,33,48,114,195,0,128,187,66,39,160,99,65,33,48,114,195,7,80,195,66,245,74,95,65,33,48,114,195,66,32,203,66,165,44,125,65,33,48,114,195,33,240,210,66,143,100,149,65,33,48,114,195,0,192,218,66,57,214,165,65,33,48,114,195,223,143,226,66,75,72,172,65,33,48,114,195,66,96,234,66,87,219,167,65,33,48,114,195,33,48,242,66,29,201,161,65,33,48,114,195,0,0,250,66,161,86,148,65,33,48,114,195,240,231,0,67,112,223,142,65,33,48,114,195,33,208,4,67,112,95,141,65,33,48,114,195,16,184,8,67,131,47,135,65,33,48,114,195,0,160,12,67,233,183,109,65,33,48,114,195,240,135,16,67,119,45,81,65,33,48,114,195,33,112,20,67,85,193,71,65,33,48,114,195,16,88,24,67,43,246,60,65,33,48,114,195,0,64,28,67,175,148,60,65,33,48,114,195,240,39,32,67,93,220,54,65,33,48,114,195,33,16,36,67,69,216,45,65,33,48,114,195,16,248,39,67,244,38,28,65,33,48,114,195,0,224,43,67,42,29,2,65,33,48,114,195,240,199,47,67,111,100,221,64,33,48,114,195,33,176,51,67,205,228,189,64,33,48,114,195,16,152,55,67,165,131,185,64,33,48,114,195,0,128,59,67,198,220,185,64,33,48,114,195,240,103,63,67,180,60,155,64,33,48,114,195,33,80,67,67,227,199,136,64,33,48,114,195,16,56,71,67,230,92,135,64,33,48,114,195,0,32,75,67,243,229,127,64,33,48,114,195,240,7,79,67,232,217,94,64,33,48,114,195,33,240,82,67,90,129,109,64,33,48,114,195,16,216,86,67,62,203,97,64,33,48,114,195,0,192,90,67,136,104,90,64,33,48,114,195,240,167,94,67,110,23,26,64,33,48,114,195,33,144,98,67,201,171,89,64,33,48,114,195,16,120,102,67,149,130,144,64,33,48,114,195,0,96,106,67,13,195,190,64,33,48,114,195,240,71,110,67,123,247,245,64,33,48,114,195,33,48,114,67,203,185,8,65,33,48,114,195,16,24,118,67,144,230,23,65,33,48,114,195,0,0,122,67,232,217,64,65,33,48,114,195,0,0,122,64,25,4,195,64,16,24,118,195,0,0,250,64,159,2,244,64,16,24,118,195,52,128,59,65,117,77,5,65,16,24,118,195,0,0,122,65,13,224,9,65,16,24,118,195,26,64,156,65,212,43,12,65,16,24,118,195,0,128,187,65,36,180,252,64,16,24,118,195,26,192,218,65,242,234,248,64,16,24,118,195,0,0,250,65,192,33,237,64,16,24,118,195,13,160,12,66,18,78,210,64,16,24,118,195,0,64,28,66,231,24,202,64,16,24,118,195,13,224,43,66,165,49,247,64,16,24,118,195,0,128,59,66,203,33,14,65,16,24,118,195,13,32,75,66,91,177,32,65,16,24,118,195,0,192,90,66,70,182,44,65,16,24,118,195,13,96,106,66,117,2,60,65,16,24,118,195,0,0,122,66,54,60,82,65,16,24,118,195,7,208,132,66,6,18,82,65,16,24,118,195,0,160,140,66,76,55,110,65,16,24,118,195,7,112,148,66,221,181,120,65,16,24,118,195,0,64,156,66,195,228,131,65,16,24,118,195,7,16,164,66,22,123,136,65,16,24,118,195,0,224,171,66,124,225,137,65,16,24,118,195,7,176,179,66,0,111,131,65,16,24,118,195,0,128,187,66,92,143,130,65,16,24,118,195], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+266240);
/* memory initializer */ allocate([7,80,195,66,39,66,136,65,16,24,118,195,66,32,203,66,81,107,140,65,16,24,118,195,33,240,210,66,105,111,160,65,16,24,118,195,0,192,218,66,169,19,174,65,16,24,118,195,223,143,226,66,134,184,178,65,16,24,118,195,66,96,234,66,20,80,182,65,16,24,118,195,33,48,242,66,215,163,173,65,16,24,118,195,0,0,250,66,102,230,163,65,16,24,118,195,240,231,0,67,16,105,154,65,16,24,118,195,33,208,4,67,5,52,148,65,16,24,118,195,16,184,8,67,220,87,139,65,16,24,118,195,0,160,12,67,196,66,108,65,16,24,118,195,240,135,16,67,150,67,94,65,16,24,118,195,33,112,20,67,77,243,64,65,16,24,118,195,16,88,24,67,75,89,61,65,16,24,118,195,0,64,28,67,228,20,69,65,16,24,118,195,240,39,32,67,193,168,75,65,16,24,118,195,33,16,36,67,122,165,47,65,16,24,118,195,16,248,39,67,181,21,35,65,16,24,118,195,0,224,43,67,82,85,3,65,16,24,118,195,240,199,47,67,178,215,246,64,16,24,118,195,33,176,51,67,210,24,243,64,16,24,118,195,16,152,55,67,246,98,223,64,16,24,118,195,0,128,59,67,7,240,217,64,16,24,118,195,240,103,63,67,34,113,196,64,16,24,118,195,33,80,67,67,78,151,141,64,16,24,118,195,16,56,71,67,176,27,126,64,16,24,118,195,0,32,75,67,98,248,129,64,16,24,118,195,240,7,79,67,44,14,111,64,16,24,118,195,33,240,82,67,80,112,142,64,16,24,118,195,16,216,86,67,34,26,91,64,16,24,118,195,0,192,90,67,140,21,45,64,16,24,118,195,240,167,94,67,88,86,120,64,16,24,118,195,33,144,98,67,30,27,145,64,16,24,118,195,16,120,102,67,179,41,182,64,16,24,118,195,0,96,106,67,37,122,199,64,16,24,118,195,240,71,110,67,3,120,236,64,16,24,118,195,33,48,114,67,221,111,15,65,16,24,118,195,16,24,118,67,33,176,47,65,16,24,118,195,0,0,122,67,208,68,80,65,16,24,118,195,0,0,122,64,151,57,202,64,0,0,122,195,0,0,250,64,188,145,220,64,0,0,122,195,52,128,59,65,79,35,10,65,0,0,122,195,0,0,122,65,68,134,20,65,0,0,122,195,26,64,156,65,30,220,16,65,0,0,122,195,0,128,187,65,11,53,8,65,0,0,122,195,26,192,218,65,23,72,4,65,0,0,122,195,0,0,250,65,219,191,251,64,0,0,122,195,13,160,12,66,128,241,209,64,0,0,122,195,0,64,28,66,103,213,216,64,0,0,122,195,13,224,43,66,244,207,10,65,0,0,122,195,0,128,59,66,125,208,35,65,0,0,122,195,13,32,75,66,58,35,56,65,0,0,122,195,0,192,90,66,73,157,75,65,0,0,122,195,13,96,106,66,102,102,103,65,0,0,122,195,0,0,122,66,97,195,123,65,0,0,122,195,7,208,132,66,243,31,115,65,0,0,122,195,0,160,140,66,156,68,129,65,0,0,122,195,7,112,148,66,174,216,136,65,0,0,122,195,0,64,156,66,68,105,138,65,0,0,122,195,7,16,164,66,172,139,149,65,0,0,122,195,0,224,171,66,16,233,148,65,0,0,122,195,7,176,179,66,69,88,144,65,0,0,122,195,0,128,187,66,16,88,146,65,0,0,122,195,7,80,195,66,57,69,148,65,0,0,122,195,66,32,203,66,41,109,150,65,0,0,122,195,33,240,210,66,45,161,177,65,0,0,122,195,0,192,218,66,236,81,192,65,0,0,122,195,223,143,226,66,33,176,197,65,0,0,122,195,66,96,234,66,165,61,194,65,0,0,122,195,33,48,242,66,115,215,184,65,0,0,122,195,0,0,250,66,167,232,175,65,0,0,122,195,240,231,0,67,39,32,170,65,0,0,122,195,33,208,4,67,140,74,156,65,0,0,122,195,16,184,8,67,239,56,148,65,0,0,122,195,0,160,12,67,138,176,127,65,0,0,122,195,240,135,16,67,36,185,109,65,0,0,122,195,33,112,20,67,254,212,85,65,0,0,122,195,16,88,24,67,99,238,76,65,0,0,122,195,0,64,28,67,4,231,85,65,0,0,122,195,240,39,32,67,28,235,75,65,0,0,122,195,33,16,36,67,214,197,49,65,0,0,122,195,16,248,39,67,59,153,25,65,0,0,122,195,0,224,43,67,208,39,14,65,0,0,122,195,240,199,47,67,224,62,6,65,0,0,122,195,33,176,51,67,84,82,253,64,0,0,122,195,16,152,55,67,119,45,237,64,0,0,122,195,0,128,59,67,225,98,223,64,0,0,122,195,240,103,63,67,93,167,230,64,0,0,122,195,33,80,67,67,41,92,198,64,0,0,122,195,16,56,71,67,161,214,129,64,0,0,122,195,0,32,75,67,56,21,149,64,0,0,122,195,240,7,79,67,1,135,112,64,0,0,122,195,33,240,82,67,237,153,133,64,0,0,122,195,16,216,86,67,80,1,140,64,0,0,122,195,0,192,90,67,190,48,150,64,0,0,122,195,240,167,94,67,149,14,188,64,0,0,122,195,33,144,98,67,237,13,201,64,0,0,122,195,16,120,102,67,205,204,230,64,0,0,122,195,0,96,106,67,96,229,241,64,0,0,122,195,240,71,110,67,23,14,254,64,0,0,122,195,33,48,114,67,30,249,29,65,0,0,122,195,16,24,118,67,253,135,57,65,0,0,122,195,0,0,122,67,3,120,85,65,0,0,122,195,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,128,0,0,0,129,0,2,0,129,0,0,0,129,0,2,0,130,0,4,0,130,0,2,0,130,0,4,0,131,0,6,0,131,0,4,0,131,0,6,0,132,0,8,0,132,0,6,0,132,0,8,0,133,0,10,0,133,0,8,0,133,0,10,0,134,0,12,0,134,0,10,0,134,0,12,0,135,0,14,0,135,0,12,0,135,0,14,0,136,0,16,0,136,0,14,0,136,0,16,0,137,0,18,0,137,0,16,0,137,0,18,0,138,0,20,0,138,0,18,0,138,0,20,0,139,0,22,0,139,0,20,0,139,0,22,0,140,0,24,0,140,0,22,0,140,0,24,0,141,0,26,0,141,0,24,0,141,0,26,0,142,0,28,0,142,0,26,0,142,0,28,0,143,0,30,0,143,0,28,0,143,0,30,0,144,0,32,0,144,0,30,0,144,0,32,0,145,0,34,0,145,0,32,0,145,0,34,0,146,0,36,0,146,0,34,0,146,0,36,0,147,0,38,0,147,0,36,0,147,0,38,0,148,0,40,0,148,0,38,0,148,0,40,0,149,0,42,0,149,0,40,0,149,0,42,0,150,0,44,0,150,0,42,0,150,0,44,0,151,0,46,0,151,0,44,0,151,0,46,0,152,0,48,0,152,0,46,0,152,0,48,0,153,0,50,0,153,0,48,0,153,0,50,0,154,0,52,0,154,0,50,0,154,0,52,0,155,0,54,0,155,0,52,0,155,0,54,0,156,0,56,0,156,0,54,0,156,0,56,0,157,0,58,0,157,0,56,0,157,0,58,0,158,0,60,0,158,0,58,0,158,0,60,0,159,0,62,0,159,0,60,0,159,0,62,0,160,0,64,0,160,0,62,0,160,0,64,0,161,0,66,0,161,0,64,0,161,0,66,0,162,0,68,0,162,0,66,0,162,0,68,0,163,0,70,0,163,0,68,0,163,0,70,0,164,0,72,0,164,0,70,0,164,0,72,0,165,0,74,0,165,0,72,0,165,0,74,0,166,0,76,0,166,0,74,0,166,0,76,0,167,0,78,0,167,0,76,0,167,0,78,0,168,0,80,0,168,0,78,0,168,0,80,0,169,0,82,0,169,0,80,0,169,0,82,0,170,0,84,0,170,0,82,0,170,0,84,0,171,0,86,0,171,0,84,0,171,0,86,0,172,0,88,0,172,0,86,0,172,0,88,0,173,0,90,0,173,0,88,0,173,0,90,0,174,0,92,0,174,0,90,0,174,0,92,0,175,0,94,0,175,0,92,0,175,0,94,0,176,0,96,0,176,0,94,0,176,0,96,0,177,0,98,0,177,0,96,0,177,0,98,0,178,0,100,0,178,0,98,0,178,0,100,0,179,0,102,0,179,0,100,0,179,0,102,0,180,0,104,0,180,0,102,0,180,0,104,0,181,0,106,0,181,0,104,0,181,0,106,0,182,0,108,0,182,0,106,0,182,0,108,0,183,0,110,0,183,0,108,0,183,0,110,0,184,0,112,0,184,0,110,0,184,0,112,0,185,0,114,0,185,0,112,0,185,0,114,0,186,0,116,0,186,0,114,0,186,0,116,0,187,0,118,0,187,0,116,0,187,0,118,0,188,0,120,0,188,0,118,0,188,0,120,0,189,0,122,0,189,0,120,0,189,0,122,0,190,0,124,0,190,0,122,0,190,0,124,0,191,0,126,0,191,0,124,0,192,0,128,0,193,0,129,0,193,0,128,0,193,0,129,0,194,0,130,0,194,0,129,0,194,0,130,0,195,0,131,0,195,0,130,0,195,0,131,0,196,0,132,0,196,0,131,0,196,0,132,0,197,0,133,0,197,0,132,0,197,0,133,0,198,0,134,0,198,0,133,0,198,0,134,0,199,0,135,0,199,0,134,0,199,0,135,0,200,0,136,0,200,0,135,0,200,0,136,0,201,0,137,0,201,0,136,0,201,0,137,0,202,0,138,0,202,0,137,0,202,0,138,0,203,0,139,0,203,0,138,0,203,0,139,0,204,0,140,0,204,0,139,0,204,0,140,0,205,0,141,0,205,0,140,0,205,0,141,0,206,0,142,0,206,0,141,0,206,0,142,0,207,0,143,0,207,0,142,0,207,0,143,0,208,0,144,0,208,0,143,0,208,0,144,0,209,0,145,0,209,0,144,0,209,0,145,0,210,0,146,0,210,0,145,0,210,0,146,0,211,0,147,0,211,0,146,0,211,0,147,0,212,0,148,0,212,0,147,0,212,0,148,0,213,0,149,0,213,0,148,0,213,0,149,0,214,0,150,0,214,0,149,0,214,0,150,0,215,0,151,0,215,0,150,0,215,0,151,0,216,0,152,0,216,0,151,0,216,0,152,0,217,0,153,0,217,0,152,0,217,0,153,0,218,0,154,0,218,0,153,0,218,0,154,0,219,0,155,0,219,0,154,0,219,0,155,0,220,0,156,0,220,0,155,0,220,0,156,0,221,0,157,0,221,0,156,0,221,0,157,0,222,0,158,0,222,0,157,0,222,0,158,0,223,0,159,0,223,0,158,0,223,0,159,0,224,0,160,0,224,0,159,0,224,0,160,0,225,0,161,0,225,0,160,0,225,0,161,0,226,0,162,0,226,0,161,0,226,0,162,0,227,0,163,0,227,0,162,0,227,0,163,0,228,0,164,0,228,0,163,0,228,0,164,0,229,0,165,0,229,0,164,0,229,0,165,0,230,0,166,0,230,0,165,0,230,0,166,0,231,0,167,0,231,0,166,0,231,0,167,0,232,0,168,0,232,0,167,0,232,0,168,0,233,0,169,0,233,0,168,0,233,0,169,0,234,0,170,0,234,0,169,0,234,0,170,0,235,0,171,0,235,0,170,0,235,0,171,0,236,0,172,0,236,0,171,0,236,0,172,0,237,0,173,0,237,0,172,0,237,0,173,0,238,0,174,0,238,0,173,0,238,0,174,0,239,0,175,0,239,0,174,0,239,0,175,0,240,0,176,0,240,0,175,0,240,0,176,0,241,0,177,0,241,0,176,0,241,0,177,0,242,0,178,0,242,0,177,0,242,0,178,0,243,0,179,0,243,0,178,0,243,0,179,0,244,0,180,0,244,0,179,0,244,0,180,0,245,0,181,0,245,0,180,0,245,0,181,0,246,0,182,0,246,0,181,0,246,0,182,0,247,0,183,0,247,0,182,0,247,0,183,0,248,0,184,0,248,0,183,0,248,0,184,0,249,0,185,0,249,0,184,0,249,0,185,0,250,0,186,0,250,0,185,0,250,0,186,0,251,0,187,0,251,0,186,0,251,0,187,0,252,0,188,0,252,0,187,0,252,0,188,0,253,0,189,0,253,0,188,0,253,0,189,0,254,0,190,0,254,0,189,0,254,0,190,0,255,0,191,0,255,0,190,0,0,1,192,0,1,1,193,0,1,1,192,0,1,1,193,0,2,1,194,0,2,1,193,0,2,1,194,0,3,1,195,0,3,1,194,0,3,1,195,0,4,1,196,0,4,1,195,0,4,1,196,0,5,1,197,0,5,1,196,0,5,1,197,0,6,1,198,0,6,1,197,0,6,1,198,0,7,1,199,0,7,1,198,0,7,1,199,0,8,1,200,0,8,1,199,0,8,1,200,0,9,1,201,0,9,1,200,0,9,1,201,0,10,1,202,0,10,1,201,0,10,1,202,0,11,1,203,0,11,1,202,0,11,1,203,0,12,1,204,0,12,1,203,0,12,1,204,0,13,1,205,0,13,1,204,0,13,1,205,0,14,1,206,0,14,1,205,0,14,1,206,0,15,1,207,0,15,1,206,0,15,1,207,0,16,1,208,0,16,1,207,0,16,1,208,0,17,1,209,0,17,1,208,0,17,1,209,0,18,1,210,0,18,1,209,0,18,1,210,0,19,1,211,0,19,1,210,0,19,1,211,0,20,1,212,0,20,1,211,0,20,1,212,0,21,1,213,0,21,1,212,0,21,1,213,0,22,1,214,0,22,1,213,0,22,1,214,0,23,1,215,0,23,1,214,0,23,1,215,0,24,1,216,0,24,1,215,0,24,1,216,0,25,1,217,0,25,1,216,0,25,1,217,0,26,1,218,0,26,1,217,0,26,1,218,0,27,1,219,0,27,1,218,0,27,1,219,0,28,1,220,0,28,1,219,0,28,1,220,0,29,1,221,0,29,1,220,0,29,1,221,0,30,1,222,0,30,1,221,0,30,1,222,0,31,1,223,0,31,1,222,0,31,1,223,0,32,1,224,0,32,1,223,0,32,1,224,0,33,1,225,0,33,1,224,0,33,1,225,0,34,1,226,0,34,1,225,0,34,1,226,0,35,1,227,0,35,1,226,0,35,1,227,0,36,1,228,0,36,1,227,0,36,1,228,0,37,1,229,0,37,1,228,0,37,1,229,0,38,1,230,0,38,1,229,0,38,1,230,0,39,1,231,0,39,1,230,0,39,1,231,0,40,1,232,0,40,1,231,0,40,1,232,0,41,1,233,0,41,1,232,0,41,1,233,0,42,1,234,0,42,1,233,0,42,1,234,0,43,1,235,0,43,1,234,0,43,1,235,0,44,1,236,0,44,1,235,0,44,1,236,0,45,1,237,0,45,1,236,0,45,1,237,0,46,1,238,0,46,1,237,0,46,1,238,0,47,1,239,0,47,1,238,0,47,1,239,0,48,1,240,0,48,1,239,0,48,1,240,0,49,1,241,0,49,1,240,0,49,1,241,0,50,1,242,0,50,1,241,0,50,1,242,0,51,1,243,0,51,1,242,0,51,1,243,0,52,1,244,0,52,1,243,0,52,1,244,0,53,1,245,0,53,1,244,0,53,1,245,0,54,1,246,0,54,1,245,0,54,1,246,0,55,1,247,0,55,1,246,0,55,1,247,0,56,1,248,0,56,1,247,0,56,1,248,0,57,1,249,0,57,1,248,0,57,1,249,0,58,1,250,0,58,1,249,0,58,1,250,0,59,1,251,0,59,1,250,0,59,1,251,0,60,1,252,0,60,1,251,0,60,1,252,0,61,1,253,0,61,1,252,0,61,1,253,0,62,1,254,0,62,1,253,0,62,1,254,0,63,1,255,0,63,1,254,0,64,1,0,1,65,1,1,1,65,1,0,1,65,1,1,1,66,1,2,1,66,1,1,1,66,1,2,1,67,1,3,1,67,1,2,1,67,1,3,1,68,1,4,1,68,1,3,1,68,1,4,1,69,1,5,1,69,1,4,1,69,1,5,1,70,1,6,1,70,1,5,1,70,1,6,1,71,1,7,1,71,1,6,1,71,1,7,1,72,1,8,1,72,1,7,1,72,1,8,1,73,1,9,1,73,1,8,1,73,1,9,1,74,1,10,1,74,1,9,1,74,1,10,1,75,1,11,1,75,1,10,1,75,1,11,1,76,1,12,1,76,1,11,1,76,1,12,1,77,1,13,1,77,1,12,1,77,1,13,1,78,1,14,1,78,1,13,1,78,1,14,1,79,1,15,1,79,1,14,1,79,1,15,1,80,1,16,1,80,1,15,1,80,1,16,1,81,1,17,1,81,1,16,1,81,1,17,1,82,1,18,1,82,1,17,1,82,1,18,1,83,1,19,1,83,1,18,1,83,1,19,1,84,1,20,1,84,1,19,1,84,1,20,1,85,1,21,1,85,1,20,1,85,1,21,1,86,1,22,1,86,1,21,1,86,1,22,1,87,1,23,1,87,1,22,1,87,1,23,1,88,1,24,1,88,1,23,1,88,1,24,1,89,1,25,1,89,1,24,1,89,1,25,1,90,1,26,1,90,1,25,1,90,1,26,1,91,1,27,1,91,1,26,1,91,1,27,1,92,1,28,1,92,1,27,1,92,1,28,1,93,1,29,1,93,1,28,1,93,1,29,1,94,1,30,1,94,1,29,1,94,1,30,1,95,1,31,1,95,1,30,1,95,1,31,1,96,1,32,1,96,1,31,1,96,1,32,1,97,1,33,1,97,1,32,1,97,1,33,1,98,1,34,1,98,1,33,1,98,1,34,1,99,1,35,1,99,1,34,1,99,1,35,1,100,1,36,1,100,1,35,1,100,1,36,1,101,1,37,1,101,1,36,1,101,1,37,1,102,1,38,1,102,1,37,1,102,1,38,1,103,1,39,1,103,1,38,1,103,1,39,1,104,1,40,1,104,1,39,1,104,1,40,1,105,1,41,1,105,1,40,1,105,1,41,1,106,1,42,1,106,1,41,1,106,1,42,1,107,1,43,1,107,1,42,1,107,1,43,1,108,1,44,1,108,1,43,1,108,1,44,1,109,1,45,1,109,1,44,1,109,1,45,1,110,1,46,1,110,1,45,1,110,1,46,1,111,1,47,1,111,1,46,1,111,1,47,1,112,1,48,1,112,1,47,1,112,1,48,1,113,1,49,1,113,1,48,1,113,1,49,1,114,1,50,1,114,1,49,1,114,1,50,1,115,1,51,1,115,1,50,1,115,1,51,1,116,1,52,1,116,1,51,1,116,1,52,1,117,1,53,1,117,1,52,1,117,1,53,1,118,1,54,1,118,1,53,1,118,1,54,1,119,1,55,1,119,1,54,1,119,1,55,1,120,1,56,1,120,1,55,1,120,1,56,1,121,1,57,1,121,1,56,1,121,1,57,1,122,1,58,1,122,1,57,1,122,1,58,1,123,1,59,1,123,1,58,1,123,1,59,1,124,1,60,1,124,1,59,1,124,1,60,1,125,1,61,1,125,1,60,1,125,1,61,1,126,1,62,1,126,1,61,1,126,1,62,1,127,1,63,1,127,1,62,1,128,1,64,1,129,1,65,1,129,1,64,1,129,1,65,1,130,1,66,1,130,1,65,1,130,1,66,1,131,1,67,1,131,1,66,1,131,1,67,1,132,1,68,1,132,1,67,1,132,1,68,1,133,1,69,1,133,1,68,1,133,1,69,1,134,1,70,1,134,1,69,1,134,1,70,1,135,1,71,1,135,1,70,1,135,1,71,1,136,1,72,1,136,1,71,1,136,1,72,1,137,1,73,1,137,1,72,1,137,1,73,1,138,1,74,1,138,1,73,1,138,1,74,1,139,1,75,1,139,1,74,1,139,1,75,1,140,1,76,1,140,1,75,1,140,1,76,1,141,1,77,1,141,1,76,1,141,1,77,1,142,1,78,1,142,1,77,1,142,1,78,1,143,1,79,1,143,1,78,1,143,1,79,1,144,1,80,1,144,1,79,1,144,1,80,1,145,1,81,1,145,1,80,1,145,1,81,1,146,1,82,1,146,1,81,1,146,1,82,1,147,1,83,1,147,1,82,1,147,1,83,1,148,1,84,1,148,1,83,1,148,1,84,1,149,1,85,1,149,1,84,1,149,1,85,1,150,1,86,1,150,1,85,1,150,1,86,1,151,1,87,1,151,1,86,1,151,1,87,1,152,1,88,1,152,1,87,1,152,1,88,1,153,1,89,1,153,1,88,1,153,1,89,1,154,1,90,1,154,1,89,1,154,1,90,1,155,1,91,1,155,1,90,1,155,1,91,1,156,1,92,1,156,1,91,1,156,1,92,1,157,1,93,1,157,1,92,1,157,1,93,1,158,1,94,1,158,1,93,1,158,1,94,1,159,1,95,1,159,1,94,1,159,1,95,1,160,1,96,1,160,1,95,1,160,1,96,1,161,1,97,1,161,1,96,1,161,1,97,1,162,1,98,1,162,1,97,1,162,1,98,1,163,1,99,1,163,1,98,1,163,1,99,1,164,1,100,1,164,1,99,1,164,1,100,1,165,1,101,1,165,1,100,1,165,1,101,1,166,1,102,1,166,1,101,1,166,1,102,1,167,1,103,1,167,1,102,1,167,1,103,1,168,1,104,1,168,1,103,1,168,1,104,1,169,1,105,1,169,1,104,1,169,1,105,1,170,1,106,1,170,1,105,1,170,1,106,1,171,1,107,1,171,1,106,1,171,1,107,1,172,1,108,1,172,1,107,1,172,1,108,1,173,1,109,1,173,1,108,1,173,1,109,1,174,1,110,1,174,1,109,1,174,1,110,1,175,1,111,1,175,1,110,1,175,1,111,1,176,1,112,1,176,1,111,1,176,1,112,1,177,1,113,1,177,1,112,1,177,1,113,1,178,1,114,1,178,1,113,1,178,1,114,1,179,1,115,1,179,1,114,1,179,1,115,1,180,1,116,1,180,1,115,1,180,1,116,1,181,1,117,1,181,1,116,1,181,1,117,1,182,1,118,1,182,1,117,1,182,1,118,1,183,1,119,1,183,1,118,1,183,1,119,1,184,1,120,1,184,1,119,1,184,1,120,1,185,1,121,1,185,1,120,1,185,1,121,1,186,1,122,1,186,1,121,1,186,1,122,1,187,1,123,1,187,1,122,1,187,1,123,1,188,1,124,1,188,1,123,1,188,1,124,1,189,1,125,1,189,1,124,1,189,1,125,1,190,1,126,1,190,1,125,1,190,1,126,1,191,1,127,1,191,1,126,1,192,1,128,1,193,1,129,1,193,1,128,1,193,1,129,1,194,1,130,1,194,1,129,1,194,1,130,1,195,1,131,1,195,1,130,1,195,1,131,1,196,1,132,1,196,1,131,1,196,1,132,1,197,1,133,1,197,1,132,1,197,1,133,1,198,1,134,1,198,1,133,1,198,1,134,1,199,1,135,1,199,1,134,1,199,1,135,1,200,1,136,1,200,1,135,1,200,1,136,1,201,1,137,1,201,1,136,1,201,1,137,1,202,1,138,1,202,1,137,1,202,1,138,1,203,1,139,1,203,1,138,1,203,1,139,1,204,1,140,1,204,1,139,1,204,1,140,1,205,1,141,1,205,1,140,1,205,1,141,1,206,1,142,1,206,1,141,1,206,1,142,1,207,1,143,1,207,1,142,1,207,1,143,1,208,1,144,1,208,1,143,1,208,1,144,1,209,1,145,1,209,1,144,1,209,1,145,1,210,1,146,1,210,1,145,1,210,1,146,1,211,1,147,1,211,1,146,1,211,1,147,1,212,1,148,1,212,1,147,1,212,1,148,1,213,1,149,1,213,1,148,1,213,1,149,1,214,1,150,1,214,1,149,1,214,1,150,1,215,1,151,1,215,1,150,1,215,1,151,1,216,1,152,1,216,1,151,1,216,1,152,1,217,1,153,1,217,1,152,1,217,1,153,1,218,1,154,1,218,1,153,1,218,1,154,1,219,1,155,1,219,1,154,1,219,1,155,1,220,1,156,1,220,1,155,1,220,1,156,1,221,1,157,1,221,1,156,1,221,1,157,1,222,1,158,1,222,1,157,1,222,1,158,1,223,1,159,1,223,1,158,1,223,1,159,1,224,1,160,1,224,1,159,1,224,1,160,1,225,1,161,1,225,1,160,1,225,1,161,1,226,1,162,1,226,1,161,1,226,1,162,1,227,1,163,1,227,1,162,1,227,1,163,1,228,1,164,1,228,1,163,1,228,1,164,1,229,1,165,1,229,1,164,1,229,1,165,1,230,1,166,1,230,1,165,1,230,1,166,1,231,1,167,1,231,1,166,1,231,1,167,1,232,1,168,1,232,1,167,1,232,1,168,1,233,1,169,1,233,1,168,1,233,1,169,1,234,1,170,1,234,1,169,1,234,1,170,1,235,1,171,1,235,1,170,1,235,1,171,1,236,1,172,1,236,1,171,1,236,1,172,1,237,1,173,1,237,1,172,1,237,1,173,1,238,1,174,1,238,1,173,1,238,1,174,1,239,1,175,1,239,1,174,1,239,1,175,1,240,1,176,1,240,1,175,1,240,1,176,1,241,1,177,1,241,1,176,1,241,1,177,1,242,1,178,1,242,1,177,1,242,1,178,1,243,1,179,1,243,1,178,1,243,1,179,1,244,1,180,1,244,1,179,1,244,1,180,1,245,1,181,1,245,1,180,1,245,1,181,1,246,1,182,1,246,1,181,1,246,1,182,1,247,1,183,1,247,1,182,1,247,1,183,1,248,1,184,1,248,1,183,1,248,1,184,1,249,1,185,1,249,1,184,1,249,1,185,1,250,1,186,1,250,1,185,1,250,1,186,1,251,1,187,1,251,1,186,1,251,1,187,1,252,1,188,1,252,1,187,1,252,1,188,1,253,1,189,1,253,1,188,1,253,1,189,1,254,1,190,1,254,1,189,1,254,1,190,1,255,1,191,1,255,1,190,1,0,2,192,1,1,2,193,1,1,2,192,1,1,2,193,1,2,2,194,1,2,2,193,1,2,2,194,1,3,2,195,1,3,2,194,1,3,2,195,1,4,2,196,1,4,2,195,1,4,2,196,1,5,2,197,1,5,2,196,1,5,2,197,1,6,2,198,1,6,2,197,1,6,2,198,1,7,2,199,1,7,2,198,1,7,2,199,1,8,2,200,1,8,2,199,1,8,2,200,1,9,2,201,1,9,2,200,1,9,2,201,1,10,2,202,1,10,2,201,1,10,2,202,1,11,2,203,1,11,2,202,1,11,2,203,1,12,2,204,1,12,2,203,1,12,2,204,1,13,2,205,1,13,2,204,1,13,2,205,1,14,2,206,1,14,2,205,1,14,2,206,1,15,2,207,1,15,2,206,1,15,2,207,1,16,2,208,1,16,2,207,1,16,2,208,1,17,2,209,1,17,2,208,1,17,2,209,1,18,2,210,1,18,2,209,1,18,2,210,1,19,2,211,1,19,2,210,1,19,2,211,1,20,2,212,1,20,2,211,1,20,2,212,1,21,2,213,1,21,2,212,1,21,2,213,1,22,2,214,1,22,2,213,1,22,2,214,1,23,2,215,1,23,2,214,1,23,2,215,1,24,2,216,1,24,2,215,1,24,2,216,1,25,2,217,1,25,2,216,1,25,2,217,1,26,2,218,1,26,2,217,1,26,2,218,1,27,2,219,1,27,2,218,1,27,2,219,1,28,2,220,1,28,2,219,1,28,2,220,1,29,2,221,1,29,2,220,1,29,2,221,1,30,2,222,1,30,2,221,1,30,2,222,1,31,2,223,1,31,2,222,1,31,2,223,1,32,2,224,1,32,2,223,1,32,2,224,1,33,2,225,1,33,2,224,1,33,2,225,1,34,2,226,1,34,2,225,1,34,2,226,1,35,2,227,1,35,2,226,1,35,2,227,1,36,2,228,1,36,2,227,1,36,2,228,1,37,2,229,1,37,2,228,1,37,2,229,1,38,2,230,1,38,2,229,1,38,2,230,1,39,2,231,1,39,2,230,1,39,2,231,1,40,2,232,1,40,2,231,1,40,2,232,1,41,2,233,1,41,2,232,1,41,2,233,1,42,2,234,1,42,2,233,1,42,2,234,1,43,2,235,1,43,2,234,1,43,2,235,1,44,2,236,1,44,2,235,1,44,2,236,1,45,2,237,1,45,2,236,1,45,2,237,1,46,2,238,1,46,2,237,1,46,2,238,1,47,2,239,1,47,2,238,1,47,2,239,1,48,2,240,1,48,2,239,1,48,2,240,1,49,2,241,1,49,2,240,1,49,2,241,1,50,2,242,1,50,2,241,1,50,2,242,1,51,2,243,1,51,2,242,1,51,2,243,1,52,2,244,1,52,2,243,1,52,2,244,1,53,2,245,1,53,2,244,1,53,2,245,1,54,2,246,1,54,2,245,1,54,2,246,1,55,2,247,1,55,2,246,1,55,2,247,1,56,2,248,1,56,2,247,1,56,2,248,1,57,2,249,1,57,2,248,1,57,2,249,1,58,2,250,1,58,2,249,1,58,2,250,1,59,2,251,1,59,2,250,1,59,2,251,1,60,2,252,1,60,2,251,1,60,2,252,1,61,2,253,1,61,2,252,1,61,2,253,1,62,2,254,1,62,2,253,1,62,2,254,1,63,2,255,1,63,2,254,1,64,2,0,2,65,2,1,2,65,2,0,2,65,2,1,2,66,2,2,2,66,2,1,2,66,2,2,2,67,2,3,2,67,2,2,2,67,2,3,2,68,2,4,2,68,2,3,2,68,2,4,2,69,2,5,2,69,2,4,2,69,2,5,2,70,2,6,2,70,2,5,2,70,2,6,2,71,2,7,2,71,2,6,2,71,2,7,2,72,2,8,2,72,2,7,2,72,2,8,2,73,2,9,2,73,2,8,2,73,2,9,2,74,2,10,2,74,2,9,2,74,2,10,2,75,2,11,2,75,2,10,2,75,2,11,2,76,2,12,2,76,2,11,2,76,2,12,2,77,2,13,2,77,2,12,2,77,2,13,2,78,2,14,2,78,2,13,2,78,2,14,2,79,2,15,2,79,2,14,2,79,2,15,2,80,2,16,2,80,2,15,2,80,2,16,2,81,2,17,2,81,2,16,2,81,2,17,2,82,2,18,2,82,2,17,2,82,2,18,2,83,2,19,2,83,2,18,2,83,2,19,2,84,2,20,2,84,2,19,2,84,2,20,2,85,2,21,2,85,2,20,2,85,2,21,2,86,2,22,2,86,2,21,2,86,2,22,2,87,2,23,2,87,2,22,2,87,2,23,2,88,2,24,2,88,2,23,2,88,2,24,2,89,2,25,2,89,2,24,2,89,2,25,2,90,2,26,2,90,2,25,2,90,2,26,2,91,2,27,2,91,2,26,2,91,2,27,2,92,2,28,2,92,2,27,2,92,2,28,2,93,2,29,2,93,2,28,2,93,2,29,2,94,2,30,2,94,2,29,2,94,2,30,2,95,2,31,2,95,2,30,2,95,2,31,2,96,2,32,2,96,2,31,2,96,2,32,2,97,2,33,2,97,2,32,2,97,2,33,2,98,2,34,2,98,2,33,2,98,2,34,2,99,2,35,2,99,2,34,2,99,2,35,2,100,2,36,2,100,2,35,2,100,2,36,2,101,2,37,2,101,2,36,2,101,2,37,2,102,2,38,2,102,2,37,2,102,2,38,2,103,2,39,2,103,2,38,2,103,2,39,2,104,2,40,2,104,2,39,2,104,2,40,2,105,2,41,2,105,2,40,2,105,2,41,2,106,2,42,2,106,2,41,2,106,2,42,2,107,2,43,2,107,2,42,2,107,2,43,2,108,2,44,2,108,2,43,2,108,2,44,2,109,2,45,2,109,2,44,2,109,2,45,2,110,2,46,2,110,2,45,2,110,2,46,2,111,2,47,2,111,2,46,2,111,2,47,2,112,2,48,2,112,2,47,2,112,2,48,2,113,2,49,2,113,2,48,2,113,2,49,2,114,2,50,2,114,2,49,2,114,2,50,2,115,2,51,2,115,2,50,2,115,2,51,2,116,2,52,2,116,2,51,2,116,2,52,2,117,2,53,2,117,2,52,2,117,2,53,2,118,2,54,2,118,2,53,2,118,2,54,2,119,2,55,2,119,2,54,2,119,2,55,2,120,2,56,2,120,2,55,2,120,2,56,2,121,2,57,2,121,2,56,2,121,2,57,2,122,2,58,2,122,2,57,2,122,2,58,2,123,2,59,2,123,2,58,2,123,2,59,2,124,2,60,2,124,2,59,2,124,2,60,2,125,2,61,2,125,2,60,2,125,2,61,2,126,2,62,2,126,2,61,2,126,2,62,2,127,2,63,2,127,2,62,2,128,2,64,2,129,2,65,2,129,2,64,2,129,2,65,2,130,2,66,2,130,2,65,2,130,2,66,2,131,2,67,2,131,2,66,2,131,2,67,2,132,2,68,2,132,2,67,2,132,2,68,2,133,2,69,2,133,2,68,2,133,2,69,2,134,2,70,2,134,2,69,2,134,2,70,2,135,2,71,2,135,2,70,2,135,2,71,2,136,2,72,2,136,2,71,2,136,2,72,2,137,2,73,2,137,2,72,2,137,2,73,2,138,2,74,2,138,2,73,2,138,2,74,2,139,2,75,2,139,2,74,2,139,2,75,2,140,2,76,2,140,2,75,2,140,2,76,2,141,2,77,2,141,2,76,2,141,2,77,2,142,2,78,2,142,2,77,2,142,2,78,2,143,2,79,2,143,2,78,2,143,2,79,2,144,2,80,2,144,2,79,2,144,2,80,2,145,2,81,2,145,2,80,2,145,2,81,2,146,2,82,2,146,2,81,2,146,2,82,2,147,2,83,2,147,2,82,2,147,2,83,2,148,2,84,2,148,2,83,2,148,2,84,2,149,2,85,2,149,2,84,2,149,2,85,2,150,2,86,2,150,2,85,2,150,2,86,2,151,2,87,2,151,2,86,2,151,2,87,2,152,2,88,2,152,2,87,2,152,2,88,2,153,2,89,2,153,2,88,2,153,2,89,2,154,2,90,2,154,2,89,2,154,2,90,2,155,2,91,2,155,2,90,2,155,2,91,2,156,2,92,2,156,2,91,2,156,2,92,2,157,2,93,2,157,2,92,2,157,2,93,2,158,2,94,2,158,2,93,2,158,2,94,2,159,2,95,2,159,2,94,2,159,2,95,2,160,2,96,2,160,2,95,2,160,2,96,2,161,2,97,2,161,2,96,2,161,2,97,2,162,2,98,2,162,2,97,2,162,2,98,2,163,2,99,2,163,2,98,2,163,2,99,2,164,2,100,2,164,2,99,2,164,2,100,2,165,2,101,2,165,2,100,2,165,2,101,2,166,2,102,2,166,2,101,2,166,2,102,2,167,2,103,2,167,2,102,2,167,2,103,2,168,2,104,2,168,2,103,2,168,2,104,2,169,2,105,2,169,2,104,2,169,2,105,2,170,2,106,2,170,2,105,2,170,2,106,2,171,2,107,2,171,2,106,2,171,2,107,2,172,2,108,2,172,2,107,2,172,2,108,2,173,2,109,2,173,2,108,2,173,2,109,2,174,2,110,2,174,2,109,2,174,2,110,2,175,2,111,2,175,2,110,2,175,2,111,2,176,2,112,2,176,2,111,2,176,2,112,2,177,2,113,2,177,2,112,2,177,2,113,2,178,2,114,2,178,2,113,2,178,2,114,2,179,2,115,2,179,2,114,2,179,2,115,2,180,2,116,2,180,2,115,2,180,2,116,2,181,2,117,2,181,2,116,2,181,2,117,2,182,2,118,2,182,2,117,2,182,2,118,2,183,2,119,2,183,2,118,2,183,2,119,2,184,2,120,2,184,2,119,2,184,2,120,2,185,2,121,2,185,2,120,2,185,2,121,2,186,2,122,2,186,2,121,2,186,2,122,2,187,2,123,2,187,2,122,2,187,2,123,2,188,2,124,2,188,2,123,2,188,2,124,2,189,2,125,2,189,2,124,2,189,2,125,2,190,2,126,2,190,2,125,2,190,2,126,2,191,2,127,2,191,2,126,2,192,2,128,2,193,2,129,2,193,2,128,2,193,2,129,2,194,2,130,2,194,2,129,2,194,2,130,2,195,2,131,2,195,2,130,2,195,2,131,2,196,2,132,2,196,2,131,2,196,2,132,2,197,2,133,2,197,2,132,2,197,2,133,2,198,2,134,2,198,2,133,2,198,2,134,2,199,2,135,2,199,2,134,2,199,2,135,2,200,2,136,2,200,2,135,2,200,2,136,2,201,2,137,2,201,2,136,2,201,2,137,2,202,2,138,2,202,2,137,2,202,2,138,2,203,2,139,2,203,2,138,2,203,2,139,2,204,2,140,2,204,2,139,2,204,2,140,2,205,2,141,2,205,2,140,2,205,2,141,2,206,2,142,2,206,2,141,2,206,2,142,2,207,2,143,2,207,2,142,2,207,2,143,2,208,2,144,2,208,2,143,2,208,2,144,2,209,2,145,2,209,2,144,2,209,2,145,2,210,2,146,2,210,2,145,2,210,2,146,2,211,2,147,2,211,2,146,2,211,2,147,2,212,2,148,2,212,2,147,2,212,2,148,2,213,2,149,2,213,2,148,2,213,2,149,2,214,2,150,2,214,2,149,2,214,2,150,2,215,2,151,2,215,2,150,2,215,2,151,2,216,2,152,2,216,2,151,2,216,2,152,2,217,2,153,2,217,2,152,2,217,2,153,2,218,2,154,2,218,2,153,2,218,2,154,2,219,2,155,2,219,2,154,2,219,2,155,2,220,2,156,2,220,2,155,2,220,2,156,2,221,2,157,2,221,2,156,2,221,2,157,2,222,2,158,2,222,2,157,2,222,2,158,2,223,2,159,2,223,2,158,2,223,2,159,2,224,2,160,2,224,2,159,2,224,2,160,2,225,2,161,2,225,2,160,2,225,2,161,2,226,2,162,2,226,2,161,2,226,2,162,2,227,2,163,2,227,2,162,2,227,2,163,2,228,2,164,2,228,2,163,2,228,2,164,2,229,2,165,2,229,2,164,2,229,2,165,2,230,2,166,2,230,2,165,2,230,2,166,2,231,2,167,2,231,2,166,2,231,2,167,2,232,2,168,2,232,2,167,2,232,2,168,2,233,2,169,2,233,2,168,2,233,2,169,2,234,2,170,2,234,2,169,2,234,2,170,2,235,2,171,2,235,2,170,2,235,2,171,2,236,2,172,2,236,2,171,2,236,2,172,2,237,2,173,2,237,2,172,2,237,2,173,2,238,2,174,2,238,2,173,2,238,2,174,2,239,2,175,2,239,2,174,2,239,2,175,2,240,2,176,2,240,2,175,2,240,2,176,2,241,2,177,2,241,2,176,2,241,2,177,2,242,2,178,2,242,2,177,2,242,2,178,2,243,2,179,2,243,2,178,2,243,2,179,2,244,2,180,2,244,2,179,2,244,2,180,2,245,2,181,2,245,2,180,2,245,2,181,2,246,2,182,2,246,2,181,2,246,2,182,2,247,2,183,2,247,2,182,2,247,2,183,2,248,2,184,2,248,2,183,2,248,2,184,2,249,2,185,2,249,2,184,2,249,2,185,2,250,2,186,2,250,2,185,2,250,2,186,2,251,2,187,2,251,2,186,2,251,2,187,2,252,2,188,2,252,2,187,2,252,2,188,2,253,2,189,2,253,2,188,2,253,2,189,2,254,2,190,2,254,2,189,2,254,2,190,2,255,2,191,2,255,2,190,2,0,3,192,2,1,3,193,2,1,3,192,2,1,3,193,2,2,3,194,2,2,3,193,2,2,3,194,2,3,3,195,2,3,3,194,2,3,3,195,2,4,3,196,2,4,3,195,2,4,3,196,2,5,3,197,2,5,3,196,2,5,3,197,2,6,3,198,2,6,3,197,2,6,3,198,2,7,3,199,2,7,3,198,2,7,3,199,2,8,3,200,2,8,3,199,2,8,3,200,2,9,3,201,2,9,3,200,2,9,3,201,2,10,3,202,2,10,3,201,2,10,3,202,2,11,3,203,2,11,3,202,2,11,3,203,2,12,3,204,2,12,3,203,2,12,3,204,2,13,3,205,2,13,3,204,2,13,3,205,2,14,3,206,2,14,3,205,2,14,3,206,2,15,3,207,2,15,3,206,2,15,3,207,2,16,3,208,2,16,3,207,2,16,3,208,2,17,3,209,2,17,3,208,2,17,3,209,2,18,3,210,2,18,3,209,2,18,3,210,2,19,3,211,2,19,3,210,2,19,3,211,2,20,3,212,2,20,3,211,2,20,3,212,2,21,3,213,2,21,3,212,2,21,3,213,2,22,3,214,2,22,3,213,2,22,3,214,2,23,3,215,2,23,3,214,2,23,3,215,2,24,3,216,2,24,3,215,2,24,3,216,2,25,3,217,2,25,3,216,2,25,3,217,2,26,3,218,2,26,3,217,2,26,3,218,2,27,3,219,2,27,3,218,2,27,3,219,2,28,3,220,2,28,3,219,2,28,3,220,2,29,3,221,2,29,3,220,2,29,3,221,2,30,3,222,2,30,3,221,2,30,3,222,2,31,3,223,2,31,3,222,2,31,3,223,2,32,3,224,2,32,3,223,2,32,3,224,2,33,3,225,2,33,3,224,2,33,3,225,2,34,3,226,2,34,3,225,2,34,3,226,2,35,3,227,2,35,3,226,2,35,3,227,2,36,3,228,2,36,3,227,2,36,3,228,2,37,3,229,2,37,3,228,2,37,3,229,2,38,3,230,2,38,3,229,2,38,3,230,2,39,3,231,2,39,3,230,2,39,3,231,2,40,3,232,2,40,3,231,2,40,3,232,2,41,3,233,2,41,3,232,2,41,3,233,2,42,3,234,2,42,3,233,2,42,3,234,2,43,3,235,2,43,3,234,2,43,3,235,2,44,3,236,2,44,3,235,2,44,3,236,2,45,3,237,2,45,3,236,2,45,3,237,2,46,3,238,2,46,3,237,2,46,3,238,2,47,3,239,2,47,3,238,2,47,3,239,2,48,3,240,2,48,3,239,2,48,3,240,2,49,3,241,2,49,3,240,2,49,3,241,2,50,3,242,2,50,3,241,2,50,3,242,2,51,3,243,2,51,3,242,2,51,3,243,2,52,3,244,2,52,3,243,2,52,3,244,2,53,3,245,2,53,3,244,2,53,3,245,2,54,3,246,2,54,3,245,2,54,3,246,2,55,3,247,2,55,3,246,2,55,3,247,2,56,3,248,2,56,3,247,2,56,3,248,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+276480);
/* memory initializer */ allocate([57,3,249,2,57,3,248,2,57,3,249,2,58,3,250,2,58,3,249,2,58,3,250,2,59,3,251,2,59,3,250,2,59,3,251,2,60,3,252,2,60,3,251,2,60,3,252,2,61,3,253,2,61,3,252,2,61,3,253,2,62,3,254,2,62,3,253,2,62,3,254,2,63,3,255,2,63,3,254,2,64,3,0,3,65,3,1,3,65,3,0,3,65,3,1,3,66,3,2,3,66,3,1,3,66,3,2,3,67,3,3,3,67,3,2,3,67,3,3,3,68,3,4,3,68,3,3,3,68,3,4,3,69,3,5,3,69,3,4,3,69,3,5,3,70,3,6,3,70,3,5,3,70,3,6,3,71,3,7,3,71,3,6,3,71,3,7,3,72,3,8,3,72,3,7,3,72,3,8,3,73,3,9,3,73,3,8,3,73,3,9,3,74,3,10,3,74,3,9,3,74,3,10,3,75,3,11,3,75,3,10,3,75,3,11,3,76,3,12,3,76,3,11,3,76,3,12,3,77,3,13,3,77,3,12,3,77,3,13,3,78,3,14,3,78,3,13,3,78,3,14,3,79,3,15,3,79,3,14,3,79,3,15,3,80,3,16,3,80,3,15,3,80,3,16,3,81,3,17,3,81,3,16,3,81,3,17,3,82,3,18,3,82,3,17,3,82,3,18,3,83,3,19,3,83,3,18,3,83,3,19,3,84,3,20,3,84,3,19,3,84,3,20,3,85,3,21,3,85,3,20,3,85,3,21,3,86,3,22,3,86,3,21,3,86,3,22,3,87,3,23,3,87,3,22,3,87,3,23,3,88,3,24,3,88,3,23,3,88,3,24,3,89,3,25,3,89,3,24,3,89,3,25,3,90,3,26,3,90,3,25,3,90,3,26,3,91,3,27,3,91,3,26,3,91,3,27,3,92,3,28,3,92,3,27,3,92,3,28,3,93,3,29,3,93,3,28,3,93,3,29,3,94,3,30,3,94,3,29,3,94,3,30,3,95,3,31,3,95,3,30,3,95,3,31,3,96,3,32,3,96,3,31,3,96,3,32,3,97,3,33,3,97,3,32,3,97,3,33,3,98,3,34,3,98,3,33,3,98,3,34,3,99,3,35,3,99,3,34,3,99,3,35,3,100,3,36,3,100,3,35,3,100,3,36,3,101,3,37,3,101,3,36,3,101,3,37,3,102,3,38,3,102,3,37,3,102,3,38,3,103,3,39,3,103,3,38,3,103,3,39,3,104,3,40,3,104,3,39,3,104,3,40,3,105,3,41,3,105,3,40,3,105,3,41,3,106,3,42,3,106,3,41,3,106,3,42,3,107,3,43,3,107,3,42,3,107,3,43,3,108,3,44,3,108,3,43,3,108,3,44,3,109,3,45,3,109,3,44,3,109,3,45,3,110,3,46,3,110,3,45,3,110,3,46,3,111,3,47,3,111,3,46,3,111,3,47,3,112,3,48,3,112,3,47,3,112,3,48,3,113,3,49,3,113,3,48,3,113,3,49,3,114,3,50,3,114,3,49,3,114,3,50,3,115,3,51,3,115,3,50,3,115,3,51,3,116,3,52,3,116,3,51,3,116,3,52,3,117,3,53,3,117,3,52,3,117,3,53,3,118,3,54,3,118,3,53,3,118,3,54,3,119,3,55,3,119,3,54,3,119,3,55,3,120,3,56,3,120,3,55,3,120,3,56,3,121,3,57,3,121,3,56,3,121,3,57,3,122,3,58,3,122,3,57,3,122,3,58,3,123,3,59,3,123,3,58,3,123,3,59,3,124,3,60,3,124,3,59,3,124,3,60,3,125,3,61,3,125,3,60,3,125,3,61,3,126,3,62,3,126,3,61,3,126,3,62,3,127,3,63,3,127,3,62,3,128,3,64,3,129,3,65,3,129,3,64,3,129,3,65,3,130,3,66,3,130,3,65,3,130,3,66,3,131,3,67,3,131,3,66,3,131,3,67,3,132,3,68,3,132,3,67,3,132,3,68,3,133,3,69,3,133,3,68,3,133,3,69,3,134,3,70,3,134,3,69,3,134,3,70,3,135,3,71,3,135,3,70,3,135,3,71,3,136,3,72,3,136,3,71,3,136,3,72,3,137,3,73,3,137,3,72,3,137,3,73,3,138,3,74,3,138,3,73,3,138,3,74,3,139,3,75,3,139,3,74,3,139,3,75,3,140,3,76,3,140,3,75,3,140,3,76,3,141,3,77,3,141,3,76,3,141,3,77,3,142,3,78,3,142,3,77,3,142,3,78,3,143,3,79,3,143,3,78,3,143,3,79,3,144,3,80,3,144,3,79,3,144,3,80,3,145,3,81,3,145,3,80,3,145,3,81,3,146,3,82,3,146,3,81,3,146,3,82,3,147,3,83,3,147,3,82,3,147,3,83,3,148,3,84,3,148,3,83,3,148,3,84,3,149,3,85,3,149,3,84,3,149,3,85,3,150,3,86,3,150,3,85,3,150,3,86,3,151,3,87,3,151,3,86,3,151,3,87,3,152,3,88,3,152,3,87,3,152,3,88,3,153,3,89,3,153,3,88,3,153,3,89,3,154,3,90,3,154,3,89,3,154,3,90,3,155,3,91,3,155,3,90,3,155,3,91,3,156,3,92,3,156,3,91,3,156,3,92,3,157,3,93,3,157,3,92,3,157,3,93,3,158,3,94,3,158,3,93,3,158,3,94,3,159,3,95,3,159,3,94,3,159,3,95,3,160,3,96,3,160,3,95,3,160,3,96,3,161,3,97,3,161,3,96,3,161,3,97,3,162,3,98,3,162,3,97,3,162,3,98,3,163,3,99,3,163,3,98,3,163,3,99,3,164,3,100,3,164,3,99,3,164,3,100,3,165,3,101,3,165,3,100,3,165,3,101,3,166,3,102,3,166,3,101,3,166,3,102,3,167,3,103,3,167,3,102,3,167,3,103,3,168,3,104,3,168,3,103,3,168,3,104,3,169,3,105,3,169,3,104,3,169,3,105,3,170,3,106,3,170,3,105,3,170,3,106,3,171,3,107,3,171,3,106,3,171,3,107,3,172,3,108,3,172,3,107,3,172,3,108,3,173,3,109,3,173,3,108,3,173,3,109,3,174,3,110,3,174,3,109,3,174,3,110,3,175,3,111,3,175,3,110,3,175,3,111,3,176,3,112,3,176,3,111,3,176,3,112,3,177,3,113,3,177,3,112,3,177,3,113,3,178,3,114,3,178,3,113,3,178,3,114,3,179,3,115,3,179,3,114,3,179,3,115,3,180,3,116,3,180,3,115,3,180,3,116,3,181,3,117,3,181,3,116,3,181,3,117,3,182,3,118,3,182,3,117,3,182,3,118,3,183,3,119,3,183,3,118,3,183,3,119,3,184,3,120,3,184,3,119,3,184,3,120,3,185,3,121,3,185,3,120,3,185,3,121,3,186,3,122,3,186,3,121,3,186,3,122,3,187,3,123,3,187,3,122,3,187,3,123,3,188,3,124,3,188,3,123,3,188,3,124,3,189,3,125,3,189,3,124,3,189,3,125,3,190,3,126,3,190,3,125,3,190,3,126,3,191,3,127,3,191,3,126,3,192,3,128,3,193,3,129,3,193,3,128,3,193,3,129,3,194,3,130,3,194,3,129,3,194,3,130,3,195,3,131,3,195,3,130,3,195,3,131,3,196,3,132,3,196,3,131,3,196,3,132,3,197,3,133,3,197,3,132,3,197,3,133,3,198,3,134,3,198,3,133,3,198,3,134,3,199,3,135,3,199,3,134,3,199,3,135,3,200,3,136,3,200,3,135,3,200,3,136,3,201,3,137,3,201,3,136,3,201,3,137,3,202,3,138,3,202,3,137,3,202,3,138,3,203,3,139,3,203,3,138,3,203,3,139,3,204,3,140,3,204,3,139,3,204,3,140,3,205,3,141,3,205,3,140,3,205,3,141,3,206,3,142,3,206,3,141,3,206,3,142,3,207,3,143,3,207,3,142,3,207,3,143,3,208,3,144,3,208,3,143,3,208,3,144,3,209,3,145,3,209,3,144,3,209,3,145,3,210,3,146,3,210,3,145,3,210,3,146,3,211,3,147,3,211,3,146,3,211,3,147,3,212,3,148,3,212,3,147,3,212,3,148,3,213,3,149,3,213,3,148,3,213,3,149,3,214,3,150,3,214,3,149,3,214,3,150,3,215,3,151,3,215,3,150,3,215,3,151,3,216,3,152,3,216,3,151,3,216,3,152,3,217,3,153,3,217,3,152,3,217,3,153,3,218,3,154,3,218,3,153,3,218,3,154,3,219,3,155,3,219,3,154,3,219,3,155,3,220,3,156,3,220,3,155,3,220,3,156,3,221,3,157,3,221,3,156,3,221,3,157,3,222,3,158,3,222,3,157,3,222,3,158,3,223,3,159,3,223,3,158,3,223,3,159,3,224,3,160,3,224,3,159,3,224,3,160,3,225,3,161,3,225,3,160,3,225,3,161,3,226,3,162,3,226,3,161,3,226,3,162,3,227,3,163,3,227,3,162,3,227,3,163,3,228,3,164,3,228,3,163,3,228,3,164,3,229,3,165,3,229,3,164,3,229,3,165,3,230,3,166,3,230,3,165,3,230,3,166,3,231,3,167,3,231,3,166,3,231,3,167,3,232,3,168,3,232,3,167,3,232,3,168,3,233,3,169,3,233,3,168,3,233,3,169,3,234,3,170,3,234,3,169,3,234,3,170,3,235,3,171,3,235,3,170,3,235,3,171,3,236,3,172,3,236,3,171,3,236,3,172,3,237,3,173,3,237,3,172,3,237,3,173,3,238,3,174,3,238,3,173,3,238,3,174,3,239,3,175,3,239,3,174,3,239,3,175,3,240,3,176,3,240,3,175,3,240,3,176,3,241,3,177,3,241,3,176,3,241,3,177,3,242,3,178,3,242,3,177,3,242,3,178,3,243,3,179,3,243,3,178,3,243,3,179,3,244,3,180,3,244,3,179,3,244,3,180,3,245,3,181,3,245,3,180,3,245,3,181,3,246,3,182,3,246,3,181,3,246,3,182,3,247,3,183,3,247,3,182,3,247,3,183,3,248,3,184,3,248,3,183,3,248,3,184,3,249,3,185,3,249,3,184,3,249,3,185,3,250,3,186,3,250,3,185,3,250,3,186,3,251,3,187,3,251,3,186,3,251,3,187,3,252,3,188,3,252,3,187,3,252,3,188,3,253,3,189,3,253,3,188,3,253,3,189,3,254,3,190,3,254,3,189,3,254,3,190,3,255,3,191,3,255,3,190,3,0,4,192,3,1,4,193,3,1,4,192,3,1,4,193,3,2,4,194,3,2,4,193,3,2,4,194,3,3,4,195,3,3,4,194,3,3,4,195,3,4,4,196,3,4,4,195,3,4,4,196,3,5,4,197,3,5,4,196,3,5,4,197,3,6,4,198,3,6,4,197,3,6,4,198,3,7,4,199,3,7,4,198,3,7,4,199,3,8,4,200,3,8,4,199,3,8,4,200,3,9,4,201,3,9,4,200,3,9,4,201,3,10,4,202,3,10,4,201,3,10,4,202,3,11,4,203,3,11,4,202,3,11,4,203,3,12,4,204,3,12,4,203,3,12,4,204,3,13,4,205,3,13,4,204,3,13,4,205,3,14,4,206,3,14,4,205,3,14,4,206,3,15,4,207,3,15,4,206,3,15,4,207,3,16,4,208,3,16,4,207,3,16,4,208,3,17,4,209,3,17,4,208,3,17,4,209,3,18,4,210,3,18,4,209,3,18,4,210,3,19,4,211,3,19,4,210,3,19,4,211,3,20,4,212,3,20,4,211,3,20,4,212,3,21,4,213,3,21,4,212,3,21,4,213,3,22,4,214,3,22,4,213,3,22,4,214,3,23,4,215,3,23,4,214,3,23,4,215,3,24,4,216,3,24,4,215,3,24,4,216,3,25,4,217,3,25,4,216,3,25,4,217,3,26,4,218,3,26,4,217,3,26,4,218,3,27,4,219,3,27,4,218,3,27,4,219,3,28,4,220,3,28,4,219,3,28,4,220,3,29,4,221,3,29,4,220,3,29,4,221,3,30,4,222,3,30,4,221,3,30,4,222,3,31,4,223,3,31,4,222,3,31,4,223,3,32,4,224,3,32,4,223,3,32,4,224,3,33,4,225,3,33,4,224,3,33,4,225,3,34,4,226,3,34,4,225,3,34,4,226,3,35,4,227,3,35,4,226,3,35,4,227,3,36,4,228,3,36,4,227,3,36,4,228,3,37,4,229,3,37,4,228,3,37,4,229,3,38,4,230,3,38,4,229,3,38,4,230,3,39,4,231,3,39,4,230,3,39,4,231,3,40,4,232,3,40,4,231,3,40,4,232,3,41,4,233,3,41,4,232,3,41,4,233,3,42,4,234,3,42,4,233,3,42,4,234,3,43,4,235,3,43,4,234,3,43,4,235,3,44,4,236,3,44,4,235,3,44,4,236,3,45,4,237,3,45,4,236,3,45,4,237,3,46,4,238,3,46,4,237,3,46,4,238,3,47,4,239,3,47,4,238,3,47,4,239,3,48,4,240,3,48,4,239,3,48,4,240,3,49,4,241,3,49,4,240,3,49,4,241,3,50,4,242,3,50,4,241,3,50,4,242,3,51,4,243,3,51,4,242,3,51,4,243,3,52,4,244,3,52,4,243,3,52,4,244,3,53,4,245,3,53,4,244,3,53,4,245,3,54,4,246,3,54,4,245,3,54,4,246,3,55,4,247,3,55,4,246,3,55,4,247,3,56,4,248,3,56,4,247,3,56,4,248,3,57,4,249,3,57,4,248,3,57,4,249,3,58,4,250,3,58,4,249,3,58,4,250,3,59,4,251,3,59,4,250,3,59,4,251,3,60,4,252,3,60,4,251,3,60,4,252,3,61,4,253,3,61,4,252,3,61,4,253,3,62,4,254,3,62,4,253,3,62,4,254,3,63,4,255,3,63,4,254,3,64,4,0,4,65,4,1,4,65,4,0,4,65,4,1,4,66,4,2,4,66,4,1,4,66,4,2,4,67,4,3,4,67,4,2,4,67,4,3,4,68,4,4,4,68,4,3,4,68,4,4,4,69,4,5,4,69,4,4,4,69,4,5,4,70,4,6,4,70,4,5,4,70,4,6,4,71,4,7,4,71,4,6,4,71,4,7,4,72,4,8,4,72,4,7,4,72,4,8,4,73,4,9,4,73,4,8,4,73,4,9,4,74,4,10,4,74,4,9,4,74,4,10,4,75,4,11,4,75,4,10,4,75,4,11,4,76,4,12,4,76,4,11,4,76,4,12,4,77,4,13,4,77,4,12,4,77,4,13,4,78,4,14,4,78,4,13,4,78,4,14,4,79,4,15,4,79,4,14,4,79,4,15,4,80,4,16,4,80,4,15,4,80,4,16,4,81,4,17,4,81,4,16,4,81,4,17,4,82,4,18,4,82,4,17,4,82,4,18,4,83,4,19,4,83,4,18,4,83,4,19,4,84,4,20,4,84,4,19,4,84,4,20,4,85,4,21,4,85,4,20,4,85,4,21,4,86,4,22,4,86,4,21,4,86,4,22,4,87,4,23,4,87,4,22,4,87,4,23,4,88,4,24,4,88,4,23,4,88,4,24,4,89,4,25,4,89,4,24,4,89,4,25,4,90,4,26,4,90,4,25,4,90,4,26,4,91,4,27,4,91,4,26,4,91,4,27,4,92,4,28,4,92,4,27,4,92,4,28,4,93,4,29,4,93,4,28,4,93,4,29,4,94,4,30,4,94,4,29,4,94,4,30,4,95,4,31,4,95,4,30,4,95,4,31,4,96,4,32,4,96,4,31,4,96,4,32,4,97,4,33,4,97,4,32,4,97,4,33,4,98,4,34,4,98,4,33,4,98,4,34,4,99,4,35,4,99,4,34,4,99,4,35,4,100,4,36,4,100,4,35,4,100,4,36,4,101,4,37,4,101,4,36,4,101,4,37,4,102,4,38,4,102,4,37,4,102,4,38,4,103,4,39,4,103,4,38,4,103,4,39,4,104,4,40,4,104,4,39,4,104,4,40,4,105,4,41,4,105,4,40,4,105,4,41,4,106,4,42,4,106,4,41,4,106,4,42,4,107,4,43,4,107,4,42,4,107,4,43,4,108,4,44,4,108,4,43,4,108,4,44,4,109,4,45,4,109,4,44,4,109,4,45,4,110,4,46,4,110,4,45,4,110,4,46,4,111,4,47,4,111,4,46,4,111,4,47,4,112,4,48,4,112,4,47,4,112,4,48,4,113,4,49,4,113,4,48,4,113,4,49,4,114,4,50,4,114,4,49,4,114,4,50,4,115,4,51,4,115,4,50,4,115,4,51,4,116,4,52,4,116,4,51,4,116,4,52,4,117,4,53,4,117,4,52,4,117,4,53,4,118,4,54,4,118,4,53,4,118,4,54,4,119,4,55,4,119,4,54,4,119,4,55,4,120,4,56,4,120,4,55,4,120,4,56,4,121,4,57,4,121,4,56,4,121,4,57,4,122,4,58,4,122,4,57,4,122,4,58,4,123,4,59,4,123,4,58,4,123,4,59,4,124,4,60,4,124,4,59,4,124,4,60,4,125,4,61,4,125,4,60,4,125,4,61,4,126,4,62,4,126,4,61,4,126,4,62,4,127,4,63,4,127,4,62,4,128,4,64,4,129,4,65,4,129,4,64,4,129,4,65,4,130,4,66,4,130,4,65,4,130,4,66,4,131,4,67,4,131,4,66,4,131,4,67,4,132,4,68,4,132,4,67,4,132,4,68,4,133,4,69,4,133,4,68,4,133,4,69,4,134,4,70,4,134,4,69,4,134,4,70,4,135,4,71,4,135,4,70,4,135,4,71,4,136,4,72,4,136,4,71,4,136,4,72,4,137,4,73,4,137,4,72,4,137,4,73,4,138,4,74,4,138,4,73,4,138,4,74,4,139,4,75,4,139,4,74,4,139,4,75,4,140,4,76,4,140,4,75,4,140,4,76,4,141,4,77,4,141,4,76,4,141,4,77,4,142,4,78,4,142,4,77,4,142,4,78,4,143,4,79,4,143,4,78,4,143,4,79,4,144,4,80,4,144,4,79,4,144,4,80,4,145,4,81,4,145,4,80,4,145,4,81,4,146,4,82,4,146,4,81,4,146,4,82,4,147,4,83,4,147,4,82,4,147,4,83,4,148,4,84,4,148,4,83,4,148,4,84,4,149,4,85,4,149,4,84,4,149,4,85,4,150,4,86,4,150,4,85,4,150,4,86,4,151,4,87,4,151,4,86,4,151,4,87,4,152,4,88,4,152,4,87,4,152,4,88,4,153,4,89,4,153,4,88,4,153,4,89,4,154,4,90,4,154,4,89,4,154,4,90,4,155,4,91,4,155,4,90,4,155,4,91,4,156,4,92,4,156,4,91,4,156,4,92,4,157,4,93,4,157,4,92,4,157,4,93,4,158,4,94,4,158,4,93,4,158,4,94,4,159,4,95,4,159,4,94,4,159,4,95,4,160,4,96,4,160,4,95,4,160,4,96,4,161,4,97,4,161,4,96,4,161,4,97,4,162,4,98,4,162,4,97,4,162,4,98,4,163,4,99,4,163,4,98,4,163,4,99,4,164,4,100,4,164,4,99,4,164,4,100,4,165,4,101,4,165,4,100,4,165,4,101,4,166,4,102,4,166,4,101,4,166,4,102,4,167,4,103,4,167,4,102,4,167,4,103,4,168,4,104,4,168,4,103,4,168,4,104,4,169,4,105,4,169,4,104,4,169,4,105,4,170,4,106,4,170,4,105,4,170,4,106,4,171,4,107,4,171,4,106,4,171,4,107,4,172,4,108,4,172,4,107,4,172,4,108,4,173,4,109,4,173,4,108,4,173,4,109,4,174,4,110,4,174,4,109,4,174,4,110,4,175,4,111,4,175,4,110,4,175,4,111,4,176,4,112,4,176,4,111,4,176,4,112,4,177,4,113,4,177,4,112,4,177,4,113,4,178,4,114,4,178,4,113,4,178,4,114,4,179,4,115,4,179,4,114,4,179,4,115,4,180,4,116,4,180,4,115,4,180,4,116,4,181,4,117,4,181,4,116,4,181,4,117,4,182,4,118,4,182,4,117,4,182,4,118,4,183,4,119,4,183,4,118,4,183,4,119,4,184,4,120,4,184,4,119,4,184,4,120,4,185,4,121,4,185,4,120,4,185,4,121,4,186,4,122,4,186,4,121,4,186,4,122,4,187,4,123,4,187,4,122,4,187,4,123,4,188,4,124,4,188,4,123,4,188,4,124,4,189,4,125,4,189,4,124,4,189,4,125,4,190,4,126,4,190,4,125,4,190,4,126,4,191,4,127,4,191,4,126,4,192,4,128,4,193,4,129,4,193,4,128,4,193,4,129,4,194,4,130,4,194,4,129,4,194,4,130,4,195,4,131,4,195,4,130,4,195,4,131,4,196,4,132,4,196,4,131,4,196,4,132,4,197,4,133,4,197,4,132,4,197,4,133,4,198,4,134,4,198,4,133,4,198,4,134,4,199,4,135,4,199,4,134,4,199,4,135,4,200,4,136,4,200,4,135,4,200,4,136,4,201,4,137,4,201,4,136,4,201,4,137,4,202,4,138,4,202,4,137,4,202,4,138,4,203,4,139,4,203,4,138,4,203,4,139,4,204,4,140,4,204,4,139,4,204,4,140,4,205,4,141,4,205,4,140,4,205,4,141,4,206,4,142,4,206,4,141,4,206,4,142,4,207,4,143,4,207,4,142,4,207,4,143,4,208,4,144,4,208,4,143,4,208,4,144,4,209,4,145,4,209,4,144,4,209,4,145,4,210,4,146,4,210,4,145,4,210,4,146,4,211,4,147,4,211,4,146,4,211,4,147,4,212,4,148,4,212,4,147,4,212,4,148,4,213,4,149,4,213,4,148,4,213,4,149,4,214,4,150,4,214,4,149,4,214,4,150,4,215,4,151,4,215,4,150,4,215,4,151,4,216,4,152,4,216,4,151,4,216,4,152,4,217,4,153,4,217,4,152,4,217,4,153,4,218,4,154,4,218,4,153,4,218,4,154,4,219,4,155,4,219,4,154,4,219,4,155,4,220,4,156,4,220,4,155,4,220,4,156,4,221,4,157,4,221,4,156,4,221,4,157,4,222,4,158,4,222,4,157,4,222,4,158,4,223,4,159,4,223,4,158,4,223,4,159,4,224,4,160,4,224,4,159,4,224,4,160,4,225,4,161,4,225,4,160,4,225,4,161,4,226,4,162,4,226,4,161,4,226,4,162,4,227,4,163,4,227,4,162,4,227,4,163,4,228,4,164,4,228,4,163,4,228,4,164,4,229,4,165,4,229,4,164,4,229,4,165,4,230,4,166,4,230,4,165,4,230,4,166,4,231,4,167,4,231,4,166,4,231,4,167,4,232,4,168,4,232,4,167,4,232,4,168,4,233,4,169,4,233,4,168,4,233,4,169,4,234,4,170,4,234,4,169,4,234,4,170,4,235,4,171,4,235,4,170,4,235,4,171,4,236,4,172,4,236,4,171,4,236,4,172,4,237,4,173,4,237,4,172,4,237,4,173,4,238,4,174,4,238,4,173,4,238,4,174,4,239,4,175,4,239,4,174,4,239,4,175,4,240,4,176,4,240,4,175,4,240,4,176,4,241,4,177,4,241,4,176,4,241,4,177,4,242,4,178,4,242,4,177,4,242,4,178,4,243,4,179,4,243,4,178,4,243,4,179,4,244,4,180,4,244,4,179,4,244,4,180,4,245,4,181,4,245,4,180,4,245,4,181,4,246,4,182,4,246,4,181,4,246,4,182,4,247,4,183,4,247,4,182,4,247,4,183,4,248,4,184,4,248,4,183,4,248,4,184,4,249,4,185,4,249,4,184,4,249,4,185,4,250,4,186,4,250,4,185,4,250,4,186,4,251,4,187,4,251,4,186,4,251,4,187,4,252,4,188,4,252,4,187,4,252,4,188,4,253,4,189,4,253,4,188,4,253,4,189,4,254,4,190,4,254,4,189,4,254,4,190,4,255,4,191,4,255,4,190,4,0,5,192,4,1,5,193,4,1,5,192,4,1,5,193,4,2,5,194,4,2,5,193,4,2,5,194,4,3,5,195,4,3,5,194,4,3,5,195,4,4,5,196,4,4,5,195,4,4,5,196,4,5,5,197,4,5,5,196,4,5,5,197,4,6,5,198,4,6,5,197,4,6,5,198,4,7,5,199,4,7,5,198,4,7,5,199,4,8,5,200,4,8,5,199,4,8,5,200,4,9,5,201,4,9,5,200,4,9,5,201,4,10,5,202,4,10,5,201,4,10,5,202,4,11,5,203,4,11,5,202,4,11,5,203,4,12,5,204,4,12,5,203,4,12,5,204,4,13,5,205,4,13,5,204,4,13,5,205,4,14,5,206,4,14,5,205,4,14,5,206,4,15,5,207,4,15,5,206,4,15,5,207,4,16,5,208,4,16,5,207,4,16,5,208,4,17,5,209,4,17,5,208,4,17,5,209,4,18,5,210,4,18,5,209,4,18,5,210,4,19,5,211,4,19,5,210,4,19,5,211,4,20,5,212,4,20,5,211,4,20,5,212,4,21,5,213,4,21,5,212,4,21,5,213,4,22,5,214,4,22,5,213,4,22,5,214,4,23,5,215,4,23,5,214,4,23,5,215,4,24,5,216,4,24,5,215,4,24,5,216,4,25,5,217,4,25,5,216,4,25,5,217,4,26,5,218,4,26,5,217,4,26,5,218,4,27,5,219,4,27,5,218,4,27,5,219,4,28,5,220,4,28,5,219,4,28,5,220,4,29,5,221,4,29,5,220,4,29,5,221,4,30,5,222,4,30,5,221,4,30,5,222,4,31,5,223,4,31,5,222,4,31,5,223,4,32,5,224,4,32,5,223,4,32,5,224,4,33,5,225,4,33,5,224,4,33,5,225,4,34,5,226,4,34,5,225,4,34,5,226,4,35,5,227,4,35,5,226,4,35,5,227,4,36,5,228,4,36,5,227,4,36,5,228,4,37,5,229,4,37,5,228,4,37,5,229,4,38,5,230,4,38,5,229,4,38,5,230,4,39,5,231,4,39,5,230,4,39,5,231,4,40,5,232,4,40,5,231,4,40,5,232,4,41,5,233,4,41,5,232,4,41,5,233,4,42,5,234,4,42,5,233,4,42,5,234,4,43,5,235,4,43,5,234,4,43,5,235,4,44,5,236,4,44,5,235,4,44,5,236,4,45,5,237,4,45,5,236,4,45,5,237,4,46,5,238,4,46,5,237,4,46,5,238,4,47,5,239,4,47,5,238,4,47,5,239,4,48,5,240,4,48,5,239,4,48,5,240,4,49,5,241,4,49,5,240,4,49,5,241,4,50,5,242,4,50,5,241,4,50,5,242,4,51,5,243,4,51,5,242,4,51,5,243,4,52,5,244,4,52,5,243,4,52,5,244,4,53,5,245,4,53,5,244,4,53,5,245,4,54,5,246,4,54,5,245,4,54,5,246,4,55,5,247,4,55,5,246,4,55,5,247,4,56,5,248,4,56,5,247,4,56,5,248,4,57,5,249,4,57,5,248,4,57,5,249,4,58,5,250,4,58,5,249,4,58,5,250,4,59,5,251,4,59,5,250,4,59,5,251,4,60,5,252,4,60,5,251,4,60,5,252,4,61,5,253,4,61,5,252,4,61,5,253,4,62,5,254,4,62,5,253,4,62,5,254,4,63,5,255,4,63,5,254,4,64,5,0,5,65,5,1,5,65,5,0,5,65,5,1,5,66,5,2,5,66,5,1,5,66,5,2,5,67,5,3,5,67,5,2,5,67,5,3,5,68,5,4,5,68,5,3,5,68,5,4,5,69,5,5,5,69,5,4,5,69,5,5,5,70,5,6,5,70,5,5,5,70,5,6,5,71,5,7,5,71,5,6,5,71,5,7,5,72,5,8,5,72,5,7,5,72,5,8,5,73,5,9,5,73,5,8,5,73,5,9,5,74,5,10,5,74,5,9,5,74,5,10,5,75,5,11,5,75,5,10,5,75,5,11,5,76,5,12,5,76,5,11,5,76,5,12,5,77,5,13,5,77,5,12,5,77,5,13,5,78,5,14,5,78,5,13,5,78,5,14,5,79,5,15,5,79,5,14,5,79,5,15,5,80,5,16,5,80,5,15,5,80,5,16,5,81,5,17,5,81,5,16,5,81,5,17,5,82,5,18,5,82,5,17,5,82,5,18,5,83,5,19,5,83,5,18,5,83,5,19,5,84,5,20,5,84,5,19,5,84,5,20,5,85,5,21,5,85,5,20,5,85,5,21,5,86,5,22,5,86,5,21,5,86,5,22,5,87,5,23,5,87,5,22,5,87,5,23,5,88,5,24,5,88,5,23,5,88,5,24,5,89,5,25,5,89,5,24,5,89,5,25,5,90,5,26,5,90,5,25,5,90,5,26,5,91,5,27,5,91,5,26,5,91,5,27,5,92,5,28,5,92,5,27,5,92,5,28,5,93,5,29,5,93,5,28,5,93,5,29,5,94,5,30,5,94,5,29,5,94,5,30,5,95,5,31,5,95,5,30,5,95,5,31,5,96,5,32,5,96,5,31,5,96,5,32,5,97,5,33,5,97,5,32,5,97,5,33,5,98,5,34,5,98,5,33,5,98,5,34,5,99,5,35,5,99,5,34,5,99,5,35,5,100,5,36,5,100,5,35,5,100,5,36,5,101,5,37,5,101,5,36,5,101,5,37,5,102,5,38,5,102,5,37,5,102,5,38,5,103,5,39,5,103,5,38,5,103,5,39,5,104,5,40,5,104,5,39,5,104,5,40,5,105,5,41,5,105,5,40,5,105,5,41,5,106,5,42,5,106,5,41,5,106,5,42,5,107,5,43,5,107,5,42,5,107,5,43,5,108,5,44,5,108,5,43,5,108,5,44,5,109,5,45,5,109,5,44,5,109,5,45,5,110,5,46,5,110,5,45,5,110,5,46,5,111,5,47,5,111,5,46,5,111,5,47,5,112,5,48,5,112,5,47,5,112,5,48,5,113,5,49,5,113,5,48,5,113,5,49,5,114,5,50,5,114,5,49,5,114,5,50,5,115,5,51,5,115,5,50,5,115,5,51,5,116,5,52,5,116,5,51,5,116,5,52,5,117,5,53,5,117,5,52,5,117,5,53,5,118,5,54,5,118,5,53,5,118,5,54,5,119,5,55,5,119,5,54,5,119,5,55,5,120,5,56,5,120,5,55,5,120,5,56,5,121,5,57,5,121,5,56,5,121,5,57,5,122,5,58,5,122,5,57,5,122,5,58,5,123,5,59,5,123,5,58,5,123,5,59,5,124,5,60,5,124,5,59,5,124,5,60,5,125,5,61,5,125,5,60,5,125,5,61,5,126,5,62,5,126,5,61,5,126,5,62,5,127,5,63,5,127,5,62,5,128,5,64,5,129,5,65,5,129,5,64,5,129,5,65,5,130,5,66,5,130,5,65,5,130,5,66,5,131,5,67,5,131,5,66,5,131,5,67,5,132,5,68,5,132,5,67,5,132,5,68,5,133,5,69,5,133,5,68,5,133,5,69,5,134,5,70,5,134,5,69,5,134,5,70,5,135,5,71,5,135,5,70,5,135,5,71,5,136,5,72,5,136,5,71,5,136,5,72,5,137,5,73,5,137,5,72,5,137,5,73,5,138,5,74,5,138,5,73,5,138,5,74,5,139,5,75,5,139,5,74,5,139,5,75,5,140,5,76,5,140,5,75,5,140,5,76,5,141,5,77,5,141,5,76,5,141,5,77,5,142,5,78,5,142,5,77,5,142,5,78,5,143,5,79,5,143,5,78,5,143,5,79,5,144,5,80,5,144,5,79,5,144,5,80,5,145,5,81,5,145,5,80,5,145,5,81,5,146,5,82,5,146,5,81,5,146,5,82,5,147,5,83,5,147,5,82,5,147,5,83,5,148,5,84,5,148,5,83,5,148,5,84,5,149,5,85,5,149,5,84,5,149,5,85,5,150,5,86,5,150,5,85,5,150,5,86,5,151,5,87,5,151,5,86,5,151,5,87,5,152,5,88,5,152,5,87,5,152,5,88,5,153,5,89,5,153,5,88,5,153,5,89,5,154,5,90,5,154,5,89,5,154,5,90,5,155,5,91,5,155,5,90,5,155,5,91,5,156,5,92,5,156,5,91,5,156,5,92,5,157,5,93,5,157,5,92,5,157,5,93,5,158,5,94,5,158,5,93,5,158,5,94,5,159,5,95,5,159,5,94,5,159,5,95,5,160,5,96,5,160,5,95,5,160,5,96,5,161,5,97,5,161,5,96,5,161,5,97,5,162,5,98,5,162,5,97,5,162,5,98,5,163,5,99,5,163,5,98,5,163,5,99,5,164,5,100,5,164,5,99,5,164,5,100,5,165,5,101,5,165,5,100,5,165,5,101,5,166,5,102,5,166,5,101,5,166,5,102,5,167,5,103,5,167,5,102,5,167,5,103,5,168,5,104,5,168,5,103,5,168,5,104,5,169,5,105,5,169,5,104,5,169,5,105,5,170,5,106,5,170,5,105,5,170,5,106,5,171,5,107,5,171,5,106,5,171,5,107,5,172,5,108,5,172,5,107,5,172,5,108,5,173,5,109,5,173,5,108,5,173,5,109,5,174,5,110,5,174,5,109,5,174,5,110,5,175,5,111,5,175,5,110,5,175,5,111,5,176,5,112,5,176,5,111,5,176,5,112,5,177,5,113,5,177,5,112,5,177,5,113,5,178,5,114,5,178,5,113,5,178,5,114,5,179,5,115,5,179,5,114,5,179,5,115,5,180,5,116,5,180,5,115,5,180,5,116,5,181,5,117,5,181,5,116,5,181,5,117,5,182,5,118,5,182,5,117,5,182,5,118,5,183,5,119,5,183,5,118,5,183,5,119,5,184,5,120,5,184,5,119,5,184,5,120,5,185,5,121,5,185,5,120,5,185,5,121,5,186,5,122,5,186,5,121,5,186,5,122,5,187,5,123,5,187,5,122,5,187,5,123,5,188,5,124,5,188,5,123,5,188,5,124,5,189,5,125,5,189,5,124,5,189,5,125,5,190,5,126,5,190,5,125,5,190,5,126,5,191,5,127,5,191,5,126,5,192,5,128,5,193,5,129,5,193,5,128,5,193,5,129,5,194,5,130,5,194,5,129,5,194,5,130,5,195,5,131,5,195,5,130,5,195,5,131,5,196,5,132,5,196,5,131,5,196,5,132,5,197,5,133,5,197,5,132,5,197,5,133,5,198,5,134,5,198,5,133,5,198,5,134,5,199,5,135,5,199,5,134,5,199,5,135,5,200,5,136,5,200,5,135,5,200,5,136,5,201,5,137,5,201,5,136,5,201,5,137,5,202,5,138,5,202,5,137,5,202,5,138,5,203,5,139,5,203,5,138,5,203,5,139,5,204,5,140,5,204,5,139,5,204,5,140,5,205,5,141,5,205,5,140,5,205,5,141,5,206,5,142,5,206,5,141,5,206,5,142,5,207,5,143,5,207,5,142,5,207,5,143,5,208,5,144,5,208,5,143,5,208,5,144,5,209,5,145,5,209,5,144,5,209,5,145,5,210,5,146,5,210,5,145,5,210,5,146,5,211,5,147,5,211,5,146,5,211,5,147,5,212,5,148,5,212,5,147,5,212,5,148,5,213,5,149,5,213,5,148,5,213,5,149,5,214,5,150,5,214,5,149,5,214,5,150,5,215,5,151,5,215,5,150,5,215,5,151,5,216,5,152,5,216,5,151,5,216,5,152,5,217,5,153,5,217,5,152,5,217,5,153,5,218,5,154,5,218,5,153,5,218,5,154,5,219,5,155,5,219,5,154,5,219,5,155,5,220,5,156,5,220,5,155,5,220,5,156,5,221,5,157,5,221,5,156,5,221,5,157,5,222,5,158,5,222,5,157,5,222,5,158,5,223,5,159,5,223,5,158,5,223,5,159,5,224,5,160,5,224,5,159,5,224,5,160,5,225,5,161,5,225,5,160,5,225,5,161,5,226,5,162,5,226,5,161,5,226,5,162,5,227,5,163,5,227,5,162,5,227,5,163,5,228,5,164,5,228,5,163,5,228,5,164,5,229,5,165,5,229,5,164,5,229,5,165,5,230,5,166,5,230,5,165,5,230,5,166,5,231,5,167,5,231,5,166,5,231,5,167,5,232,5,168,5,232,5,167,5,232,5,168,5,233,5,169,5,233,5,168,5,233,5,169,5,234,5,170,5,234,5,169,5,234,5,170,5,235,5,171,5,235,5,170,5,235,5,171,5,236,5,172,5,236,5,171,5,236,5,172,5,237,5,173,5,237,5,172,5,237,5,173,5,238,5,174,5,238,5,173,5,238,5,174,5,239,5,175,5,239,5,174,5,239,5,175,5,240,5,176,5,240,5,175,5,240,5,176,5,241,5,177,5,241,5,176,5,241,5,177,5,242,5,178,5,242,5,177,5,242,5,178,5,243,5,179,5,243,5,178,5,243,5,179,5,244,5,180,5,244,5,179,5,244,5,180,5,245,5,181,5,245,5,180,5,245,5,181,5,246,5,182,5,246,5,181,5,246,5,182,5,247,5,183,5,247,5,182,5,247,5,183,5,248,5,184,5,248,5,183,5,248,5,184,5,249,5,185,5,249,5,184,5,249,5,185,5,250,5,186,5,250,5,185,5,250,5,186,5,251,5,187,5,251,5,186,5,251,5,187,5,252,5,188,5,252,5,187,5,252,5,188,5,253,5,189,5,253,5,188,5,253,5,189,5,254,5,190,5,254,5,189,5,254,5,190,5,255,5,191,5,255,5,190,5,0,6,192,5,1,6,193,5,1,6,192,5,1,6,193,5,2,6,194,5,2,6,193,5,2,6,194,5,3,6,195,5,3,6,194,5,3,6,195,5,4,6,196,5,4,6,195,5,4,6,196,5,5,6,197,5,5,6,196,5,5,6,197,5,6,6,198,5,6,6,197,5,6,6,198,5,7,6,199,5,7,6,198,5,7,6,199,5,8,6,200,5,8,6,199,5,8,6,200,5,9,6,201,5,9,6,200,5,9,6,201,5,10,6,202,5,10,6,201,5,10,6,202,5,11,6,203,5,11,6,202,5,11,6,203,5,12,6,204,5,12,6,203,5,12,6,204,5,13,6,205,5,13,6,204,5,13,6,205,5,14,6,206,5,14,6,205,5,14,6,206,5,15,6,207,5,15,6,206,5,15,6,207,5,16,6,208,5,16,6,207,5,16,6,208,5,17,6,209,5,17,6,208,5,17,6,209,5,18,6,210,5,18,6,209,5,18,6,210,5,19,6,211,5,19,6,210,5,19,6,211,5,20,6,212,5,20,6,211,5,20,6,212,5,21,6,213,5,21,6,212,5,21,6,213,5,22,6,214,5,22,6,213,5,22,6,214,5,23,6,215,5,23,6,214,5,23,6,215,5,24,6,216,5,24,6,215,5,24,6,216,5,25,6,217,5,25,6,216,5,25,6,217,5,26,6,218,5,26,6,217,5,26,6,218,5,27,6,219,5,27,6,218,5,27,6,219,5,28,6,220,5,28,6,219,5,28,6,220,5,29,6,221,5,29,6,220,5,29,6,221,5,30,6,222,5,30,6,221,5,30,6,222,5,31,6,223,5,31,6,222,5,31,6,223,5,32,6,224,5,32,6,223,5,32,6,224,5,33,6,225,5,33,6,224,5,33,6,225,5,34,6,226,5,34,6,225,5,34,6,226,5,35,6,227,5,35,6,226,5,35,6,227,5,36,6,228,5,36,6,227,5,36,6,228,5,37,6,229,5,37,6,228,5,37,6,229,5,38,6,230,5,38,6,229,5,38,6,230,5,39,6,231,5,39,6,230,5,39,6,231,5,40,6,232,5,40,6,231,5,40,6,232,5,41,6,233,5,41,6,232,5,41,6,233,5,42,6,234,5,42,6,233,5,42,6,234,5,43,6,235,5,43,6,234,5,43,6,235,5,44,6,236,5,44,6,235,5,44,6,236,5,45,6,237,5,45,6,236,5,45,6,237,5,46,6,238,5,46,6,237,5,46,6,238,5,47,6,239,5,47,6,238,5,47,6,239,5,48,6,240,5,48,6,239,5,48,6,240,5,49,6,241,5,49,6,240,5,49,6,241,5,50,6,242,5,50,6,241,5,50,6,242,5,51,6,243,5,51,6,242,5,51,6,243,5,52,6,244,5,52,6,243,5,52,6,244,5,53,6,245,5,53,6,244,5,53,6,245,5,54,6,246,5,54,6,245,5,54,6,246,5,55,6,247,5,55,6,246,5,55,6,247,5,56,6,248,5,56,6,247,5,56,6,248,5,57,6,249,5,57,6,248,5,57,6,249,5,58,6,250,5,58,6,249,5,58,6,250,5,59,6,251,5,59,6,250,5,59,6,251,5,60,6,252,5,60,6,251,5,60,6,252,5,61,6,253,5,61,6,252,5,61,6,253,5,62,6,254,5,62,6,253,5,62,6,254,5,63,6,255,5,63,6,254,5,64,6,0,6,65,6,1,6,65,6,0,6,65,6,1,6,66,6,2,6,66,6,1,6,66,6,2,6,67,6,3,6,67,6,2,6,67,6,3,6,68,6,4,6,68,6,3,6,68,6,4,6,69,6,5,6,69,6,4,6,69,6,5,6,70,6,6,6,70,6,5,6,70,6,6,6,71,6,7,6,71,6,6,6,71,6,7,6,72,6,8,6,72,6,7,6,72,6,8,6,73,6,9,6,73,6,8,6,73,6,9,6,74,6,10,6,74,6,9,6,74,6,10,6,75,6,11,6,75,6,10,6,75,6,11,6,76,6,12,6,76,6,11,6,76,6,12,6,77,6,13,6,77,6,12,6,77,6,13,6,78,6,14,6,78,6,13,6,78,6,14,6,79,6,15,6,79,6,14,6,79,6,15,6,80,6,16,6,80,6,15,6,80,6,16,6,81,6,17,6,81,6,16,6,81,6,17,6,82,6,18,6,82,6,17,6,82,6,18,6,83,6,19,6,83,6,18,6,83,6,19,6,84,6,20,6,84,6,19,6,84,6,20,6,85,6,21,6,85,6,20,6,85,6,21,6,86,6,22,6,86,6,21,6,86,6,22,6,87,6,23,6,87,6,22,6,87,6,23,6,88,6,24,6,88,6,23,6,88,6,24,6,89,6,25,6,89,6,24,6,89,6,25,6,90,6,26,6,90,6,25,6,90,6,26,6,91,6,27,6,91,6,26,6,91,6,27,6,92,6,28,6,92,6,27,6,92,6,28,6,93,6,29,6,93,6,28,6,93,6,29,6,94,6,30,6,94,6,29,6,94,6,30,6,95,6,31,6,95,6,30,6,95,6,31,6,96,6,32,6,96,6,31,6,96,6,32,6,97,6,33,6,97,6,32,6,97,6,33,6,98,6,34,6,98,6,33,6,98,6,34,6,99,6,35,6,99,6,34,6,99,6,35,6,100,6,36,6,100,6,35,6,100,6,36,6,101,6,37,6,101,6,36,6,101,6,37,6,102,6,38,6,102,6,37,6,102,6,38,6,103,6,39,6,103,6,38,6,103,6,39,6,104,6,40,6,104,6,39,6,104,6,40,6,105,6,41,6,105,6,40,6,105,6,41,6,106,6,42,6,106,6,41,6,106,6,42,6,107,6,43,6,107,6,42,6,107,6,43,6,108,6,44,6,108,6,43,6,108,6,44,6,109,6,45,6,109,6,44,6,109,6,45,6,110,6,46,6,110,6,45,6,110,6,46,6,111,6,47,6,111,6,46,6,111,6,47,6,112,6,48,6,112,6,47,6,112,6,48,6,113,6,49,6,113,6,48,6,113,6,49,6,114,6,50,6,114,6,49,6,114,6,50,6,115,6,51,6,115,6,50,6,115,6,51,6,116,6,52,6,116,6,51,6,116,6,52,6,117,6,53,6,117,6,52,6,117,6,53,6,118,6,54,6,118,6,53,6,118,6,54,6,119,6,55,6,119,6,54,6,119,6,55,6,120,6,56,6,120,6,55,6,120,6,56,6,121,6,57,6,121,6,56,6,121,6,57,6,122,6,58,6,122,6,57,6,122,6,58,6,123,6,59,6,123,6,58,6,123,6,59,6,124,6,60,6,124,6,59,6,124,6,60,6,125,6,61,6,125,6,60,6,125,6,61,6,126,6,62,6,126,6,61,6,126,6,62,6,127,6,63,6,127,6,62,6,128,6,64,6,129,6,65,6,129,6,64,6,129,6,65,6,130,6,66,6,130,6,65,6,130,6,66,6,131,6,67,6,131,6,66,6,131,6,67,6,132,6,68,6,132,6,67,6,132,6,68,6,133,6,69,6,133,6,68,6,133,6,69,6,134,6,70,6,134,6,69,6,134,6,70,6,135,6,71,6,135,6,70,6,135,6,71,6,136,6,72,6,136,6,71,6,136,6,72,6,137,6,73,6,137,6,72,6,137,6,73,6,138,6,74,6,138,6,73,6,138,6,74,6,139,6,75,6,139,6,74,6,139,6,75,6,140,6,76,6,140,6,75,6,140,6,76,6,141,6,77,6,141,6,76,6,141,6,77,6,142,6,78,6,142,6,77,6,142,6,78,6,143,6,79,6,143,6,78,6,143,6,79,6,144,6,80,6,144,6,79,6,144,6,80,6,145,6,81,6,145,6,80,6,145,6,81,6,146,6,82,6,146,6,81,6,146,6,82,6,147,6,83,6,147,6,82,6,147,6,83,6,148,6,84,6,148,6,83,6,148,6,84,6,149,6,85,6,149,6,84,6,149,6,85,6,150,6,86,6,150,6,85,6,150,6,86,6,151,6,87,6,151,6,86,6,151,6,87,6,152,6,88,6,152,6,87,6,152,6,88,6,153,6,89,6,153,6,88,6,153,6,89,6,154,6,90,6,154,6,89,6,154,6,90,6,155,6,91,6,155,6,90,6,155,6,91,6,156,6,92,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+286720);
/* memory initializer */ allocate([156,6,91,6,156,6,92,6,157,6,93,6,157,6,92,6,157,6,93,6,158,6,94,6,158,6,93,6,158,6,94,6,159,6,95,6,159,6,94,6,159,6,95,6,160,6,96,6,160,6,95,6,160,6,96,6,161,6,97,6,161,6,96,6,161,6,97,6,162,6,98,6,162,6,97,6,162,6,98,6,163,6,99,6,163,6,98,6,163,6,99,6,164,6,100,6,164,6,99,6,164,6,100,6,165,6,101,6,165,6,100,6,165,6,101,6,166,6,102,6,166,6,101,6,166,6,102,6,167,6,103,6,167,6,102,6,167,6,103,6,168,6,104,6,168,6,103,6,168,6,104,6,169,6,105,6,169,6,104,6,169,6,105,6,170,6,106,6,170,6,105,6,170,6,106,6,171,6,107,6,171,6,106,6,171,6,107,6,172,6,108,6,172,6,107,6,172,6,108,6,173,6,109,6,173,6,108,6,173,6,109,6,174,6,110,6,174,6,109,6,174,6,110,6,175,6,111,6,175,6,110,6,175,6,111,6,176,6,112,6,176,6,111,6,176,6,112,6,177,6,113,6,177,6,112,6,177,6,113,6,178,6,114,6,178,6,113,6,178,6,114,6,179,6,115,6,179,6,114,6,179,6,115,6,180,6,116,6,180,6,115,6,180,6,116,6,181,6,117,6,181,6,116,6,181,6,117,6,182,6,118,6,182,6,117,6,182,6,118,6,183,6,119,6,183,6,118,6,183,6,119,6,184,6,120,6,184,6,119,6,184,6,120,6,185,6,121,6,185,6,120,6,185,6,121,6,186,6,122,6,186,6,121,6,186,6,122,6,187,6,123,6,187,6,122,6,187,6,123,6,188,6,124,6,188,6,123,6,188,6,124,6,189,6,125,6,189,6,124,6,189,6,125,6,190,6,126,6,190,6,125,6,190,6,126,6,191,6,127,6,191,6,126,6,192,6,128,6,193,6,129,6,193,6,128,6,193,6,129,6,194,6,130,6,194,6,129,6,194,6,130,6,195,6,131,6,195,6,130,6,195,6,131,6,196,6,132,6,196,6,131,6,196,6,132,6,197,6,133,6,197,6,132,6,197,6,133,6,198,6,134,6,198,6,133,6,198,6,134,6,199,6,135,6,199,6,134,6,199,6,135,6,200,6,136,6,200,6,135,6,200,6,136,6,201,6,137,6,201,6,136,6,201,6,137,6,202,6,138,6,202,6,137,6,202,6,138,6,203,6,139,6,203,6,138,6,203,6,139,6,204,6,140,6,204,6,139,6,204,6,140,6,205,6,141,6,205,6,140,6,205,6,141,6,206,6,142,6,206,6,141,6,206,6,142,6,207,6,143,6,207,6,142,6,207,6,143,6,208,6,144,6,208,6,143,6,208,6,144,6,209,6,145,6,209,6,144,6,209,6,145,6,210,6,146,6,210,6,145,6,210,6,146,6,211,6,147,6,211,6,146,6,211,6,147,6,212,6,148,6,212,6,147,6,212,6,148,6,213,6,149,6,213,6,148,6,213,6,149,6,214,6,150,6,214,6,149,6,214,6,150,6,215,6,151,6,215,6,150,6,215,6,151,6,216,6,152,6,216,6,151,6,216,6,152,6,217,6,153,6,217,6,152,6,217,6,153,6,218,6,154,6,218,6,153,6,218,6,154,6,219,6,155,6,219,6,154,6,219,6,155,6,220,6,156,6,220,6,155,6,220,6,156,6,221,6,157,6,221,6,156,6,221,6,157,6,222,6,158,6,222,6,157,6,222,6,158,6,223,6,159,6,223,6,158,6,223,6,159,6,224,6,160,6,224,6,159,6,224,6,160,6,225,6,161,6,225,6,160,6,225,6,161,6,226,6,162,6,226,6,161,6,226,6,162,6,227,6,163,6,227,6,162,6,227,6,163,6,228,6,164,6,228,6,163,6,228,6,164,6,229,6,165,6,229,6,164,6,229,6,165,6,230,6,166,6,230,6,165,6,230,6,166,6,231,6,167,6,231,6,166,6,231,6,167,6,232,6,168,6,232,6,167,6,232,6,168,6,233,6,169,6,233,6,168,6,233,6,169,6,234,6,170,6,234,6,169,6,234,6,170,6,235,6,171,6,235,6,170,6,235,6,171,6,236,6,172,6,236,6,171,6,236,6,172,6,237,6,173,6,237,6,172,6,237,6,173,6,238,6,174,6,238,6,173,6,238,6,174,6,239,6,175,6,239,6,174,6,239,6,175,6,240,6,176,6,240,6,175,6,240,6,176,6,241,6,177,6,241,6,176,6,241,6,177,6,242,6,178,6,242,6,177,6,242,6,178,6,243,6,179,6,243,6,178,6,243,6,179,6,244,6,180,6,244,6,179,6,244,6,180,6,245,6,181,6,245,6,180,6,245,6,181,6,246,6,182,6,246,6,181,6,246,6,182,6,247,6,183,6,247,6,182,6,247,6,183,6,248,6,184,6,248,6,183,6,248,6,184,6,249,6,185,6,249,6,184,6,249,6,185,6,250,6,186,6,250,6,185,6,250,6,186,6,251,6,187,6,251,6,186,6,251,6,187,6,252,6,188,6,252,6,187,6,252,6,188,6,253,6,189,6,253,6,188,6,253,6,189,6,254,6,190,6,254,6,189,6,254,6,190,6,255,6,191,6,255,6,190,6,0,7,192,6,1,7,193,6,1,7,192,6,1,7,193,6,2,7,194,6,2,7,193,6,2,7,194,6,3,7,195,6,3,7,194,6,3,7,195,6,4,7,196,6,4,7,195,6,4,7,196,6,5,7,197,6,5,7,196,6,5,7,197,6,6,7,198,6,6,7,197,6,6,7,198,6,7,7,199,6,7,7,198,6,7,7,199,6,8,7,200,6,8,7,199,6,8,7,200,6,9,7,201,6,9,7,200,6,9,7,201,6,10,7,202,6,10,7,201,6,10,7,202,6,11,7,203,6,11,7,202,6,11,7,203,6,12,7,204,6,12,7,203,6,12,7,204,6,13,7,205,6,13,7,204,6,13,7,205,6,14,7,206,6,14,7,205,6,14,7,206,6,15,7,207,6,15,7,206,6,15,7,207,6,16,7,208,6,16,7,207,6,16,7,208,6,17,7,209,6,17,7,208,6,17,7,209,6,18,7,210,6,18,7,209,6,18,7,210,6,19,7,211,6,19,7,210,6,19,7,211,6,20,7,212,6,20,7,211,6,20,7,212,6,21,7,213,6,21,7,212,6,21,7,213,6,22,7,214,6,22,7,213,6,22,7,214,6,23,7,215,6,23,7,214,6,23,7,215,6,24,7,216,6,24,7,215,6,24,7,216,6,25,7,217,6,25,7,216,6,25,7,217,6,26,7,218,6,26,7,217,6,26,7,218,6,27,7,219,6,27,7,218,6,27,7,219,6,28,7,220,6,28,7,219,6,28,7,220,6,29,7,221,6,29,7,220,6,29,7,221,6,30,7,222,6,30,7,221,6,30,7,222,6,31,7,223,6,31,7,222,6,31,7,223,6,32,7,224,6,32,7,223,6,32,7,224,6,33,7,225,6,33,7,224,6,33,7,225,6,34,7,226,6,34,7,225,6,34,7,226,6,35,7,227,6,35,7,226,6,35,7,227,6,36,7,228,6,36,7,227,6,36,7,228,6,37,7,229,6,37,7,228,6,37,7,229,6,38,7,230,6,38,7,229,6,38,7,230,6,39,7,231,6,39,7,230,6,39,7,231,6,40,7,232,6,40,7,231,6,40,7,232,6,41,7,233,6,41,7,232,6,41,7,233,6,42,7,234,6,42,7,233,6,42,7,234,6,43,7,235,6,43,7,234,6,43,7,235,6,44,7,236,6,44,7,235,6,44,7,236,6,45,7,237,6,45,7,236,6,45,7,237,6,46,7,238,6,46,7,237,6,46,7,238,6,47,7,239,6,47,7,238,6,47,7,239,6,48,7,240,6,48,7,239,6,48,7,240,6,49,7,241,6,49,7,240,6,49,7,241,6,50,7,242,6,50,7,241,6,50,7,242,6,51,7,243,6,51,7,242,6,51,7,243,6,52,7,244,6,52,7,243,6,52,7,244,6,53,7,245,6,53,7,244,6,53,7,245,6,54,7,246,6,54,7,245,6,54,7,246,6,55,7,247,6,55,7,246,6,55,7,247,6,56,7,248,6,56,7,247,6,56,7,248,6,57,7,249,6,57,7,248,6,57,7,249,6,58,7,250,6,58,7,249,6,58,7,250,6,59,7,251,6,59,7,250,6,59,7,251,6,60,7,252,6,60,7,251,6,60,7,252,6,61,7,253,6,61,7,252,6,61,7,253,6,62,7,254,6,62,7,253,6,62,7,254,6,63,7,255,6,63,7,254,6,64,7,0,7,65,7,1,7,65,7,0,7,65,7,1,7,66,7,2,7,66,7,1,7,66,7,2,7,67,7,3,7,67,7,2,7,67,7,3,7,68,7,4,7,68,7,3,7,68,7,4,7,69,7,5,7,69,7,4,7,69,7,5,7,70,7,6,7,70,7,5,7,70,7,6,7,71,7,7,7,71,7,6,7,71,7,7,7,72,7,8,7,72,7,7,7,72,7,8,7,73,7,9,7,73,7,8,7,73,7,9,7,74,7,10,7,74,7,9,7,74,7,10,7,75,7,11,7,75,7,10,7,75,7,11,7,76,7,12,7,76,7,11,7,76,7,12,7,77,7,13,7,77,7,12,7,77,7,13,7,78,7,14,7,78,7,13,7,78,7,14,7,79,7,15,7,79,7,14,7,79,7,15,7,80,7,16,7,80,7,15,7,80,7,16,7,81,7,17,7,81,7,16,7,81,7,17,7,82,7,18,7,82,7,17,7,82,7,18,7,83,7,19,7,83,7,18,7,83,7,19,7,84,7,20,7,84,7,19,7,84,7,20,7,85,7,21,7,85,7,20,7,85,7,21,7,86,7,22,7,86,7,21,7,86,7,22,7,87,7,23,7,87,7,22,7,87,7,23,7,88,7,24,7,88,7,23,7,88,7,24,7,89,7,25,7,89,7,24,7,89,7,25,7,90,7,26,7,90,7,25,7,90,7,26,7,91,7,27,7,91,7,26,7,91,7,27,7,92,7,28,7,92,7,27,7,92,7,28,7,93,7,29,7,93,7,28,7,93,7,29,7,94,7,30,7,94,7,29,7,94,7,30,7,95,7,31,7,95,7,30,7,95,7,31,7,96,7,32,7,96,7,31,7,96,7,32,7,97,7,33,7,97,7,32,7,97,7,33,7,98,7,34,7,98,7,33,7,98,7,34,7,99,7,35,7,99,7,34,7,99,7,35,7,100,7,36,7,100,7,35,7,100,7,36,7,101,7,37,7,101,7,36,7,101,7,37,7,102,7,38,7,102,7,37,7,102,7,38,7,103,7,39,7,103,7,38,7,103,7,39,7,104,7,40,7,104,7,39,7,104,7,40,7,105,7,41,7,105,7,40,7,105,7,41,7,106,7,42,7,106,7,41,7,106,7,42,7,107,7,43,7,107,7,42,7,107,7,43,7,108,7,44,7,108,7,43,7,108,7,44,7,109,7,45,7,109,7,44,7,109,7,45,7,110,7,46,7,110,7,45,7,110,7,46,7,111,7,47,7,111,7,46,7,111,7,47,7,112,7,48,7,112,7,47,7,112,7,48,7,113,7,49,7,113,7,48,7,113,7,49,7,114,7,50,7,114,7,49,7,114,7,50,7,115,7,51,7,115,7,50,7,115,7,51,7,116,7,52,7,116,7,51,7,116,7,52,7,117,7,53,7,117,7,52,7,117,7,53,7,118,7,54,7,118,7,53,7,118,7,54,7,119,7,55,7,119,7,54,7,119,7,55,7,120,7,56,7,120,7,55,7,120,7,56,7,121,7,57,7,121,7,56,7,121,7,57,7,122,7,58,7,122,7,57,7,122,7,58,7,123,7,59,7,123,7,58,7,123,7,59,7,124,7,60,7,124,7,59,7,124,7,60,7,125,7,61,7,125,7,60,7,125,7,61,7,126,7,62,7,126,7,61,7,126,7,62,7,127,7,63,7,127,7,62,7,128,7,64,7,129,7,65,7,129,7,64,7,129,7,65,7,130,7,66,7,130,7,65,7,130,7,66,7,131,7,67,7,131,7,66,7,131,7,67,7,132,7,68,7,132,7,67,7,132,7,68,7,133,7,69,7,133,7,68,7,133,7,69,7,134,7,70,7,134,7,69,7,134,7,70,7,135,7,71,7,135,7,70,7,135,7,71,7,136,7,72,7,136,7,71,7,136,7,72,7,137,7,73,7,137,7,72,7,137,7,73,7,138,7,74,7,138,7,73,7,138,7,74,7,139,7,75,7,139,7,74,7,139,7,75,7,140,7,76,7,140,7,75,7,140,7,76,7,141,7,77,7,141,7,76,7,141,7,77,7,142,7,78,7,142,7,77,7,142,7,78,7,143,7,79,7,143,7,78,7,143,7,79,7,144,7,80,7,144,7,79,7,144,7,80,7,145,7,81,7,145,7,80,7,145,7,81,7,146,7,82,7,146,7,81,7,146,7,82,7,147,7,83,7,147,7,82,7,147,7,83,7,148,7,84,7,148,7,83,7,148,7,84,7,149,7,85,7,149,7,84,7,149,7,85,7,150,7,86,7,150,7,85,7,150,7,86,7,151,7,87,7,151,7,86,7,151,7,87,7,152,7,88,7,152,7,87,7,152,7,88,7,153,7,89,7,153,7,88,7,153,7,89,7,154,7,90,7,154,7,89,7,154,7,90,7,155,7,91,7,155,7,90,7,155,7,91,7,156,7,92,7,156,7,91,7,156,7,92,7,157,7,93,7,157,7,92,7,157,7,93,7,158,7,94,7,158,7,93,7,158,7,94,7,159,7,95,7,159,7,94,7,159,7,95,7,160,7,96,7,160,7,95,7,160,7,96,7,161,7,97,7,161,7,96,7,161,7,97,7,162,7,98,7,162,7,97,7,162,7,98,7,163,7,99,7,163,7,98,7,163,7,99,7,164,7,100,7,164,7,99,7,164,7,100,7,165,7,101,7,165,7,100,7,165,7,101,7,166,7,102,7,166,7,101,7,166,7,102,7,167,7,103,7,167,7,102,7,167,7,103,7,168,7,104,7,168,7,103,7,168,7,104,7,169,7,105,7,169,7,104,7,169,7,105,7,170,7,106,7,170,7,105,7,170,7,106,7,171,7,107,7,171,7,106,7,171,7,107,7,172,7,108,7,172,7,107,7,172,7,108,7,173,7,109,7,173,7,108,7,173,7,109,7,174,7,110,7,174,7,109,7,174,7,110,7,175,7,111,7,175,7,110,7,175,7,111,7,176,7,112,7,176,7,111,7,176,7,112,7,177,7,113,7,177,7,112,7,177,7,113,7,178,7,114,7,178,7,113,7,178,7,114,7,179,7,115,7,179,7,114,7,179,7,115,7,180,7,116,7,180,7,115,7,180,7,116,7,181,7,117,7,181,7,116,7,181,7,117,7,182,7,118,7,182,7,117,7,182,7,118,7,183,7,119,7,183,7,118,7,183,7,119,7,184,7,120,7,184,7,119,7,184,7,120,7,185,7,121,7,185,7,120,7,185,7,121,7,186,7,122,7,186,7,121,7,186,7,122,7,187,7,123,7,187,7,122,7,187,7,123,7,188,7,124,7,188,7,123,7,188,7,124,7,189,7,125,7,189,7,124,7,189,7,125,7,190,7,126,7,190,7,125,7,190,7,126,7,191,7,127,7,191,7,126,7,192,7,128,7,193,7,129,7,193,7,128,7,193,7,129,7,194,7,130,7,194,7,129,7,194,7,130,7,195,7,131,7,195,7,130,7,195,7,131,7,196,7,132,7,196,7,131,7,196,7,132,7,197,7,133,7,197,7,132,7,197,7,133,7,198,7,134,7,198,7,133,7,198,7,134,7,199,7,135,7,199,7,134,7,199,7,135,7,200,7,136,7,200,7,135,7,200,7,136,7,201,7,137,7,201,7,136,7,201,7,137,7,202,7,138,7,202,7,137,7,202,7,138,7,203,7,139,7,203,7,138,7,203,7,139,7,204,7,140,7,204,7,139,7,204,7,140,7,205,7,141,7,205,7,140,7,205,7,141,7,206,7,142,7,206,7,141,7,206,7,142,7,207,7,143,7,207,7,142,7,207,7,143,7,208,7,144,7,208,7,143,7,208,7,144,7,209,7,145,7,209,7,144,7,209,7,145,7,210,7,146,7,210,7,145,7,210,7,146,7,211,7,147,7,211,7,146,7,211,7,147,7,212,7,148,7,212,7,147,7,212,7,148,7,213,7,149,7,213,7,148,7,213,7,149,7,214,7,150,7,214,7,149,7,214,7,150,7,215,7,151,7,215,7,150,7,215,7,151,7,216,7,152,7,216,7,151,7,216,7,152,7,217,7,153,7,217,7,152,7,217,7,153,7,218,7,154,7,218,7,153,7,218,7,154,7,219,7,155,7,219,7,154,7,219,7,155,7,220,7,156,7,220,7,155,7,220,7,156,7,221,7,157,7,221,7,156,7,221,7,157,7,222,7,158,7,222,7,157,7,222,7,158,7,223,7,159,7,223,7,158,7,223,7,159,7,224,7,160,7,224,7,159,7,224,7,160,7,225,7,161,7,225,7,160,7,225,7,161,7,226,7,162,7,226,7,161,7,226,7,162,7,227,7,163,7,227,7,162,7,227,7,163,7,228,7,164,7,228,7,163,7,228,7,164,7,229,7,165,7,229,7,164,7,229,7,165,7,230,7,166,7,230,7,165,7,230,7,166,7,231,7,167,7,231,7,166,7,231,7,167,7,232,7,168,7,232,7,167,7,232,7,168,7,233,7,169,7,233,7,168,7,233,7,169,7,234,7,170,7,234,7,169,7,234,7,170,7,235,7,171,7,235,7,170,7,235,7,171,7,236,7,172,7,236,7,171,7,236,7,172,7,237,7,173,7,237,7,172,7,237,7,173,7,238,7,174,7,238,7,173,7,238,7,174,7,239,7,175,7,239,7,174,7,239,7,175,7,240,7,176,7,240,7,175,7,240,7,176,7,241,7,177,7,241,7,176,7,241,7,177,7,242,7,178,7,242,7,177,7,242,7,178,7,243,7,179,7,243,7,178,7,243,7,179,7,244,7,180,7,244,7,179,7,244,7,180,7,245,7,181,7,245,7,180,7,245,7,181,7,246,7,182,7,246,7,181,7,246,7,182,7,247,7,183,7,247,7,182,7,247,7,183,7,248,7,184,7,248,7,183,7,248,7,184,7,249,7,185,7,249,7,184,7,249,7,185,7,250,7,186,7,250,7,185,7,250,7,186,7,251,7,187,7,251,7,186,7,251,7,187,7,252,7,188,7,252,7,187,7,252,7,188,7,253,7,189,7,253,7,188,7,253,7,189,7,254,7,190,7,254,7,189,7,254,7,190,7,255,7,191,7,255,7,190,7,0,8,192,7,1,8,193,7,1,8,192,7,1,8,193,7,2,8,194,7,2,8,193,7,2,8,194,7,3,8,195,7,3,8,194,7,3,8,195,7,4,8,196,7,4,8,195,7,4,8,196,7,5,8,197,7,5,8,196,7,5,8,197,7,6,8,198,7,6,8,197,7,6,8,198,7,7,8,199,7,7,8,198,7,7,8,199,7,8,8,200,7,8,8,199,7,8,8,200,7,9,8,201,7,9,8,200,7,9,8,201,7,10,8,202,7,10,8,201,7,10,8,202,7,11,8,203,7,11,8,202,7,11,8,203,7,12,8,204,7,12,8,203,7,12,8,204,7,13,8,205,7,13,8,204,7,13,8,205,7,14,8,206,7,14,8,205,7,14,8,206,7,15,8,207,7,15,8,206,7,15,8,207,7,16,8,208,7,16,8,207,7,16,8,208,7,17,8,209,7,17,8,208,7,17,8,209,7,18,8,210,7,18,8,209,7,18,8,210,7,19,8,211,7,19,8,210,7,19,8,211,7,20,8,212,7,20,8,211,7,20,8,212,7,21,8,213,7,21,8,212,7,21,8,213,7,22,8,214,7,22,8,213,7,22,8,214,7,23,8,215,7,23,8,214,7,23,8,215,7,24,8,216,7,24,8,215,7,24,8,216,7,25,8,217,7,25,8,216,7,25,8,217,7,26,8,218,7,26,8,217,7,26,8,218,7,27,8,219,7,27,8,218,7,27,8,219,7,28,8,220,7,28,8,219,7,28,8,220,7,29,8,221,7,29,8,220,7,29,8,221,7,30,8,222,7,30,8,221,7,30,8,222,7,31,8,223,7,31,8,222,7,31,8,223,7,32,8,224,7,32,8,223,7,32,8,224,7,33,8,225,7,33,8,224,7,33,8,225,7,34,8,226,7,34,8,225,7,34,8,226,7,35,8,227,7,35,8,226,7,35,8,227,7,36,8,228,7,36,8,227,7,36,8,228,7,37,8,229,7,37,8,228,7,37,8,229,7,38,8,230,7,38,8,229,7,38,8,230,7,39,8,231,7,39,8,230,7,39,8,231,7,40,8,232,7,40,8,231,7,40,8,232,7,41,8,233,7,41,8,232,7,41,8,233,7,42,8,234,7,42,8,233,7,42,8,234,7,43,8,235,7,43,8,234,7,43,8,235,7,44,8,236,7,44,8,235,7,44,8,236,7,45,8,237,7,45,8,236,7,45,8,237,7,46,8,238,7,46,8,237,7,46,8,238,7,47,8,239,7,47,8,238,7,47,8,239,7,48,8,240,7,48,8,239,7,48,8,240,7,49,8,241,7,49,8,240,7,49,8,241,7,50,8,242,7,50,8,241,7,50,8,242,7,51,8,243,7,51,8,242,7,51,8,243,7,52,8,244,7,52,8,243,7,52,8,244,7,53,8,245,7,53,8,244,7,53,8,245,7,54,8,246,7,54,8,245,7,54,8,246,7,55,8,247,7,55,8,246,7,55,8,247,7,56,8,248,7,56,8,247,7,56,8,248,7,57,8,249,7,57,8,248,7,57,8,249,7,58,8,250,7,58,8,249,7,58,8,250,7,59,8,251,7,59,8,250,7,59,8,251,7,60,8,252,7,60,8,251,7,60,8,252,7,61,8,253,7,61,8,252,7,61,8,253,7,62,8,254,7,62,8,253,7,62,8,254,7,63,8,255,7,63,8,254,7,64,8,0,8,65,8,1,8,65,8,0,8,65,8,1,8,66,8,2,8,66,8,1,8,66,8,2,8,67,8,3,8,67,8,2,8,67,8,3,8,68,8,4,8,68,8,3,8,68,8,4,8,69,8,5,8,69,8,4,8,69,8,5,8,70,8,6,8,70,8,5,8,70,8,6,8,71,8,7,8,71,8,6,8,71,8,7,8,72,8,8,8,72,8,7,8,72,8,8,8,73,8,9,8,73,8,8,8,73,8,9,8,74,8,10,8,74,8,9,8,74,8,10,8,75,8,11,8,75,8,10,8,75,8,11,8,76,8,12,8,76,8,11,8,76,8,12,8,77,8,13,8,77,8,12,8,77,8,13,8,78,8,14,8,78,8,13,8,78,8,14,8,79,8,15,8,79,8,14,8,79,8,15,8,80,8,16,8,80,8,15,8,80,8,16,8,81,8,17,8,81,8,16,8,81,8,17,8,82,8,18,8,82,8,17,8,82,8,18,8,83,8,19,8,83,8,18,8,83,8,19,8,84,8,20,8,84,8,19,8,84,8,20,8,85,8,21,8,85,8,20,8,85,8,21,8,86,8,22,8,86,8,21,8,86,8,22,8,87,8,23,8,87,8,22,8,87,8,23,8,88,8,24,8,88,8,23,8,88,8,24,8,89,8,25,8,89,8,24,8,89,8,25,8,90,8,26,8,90,8,25,8,90,8,26,8,91,8,27,8,91,8,26,8,91,8,27,8,92,8,28,8,92,8,27,8,92,8,28,8,93,8,29,8,93,8,28,8,93,8,29,8,94,8,30,8,94,8,29,8,94,8,30,8,95,8,31,8,95,8,30,8,95,8,31,8,96,8,32,8,96,8,31,8,96,8,32,8,97,8,33,8,97,8,32,8,97,8,33,8,98,8,34,8,98,8,33,8,98,8,34,8,99,8,35,8,99,8,34,8,99,8,35,8,100,8,36,8,100,8,35,8,100,8,36,8,101,8,37,8,101,8,36,8,101,8,37,8,102,8,38,8,102,8,37,8,102,8,38,8,103,8,39,8,103,8,38,8,103,8,39,8,104,8,40,8,104,8,39,8,104,8,40,8,105,8,41,8,105,8,40,8,105,8,41,8,106,8,42,8,106,8,41,8,106,8,42,8,107,8,43,8,107,8,42,8,107,8,43,8,108,8,44,8,108,8,43,8,108,8,44,8,109,8,45,8,109,8,44,8,109,8,45,8,110,8,46,8,110,8,45,8,110,8,46,8,111,8,47,8,111,8,46,8,111,8,47,8,112,8,48,8,112,8,47,8,112,8,48,8,113,8,49,8,113,8,48,8,113,8,49,8,114,8,50,8,114,8,49,8,114,8,50,8,115,8,51,8,115,8,50,8,115,8,51,8,116,8,52,8,116,8,51,8,116,8,52,8,117,8,53,8,117,8,52,8,117,8,53,8,118,8,54,8,118,8,53,8,118,8,54,8,119,8,55,8,119,8,54,8,119,8,55,8,120,8,56,8,120,8,55,8,120,8,56,8,121,8,57,8,121,8,56,8,121,8,57,8,122,8,58,8,122,8,57,8,122,8,58,8,123,8,59,8,123,8,58,8,123,8,59,8,124,8,60,8,124,8,59,8,124,8,60,8,125,8,61,8,125,8,60,8,125,8,61,8,126,8,62,8,126,8,61,8,126,8,62,8,127,8,63,8,127,8,62,8,128,8,64,8,129,8,65,8,129,8,64,8,129,8,65,8,130,8,66,8,130,8,65,8,130,8,66,8,131,8,67,8,131,8,66,8,131,8,67,8,132,8,68,8,132,8,67,8,132,8,68,8,133,8,69,8,133,8,68,8,133,8,69,8,134,8,70,8,134,8,69,8,134,8,70,8,135,8,71,8,135,8,70,8,135,8,71,8,136,8,72,8,136,8,71,8,136,8,72,8,137,8,73,8,137,8,72,8,137,8,73,8,138,8,74,8,138,8,73,8,138,8,74,8,139,8,75,8,139,8,74,8,139,8,75,8,140,8,76,8,140,8,75,8,140,8,76,8,141,8,77,8,141,8,76,8,141,8,77,8,142,8,78,8,142,8,77,8,142,8,78,8,143,8,79,8,143,8,78,8,143,8,79,8,144,8,80,8,144,8,79,8,144,8,80,8,145,8,81,8,145,8,80,8,145,8,81,8,146,8,82,8,146,8,81,8,146,8,82,8,147,8,83,8,147,8,82,8,147,8,83,8,148,8,84,8,148,8,83,8,148,8,84,8,149,8,85,8,149,8,84,8,149,8,85,8,150,8,86,8,150,8,85,8,150,8,86,8,151,8,87,8,151,8,86,8,151,8,87,8,152,8,88,8,152,8,87,8,152,8,88,8,153,8,89,8,153,8,88,8,153,8,89,8,154,8,90,8,154,8,89,8,154,8,90,8,155,8,91,8,155,8,90,8,155,8,91,8,156,8,92,8,156,8,91,8,156,8,92,8,157,8,93,8,157,8,92,8,157,8,93,8,158,8,94,8,158,8,93,8,158,8,94,8,159,8,95,8,159,8,94,8,159,8,95,8,160,8,96,8,160,8,95,8,160,8,96,8,161,8,97,8,161,8,96,8,161,8,97,8,162,8,98,8,162,8,97,8,162,8,98,8,163,8,99,8,163,8,98,8,163,8,99,8,164,8,100,8,164,8,99,8,164,8,100,8,165,8,101,8,165,8,100,8,165,8,101,8,166,8,102,8,166,8,101,8,166,8,102,8,167,8,103,8,167,8,102,8,167,8,103,8,168,8,104,8,168,8,103,8,168,8,104,8,169,8,105,8,169,8,104,8,169,8,105,8,170,8,106,8,170,8,105,8,170,8,106,8,171,8,107,8,171,8,106,8,171,8,107,8,172,8,108,8,172,8,107,8,172,8,108,8,173,8,109,8,173,8,108,8,173,8,109,8,174,8,110,8,174,8,109,8,174,8,110,8,175,8,111,8,175,8,110,8,175,8,111,8,176,8,112,8,176,8,111,8,176,8,112,8,177,8,113,8,177,8,112,8,177,8,113,8,178,8,114,8,178,8,113,8,178,8,114,8,179,8,115,8,179,8,114,8,179,8,115,8,180,8,116,8,180,8,115,8,180,8,116,8,181,8,117,8,181,8,116,8,181,8,117,8,182,8,118,8,182,8,117,8,182,8,118,8,183,8,119,8,183,8,118,8,183,8,119,8,184,8,120,8,184,8,119,8,184,8,120,8,185,8,121,8,185,8,120,8,185,8,121,8,186,8,122,8,186,8,121,8,186,8,122,8,187,8,123,8,187,8,122,8,187,8,123,8,188,8,124,8,188,8,123,8,188,8,124,8,189,8,125,8,189,8,124,8,189,8,125,8,190,8,126,8,190,8,125,8,190,8,126,8,191,8,127,8,191,8,126,8,0,0,122,195,10,215,247,65,240,231,0,195,0,0,122,195,82,56,251,65,0,0,250,194,16,24,118,195,107,26,254,65,240,231,0,195,16,24,118,195,254,84,251,65,0,0,250,194,33,48,114,195,142,70,2,66,240,231,0,195,33,48,114,195,137,65,1,66,0,0,250,194,240,71,110,195,102,166,3,66,240,231,0,195,240,71,110,195,198,237,3,66,0,0,250,194,0,96,106,195,178,93,2,66,240,231,0,195,0,96,106,195,233,200,2,66,0,0,250,194,16,120,102,195,153,42,250,65,240,231,0,195,16,120,102,195,213,231,250,65,0,0,250,194,33,144,98,195,107,43,244,65,240,231,0,195,33,144,98,195,71,131,235,65,0,0,250,194,240,167,94,195,243,159,241,65,240,231,0,195,240,167,94,195,233,38,236,65,0,0,250,194,0,192,90,195,101,170,243,65,240,231,0,195,0,192,90,195,181,149,235,65,0,0,250,194,16,216,86,195,132,141,245,65,240,231,0,195,16,216,86,195,233,200,238,65,0,0,250,194,33,240,82,195,43,7,244,65,240,231,0,195,33,240,82,195,150,67,243,65,0,0,250,194,240,7,79,195,73,46,242,65,240,231,0,195,240,7,79,195,248,83,242,65,0,0,250,194,0,32,75,195,61,10,235,65,240,231,0,195,0,32,75,195,120,250,229,65,0,0,250,194,16,56,71,195,18,148,229,65,240,231,0,195,16,56,71,195,235,115,225,65,0,0,250,194,33,80,67,195,125,208,223,65,240,231,0,195,33,80,67,195,109,69,218,65,0,0,250,194,240,103,63,195,105,239,208,65,240,231,0,195,240,103,63,195,73,157,205,65,0,0,250,194,0,128,59,195,28,235,190,65,240,231,0,195,0,128,59,195,60,78,186,65,0,0,250,194,16,152,55,195,154,153,175,65,240,231,0,195,16,152,55,195,140,74,177,65,0,0,250,194,33,176,51,195,59,112,157,65,240,231,0,195,33,176,51,195,150,67,165,65,0,0,250,194,240,199,47,195,60,206,138,65,240,231,0,195,240,199,47,195,20,191,150,65,0,0,250,194,0,224,43,195,147,169,124,65,240,231,0,195,0,224,43,195,121,233,130,65,0,0,250,194,16,248,39,195,244,253,101,65,240,231,0,195,16,248,39,195,67,173,107,65,0,0,250,194,33,16,36,195,140,219,71,65,240,231,0,195,33,16,36,195,63,198,79,65,0,0,250,194,240,39,32,195,81,218,48,65,240,231,0,195,240,39,32,195,35,74,53,65,0,0,250,194,0,64,28,195,241,104,18,65,240,231,0,195,0,64,28,195,203,16,35,65,0,0,250,194,16,88,24,195,101,199,213,64,240,231,0,195,16,88,24,195,226,88,6,65,0,0,250,194,33,112,20,195,157,70,178,64,240,231,0,195,33,112,20,195,21,116,199,64,0,0,250,194,240,135,16,195,103,68,167,64,240,231,0,195,240,135,16,195,218,172,175,64,0,0,250,194,0,160,12,195,58,6,188,64,240,231,0,195,0,160,12,195,43,217,165,64,0,0,250,194,16,184,8,195,128,101,219,64,240,231,0,195,16,184,8,195,90,240,177,64,0,0,250,194,33,208,4,195,63,140,219,64,240,231,0,195,33,208,4,195,221,12,184,64,0,0,250,194,240,231,0,195,34,79,227,64,240,231,0,195,240,231,0,195,14,74,170,64,0,0,250,194,0,0,250,194,60,131,241,64,240,231,0,195,0,0,250,194,218,3,197,64,0,0,250,194,33,48,242,194,35,91,0,65,240,231,0,195,33,48,242,194,81,20,241,64,0,0,250,194,66,96,234,194,221,53,11,65,240,231,0,195,66,96,234,194,43,48,6,65,0,0,250,194,223,143,226,194,169,89,22,65,240,231,0,195,223,143,226,194,170,72,10,65,0,0,250,194,0,192,218,194,49,223,12,65,240,231,0,195,0,192,218,194,149,253,7,65,0,0,250,194,33,240,210,194,69,240,22,65,240,231,0,195,33,240,210,194,190,234,19,65,0,0,250,194,66,32,203,194,84,227,45,65,240,231,0,195,66,32,203,194,233,72,56,65,0,0,250,194,7,80,195,194,71,114,77,65,240,231,0,195,7,80,195,194,175,148,86,65,0,0,250,194,0,128,187,194,116,36,109,65,240,231,0,195,0,128,187,194,197,254,119,65,0,0,250,194,7,176,179,194,170,241,132,65,240,231,0,195,7,176,179,194,54,205,138,65,0,0,250,194,0,224,171,194,46,255,161,65,240,231,0,195,0,224,171,194,206,136,166,65,0,0,250,194,7,16,164,194,117,147,189,65,240,231,0,195,7,16,164,194,37,134,199,65,0,0,250,194,0,64,156,194,145,143,211,65,240,231,0,195,0,64,156,194,222,241,222,65,0,0,250,194,7,112,148,194,32,82,230,65,240,231,0,195,7,112,148,194,45,50,241,65,0,0,250,194,0,160,140,194,217,61,251,65,240,231,0,195,0,160,140,194,196,194,1,66,0,0,250,194,7,208,132,194,14,62,5,66,240,231,0,195,7,208,132,194,202,3,9,66,0,0,250,194,0,0,122,194,75,106,15,66,240,231,0,195,0,0,122,194,204,63,18,66,0,0,250,194,13,96,106,194,81,235,23,66,240,231,0,195,13,96,106,194,93,156,27,66,0,0,250,194,0,192,90,194,55,154,29,66,240,231,0,195,0,192,90,194,16,122,32,66,0,0,250,194,13,32,75,194,52,162,34,66,240,231,0,195,13,32,75,194,216,193,39,66,0,0,250,194,0,128,59,194,243,142,35,66,240,231,0,195,0,128,59,194,137,129,39,66,0,0,250,194,13,224,43,194,78,209,31,66,240,231,0,195,13,224,43,194,100,140,38,66,0,0,250,194,0,64,28,194,113,91,32,66,240,231,0,195,0,64,28,194,163,146,38,66,0,0,250,194,13,160,12,194,240,69,29,66,240,231,0,195,13,160,12,194,11,36,37,66,0,0,250,194,0,0,250,193,20,110,31,66,240,231,0,195,0,0,250,193,105,64,38,66,0,0,250,194,26,192,218,193,181,38,38,66,240,231,0,195,26,192,218,193,178,46,41,66,0,0,250,194,0,128,187,193,114,57,48,66,240,231,0,195,0,128,187,193,58,227,47,66,0,0,250,194,26,64,156,193,29,184,53,66,240,231,0,195,26,64,156,193,143,228,56,66,0,0,250,194,0,0,122,193,35,202,61,66,240,231,0,195,0,0,122,193,217,61,61,66,0,0,250,194,52,128,59,193,216,1,64,66,240,231,0,195,52,128,59,193,144,96,62,66,0,0,250,194,0,0,250,192,108,73,64,66,240,231,0,195,0,0,250,192,16,122,68,66,0,0,250,194,0,0,122,192,181,230,66,66,240,231,0,195,0,0,122,192,82,137,70,66,0,0,250,194,0,0,0,0,51,51,71,66,240,231,0,195,0,0,0,0,116,100,73,66,0,0,250,194,0,0,122,64,235,226,73,66,240,231,0,195,0,0,122,64,90,53,73,66,0,0,250,194,0,0,122,195,127,234,248,65,33,208,4,195,16,24,118,195,35,219,254,65,33,208,4,195,33,48,114,195,120,250,2,66,33,208,4,195,240,71,110,195,144,177,4,66,33,208,4,195,0,96,106,195,227,199,0,66,33,208,4,195,16,120,102,195,206,42,255,65,33,208,4,195,33,144,98,195,200,135,0,66,33,208,4,195,240,167,94,195,4,167,0,66,33,208,4,195,0,192,90,195,55,9,251,65,33,208,4,195,16,216,86,195,16,233,247,65,33,208,4,195,33,240,82,195,43,118,244,65,33,208,4,195,240,7,79,195,21,29,241,65,33,208,4,195,0,32,75,195,29,201,238,65,33,208,4,195,16,56,71,195,239,184,228,65,33,208,4,195,33,80,67,195,159,188,219,65,33,208,4,195,240,103,63,195,142,6,204,65,33,208,4,195,0,128,59,195,60,61,186,65,33,208,4,195,16,152,55,195,220,70,170,65,33,208,4,195,33,176,51,195,199,41,155,65,33,208,4,195,240,199,47,195,189,227,144,65,33,208,4,195,0,224,43,195,151,16,131,65,33,208,4,195,16,248,39,195,145,15,104,65,33,208,4,195,33,16,36,195,114,249,76,65,33,208,4,195,240,39,32,195,14,45,38,65,33,208,4,195,0,64,28,195,96,234,253,64,33,208,4,195,16,88,24,195,200,36,232,64,33,208,4,195,33,112,20,195,69,100,198,64,33,208,4,195,240,135,16,195,59,170,188,64,33,208,4,195,0,160,12,195,138,205,211,64,33,208,4,195,16,184,8,195,14,21,241,64,33,208,4,195,33,208,4,195,37,93,3,65,33,208,4,195,240,231,0,195,192,219,11,65,33,208,4,195,0,0,250,194,12,135,15,65,33,208,4,195,33,48,242,194,239,155,22,65,33,208,4,195,66,96,234,194,177,191,32,65,33,208,4,195,223,143,226,194,171,149,23,65,33,208,4,195,0,192,218,194,33,176,22,65,33,208,4,195,33,240,210,194,228,20,37,65,33,208,4,195,66,32,203,194,54,205,52,65,33,208,4,195,7,80,195,194,65,130,72,65,33,208,4,195,0,128,187,194,119,45,107,65,33,208,4,195,7,176,179,194,45,50,133,65,33,208,4,195,0,224,171,194,89,134,153,65,33,208,4,195,7,16,164,194,173,122,187,65,33,208,4,195,0,64,156,194,159,77,209,65,33,208,4,195,7,112,148,194,121,233,229,65,33,208,4,195,0,160,140,194,77,4,249,65,33,208,4,195,7,208,132,194,22,251,0,66,33,208,4,195,0,0,122,194,7,31,8,66,33,208,4,195,13,96,106,194,93,126,16,66,33,208,4,195,0,192,90,194,187,56,25,66,33,208,4,195,13,32,75,194,165,44,27,66,33,208,4,195,0,128,59,194,17,135,28,66,33,208,4,195,13,224,43,194,181,149,28,66,33,208,4,195,0,64,28,194,143,228,25,66,33,208,4,195,13,160,12,194,114,57,25,66,33,208,4,195,0,0,250,193,230,255,29,66,33,208,4,195,26,192,218,193,202,148,39,66,33,208,4,195,0,128,187,193,217,14,45,66,33,208,4,195,26,64,156,193,43,24,51,66,33,208,4,195,0,0,122,193,20,255,56,66,33,208,4,195,52,128,59,193,145,207,61,66,33,208,4,195,0,0,250,192,20,144,60,66,33,208,4,195,0,0,122,192,79,64,64,66,33,208,4,195,0,0,0,0,170,66,66,66,33,208,4,195,0,0,122,64,238,107,68,66,33,208,4,195,0,0,122,195,3,248,245,65,16,184,8,195,16,24,118,195,82,201,246,65,16,184,8,195,33,48,114,195,131,192,0,66,16,184,8,195,240,71,110,195,147,152,4,66,16,184,8,195,0,96,106,195,25,68,1,66,16,184,8,195,16,120,102,195,182,115,2,66,16,184,8,195,33,144,98,195,100,76,5,66,16,184,8,195,240,167,94,195,84,146,2,66,16,184,8,195,0,192,90,195,9,27,255,65,16,184,8,195,16,216,86,195,154,25,252,65,16,184,8,195,33,240,82,195,233,166,241,65,16,184,8,195,240,7,79,195,234,4,240,65,16,184,8,195,0,32,75,195,40,143,236,65,16,184,8,195,16,56,71,195,250,254,224,65,16,184,8,195,33,80,67,195,172,28,214,65,16,184,8,195,240,103,63,195,133,107,198,65,16,184,8,195,0,128,59,195,88,74,182,65,16,184,8,195,16,152,55,195,128,200,168,65,16,184,8,195,33,176,51,195,246,151,156,65,16,184,8,195,240,199,47,195,16,105,143,65,16,184,8,195,0,224,43,195,245,185,128,65,16,184,8,195,16,248,39,195,154,119,106,65,16,184,8,195,33,16,36,195,32,65,71,65,16,184,8,195,240,39,32,195,136,0,31,65,16,184,8,195,0,64,28,195,218,254,251,64,16,184,8,195,16,88,24,195,226,30,226,64,16,184,8,195,33,112,20,195,90,47,199,64,16,184,8,195,240,135,16,195,169,193,204,64,16,184,8,195,0,160,12,195,71,172,224,64,16,184,8,195,16,184,8,195,45,91,251,64,16,184,8,195,33,208,4,195,78,81,21,65,16,184,8,195,240,231,0,195,106,188,40,65,16,184,8,195,0,0,250,194,255,33,35,65,16,184,8,195,33,48,242,194,95,169,29,65,16,184,8,195,66,96,234,194,50,230,35,65,16,184,8,195,223,143,226,194,43,65,31,65,16,184,8,195,0,192,218,194,167,220,16,65,16,184,8,195,33,240,210,194,22,106,37,65,16,184,8,195,66,32,203,194,12,147,52,65,16,184,8,195,7,80,195,194,159,171,69,65,16,184,8,195,0,128,187,194,99,238,96,65,16,184,8,195,7,176,179,194,156,162,127,65,16,184,8,195,0,224,171,194,59,240,150,65,16,184,8,195,7,16,164,194,137,210,177,65,16,184,8,195,0,64,156,194,217,95,200,65,16,184,8,195,7,112,148,194,95,41,221,65,16,184,8,195,0,160,140,194,113,61,233,65,16,184,8,195,7,208,132,194,50,247,245,65,16,184,8,195,0,0,122,194,85,176,2,66,16,184,8,195,13,96,106,194,188,22,10,66,16,184,8,195,0,192,90,194,197,143,17,66,16,184,8,195,13,32,75,194,69,199,16,66,16,184,8,195,0,128,59,194,222,19,18,66,16,184,8,195,13,224,43,194,4,22,17,66,16,184,8,195,0,64,28,194,139,172,17,66,16,184,8,195,13,160,12,194,206,170,20,66,16,184,8,195,0,0,250,193,189,146,25,66,16,184,8,195,26,192,218,193,204,93,35,66,16,184,8,195,0,128,187,193,175,229,42,66,16,184,8,195,26,64,156,193,220,6,47,66,16,184,8,195,0,0,122,193,254,20,51,66,16,184,8,195,52,128,59,193,138,78,53,66,16,184,8,195,0,0,250,192,100,187,57,66,16,184,8,195,0,0,122,192,236,64,61,66,16,184,8,195,0,0,0,0,141,168,65,66,16,184,8,195,0,0,122,64,154,153,63,66,16,184,8,195,0,0,122,195,143,66,233,65,0,160,12,195,16,24,118,195,110,35,244,65,0,160,12,195,33,48,114,195,166,155,252,65,0,160,12,195,240,71,110,195,246,151,253,65,0,160,12,195,0,96,106,195,13,160,3,66,0,160,12,195,16,120,102,195,206,25,5,66,0,160,12,195,33,144,98,195,130,51,3,66,0,160,12,195,240,167,94,195,49,136,4,66,0,160,12,195,0,192,90,195,154,55,0,66,0,160,12,195,16,216,86,195,58,35,250,65,0,160,12,195,33,240,82,195,4,231,241,65,0,160,12,195,240,7,79,195,217,206,236,65,0,160,12,195,0,32,75,195,227,182,227,65,0,160,12,195,16,56,71,195,3,248,214,65,0,160,12,195,33,80,67,195,238,124,199,65,0,160,12,195,240,103,63,195,193,74,183,65,0,160,12,195,0,128,59,195,60,206,174,65,0,160,12,195,16,152,55,195,74,140,163,65,0,160,12,195,33,176,51,195,98,144,147,65,0,160,12,195,240,199,47,195,103,85,137,65,0,160,12,195,0,224,43,195,189,82,115,65,0,160,12,195,16,248,39,195,172,173,87,65,0,160,12,195,33,16,36,195,87,91,60,65,0,160,12,195,240,39,32,195,20,80,20,65,0,160,12,195,0,64,28,195,198,22,242,64,0,160,12,195,16,88,24,195,175,148,205,64,0,160,12,195,33,112,20,195,91,95,211,64,0,160,12,195,240,135,16,195,213,33,206,64,0,160,12,195,0,160,12,195,254,154,209,64,0,160,12,195,16,184,8,195,252,24,244,64,0,160,12,195,33,208,4,195,240,80,19,65,0,160,12,195,240,231,0,195,206,25,40,65,0,160,12,195,0,0,250,194,185,252,42,65,0,160,12,195,33,48,242,194,87,236,21,65,0,160,12,195,66,96,234,194,180,142,24,65,0,160,12,195,223,143,226,194,20,174,13,65,0,160,12,195,0,192,218,194,99,238,20,65,0,160,12,195,33,240,210,194,187,213,26,65,0,160,12,195,66,32,203,194,112,95,40,65,0,160,12,195,7,80,195,194,115,215,60,65,0,160,12,195,0,128,187,194,20,174,82,65,0,160,12,195,7,176,179,194,74,12,116,65,0,160,12,195,0,224,171,194,245,219,144,65,0,160,12,195,7,16,164,194,56,103,166,65,0,160,12,195,0,64,156,194,237,30,190,65,0,160,12,195,7,112,148,194,82,167,205,65,0,160,12,195,0,160,140,194,206,25,220,65,0,160,12,195,7,208,132,194,132,141,238,65,0,160,12,195,0,0,122,194,195,228,253,65,0,160,12,195,13,96,106,194,112,142,3,66,0,160,12,195], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+296960);
/* memory initializer */ allocate([0,192,90,194,70,101,8,66,0,160,12,195,13,32,75,194,115,168,10,66,0,160,12,195,0,128,59,194,72,33,8,66,0,160,12,195,13,224,43,194,245,27,7,66,0,160,12,195,0,64,28,194,111,176,8,66,0,160,12,195,13,160,12,194,43,88,16,66,0,160,12,195,0,0,250,193,192,108,27,66,0,160,12,195,26,192,218,193,11,70,34,66,0,160,12,195,0,128,187,193,153,187,42,66,0,160,12,195,26,64,156,193,31,5,46,66,0,160,12,195,0,0,122,193,249,224,46,66,0,160,12,195,52,128,59,193,96,118,47,66,0,160,12,195,0,0,250,192,65,130,54,66,0,160,12,195,0,0,122,192,208,21,59,66,0,160,12,195,0,0,0,0,131,128,60,66,0,160,12,195,0,0,122,64,137,18,61,66,0,160,12,195,0,0,122,195,221,181,226,65,240,135,16,195,16,24,118,195,27,141,236,65,240,135,16,195,33,48,114,195,109,86,240,65,240,135,16,195,240,71,110,195,34,14,245,65,240,135,16,195,0,96,106,195,152,93,2,66,240,135,16,195,16,120,102,195,88,57,5,66,240,135,16,195,33,144,98,195,188,180,3,66,240,135,16,195,240,167,94,195,44,37,2,66,240,135,16,195,0,192,90,195,117,19,255,65,240,135,16,195,16,216,86,195,118,241,253,65,240,135,16,195,33,240,82,195,128,55,237,65,240,135,16,195,240,7,79,195,11,164,226,65,240,135,16,195,0,32,75,195,102,136,214,65,240,135,16,195,16,56,71,195,212,154,200,65,240,135,16,195,33,80,67,195,88,202,184,65,240,135,16,195,240,103,63,195,45,161,169,65,240,135,16,195,0,128,59,195,2,43,162,65,240,135,16,195,16,152,55,195,232,89,147,65,240,135,16,195,33,176,51,195,177,225,129,65,240,135,16,195,240,199,47,195,119,190,107,65,240,135,16,195,0,224,43,195,54,60,95,65,240,135,16,195,16,248,39,195,33,176,72,65,240,135,16,195,33,16,36,195,209,34,42,65,240,135,16,195,240,39,32,195,33,159,8,65,240,135,16,195,0,64,28,195,239,85,234,64,240,135,16,195,16,88,24,195,8,90,214,64,240,135,16,195,33,112,20,195,236,23,172,64,240,135,16,195,240,135,16,195,120,209,176,64,240,135,16,195,0,160,12,195,139,79,190,64,240,135,16,195,16,184,8,195,139,26,229,64,240,135,16,195,33,208,4,195,81,218,8,65,240,135,16,195,240,231,0,195,63,227,26,65,240,135,16,195,0,0,250,194,11,222,28,65,240,135,16,195,33,48,242,194,115,186,26,65,240,135,16,195,66,96,234,194,34,67,29,65,240,135,16,195,223,143,226,194,15,139,22,65,240,135,16,195,0,192,218,194,179,152,24,65,240,135,16,195,33,240,210,194,170,84,30,65,240,135,16,195,66,32,203,194,187,39,39,65,240,135,16,195,7,80,195,194,206,25,54,65,240,135,16,195,0,128,187,194,255,178,90,65,240,135,16,195,7,176,179,194,3,9,123,65,240,135,16,195,0,224,171,194,238,90,141,65,240,135,16,195,7,16,164,194,0,111,160,65,240,135,16,195,0,64,156,194,7,78,178,65,240,135,16,195,7,112,148,194,2,43,192,65,240,135,16,195,0,160,140,194,16,250,212,65,240,135,16,195,7,208,132,194,27,30,230,65,240,135,16,195,0,0,122,194,31,5,248,65,240,135,16,195,13,96,106,194,158,94,255,65,240,135,16,195,0,192,90,194,25,115,0,66,240,135,16,195,13,32,75,194,198,220,5,66,240,135,16,195,0,128,59,194,48,42,6,66,240,135,16,195,13,224,43,194,140,57,6,66,240,135,16,195,0,64,28,194,218,108,9,66,240,135,16,195,13,160,12,194,40,254,16,66,240,135,16,195,0,0,250,193,195,245,23,66,240,135,16,195,26,192,218,193,42,105,33,66,240,135,16,195,0,128,187,193,125,174,41,66,240,135,16,195,26,64,156,193,0,0,48,66,240,135,16,195,0,0,122,193,100,187,48,66,240,135,16,195,52,128,59,193,242,18,48,66,240,135,16,195,0,0,250,192,236,81,52,66,240,135,16,195,0,0,122,192,72,80,54,66,240,135,16,195,0,0,0,0,177,63,51,66,240,135,16,195,0,0,122,64,142,245,52,66,240,135,16,195,0,0,122,195,203,33,220,65,33,112,20,195,16,24,118,195,254,195,227,65,33,112,20,195,33,48,114,195,84,244,230,65,33,112,20,195,240,71,110,195,24,38,239,65,33,112,20,195,0,96,106,195,80,252,247,65,33,112,20,195,16,120,102,195,143,83,255,65,33,112,20,195,33,144,98,195,212,90,4,66,33,112,20,195,240,167,94,195,98,144,0,66,33,112,20,195,0,192,90,195,118,79,248,65,33,112,20,195,16,216,86,195,173,122,244,65,33,112,20,195,33,240,82,195,228,3,233,65,33,112,20,195,240,7,79,195,118,241,212,65,33,112,20,195,0,32,75,195,134,73,202,65,33,112,20,195,16,56,71,195,19,242,184,65,33,112,20,195,33,80,67,195,172,28,169,65,33,112,20,195,240,103,63,195,156,162,157,65,33,112,20,195,0,128,59,195,117,130,147,65,33,112,20,195,16,152,55,195,36,23,141,65,33,112,20,195,33,176,51,195,90,245,125,65,33,112,20,195,240,199,47,195,150,67,103,65,33,112,20,195,0,224,43,195,128,72,83,65,33,112,20,195,16,248,39,195,189,82,60,65,33,112,20,195,33,16,36,195,170,241,39,65,33,112,20,195,240,39,32,195,153,170,4,65,33,112,20,195,0,64,28,195,221,239,231,64,33,112,20,195,16,88,24,195,141,122,217,64,33,112,20,195,33,112,20,195,162,122,175,64,33,112,20,195,240,135,16,195,198,162,131,64,33,112,20,195,0,160,12,195,64,19,149,64,33,112,20,195,16,184,8,195,9,109,198,64,33,112,20,195,33,208,4,195,235,168,245,64,33,112,20,195,240,231,0,195,236,47,17,65,33,112,20,195,0,0,250,194,69,216,12,65,33,112,20,195,33,48,242,194,170,241,20,65,33,112,20,195,66,96,234,194,49,66,20,65,33,112,20,195,223,143,226,194,154,49,30,65,33,112,20,195,0,192,218,194,47,11,19,65,33,112,20,195,33,240,210,194,19,126,23,65,33,112,20,195,66,32,203,194,206,136,34,65,33,112,20,195,7,80,195,194,8,61,52,65,33,112,20,195,0,128,187,194,178,157,87,65,33,112,20,195,7,176,179,194,14,79,125,65,33,112,20,195,0,224,171,194,167,232,140,65,33,112,20,195,7,16,164,194,250,254,149,65,33,112,20,195,0,64,156,194,217,78,164,65,33,112,20,195,7,112,148,194,102,136,188,65,33,112,20,195,0,160,140,194,208,68,210,65,33,112,20,195,7,208,132,194,254,212,229,65,33,112,20,195,0,0,122,194,77,21,243,65,33,112,20,195,13,96,106,194,93,237,247,65,33,112,20,195,0,192,90,194,47,110,251,65,33,112,20,195,13,32,75,194,248,83,255,65,33,112,20,195,0,128,59,194,227,229,1,66,33,112,20,195,13,224,43,194,55,90,0,66,33,112,20,195,0,64,28,194,168,23,8,66,33,112,20,195,13,160,12,194,163,146,14,66,33,112,20,195,0,0,250,193,222,130,22,66,33,112,20,195,26,192,218,193,166,155,30,66,33,112,20,195,0,128,187,193,155,85,41,66,33,112,20,195,26,64,156,193,155,85,45,66,33,112,20,195,0,0,122,193,74,187,47,66,33,112,20,195,52,128,59,193,46,127,47,66,33,112,20,195,0,0,250,192,16,88,49,66,33,112,20,195,0,0,122,192,95,24,49,66,33,112,20,195,0,0,0,0,84,146,42,66,33,112,20,195,0,0,122,64,179,170,45,66,33,112,20,195,0,0,122,195,138,31,222,65,16,88,24,195,16,24,118,195,6,18,226,65,16,88,24,195,33,48,114,195,193,74,224,65,16,88,24,195,240,71,110,195,243,159,235,65,16,88,24,195,0,96,106,195,60,206,254,65,16,88,24,195,16,120,102,195,86,253,255,65,16,88,24,195,33,144,98,195,211,13,1,66,16,88,24,195,240,167,94,195,70,212,1,66,16,88,24,195,0,192,90,195,102,8,243,65,16,88,24,195,16,216,86,195,10,232,232,65,16,88,24,195,33,240,82,195,61,44,221,65,16,88,24,195,240,7,79,195,81,107,204,65,16,88,24,195,0,32,75,195,35,219,190,65,16,88,24,195,16,56,71,195,193,202,173,65,16,88,24,195,33,80,67,195,113,172,159,65,16,88,24,195,240,103,63,195,131,81,149,65,16,88,24,195,0,128,59,195,98,33,139,65,16,88,24,195,16,152,55,195,139,125,138,65,16,88,24,195,33,176,51,195,166,10,126,65,16,88,24,195,240,199,47,195,177,191,92,65,16,88,24,195,0,224,43,195,7,240,63,65,16,88,24,195,16,248,39,195,109,231,46,65,16,88,24,195,33,16,36,195,216,228,19,65,16,88,24,195,240,39,32,195,194,163,254,64,16,88,24,195,0,64,28,195,104,145,222,64,16,88,24,195,16,88,24,195,106,188,208,64,16,88,24,195,33,112,20,195,174,240,179,64,16,88,24,195,240,135,16,195,113,56,138,64,16,88,24,195,0,160,12,195,255,178,71,64,16,88,24,195,16,184,8,195,146,150,159,64,16,88,24,195,33,208,4,195,114,167,212,64,16,88,24,195,240,231,0,195,16,146,239,64,16,88,24,195,0,0,250,194,12,89,1,65,16,88,24,195,33,48,242,194,46,115,15,65,16,88,24,195,66,96,234,194,29,160,17,65,16,88,24,195,223,143,226,194,165,20,22,65,16,88,24,195,0,192,218,194,235,156,15,65,16,88,24,195,33,240,210,194,208,143,12,65,16,88,24,195,66,32,203,194,157,75,28,65,16,88,24,195,7,80,195,194,223,224,38,65,16,88,24,195,0,128,187,194,196,177,89,65,16,88,24,195,7,176,179,194,237,141,130,65,16,88,24,195,0,224,171,194,52,145,141,65,16,88,24,195,7,16,164,194,158,111,148,65,16,88,24,195,0,64,156,194,118,241,160,65,16,88,24,195,7,112,148,194,152,110,183,65,16,88,24,195,0,160,140,194,251,186,206,65,16,88,24,195,7,208,132,194,7,95,227,65,16,88,24,195,0,0,122,194,76,38,240,65,16,88,24,195,13,96,106,194,145,109,243,65,16,88,24,195,0,192,90,194,136,99,247,65,16,88,24,195,13,32,75,194,177,208,250,65,16,88,24,195,0,128,59,194,79,192,248,65,16,88,24,195,13,224,43,194,123,3,242,65,16,88,24,195,0,64,28,194,202,148,3,66,16,88,24,195,13,160,12,194,152,204,10,66,16,88,24,195,0,0,250,193,40,62,19,66,16,88,24,195,26,192,218,193,122,101,27,66,16,88,24,195,0,128,187,193,230,127,37,66,16,88,24,195,26,64,156,193,208,85,40,66,16,88,24,195,0,0,122,193,14,62,41,66,16,88,24,195,52,128,59,193,146,220,47,66,16,88,24,195,0,0,250,192,241,116,49,66,16,88,24,195,0,0,122,192,253,182,44,66,16,88,24,195,0,0,0,0,0,128,39,66,16,88,24,195,0,0,122,64,130,226,42,66,16,88,24,195,0,0,122,195,247,117,218,65,0,64,28,195,16,24,118,195,191,253,222,65,0,64,28,195,33,48,114,195,158,222,221,65,0,64,28,195,240,71,110,195,101,153,227,65,0,64,28,195,0,96,106,195,237,13,244,65,0,64,28,195,16,120,102,195,145,15,249,65,0,64,28,195,33,144,98,195,117,66,1,66,0,64,28,195,240,167,94,195,224,45,250,65,0,64,28,195,0,192,90,195,189,99,236,65,0,64,28,195,16,216,86,195,245,185,214,65,0,64,28,195,33,240,82,195,157,0,202,65,0,64,28,195,240,7,79,195,177,63,194,65,0,64,28,195,0,32,75,195,115,232,190,65,0,64,28,195,16,56,71,195,243,14,178,65,0,64,28,195,33,80,67,195,43,24,165,65,0,64,28,195,240,103,63,195,7,240,155,65,0,64,28,195,0,128,59,195,140,57,144,65,0,64,28,195,16,152,55,195,138,142,118,65,0,64,28,195,33,176,51,195,125,174,94,65,0,64,28,195,240,199,47,195,113,27,61,65,0,64,28,195,0,224,43,195,89,250,20,65,0,64,28,195,16,248,39,195,154,252,12,65,0,64,28,195,33,16,36,195,8,201,0,65,0,64,28,195,240,39,32,195,171,62,207,64,0,64,28,195,0,64,28,195,25,197,186,64,0,64,28,195,16,88,24,195,146,116,182,64,0,64,28,195,33,112,20,195,204,209,193,64,0,64,28,195,240,135,16,195,245,243,126,64,0,64,28,195,0,160,12,195,103,155,51,64,0,64,28,195,16,184,8,195,239,32,98,64,0,64,28,195,33,208,4,195,189,24,159,64,0,64,28,195,240,231,0,195,116,210,214,64,0,64,28,195,0,0,250,194,138,60,4,65,0,64,28,195,33,48,242,194,60,37,16,65,0,64,28,195,66,96,234,194,141,40,14,65,0,64,28,195,223,143,226,194,202,26,24,65,0,64,28,195,0,192,218,194,83,179,18,65,0,64,28,195,33,240,210,194,63,145,13,65,0,64,28,195,66,32,203,194,127,123,28,65,0,64,28,195,7,80,195,194,37,117,50,65,0,64,28,195,0,128,187,194,240,167,86,65,0,64,28,195,7,176,179,194,223,224,125,65,0,64,28,195,0,224,171,194,79,64,138,65,0,64,28,195,7,16,164,194,0,145,145,65,0,64,28,195,0,64,156,194,148,7,156,65,0,64,28,195,7,112,148,194,27,30,176,65,0,64,28,195,0,160,140,194,98,161,194,65,0,64,28,195,7,208,132,194,135,39,212,65,0,64,28,195,0,0,122,194,36,168,223,65,0,64,28,195,13,96,106,194,183,209,230,65,0,64,28,195,0,192,90,194,204,255,244,65,0,64,28,195,13,32,75,194,245,219,247,65,0,64,28,195,0,128,59,194,48,76,248,65,0,64,28,195,13,224,43,194,79,192,241,65,0,64,28,195,0,64,28,194,184,64,0,66,0,64,28,195,13,160,12,194,63,6,8,66,0,64,28,195,0,0,250,193,10,151,13,66,0,64,28,195,26,192,218,193,208,51,23,66,0,64,28,195,0,128,187,193,185,141,32,66,0,64,28,195,26,64,156,193,152,46,34,66,0,64,28,195,0,0,122,193,232,106,38,66,0,64,28,195,52,128,59,193,99,110,44,66,0,64,28,195,0,0,250,192,237,94,46,66,0,64,28,195,0,0,122,192,23,25,44,66,0,64,28,195,0,0,0,0,148,135,37,66,0,64,28,195,0,0,122,64,124,242,38,66,0,64,28,195,0,0,122,195,4,231,216,65,240,39,32,195,16,24,118,195,66,224,215,65,240,39,32,195,33,48,114,195,71,242,213,65,240,39,32,195,240,71,110,195,136,5,219,65,240,39,32,195,0,96,106,195,247,100,233,65,240,39,32,195,16,120,102,195,209,145,248,65,240,39,32,195,33,144,98,195,50,247,250,65,240,39,32,195,240,167,94,195,146,220,241,65,240,39,32,195,0,192,90,195,14,45,223,65,240,39,32,195,16,216,86,195,217,95,211,65,240,39,32,195,33,240,82,195,111,1,192,65,240,39,32,195,240,7,79,195,240,39,189,65,240,39,32,195,0,32,75,195,113,44,189,65,240,39,32,195,16,56,71,195,93,220,182,65,240,39,32,195,33,80,67,195,34,108,165,65,240,39,32,195,240,103,63,195,48,170,154,65,240,39,32,195,0,128,59,195,73,29,143,65,240,39,32,195,16,152,55,195,207,102,101,65,240,39,32,195,33,176,51,195,206,136,62,65,240,39,32,195,240,199,47,195,70,165,25,65,240,39,32,195,0,224,43,195,175,8,249,64,240,39,32,195,16,248,39,195,132,117,2,65,240,39,32,195,33,16,36,195,238,8,239,64,240,39,32,195,240,39,32,195,236,134,207,64,240,39,32,195,0,64,28,195,58,233,168,64,240,39,32,195,16,88,24,195,58,59,150,64,240,39,32,195,33,112,20,195,91,124,164,64,240,39,32,195,240,135,16,195,37,35,81,64,240,39,32,195,0,160,12,195,201,113,85,64,240,39,32,195,16,184,8,195,10,46,30,64,240,39,32,195,33,208,4,195,77,16,133,64,240,39,32,195,240,231,0,195,202,137,206,64,240,39,32,195,0,0,250,194,163,204,255,64,240,39,32,195,33,48,242,194,94,58,6,65,240,39,32,195,66,96,234,194,125,145,9,65,240,39,32,195,223,143,226,194,91,211,23,65,240,39,32,195,0,192,218,194,110,64,19,65,240,39,32,195,33,240,210,194,122,83,4,65,240,39,32,195,66,32,203,194,229,126,27,65,240,39,32,195,7,80,195,194,36,185,61,65,240,39,32,195,0,128,187,194,55,137,105,65,240,39,32,195,7,176,179,194,174,216,128,65,240,39,32,195,0,224,171,194,140,57,141,65,240,39,32,195,7,16,164,194,202,178,145,65,240,39,32,195,0,64,156,194,113,189,149,65,240,39,32,195,7,112,148,194,143,211,165,65,240,39,32,195,0,160,140,194,113,44,188,65,240,39,32,195,7,208,132,194,38,100,211,65,240,39,32,195,0,0,122,194,86,14,222,65,240,39,32,195,13,96,106,194,86,125,225,65,240,39,32,195,0,192,90,194,143,66,231,65,240,39,32,195,13,32,75,194,199,58,236,65,240,39,32,195,0,128,59,194,119,45,235,65,240,39,32,195,13,224,43,194,68,139,236,65,240,39,32,195,0,64,28,194,10,215,244,65,240,39,32,195,13,160,12,194,201,37,4,66,240,39,32,195,0,0,250,193,250,254,10,66,240,39,32,195,26,192,218,193,19,242,21,66,240,39,32,195,0,128,187,193,153,234,28,66,240,39,32,195,26,64,156,193,143,130,30,66,240,39,32,195,0,0,122,193,195,117,31,66,240,39,32,195,52,128,59,193,179,187,36,66,240,39,32,195,0,0,250,192,152,29,39,66,240,39,32,195,0,0,122,192,239,201,38,66,240,39,32,195,0,0,0,0,25,132,33,66,240,39,32,195,0,0,122,64,233,230,33,66,240,39,32,195,0,0,122,195,131,47,211,65,33,16,36,195,16,24,118,195,130,226,210,65,33,16,36,195,33,48,114,195,215,52,213,65,33,16,36,195,240,71,110,195,75,200,217,65,33,16,36,195,0,96,106,195,121,88,233,65,33,16,36,195,16,120,102,195,145,237,240,65,33,16,36,195,33,144,98,195,112,223,242,65,33,16,36,195,240,167,94,195,108,248,230,65,33,16,36,195,0,192,90,195,103,196,214,65,33,16,36,195,16,216,86,195,26,209,199,65,33,16,36,195,33,240,82,195,48,170,195,65,33,16,36,195,240,7,79,195,103,68,189,65,33,16,36,195,0,32,75,195,81,218,181,65,33,16,36,195,16,56,71,195,3,120,169,65,33,16,36,195,33,80,67,195,161,231,156,65,33,16,36,195,240,103,63,195,70,37,148,65,33,16,36,195,0,128,59,195,141,151,134,65,33,16,36,195,16,152,55,195,3,9,94,65,33,16,36,195,33,176,51,195,220,70,38,65,33,16,36,195,240,199,47,195,173,52,240,64,33,16,36,195,0,224,43,195,137,181,210,64,33,16,36,195,16,248,39,195,90,13,218,64,33,16,36,195,33,16,36,195,92,61,220,64,33,16,36,195,240,39,32,195,107,43,217,64,33,16,36,195,0,64,28,195,17,223,165,64,33,16,36,195,16,88,24,195,167,34,142,64,33,16,36,195,33,112,20,195,162,11,146,64,33,16,36,195,240,135,16,195,75,118,64,64,33,16,36,195,0,160,12,195,77,214,56,64,33,16,36,195,16,184,8,195,223,108,37,64,33,16,36,195,33,208,4,195,15,98,77,64,33,16,36,195,240,231,0,195,226,146,170,64,33,16,36,195,0,0,250,194,87,149,215,64,33,16,36,195,33,48,242,194,221,7,247,64,33,16,36,195,66,96,234,194,118,38,7,65,33,16,36,195,223,143,226,194,203,219,16,65,33,16,36,195,0,192,218,194,78,250,12,65,33,16,36,195,33,240,210,194,214,57,248,64,33,16,36,195,66,32,203,194,66,207,49,65,33,16,36,195,7,80,195,194,184,64,77,65,33,16,36,195,0,128,187,194,0,111,108,65,33,16,36,195,7,176,179,194,176,114,129,65,33,16,36,195,0,224,171,194,229,97,139,65,33,16,36,195,7,16,164,194,227,37,148,65,33,16,36,195,0,64,156,194,99,127,154,65,33,16,36,195,7,112,148,194,242,65,161,65,33,16,36,195,0,160,140,194,145,237,181,65,33,16,36,195,7,208,132,194,147,186,196,65,33,16,36,195,0,0,122,194,169,19,211,65,33,16,36,195,13,96,106,194,29,218,213,65,33,16,36,195,0,192,90,194,113,172,216,65,33,16,36,195,13,32,75,194,138,31,230,65,33,16,36,195,0,128,59,194,82,201,229,65,33,16,36,195,13,224,43,194,48,76,234,65,33,16,36,195,0,64,28,194,211,222,235,65,33,16,36,195,13,160,12,194,163,35,3,66,33,16,36,195,0,0,250,193,129,21,11,66,33,16,36,195,26,192,218,193,162,69,18,66,33,16,36,195,0,128,187,193,11,53,22,66,33,16,36,195,26,64,156,193,116,164,25,66,33,16,36,195,0,0,122,193,13,49,29,66,33,16,36,195,52,128,59,193,224,109,29,66,33,16,36,195,0,0,250,192,123,3,32,66,33,16,36,195,0,0,122,192,110,99,30,66,33,16,36,195,0,0,0,0,108,120,27,66,33,16,36,195,0,0,122,64,5,116,27,66,33,16,36,195,0,0,122,195,125,80,202,65,16,248,39,195,16,24,118,195,47,221,200,65,16,248,39,195,33,48,114,195,188,5,204,65,16,248,39,195,240,71,110,195,66,224,212,65,16,248,39,195,0,96,106,195,169,147,226,65,16,248,39,195,16,120,102,195,198,92,228,65,16,248,39,195,33,144,98,195,117,19,226,65,16,248,39,195,240,167,94,195,8,189,214,65,16,248,39,195,0,192,90,195,215,18,200,65,16,248,39,195,16,216,86,195,10,87,194,65,16,248,39,195,33,240,82,195,36,185,190,65,16,248,39,195,240,7,79,195,18,3,182,65,16,248,39,195,0,32,75,195,254,67,180,65,16,248,39,195,16,56,71,195,144,160,162,65,16,248,39,195,33,80,67,195,36,151,150,65,16,248,39,195,240,103,63,195,169,19,136,65,16,248,39,195,0,128,59,195,183,98,108,65,16,248,39,195,16,152,55,195,214,197,70,65,16,248,39,195,33,176,51,195,81,189,21,65,16,248,39,195,240,199,47,195,169,135,204,64,16,248,39,195,0,224,43,195,231,53,159,64,16,248,39,195,16,248,39,195,217,90,155,64,16,248,39,195,33,16,36,195,60,131,177,64,16,248,39,195,240,39,32,195,26,192,162,64,16,248,39,195,0,64,28,195,250,184,116,64,16,248,39,195,16,88,24,195,216,71,125,64,16,248,39,195,33,112,20,195,37,122,147,64,16,248,39,195,240,135,16,195,164,54,95,64,16,248,39,195,0,160,12,195,100,30,81,64,16,248,39,195,16,184,8,195,92,56,240,63,16,248,39,195,33,208,4,195,208,242,44,64,16,248,39,195,240,231,0,195,177,109,144,64,16,248,39,195,0,0,250,194,34,253,192,64,16,248,39,195,33,48,242,194,242,36,237,64,16,248,39,195,66,96,234,194,100,30,238,64,16,248,39,195,223,143,226,194,104,63,240,64,16,248,39,195,0,192,218,194,203,132,220,64,16,248,39,195,33,240,210,194,234,21,2,65,16,248,39,195,66,32,203,194,59,1,60,65,16,248,39,195,7,80,195,194,61,44,98,65,16,248,39,195,0,128,187,194,233,72,119,65,16,248,39,195,7,176,179,194,133,252,132,65,16,248,39,195,0,224,171,194,156,51,135,65,16,248,39,195,7,16,164,194,247,245,147,65,16,248,39,195,0,64,156,194,242,193,152,65,16,248,39,195,7,112,148,194,161,103,160,65,16,248,39,195,0,160,140,194,114,138,167,65,16,248,39,195,7,208,132,194,88,202,183,65,16,248,39,195,0,0,122,194,179,251,196,65,16,248,39,195,13,96,106,194,104,145,211,65,16,248,39,195,0,192,90,194,141,40,213,65,16,248,39,195,13,32,75,194,19,225,213,65,16,248,39,195,0,128,59,194,71,3,225,65,16,248,39,195,13,224,43,194,195,211,236,65,16,248,39,195,0,64,28,194,140,219,242,65,16,248,39,195,13,160,12,194,164,95,252,65,16,248,39,195,0,0,250,193,79,192,6,66,16,248,39,195,26,192,218,193,23,89,14,66,16,248,39,195,0,128,187,193,39,96,16,66,16,248,39,195,26,64,156,193,210,0,22,66,16,248,39,195,0,0,122,193,212,218,24,66,16,248,39,195,52,128,59,193,83,86,24,66,16,248,39,195,0,0,250,192,88,74,26,66,16,248,39,195,0,0,122,192,14,109,25,66,16,248,39,195,0,0,0,0,9,138,23,66,16,248,39,195,0,0,122,64,45,225,20,66,16,248,39,195,0,0,122,195,79,30,193,65,0,224,43,195,16,24,118,195,228,148,190,65,0,224,43,195,33,48,114,195,32,65,198,65,0,224,43,195,240,71,110,195,168,215,208,65,0,224,43,195,0,96,106,195,52,162,215,65,0,224,43,195,16,120,102,195,253,246,211,65,0,224,43,195,33,144,98,195,143,228,203,65,0,224,43,195,240,167,94,195,232,234,197,65,0,224,43,195,0,192,90,195,56,120,187,65,0,224,43,195,16,216,86,195,164,223,185,65,0,224,43,195,33,240,82,195,16,216,176,65,0,224,43,195,240,7,79,195,189,210,165,65,0,224,43,195,0,32,75,195,131,209,165,65,0,224,43,195,16,56,71,195,166,10,153,65,0,224,43,195,33,80,67,195,118,241,130,65,0,224,43,195,240,103,63,195,220,70,103,65,0,224,43,195,0,128,59,195,209,34,72,65,0,224,43,195,16,152,55,195,45,33,32,65,0,224,43,195,33,176,51,195,47,110,251,64,0,224,43,195,240,199,47,195,84,53,140,64,0,224,43,195,0,224,43,195,34,253,78,64,0,224,43,195,16,248,39,195,175,8,88,64,0,224,43,195,33,16,36,195,255,236,121,64,0,224,43,195,240,39,32,195,186,218,80,64,0,224,43,195,0,64,28,195,175,153,56,64,0,224,43,195,16,88,24,195,237,13,135,64,0,224,43,195,33,112,20,195,97,79,117,64,0,224,43,195,240,135,16,195,125,34,63,64,0,224,43,195,0,160,12,195,204,180,53,64,0,224,43,195,16,184,8,195,140,161,252,63,0,224,43,195,33,208,4,195,169,246,237,63,0,224,43,195,240,231,0,195,92,32,77,64,0,224,43,195,0,0,250,194,19,15,164,64,0,224,43,195,33,48,242,194,150,207,187,64,0,224,43,195,66,96,234,194,139,137,206,64,0,224,43,195,223,143,226,194,150,62,201,64,0,224,43,195,0,192,218,194,171,33,241,64,0,224,43,195,33,240,210,194,207,44,23,65,0,224,43,195,66,32,203,194,193,168,54,65,0,224,43,195,7,80,195,194,245,219,91,65,0,224,43,195,0,128,187,194,211,77,109,65,0,224,43,195,7,176,179,194,229,242,119,65,0,224,43,195,0,224,171,194,63,198,130,65,0,224,43,195,7,16,164,194,129,21,146,65,0,224,43,195,0,64,156,194,199,169,144,65,0,224,43,195,7,112,148,194,242,48,145,65,0,224,43,195,0,160,140,194,168,87,165,65,0,224,43,195,7,208,132,194,185,252,184,65,0,224,43,195,0,0,122,194,201,101,195,65,0,224,43,195,13,96,106,194,172,45,212,65,0,224,43,195,0,192,90,194,198,109,211,65,0,224,43,195,13,32,75,194,251,186,213,65,0,224,43,195,0,128,59,194,75,89,224,65,0,224,43,195,13,224,43,194,241,116,237,65,0,224,43,195,0,64,28,194,156,196,245,65,0,224,43,195,13,160,12,194,197,126,249,65,0,224,43,195,0,0,250,193,184,0,1,66,0,224,43,195,26,192,218,193,40,143,5,66,0,224,43,195,0,128,187,193,107,154,7,66,0,224,43,195,26,64,156,193,17,54,11,66,0,224,43,195,0,0,122,193,7,223,14,66,0,224,43,195,52,128,59,193,79,30,15,66,0,224,43,195,0,0,250,192,185,141,14,66,0,224,43,195,0,0,122,192,126,12,14,66,0,224,43,195,0,0,0,0,163,99,14,66,0,224,43,195,0,0,122,64,40,143,13,66,0,224,43,195,0,0,122,195,222,147,187,65,240,199,47,195,16,24,118,195,106,60,192,65,240,199,47,195,33,48,114,195,93,92,200,65,240,199,47,195,240,71,110,195,33,48,207,65,240,199,47,195,0,96,106,195,238,124,212,65,240,199,47,195,16,120,102,195,113,172,206,65,240,199,47,195,33,144,98,195,214,197,198,65,240,199,47,195,240,167,94,195,251,92,199,65,240,199,47,195,0,192,90,195,225,139,185,65,240,199,47,195,16,216,86,195,255,33,179,65,240,199,47,195,33,240,82,195,14,173,167,65,240,199,47,195,240,7,79,195,221,53,155,65,240,199,47,195,0,32,75,195,236,175,146,65,240,199,47,195,16,56,71,195,63,181,129,65,240,199,47,195,33,80,67,195,208,213,100,65,240,199,47,195,240,103,63,195,206,170,71,65,240,199,47,195,0,128,59,195,246,151,34,65,240,199,47,195,16,152,55,195,17,199,250,64,240,199,47,195,33,176,51,195,159,2,179,64,240,199,47,195,240,199,47,195,224,74,94,64,240,199,47,195,0,224,43,195,54,171,26,64,240,199,47,195,16,248,39,195,2,212,8,64,240,199,47,195,33,16,36,195,201,113,23,64,240,199,47,195,240,39,32,195,109,197,28,64,240,199,47,195,0,64,28,195,123,160,25,64,240,199,47,195,16,88,24,195,167,232,64,64,240,199,47,195,33,112,20,195,135,80,37,64,240,199,47,195,240,135,16,195,64,251,67,64,240,199,47,195,0,160,12,195,97,50,57,64,240,199,47,195,16,184,8,195,103,213,37,64,240,199,47,195,33,208,4,195,188,203,17,64,240,199,47,195,240,231,0,195,38,83,107,64,240,199,47,195,0,0,250,194,248,112,167,64,240,199,47,195,33,48,242,194,208,242,195,64,240,199,47,195,66,96,234,194,134,230,199,64,240,199,47,195,223,143,226,194,200,94,217,64,240,199,47,195,0,192,218,194,195,187,250,64,240,199,47,195,33,240,210,194,126,111,21,65,240,199,47,195,66,32,203,194,84,82,52,65,240,199,47,195,7,80,195,194,55,26,81,65,240,199,47,195,0,128,187,194,254,212,94,65,240,199,47,195,7,176,179,194,42,169,111,65,240,199,47,195,0,224,171,194,156,162,122,65,240,199,47,195,7,16,164,194,0,17,131,65,240,199,47,195,0,64,156,194,75,217,128,65,240,199,47,195,7,112,148,194,22,234,141,65,240,199,47,195,0,160,140,194,225,11,159,65,240,199,47,195,7,208,132,194,104,51,178,65,240,199,47,195,0,0,122,194,245,202,190,65,240,199,47,195,13,96,106,194,218,172,202,65,240,199,47,195,0,192,90,194,84,116,213,65,240,199,47,195,13,32,75,194,32,82,223,65,240,199,47,195,0,128,59,194,15,11,228,65,240,199,47,195,13,224,43,194,70,165,237,65,240,199,47,195,0,64,28,194,231,251,244,65,240,199,47,195,13,160,12,194,214,69,252,65,240,199,47,195,0,0,250,193,211,77,253,65,240,199,47,195,26,192,218,193,65,130,249,65,240,199,47,195,0,128,187,193,54,77,252,65,240,199,47,195,26,64,156,193,61,155,255,65,240,199,47,195,0,0,122,193,209,209,3,66,240,199,47,195,52,128,59,193,168,23,7,66,240,199,47,195,0,0,250,192,142,53,7,66,240,199,47,195,0,0,122,192,251,28,10,66,240,199,47,195,0,0,0,0,238,43,11,66,240,199,47,195,0,0,122,64,193,74,11,66,240,199,47,195,0,0,122,195,141,40,178,65,33,176,51,195,16,24,118,195,156,34,190,65,33,176,51,195,33,48,114,195,82,184,196,65,33,176,51,195,240,71,110,195,66,79,209,65,33,176,51,195,0,96,106,195,122,54,204,65,33,176,51,195,16,120,102,195,198,237,195,65,33,176,51,195,33,144,98,195,233,38,199,65,33,176,51,195,240,167,94,195,167,249,189,65,33,176,51,195,0,192,90,195,251,186,183,65,33,176,51,195,16,216,86,195,91,66,165,65,33,176,51,195,33,240,82,195,105,0,154,65,33,176,51,195,240,7,79,195,113,44,139,65,33,176,51,195,0,32,75,195,145,126,127,65,33,176,51,195,16,56,71,195,128,183,84,65,33,176,51,195,33,80,67,195,167,232,62,65,33,176,51,195,240,103,63,195,42,70,26,65,33,176,51,195,0,128,59,195,39,49,254,64,33,176,51,195,16,152,55,195,104,34,198,64,33,176,51,195,33,176,51,195,196,66,129,64,33,176,51,195,240,199,47,195,27,158,246,63,33,176,51,195,0,224,43,195,242,12,222,63,33,176,51,195,16,248,39,195,192,147,126,63,33,176,51,195,33,16,36,195,255,4,127,63,33,176,51,195,240,39,32,195,187,15,128,63,33,176,51,195,0,64,28,195,222,176,197,63,33,176,51,195,16,88,24,195,53,122,89,63,33,176,51,195,33,112,20,195,34,253,166,63,33,176,51,195,240,135,16,195,232,77,177,63,33,176,51,195,0,160,12,195,34,168,106,63,33,176,51,195,16,184,8,195,251,203,178,63,33,176,51,195,33,208,4,195,28,124,11,64,33,176,51,195,240,231,0,195,161,161,128,64,33,176,51,195,0,0,250,194,66,91,183,64,33,176,51,195,33,48,242,194,9,196,231,64,33,176,51,195,66,96,234,194,210,251,225,64,33,176,51,195,223,143,226,194,164,54,253,64,33,176,51,195,0,192,218,194,166,10,250,64,33,176,51,195,33,240,210,194,203,161,33,65,33,176,51,195,66,32,203,194,56,248,60,65,33,176,51,195,7,80,195,194,93,109,79,65,33,176,51,195,0,128,187,194,10,104,89,65,33,176,51,195,7,176,179,194,128,72,87,65,33,176,51,195,0,224,171,194,77,243,98,65,33,176,51,195,7,16,164,194,77,21,102,65,33,176,51,195,0,64,156,194,187,39,118,65,33,176,51,195,7,112,148,194,149,212,137,65,33,176,51,195,0,160,140,194,145,109,151,65,33,176,51,195,7,208,132,194,43,7,160,65,33,176,51,195,0,0,122,194,58,35,178,65,33,176,51,195,13,96,106,194,117,2,201,65,33,176,51,195,0,192,90,194,45,50,218,65,33,176,51,195,13,32,75,194,79,30,226,65,33,176,51,195,0,128,59,194,92,15,235,65,33,176,51,195,13,224,43,194,168,181,241,65,33,176,51,195,0,64,28,194,145,15,251,65,33,176,51,195,13,160,12,194,0,0,250,65,33,176,51,195,0,0,250,193,72,80,248,65,33,176,51,195,26,192,218,193,249,177,242,65,33,176,51,195,0,128,187,193,4,103,244,65,33,176,51,195,26,64,156,193,162,197,247,65,33,176,51,195,0,0,122,193,45,161,254,65,33,176,51,195,52,128,59,193,165,142,0,66,33,176,51,195,0,0,250,192,61,74,0,66,33,176,51,195,0,0,122,192,45,161,2,66,33,176,51,195,0,0,0,0,60,142,3,66,33,176,51,195,0,0,122,64,206,200,3,66,33,176,51,195,0,0,122,195,101,25,179,65,16,152,55,195,16,24,118,195,37,117,182,65,16,152,55,195,33,48,114,195,24,21,185,65,16,152,55,195,240,71,110,195,91,194,192,65,16,152,55,195,0,96,106,195,83,5,192,65,16,152,55,195,16,120,102,195,252,169,187,65,16,152,55,195,33,144,98,195,219,249,190,65,16,152,55,195,240,167,94,195,131,192,183,65,16,152,55,195,0,192,90,195,51,179,174,65,16,152,55,195,16,216,86,195,235,115,159,65,16,152,55,195,33,240,82,195,250,126,134,65,16,152,55,195,240,7,79,195,198,220,114,65,16,152,55,195,0,32,75,195,2,154,92,65,16,152,55,195,16,56,71,195,167,232,58,65,16,152,55,195,33,80,67,195,235,11,28,65,16,152,55,195,240,103,63,195,73,215,226,64,16,152,55,195,0,128,59,195,164,194,205,64,16,152,55,195,16,152,55,195,76,224,164,64,16,152,55,195,33,176,51,195,171,178,113,64,16,152,55,195,240,199,47,195,151,28,65,64,16,152,55,195,0,224,43,195,155,85,187,63,16,152,55,195,16,248,39,195,105,142,68,63,16,152,55,195,33,16,36,195,246,11,254,63,16,152,55,195,240,39,32,195,29,32,140,63,16,152,55,195,0,64,28,195,139,55,166,63,16,152,55,195,16,88,24,195,242,95,80,190,16,152,55,195,33,112,20,195,66,150,1,191,16,152,55,195,240,135,16,195,237,184,45,191,16,152,55,195,0,160,12,195,37,203,41,62,16,152,55,195,16,184,8,195,161,74,185,63,16,152,55,195,33,208,4,195,171,120,183,63,16,152,55,195,240,231,0,195,235,28,79,64,16,152,55,195,0,0,250,194,202,84,155,64,16,152,55,195,33,48,242,194,254,125,212,64,16,152,55,195,66,96,234,194,182,219,254,64,16,152,55,195,223,143,226,194,64,106,8,65,16,152,55,195,0,192,218,194,114,22,249,64,16,152,55,195,33,240,210,194,124,68,23,65,16,152,55,195,66,32,203,194,231,29,53,65,16,152,55,195,7,80,195,194,88,202,67,65,16,152,55,195,0,128,187,194,112,95,76,65,16,152,55,195,7,176,179,194,196,177,78,65,16,152,55,195,0,224,171,194,248,83,79,65,16,152,55,195,7,16,164,194,84,82,85,65,16,152,55,195,0,64,156,194,217,95,102,65,16,152,55,195,7,112,148,194,138,48,130,65,16,152,55,195,0,160,140,194,28,252,143,65,16,152,55,195,7,208,132,194,79,64,156,65,16,152,55,195,0,0,122,194,48,59,171,65,16,152,55,195,13,96,106,194,240,39,199,65,16,152,55,195,0,192,90,194,87,236,215,65,16,152,55,195,13,32,75,194,68,250,228,65,16,152,55,195,0,128,59,194,208,179,241,65,16,152,55,195,13,224,43,194,21,29,244,65,16,152,55,195,0,64,28,194,237,158,245,65,16,152,55,195,13,160,12,194,98,33,245,65,16,152,55,195,0,0,250,193,144,32,238,65,16,152,55,195,26,192,218,193,36,23,242,65,16,152,55,195,0,128,187,193,34,142,248,65,16,152,55,195,26,64,156,193,127,89,248,65,16,152,55,195,0,0,122,193,245,219,247,65,16,152,55,195,52,128,59,193,233,183,243,65,16,152,55,195,0,0,250,192,153,187,240,65,16,152,55,195,0,0,122,192,11,164,240,65,16,152,55,195,0,0,0,0,93,254,239,65,16,152,55,195,0,0,122,64,136,5,240,65,16,152,55,195,0,0,122,195,97,67,178,65,0,128,59,195,16,24,118,195,236,64,185,65,0,128,59,195,33,48,114,195,128,200,185,65,0,128,59,195,240,71,110,195,177,80,189,65,0,128,59,195,0,96,106,195,79,30,188,65,0,128,59,195,16,120,102,195,59,1,183,65,0,128,59,195,33,144,98,195,16,250,177,65,0,128,59,195,240,167,94,195,0,111,171,65,0,128,59,195,0,192,90,195,82,73,163,65,0,128,59,195,16,216,86,195,175,20,146,65,0,128,59,195,33,240,82,195,41,220,130,65,0,128,59,195,240,7,79,195,29,56,81,65,0,128,59,195,0,32,75,195,50,119,57,65,0,128,59,195,16,56,71,195,2,26,29,65,0,128,59,195,33,80,67,195,160,38,9,65,0,128,59,195,240,103,63,195,108,9,190,64,0,128,59,195,0,128,59,195,107,14,165,64,0,128,59,195,16,152,55,195,147,87,121,64,0,128,59,195,33,176,51,195,44,183,144,64,0,128,59,195,240,199,47,195,151,197,134,64,0,128,59,195,0,224,43,195,113,3,40,64,0,128,59,195,16,248,39,195,253,188,237,63,0,128,59,195,33,16,36,195,66,9,9,64,0,128,59,195,240,39,32,195,238,8,39,64,0,128,59,195,0,64,28,195,117,171,255,63,0,128,59,195,16,88,24,195,189,24,86,63,0,128,59,195,33,112,20,195,16,37,250,189,0,128,59,195,240,135,16,195,183,238,154,191,0,128,59,195,0,160,12,195,32,211,30,63,0,128,59,195,16,184,8,195,192,9,13,64,0,128,59,195,33,208,4,195,19,126,35,64,0,128,59,195,240,231,0,195,58,93,70,64,0,128,59,195,0,0,250,194,220,99,152,64,0,128,59,195,33,48,242,194,59,1,211,64,0,128,59,195,66,96,234,194,159,2,237,64,0,128,59,195,223,143,226,194,65,188,2,65,0,128,59,195,0,192,218,194,16,88,14,65,0,128,59,195,33,240,210,194,151,168,24,65,0,128,59,195,66,32,203,194,194,23,45,65,0,128,59,195,7,80,195,194,131,192,67,65,0,128,59,195,0,128,187,194,184,30,63,65,0,128,59,195,7,176,179,194,155,230,68,65,0,128,59,195,0,224,171,194,170,96,76,65,0,128,59,195,7,16,164,194,45,33,84,65,0,128,59,195,0,64,156,194,234,149,99,65,0,128,59,195,7,112,148,194,150,33,115,65,0,128,59,195,0,160,140,194,245,202,141,65,0,128,59,195,7,208,132,194,171,190,168,65,0,128,59,195,0,0,122,194,91,49,190,65,0,128,59,195,13,96,106,194,31,5,199,65,0,128,59,195,0,192,90,194,60,189,212,65,0,128,59,195,13,32,75,194,40,143,224,65,0,128,59,195,0,128,59,194,217,61,241,65,0,128,59,195,13,224,43,194,112,206,246,65,0,128,59,195,0,64,28,194,23,89,246,65,0,128,59,195,13,160,12,194,70,148,242,65,0,128,59,195,0,0,250,193,150,195,230,65,0,128,59,195,26,192,218,193,175,165,241,65,0,128,59,195,0,128,187,193,100,93,252,65,0,128,59,195,26,64,156,193,142,134,248,65,0,128,59,195,0,0,122,193,126,140,244,65,0,128,59,195,52,128,59,193,159,205,239,65,0,128,59,195,0,0,250,192,5,52,230,65,0,128,59,195,0,0,122,192,50,247,225,65,0,128,59,195,0,0,0,0,106,60,219,65,0,128,59,195,0,0,122,64,190,31,221,65,0,128,59,195,0,0,122,195,169,19,172,65,240,103,63,195,16,24,118,195,120,139,177,65,240,103,63,195,33,48,114,195,248,83,179,65,240,103,63,195,240,71,110,195,182,243,180,65,240,103,63,195,0,96,106,195,195,100,183,65,240,103,63,195,16,120,102,195,103,213,180,65,240,103,63,195,33,144,98,195,116,70,172,65,240,103,63,195,240,167,94,195,217,206,161,65,240,103,63,195,0,192,90,195,90,245,156,65,240,103,63,195,16,216,86,195,224,173,144,65,240,103,63,195,33,240,82,195,103,213,127,65,240,103,63,195,240,7,79,195,220,215,75,65,240,103,63,195,0,32,75,195,231,210,31,65,240,103,63,195,16,56,71,195,71,90,236,64,240,103,63,195,33,80,67,195,141,98,199,64,240,103,63,195,240,103,63,195,130,226,155,64,240,103,63,195,0,128,59,195,236,23,156,64,240,103,63,195,16,152,55,195,249,20,145,64,240,103,63,195,33,176,51,195,131,134,167,64,240,103,63,195,240,199,47,195,213,38,135,64,240,103,63,195,0,224,43,195,180,147,93,64,240,103,63,195,16,248,39,195,45,207,103,64,240,103,63,195,33,16,36,195,37,146,68,64,240,103,63,195,240,39,32,195,69,187,108,64,240,103,63,195,0,64,28,195,38,170,134,64,240,103,63,195,16,88,24,195,121,35,15,64,240,103,63,195,33,112,20,195,226,5,21,63,240,103,63,195,240,135,16,195,17,25,230,62,240,103,63,195,0,160,12,195,90,42,27,64,240,103,63,195,16,184,8,195,148,19,99,64,240,103,63,195,33,208,4,195,38,54,101,64,240,103,63,195,240,231,0,195,233,125,141,64,240,103,63,195,0,0,250,194,157,186,167,64,240,103,63,195,33,48,242,194,123,218,209,64,240,103,63,195,66,96,234,194,37,233,221,64,240,103,63,195,223,143,226,194,121,117,247,64,240,103,63,195,0,192,218,194,2,183,0,65,240,103,63,195,33,240,210,194,7,124,18,65,240,103,63,195,66,32,203,194,50,85,47,65,240,103,63,195,7,80,195,194,3,9,67,65,240,103,63,195,0,128,187,194,158,94,58,65,240,103,63,195,7,176,179,194,34,108,58,65,240,103,63,195,0,224,171,194,238,235,70,65,240,103,63,195,7,16,164,194,194,23,86,65,240,103,63,195,0,64,156,194,14,45,102,65,240,103,63,195,7,112,148,194], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+307200);
/* memory initializer */ allocate([188,116,129,65,240,103,63,195,0,160,140,194,222,241,151,65,240,103,63,195,7,208,132,194,122,165,182,65,240,103,63,195,0,0,122,194,43,24,203,65,240,103,63,195,13,96,106,194,236,47,209,65,240,103,63,195,0,192,90,194,163,1,205,65,240,103,63,195,13,32,75,194,58,146,215,65,240,103,63,195,0,128,59,194,92,15,232,65,240,103,63,195,13,224,43,194,131,209,238,65,240,103,63,195,0,64,28,194,34,253,240,65,240,103,63,195,13,160,12,194,172,11,238,65,240,103,63,195,0,0,250,193,47,238,227,65,240,103,63,195,26,192,218,193,171,79,236,65,240,103,63,195,0,128,187,193,125,191,243,65,240,103,63,195,26,64,156,193,145,254,242,65,240,103,63,195,0,0,122,193,117,2,243,65,240,103,63,195,52,128,59,193,70,20,232,65,240,103,63,195,0,0,250,192,197,143,225,65,240,103,63,195,0,0,122,192,123,20,209,65,240,103,63,195,0,0,0,0,53,239,201,65,240,103,63,195,0,0,122,64,238,235,202,65,240,103,63,195,0,0,122,195,113,61,166,65,33,80,67,195,16,24,118,195,138,159,166,65,33,80,67,195,33,48,114,195,91,194,169,65,33,80,67,195,240,71,110,195,136,133,176,65,33,80,67,195,0,96,106,195,14,173,177,65,33,80,67,195,16,120,102,195,252,24,177,65,33,80,67,195,33,144,98,195,203,33,168,65,33,80,67,195,240,167,94,195,214,86,155,65,33,80,67,195,0,192,90,195,115,87,142,65,33,80,67,195,16,216,86,195,7,240,132,65,33,80,67,195,33,240,82,195,211,77,107,65,33,80,67,195,240,7,79,195,182,243,60,65,33,80,67,195,0,32,75,195,59,54,26,65,33,80,67,195,16,56,71,195,161,248,207,64,33,80,67,195,33,80,67,195,20,150,199,64,33,80,67,195,240,103,63,195,215,81,211,64,33,80,67,195,0,128,59,195,223,55,199,64,33,80,67,195,16,152,55,195,37,88,175,64,33,80,67,195,33,176,51,195,111,100,165,64,33,80,67,195,240,199,47,195,111,187,154,64,33,80,67,195,0,224,43,195,252,111,133,64,33,80,67,195,16,248,39,195,119,248,172,64,33,80,67,195,33,16,36,195,246,127,160,64,33,80,67,195,240,39,32,195,122,223,146,64,33,80,67,195,0,64,28,195,206,112,151,64,33,80,67,195,16,88,24,195,197,85,73,64,33,80,67,195,33,112,20,195,211,159,149,63,33,80,67,195,240,135,16,195,96,118,31,64,33,80,67,195,0,160,12,195,47,81,127,64,33,80,67,195,16,184,8,195,65,101,165,64,33,80,67,195,33,208,4,195,212,14,182,64,33,80,67,195,240,231,0,195,42,169,174,64,33,80,67,195,0,0,250,194,64,246,164,64,33,80,67,195,33,48,242,194,219,196,206,64,33,80,67,195,66,96,234,194,99,180,235,64,33,80,67,195,223,143,226,194,151,40,2,65,33,80,67,195,0,192,218,194,102,73,240,64,33,80,67,195,33,240,210,194,101,252,14,65,33,80,67,195,66,32,203,194,186,107,42,65,33,80,67,195,7,80,195,194,12,2,42,65,33,80,67,195,0,128,187,194,253,135,40,65,33,80,67,195,7,176,179,194,122,54,57,65,33,80,67,195,0,224,171,194,135,22,57,65,33,80,67,195,7,16,164,194,211,222,99,65,33,80,67,195,0,64,156,194,129,4,129,65,33,80,67,195,7,112,148,194,146,203,136,65,33,80,67,195,0,160,140,194,134,184,163,65,33,80,67,195,7,208,132,194,162,69,188,65,33,80,67,195,0,0,122,194,222,241,200,65,33,80,67,195,13,96,106,194,166,138,207,65,33,80,67,195,0,192,90,194,255,33,204,65,33,80,67,195,13,32,75,194,84,210,200,65,33,80,67,195,0,128,59,194,38,211,217,65,33,80,67,195,13,224,43,194,238,218,229,65,33,80,67,195,0,64,28,194,236,47,231,65,33,80,67,195,13,160,12,194,70,165,226,65,33,80,67,195,0,0,250,193,159,205,219,65,33,80,67,195,26,192,218,193,170,2,223,65,33,80,67,195,0,128,187,193,131,209,224,65,33,80,67,195,26,64,156,193,29,218,231,65,33,80,67,195,0,0,122,193,224,173,228,65,33,80,67,195,52,128,59,193,76,38,218,65,33,80,67,195,0,0,250,192,86,125,214,65,33,80,67,195,0,0,122,192,167,232,202,65,33,80,67,195,0,0,0,0,11,181,185,65,33,80,67,195,0,0,122,64,94,203,184,65,33,80,67,195,0,0,122,195,237,158,161,65,16,56,71,195,16,24,118,195,76,183,156,65,16,56,71,195,33,48,114,195,140,202,162,65,16,56,71,195,240,71,110,195,2,60,168,65,16,56,71,195,0,96,106,195,63,70,172,65,16,56,71,195,16,120,102,195,185,124,165,65,16,56,71,195,33,144,98,195,87,108,159,65,16,56,71,195,240,167,94,195,11,198,149,65,16,56,71,195,0,192,90,195,186,218,139,65,16,56,71,195,16,216,86,195,104,179,112,65,16,56,71,195,33,240,82,195,253,135,86,65,16,56,71,195,240,7,79,195,52,128,43,65,16,56,71,195,0,32,75,195,238,37,5,65,16,56,71,195,16,56,71,195,241,186,233,64,16,56,71,195,33,80,67,195,116,210,224,64,16,56,71,195,240,103,63,195,160,108,236,64,16,56,71,195,0,128,59,195,162,98,222,64,16,56,71,195,16,152,55,195,135,220,211,64,16,56,71,195,33,176,51,195,213,178,209,64,16,56,71,195,240,199,47,195,189,227,202,64,16,56,71,195,0,224,43,195,210,0,160,64,16,56,71,195,16,248,39,195,31,128,208,64,16,56,71,195,33,16,36,195,227,83,214,64,16,56,71,195,240,39,32,195,31,128,181,64,16,56,71,195,0,64,28,195,174,182,156,64,16,56,71,195,16,88,24,195,221,7,92,64,16,56,71,195,33,112,20,195,184,117,5,64,16,56,71,195,240,135,16,195,151,115,119,64,16,56,71,195,0,160,12,195,39,194,194,64,16,56,71,195,16,184,8,195,151,255,223,64,16,56,71,195,33,208,4,195,209,63,5,65,16,56,71,195,240,231,0,195,240,237,8,65,16,56,71,195,0,0,250,194,253,77,4,65,16,56,71,195,33,48,242,194,129,50,10,65,16,56,71,195,66,96,234,194,231,198,17,65,16,56,71,195,223,143,226,194,99,180,27,65,16,56,71,195,0,192,218,194,221,65,18,65,16,56,71,195,33,240,210,194,215,163,21,65,16,56,71,195,66,32,203,194,69,1,25,65,16,56,71,195,7,80,195,194,131,250,27,65,16,56,71,195,0,128,187,194,97,195,47,65,16,56,71,195,7,176,179,194,23,72,70,65,16,56,71,195,0,224,171,194,79,64,90,65,16,56,71,195,7,16,164,194,78,209,127,65,16,56,71,195,0,64,156,194,149,84,142,65,16,56,71,195,7,112,148,194,125,174,150,65,16,56,71,195,0,160,140,194,165,44,162,65,16,56,71,195,7,208,132,194,12,2,188,65,16,56,71,195,0,0,122,194,192,219,196,65,16,56,71,195,13,96,106,194,34,108,202,65,16,56,71,195,0,192,90,194,146,203,201,65,16,56,71,195,13,32,75,194,7,240,191,65,16,56,71,195,0,128,59,194,215,35,197,65,16,56,71,195,13,224,43,194,142,245,212,65,16,56,71,195,0,64,28,194,19,97,220,65,16,56,71,195,13,160,12,194,211,188,219,65,16,56,71,195,0,0,250,193,38,83,218,65,16,56,71,195,26,192,218,193,121,233,211,65,16,56,71,195,0,128,187,193,220,215,210,65,16,56,71,195,26,64,156,193,250,109,209,65,16,56,71,195,0,0,122,193,200,7,210,65,16,56,71,195,52,128,59,193,187,39,206,65,16,56,71,195,0,0,250,192,30,39,202,65,16,56,71,195,0,0,122,192,246,23,187,65,16,56,71,195,0,0,0,0,215,146,180,65,16,56,71,195,0,0,122,64,95,169,172,65,16,56,71,195,0,0,122,195,32,210,154,65,0,32,75,195,16,24,118,195,7,95,154,65,0,32,75,195,33,48,114,195,217,206,153,65,0,32,75,195,240,71,110,195,81,107,155,65,0,32,75,195,0,96,106,195,31,116,155,65,0,32,75,195,16,120,102,195,148,118,154,65,0,32,75,195,33,144,98,195,45,178,145,65,0,32,75,195,240,167,94,195,97,178,142,65,0,32,75,195,0,192,90,195,226,233,134,65,0,32,75,195,16,216,86,195,147,169,109,65,0,32,75,195,33,240,82,195,205,204,70,65,0,32,75,195,240,7,79,195,36,151,32,65,0,32,75,195,0,32,75,195,47,6,16,65,0,32,75,195,16,56,71,195,62,208,9,65,0,32,75,195,33,80,67,195,164,136,1,65,0,32,75,195,240,103,63,195,35,231,2,65,0,32,75,195,0,128,59,195,67,28,248,64,0,32,75,195,16,152,55,195,123,73,247,64,0,32,75,195,33,176,51,195,124,237,246,64,0,32,75,195,240,199,47,195,214,86,247,64,0,32,75,195,0,224,43,195,231,111,214,64,0,32,75,195,16,248,39,195,49,211,210,64,0,32,75,195,33,16,36,195,29,90,207,64,0,32,75,195,240,39,32,195,68,221,190,64,0,32,75,195,0,64,28,195,237,71,187,64,0,32,75,195,16,88,24,195,83,203,164,64,0,32,75,195,33,112,20,195,31,104,147,64,0,32,75,195,240,135,16,195,116,181,203,64,0,32,75,195,0,160,12,195,207,78,245,64,0,32,75,195,16,184,8,195,44,229,10,65,0,32,75,195,33,208,4,195,83,232,29,65,0,32,75,195,240,231,0,195,251,244,30,65,0,32,75,195,0,0,250,194,4,86,47,65,0,32,75,195,33,48,242,194,103,213,46,65,0,32,75,195,66,96,234,194,241,244,54,65,0,32,75,195,223,143,226,194,118,224,48,65,0,32,75,195,0,192,218,194,105,0,52,65,0,32,75,195,33,240,210,194,220,70,60,65,0,32,75,195,66,32,203,194,8,61,46,65,0,32,75,195,7,80,195,194,203,16,54,65,0,32,75,195,0,128,187,194,33,176,66,65,0,32,75,195,7,176,179,194,103,68,76,65,0,32,75,195,0,224,171,194,47,221,115,65,0,32,75,195,7,16,164,194,143,211,143,65,0,32,75,195,0,64,156,194,84,244,156,65,0,32,75,195,7,112,148,194,12,19,157,65,0,32,75,195,0,160,140,194,79,64,158,65,0,32,75,195,7,208,132,194,154,153,171,65,0,32,75,195,0,0,122,194,173,250,192,65,0,32,75,195,13,96,106,194,229,80,199,65,0,32,75,195,0,192,90,194,89,23,194,65,0,32,75,195,13,32,75,194,51,51,192,65,0,32,75,195,0,128,59,194,164,223,184,65,0,32,75,195,13,224,43,194,54,60,192,65,0,32,75,195,0,64,28,194,146,203,203,65,0,32,75,195,13,160,12,194,228,148,207,65,0,32,75,195,0,0,250,193,76,183,204,65,0,32,75,195,26,192,218,193,2,154,200,65,0,32,75,195,0,128,187,193,199,58,197,65,0,32,75,195,26,64,156,193,31,5,200,65,0,32,75,195,0,0,122,193,33,176,201,65,0,32,75,195,52,128,59,193,178,174,193,65,0,32,75,195,0,0,250,192,36,23,185,65,0,32,75,195,0,0,122,192,130,115,171,65,0,32,75,195,0,0,0,0,247,6,167,65,0,32,75,195,0,0,122,64,15,139,162,65,0,32,75,195,0,0,122,195,183,226,147,65,240,7,79,195,16,24,118,195,75,72,151,65,240,7,79,195,33,48,114,195,255,33,142,65,240,7,79,195,240,71,110,195,219,10,147,65,240,7,79,195,0,96,106,195,97,50,142,65,240,7,79,195,16,120,102,195,151,144,145,65,240,7,79,195,33,144,98,195,67,173,139,65,240,7,79,195,240,167,94,195,220,70,132,65,240,7,79,195,0,192,90,195,245,74,118,65,240,7,79,195,16,216,86,195,21,140,96,65,240,7,79,195,33,240,82,195,134,201,56,65,240,7,79,195,240,7,79,195,64,164,45,65,240,7,79,195,0,32,75,195,45,67,40,65,240,7,79,195,16,56,71,195,99,238,39,65,240,7,79,195,33,80,67,195,34,67,25,65,240,7,79,195,240,103,63,195,151,185,22,65,240,7,79,195,0,128,59,195,246,93,17,65,240,7,79,195,16,152,55,195,245,156,1,65,240,7,79,195,33,176,51,195,222,2,9,65,240,7,79,195,240,199,47,195,25,231,11,65,240,7,79,195,0,224,43,195,238,252,8,65,240,7,79,195,16,248,39,195,112,95,228,64,240,7,79,195,33,16,36,195,83,174,223,64,240,7,79,195,240,39,32,195,125,208,227,64,240,7,79,195,0,64,28,195,55,137,197,64,240,7,79,195,16,88,24,195,74,36,206,64,240,7,79,195,33,112,20,195,143,252,228,64,240,7,79,195,240,135,16,195,43,217,247,64,240,7,79,195,0,160,12,195,34,55,22,65,240,7,79,195,16,184,8,195,218,27,35,65,240,7,79,195,33,208,4,195,223,79,40,65,240,7,79,195,240,231,0,195,150,33,55,65,240,7,79,195,0,0,250,194,214,197,70,65,240,7,79,195,33,48,242,194,20,208,77,65,240,7,79,195,66,96,234,194,213,120,86,65,240,7,79,195,223,143,226,194,73,157,78,65,240,7,79,195,0,192,218,194,140,185,78,65,240,7,79,195,33,240,210,194,16,122,83,65,240,7,79,195,66,32,203,194,6,129,78,65,240,7,79,195,7,80,195,194,87,236,78,65,240,7,79,195,0,128,187,194,74,123,89,65,240,7,79,195,7,176,179,194,85,193,104,65,240,7,79,195,0,224,171,194,174,71,131,65,240,7,79,195,7,16,164,194,236,47,153,65,240,7,79,195,0,64,156,194,231,140,164,65,240,7,79,195,7,112,148,194,212,43,161,65,240,7,79,195,0,160,140,194,74,123,159,65,240,7,79,195,7,208,132,194,104,162,163,65,240,7,79,195,0,0,122,194,0,17,176,65,240,7,79,195,13,96,106,194,245,74,186,65,240,7,79,195,0,192,90,194,246,151,186,65,240,7,79,195,13,32,75,194,2,26,184,65,240,7,79,195,0,128,59,194,98,144,187,65,240,7,79,195,13,224,43,194,174,216,187,65,240,7,79,195,0,64,28,194,150,178,195,65,240,7,79,195,13,160,12,194,201,229,200,65,240,7,79,195,0,0,250,193,237,13,203,65,240,7,79,195,26,192,218,193,114,10,192,65,240,7,79,195,0,128,187,193,67,45,179,65,240,7,79,195,26,64,156,193,75,217,187,65,240,7,79,195,0,0,122,193,242,193,190,65,240,7,79,195,52,128,59,193,45,33,179,65,240,7,79,195,0,0,250,192,44,212,173,65,240,7,79,195,0,0,122,192,60,78,161,65,240,7,79,195,0,0,0,0,5,69,149,65,240,7,79,195,0,0,122,64,234,132,146,65,240,7,79,195,0,0,122,195,174,54,141,65,33,240,82,195,16,24,118,195,111,129,142,65,33,240,82,195,33,48,114,195,75,234,139,65,33,240,82,195,240,71,110,195,107,171,133,65,33,240,82,195,0,96,106,195,222,147,126,65,33,240,82,195,16,120,102,195,235,98,133,65,33,240,82,195,33,144,98,195,95,135,133,65,33,240,82,195,240,167,94,195,25,226,105,65,33,240,82,195,0,192,90,195,104,34,91,65,33,240,82,195,16,216,86,195,203,161,67,65,33,240,82,195,33,240,82,195,2,154,56,65,33,240,82,195,240,7,79,195,73,157,59,65,33,240,82,195,0,32,75,195,184,175,55,65,33,240,82,195,16,56,71,195,253,246,61,65,33,240,82,195,33,80,67,195,109,197,59,65,33,240,82,195,240,103,63,195,67,28,42,65,33,240,82,195,0,128,59,195,193,57,43,65,33,240,82,195,16,152,55,195,25,156,24,65,33,240,82,195,33,176,51,195,129,108,26,65,33,240,82,195,240,199,47,195,224,91,23,65,33,240,82,195,0,224,43,195,77,21,23,65,33,240,82,195,16,248,39,195,109,103,0,65,33,240,82,195,33,16,36,195,156,191,214,64,33,240,82,195,240,39,32,195,176,56,231,64,33,240,82,195,0,64,28,195,223,195,240,64,33,240,82,195,16,88,24,195,127,123,7,65,33,240,82,195,33,112,20,195,105,186,9,65,33,240,82,195,240,135,16,195,83,63,30,65,33,240,82,195,0,160,12,195,42,169,46,65,33,240,82,195,16,184,8,195,184,30,55,65,33,240,82,195,33,208,4,195,79,30,75,65,33,240,82,195,240,231,0,195,254,212,85,65,33,240,82,195,0,0,250,194,86,159,104,65,33,240,82,195,33,48,242,194,106,77,108,65,33,240,82,195,66,96,234,194,137,65,125,65,33,240,82,195,223,143,226,194,194,23,120,65,33,240,82,195,0,192,218,194,206,170,101,65,33,240,82,195,33,240,210,194,130,226,111,65,33,240,82,195,66,32,203,194,146,92,111,65,33,240,82,195,7,80,195,194,46,144,114,65,33,240,82,195,0,128,187,194,219,138,114,65,33,240,82,195,7,176,179,194,32,82,132,65,33,240,82,195,0,224,171,194,244,236,145,65,33,240,82,195,7,16,164,194,161,103,158,65,33,240,82,195,0,64,156,194,223,96,167,65,33,240,82,195,7,112,148,194,244,125,164,65,33,240,82,195,0,160,140,194,109,103,168,65,33,240,82,195,7,208,132,194,39,49,168,65,33,240,82,195,0,0,122,194,214,197,173,65,33,240,82,195,13,96,106,194,86,253,182,65,33,240,82,195,0,192,90,194,74,12,189,65,33,240,82,195,13,32,75,194,18,3,189,65,33,240,82,195,0,128,59,194,65,130,188,65,33,240,82,195,13,224,43,194,9,10,193,65,33,240,82,195,0,64,28,194,178,29,197,65,33,240,82,195,13,160,12,194,240,150,202,65,33,240,82,195,0,0,250,193,154,247,197,65,33,240,82,195,26,192,218,193,146,220,177,65,33,240,82,195,0,128,187,193,21,12,173,65,33,240,82,195,26,64,156,193,124,114,178,65,33,240,82,195,0,0,122,193,228,131,177,65,33,240,82,195,52,128,59,193,159,171,169,65,33,240,82,195,0,0,250,192,215,180,162,65,33,240,82,195,0,0,122,192,214,214,147,65,33,240,82,195,0,0,0,0,164,112,137,65,33,240,82,195,0,0,122,64,181,183,129,65,33,240,82,195,0,0,122,195,211,60,141,65,16,216,86,195,16,24,118,195,219,121,137,65,16,216,86,195,33,48,114,195,200,135,141,65,16,216,86,195,240,71,110,195,215,18,135,65,16,216,86,195,0,96,106,195,108,120,107,65,16,216,86,195,16,120,102,195,245,219,118,65,16,216,86,195,33,144,98,195,237,13,105,65,16,216,86,195,240,167,94,195,66,207,82,65,16,216,86,195,0,192,90,195,4,86,64,65,16,216,86,195,16,216,86,195,247,117,63,65,16,216,86,195,33,240,82,195,92,143,72,65,16,216,86,195,240,7,79,195,128,72,73,65,16,216,86,195,0,32,75,195,50,230,75,65,16,216,86,195,16,56,71,195,63,198,79,65,16,216,86,195,33,80,67,195,168,87,76,65,16,216,86,195,240,103,63,195,30,167,63,65,16,216,86,195,0,128,59,195,232,217,62,65,16,216,86,195,16,152,55,195,122,54,44,65,16,216,86,195,33,176,51,195,114,138,37,65,16,216,86,195,240,199,47,195,185,252,34,65,16,216,86,195,0,224,43,195,74,12,38,65,16,216,86,195,16,248,39,195,48,13,13,65,16,216,86,195,33,16,36,195,147,82,233,64,16,216,86,195,240,39,32,195,29,61,7,65,16,216,86,195,0,64,28,195,24,91,28,65,16,216,86,195,16,88,24,195,165,78,39,65,16,216,86,195,33,112,20,195,63,198,48,65,16,216,86,195,240,135,16,195,14,45,67,65,16,216,86,195,0,160,12,195,137,65,92,65,16,216,86,195,16,184,8,195,200,152,110,65,16,216,86,195,33,208,4,195,189,82,119,65,16,216,86,195,240,231,0,195,134,184,130,65,16,216,86,195,0,0,250,194,57,197,132,65,16,216,86,195,33,48,242,194,27,175,135,65,16,216,86,195,66,96,234,194,78,98,132,65,16,216,86,195,223,143,226,194,166,155,133,65,16,216,86,195,0,192,218,194,240,150,133,65,16,216,86,195,33,240,210,194,73,29,129,65,16,216,86,195,66,32,203,194,163,1,119,65,16,216,86,195,7,80,195,194,189,227,127,65,16,216,86,195,0,128,187,194,158,94,134,65,16,216,86,195,7,176,179,194,7,95,148,65,16,216,86,195,0,224,171,194,103,68,162,65,16,216,86,195,7,16,164,194,57,197,166,65,16,216,86,195,0,64,156,194,160,26,170,65,16,216,86,195,7,112,148,194,147,24,177,65,16,216,86,195,0,160,140,194,140,74,177,65,16,216,86,195,7,208,132,194,48,42,174,65,16,216,86,195,0,0,122,194,149,101,184,65,16,216,86,195,13,96,106,194,15,156,184,65,16,216,86,195,0,192,90,194,251,186,193,65,16,216,86,195,13,32,75,194,49,136,191,65,16,216,86,195,0,128,59,194,133,235,184,65,16,216,86,195,13,224,43,194,46,127,195,65,16,216,86,195,0,64,28,194,71,242,205,65,16,216,86,195,13,160,12,194,166,27,197,65,16,216,86,195,0,0,250,193,242,65,186,65,16,216,86,195,26,192,218,193,204,221,174,65,16,216,86,195,0,128,187,193,177,225,169,65,16,216,86,195,26,64,156,193,154,119,170,65,16,216,86,195,0,0,122,193,171,207,165,65,16,216,86,195,52,128,59,193,41,92,157,65,16,216,86,195,0,0,250,192,185,141,150,65,16,216,86,195,0,0,122,192,5,52,133,65,16,216,86,195,0,0,0,0,225,11,110,65,16,216,86,195,0,0,122,64,68,139,100,65,16,216,86,195,0,0,122,195,60,61,137,65,0,192,90,195,16,24,118,195,55,9,133,65,0,192,90,195,33,48,114,195,154,247,141,65,0,192,90,195,240,71,110,195,126,29,139,65,0,192,90,195,0,96,106,195,124,97,116,65,0,192,90,195,16,120,102,195,217,95,86,65,0,192,90,195,33,144,98,195,137,210,77,65,0,192,90,195,240,167,94,195,246,40,69,65,0,192,90,195,0,192,90,195,249,15,67,65,0,192,90,195,16,216,86,195,0,145,70,65,0,192,90,195,33,240,82,195,69,216,78,65,0,192,90,195,240,7,79,195,39,49,86,65,0,192,90,195,0,32,75,195,124,242,86,65,0,192,90,195,16,56,71,195,121,233,75,65,0,192,90,195,33,80,67,195,33,176,72,65,0,192,90,195,240,103,63,195,152,76,66,65,0,192,90,195,0,128,59,195,234,149,69,65,0,192,90,195,16,152,55,195,2,188,51,65,0,192,90,195,33,176,51,195,244,108,54,65,0,192,90,195,240,199,47,195,145,237,51,65,0,192,90,195,0,224,43,195,189,227,37,65,0,192,90,195,16,248,39,195,96,176,19,65,0,192,90,195,33,16,36,195,50,189,5,65,0,192,90,195,240,39,32,195,122,199,37,65,0,192,90,195,0,64,28,195,133,124,61,65,0,192,90,195,16,88,24,195,71,114,83,65,0,192,90,195,33,112,20,195,22,251,89,65,0,192,90,195,240,135,16,195,75,89,109,65,0,192,90,195,0,160,12,195,223,224,120,65,0,192,90,195,16,184,8,195,200,152,135,65,0,192,90,195,33,208,4,195,127,89,143,65,0,192,90,195,240,231,0,195,62,249,141,65,0,192,90,195,0,0,250,194,77,149,142,65,0,192,90,195,33,48,242,194,194,134,139,65,0,192,90,195,66,96,234,194,169,36,139,65,0,192,90,195,223,143,226,194,136,227,143,65,0,192,90,195,0,192,218,194,48,42,144,65,0,192,90,195,33,240,210,194,250,109,141,65,0,192,90,195,66,32,203,194,228,3,139,65,0,192,90,195,7,80,195,194,225,139,140,65,0,192,90,195,0,128,187,194,185,13,144,65,0,192,90,195,7,176,179,194,17,182,151,65,0,192,90,195,0,224,171,194,156,179,166,65,0,192,90,195,7,16,164,194,240,167,177,65,0,192,90,195,0,64,156,194,191,253,184,65,0,192,90,195,7,112,148,194,111,18,179,65,0,192,90,195,0,160,140,194,232,89,178,65,0,192,90,195,7,208,132,194,0,145,174,65,0,192,90,195,0,0,122,194,0,145,183,65,0,192,90,195,13,96,106,194,160,9,194,65,0,192,90,195,0,192,90,194,27,175,196,65,0,192,90,195,13,32,75,194,138,159,191,65,0,192,90,195,0,128,59,194,124,97,183,65,0,192,90,195,13,224,43,194,223,207,200,65,0,192,90,195,0,64,28,194,214,69,201,65,0,192,90,195,13,160,12,194,179,234,188,65,0,192,90,195,0,0,250,193,214,86,174,65,0,192,90,195,26,192,218,193,129,132,162,65,0,192,90,195,0,128,187,193,177,97,159,65,0,192,90,195,26,64,156,193,21,157,162,65,0,192,90,195,0,0,122,193,188,133,153,65,0,192,90,195,52,128,59,193,111,129,138,65,0,192,90,195,0,0,250,192,178,29,132,65,0,192,90,195,0,0,122,192,234,149,121,65,0,192,90,195,0,0,0,0,129,149,92,65,0,192,90,195,0,0,122,64,29,90,84,65,0,192,90,195,0,0,122,195,95,7,134,65,240,167,94,195,16,24,118,195,82,39,134,65,240,167,94,195,33,48,114,195,9,249,140,65,240,167,94,195,240,71,110,195,234,4,142,65,240,167,94,195,0,96,106,195,251,92,123,65,240,167,94,195,16,120,102,195,247,228,95,65,240,167,94,195,33,144,98,195,252,24,82,65,240,167,94,195,240,167,94,195,229,242,89,65,240,167,94,195,0,192,90,195,101,25,94,65,240,167,94,195,16,216,86,195,181,21,91,65,240,167,94,195,33,240,82,195,46,255,83,65,240,167,94,195,240,7,79,195,233,183,94,65,240,167,94,195,0,32,75,195,141,40,109,65,240,167,94,195,16,56,71,195,123,131,108,65,240,167,94,195,33,80,67,195,188,150,102,65,240,167,94,195,240,103,63,195,164,223,83,65,240,167,94,195,0,128,59,195,243,31,83,65,240,167,94,195,16,152,55,195,9,27,63,65,240,167,94,195,33,176,51,195,66,207,60,65,240,167,94,195,240,199,47,195,176,3,52,65,240,167,94,195,0,224,43,195,175,148,28,65,240,167,94,195,16,248,39,195,31,157,13,65,240,167,94,195,33,16,36,195,154,8,43,65,240,167,94,195,240,39,32,195,120,156,78,65,240,167,94,195,0,64,28,195,203,161,89,65,240,167,94,195,16,88,24,195,7,240,117,65,240,167,94,195,33,112,20,195,22,106,129,65,240,167,94,195,240,135,16,195,198,92,135,65,240,167,94,195,0,160,12,195,189,82,136,65,240,167,94,195,16,184,8,195,114,249,147,65,240,167,94,195,33,208,4,195,222,147,150,65,240,167,94,195,240,231,0,195,85,48,154,65,240,167,94,195,0,0,250,194,151,144,153,65,240,167,94,195,33,48,242,194,100,204,148,65,240,167,94,195,66,96,234,194,15,11,148,65,240,167,94,195,223,143,226,194,164,112,157,65,240,167,94,195,0,192,218,194,200,7,156,65,240,167,94,195,33,240,210,194,152,204,155,65,240,167,94,195,66,32,203,194,210,0,150,65,240,167,94,195,7,80,195,194,149,229,148,65,240,167,94,195,0,128,187,194,44,229,152,65,240,167,94,195,7,176,179,194,17,71,164,65,240,167,94,195,0,224,171,194,148,135,171,65,240,167,94,195,7,16,164,194,250,126,177,65,240,167,94,195,0,64,156,194,216,129,183,65,240,167,94,195,7,112,148,194,73,46,180,65,240,167,94,195,0,160,140,194,192,219,181,65,240,167,94,195,7,208,132,194,222,241,187,65,240,167,94,195,0,0,122,194,25,132,197,65,240,167,94,195,13,96,106,194,199,203,199,65,240,167,94,195,0,192,90,194,115,104,198,65,240,167,94,195,13,32,75,194,186,201,185,65,240,167,94,195,0,128,59,194,120,250,179,65,240,167,94,195,13,224,43,194,93,220,191,65,240,167,94,195,0,64,28,194,0,145,187,65,240,167,94,195,13,160,12,194,174,71,181,65,240,167,94,195,0,0,250,193,167,104,166,65,240,167,94,195,26,192,218,193,25,4,151,65,240,167,94,195,0,128,187,193,204,255,143,65,240,167,94,195,26,64,156,193,202,195,145,65,240,167,94,195,0,0,122,193,1,205,142,65,240,167,94,195,52,128,59,193,51,179,129,65,240,167,94,195,0,0,250,192,208,213,119,65,240,167,94,195,0,0,122,192,220,70,99,65,240,167,94,195,0,0,0,0,14,79,82,65,240,167,94,195,0,0,122,64,131,81,80,65,240,167,94,195,0,0,122,195,53,239,127,65,33,144,98,195,16,24,118,195,33,31,131,65,33,144,98,195,33,48,114,195,71,242,137,65,33,144,98,195,240,71,110,195,86,31,135,65,33,144,98,195,0,96,106,195,194,23,130,65,33,144,98,195,16,120,102,195,2,171,130,65,33,144,98,195,33,144,98,195,245,219,117,65,33,144,98,195,240,167,94,195,82,73,106,65,33,144,98,195,0,192,90,195,122,199,116,65,33,144,98,195,16,216,86,195,151,255,113,65,33,144,98,195,33,240,82,195,21,29,106,65,33,144,98,195,240,7,79,195,152,110,118,65,33,144,98,195,0,32,75,195,233,72,121,65,33,144,98,195,16,56,71,195,161,214,124,65,33,144,98,195,33,80,67,195,106,77,111,65,33,144,98,195,240,103,63,195,156,162,107,65,33,144,98,195,0,128,59,195,202,50,97,65,33,144,98,195,16,152,55,195,114,138,68,65,33,144,98,195,33,176,51,195,198,109,64,65,33,144,98,195,240,199,47,195,201,118,46,65,33,144,98,195,0,224,43,195,18,20,32,65,33,144,98,195,16,248,39,195,117,176,29,65,33,144,98,195,33,16,36,195,207,247,61,65,33,144,98,195,240,39,32,195,43,24,97,65,33,144,98,195,0,64,28,195,190,159,119,65,33,144,98,195,16,88,24,195,102,247,133,65,33,144,98,195,33,112,20,195,185,124,143,65,33,144,98,195,240,135,16,195,9,155,147,65,33,144,98,195,0,160,12,195,254,195,146,65,33,144,98,195,16,184,8,195,21,12,160,65,33,144,98,195,33,208,4,195,0,128,162,65,33,144,98,195,240,231,0,195,12,2,158,65,33,144,98,195,0,0,250,194,154,119,158,65,33,144,98,195,33,48,242,194,214,69,159,65,33,144,98,195,66,96,234,194,134,184,162,65,33,144,98,195,223,143,226,194,46,127,166,65,33,144,98,195,0,192,218,194,98,144,164,65,33,144,98,195,33,240,210,194,93,237,167,65,33,144,98,195,66,32,203,194,57,86,163,65,33,144,98,195,7,80,195,194,8,172,158,65,33,144,98,195,0,128,187,194,99,110,159,65,33,144,98,195,7,176,179,194,170,113,163,65,33,144,98,195,0,224,171,194,17,71,171,65,33,144,98,195,7,16,164,194,153,187,175,65,33,144,98,195,0,64,156,194,131,47,180,65,33,144,98,195,7,112,148,194,163,163,177,65,33,144,98,195,0,160,140,194,209,162,181,65,33,144,98,195,7,208,132,194,174,88,190,65,33,144,98,195,0,0,122,194,26,192,196,65,33,144,98,195,13,96,106,194,198,237,196,65,33,144,98,195,0,192,90,194,112,206,188,65,33,144,98,195,13,32,75,194,95,135,175,65,33,144,98,195,0,128,59,194,99,238,172,65,33,144,98,195,13,224,43,194,216,112,180,65,33,144,98,195,0,64,28,194,142,6,180,65,33,144,98,195,13,160,12,194,203,33,172,65,33,144,98,195,0,0,250,193,138,176,158,65,33,144,98,195,26,192,218,193,11,198,140,65,33,144,98,195,0,128,187,193,89,23,123,65,33,144,98,195,26,64,156,193,59,112,124,65,33,144,98,195,0,0,122,193,125,63,122,65,33,144,98,195,52,128,59,193,18,20,108,65,33,144,98,195,0,0,250,192,197,32,101,65,33,144,98,195,0,0,122,192,23,183,84,65,33,144,98,195,0,0,0,0,91,211,62,65,33,144,98,195,0,0,122,64,163,146,63,65,33,144,98,195,0,0,122,195,118,224,115,65,16,120,102,195,16,24,118,195,227,182,129,65,16,120,102,195,33,48,114,195,56,248,137,65,16,120,102,195,240,71,110,195,81,90,142,65,16,120,102,195,0,96,106,195,36,57,147,65,16,120,102,195,16,120,102,195,175,148,148,65,16,120,102,195,33,144,98,195,128,200,139,65,16,120,102,195,240,167,94,195,175,37,127,65,16,120,102,195,0,192,90,195,154,8,120,65,16,120,102,195,16,216,86,195,134,90,123,65,16,120,102,195,33,240,82,195,166,10,122,65,16,120,102,195,240,7,79,195,113,61,123,65,16,120,102,195,0,32,75,195,95,41,110,65,16,120,102,195,16,56,71,195,133,235,109,65,16,120,102,195,33,80,67,195,134,90,102,65,16,120,102,195,240,103,63,195,205,59,105,65,16,120,102,195,0,128,59,195,145,15,93,65,16,120,102,195,16,152,55,195,2,43,76,65,16,120,102,195,33,176,51,195,90,100,73,65,16,120,102,195,240,199,47,195,199,41,49,65,16,120,102,195,0,224,43,195,254,67,32,65,16,120,102,195,16,248,39,195,91,66,73,65,16,120,102,195,33,16,36,195,227,199,85,65,16,120,102,195,240,39,32,195,40,15,108,65,16,120,102,195,0,64,28,195,112,206,127,65,16,120,102,195,16,88,24,195,0,111,141,65,16,120,102,195,33,112,20,195,224,45,148,65,16,120,102,195,240,135,16,195,83,5,148,65,16,120,102,195,0,160,12,195,177,225,155,65,16,120,102,195,16,184,8,195,222,147,162,65,16,120,102,195,33,208,4,195,72,63,162,65,16,120,102,195,240,231,0,195,143,83,168,65,16,120,102,195,0,0,250,194,128,200,163,65,16,120,102,195,33,48,242,194,46,16,167,65,16,120,102,195,66,96,234,194,137,65,172,65,16,120,102,195,223,143,226,194,202,178,170,65,16,120,102,195,0,192,218,194,222,2,176,65,16,120,102,195,33,240,210,194,236,47,177,65,16,120,102,195,66,32,203,194,116,164,173,65,16,120,102,195,7,80,195,194,57,52,164,65,16,120,102,195,0,128,187,194,228,3,157,65,16,120,102,195,7,176,179,194,117,2,160,65,16,120,102,195,0,224,171,194,191,142,168,65,16,120,102,195,7,16,164,194,185,141,174,65,16,120,102,195,0,64,156,194,31,5,182,65,16,120,102,195,7,112,148,194,70,37,179,65,16,120,102,195,0,160,140,194,112,78,176,65,16,120,102,195,7,208,132,194,140,202,180,65,16,120,102,195,0,0,122,194,168,87,184,65,16,120,102,195,13,96,106,194,15,156,179,65,16,120,102,195,0,192,90,194,172,173,172,65,16,120,102,195,13,32,75,194,20,174,160,65,16,120,102,195,0,128,59,194,233,72,159,65,16,120,102,195,13,224,43,194,110,52,164,65,16,120,102,195,0,64,28,194,88,168,161,65,16,120,102,195,13,160,12,194,253,135,151,65,16,120,102,195,0,0,250,193,62,121,143,65,16,120,102,195,26,192,218,193,34,142,117,65,16,120,102,195,0,128,187,193,16,122,83,65,16,120,102,195,26,64,156,193,26,81,82,65,16,120,102,195,0,0,122,193,117,2,92,65,16,120,102,195,52,128,59,193,4,231,75,65,16,120,102,195,0,0,250,192,114,138,72,65,16,120,102,195,0,0,122,192,45,178,64,65,16,120,102,195,0,0,0,0,214,197,48,65,16,120,102,195,0,0,122,64,241,99,39,65,16,120,102,195,0,0,122,195,163,1,123,65,0,96,106,195,16,24,118,195,103,85,141,65,0,96,106,195,33,48,114,195,217,189,150,65,0,96,106,195,240,71,110,195,187,56,157,65,0,96,106,195,0,96,106,195,25,98,158,65,0,96,106,195,16,120,102,195,90,245,158,65,0,96,106,195,33,144,98,195,136,99,153,65,0,96,106,195,240,167,94,195,250,254,135,65,0,96,106,195,0,192,90,195,26,81,119,65,0,96,106,195,16,216,86,195,6,18,122,65,0,96,106,195,33,240,82,195,109,231,118,65,0,96,106,195,240,7,79,195,127,251,113,65,0,96,106,195,0,32,75,195,57,180,106,65,0,96,106,195,16,56,71,195,109,86,103,65,0,96,106,195,33,80,67,195,92,32,98,65,0,96,106,195,240,103,63,195,143,228,96,65,0,96,106,195,0,128,59,195,93,254,85,65,0,96,106,195,16,152,55,195,190,193,83,65,0,96,106,195,33,176,51,195,204,93,85,65,0,96,106,195,240,199,47,195,130,115,66,65,0,96,106,195,0,224,43,195,240,167,55,65,0,96,106,195,16,248,39,195,120,122,75,65,0,96,106,195,33,16,36,195,185,252,96,65,0,96,106,195,240,39,32,195,32,99,117,65,0,96,106,195,0,64,28,195,241,244,132,65,0,96,106,195,16,88,24,195,115,87,141,65,0,96,106,195,33,112,20,195,205,204,147,65,0,96,106,195,240,135,16,195,98,144,158,65,0,96,106,195,0,160,12,195,18,148,157,65,0,96,106,195,16,184,8,195,248,194,164,65,0,96,106,195,33,208,4,195,60,206,162,65,0,96,106,195,240,231,0,195,179,251,166,65,0,96,106,195,0,0,250,194,105,128,175,65,0,96,106,195,33,48,242,194,255,33,175,65,0,96,106,195,66,96,234,194,242,176,175,65,0,96,106,195,223,143,226,194,207,102,177,65,0,96,106,195,0,192,218,194,7,78,178,65,0,96,106,195,33,240,210,194,180,217,184,65,0,96,106,195,66,32,203,194,93,220,187,65,0,96,106,195,7,80,195,194,63,198,180,65,0,96,106,195,0,128,187,194,123,131,170,65,0,96,106,195,7,176,179,194,236,175,159,65,0,96,106,195,0,224,171,194,127,123,171,65,0,96,106,195,7,16,164,194,214,197,175,65,0,96,106,195,0,64,156,194,206,136,181,65,0,96,106,195,7,112,148,194,24,166,175,65,0,96,106,195,0,160,140,194,207,119,170,65,0,96,106,195,7,208,132,194,128,72,171,65,0,96,106,195,0,0,122,194,87,236,171,65,0,96,106,195,13,96,106,194,62,249,161,65,0,96,106,195,0,192,90,194,94,58,153,65,0,96,106,195,13,32,75,194,172,173,143,65,0,96,106,195,0,128,59,194,245,91,144,65,0,96,106,195,13,224,43,194,189,227,146,65,0,96,106,195,0,64,28,194,163,1,140,65,0,96,106,195,13,160,12,194,85,65,134,65,0,96,106,195,0,0,250,193,192,236,118,65,0,96,106,195,26,192,218,193,95,152,95,65,0,96,106,195,0,128,187,193,34,253,66,65,0,96,106,195,26,64,156,193,238,90,65,65,0,96,106,195,0,0,122,193,229,208,62,65,0,96,106,195,52,128,59,193,143,228,52,65,0,96,106,195,0,0,250,192,152,76,48,65,0,96,106,195,0,0,122,192,61,10,34,65,0,96,106,195,0,0,0,0,135,179,27,65,0,96,106,195,0,0,122,64,198,162,13,65,0,96,106,195,0,0,122,195,159,43,133,65,240,71,110,195,16,24,118,195,152,221,150,65,240,71,110,195,33,48,114,195,228,3,157,65,240,71,110,195,240,71,110,195,222,147,162,65,240,71,110,195,0,96,106,195,30,167,166,65,240,71,110,195,16,120,102,195,140,219,164,65,240,71,110,195,33,144,98,195,100,221,153,65,240,71,110,195,240,167,94,195,77,4,144,65,240,71,110,195,0,192,90,195,173,233,131,65,240,71,110,195,16,216,86,195,80,141,124,65,240,71,110,195,33,240,82,195,44,101,119,65,240,71,110,195,240,7,79,195,206,136,101,65,240,71,110,195,0,32,75,195,108,120,106,65,240,71,110,195,16,56,71,195,71,114,92,65,240,71,110,195,33,80,67,195,233,183,86,65,240,71,110,195,240,103,63,195,168,87,83,65,240,71,110,195,0,128,59,195,191,14,72,65,240,71,110,195,16,152,55,195,159,60,74,65,240,71,110,195,33,176,51,195,113,61,80,65,240,71,110,195,240,199,47,195,68,139,74,65,240,71,110,195,0,224,43,195,74,123,84,65,240,71,110,195,16,248,39,195,116,70,95,65,240,71,110,195,33,16,36,195,52,17,110,65,240,71,110,195,240,39,32,195,177,80,131,65,240,71,110,195,0,64,28,195,127,217,136,65,240,71,110,195,16,88,24,195,239,56,143,65,240,71,110,195,33,112,20,195,90,117,153,65,240,71,110,195,240,135,16,195,188,133,165,65,240,71,110,195,0,160,12,195,14,62,159,65,240,71,110,195,16,184,8,195,55,9,167,65,240,71,110,195,33,208,4,195,144,160,173,65,240,71,110,195,240,231,0,195,202,178,174,65,240,71,110,195,0,0,250,194,113,27,180,65,240,71,110,195,33,48,242,194,155,85,182,65,240,71,110,195,66,96,234,194,155,230,184,65,240,71,110,195,223,143,226,194,20,63,184,65,240,71,110,195,0,192,218,194,5,197,189,65,240,71,110,195,33,240,210,194,207,230,196,65,240,71,110,195,66,32,203,194,236,192,196,65,240,71,110,195,7,80,195,194,131,64,192,65,240,71,110,195,0,128,187,194,184,192,185,65,240,71,110,195,7,176,179,194,150,178,170,65,240,71,110,195,0,224,171,194,178,29,165,65,240,71,110,195,7,16,164,194,20,63,178,65,240,71,110,195,0,64,156,194,177,97,178,65,240,71,110,195,7,112,148,194,64,164,172,65,240,71,110,195,0,160,140,194,212,26,164,65,240,71,110,195,7,208,132,194,162,180,160,65,240,71,110,195,0,0,122,194,90,228,159,65,240,71,110,195,13,96,106,194,110,35,153,65,240,71,110,195,0,192,90,194,4,86,135,65,240,71,110,195,13,32,75,194,110,52,128,65,240,71,110,195,0,128,59,194,95,152,118,65,240,71,110,195,13,224,43,194,127,217,112,65,240,71,110,195,0,64,28,194,67,28,126,65,240,71,110,195,13,160,12,194,90,245,101,65,240,71,110,195,0,0,250,193,84,227,79,65,240,71,110,195,26,192,218,193,26,81,62,65,240,71,110,195,0,128,187,193,116,36,34,65,240,71,110,195,26,64,156,193,94,186,38,65,240,71,110,195,0,0,122,193,14,190,43,65,240,71,110,195,52,128,59,193,117,229,29,65,240,71,110,195,0,0,250,192,242,94,14,65,240,71,110,195,0,0,122,192,239,85,3,65,240,71,110,195,0,0,0,0,170,130,252,64,240,71,110,195,0,0,122,64,64,217,255,64,240,71,110,195,0,0,122,195,33,176,131,65,33,48,114,195,16,24,118,195,254,229,150,65,33,48,114,195,33,48,114,195,170,224,156,65,33,48,114,195,240,71,110,195,154,136,166,65,33,48,114,195,0,96,106,195,154,136,168,65,33,48,114,195,16,120,102,195,107,171,162,65,33,48,114,195,33,144,98,195,145,254,151,65,33,48,114,195,240,167,94,195,71,131,142,65,33,48,114,195,0,192,90,195,186,235,138,65,33,48,114,195,16,216,86,195,198,92,129,65,33,48,114,195,33,240,82,195,122,199,117,65,33,48,114,195,240,7,79,195,101,25,104,65,33,48,114,195,0,32,75,195,102,136,96,65,33,48,114,195,16,56,71,195,107,43,81,65,33,48,114,195,33,80,67,195,70,37,81,65,33,48,114,195,240,103,63,195,210,111,68,65,33,48,114,195,0,128,59,195,243,142,66,65,33,48,114,195,16,152,55,195,121,88,65,65,33,48,114,195,33,176,51,195,153,42,51,65,33,48,114,195,240,199,47,195,93,109,60,65,33,48,114,195,0,224,43,195,165,78,88,65,33,48,114,195,16,248,39,195,134,201,89,65,33,48,114,195,33,16,36,195,107,154,104,65,33,48,114,195,240,39,32,195,4,231,128,65,33,48,114,195,0,64,28,195,9,121,136,65,33,48,114,195,16,88,24,195,7,112,144,65,33,48,114,195,33,112,20,195,13,241,159,65,33,48,114,195,240,135,16,195,62,121,164,65,33,48,114,195,0,160,12,195,74,123,164,65,33,48,114,195,16,184,8,195,156,68,165,65,33,48,114,195,33,208,4,195,9,138,181,65,33,48,114,195,240,231,0,195,44,212,187,65,33,48,114,195,0,0,250,194,210,239,191,65,33,48,114,195,33,48,242,194,169,147,194,65,33,48,114,195,66,96,234,194,168,70,198,65,33,48,114,195,223,143,226,194,199,203,192,65,33,48,114,195,0,192,218,194,54,171,204,65,33,48,114,195,33,240,210,194,172,139,201,65,33,48,114,195,66,32,203,194,129,4,200,65,33,48,114,195,7,80,195,194,80,141,196,65,33,48,114,195,0,128,187,194,101,153,196,65], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+317440);
/* memory initializer */ allocate([33,48,114,195,7,176,179,194,168,87,181,65,33,48,114,195,0,224,171,194,84,82,165,65,33,48,114,195,7,16,164,194,13,96,169,65,33,48,114,195,0,64,156,194,23,72,175,65,33,48,114,195,7,112,148,194,15,156,167,65,33,48,114,195,0,160,140,194,19,225,152,65,33,48,114,195,7,208,132,194,143,228,145,65,33,48,114,195,0,0,122,194,1,205,135,65,33,48,114,195,13,96,106,194,6,129,135,65,33,48,114,195,0,192,90,194,31,244,130,65,33,48,114,195,13,32,75,194,138,31,105,65,33,48,114,195,0,128,59,194,220,215,88,65,33,48,114,195,13,224,43,194,57,69,80,65,33,48,114,195,0,64,28,194,192,91,63,65,33,48,114,195,13,160,12,194,225,122,55,65,33,48,114,195,0,0,250,193,188,5,34,65,33,48,114,195,26,192,218,193,225,209,16,65,33,48,114,195,0,128,187,193,229,213,2,65,33,48,114,195,26,64,156,193,6,187,6,65,33,48,114,195,0,0,122,193,162,28,2,65,33,48,114,195,52,128,59,193,89,163,246,64,33,48,114,195,0,0,250,192,56,16,226,64,33,48,114,195,0,0,122,192,5,197,199,64,33,48,114,195,0,0,0,0,91,124,203,64,33,48,114,195,0,0,122,64,104,232,204,64,33,48,114,195,0,0,122,195,159,60,133,65,16,24,118,195,16,24,118,195,232,89,141,65,16,24,118,195,33,48,114,195,92,15,150,65,16,24,118,195,240,71,110,195,113,44,163,65,16,24,118,195,0,96,106,195,182,115,162,65,16,24,118,195,16,120,102,195,101,170,161,65,16,24,118,195,33,144,98,195,112,78,156,65,16,24,118,195,240,167,94,195,93,237,141,65,16,24,118,195,0,192,90,195,204,93,133,65,16,24,118,195,16,216,86,195,155,85,127,65,16,24,118,195,33,240,82,195,142,117,109,65,16,24,118,195,240,7,79,195,19,242,104,65,16,24,118,195,0,32,75,195,120,122,94,65,16,24,118,195,16,56,71,195,138,142,71,65,16,24,118,195,33,80,67,195,17,199,59,65,16,24,118,195,240,103,63,195,165,189,56,65,16,24,118,195,0,128,59,195,204,127,47,65,16,24,118,195,16,152,55,195,59,223,42,65,16,24,118,195,33,176,51,195,56,248,42,65,16,24,118,195,240,199,47,195,175,37,42,65,16,24,118,195,0,224,43,195,219,249,64,65,16,24,118,195,16,248,39,195,117,2,69,65,16,24,118,195,33,16,36,195,89,134,93,65,16,24,118,195,240,39,32,195,156,162,117,65,16,24,118,195,0,64,28,195,154,153,132,65,16,24,118,195,16,88,24,195,190,159,143,65,16,24,118,195,33,112,20,195,179,106,151,65,16,24,118,195,240,135,16,195,159,43,157,65,16,24,118,195,0,160,12,195,69,71,160,65,16,24,118,195,16,184,8,195,61,44,167,65,16,24,118,195,33,208,4,195,48,170,181,65,16,24,118,195,240,231,0,195,202,212,193,65,16,24,118,195,0,0,250,194,5,163,194,65,16,24,118,195,33,48,242,194,160,26,204,65,16,24,118,195,66,96,234,194,40,126,208,65,16,24,118,195,223,143,226,194,134,56,207,65,16,24,118,195,0,192,218,194,206,8,203,65,16,24,118,195,33,240,210,194,157,17,208,65,16,24,118,195,66,32,203,194,2,188,207,65,16,24,118,195,7,80,195,194,105,128,203,65,16,24,118,195,0,128,187,194,79,30,197,65,16,24,118,195,7,176,179,194,136,5,181,65,16,24,118,195,0,224,171,194,105,128,167,65,16,24,118,195,7,16,164,194,233,166,164,65,16,24,118,195,0,64,156,194,77,4,162,65,16,24,118,195,7,112,148,194,181,38,153,65,16,24,118,195,0,160,140,194,41,203,142,65,16,24,118,195,7,208,132,194,222,19,133,65,16,24,118,195,0,0,122,194,122,165,126,65,16,24,118,195,13,96,106,194,87,91,99,65,16,24,118,195,0,192,90,194,253,135,89,65,16,24,118,195,13,32,75,194,228,20,73,65,16,24,118,195,0,128,59,194,13,224,51,65,16,24,118,195,13,224,43,194,229,208,38,65,16,24,118,195,0,64,28,194,252,169,34,65,16,24,118,195,13,160,12,194,5,35,19,65,16,24,118,195,0,0,250,193,144,136,235,64,16,24,118,195,26,192,218,193,164,252,183,64,16,24,118,195,0,128,187,193,170,72,173,64,16,24,118,195,26,64,156,193,82,15,193,64,16,24,118,195,0,0,122,193,232,217,189,64,16,24,118,195,52,128,59,193,193,168,170,64,16,24,118,195,0,0,250,192,254,96,175,64,16,24,118,195,0,0,122,192,2,159,157,64,16,24,118,195,0,0,0,0,112,206,161,64,16,24,118,195,0,0,122,64,25,4,195,64,16,24,118,195,0,0,122,195,53,239,137,65,0,0,122,195,16,24,118,195,66,190,143,65,0,0,122,195,33,48,114,195,59,223,154,65,0,0,122,195,240,71,110,195,33,159,154,65,0,0,122,195,0,96,106,195,143,66,161,65,0,0,122,195,16,120,102,195,255,50,159,65,0,0,122,195,33,144,98,195,171,190,151,65,0,0,122,195,240,167,94,195,36,40,142,65,0,0,122,195,0,192,90,195,28,235,121,65,0,0,122,195,16,216,86,195,238,124,106,65,0,0,122,195,33,240,82,195,137,210,80,65,0,0,122,195,240,7,79,195,122,165,89,65,0,0,122,195,0,32,75,195,248,83,82,65,0,0,122,195,16,56,71,195,240,22,64,65,0,0,122,195,33,80,67,195,57,214,50,65,0,0,122,195,240,103,63,195,237,158,43,65,0,0,122,195,0,128,59,195,157,17,36,65,0,0,122,195,16,152,55,195,229,56,28,65,0,0,122,195,33,176,51,195,133,25,16,65,0,0,122,195,240,199,47,195,125,150,23,65,0,0,122,195,0,224,43,195,78,209,44,65,0,0,122,195,16,248,39,195,49,8,71,65,0,0,122,195,33,16,36,195,170,96,92,65,0,0,122,195,240,39,32,195,52,128,97,65,0,0,122,195,0,64,28,195,228,131,125,65,0,0,122,195,16,88,24,195,123,148,137,65,0,0,122,195,33,112,20,195,57,180,143,65,0,0,122,195,240,135,16,195,250,237,154,65,0,0,122,195,0,160,12,195,213,120,162,65,0,0,122,195,16,184,8,195,26,64,175,65,0,0,122,195,33,208,4,195,190,176,182,65,0,0,122,195,240,231,0,195,243,14,192,65,0,0,122,195,0,0,250,194,38,100,202,65,0,0,122,195,33,48,242,194,238,90,210,65,0,0,122,195,66,96,234,194,234,149,219,65,0,0,122,195,223,143,226,194,192,219,219,65,0,0,122,195,0,192,218,194,156,68,218,65,0,0,122,195,33,240,210,194,159,205,219,65,0,0,122,195,66,32,203,194,79,47,222,65,0,0,122,195,7,80,195,194,181,149,213,65,0,0,122,195,0,128,187,194,91,194,195,65,0,0,122,195,7,176,179,194,225,122,182,65,0,0,122,195,0,224,171,194,38,100,173,65,0,0,122,195,7,16,164,194,108,248,158,65,0,0,122,195,0,64,156,194,172,173,148,65,0,0,122,195,7,112,148,194,11,181,141,65,0,0,122,195,0,160,140,194,13,113,120,65,0,0,122,195,7,208,132,194,84,227,106,65,0,0,122,195,0,0,122,194,253,135,96,65,0,0,122,195,13,96,106,194,82,73,66,65,0,0,122,195,0,192,90,194,220,215,36,65,0,0,122,195,13,32,75,194,82,225,26,65,0,0,122,195,0,128,59,194,128,2,2,65,0,0,122,195,13,224,43,194,194,64,4,65,0,0,122,195,0,64,28,194,191,96,255,64,0,0,122,195,13,160,12,194,44,212,237,64,0,0,122,195,0,0,250,193,121,146,202,64,0,0,122,195,26,192,218,193,4,4,148,64,0,0,122,195,0,128,187,193,165,131,117,64,0,0,122,195,26,64,156,193,252,222,135,64,0,0,122,195,0,0,122,193,181,50,115,64,0,0,122,195,52,128,59,193,177,167,111,64,0,0,122,195,0,0,250,192,30,27,115,64,0,0,122,195,0,0,122,192,73,17,125,64,0,0,122,195,0,0,0,0,112,153,182,64,0,0,122,195,0,0,122,64,151,57,202,64,0,0,122,195,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,126,0,127,0,128,0,129,0,128,0,127,0,128,0,129,0,130,0,131,0,130,0,129,0,132,0,0,0,133,0,2,0,133,0,0,0,133,0,2,0,134,0,4,0,134,0,2,0,134,0,4,0,135,0,6,0,135,0,4,0,135,0,6,0,136,0,8,0,136,0,6,0,136,0,8,0,137,0,10,0,137,0,8,0,137,0,10,0,138,0,12,0,138,0,10,0,138,0,12,0,139,0,14,0,139,0,12,0,139,0,14,0,140,0,16,0,140,0,14,0,140,0,16,0,141,0,18,0,141,0,16,0,141,0,18,0,142,0,20,0,142,0,18,0,142,0,20,0,143,0,22,0,143,0,20,0,143,0,22,0,144,0,24,0,144,0,22,0,144,0,24,0,145,0,26,0,145,0,24,0,145,0,26,0,146,0,28,0,146,0,26,0,146,0,28,0,147,0,30,0,147,0,28,0,147,0,30,0,148,0,32,0,148,0,30,0,148,0,32,0,149,0,34,0,149,0,32,0,149,0,34,0,150,0,36,0,150,0,34,0,150,0,36,0,151,0,38,0,151,0,36,0,151,0,38,0,152,0,40,0,152,0,38,0,152,0,40,0,153,0,42,0,153,0,40,0,153,0,42,0,154,0,44,0,154,0,42,0,154,0,44,0,155,0,46,0,155,0,44,0,155,0,46,0,156,0,48,0,156,0,46,0,156,0,48,0,157,0,50,0,157,0,48,0,157,0,50,0,158,0,52,0,158,0,50,0,158,0,52,0,159,0,54,0,159,0,52,0,159,0,54,0,160,0,56,0,160,0,54,0,160,0,56,0,161,0,58,0,161,0,56,0,161,0,58,0,162,0,60,0,162,0,58,0,162,0,60,0,163,0,62,0,163,0,60,0,163,0,62,0,164,0,64,0,164,0,62,0,164,0,64,0,165,0,66,0,165,0,64,0,165,0,66,0,166,0,68,0,166,0,66,0,166,0,68,0,167,0,70,0,167,0,68,0,167,0,70,0,168,0,72,0,168,0,70,0,168,0,72,0,169,0,74,0,169,0,72,0,169,0,74,0,170,0,76,0,170,0,74,0,170,0,76,0,171,0,78,0,171,0,76,0,171,0,78,0,172,0,80,0,172,0,78,0,172,0,80,0,173,0,82,0,173,0,80,0,173,0,82,0,174,0,84,0,174,0,82,0,174,0,84,0,175,0,86,0,175,0,84,0,175,0,86,0,176,0,88,0,176,0,86,0,176,0,88,0,177,0,90,0,177,0,88,0,177,0,90,0,178,0,92,0,178,0,90,0,178,0,92,0,179,0,94,0,179,0,92,0,179,0,94,0,180,0,96,0,180,0,94,0,180,0,96,0,181,0,98,0,181,0,96,0,181,0,98,0,182,0,100,0,182,0,98,0,182,0,100,0,183,0,102,0,183,0,100,0,183,0,102,0,184,0,104,0,184,0,102,0,184,0,104,0,185,0,106,0,185,0,104,0,185,0,106,0,186,0,108,0,186,0,106,0,186,0,108,0,187,0,110,0,187,0,108,0,187,0,110,0,188,0,112,0,188,0,110,0,188,0,112,0,189,0,114,0,189,0,112,0,189,0,114,0,190,0,116,0,190,0,114,0,190,0,116,0,191,0,118,0,191,0,116,0,191,0,118,0,192,0,120,0,192,0,118,0,192,0,120,0,193,0,122,0,193,0,120,0,193,0,122,0,194,0,124,0,194,0,122,0,194,0,124,0,195,0,126,0,195,0,124,0,195,0,126,0,196,0,128,0,196,0,126,0,196,0,128,0,197,0,130,0,197,0,128,0,198,0,132,0,199,0,133,0,199,0,132,0,199,0,133,0,200,0,134,0,200,0,133,0,200,0,134,0,201,0,135,0,201,0,134,0,201,0,135,0,202,0,136,0,202,0,135,0,202,0,136,0,203,0,137,0,203,0,136,0,203,0,137,0,204,0,138,0,204,0,137,0,204,0,138,0,205,0,139,0,205,0,138,0,205,0,139,0,206,0,140,0,206,0,139,0,206,0,140,0,207,0,141,0,207,0,140,0,207,0,141,0,208,0,142,0,208,0,141,0,208,0,142,0,209,0,143,0,209,0,142,0,209,0,143,0,210,0,144,0,210,0,143,0,210,0,144,0,211,0,145,0,211,0,144,0,211,0,145,0,212,0,146,0,212,0,145,0,212,0,146,0,213,0,147,0,213,0,146,0,213,0,147,0,214,0,148,0,214,0,147,0,214,0,148,0,215,0,149,0,215,0,148,0,215,0,149,0,216,0,150,0,216,0,149,0,216,0,150,0,217,0,151,0,217,0,150,0,217,0,151,0,218,0,152,0,218,0,151,0,218,0,152,0,219,0,153,0,219,0,152,0,219,0,153,0,220,0,154,0,220,0,153,0,220,0,154,0,221,0,155,0,221,0,154,0,221,0,155,0,222,0,156,0,222,0,155,0,222,0,156,0,223,0,157,0,223,0,156,0,223,0,157,0,224,0,158,0,224,0,157,0,224,0,158,0,225,0,159,0,225,0,158,0,225,0,159,0,226,0,160,0,226,0,159,0,226,0,160,0,227,0,161,0,227,0,160,0,227,0,161,0,228,0,162,0,228,0,161,0,228,0,162,0,229,0,163,0,229,0,162,0,229,0,163,0,230,0,164,0,230,0,163,0,230,0,164,0,231,0,165,0,231,0,164,0,231,0,165,0,232,0,166,0,232,0,165,0,232,0,166,0,233,0,167,0,233,0,166,0,233,0,167,0,234,0,168,0,234,0,167,0,234,0,168,0,235,0,169,0,235,0,168,0,235,0,169,0,236,0,170,0,236,0,169,0,236,0,170,0,237,0,171,0,237,0,170,0,237,0,171,0,238,0,172,0,238,0,171,0,238,0,172,0,239,0,173,0,239,0,172,0,239,0,173,0,240,0,174,0,240,0,173,0,240,0,174,0,241,0,175,0,241,0,174,0,241,0,175,0,242,0,176,0,242,0,175,0,242,0,176,0,243,0,177,0,243,0,176,0,243,0,177,0,244,0,178,0,244,0,177,0,244,0,178,0,245,0,179,0,245,0,178,0,245,0,179,0,246,0,180,0,246,0,179,0,246,0,180,0,247,0,181,0,247,0,180,0,247,0,181,0,248,0,182,0,248,0,181,0,248,0,182,0,249,0,183,0,249,0,182,0,249,0,183,0,250,0,184,0,250,0,183,0,250,0,184,0,251,0,185,0,251,0,184,0,251,0,185,0,252,0,186,0,252,0,185,0,252,0,186,0,253,0,187,0,253,0,186,0,253,0,187,0,254,0,188,0,254,0,187,0,254,0,188,0,255,0,189,0,255,0,188,0,255,0,189,0,0,1,190,0,0,1,189,0,0,1,190,0,1,1,191,0,1,1,190,0,1,1,191,0,2,1,192,0,2,1,191,0,2,1,192,0,3,1,193,0,3,1,192,0,3,1,193,0,4,1,194,0,4,1,193,0,4,1,194,0,5,1,195,0,5,1,194,0,5,1,195,0,6,1,196,0,6,1,195,0,6,1,196,0,7,1,197,0,7,1,196,0,8,1,198,0,9,1,199,0,9,1,198,0,9,1,199,0,10,1,200,0,10,1,199,0,10,1,200,0,11,1,201,0,11,1,200,0,11,1,201,0,12,1,202,0,12,1,201,0,12,1,202,0,13,1,203,0,13,1,202,0,13,1,203,0,14,1,204,0,14,1,203,0,14,1,204,0,15,1,205,0,15,1,204,0,15,1,205,0,16,1,206,0,16,1,205,0,16,1,206,0,17,1,207,0,17,1,206,0,17,1,207,0,18,1,208,0,18,1,207,0,18,1,208,0,19,1,209,0,19,1,208,0,19,1,209,0,20,1,210,0,20,1,209,0,20,1,210,0,21,1,211,0,21,1,210,0,21,1,211,0,22,1,212,0,22,1,211,0,22,1,212,0,23,1,213,0,23,1,212,0,23,1,213,0,24,1,214,0,24,1,213,0,24,1,214,0,25,1,215,0,25,1,214,0,25,1,215,0,26,1,216,0,26,1,215,0,26,1,216,0,27,1,217,0,27,1,216,0,27,1,217,0,28,1,218,0,28,1,217,0,28,1,218,0,29,1,219,0,29,1,218,0,29,1,219,0,30,1,220,0,30,1,219,0,30,1,220,0,31,1,221,0,31,1,220,0,31,1,221,0,32,1,222,0,32,1,221,0,32,1,222,0,33,1,223,0,33,1,222,0,33,1,223,0,34,1,224,0,34,1,223,0,34,1,224,0,35,1,225,0,35,1,224,0,35,1,225,0,36,1,226,0,36,1,225,0,36,1,226,0,37,1,227,0,37,1,226,0,37,1,227,0,38,1,228,0,38,1,227,0,38,1,228,0,39,1,229,0,39,1,228,0,39,1,229,0,40,1,230,0,40,1,229,0,40,1,230,0,41,1,231,0,41,1,230,0,41,1,231,0,42,1,232,0,42,1,231,0,42,1,232,0,43,1,233,0,43,1,232,0,43,1,233,0,44,1,234,0,44,1,233,0,44,1,234,0,45,1,235,0,45,1,234,0,45,1,235,0,46,1,236,0,46,1,235,0,46,1,236,0,47,1,237,0,47,1,236,0,47,1,237,0,48,1,238,0,48,1,237,0,48,1,238,0,49,1,239,0,49,1,238,0,49,1,239,0,50,1,240,0,50,1,239,0,50,1,240,0,51,1,241,0,51,1,240,0,51,1,241,0,52,1,242,0,52,1,241,0,52,1,242,0,53,1,243,0,53,1,242,0,53,1,243,0,54,1,244,0,54,1,243,0,54,1,244,0,55,1,245,0,55,1,244,0,55,1,245,0,56,1,246,0,56,1,245,0,56,1,246,0,57,1,247,0,57,1,246,0,57,1,247,0,58,1,248,0,58,1,247,0,58,1,248,0,59,1,249,0,59,1,248,0,59,1,249,0,60,1,250,0,60,1,249,0,60,1,250,0,61,1,251,0,61,1,250,0,61,1,251,0,62,1,252,0,62,1,251,0,62,1,252,0,63,1,253,0,63,1,252,0,63,1,253,0,64,1,254,0,64,1,253,0,64,1,254,0,65,1,255,0,65,1,254,0,65,1,255,0,66,1,0,1,66,1,255,0,66,1,0,1,67,1,1,1,67,1,0,1,67,1,1,1,68,1,2,1,68,1,1,1,68,1,2,1,69,1,3,1,69,1,2,1,69,1,3,1,70,1,4,1,70,1,3,1,70,1,4,1,71,1,5,1,71,1,4,1,71,1,5,1,72,1,6,1,72,1,5,1,72,1,6,1,73,1,7,1,73,1,6,1,74,1,8,1,75,1,9,1,75,1,8,1,75,1,9,1,76,1,10,1,76,1,9,1,76,1,10,1,77,1,11,1,77,1,10,1,77,1,11,1,78,1,12,1,78,1,11,1,78,1,12,1,79,1,13,1,79,1,12,1,79,1,13,1,80,1,14,1,80,1,13,1,80,1,14,1,81,1,15,1,81,1,14,1,81,1,15,1,82,1,16,1,82,1,15,1,82,1,16,1,83,1,17,1,83,1,16,1,83,1,17,1,84,1,18,1,84,1,17,1,84,1,18,1,85,1,19,1,85,1,18,1,85,1,19,1,86,1,20,1,86,1,19,1,86,1,20,1,87,1,21,1,87,1,20,1,87,1,21,1,88,1,22,1,88,1,21,1,88,1,22,1,89,1,23,1,89,1,22,1,89,1,23,1,90,1,24,1,90,1,23,1,90,1,24,1,91,1,25,1,91,1,24,1,91,1,25,1,92,1,26,1,92,1,25,1,92,1,26,1,93,1,27,1,93,1,26,1,93,1,27,1,94,1,28,1,94,1,27,1,94,1,28,1,95,1,29,1,95,1,28,1,95,1,29,1,96,1,30,1,96,1,29,1,96,1,30,1,97,1,31,1,97,1,30,1,97,1,31,1,98,1,32,1,98,1,31,1,98,1,32,1,99,1,33,1,99,1,32,1,99,1,33,1,100,1,34,1,100,1,33,1,100,1,34,1,101,1,35,1,101,1,34,1,101,1,35,1,102,1,36,1,102,1,35,1,102,1,36,1,103,1,37,1,103,1,36,1,103,1,37,1,104,1,38,1,104,1,37,1,104,1,38,1,105,1,39,1,105,1,38,1,105,1,39,1,106,1,40,1,106,1,39,1,106,1,40,1,107,1,41,1,107,1,40,1,107,1,41,1,108,1,42,1,108,1,41,1,108,1,42,1,109,1,43,1,109,1,42,1,109,1,43,1,110,1,44,1,110,1,43,1,110,1,44,1,111,1,45,1,111,1,44,1,111,1,45,1,112,1,46,1,112,1,45,1,112,1,46,1,113,1,47,1,113,1,46,1,113,1,47,1,114,1,48,1,114,1,47,1,114,1,48,1,115,1,49,1,115,1,48,1,115,1,49,1,116,1,50,1,116,1,49,1,116,1,50,1,117,1,51,1,117,1,50,1,117,1,51,1,118,1,52,1,118,1,51,1,118,1,52,1,119,1,53,1,119,1,52,1,119,1,53,1,120,1,54,1,120,1,53,1,120,1,54,1,121,1,55,1,121,1,54,1,121,1,55,1,122,1,56,1,122,1,55,1,122,1,56,1,123,1,57,1,123,1,56,1,123,1,57,1,124,1,58,1,124,1,57,1,124,1,58,1,125,1,59,1,125,1,58,1,125,1,59,1,126,1,60,1,126,1,59,1,126,1,60,1,127,1,61,1,127,1,60,1,127,1,61,1,128,1,62,1,128,1,61,1,128,1,62,1,129,1,63,1,129,1,62,1,129,1,63,1,130,1,64,1,130,1,63,1,130,1,64,1,131,1,65,1,131,1,64,1,131,1,65,1,132,1,66,1,132,1,65,1,132,1,66,1,133,1,67,1,133,1,66,1,133,1,67,1,134,1,68,1,134,1,67,1,134,1,68,1,135,1,69,1,135,1,68,1,135,1,69,1,136,1,70,1,136,1,69,1,136,1,70,1,137,1,71,1,137,1,70,1,137,1,71,1,138,1,72,1,138,1,71,1,138,1,72,1,139,1,73,1,139,1,72,1,140,1,74,1,141,1,75,1,141,1,74,1,141,1,75,1,142,1,76,1,142,1,75,1,142,1,76,1,143,1,77,1,143,1,76,1,143,1,77,1,144,1,78,1,144,1,77,1,144,1,78,1,145,1,79,1,145,1,78,1,145,1,79,1,146,1,80,1,146,1,79,1,146,1,80,1,147,1,81,1,147,1,80,1,147,1,81,1,148,1,82,1,148,1,81,1,148,1,82,1,149,1,83,1,149,1,82,1,149,1,83,1,150,1,84,1,150,1,83,1,150,1,84,1,151,1,85,1,151,1,84,1,151,1,85,1,152,1,86,1,152,1,85,1,152,1,86,1,153,1,87,1,153,1,86,1,153,1,87,1,154,1,88,1,154,1,87,1,154,1,88,1,155,1,89,1,155,1,88,1,155,1,89,1,156,1,90,1,156,1,89,1,156,1,90,1,157,1,91,1,157,1,90,1,157,1,91,1,158,1,92,1,158,1,91,1,158,1,92,1,159,1,93,1,159,1,92,1,159,1,93,1,160,1,94,1,160,1,93,1,160,1,94,1,161,1,95,1,161,1,94,1,161,1,95,1,162,1,96,1,162,1,95,1,162,1,96,1,163,1,97,1,163,1,96,1,163,1,97,1,164,1,98,1,164,1,97,1,164,1,98,1,165,1,99,1,165,1,98,1,165,1,99,1,166,1,100,1,166,1,99,1,166,1,100,1,167,1,101,1,167,1,100,1,167,1,101,1,168,1,102,1,168,1,101,1,168,1,102,1,169,1,103,1,169,1,102,1,169,1,103,1,170,1,104,1,170,1,103,1,170,1,104,1,171,1,105,1,171,1,104,1,171,1,105,1,172,1,106,1,172,1,105,1,172,1,106,1,173,1,107,1,173,1,106,1,173,1,107,1,174,1,108,1,174,1,107,1,174,1,108,1,175,1,109,1,175,1,108,1,175,1,109,1,176,1,110,1,176,1,109,1,176,1,110,1,177,1,111,1,177,1,110,1,177,1,111,1,178,1,112,1,178,1,111,1,178,1,112,1,179,1,113,1,179,1,112,1,179,1,113,1,180,1,114,1,180,1,113,1,180,1,114,1,181,1,115,1,181,1,114,1,181,1,115,1,182,1,116,1,182,1,115,1,182,1,116,1,183,1,117,1,183,1,116,1,183,1,117,1,184,1,118,1,184,1,117,1,184,1,118,1,185,1,119,1,185,1,118,1,185,1,119,1,186,1,120,1,186,1,119,1,186,1,120,1,187,1,121,1,187,1,120,1,187,1,121,1,188,1,122,1,188,1,121,1,188,1,122,1,189,1,123,1,189,1,122,1,189,1,123,1,190,1,124,1,190,1,123,1,190,1,124,1,191,1,125,1,191,1,124,1,191,1,125,1,192,1,126,1,192,1,125,1,192,1,126,1,193,1,127,1,193,1,126,1,193,1,127,1,194,1,128,1,194,1,127,1,194,1,128,1,195,1,129,1,195,1,128,1,195,1,129,1,196,1,130,1,196,1,129,1,196,1,130,1,197,1,131,1,197,1,130,1,197,1,131,1,198,1,132,1,198,1,131,1,198,1,132,1,199,1,133,1,199,1,132,1,199,1,133,1,200,1,134,1,200,1,133,1,200,1,134,1,201,1,135,1,201,1,134,1,201,1,135,1,202,1,136,1,202,1,135,1,202,1,136,1,203,1,137,1,203,1,136,1,203,1,137,1,204,1,138,1,204,1,137,1,204,1,138,1,205,1,139,1,205,1,138,1,206,1,140,1,207,1,141,1,207,1,140,1,207,1,141,1,208,1,142,1,208,1,141,1,208,1,142,1,209,1,143,1,209,1,142,1,209,1,143,1,210,1,144,1,210,1,143,1,210,1,144,1,211,1,145,1,211,1,144,1,211,1,145,1,212,1,146,1,212,1,145,1,212,1,146,1,213,1,147,1,213,1,146,1,213,1,147,1,214,1,148,1,214,1,147,1,214,1,148,1,215,1,149,1,215,1,148,1,215,1,149,1,216,1,150,1,216,1,149,1,216,1,150,1,217,1,151,1,217,1,150,1,217,1,151,1,218,1,152,1,218,1,151,1,218,1,152,1,219,1,153,1,219,1,152,1,219,1,153,1,220,1,154,1,220,1,153,1,220,1,154,1,221,1,155,1,221,1,154,1,221,1,155,1,222,1,156,1,222,1,155,1,222,1,156,1,223,1,157,1,223,1,156,1,223,1,157,1,224,1,158,1,224,1,157,1,224,1,158,1,225,1,159,1,225,1,158,1,225,1,159,1,226,1,160,1,226,1,159,1,226,1,160,1,227,1,161,1,227,1,160,1,227,1,161,1,228,1,162,1,228,1,161,1,228,1,162,1,229,1,163,1,229,1,162,1,229,1,163,1,230,1,164,1,230,1,163,1,230,1,164,1,231,1,165,1,231,1,164,1,231,1,165,1,232,1,166,1,232,1,165,1,232,1,166,1,233,1,167,1,233,1,166,1,233,1,167,1,234,1,168,1,234,1,167,1,234,1,168,1,235,1,169,1,235,1,168,1,235,1,169,1,236,1,170,1,236,1,169,1,236,1,170,1,237,1,171,1,237,1,170,1,237,1,171,1,238,1,172,1,238,1,171,1,238,1,172,1,239,1,173,1,239,1,172,1,239,1,173,1,240,1,174,1,240,1,173,1,240,1,174,1,241,1,175,1,241,1,174,1,241,1,175,1,242,1,176,1,242,1,175,1,242,1,176,1,243,1,177,1,243,1,176,1,243,1,177,1,244,1,178,1,244,1,177,1,244,1,178,1,245,1,179,1,245,1,178,1,245,1,179,1,246,1,180,1,246,1,179,1,246,1,180,1,247,1,181,1,247,1,180,1,247,1,181,1,248,1,182,1,248,1,181,1,248,1,182,1,249,1,183,1,249,1,182,1,249,1,183,1,250,1,184,1,250,1,183,1,250,1,184,1,251,1,185,1,251,1,184,1,251,1,185,1,252,1,186,1,252,1,185,1,252,1,186,1,253,1,187,1,253,1,186,1,253,1,187,1,254,1,188,1,254,1,187,1,254,1,188,1,255,1,189,1,255,1,188,1,255,1,189,1,0,2,190,1,0,2,189,1,0,2,190,1,1,2,191,1,1,2,190,1,1,2,191,1,2,2,192,1,2,2,191,1,2,2,192,1,3,2,193,1,3,2,192,1,3,2,193,1,4,2,194,1,4,2,193,1,4,2,194,1,5,2,195,1,5,2,194,1,5,2,195,1,6,2,196,1,6,2,195,1,6,2,196,1,7,2,197,1,7,2,196,1,7,2,197,1,8,2,198,1,8,2,197,1,8,2,198,1,9,2,199,1,9,2,198,1,9,2,199,1,10,2,200,1,10,2,199,1,10,2,200,1,11,2,201,1,11,2,200,1,11,2,201,1,12,2,202,1,12,2,201,1,12,2,202,1,13,2,203,1,13,2,202,1,13,2,203,1,14,2,204,1,14,2,203,1,14,2,204,1,15,2,205,1,15,2,204,1,16,2,206,1,17,2,207,1,17,2,206,1,17,2,207,1,18,2,208,1,18,2,207,1,18,2,208,1,19,2,209,1,19,2,208,1,19,2,209,1,20,2,210,1,20,2,209,1,20,2,210,1,21,2,211,1,21,2,210,1,21,2,211,1,22,2,212,1,22,2,211,1,22,2,212,1,23,2,213,1,23,2,212,1,23,2,213,1,24,2,214,1,24,2,213,1,24,2,214,1,25,2,215,1,25,2,214,1,25,2,215,1,26,2,216,1,26,2,215,1,26,2,216,1,27,2,217,1,27,2,216,1,27,2,217,1,28,2,218,1,28,2,217,1,28,2,218,1,29,2,219,1,29,2,218,1,29,2,219,1,30,2,220,1,30,2,219,1,30,2,220,1,31,2,221,1,31,2,220,1,31,2,221,1,32,2,222,1,32,2,221,1,32,2,222,1,33,2,223,1,33,2,222,1,33,2,223,1,34,2,224,1,34,2,223,1,34,2,224,1,35,2,225,1,35,2,224,1,35,2,225,1,36,2,226,1,36,2,225,1,36,2,226,1,37,2,227,1,37,2,226,1,37,2,227,1,38,2,228,1,38,2,227,1,38,2,228,1,39,2,229,1,39,2,228,1,39,2,229,1,40,2,230,1,40,2,229,1,40,2,230,1,41,2,231,1,41,2,230,1,41,2,231,1,42,2,232,1,42,2,231,1,42,2,232,1,43,2,233,1,43,2,232,1,43,2,233,1,44,2,234,1,44,2,233,1,44,2,234,1,45,2,235,1,45,2,234,1,45,2,235,1,46,2,236,1,46,2,235,1,46,2,236,1,47,2,237,1,47,2,236,1,47,2,237,1,48,2,238,1,48,2,237,1,48,2,238,1,49,2,239,1,49,2,238,1,49,2,239,1,50,2,240,1,50,2,239,1,50,2,240,1,51,2,241,1,51,2,240,1,51,2,241,1,52,2,242,1,52,2,241,1,52,2,242,1,53,2,243,1,53,2,242,1,53,2,243,1,54,2,244,1,54,2,243,1,54,2,244,1,55,2,245,1,55,2,244,1,55,2,245,1,56,2,246,1,56,2,245,1,56,2,246,1,57,2,247,1,57,2,246,1,57,2,247,1,58,2,248,1,58,2,247,1,58,2,248,1,59,2,249,1,59,2,248,1,59,2,249,1,60,2,250,1,60,2,249,1,60,2,250,1,61,2,251,1,61,2,250,1,61,2,251,1,62,2,252,1,62,2,251,1,62,2,252,1,63,2,253,1,63,2,252,1,63,2,253,1,64,2,254,1,64,2,253,1,64,2,254,1,65,2,255,1,65,2,254,1,65,2,255,1,66,2,0,2,66,2,255,1,66,2,0,2,67,2,1,2,67,2,0,2,67,2,1,2,68,2,2,2,68,2,1,2,68,2,2,2,69,2,3,2,69,2,2,2,69,2,3,2,70,2,4,2,70,2,3,2,70,2,4,2,71,2,5,2,71,2,4,2,71,2,5,2,72,2,6,2,72,2,5,2,72,2,6,2,73,2,7,2,73,2,6,2,73,2,7,2,74,2,8,2,74,2,7,2,74,2,8,2,75,2,9,2,75,2,8,2,75,2,9,2,76,2,10,2,76,2,9,2,76,2,10,2,77,2,11,2,77,2,10,2,77,2,11,2,78,2,12,2,78,2,11,2,78,2,12,2,79,2,13,2,79,2,12,2,79,2,13,2,80,2,14,2,80,2,13,2,80,2,14,2,81,2,15,2,81,2,14,2,82,2,16,2,83,2,17,2,83,2,16,2,83,2,17,2,84,2,18,2,84,2,17,2,84,2,18,2,85,2,19,2,85,2,18,2,85,2,19,2,86,2,20,2,86,2,19,2,86,2,20,2,87,2,21,2,87,2,20,2,87,2,21,2,88,2,22,2,88,2,21,2,88,2,22,2,89,2,23,2,89,2,22,2,89,2,23,2,90,2,24,2,90,2,23,2,90,2,24,2,91,2,25,2,91,2,24,2,91,2,25,2,92,2,26,2,92,2,25,2,92,2,26,2,93,2,27,2,93,2,26,2,93,2,27,2,94,2,28,2,94,2,27,2,94,2,28,2,95,2,29,2,95,2,28,2,95,2,29,2,96,2,30,2,96,2,29,2,96,2,30,2,97,2,31,2,97,2,30,2,97,2,31,2,98,2,32,2,98,2,31,2,98,2,32,2,99,2,33,2,99,2,32,2,99,2,33,2,100,2,34,2,100,2,33,2,100,2,34,2,101,2,35,2,101,2,34,2,101,2,35,2,102,2,36,2,102,2,35,2,102,2,36,2,103,2,37,2,103,2,36,2,103,2,37,2,104,2,38,2,104,2,37,2,104,2,38,2,105,2,39,2,105,2,38,2,105,2,39,2,106,2,40,2,106,2,39,2,106,2,40,2,107,2,41,2,107,2,40,2,107,2,41,2,108,2,42,2,108,2,41,2,108,2,42,2,109,2,43,2,109,2,42,2,109,2,43,2,110,2,44,2,110,2,43,2,110,2,44,2,111,2,45,2,111,2,44,2,111,2,45,2,112,2,46,2,112,2,45,2,112,2,46,2,113,2,47,2,113,2,46,2,113,2,47,2,114,2,48,2,114,2,47,2,114,2,48,2,115,2,49,2,115,2,48,2,115,2,49,2,116,2,50,2,116,2,49,2,116,2,50,2,117,2,51,2,117,2,50,2,117,2,51,2,118,2,52,2,118,2,51,2,118,2,52,2,119,2,53,2,119,2,52,2,119,2,53,2,120,2,54,2,120,2,53,2,120,2,54,2,121,2,55,2,121,2,54,2,121,2,55,2,122,2,56,2,122,2,55,2,122,2,56,2,123,2,57,2,123,2,56,2,123,2,57,2,124,2,58,2,124,2,57,2,124,2,58,2,125,2,59,2,125,2,58,2,125,2,59,2,126,2,60,2,126,2,59,2,126,2,60,2,127,2,61,2,127,2,60,2,127,2,61,2,128,2,62,2,128,2,61,2,128,2,62,2,129,2,63,2,129,2,62,2,129,2,63,2,130,2,64,2,130,2,63,2,130,2,64,2,131,2,65,2,131,2,64,2,131,2,65,2,132,2,66,2,132,2,65,2,132,2,66,2,133,2,67,2,133,2,66,2,133,2,67,2,134,2,68,2,134,2,67,2,134,2,68,2,135,2,69,2,135,2,68,2,135,2,69,2,136,2,70,2,136,2,69,2,136,2,70,2,137,2,71,2,137,2,70,2,137,2,71,2,138,2,72,2,138,2,71,2,138,2,72,2,139,2,73,2,139,2,72,2,139,2,73,2,140,2,74,2,140,2,73,2,140,2,74,2,141,2,75,2,141,2,74,2,141,2,75,2,142,2,76,2,142,2,75,2,142,2,76,2,143,2,77,2,143,2,76,2,143,2,77,2,144,2,78,2,144,2,77,2,144,2,78,2,145,2,79,2,145,2,78,2,145,2,79,2,146,2,80,2,146,2,79,2,146,2,80,2,147,2,81,2,147,2,80,2,148,2,82,2,149,2,83,2,149,2,82,2,149,2,83,2,150,2,84,2,150,2,83,2,150,2,84,2,151,2,85,2,151,2,84,2,151,2,85,2,152,2,86,2,152,2,85,2,152,2,86,2,153,2,87,2,153,2,86,2,153,2,87,2,154,2,88,2,154,2,87,2,154,2,88,2,155,2,89,2,155,2,88,2,155,2,89,2,156,2,90,2,156,2,89,2,156,2,90,2,157,2,91,2,157,2,90,2,157,2,91,2,158,2,92,2,158,2,91,2,158,2,92,2,159,2,93,2,159,2,92,2,159,2,93,2,160,2,94,2,160,2,93,2,160,2,94,2,161,2,95,2,161,2,94,2,161,2,95,2,162,2,96,2,162,2,95,2,162,2,96,2,163,2,97,2,163,2,96,2,163,2,97,2,164,2,98,2,164,2,97,2,164,2,98,2,165,2,99,2,165,2,98,2,165,2,99,2,166,2,100,2,166,2,99,2,166,2,100,2,167,2,101,2,167,2,100,2,167,2,101,2,168,2,102,2,168,2,101,2,168,2,102,2,169,2,103,2,169,2,102,2,169,2,103,2,170,2,104,2,170,2,103,2,170,2,104,2,171,2,105,2,171,2,104,2,171,2,105,2,172,2,106,2,172,2,105,2,172,2,106,2,173,2,107,2,173,2,106,2,173,2,107,2,174,2,108,2,174,2,107,2,174,2,108,2,175,2,109,2,175,2,108,2,175,2,109,2,176,2,110,2,176,2,109,2,176,2,110,2,177,2,111,2,177,2,110,2,177,2,111,2,178,2,112,2,178,2,111,2,178,2,112,2,179,2,113,2,179,2,112,2,179,2,113,2,180,2,114,2,180,2,113,2,180,2,114,2,181,2,115,2,181,2,114,2,181,2,115,2,182,2,116,2,182,2,115,2,182,2,116,2,183,2,117,2,183,2,116,2,183,2,117,2,184,2,118,2,184,2,117,2,184,2,118,2,185,2,119,2,185,2,118,2,185,2,119,2,186,2,120,2,186,2,119,2,186,2,120,2,187,2,121,2,187,2,120,2,187,2,121,2,188,2,122,2,188,2,121,2,188,2,122,2,189,2,123,2,189,2,122,2,189,2,123,2,190,2,124,2,190,2,123,2,190,2,124,2,191,2,125,2,191,2,124,2,191,2,125,2,192,2,126,2,192,2,125,2,192,2,126,2,193,2,127,2,193,2,126,2,193,2,127,2,194,2,128,2,194,2,127,2,194,2,128,2,195,2,129,2,195,2,128,2,195,2,129,2,196,2,130,2,196,2,129,2,196,2,130,2,197,2,131,2,197,2,130,2,197,2,131,2,198,2,132,2,198,2,131,2,198,2,132,2,199,2,133,2,199,2,132,2,199,2,133,2,200,2,134,2,200,2,133,2,200,2,134,2,201,2,135,2,201,2,134,2,201,2,135,2,202,2,136,2,202,2,135,2,202,2,136,2,203,2,137,2,203,2,136,2,203,2,137,2,204,2,138,2,204,2,137,2,204,2,138,2,205,2,139,2,205,2,138,2,205,2,139,2,206,2,140,2,206,2,139,2,206,2,140,2,207,2,141,2,207,2,140,2,207,2,141,2,208,2,142,2,208,2,141,2,208,2,142,2,209,2,143,2,209,2,142,2,209,2,143,2,210,2,144,2,210,2,143,2,210,2,144,2,211,2,145,2,211,2,144,2,211,2,145,2,212,2,146,2,212,2,145,2,212,2,146,2,213,2,147,2,213,2,146,2,214,2,148,2,215,2,149,2,215,2,148,2,215,2,149,2,216,2,150,2,216,2,149,2,216,2,150,2,217,2,151,2,217,2,150,2,217,2,151,2,218,2,152,2,218,2,151,2,218,2,152,2,219,2,153,2,219,2,152,2,219,2,153,2,220,2,154,2,220,2,153,2,220,2,154,2,221,2,155,2,221,2,154,2,221,2,155,2,222,2,156,2,222,2,155,2,222,2,156,2,223,2,157,2,223,2,156,2,223,2,157,2,224,2,158,2,224,2,157,2,224,2,158,2,225,2,159,2,225,2,158,2,225,2,159,2,226,2,160,2,226,2,159,2,226,2,160,2,227,2,161,2,227,2,160,2,227,2,161,2,228,2,162,2,228,2,161,2,228,2,162,2,229,2,163,2,229,2,162,2,229,2,163,2,230,2,164,2,230,2,163,2,230,2,164,2,231,2,165,2,231,2,164,2,231,2,165,2,232,2,166,2,232,2,165,2,232,2,166,2,233,2,167,2,233,2,166,2,233,2,167,2,234,2,168,2,234,2,167,2,234,2,168,2,235,2,169,2,235,2,168,2,235,2,169,2,236,2,170,2,236,2,169,2,236,2,170,2,237,2,171,2,237,2,170,2,237,2,171,2,238,2,172,2,238,2,171,2,238,2,172,2,239,2,173,2,239,2,172,2,239,2,173,2,240,2,174,2,240,2,173,2,240,2,174,2,241,2,175,2,241,2,174,2,241,2,175,2,242,2,176,2,242,2,175,2,242,2,176,2,243,2,177,2,243,2,176,2,243,2,177,2,244,2,178,2,244,2,177,2,244,2,178,2,245,2,179,2,245,2,178,2,245,2,179,2,246,2,180,2,246,2,179,2,246,2,180,2,247,2,181,2,247,2,180,2,247,2,181,2,248,2,182,2,248,2,181,2,248,2,182,2,249,2,183,2,249,2,182,2,249,2,183,2,250,2,184,2,250,2,183,2,250,2,184,2,251,2,185,2,251,2,184,2,251,2,185,2,252,2,186,2,252,2,185,2,252,2,186,2,253,2,187,2,253,2,186,2,253,2,187,2,254,2,188,2,254,2,187,2,254,2,188,2,255,2,189,2,255,2,188,2,255,2,189,2,0,3,190,2,0,3,189,2,0,3,190,2,1,3,191,2,1,3,190,2,1,3,191,2,2,3,192,2,2,3,191,2,2,3,192,2,3,3,193,2,3,3,192,2,3,3,193,2,4,3,194,2,4,3,193,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+327680);
/* memory initializer */ allocate([4,3,194,2,5,3,195,2,5,3,194,2,5,3,195,2,6,3,196,2,6,3,195,2,6,3,196,2,7,3,197,2,7,3,196,2,7,3,197,2,8,3,198,2,8,3,197,2,8,3,198,2,9,3,199,2,9,3,198,2,9,3,199,2,10,3,200,2,10,3,199,2,10,3,200,2,11,3,201,2,11,3,200,2,11,3,201,2,12,3,202,2,12,3,201,2,12,3,202,2,13,3,203,2,13,3,202,2,13,3,203,2,14,3,204,2,14,3,203,2,14,3,204,2,15,3,205,2,15,3,204,2,15,3,205,2,16,3,206,2,16,3,205,2,16,3,206,2,17,3,207,2,17,3,206,2,17,3,207,2,18,3,208,2,18,3,207,2,18,3,208,2,19,3,209,2,19,3,208,2,19,3,209,2,20,3,210,2,20,3,209,2,20,3,210,2,21,3,211,2,21,3,210,2,21,3,211,2,22,3,212,2,22,3,211,2,22,3,212,2,23,3,213,2,23,3,212,2,24,3,214,2,25,3,215,2,25,3,214,2,25,3,215,2,26,3,216,2,26,3,215,2,26,3,216,2,27,3,217,2,27,3,216,2,27,3,217,2,28,3,218,2,28,3,217,2,28,3,218,2,29,3,219,2,29,3,218,2,29,3,219,2,30,3,220,2,30,3,219,2,30,3,220,2,31,3,221,2,31,3,220,2,31,3,221,2,32,3,222,2,32,3,221,2,32,3,222,2,33,3,223,2,33,3,222,2,33,3,223,2,34,3,224,2,34,3,223,2,34,3,224,2,35,3,225,2,35,3,224,2,35,3,225,2,36,3,226,2,36,3,225,2,36,3,226,2,37,3,227,2,37,3,226,2,37,3,227,2,38,3,228,2,38,3,227,2,38,3,228,2,39,3,229,2,39,3,228,2,39,3,229,2,40,3,230,2,40,3,229,2,40,3,230,2,41,3,231,2,41,3,230,2,41,3,231,2,42,3,232,2,42,3,231,2,42,3,232,2,43,3,233,2,43,3,232,2,43,3,233,2,44,3,234,2,44,3,233,2,44,3,234,2,45,3,235,2,45,3,234,2,45,3,235,2,46,3,236,2,46,3,235,2,46,3,236,2,47,3,237,2,47,3,236,2,47,3,237,2,48,3,238,2,48,3,237,2,48,3,238,2,49,3,239,2,49,3,238,2,49,3,239,2,50,3,240,2,50,3,239,2,50,3,240,2,51,3,241,2,51,3,240,2,51,3,241,2,52,3,242,2,52,3,241,2,52,3,242,2,53,3,243,2,53,3,242,2,53,3,243,2,54,3,244,2,54,3,243,2,54,3,244,2,55,3,245,2,55,3,244,2,55,3,245,2,56,3,246,2,56,3,245,2,56,3,246,2,57,3,247,2,57,3,246,2,57,3,247,2,58,3,248,2,58,3,247,2,58,3,248,2,59,3,249,2,59,3,248,2,59,3,249,2,60,3,250,2,60,3,249,2,60,3,250,2,61,3,251,2,61,3,250,2,61,3,251,2,62,3,252,2,62,3,251,2,62,3,252,2,63,3,253,2,63,3,252,2,63,3,253,2,64,3,254,2,64,3,253,2,64,3,254,2,65,3,255,2,65,3,254,2,65,3,255,2,66,3,0,3,66,3,255,2,66,3,0,3,67,3,1,3,67,3,0,3,67,3,1,3,68,3,2,3,68,3,1,3,68,3,2,3,69,3,3,3,69,3,2,3,69,3,3,3,70,3,4,3,70,3,3,3,70,3,4,3,71,3,5,3,71,3,4,3,71,3,5,3,72,3,6,3,72,3,5,3,72,3,6,3,73,3,7,3,73,3,6,3,73,3,7,3,74,3,8,3,74,3,7,3,74,3,8,3,75,3,9,3,75,3,8,3,75,3,9,3,76,3,10,3,76,3,9,3,76,3,10,3,77,3,11,3,77,3,10,3,77,3,11,3,78,3,12,3,78,3,11,3,78,3,12,3,79,3,13,3,79,3,12,3,79,3,13,3,80,3,14,3,80,3,13,3,80,3,14,3,81,3,15,3,81,3,14,3,81,3,15,3,82,3,16,3,82,3,15,3,82,3,16,3,83,3,17,3,83,3,16,3,83,3,17,3,84,3,18,3,84,3,17,3,84,3,18,3,85,3,19,3,85,3,18,3,85,3,19,3,86,3,20,3,86,3,19,3,86,3,20,3,87,3,21,3,87,3,20,3,87,3,21,3,88,3,22,3,88,3,21,3,88,3,22,3,89,3,23,3,89,3,22,3,90,3,24,3,91,3,25,3,91,3,24,3,91,3,25,3,92,3,26,3,92,3,25,3,92,3,26,3,93,3,27,3,93,3,26,3,93,3,27,3,94,3,28,3,94,3,27,3,94,3,28,3,95,3,29,3,95,3,28,3,95,3,29,3,96,3,30,3,96,3,29,3,96,3,30,3,97,3,31,3,97,3,30,3,97,3,31,3,98,3,32,3,98,3,31,3,98,3,32,3,99,3,33,3,99,3,32,3,99,3,33,3,100,3,34,3,100,3,33,3,100,3,34,3,101,3,35,3,101,3,34,3,101,3,35,3,102,3,36,3,102,3,35,3,102,3,36,3,103,3,37,3,103,3,36,3,103,3,37,3,104,3,38,3,104,3,37,3,104,3,38,3,105,3,39,3,105,3,38,3,105,3,39,3,106,3,40,3,106,3,39,3,106,3,40,3,107,3,41,3,107,3,40,3,107,3,41,3,108,3,42,3,108,3,41,3,108,3,42,3,109,3,43,3,109,3,42,3,109,3,43,3,110,3,44,3,110,3,43,3,110,3,44,3,111,3,45,3,111,3,44,3,111,3,45,3,112,3,46,3,112,3,45,3,112,3,46,3,113,3,47,3,113,3,46,3,113,3,47,3,114,3,48,3,114,3,47,3,114,3,48,3,115,3,49,3,115,3,48,3,115,3,49,3,116,3,50,3,116,3,49,3,116,3,50,3,117,3,51,3,117,3,50,3,117,3,51,3,118,3,52,3,118,3,51,3,118,3,52,3,119,3,53,3,119,3,52,3,119,3,53,3,120,3,54,3,120,3,53,3,120,3,54,3,121,3,55,3,121,3,54,3,121,3,55,3,122,3,56,3,122,3,55,3,122,3,56,3,123,3,57,3,123,3,56,3,123,3,57,3,124,3,58,3,124,3,57,3,124,3,58,3,125,3,59,3,125,3,58,3,125,3,59,3,126,3,60,3,126,3,59,3,126,3,60,3,127,3,61,3,127,3,60,3,127,3,61,3,128,3,62,3,128,3,61,3,128,3,62,3,129,3,63,3,129,3,62,3,129,3,63,3,130,3,64,3,130,3,63,3,130,3,64,3,131,3,65,3,131,3,64,3,131,3,65,3,132,3,66,3,132,3,65,3,132,3,66,3,133,3,67,3,133,3,66,3,133,3,67,3,134,3,68,3,134,3,67,3,134,3,68,3,135,3,69,3,135,3,68,3,135,3,69,3,136,3,70,3,136,3,69,3,136,3,70,3,137,3,71,3,137,3,70,3,137,3,71,3,138,3,72,3,138,3,71,3,138,3,72,3,139,3,73,3,139,3,72,3,139,3,73,3,140,3,74,3,140,3,73,3,140,3,74,3,141,3,75,3,141,3,74,3,141,3,75,3,142,3,76,3,142,3,75,3,142,3,76,3,143,3,77,3,143,3,76,3,143,3,77,3,144,3,78,3,144,3,77,3,144,3,78,3,145,3,79,3,145,3,78,3,145,3,79,3,146,3,80,3,146,3,79,3,146,3,80,3,147,3,81,3,147,3,80,3,147,3,81,3,148,3,82,3,148,3,81,3,148,3,82,3,149,3,83,3,149,3,82,3,149,3,83,3,150,3,84,3,150,3,83,3,150,3,84,3,151,3,85,3,151,3,84,3,151,3,85,3,152,3,86,3,152,3,85,3,152,3,86,3,153,3,87,3,153,3,86,3,153,3,87,3,154,3,88,3,154,3,87,3,154,3,88,3,155,3,89,3,155,3,88,3,156,3,90,3,157,3,91,3,157,3,90,3,157,3,91,3,158,3,92,3,158,3,91,3,158,3,92,3,159,3,93,3,159,3,92,3,159,3,93,3,160,3,94,3,160,3,93,3,160,3,94,3,161,3,95,3,161,3,94,3,161,3,95,3,162,3,96,3,162,3,95,3,162,3,96,3,163,3,97,3,163,3,96,3,163,3,97,3,164,3,98,3,164,3,97,3,164,3,98,3,165,3,99,3,165,3,98,3,165,3,99,3,166,3,100,3,166,3,99,3,166,3,100,3,167,3,101,3,167,3,100,3,167,3,101,3,168,3,102,3,168,3,101,3,168,3,102,3,169,3,103,3,169,3,102,3,169,3,103,3,170,3,104,3,170,3,103,3,170,3,104,3,171,3,105,3,171,3,104,3,171,3,105,3,172,3,106,3,172,3,105,3,172,3,106,3,173,3,107,3,173,3,106,3,173,3,107,3,174,3,108,3,174,3,107,3,174,3,108,3,175,3,109,3,175,3,108,3,175,3,109,3,176,3,110,3,176,3,109,3,176,3,110,3,177,3,111,3,177,3,110,3,177,3,111,3,178,3,112,3,178,3,111,3,178,3,112,3,179,3,113,3,179,3,112,3,179,3,113,3,180,3,114,3,180,3,113,3,180,3,114,3,181,3,115,3,181,3,114,3,181,3,115,3,182,3,116,3,182,3,115,3,182,3,116,3,183,3,117,3,183,3,116,3,183,3,117,3,184,3,118,3,184,3,117,3,184,3,118,3,185,3,119,3,185,3,118,3,185,3,119,3,186,3,120,3,186,3,119,3,186,3,120,3,187,3,121,3,187,3,120,3,187,3,121,3,188,3,122,3,188,3,121,3,188,3,122,3,189,3,123,3,189,3,122,3,189,3,123,3,190,3,124,3,190,3,123,3,190,3,124,3,191,3,125,3,191,3,124,3,191,3,125,3,192,3,126,3,192,3,125,3,192,3,126,3,193,3,127,3,193,3,126,3,193,3,127,3,194,3,128,3,194,3,127,3,194,3,128,3,195,3,129,3,195,3,128,3,195,3,129,3,196,3,130,3,196,3,129,3,196,3,130,3,197,3,131,3,197,3,130,3,197,3,131,3,198,3,132,3,198,3,131,3,198,3,132,3,199,3,133,3,199,3,132,3,199,3,133,3,200,3,134,3,200,3,133,3,200,3,134,3,201,3,135,3,201,3,134,3,201,3,135,3,202,3,136,3,202,3,135,3,202,3,136,3,203,3,137,3,203,3,136,3,203,3,137,3,204,3,138,3,204,3,137,3,204,3,138,3,205,3,139,3,205,3,138,3,205,3,139,3,206,3,140,3,206,3,139,3,206,3,140,3,207,3,141,3,207,3,140,3,207,3,141,3,208,3,142,3,208,3,141,3,208,3,142,3,209,3,143,3,209,3,142,3,209,3,143,3,210,3,144,3,210,3,143,3,210,3,144,3,211,3,145,3,211,3,144,3,211,3,145,3,212,3,146,3,212,3,145,3,212,3,146,3,213,3,147,3,213,3,146,3,213,3,147,3,214,3,148,3,214,3,147,3,214,3,148,3,215,3,149,3,215,3,148,3,215,3,149,3,216,3,150,3,216,3,149,3,216,3,150,3,217,3,151,3,217,3,150,3,217,3,151,3,218,3,152,3,218,3,151,3,218,3,152,3,219,3,153,3,219,3,152,3,219,3,153,3,220,3,154,3,220,3,153,3,220,3,154,3,221,3,155,3,221,3,154,3,222,3,156,3,223,3,157,3,223,3,156,3,223,3,157,3,224,3,158,3,224,3,157,3,224,3,158,3,225,3,159,3,225,3,158,3,225,3,159,3,226,3,160,3,226,3,159,3,226,3,160,3,227,3,161,3,227,3,160,3,227,3,161,3,228,3,162,3,228,3,161,3,228,3,162,3,229,3,163,3,229,3,162,3,229,3,163,3,230,3,164,3,230,3,163,3,230,3,164,3,231,3,165,3,231,3,164,3,231,3,165,3,232,3,166,3,232,3,165,3,232,3,166,3,233,3,167,3,233,3,166,3,233,3,167,3,234,3,168,3,234,3,167,3,234,3,168,3,235,3,169,3,235,3,168,3,235,3,169,3,236,3,170,3,236,3,169,3,236,3,170,3,237,3,171,3,237,3,170,3,237,3,171,3,238,3,172,3,238,3,171,3,238,3,172,3,239,3,173,3,239,3,172,3,239,3,173,3,240,3,174,3,240,3,173,3,240,3,174,3,241,3,175,3,241,3,174,3,241,3,175,3,242,3,176,3,242,3,175,3,242,3,176,3,243,3,177,3,243,3,176,3,243,3,177,3,244,3,178,3,244,3,177,3,244,3,178,3,245,3,179,3,245,3,178,3,245,3,179,3,246,3,180,3,246,3,179,3,246,3,180,3,247,3,181,3,247,3,180,3,247,3,181,3,248,3,182,3,248,3,181,3,248,3,182,3,249,3,183,3,249,3,182,3,249,3,183,3,250,3,184,3,250,3,183,3,250,3,184,3,251,3,185,3,251,3,184,3,251,3,185,3,252,3,186,3,252,3,185,3,252,3,186,3,253,3,187,3,253,3,186,3,253,3,187,3,254,3,188,3,254,3,187,3,254,3,188,3,255,3,189,3,255,3,188,3,255,3,189,3,0,4,190,3,0,4,189,3,0,4,190,3,1,4,191,3,1,4,190,3,1,4,191,3,2,4,192,3,2,4,191,3,2,4,192,3,3,4,193,3,3,4,192,3,3,4,193,3,4,4,194,3,4,4,193,3,4,4,194,3,5,4,195,3,5,4,194,3,5,4,195,3,6,4,196,3,6,4,195,3,6,4,196,3,7,4,197,3,7,4,196,3,7,4,197,3,8,4,198,3,8,4,197,3,8,4,198,3,9,4,199,3,9,4,198,3,9,4,199,3,10,4,200,3,10,4,199,3,10,4,200,3,11,4,201,3,11,4,200,3,11,4,201,3,12,4,202,3,12,4,201,3,12,4,202,3,13,4,203,3,13,4,202,3,13,4,203,3,14,4,204,3,14,4,203,3,14,4,204,3,15,4,205,3,15,4,204,3,15,4,205,3,16,4,206,3,16,4,205,3,16,4,206,3,17,4,207,3,17,4,206,3,17,4,207,3,18,4,208,3,18,4,207,3,18,4,208,3,19,4,209,3,19,4,208,3,19,4,209,3,20,4,210,3,20,4,209,3,20,4,210,3,21,4,211,3,21,4,210,3,21,4,211,3,22,4,212,3,22,4,211,3,22,4,212,3,23,4,213,3,23,4,212,3,23,4,213,3,24,4,214,3,24,4,213,3,24,4,214,3,25,4,215,3,25,4,214,3,25,4,215,3,26,4,216,3,26,4,215,3,26,4,216,3,27,4,217,3,27,4,216,3,27,4,217,3,28,4,218,3,28,4,217,3,28,4,218,3,29,4,219,3,29,4,218,3,29,4,219,3,30,4,220,3,30,4,219,3,30,4,220,3,31,4,221,3,31,4,220,3,32,4,222,3,33,4,223,3,33,4,222,3,33,4,223,3,34,4,224,3,34,4,223,3,34,4,224,3,35,4,225,3,35,4,224,3,35,4,225,3,36,4,226,3,36,4,225,3,36,4,226,3,37,4,227,3,37,4,226,3,37,4,227,3,38,4,228,3,38,4,227,3,38,4,228,3,39,4,229,3,39,4,228,3,39,4,229,3,40,4,230,3,40,4,229,3,40,4,230,3,41,4,231,3,41,4,230,3,41,4,231,3,42,4,232,3,42,4,231,3,42,4,232,3,43,4,233,3,43,4,232,3,43,4,233,3,44,4,234,3,44,4,233,3,44,4,234,3,45,4,235,3,45,4,234,3,45,4,235,3,46,4,236,3,46,4,235,3,46,4,236,3,47,4,237,3,47,4,236,3,47,4,237,3,48,4,238,3,48,4,237,3,48,4,238,3,49,4,239,3,49,4,238,3,49,4,239,3,50,4,240,3,50,4,239,3,50,4,240,3,51,4,241,3,51,4,240,3,51,4,241,3,52,4,242,3,52,4,241,3,52,4,242,3,53,4,243,3,53,4,242,3,53,4,243,3,54,4,244,3,54,4,243,3,54,4,244,3,55,4,245,3,55,4,244,3,55,4,245,3,56,4,246,3,56,4,245,3,56,4,246,3,57,4,247,3,57,4,246,3,57,4,247,3,58,4,248,3,58,4,247,3,58,4,248,3,59,4,249,3,59,4,248,3,59,4,249,3,60,4,250,3,60,4,249,3,60,4,250,3,61,4,251,3,61,4,250,3,61,4,251,3,62,4,252,3,62,4,251,3,62,4,252,3,63,4,253,3,63,4,252,3,63,4,253,3,64,4,254,3,64,4,253,3,64,4,254,3,65,4,255,3,65,4,254,3,65,4,255,3,66,4,0,4,66,4,255,3,66,4,0,4,67,4,1,4,67,4,0,4,67,4,1,4,68,4,2,4,68,4,1,4,68,4,2,4,69,4,3,4,69,4,2,4,69,4,3,4,70,4,4,4,70,4,3,4,70,4,4,4,71,4,5,4,71,4,4,4,71,4,5,4,72,4,6,4,72,4,5,4,72,4,6,4,73,4,7,4,73,4,6,4,73,4,7,4,74,4,8,4,74,4,7,4,74,4,8,4,75,4,9,4,75,4,8,4,75,4,9,4,76,4,10,4,76,4,9,4,76,4,10,4,77,4,11,4,77,4,10,4,77,4,11,4,78,4,12,4,78,4,11,4,78,4,12,4,79,4,13,4,79,4,12,4,79,4,13,4,80,4,14,4,80,4,13,4,80,4,14,4,81,4,15,4,81,4,14,4,81,4,15,4,82,4,16,4,82,4,15,4,82,4,16,4,83,4,17,4,83,4,16,4,83,4,17,4,84,4,18,4,84,4,17,4,84,4,18,4,85,4,19,4,85,4,18,4,85,4,19,4,86,4,20,4,86,4,19,4,86,4,20,4,87,4,21,4,87,4,20,4,87,4,21,4,88,4,22,4,88,4,21,4,88,4,22,4,89,4,23,4,89,4,22,4,89,4,23,4,90,4,24,4,90,4,23,4,90,4,24,4,91,4,25,4,91,4,24,4,91,4,25,4,92,4,26,4,92,4,25,4,92,4,26,4,93,4,27,4,93,4,26,4,93,4,27,4,94,4,28,4,94,4,27,4,94,4,28,4,95,4,29,4,95,4,28,4,95,4,29,4,96,4,30,4,96,4,29,4,96,4,30,4,97,4,31,4,97,4,30,4,98,4,32,4,99,4,33,4,99,4,32,4,99,4,33,4,100,4,34,4,100,4,33,4,100,4,34,4,101,4,35,4,101,4,34,4,101,4,35,4,102,4,36,4,102,4,35,4,102,4,36,4,103,4,37,4,103,4,36,4,103,4,37,4,104,4,38,4,104,4,37,4,104,4,38,4,105,4,39,4,105,4,38,4,105,4,39,4,106,4,40,4,106,4,39,4,106,4,40,4,107,4,41,4,107,4,40,4,107,4,41,4,108,4,42,4,108,4,41,4,108,4,42,4,109,4,43,4,109,4,42,4,109,4,43,4,110,4,44,4,110,4,43,4,110,4,44,4,111,4,45,4,111,4,44,4,111,4,45,4,112,4,46,4,112,4,45,4,112,4,46,4,113,4,47,4,113,4,46,4,113,4,47,4,114,4,48,4,114,4,47,4,114,4,48,4,115,4,49,4,115,4,48,4,115,4,49,4,116,4,50,4,116,4,49,4,116,4,50,4,117,4,51,4,117,4,50,4,117,4,51,4,118,4,52,4,118,4,51,4,118,4,52,4,119,4,53,4,119,4,52,4,119,4,53,4,120,4,54,4,120,4,53,4,120,4,54,4,121,4,55,4,121,4,54,4,121,4,55,4,122,4,56,4,122,4,55,4,122,4,56,4,123,4,57,4,123,4,56,4,123,4,57,4,124,4,58,4,124,4,57,4,124,4,58,4,125,4,59,4,125,4,58,4,125,4,59,4,126,4,60,4,126,4,59,4,126,4,60,4,127,4,61,4,127,4,60,4,127,4,61,4,128,4,62,4,128,4,61,4,128,4,62,4,129,4,63,4,129,4,62,4,129,4,63,4,130,4,64,4,130,4,63,4,130,4,64,4,131,4,65,4,131,4,64,4,131,4,65,4,132,4,66,4,132,4,65,4,132,4,66,4,133,4,67,4,133,4,66,4,133,4,67,4,134,4,68,4,134,4,67,4,134,4,68,4,135,4,69,4,135,4,68,4,135,4,69,4,136,4,70,4,136,4,69,4,136,4,70,4,137,4,71,4,137,4,70,4,137,4,71,4,138,4,72,4,138,4,71,4,138,4,72,4,139,4,73,4,139,4,72,4,139,4,73,4,140,4,74,4,140,4,73,4,140,4,74,4,141,4,75,4,141,4,74,4,141,4,75,4,142,4,76,4,142,4,75,4,142,4,76,4,143,4,77,4,143,4,76,4,143,4,77,4,144,4,78,4,144,4,77,4,144,4,78,4,145,4,79,4,145,4,78,4,145,4,79,4,146,4,80,4,146,4,79,4,146,4,80,4,147,4,81,4,147,4,80,4,147,4,81,4,148,4,82,4,148,4,81,4,148,4,82,4,149,4,83,4,149,4,82,4,149,4,83,4,150,4,84,4,150,4,83,4,150,4,84,4,151,4,85,4,151,4,84,4,151,4,85,4,152,4,86,4,152,4,85,4,152,4,86,4,153,4,87,4,153,4,86,4,153,4,87,4,154,4,88,4,154,4,87,4,154,4,88,4,155,4,89,4,155,4,88,4,155,4,89,4,156,4,90,4,156,4,89,4,156,4,90,4,157,4,91,4,157,4,90,4,157,4,91,4,158,4,92,4,158,4,91,4,158,4,92,4,159,4,93,4,159,4,92,4,159,4,93,4,160,4,94,4,160,4,93,4,160,4,94,4,161,4,95,4,161,4,94,4,161,4,95,4,162,4,96,4,162,4,95,4,162,4,96,4,163,4,97,4,163,4,96,4,164,4,98,4,165,4,99,4,165,4,98,4,165,4,99,4,166,4,100,4,166,4,99,4,166,4,100,4,167,4,101,4,167,4,100,4,167,4,101,4,168,4,102,4,168,4,101,4,168,4,102,4,169,4,103,4,169,4,102,4,169,4,103,4,170,4,104,4,170,4,103,4,170,4,104,4,171,4,105,4,171,4,104,4,171,4,105,4,172,4,106,4,172,4,105,4,172,4,106,4,173,4,107,4,173,4,106,4,173,4,107,4,174,4,108,4,174,4,107,4,174,4,108,4,175,4,109,4,175,4,108,4,175,4,109,4,176,4,110,4,176,4,109,4,176,4,110,4,177,4,111,4,177,4,110,4,177,4,111,4,178,4,112,4,178,4,111,4,178,4,112,4,179,4,113,4,179,4,112,4,179,4,113,4,180,4,114,4,180,4,113,4,180,4,114,4,181,4,115,4,181,4,114,4,181,4,115,4,182,4,116,4,182,4,115,4,182,4,116,4,183,4,117,4,183,4,116,4,183,4,117,4,184,4,118,4,184,4,117,4,184,4,118,4,185,4,119,4,185,4,118,4,185,4,119,4,186,4,120,4,186,4,119,4,186,4,120,4,187,4,121,4,187,4,120,4,187,4,121,4,188,4,122,4,188,4,121,4,188,4,122,4,189,4,123,4,189,4,122,4,189,4,123,4,190,4,124,4,190,4,123,4,190,4,124,4,191,4,125,4,191,4,124,4,191,4,125,4,192,4,126,4,192,4,125,4,192,4,126,4,193,4,127,4,193,4,126,4,193,4,127,4,194,4,128,4,194,4,127,4,194,4,128,4,195,4,129,4,195,4,128,4,195,4,129,4,196,4,130,4,196,4,129,4,196,4,130,4,197,4,131,4,197,4,130,4,197,4,131,4,198,4,132,4,198,4,131,4,198,4,132,4,199,4,133,4,199,4,132,4,199,4,133,4,200,4,134,4,200,4,133,4,200,4,134,4,201,4,135,4,201,4,134,4,201,4,135,4,202,4,136,4,202,4,135,4,202,4,136,4,203,4,137,4,203,4,136,4,203,4,137,4,204,4,138,4,204,4,137,4,204,4,138,4,205,4,139,4,205,4,138,4,205,4,139,4,206,4,140,4,206,4,139,4,206,4,140,4,207,4,141,4,207,4,140,4,207,4,141,4,208,4,142,4,208,4,141,4,208,4,142,4,209,4,143,4,209,4,142,4,209,4,143,4,210,4,144,4,210,4,143,4,210,4,144,4,211,4,145,4,211,4,144,4,211,4,145,4,212,4,146,4,212,4,145,4,212,4,146,4,213,4,147,4,213,4,146,4,213,4,147,4,214,4,148,4,214,4,147,4,214,4,148,4,215,4,149,4,215,4,148,4,215,4,149,4,216,4,150,4,216,4,149,4,216,4,150,4,217,4,151,4,217,4,150,4,217,4,151,4,218,4,152,4,218,4,151,4,218,4,152,4,219,4,153,4,219,4,152,4,219,4,153,4,220,4,154,4,220,4,153,4,220,4,154,4,221,4,155,4,221,4,154,4,221,4,155,4,222,4,156,4,222,4,155,4,222,4,156,4,223,4,157,4,223,4,156,4,223,4,157,4,224,4,158,4,224,4,157,4,224,4,158,4,225,4,159,4,225,4,158,4,225,4,159,4,226,4,160,4,226,4,159,4,226,4,160,4,227,4,161,4,227,4,160,4,227,4,161,4,228,4,162,4,228,4,161,4,228,4,162,4,229,4,163,4,229,4,162,4,230,4,164,4,231,4,165,4,231,4,164,4,231,4,165,4,232,4,166,4,232,4,165,4,232,4,166,4,233,4,167,4,233,4,166,4,233,4,167,4,234,4,168,4,234,4,167,4,234,4,168,4,235,4,169,4,235,4,168,4,235,4,169,4,236,4,170,4,236,4,169,4,236,4,170,4,237,4,171,4,237,4,170,4,237,4,171,4,238,4,172,4,238,4,171,4,238,4,172,4,239,4,173,4,239,4,172,4,239,4,173,4,240,4,174,4,240,4,173,4,240,4,174,4,241,4,175,4,241,4,174,4,241,4,175,4,242,4,176,4,242,4,175,4,242,4,176,4,243,4,177,4,243,4,176,4,243,4,177,4,244,4,178,4,244,4,177,4,244,4,178,4,245,4,179,4,245,4,178,4,245,4,179,4,246,4,180,4,246,4,179,4,246,4,180,4,247,4,181,4,247,4,180,4,247,4,181,4,248,4,182,4,248,4,181,4,248,4,182,4,249,4,183,4,249,4,182,4,249,4,183,4,250,4,184,4,250,4,183,4,250,4,184,4,251,4,185,4,251,4,184,4,251,4,185,4,252,4,186,4,252,4,185,4,252,4,186,4,253,4,187,4,253,4,186,4,253,4,187,4,254,4,188,4,254,4,187,4,254,4,188,4,255,4,189,4,255,4,188,4,255,4,189,4,0,5,190,4,0,5,189,4,0,5,190,4,1,5,191,4,1,5,190,4,1,5,191,4,2,5,192,4,2,5,191,4,2,5,192,4,3,5,193,4,3,5,192,4,3,5,193,4,4,5,194,4,4,5,193,4,4,5,194,4,5,5,195,4,5,5,194,4,5,5,195,4,6,5,196,4,6,5,195,4,6,5,196,4,7,5,197,4,7,5,196,4,7,5,197,4,8,5,198,4,8,5,197,4,8,5,198,4,9,5,199,4,9,5,198,4,9,5,199,4,10,5,200,4,10,5,199,4,10,5,200,4,11,5,201,4,11,5,200,4,11,5,201,4,12,5,202,4,12,5,201,4,12,5,202,4,13,5,203,4,13,5,202,4,13,5,203,4,14,5,204,4,14,5,203,4,14,5,204,4,15,5,205,4,15,5,204,4,15,5,205,4,16,5,206,4,16,5,205,4,16,5,206,4,17,5,207,4,17,5,206,4,17,5,207,4,18,5,208,4,18,5,207,4,18,5,208,4,19,5,209,4,19,5,208,4,19,5,209,4,20,5,210,4,20,5,209,4,20,5,210,4,21,5,211,4,21,5,210,4,21,5,211,4,22,5,212,4,22,5,211,4,22,5,212,4,23,5,213,4,23,5,212,4,23,5,213,4,24,5,214,4,24,5,213,4,24,5,214,4,25,5,215,4,25,5,214,4,25,5,215,4,26,5,216,4,26,5,215,4,26,5,216,4,27,5,217,4,27,5,216,4,27,5,217,4,28,5,218,4,28,5,217,4,28,5,218,4,29,5,219,4,29,5,218,4,29,5,219,4,30,5,220,4,30,5,219,4,30,5,220,4,31,5,221,4,31,5,220,4,31,5,221,4,32,5,222,4,32,5,221,4,32,5,222,4,33,5,223,4,33,5,222,4,33,5,223,4,34,5,224,4,34,5,223,4,34,5,224,4,35,5,225,4,35,5,224,4,35,5,225,4,36,5,226,4,36,5,225,4,36,5,226,4,37,5,227,4,37,5,226,4,37,5,227,4,38,5,228,4,38,5,227,4,38,5,228,4,39,5,229,4,39,5,228,4,40,5,230,4,41,5,231,4,41,5,230,4,41,5,231,4,42,5,232,4,42,5,231,4,42,5,232,4,43,5,233,4,43,5,232,4,43,5,233,4,44,5,234,4,44,5,233,4,44,5,234,4,45,5,235,4,45,5,234,4,45,5,235,4,46,5,236,4,46,5,235,4,46,5,236,4,47,5,237,4,47,5,236,4,47,5,237,4,48,5,238,4,48,5,237,4,48,5,238,4,49,5,239,4,49,5,238,4,49,5,239,4,50,5,240,4,50,5,239,4,50,5,240,4,51,5,241,4,51,5,240,4,51,5,241,4,52,5,242,4,52,5,241,4,52,5,242,4,53,5,243,4,53,5,242,4,53,5,243,4,54,5,244,4,54,5,243,4,54,5,244,4,55,5,245,4,55,5,244,4,55,5,245,4,56,5,246,4,56,5,245,4,56,5,246,4,57,5,247,4,57,5,246,4,57,5,247,4,58,5,248,4,58,5,247,4,58,5,248,4,59,5,249,4,59,5,248,4,59,5,249,4,60,5,250,4,60,5,249,4,60,5,250,4,61,5,251,4,61,5,250,4,61,5,251,4,62,5,252,4,62,5,251,4,62,5,252,4,63,5,253,4,63,5,252,4,63,5,253,4,64,5,254,4,64,5,253,4,64,5,254,4,65,5,255,4,65,5,254,4,65,5,255,4,66,5,0,5,66,5,255,4,66,5,0,5,67,5,1,5,67,5,0,5,67,5,1,5,68,5,2,5,68,5,1,5,68,5,2,5,69,5,3,5,69,5,2,5,69,5,3,5,70,5,4,5,70,5,3,5,70,5,4,5,71,5,5,5,71,5,4,5,71,5,5,5,72,5,6,5,72,5,5,5,72,5,6,5,73,5,7,5,73,5,6,5,73,5,7,5,74,5,8,5,74,5,7,5,74,5,8,5,75,5,9,5,75,5,8,5,75,5,9,5,76,5,10,5,76,5,9,5,76,5,10,5,77,5,11,5,77,5,10,5,77,5,11,5,78,5,12,5,78,5,11,5,78,5,12,5,79,5,13,5,79,5,12,5,79,5,13,5,80,5,14,5,80,5,13,5,80,5,14,5,81,5,15,5,81,5,14,5,81,5,15,5,82,5,16,5,82,5,15,5,82,5,16,5,83,5,17,5,83,5,16,5,83,5,17,5,84,5,18,5,84,5,17,5,84,5,18,5,85,5,19,5,85,5,18,5,85,5,19,5,86,5,20,5,86,5,19,5,86,5,20,5,87,5,21,5,87,5,20,5,87,5,21,5,88,5,22,5,88,5,21,5,88,5,22,5,89,5,23,5,89,5,22,5,89,5,23,5,90,5,24,5,90,5,23,5,90,5,24,5,91,5,25,5,91,5,24,5,91,5,25,5,92,5,26,5,92,5,25,5,92,5,26,5,93,5,27,5,93,5,26,5,93,5,27,5,94,5,28,5,94,5,27,5,94,5,28,5,95,5,29,5,95,5,28,5,95,5,29,5,96,5,30,5,96,5,29,5,96,5,30,5,97,5,31,5,97,5,30,5,97,5,31,5,98,5,32,5,98,5,31,5,98,5,32,5,99,5,33,5,99,5,32,5,99,5,33,5,100,5,34,5,100,5,33,5,100,5,34,5,101,5,35,5,101,5,34,5,101,5,35,5,102,5,36,5,102,5,35,5,102,5,36,5,103,5,37,5,103,5,36,5,103,5,37,5,104,5,38,5,104,5,37,5,104,5,38,5,105,5,39,5,105,5,38,5,106,5,40,5,107,5,41,5,107,5,40,5,107,5,41,5,108,5,42,5,108,5,41,5,108,5,42,5,109,5,43,5,109,5,42,5,109,5,43,5,110,5,44,5,110,5,43,5,110,5,44,5,111,5,45,5,111,5,44,5,111,5,45,5,112,5,46,5,112,5,45,5,112,5,46,5,113,5,47,5,113,5,46,5,113,5,47,5,114,5,48,5,114,5,47,5,114,5,48,5,115,5,49,5,115,5,48,5,115,5,49,5,116,5,50,5,116,5,49,5,116,5,50,5,117,5,51,5,117,5,50,5,117,5,51,5,118,5,52,5,118,5,51,5,118,5,52,5,119,5,53,5,119,5,52,5,119,5,53,5,120,5,54,5,120,5,53,5,120,5,54,5,121,5,55,5,121,5,54,5,121,5,55,5,122,5,56,5,122,5,55,5,122,5,56,5,123,5,57,5,123,5,56,5,123,5,57,5,124,5,58,5,124,5,57,5,124,5,58,5,125,5,59,5,125,5,58,5,125,5,59,5,126,5,60,5,126,5,59,5,126,5,60,5,127,5,61,5,127,5,60,5,127,5,61,5,128,5,62,5,128,5,61,5,128,5,62,5,129,5,63,5,129,5,62,5,129,5,63,5,130,5,64,5,130,5,63,5,130,5,64,5,131,5,65,5,131,5,64,5,131,5,65,5,132,5,66,5,132,5,65,5,132,5,66,5,133,5,67,5,133,5,66,5,133,5,67,5,134,5,68,5,134,5,67,5,134,5,68,5,135,5,69,5,135,5,68,5,135,5,69,5,136,5,70,5,136,5,69,5,136,5,70,5,137,5,71,5,137,5,70,5,137,5,71,5,138,5,72,5,138,5,71,5,138,5,72,5,139,5,73,5,139,5,72,5,139,5,73,5,140,5,74,5,140,5,73,5,140,5,74,5,141,5,75,5,141,5,74,5,141,5,75,5,142,5,76,5,142,5,75,5,142,5,76,5,143,5,77,5,143,5,76,5,143,5,77,5,144,5,78,5,144,5,77,5,144,5,78,5,145,5,79,5,145,5,78,5,145,5,79,5,146,5,80,5,146,5,79,5,146,5,80,5,147,5,81,5,147,5,80,5,147,5,81,5,148,5,82,5,148,5,81,5,148,5,82,5,149,5,83,5,149,5,82,5,149,5,83,5,150,5,84,5,150,5,83,5,150,5,84,5,151,5,85,5,151,5,84,5,151,5,85,5,152,5,86,5,152,5,85,5,152,5,86,5,153,5,87,5,153,5,86,5,153,5,87,5,154,5,88,5,154,5,87,5,154,5,88,5,155,5,89,5,155,5,88,5,155,5,89,5,156,5,90,5,156,5,89,5,156,5,90,5,157,5,91,5,157,5,90,5,157,5,91,5,158,5,92,5,158,5,91,5,158,5,92,5,159,5,93,5,159,5,92,5,159,5,93,5,160,5,94,5,160,5,93,5,160,5,94,5,161,5,95,5,161,5,94,5,161,5,95,5,162,5,96,5,162,5,95,5,162,5,96,5,163,5,97,5,163,5,96,5,163,5,97,5,164,5,98,5,164,5,97,5,164,5,98,5,165,5,99,5,165,5,98,5,165,5,99,5,166,5,100,5,166,5,99,5,166,5,100,5,167,5,101,5,167,5,100,5,167,5,101,5,168,5,102,5,168,5,101,5,168,5,102,5,169,5,103,5,169,5,102,5,169,5,103,5,170,5,104,5,170,5,103,5,170,5,104,5,171,5,105,5,171,5,104,5,172,5,106,5,173,5,107,5,173,5,106,5,173,5,107,5,174,5,108,5,174,5,107,5,174,5,108,5,175,5,109,5,175,5,108,5,175,5,109,5,176,5,110,5,176,5,109,5,176,5,110,5,177,5,111,5,177,5,110,5,177,5,111,5,178,5,112,5,178,5,111,5,178,5,112,5,179,5,113,5,179,5,112,5,179,5,113,5,180,5,114,5,180,5,113,5,180,5,114,5,181,5,115,5,181,5,114,5,181,5,115,5,182,5,116,5,182,5,115,5,182,5,116,5,183,5,117,5,183,5,116,5,183,5,117,5,184,5,118,5,184,5,117,5,184,5,118,5,185,5,119,5,185,5,118,5,185,5,119,5,186,5,120,5,186,5,119,5,186,5,120,5,187,5,121,5,187,5,120,5,187,5,121,5,188,5,122,5,188,5,121,5,188,5,122,5,189,5,123,5,189,5,122,5,189,5,123,5,190,5,124,5,190,5,123,5,190,5,124,5,191,5,125,5,191,5,124,5,191,5,125,5,192,5,126,5,192,5,125,5,192,5,126,5,193,5,127,5,193,5,126,5,193,5,127,5,194,5,128,5,194,5,127,5,194,5,128,5,195,5,129,5,195,5,128,5,195,5,129,5,196,5,130,5,196,5,129,5,196,5,130,5,197,5,131,5,197,5,130,5,197,5,131,5,198,5,132,5,198,5,131,5,198,5,132,5,199,5,133,5,199,5,132,5,199,5,133,5,200,5,134,5,200,5,133,5,200,5,134,5,201,5,135,5,201,5,134,5,201,5,135,5,202,5,136,5,202,5,135,5,202,5,136,5,203,5,137,5,203,5,136,5,203,5,137,5,204,5,138,5,204,5,137,5,204,5,138,5,205,5,139,5,205,5,138,5,205,5,139,5,206,5,140,5,206,5,139,5,206,5,140,5,207,5,141,5,207,5,140,5,207,5,141,5,208,5,142,5,208,5,141,5,208,5,142,5,209,5,143,5,209,5,142,5,209,5,143,5,210,5,144,5,210,5,143,5,210,5,144,5,211,5,145,5,211,5,144,5,211,5,145,5,212,5,146,5,212,5,145,5,212,5,146,5,213,5,147,5,213,5,146,5,213,5,147,5,214,5,148,5,214,5,147,5,214,5,148,5,215,5,149,5,215,5,148,5,215,5,149,5,216,5,150,5,216,5,149,5,216,5,150,5,217,5,151,5,217,5,150,5,217,5,151,5,218,5,152,5,218,5,151,5,218,5,152,5,219,5,153,5,219,5,152,5,219,5,153,5,220,5,154,5,220,5,153,5,220,5,154,5,221,5,155,5,221,5,154,5,221,5,155,5,222,5,156,5,222,5,155,5,222,5,156,5,223,5,157,5,223,5,156,5,223,5,157,5,224,5,158,5,224,5,157,5,224,5,158,5,225,5,159,5,225,5,158,5,225,5,159,5,226,5,160,5,226,5,159,5,226,5,160,5,227,5,161,5,227,5,160,5,227,5,161,5,228,5,162,5,228,5,161,5,228,5,162,5,229,5,163,5,229,5,162,5,229,5,163,5,230,5,164,5,230,5,163,5,230,5,164,5,231,5,165,5,231,5,164,5,231,5,165,5,232,5,166,5,232,5,165,5,232,5,166,5,233,5,167,5,233,5,166,5,233,5,167,5,234,5,168,5,234,5,167,5,234,5,168,5,235,5,169,5,235,5,168,5,235,5,169,5,236,5,170,5,236,5,169,5,236,5,170,5,237,5,171,5,237,5,170,5,238,5,172,5,239,5,173,5,239,5,172,5,239,5,173,5,240,5,174,5,240,5,173,5,240,5,174,5,241,5,175,5,241,5,174,5,241,5,175,5,242,5,176,5,242,5,175,5,242,5,176,5,243,5,177,5,243,5,176,5,243,5,177,5,244,5,178,5,244,5,177,5,244,5,178,5,245,5,179,5,245,5,178,5,245,5,179,5,246,5,180,5,246,5,179,5,246,5,180,5,247,5,181,5,247,5,180,5,247,5,181,5,248,5,182,5,248,5,181,5,248,5,182,5,249,5,183,5,249,5,182,5,249,5,183,5,250,5,184,5,250,5,183,5,250,5,184,5,251,5,185,5,251,5,184,5,251,5,185,5,252,5,186,5,252,5,185,5,252,5,186,5,253,5,187,5,253,5,186,5,253,5,187,5,254,5,188,5,254,5,187,5,254,5,188,5,255,5,189,5,255,5,188,5,255,5,189,5,0,6,190,5,0,6,189,5,0,6,190,5,1,6,191,5,1,6,190,5,1,6,191,5,2,6,192,5,2,6,191,5,2,6,192,5,3,6,193,5,3,6,192,5,3,6,193,5,4,6,194,5,4,6,193,5,4,6,194,5,5,6,195,5,5,6,194,5,5,6,195,5,6,6,196,5,6,6,195,5,6,6,196,5,7,6,197,5,7,6,196,5,7,6,197,5,8,6,198,5,8,6,197,5,8,6,198,5,9,6,199,5,9,6,198,5,9,6,199,5,10,6,200,5,10,6,199,5,10,6,200,5,11,6,201,5,11,6,200,5,11,6,201,5,12,6,202,5,12,6,201,5,12,6,202,5,13,6,203,5,13,6,202,5,13,6,203,5,14,6,204,5,14,6,203,5,14,6,204,5,15,6,205,5,15,6,204,5,15,6,205,5,16,6,206,5,16,6,205,5,16,6,206,5,17,6,207,5,17,6,206,5,17,6,207,5,18,6,208,5,18,6,207,5,18,6,208,5,19,6,209,5,19,6,208,5,19,6,209,5,20,6,210,5,20,6,209,5,20,6,210,5,21,6,211,5,21,6,210,5,21,6,211,5,22,6,212,5,22,6,211,5,22,6,212,5,23,6,213,5,23,6,212,5,23,6,213,5,24,6,214,5,24,6,213,5,24,6,214,5,25,6,215,5,25,6,214,5,25,6,215,5,26,6,216,5,26,6,215,5,26,6,216,5,27,6,217,5,27,6,216,5,27,6,217,5,28,6,218,5,28,6,217,5,28,6,218,5,29,6,219,5,29,6,218,5,29,6,219,5,30,6,220,5,30,6,219,5,30,6,220,5,31,6,221,5,31,6,220,5,31,6,221,5,32,6,222,5,32,6,221,5,32,6,222,5,33,6,223,5,33,6,222,5,33,6,223,5,34,6,224,5,34,6,223,5,34,6,224,5,35,6,225,5,35,6,224,5,35,6,225,5,36,6,226,5,36,6,225,5,36,6,226,5,37,6,227,5,37,6,226,5,37,6,227,5,38,6,228,5,38,6,227,5,38,6,228,5,39,6,229,5,39,6,228,5,39,6,229,5,40,6,230,5,40,6,229,5,40,6,230,5,41,6,231,5,41,6,230,5,41,6,231,5,42,6,232,5,42,6,231,5,42,6,232,5,43,6,233,5,43,6,232,5,43,6,233,5,44,6,234,5,44,6,233,5,44,6,234,5,45,6,235,5,45,6,234,5,45,6,235,5,46,6,236,5,46,6,235,5,46,6,236,5,47,6,237,5,47,6,236,5,48,6,238,5,49,6,239,5,49,6,238,5,49,6,239,5,50,6,240,5,50,6,239,5,50,6,240,5,51,6,241,5,51,6,240,5,51,6,241,5,52,6,242,5,52,6,241,5,52,6,242,5,53,6,243,5,53,6,242,5,53,6,243,5,54,6,244,5,54,6,243,5,54,6,244,5,55,6,245,5,55,6,244,5,55,6,245,5,56,6,246,5,56,6,245,5,56,6,246,5,57,6,247,5,57,6,246,5,57,6,247,5,58,6,248,5,58,6,247,5,58,6,248,5,59,6,249,5,59,6,248,5,59,6,249,5,60,6,250,5,60,6,249,5,60,6,250,5,61,6,251,5,61,6,250,5,61,6,251,5,62,6,252,5,62,6,251,5,62,6,252,5,63,6,253,5,63,6,252,5,63,6,253,5,64,6,254,5,64,6,253,5,64,6,254,5,65,6,255,5,65,6,254,5,65,6,255,5,66,6,0,6,66,6,255,5,66,6,0,6,67,6,1,6,67,6,0,6,67,6,1,6,68,6,2,6,68,6,1,6,68,6,2,6,69,6,3,6,69,6,2,6,69,6,3,6,70,6,4,6,70,6,3,6,70,6,4,6,71,6,5,6,71,6,4,6,71,6,5,6,72,6,6,6,72,6,5,6,72,6,6,6,73,6,7,6,73,6,6,6,73,6,7,6,74,6,8,6,74,6,7,6,74,6,8,6,75,6,9,6,75,6,8,6,75,6,9,6,76,6,10,6,76,6,9,6,76,6,10,6,77,6,11,6,77,6,10,6,77,6,11,6,78,6,12,6,78,6,11,6,78,6,12,6,79,6,13,6,79,6,12,6,79,6,13,6,80,6,14,6,80,6,13,6,80,6,14,6,81,6,15,6,81,6,14,6,81,6,15,6,82,6,16,6,82,6,15,6,82,6,16,6,83,6,17,6,83,6,16,6,83,6,17,6,84,6,18,6,84,6,17,6,84,6,18,6,85,6,19,6,85,6,18,6,85,6,19,6,86,6,20,6,86,6,19,6,86,6,20,6,87,6,21,6,87,6,20,6,87,6,21,6,88,6,22,6,88,6,21,6,88,6,22,6,89,6,23,6,89,6,22,6,89,6,23,6,90,6,24,6,90,6,23,6,90,6,24,6,91,6,25,6,91,6,24,6,91,6,25,6,92,6,26,6,92,6,25,6,92,6,26,6,93,6,27,6,93,6,26,6,93,6,27,6,94,6,28,6,94,6,27,6,94,6,28,6,95,6,29,6,95,6,28,6,95,6,29,6,96,6,30,6,96,6,29,6,96,6,30,6,97,6,31,6,97,6,30,6,97,6,31,6,98,6,32,6,98,6,31,6,98,6,32,6,99,6,33,6,99,6,32,6,99,6,33,6,100,6,34,6,100,6,33,6,100,6,34,6,101,6,35,6,101,6,34,6,101,6,35,6,102,6,36,6,102,6,35,6,102,6,36,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+337920);
/* memory initializer */ allocate([103,6,37,6,103,6,36,6,103,6,37,6,104,6,38,6,104,6,37,6,104,6,38,6,105,6,39,6,105,6,38,6,105,6,39,6,106,6,40,6,106,6,39,6,106,6,40,6,107,6,41,6,107,6,40,6,107,6,41,6,108,6,42,6,108,6,41,6,108,6,42,6,109,6,43,6,109,6,42,6,109,6,43,6,110,6,44,6,110,6,43,6,110,6,44,6,111,6,45,6,111,6,44,6,111,6,45,6,112,6,46,6,112,6,45,6,112,6,46,6,113,6,47,6,113,6,46,6,114,6,48,6,115,6,49,6,115,6,48,6,115,6,49,6,116,6,50,6,116,6,49,6,116,6,50,6,117,6,51,6,117,6,50,6,117,6,51,6,118,6,52,6,118,6,51,6,118,6,52,6,119,6,53,6,119,6,52,6,119,6,53,6,120,6,54,6,120,6,53,6,120,6,54,6,121,6,55,6,121,6,54,6,121,6,55,6,122,6,56,6,122,6,55,6,122,6,56,6,123,6,57,6,123,6,56,6,123,6,57,6,124,6,58,6,124,6,57,6,124,6,58,6,125,6,59,6,125,6,58,6,125,6,59,6,126,6,60,6,126,6,59,6,126,6,60,6,127,6,61,6,127,6,60,6,127,6,61,6,128,6,62,6,128,6,61,6,128,6,62,6,129,6,63,6,129,6,62,6,129,6,63,6,130,6,64,6,130,6,63,6,130,6,64,6,131,6,65,6,131,6,64,6,131,6,65,6,132,6,66,6,132,6,65,6,132,6,66,6,133,6,67,6,133,6,66,6,133,6,67,6,134,6,68,6,134,6,67,6,134,6,68,6,135,6,69,6,135,6,68,6,135,6,69,6,136,6,70,6,136,6,69,6,136,6,70,6,137,6,71,6,137,6,70,6,137,6,71,6,138,6,72,6,138,6,71,6,138,6,72,6,139,6,73,6,139,6,72,6,139,6,73,6,140,6,74,6,140,6,73,6,140,6,74,6,141,6,75,6,141,6,74,6,141,6,75,6,142,6,76,6,142,6,75,6,142,6,76,6,143,6,77,6,143,6,76,6,143,6,77,6,144,6,78,6,144,6,77,6,144,6,78,6,145,6,79,6,145,6,78,6,145,6,79,6,146,6,80,6,146,6,79,6,146,6,80,6,147,6,81,6,147,6,80,6,147,6,81,6,148,6,82,6,148,6,81,6,148,6,82,6,149,6,83,6,149,6,82,6,149,6,83,6,150,6,84,6,150,6,83,6,150,6,84,6,151,6,85,6,151,6,84,6,151,6,85,6,152,6,86,6,152,6,85,6,152,6,86,6,153,6,87,6,153,6,86,6,153,6,87,6,154,6,88,6,154,6,87,6,154,6,88,6,155,6,89,6,155,6,88,6,155,6,89,6,156,6,90,6,156,6,89,6,156,6,90,6,157,6,91,6,157,6,90,6,157,6,91,6,158,6,92,6,158,6,91,6,158,6,92,6,159,6,93,6,159,6,92,6,159,6,93,6,160,6,94,6,160,6,93,6,160,6,94,6,161,6,95,6,161,6,94,6,161,6,95,6,162,6,96,6,162,6,95,6,162,6,96,6,163,6,97,6,163,6,96,6,163,6,97,6,164,6,98,6,164,6,97,6,164,6,98,6,165,6,99,6,165,6,98,6,165,6,99,6,166,6,100,6,166,6,99,6,166,6,100,6,167,6,101,6,167,6,100,6,167,6,101,6,168,6,102,6,168,6,101,6,168,6,102,6,169,6,103,6,169,6,102,6,169,6,103,6,170,6,104,6,170,6,103,6,170,6,104,6,171,6,105,6,171,6,104,6,171,6,105,6,172,6,106,6,172,6,105,6,172,6,106,6,173,6,107,6,173,6,106,6,173,6,107,6,174,6,108,6,174,6,107,6,174,6,108,6,175,6,109,6,175,6,108,6,175,6,109,6,176,6,110,6,176,6,109,6,176,6,110,6,177,6,111,6,177,6,110,6,177,6,111,6,178,6,112,6,178,6,111,6,178,6,112,6,179,6,113,6,179,6,112,6,180,6,114,6,181,6,115,6,181,6,114,6,181,6,115,6,182,6,116,6,182,6,115,6,182,6,116,6,183,6,117,6,183,6,116,6,183,6,117,6,184,6,118,6,184,6,117,6,184,6,118,6,185,6,119,6,185,6,118,6,185,6,119,6,186,6,120,6,186,6,119,6,186,6,120,6,187,6,121,6,187,6,120,6,187,6,121,6,188,6,122,6,188,6,121,6,188,6,122,6,189,6,123,6,189,6,122,6,189,6,123,6,190,6,124,6,190,6,123,6,190,6,124,6,191,6,125,6,191,6,124,6,191,6,125,6,192,6,126,6,192,6,125,6,192,6,126,6,193,6,127,6,193,6,126,6,193,6,127,6,194,6,128,6,194,6,127,6,194,6,128,6,195,6,129,6,195,6,128,6,195,6,129,6,196,6,130,6,196,6,129,6,196,6,130,6,197,6,131,6,197,6,130,6,197,6,131,6,198,6,132,6,198,6,131,6,198,6,132,6,199,6,133,6,199,6,132,6,199,6,133,6,200,6,134,6,200,6,133,6,200,6,134,6,201,6,135,6,201,6,134,6,201,6,135,6,202,6,136,6,202,6,135,6,202,6,136,6,203,6,137,6,203,6,136,6,203,6,137,6,204,6,138,6,204,6,137,6,204,6,138,6,205,6,139,6,205,6,138,6,205,6,139,6,206,6,140,6,206,6,139,6,206,6,140,6,207,6,141,6,207,6,140,6,207,6,141,6,208,6,142,6,208,6,141,6,208,6,142,6,209,6,143,6,209,6,142,6,209,6,143,6,210,6,144,6,210,6,143,6,210,6,144,6,211,6,145,6,211,6,144,6,211,6,145,6,212,6,146,6,212,6,145,6,212,6,146,6,213,6,147,6,213,6,146,6,213,6,147,6,214,6,148,6,214,6,147,6,214,6,148,6,215,6,149,6,215,6,148,6,215,6,149,6,216,6,150,6,216,6,149,6,216,6,150,6,217,6,151,6,217,6,150,6,217,6,151,6,218,6,152,6,218,6,151,6,218,6,152,6,219,6,153,6,219,6,152,6,219,6,153,6,220,6,154,6,220,6,153,6,220,6,154,6,221,6,155,6,221,6,154,6,221,6,155,6,222,6,156,6,222,6,155,6,222,6,156,6,223,6,157,6,223,6,156,6,223,6,157,6,224,6,158,6,224,6,157,6,224,6,158,6,225,6,159,6,225,6,158,6,225,6,159,6,226,6,160,6,226,6,159,6,226,6,160,6,227,6,161,6,227,6,160,6,227,6,161,6,228,6,162,6,228,6,161,6,228,6,162,6,229,6,163,6,229,6,162,6,229,6,163,6,230,6,164,6,230,6,163,6,230,6,164,6,231,6,165,6,231,6,164,6,231,6,165,6,232,6,166,6,232,6,165,6,232,6,166,6,233,6,167,6,233,6,166,6,233,6,167,6,234,6,168,6,234,6,167,6,234,6,168,6,235,6,169,6,235,6,168,6,235,6,169,6,236,6,170,6,236,6,169,6,236,6,170,6,237,6,171,6,237,6,170,6,237,6,171,6,238,6,172,6,238,6,171,6,238,6,172,6,239,6,173,6,239,6,172,6,239,6,173,6,240,6,174,6,240,6,173,6,240,6,174,6,241,6,175,6,241,6,174,6,241,6,175,6,242,6,176,6,242,6,175,6,242,6,176,6,243,6,177,6,243,6,176,6,243,6,177,6,244,6,178,6,244,6,177,6,244,6,178,6,245,6,179,6,245,6,178,6,246,6,180,6,247,6,181,6,247,6,180,6,247,6,181,6,248,6,182,6,248,6,181,6,248,6,182,6,249,6,183,6,249,6,182,6,249,6,183,6,250,6,184,6,250,6,183,6,250,6,184,6,251,6,185,6,251,6,184,6,251,6,185,6,252,6,186,6,252,6,185,6,252,6,186,6,253,6,187,6,253,6,186,6,253,6,187,6,254,6,188,6,254,6,187,6,254,6,188,6,255,6,189,6,255,6,188,6,255,6,189,6,0,7,190,6,0,7,189,6,0,7,190,6,1,7,191,6,1,7,190,6,1,7,191,6,2,7,192,6,2,7,191,6,2,7,192,6,3,7,193,6,3,7,192,6,3,7,193,6,4,7,194,6,4,7,193,6,4,7,194,6,5,7,195,6,5,7,194,6,5,7,195,6,6,7,196,6,6,7,195,6,6,7,196,6,7,7,197,6,7,7,196,6,7,7,197,6,8,7,198,6,8,7,197,6,8,7,198,6,9,7,199,6,9,7,198,6,9,7,199,6,10,7,200,6,10,7,199,6,10,7,200,6,11,7,201,6,11,7,200,6,11,7,201,6,12,7,202,6,12,7,201,6,12,7,202,6,13,7,203,6,13,7,202,6,13,7,203,6,14,7,204,6,14,7,203,6,14,7,204,6,15,7,205,6,15,7,204,6,15,7,205,6,16,7,206,6,16,7,205,6,16,7,206,6,17,7,207,6,17,7,206,6,17,7,207,6,18,7,208,6,18,7,207,6,18,7,208,6,19,7,209,6,19,7,208,6,19,7,209,6,20,7,210,6,20,7,209,6,20,7,210,6,21,7,211,6,21,7,210,6,21,7,211,6,22,7,212,6,22,7,211,6,22,7,212,6,23,7,213,6,23,7,212,6,23,7,213,6,24,7,214,6,24,7,213,6,24,7,214,6,25,7,215,6,25,7,214,6,25,7,215,6,26,7,216,6,26,7,215,6,26,7,216,6,27,7,217,6,27,7,216,6,27,7,217,6,28,7,218,6,28,7,217,6,28,7,218,6,29,7,219,6,29,7,218,6,29,7,219,6,30,7,220,6,30,7,219,6,30,7,220,6,31,7,221,6,31,7,220,6,31,7,221,6,32,7,222,6,32,7,221,6,32,7,222,6,33,7,223,6,33,7,222,6,33,7,223,6,34,7,224,6,34,7,223,6,34,7,224,6,35,7,225,6,35,7,224,6,35,7,225,6,36,7,226,6,36,7,225,6,36,7,226,6,37,7,227,6,37,7,226,6,37,7,227,6,38,7,228,6,38,7,227,6,38,7,228,6,39,7,229,6,39,7,228,6,39,7,229,6,40,7,230,6,40,7,229,6,40,7,230,6,41,7,231,6,41,7,230,6,41,7,231,6,42,7,232,6,42,7,231,6,42,7,232,6,43,7,233,6,43,7,232,6,43,7,233,6,44,7,234,6,44,7,233,6,44,7,234,6,45,7,235,6,45,7,234,6,45,7,235,6,46,7,236,6,46,7,235,6,46,7,236,6,47,7,237,6,47,7,236,6,47,7,237,6,48,7,238,6,48,7,237,6,48,7,238,6,49,7,239,6,49,7,238,6,49,7,239,6,50,7,240,6,50,7,239,6,50,7,240,6,51,7,241,6,51,7,240,6,51,7,241,6,52,7,242,6,52,7,241,6,52,7,242,6,53,7,243,6,53,7,242,6,53,7,243,6,54,7,244,6,54,7,243,6,54,7,244,6,55,7,245,6,55,7,244,6,56,7,246,6,57,7,247,6,57,7,246,6,57,7,247,6,58,7,248,6,58,7,247,6,58,7,248,6,59,7,249,6,59,7,248,6,59,7,249,6,60,7,250,6,60,7,249,6,60,7,250,6,61,7,251,6,61,7,250,6,61,7,251,6,62,7,252,6,62,7,251,6,62,7,252,6,63,7,253,6,63,7,252,6,63,7,253,6,64,7,254,6,64,7,253,6,64,7,254,6,65,7,255,6,65,7,254,6,65,7,255,6,66,7,0,7,66,7,255,6,66,7,0,7,67,7,1,7,67,7,0,7,67,7,1,7,68,7,2,7,68,7,1,7,68,7,2,7,69,7,3,7,69,7,2,7,69,7,3,7,70,7,4,7,70,7,3,7,70,7,4,7,71,7,5,7,71,7,4,7,71,7,5,7,72,7,6,7,72,7,5,7,72,7,6,7,73,7,7,7,73,7,6,7,73,7,7,7,74,7,8,7,74,7,7,7,74,7,8,7,75,7,9,7,75,7,8,7,75,7,9,7,76,7,10,7,76,7,9,7,76,7,10,7,77,7,11,7,77,7,10,7,77,7,11,7,78,7,12,7,78,7,11,7,78,7,12,7,79,7,13,7,79,7,12,7,79,7,13,7,80,7,14,7,80,7,13,7,80,7,14,7,81,7,15,7,81,7,14,7,81,7,15,7,82,7,16,7,82,7,15,7,82,7,16,7,83,7,17,7,83,7,16,7,83,7,17,7,84,7,18,7,84,7,17,7,84,7,18,7,85,7,19,7,85,7,18,7,85,7,19,7,86,7,20,7,86,7,19,7,86,7,20,7,87,7,21,7,87,7,20,7,87,7,21,7,88,7,22,7,88,7,21,7,88,7,22,7,89,7,23,7,89,7,22,7,89,7,23,7,90,7,24,7,90,7,23,7,90,7,24,7,91,7,25,7,91,7,24,7,91,7,25,7,92,7,26,7,92,7,25,7,92,7,26,7,93,7,27,7,93,7,26,7,93,7,27,7,94,7,28,7,94,7,27,7,94,7,28,7,95,7,29,7,95,7,28,7,95,7,29,7,96,7,30,7,96,7,29,7,96,7,30,7,97,7,31,7,97,7,30,7,97,7,31,7,98,7,32,7,98,7,31,7,98,7,32,7,99,7,33,7,99,7,32,7,99,7,33,7,100,7,34,7,100,7,33,7,100,7,34,7,101,7,35,7,101,7,34,7,101,7,35,7,102,7,36,7,102,7,35,7,102,7,36,7,103,7,37,7,103,7,36,7,103,7,37,7,104,7,38,7,104,7,37,7,104,7,38,7,105,7,39,7,105,7,38,7,105,7,39,7,106,7,40,7,106,7,39,7,106,7,40,7,107,7,41,7,107,7,40,7,107,7,41,7,108,7,42,7,108,7,41,7,108,7,42,7,109,7,43,7,109,7,42,7,109,7,43,7,110,7,44,7,110,7,43,7,110,7,44,7,111,7,45,7,111,7,44,7,111,7,45,7,112,7,46,7,112,7,45,7,112,7,46,7,113,7,47,7,113,7,46,7,113,7,47,7,114,7,48,7,114,7,47,7,114,7,48,7,115,7,49,7,115,7,48,7,115,7,49,7,116,7,50,7,116,7,49,7,116,7,50,7,117,7,51,7,117,7,50,7,117,7,51,7,118,7,52,7,118,7,51,7,118,7,52,7,119,7,53,7,119,7,52,7,119,7,53,7,120,7,54,7,120,7,53,7,120,7,54,7,121,7,55,7,121,7,54,7,122,7,56,7,123,7,57,7,123,7,56,7,123,7,57,7,124,7,58,7,124,7,57,7,124,7,58,7,125,7,59,7,125,7,58,7,125,7,59,7,126,7,60,7,126,7,59,7,126,7,60,7,127,7,61,7,127,7,60,7,127,7,61,7,128,7,62,7,128,7,61,7,128,7,62,7,129,7,63,7,129,7,62,7,129,7,63,7,130,7,64,7,130,7,63,7,130,7,64,7,131,7,65,7,131,7,64,7,131,7,65,7,132,7,66,7,132,7,65,7,132,7,66,7,133,7,67,7,133,7,66,7,133,7,67,7,134,7,68,7,134,7,67,7,134,7,68,7,135,7,69,7,135,7,68,7,135,7,69,7,136,7,70,7,136,7,69,7,136,7,70,7,137,7,71,7,137,7,70,7,137,7,71,7,138,7,72,7,138,7,71,7,138,7,72,7,139,7,73,7,139,7,72,7,139,7,73,7,140,7,74,7,140,7,73,7,140,7,74,7,141,7,75,7,141,7,74,7,141,7,75,7,142,7,76,7,142,7,75,7,142,7,76,7,143,7,77,7,143,7,76,7,143,7,77,7,144,7,78,7,144,7,77,7,144,7,78,7,145,7,79,7,145,7,78,7,145,7,79,7,146,7,80,7,146,7,79,7,146,7,80,7,147,7,81,7,147,7,80,7,147,7,81,7,148,7,82,7,148,7,81,7,148,7,82,7,149,7,83,7,149,7,82,7,149,7,83,7,150,7,84,7,150,7,83,7,150,7,84,7,151,7,85,7,151,7,84,7,151,7,85,7,152,7,86,7,152,7,85,7,152,7,86,7,153,7,87,7,153,7,86,7,153,7,87,7,154,7,88,7,154,7,87,7,154,7,88,7,155,7,89,7,155,7,88,7,155,7,89,7,156,7,90,7,156,7,89,7,156,7,90,7,157,7,91,7,157,7,90,7,157,7,91,7,158,7,92,7,158,7,91,7,158,7,92,7,159,7,93,7,159,7,92,7,159,7,93,7,160,7,94,7,160,7,93,7,160,7,94,7,161,7,95,7,161,7,94,7,161,7,95,7,162,7,96,7,162,7,95,7,162,7,96,7,163,7,97,7,163,7,96,7,163,7,97,7,164,7,98,7,164,7,97,7,164,7,98,7,165,7,99,7,165,7,98,7,165,7,99,7,166,7,100,7,166,7,99,7,166,7,100,7,167,7,101,7,167,7,100,7,167,7,101,7,168,7,102,7,168,7,101,7,168,7,102,7,169,7,103,7,169,7,102,7,169,7,103,7,170,7,104,7,170,7,103,7,170,7,104,7,171,7,105,7,171,7,104,7,171,7,105,7,172,7,106,7,172,7,105,7,172,7,106,7,173,7,107,7,173,7,106,7,173,7,107,7,174,7,108,7,174,7,107,7,174,7,108,7,175,7,109,7,175,7,108,7,175,7,109,7,176,7,110,7,176,7,109,7,176,7,110,7,177,7,111,7,177,7,110,7,177,7,111,7,178,7,112,7,178,7,111,7,178,7,112,7,179,7,113,7,179,7,112,7,179,7,113,7,180,7,114,7,180,7,113,7,180,7,114,7,181,7,115,7,181,7,114,7,181,7,115,7,182,7,116,7,182,7,115,7,182,7,116,7,183,7,117,7,183,7,116,7,183,7,117,7,184,7,118,7,184,7,117,7,184,7,118,7,185,7,119,7,185,7,118,7,185,7,119,7,186,7,120,7,186,7,119,7,186,7,120,7,187,7,121,7,187,7,120,7,188,7,122,7,189,7,123,7,189,7,122,7,189,7,123,7,190,7,124,7,190,7,123,7,190,7,124,7,191,7,125,7,191,7,124,7,191,7,125,7,192,7,126,7,192,7,125,7,192,7,126,7,193,7,127,7,193,7,126,7,193,7,127,7,194,7,128,7,194,7,127,7,194,7,128,7,195,7,129,7,195,7,128,7,195,7,129,7,196,7,130,7,196,7,129,7,196,7,130,7,197,7,131,7,197,7,130,7,197,7,131,7,198,7,132,7,198,7,131,7,198,7,132,7,199,7,133,7,199,7,132,7,199,7,133,7,200,7,134,7,200,7,133,7,200,7,134,7,201,7,135,7,201,7,134,7,201,7,135,7,202,7,136,7,202,7,135,7,202,7,136,7,203,7,137,7,203,7,136,7,203,7,137,7,204,7,138,7,204,7,137,7,204,7,138,7,205,7,139,7,205,7,138,7,205,7,139,7,206,7,140,7,206,7,139,7,206,7,140,7,207,7,141,7,207,7,140,7,207,7,141,7,208,7,142,7,208,7,141,7,208,7,142,7,209,7,143,7,209,7,142,7,209,7,143,7,210,7,144,7,210,7,143,7,210,7,144,7,211,7,145,7,211,7,144,7,211,7,145,7,212,7,146,7,212,7,145,7,212,7,146,7,213,7,147,7,213,7,146,7,213,7,147,7,214,7,148,7,214,7,147,7,214,7,148,7,215,7,149,7,215,7,148,7,215,7,149,7,216,7,150,7,216,7,149,7,216,7,150,7,217,7,151,7,217,7,150,7,217,7,151,7,218,7,152,7,218,7,151,7,218,7,152,7,219,7,153,7,219,7,152,7,219,7,153,7,220,7,154,7,220,7,153,7,220,7,154,7,221,7,155,7,221,7,154,7,221,7,155,7,222,7,156,7,222,7,155,7,222,7,156,7,223,7,157,7,223,7,156,7,223,7,157,7,224,7,158,7,224,7,157,7,224,7,158,7,225,7,159,7,225,7,158,7,225,7,159,7,226,7,160,7,226,7,159,7,226,7,160,7,227,7,161,7,227,7,160,7,227,7,161,7,228,7,162,7,228,7,161,7,228,7,162,7,229,7,163,7,229,7,162,7,229,7,163,7,230,7,164,7,230,7,163,7,230,7,164,7,231,7,165,7,231,7,164,7,231,7,165,7,232,7,166,7,232,7,165,7,232,7,166,7,233,7,167,7,233,7,166,7,233,7,167,7,234,7,168,7,234,7,167,7,234,7,168,7,235,7,169,7,235,7,168,7,235,7,169,7,236,7,170,7,236,7,169,7,236,7,170,7,237,7,171,7,237,7,170,7,237,7,171,7,238,7,172,7,238,7,171,7,238,7,172,7,239,7,173,7,239,7,172,7,239,7,173,7,240,7,174,7,240,7,173,7,240,7,174,7,241,7,175,7,241,7,174,7,241,7,175,7,242,7,176,7,242,7,175,7,242,7,176,7,243,7,177,7,243,7,176,7,243,7,177,7,244,7,178,7,244,7,177,7,244,7,178,7,245,7,179,7,245,7,178,7,245,7,179,7,246,7,180,7,246,7,179,7,246,7,180,7,247,7,181,7,247,7,180,7,247,7,181,7,248,7,182,7,248,7,181,7,248,7,182,7,249,7,183,7,249,7,182,7,249,7,183,7,250,7,184,7,250,7,183,7,250,7,184,7,251,7,185,7,251,7,184,7,251,7,185,7,252,7,186,7,252,7,185,7,252,7,186,7,253,7,187,7,253,7,186,7,254,7,188,7,255,7,189,7,255,7,188,7,255,7,189,7,0,8,190,7,0,8,189,7,0,8,190,7,1,8,191,7,1,8,190,7,1,8,191,7,2,8,192,7,2,8,191,7,2,8,192,7,3,8,193,7,3,8,192,7,3,8,193,7,4,8,194,7,4,8,193,7,4,8,194,7,5,8,195,7,5,8,194,7,5,8,195,7,6,8,196,7,6,8,195,7,6,8,196,7,7,8,197,7,7,8,196,7,7,8,197,7,8,8,198,7,8,8,197,7,8,8,198,7,9,8,199,7,9,8,198,7,9,8,199,7,10,8,200,7,10,8,199,7,10,8,200,7,11,8,201,7,11,8,200,7,11,8,201,7,12,8,202,7,12,8,201,7,12,8,202,7,13,8,203,7,13,8,202,7,13,8,203,7,14,8,204,7,14,8,203,7,14,8,204,7,15,8,205,7,15,8,204,7,15,8,205,7,16,8,206,7,16,8,205,7,16,8,206,7,17,8,207,7,17,8,206,7,17,8,207,7,18,8,208,7,18,8,207,7,18,8,208,7,19,8,209,7,19,8,208,7,19,8,209,7,20,8,210,7,20,8,209,7,20,8,210,7,21,8,211,7,21,8,210,7,21,8,211,7,22,8,212,7,22,8,211,7,22,8,212,7,23,8,213,7,23,8,212,7,23,8,213,7,24,8,214,7,24,8,213,7,24,8,214,7,25,8,215,7,25,8,214,7,25,8,215,7,26,8,216,7,26,8,215,7,26,8,216,7,27,8,217,7,27,8,216,7,27,8,217,7,28,8,218,7,28,8,217,7,28,8,218,7,29,8,219,7,29,8,218,7,29,8,219,7,30,8,220,7,30,8,219,7,30,8,220,7,31,8,221,7,31,8,220,7,31,8,221,7,32,8,222,7,32,8,221,7,32,8,222,7,33,8,223,7,33,8,222,7,33,8,223,7,34,8,224,7,34,8,223,7,34,8,224,7,35,8,225,7,35,8,224,7,35,8,225,7,36,8,226,7,36,8,225,7,36,8,226,7,37,8,227,7,37,8,226,7,37,8,227,7,38,8,228,7,38,8,227,7,38,8,228,7,39,8,229,7,39,8,228,7,39,8,229,7,40,8,230,7,40,8,229,7,40,8,230,7,41,8,231,7,41,8,230,7,41,8,231,7,42,8,232,7,42,8,231,7,42,8,232,7,43,8,233,7,43,8,232,7,43,8,233,7,44,8,234,7,44,8,233,7,44,8,234,7,45,8,235,7,45,8,234,7,45,8,235,7,46,8,236,7,46,8,235,7,46,8,236,7,47,8,237,7,47,8,236,7,47,8,237,7,48,8,238,7,48,8,237,7,48,8,238,7,49,8,239,7,49,8,238,7,49,8,239,7,50,8,240,7,50,8,239,7,50,8,240,7,51,8,241,7,51,8,240,7,51,8,241,7,52,8,242,7,52,8,241,7,52,8,242,7,53,8,243,7,53,8,242,7,53,8,243,7,54,8,244,7,54,8,243,7,54,8,244,7,55,8,245,7,55,8,244,7,55,8,245,7,56,8,246,7,56,8,245,7,56,8,246,7,57,8,247,7,57,8,246,7,57,8,247,7,58,8,248,7,58,8,247,7,58,8,248,7,59,8,249,7,59,8,248,7,59,8,249,7,60,8,250,7,60,8,249,7,60,8,250,7,61,8,251,7,61,8,250,7,61,8,251,7,62,8,252,7,62,8,251,7,62,8,252,7,63,8,253,7,63,8,252,7,64,8,254,7,65,8,255,7,65,8,254,7,65,8,255,7,66,8,0,8,66,8,255,7,66,8,0,8,67,8,1,8,67,8,0,8,67,8,1,8,68,8,2,8,68,8,1,8,68,8,2,8,69,8,3,8,69,8,2,8,69,8,3,8,70,8,4,8,70,8,3,8,70,8,4,8,71,8,5,8,71,8,4,8,71,8,5,8,72,8,6,8,72,8,5,8,72,8,6,8,73,8,7,8,73,8,6,8,73,8,7,8,74,8,8,8,74,8,7,8,74,8,8,8,75,8,9,8,75,8,8,8,75,8,9,8,76,8,10,8,76,8,9,8,76,8,10,8,77,8,11,8,77,8,10,8,77,8,11,8,78,8,12,8,78,8,11,8,78,8,12,8,79,8,13,8,79,8,12,8,79,8,13,8,80,8,14,8,80,8,13,8,80,8,14,8,81,8,15,8,81,8,14,8,81,8,15,8,82,8,16,8,82,8,15,8,82,8,16,8,83,8,17,8,83,8,16,8,83,8,17,8,84,8,18,8,84,8,17,8,84,8,18,8,85,8,19,8,85,8,18,8,85,8,19,8,86,8,20,8,86,8,19,8,86,8,20,8,87,8,21,8,87,8,20,8,87,8,21,8,88,8,22,8,88,8,21,8,88,8,22,8,89,8,23,8,89,8,22,8,89,8,23,8,90,8,24,8,90,8,23,8,90,8,24,8,91,8,25,8,91,8,24,8,91,8,25,8,92,8,26,8,92,8,25,8,92,8,26,8,93,8,27,8,93,8,26,8,93,8,27,8,94,8,28,8,94,8,27,8,94,8,28,8,95,8,29,8,95,8,28,8,95,8,29,8,96,8,30,8,96,8,29,8,96,8,30,8,97,8,31,8,97,8,30,8,97,8,31,8,98,8,32,8,98,8,31,8,98,8,32,8,99,8,33,8,99,8,32,8,99,8,33,8,100,8,34,8,100,8,33,8,100,8,34,8,101,8,35,8,101,8,34,8,101,8,35,8,102,8,36,8,102,8,35,8,102,8,36,8,103,8,37,8,103,8,36,8,103,8,37,8,104,8,38,8,104,8,37,8,104,8,38,8,105,8,39,8,105,8,38,8,105,8,39,8,106,8,40,8,106,8,39,8,106,8,40,8,107,8,41,8,107,8,40,8,107,8,41,8,108,8,42,8,108,8,41,8,108,8,42,8,109,8,43,8,109,8,42,8,109,8,43,8,110,8,44,8,110,8,43,8,110,8,44,8,111,8,45,8,111,8,44,8,111,8,45,8,112,8,46,8,112,8,45,8,112,8,46,8,113,8,47,8,113,8,46,8,113,8,47,8,114,8,48,8,114,8,47,8,114,8,48,8,115,8,49,8,115,8,48,8,115,8,49,8,116,8,50,8,116,8,49,8,116,8,50,8,117,8,51,8,117,8,50,8,117,8,51,8,118,8,52,8,118,8,51,8,118,8,52,8,119,8,53,8,119,8,52,8,119,8,53,8,120,8,54,8,120,8,53,8,120,8,54,8,121,8,55,8,121,8,54,8,121,8,55,8,122,8,56,8,122,8,55,8,122,8,56,8,123,8,57,8,123,8,56,8,123,8,57,8,124,8,58,8,124,8,57,8,124,8,58,8,125,8,59,8,125,8,58,8,125,8,59,8,126,8,60,8,126,8,59,8,126,8,60,8,127,8,61,8,127,8,60,8,127,8,61,8,128,8,62,8,128,8,61,8,128,8,62,8,129,8,63,8,129,8,62,8,42,0,122,64,243,227,231,62,16,24,118,67,42,0,122,64,82,242,194,63,0,0,122,67,0,0,250,64,58,88,151,63,16,24,118,67,21,0,250,64,144,160,224,63,0,0,122,67,52,128,59,65,87,67,8,64,16,24,118,67,52,128,59,65,119,248,39,64,0,0,122,67,0,0,122,65,141,238,64,64,16,24,118,67,0,0,122,65,217,153,78,64,0,0,122,67,26,64,156,65,24,91,126,64,16,24,118,67,26,64,156,65,196,119,104,64,0,0,122,67,0,128,187,65,16,204,130,64,16,24,118,67,0,128,187,65,7,182,135,64,0,0,122,67,26,192,218,65,33,31,186,64,16,24,118,67,26,192,218,65,17,228,189,64,0,0,122,67,0,0,250,65,101,199,219,64,16,24,118,67,0,0,250,65,226,233,234,64,0,0,122,67,13,160,12,66,151,16,4,65,16,24,118,67,13,160,12,66,73,0,10,65,0,0,122,67,0,64,28,66,25,45,6,65,16,24,118,67,0,64,28,66,16,245,10,65,0,0,122,67,13,224,43,66,197,85,222,64,16,24,118,67,13,224,43,66,181,253,246,64,0,0,122,67,0,128,59,66,97,108,147,64,16,24,118,67,0,128,59,66,17,228,195,64,0,0,122,67,13,32,75,66,70,37,105,64,16,24,118,67,13,32,75,66,32,41,164,64,0,0,122,67,0,192,90,66,86,159,128,64,16,24,118,67,0,192,90,66,254,38,176,64,0,0,122,67,13,96,106,66,49,235,129,64,16,24,118,67,13,96,106,66,164,54,170,64,0,0,122,67,0,0,122,66,87,91,127,64,16,24,118,67,0,0,122,66,87,149,176,64,0,0,122,67,7,208,132,66,105,53,174,64,16,24,118,67,7,208,132,66,250,155,217,64,0,0,122,67,0,160,140,66,71,61,193,64,16,24,118,67,0,160,140,66,221,94,237,64,0,0,122,67,7,112,148,66,92,230,203,64,16,24,118,67,7,112,148,66,115,145,2,65,0,0,122,67,0,64,156,66,255,207,215,64,16,24,118,67,0,64,156,66,45,137,11,65,0,0,122,67,7,16,164,66,133,37,236,64,16,24,118,67,7,16,164,66,205,204,33,65,0,0,122,67,0,224,171,66,39,165,15,65,16,24,118,67,0,224,171,66,254,101,39,65,0,0,122,67,7,176,179,66,143,83,49,65,16,24,118,67,7,176,179,66,171,62,58,65,0,0,122,67,0,128,187,66,242,65,69,65,16,24,118,67,0,128,187,66,110,52,82,65,0,0,122,67,7,80,195,66,172,139,89,65,16,24,118,67,7,80,195,66,233,183,100,65,0,0,122,67,66,32,203,66,148,246,120,65,16,24,118,67,66,32,203,66,240,150,135,65,0,0,122,67,33,240,210,66,136,244,135,65,16,24,118,67,33,240,210,66,138,142,145,65,0,0,122,67,0,192,218,66,135,22,143,65,16,24,118,67,0,192,218,66,175,20,156,65,0,0,122,67,223,143,226,66,99,110,151,65,16,24,118,67,223,143,226,66,198,109,167,65,0,0,122,67,66,96,234,66,254,229,151,65,16,24,118,67,66,96,234,66,65,130,160,65,0,0,122,67,33,48,242,66,148,246,147,65,16,24,118,67,33,48,242,66,142,134,164,65,0,0,122,67,0,0,250,66,236,47,161,65,16,24,118,67,0,0,250,66,61,44,169,65,0,0,122,67,240,231,0,67,142,6,164,65,16,24,118,67,240,231,0,67,186,107,178,65,0,0,122,67,33,208,4,67,45,178,169,65,16,24,118,67,33,208,4,67,171,79,183,65,0,0,122,67,16,184,8,67,223,79,178,65,16,24,118,67,16,184,8,67,159,188,195,65,0,0,122,67,0,160,12,67,235,243,185,65,16,24,118,67,0,160,12,67,237,158,194,65,0,0,122,67,240,135,16,67,16,250,179,65,16,24,118,67,240,135,16,67,157,128,194,65,0,0,122,67,33,112,20,67,222,19,181,65,16,24,118,67,33,112,20,67,255,161,190,65,0,0,122,67,16,88,24,67,21,157,188,65,16,24,118,67,16,88,24,67,95,24,193,65,0,0,122,67,0,64,28,67,68,139,201,65,16,24,118,67,0,64,28,67,60,78,199,65,0,0,122,67,240,39,32,67,77,4,202,65,16,24,118,67,240,39,32,67,1,205,197,65,0,0,122,67,33,16,36,67,111,240,205,65,16,24,118,67,33,16,36,67,105,239,192,65,0,0,122,67,16,248,39,67,126,157,194,65,16,24,118,67,16,248,39,67,164,223,196,65,0,0,122,67,0,224,43,67,25,98,200,65,16,24,118,67,0,224,43,67,106,188,199,65,0,0,122,67,240,199,47,67,234,21,200,65,16,24,118,67,240,199,47,67,159,77,198,65,0,0,122,67,33,176,51,67,252,169,188,65,16,24,118,67,33,176,51,67,9,121,181,65,0,0,122,67,16,152,55,67,252,169,167,65,16,24,118,67,16,152,55,67,103,68,165,65,0,0,122,67,0,128,59,67,43,7,158,65,16,24,118,67,0,128,59,67,26,64,160,65,0,0,122,67,240,103,63,67,254,195,163,65,16,24,118,67,240,103,63,67,231,29,163,65,0,0,122,67,33,80,67,67,114,10,158,65,16,24,118,67,33,80,67,67,176,131,172,65,0,0,122,67,16,56,71,67,129,149,157,65,16,24,118,67,16,56,71,67,30,150,172,65,0,0,122,67,0,32,75,67,234,149,160,65,16,24,118,67,0,32,75,67,61,10,163,65,0,0,122,67,240,7,79,67,0,239,158,65,16,24,118,67,240,7,79,67,240,5,155,65,0,0,122,67,33,240,82,67,206,153,155,65,16,24,118,67,33,240,82,67,146,203,156,65,0,0,122,67,16,216,86,67,155,85,154,65,16,24,118,67,16,216,86,67,214,197,152,65,0,0,122,67,0,192,90,67,33,31,150,65,16,24,118,67,0,192,90,67,161,103,159,65,0,0,122,67,240,167,94,67,210,128,150,65,16,24,118,67,240,167,94,67,148,246,158,65,0,0,122,67,33,144,98,67,109,214,146,65,16,24,118,67,33,144,98,67,210,239,150,65,0,0,122,67,16,120,102,67,63,215,135,65,16,24,118,67,16,120,102,67,222,241,139,65,0,0,122,67,0,96,106,67,118,224,121,65,16,24,118,67,0,96,106,67,245,91,129,65,0,0,122,67,240,71,110,67,180,200,120,65,16,24,118,67,240,71,110,67,41,237,117,65,0,0,122,67,33,48,114,67,229,242,115,65,16,24,118,67,33,48,114,67,86,125,112,65,0,0,122,67,16,24,118,67,184,30,98,65,16,24,118,67,16,24,118,67,249,49,100,65,0,0,122,67,0,0,122,67,52,128,102,65,16,24,118,67,0,0,122,67,232,217,101,65,0,0,122,67,42,0,122,64,152,192,13,64,33,48,114,67,42,0,250,64,207,78,18,64,33,48,114,67,52,128,59,65,11,152,120,64,33,48,114,67,0,0,122,65,238,8,89,64,33,48,114,67,26,64,156,65,196,124,105,64,33,48,114,67,0,128,187,65,199,128,132,64,33,48,114,67,26,192,218,65,154,182,183,64,33,48,114,67,0,0,250,65,90,42,213,64,33,48,114,67,13,160,12,66,234,9,234,64,33,48,114,67,0,64,28,66,244,224,245,64,33,48,114,67,13,224,43,66,112,177,223,64,33,48,114,67,0,128,59,66,157,186,156,64,33,48,114,67,13,32,75,66,89,139,41,64,33,48,114,67,0,192,90,66,131,192,48,64,33,48,114,67,13,96,106,66,40,184,70,64,33,48,114,67,0,0,122,66,20,208,147,64,33,48,114,67,7,208,132,66,30,196,171,64,33,48,114,67,0,160,140,66,230,92,173,64,33,48,114,67,7,112,148,66,127,135,173,64,33,48,114,67,0,64,156,66,70,66,177,64,33,48,114,67,7,16,164,66,115,75,172,64,33,48,114,67,0,224,171,66,112,182,248,64,33,48,114,67,7,176,179,66,225,127,22,65,33,48,114,67,0,128,187,66,122,165,52,65,33,48,114,67,7,80,195,66,97,50,65,65,33,48,114,67,66,32,203,66,91,177,97,65,33,48,114,67,33,240,210,66,186,107,114,65,33,48,114,67,0,192,218,66,199,41,127,65,33,48,114,67,223,143,226,66,119,190,134,65,33,48,114,67,66,96,234,66,144,177,137,65,33,48,114,67,33,48,242,66,224,28,146,65,33,48,114,67,0,0,250,66,7,240,150,65,33,48,114,67,240,231,0,67,89,151,154,65,33,48,114,67,33,208,4,67,134,218,160,65,33,48,114,67,16,184,8,67,70,165,166,65,33,48,114,67,0,160,12,67,179,234,170,65,33,48,114,67,240,135,16,67,109,214,172,65,33,48,114,67,33,112,20,67,253,246,177,65,33,48,114,67,16,88,24,67,24,21,188,65,33,48,114,67,0,64,28,67,143,211,198,65,33,48,114,67,240,39,32,67,107,154,203,65,33,48,114,67,33,16,36,67,80,124,207,65,33,48,114,67,16,248,39,67,248,211,198,65,33,48,114,67,0,224,43,67,173,122,202,65,33,48,114,67,240,199,47,67,146,203,202,65,33,48,114,67,33,176,51,67,128,200,193,65,33,48,114,67,16,152,55,67,199,169,168,65,33,48,114,67,0,128,59,67,141,151,156,65,33,48,114,67,240,103,63,67,53,222,159,65,33,48,114,67,33,80,67,67,75,217,156,65,33,48,114,67,16,56,71,67,113,155,151,65,33,48,114,67,0,32,75,67,84,116,161,65,33,48,114,67,240,7,79,67,158,94,154,65,33,48,114,67,33,240,82,67,92,32,151,65,33,48,114,67,16,216,86,67,149,101,150,65,33,48,114,67,0,192,90,67,183,98,150,65,33,48,114,67,240,167,94,67,92,160,146,65,33,48,114,67,33,144,98,67,97,212,141,65,33,48,114,67,16,120,102,67,222,2,123,65,33,48,114,67,0,96,106,67,229,242,115,65,33,48,114,67,240,71,110,67,38,83,116,65,33,48,114,67,33,48,114,67,255,178,103,65,33,48,114,67,16,24,118,67,136,244,104,65,33,48,114,67,0,0,122,67,23,217,98,65,33,48,114,67,42,0,122,64,62,208,66,64,240,71,110,67,42,0,250,64,11,152,120,64,240,71,110,67,52,128,59,65,252,111,144,64,240,71,110,67,0,0,122,65,170,96,134,64,240,71,110,67,26,64,156,65,21,140,143,64,240,71,110,67,0,128,187,65,38,170,163,64,240,71,110,67,26,192,218,65,73,128,159,64,240,71,110,67,0,0,250,65,192,207,184,64,240,71,110,67,13,160,12,66,130,173,173,64,240,71,110,67,0,64,28,66,193,168,206,64,240,71,110,67,13,224,43,66,226,175,177,64,240,71,110,67,0,128,59,66,228,131,108,64,240,71,110,67,13,32,75,66,80,83,69,64,240,71,110,67,0,192,90,66,110,221,61,64,240,71,110,67,13,96,106,66,114,138,124,64,240,71,110,67,0,0,122,66,226,233,150,64,240,71,110,67,7,208,132,66,169,135,162,64,240,71,110,67,0,160,140,66,184,146,172,64,240,71,110,67,7,112,148,66,91,95,137,64,240,71,110,67,0,64,156,66,113,172,134,64,240,71,110,67,7,16,164,66,29,119,163,64,240,71,110,67,0,224,171,66,188,145,175,64,240,71,110,67,7,176,179,66,61,242,225,64,240,71,110,67,0,128,187,66,87,236,10,65,240,71,110,67,7,80,195,66,243,246,31,65,240,71,110,67,66,32,203,66,120,156,63,65,240,71,110,67,33,240,210,66,25,115,78,65,240,71,110,67,0,192,218,66,23,183,92,65,240,71,110,67,223,143,226,66,174,216,89,65,240,71,110,67,66,96,234,66,208,213,127,65,240,71,110,67,33,48,242,66,11,181,144,65,240,71,110,67,0,0,250,66,70,182,149,65,240,71,110,67,240,231,0,67,101,42,153,65,240,71,110,67,33,208,4,67,255,161,160,65,240,71,110,67,16,184,8,67,169,36,163,65,240,71,110,67,0,160,12,67,33,159,166,65,240,71,110,67,240,135,16,67,85,176,169,65,240,71,110,67,33,112,20,67,163,18,180,65,240,71,110,67,16,88,24,67,180,89,191,65,240,71,110,67,0,64,28,67,239,56,200,65,240,71,110,67,240,39,32,67,2,171,206,65,240,71,110,67,33,16,36,67,20,63,205,65,240,71,110,67,16,248,39,67,47,238,194,65,240,71,110,67,0,224,43,67,133,107,245,65,240,71,110,67,240,199,47,67,184,30,247,65,240,71,110,67,33,176,51,67,206,8,234,65,240,71,110,67,16,152,55,67,40,254,212,65,240,71,110,67,0,128,59,67,255,178,197,65,240,71,110,67,240,103,63,67,110,163,189,65,240,71,110,67,33,80,67,67,58,18,187,65,240,71,110,67,16,56,71,67,250,126,186,65,240,71,110,67,0,32,75,67,67,45,140,65,240,71,110,67,240,7,79,67,16,88,139,65,240,71,110,67,33,240,82,67,11,53,140,65,240,71,110,67,16,216,86,67,226,233,145,65,240,71,110,67,0,192,90,67,53,111,149,65,240,71,110,67,240,167,94,67,247,245,146,65,240,71,110,67,33,144,98,67,86,253,137,65,240,71,110,67,16,120,102,67,51,51,131,65,240,71,110,67,0,96,106,67,46,255,119,65,240,71,110,67,240,71,110,67,99,238,105,65,240,71,110,67,33,48,114,67,84,227,100,65,240,71,110,67,16,24,118,67,166,155,99,65,240,71,110,67,0,0,122,67,33,31,98,65,240,71,110,67,42,0,122,64,20,34,166,64,0,96,106,67,42,0,250,64,123,218,157,64,0,96,106,67,52,128,59,65,152,23,129,64,0,96,106,67,0,0,122,65,152,105,109,64,0,96,106,67,26,64,156,65,33,60,142,64,0,96,106,67,0,128,187,65,187,237,163,64,0,96,106,67,26,192,218,65,147,53,147,64,0,96,106,67,0,0,250,65,136,157,145,64,0,96,106,67,13,160,12,66,180,31,153,64,0,96,106,67,0,64,28,66,216,71,158,64,0,96,106,67,13,224,43,66,132,18,161,64,0,96,106,67,0,128,59,66,235,57,69,64,0,96,106,67,13,32,75,66,22,246,36,64,0,96,106,67,0,192,90,66,12,118,69,64,0,96,106,67,13,96,106,66,20,208,128,64,0,96,106,67,0,0,122,66,139,108,146,64,0,96,106,67,7,208,132,66,225,122,149,64,0,96,106,67,0,160,140,66,90,245,145,64,0,96,106,67,7,112,148,66,139,108,135,64,0,96,106,67,0,64,156,66,247,6,133,64,0,96,106,67,7,16,164,66,67,115,134,64,0,96,106,67,0,224,171,66,9,80,137,64,0,96,106,67,7,176,179,66,89,139,177,64,0,96,106,67,0,128,187,66,56,243,225,64,0,96,106,67,7,80,195,66,233,96,4,65,0,96,106,67,66,32,203,66,148,106,29,65,0,96,106,67,33,240,210,66,183,209,46,65,0,96,106,67,0,192,218,66,204,127,60,65,0,96,106,67,223,143,226,66,89,134,93,65,0,96,106,67,66,96,234,66,93,220,120,65,0,96,106,67,33,48,242,66,125,46,135,65,0,96,106,67,0,0,250,66,149,101,146,65,0,96,106,67,240,231,0,67,168,53,157,65,0,96,106,67,33,208,4,67,186,73,155,65,0,96,106,67,16,184,8,67,82,167,154,65,0,96,106,67,0,160,12,67,125,63,165,65,0,96,106,67,240,135,16,67,161,214,172,65,0,96,106,67,33,112,20,67,251,203,177,65,0,96,106,67,16,88,24,67,183,81,189,65,0,96,106,67,0,64,28,67,129,4,199,65,0,96,106,67,240,39,32,67,110,35,221,65,0,96,106,67,33,16,36,67,185,141,235,65,0,96,106,67,16,248,39,67,81,90,237,65,0,96,106,67,0,224,43,67,27,158,240,65,0,96,106,67,240,199,47,67,27,141,242,65,0,96,106,67,33,176,51,67,238,218,229,65,0,96,106,67,16,152,55,67,197,143,213,65,0,96,106,67,0,128,59,67,51,179,202,65,0,96,106,67,240,103,63,67,50,85,193,65,0,96,106,67,33,80,67,67,204,93,180,65,0,96,106,67,16,56,71,67,224,190,177,65,0,96,106,67,0,32,75,67,47,238,177,65,0,96,106,67,240,7,79,67,143,211,174,65,0,96,106,67,33,240,82,67,67,173,139,65,0,96,106,67,16,216,86,67,64,36,138,65,0,96,106,67,0,192,90,67,206,170,135,65,0,96,106,67,240,167,94,67,77,243,132,65,0,96,106,67,33,144,98,67,170,130,139,65,0,96,106,67,16,120,102,67,238,124,135,65,0,96,106,67,0,96,106,67,189,227,121,65,0,96,106,67,240,71,110,67,149,101,125,65,0,96,106,67,33,48,114,67,220,104,113,65,0,96,106,67,16,24,118,67,95,152,99,65,0,96,106,67,0,0,122,67,168,198,97,65,0,96,106,67,42,0,122,64,236,81,188,64,16,120,102,67,21,0,250,64,177,80,175,64,16,120,102,67,52,128,59,65,106,222,161,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+348160);
/* memory initializer */ allocate([16,120,102,67,0,0,122,65,98,74,131,64,16,120,102,67,26,64,156,65,208,97,131,64,16,120,102,67,0,128,187,65,48,129,141,64,16,120,102,67,26,192,218,65,100,233,136,64,16,120,102,67,0,0,250,65,35,50,136,64,16,120,102,67,13,160,12,66,133,119,117,64,16,120,102,67,0,64,28,66,117,2,88,64,16,120,102,67,13,224,43,66,80,54,133,64,16,120,102,67,0,128,59,66,214,226,53,64,16,120,102,67,13,32,75,66,60,107,53,64,16,120,102,67,0,192,90,66,19,10,69,64,16,120,102,67,13,96,106,66,36,40,88,64,16,120,102,67,0,0,122,66,106,19,131,64,16,120,102,67,7,208,132,66,116,12,149,64,16,120,102,67,0,160,140,66,186,160,142,64,16,120,102,67,7,112,148,66,66,38,121,64,16,120,102,67,0,64,156,66,64,251,119,64,16,120,102,67,7,16,164,66,105,169,148,64,16,120,102,67,0,224,171,66,76,142,186,64,16,120,102,67,7,176,179,66,174,211,204,64,16,120,102,67,0,128,187,66,173,23,245,64,16,120,102,67,7,80,195,66,218,32,1,65,16,120,102,67,66,32,203,66,114,220,29,65,16,120,102,67,33,240,210,66,78,209,61,65,16,120,102,67,0,192,218,66,116,70,79,65,16,120,102,67,223,143,226,66,90,100,100,65,16,120,102,67,66,96,234,66,105,0,123,65,16,120,102,67,33,48,242,66,212,171,137,65,16,120,102,67,0,0,250,66,123,3,145,65,16,120,102,67,240,231,0,67,49,8,155,65,16,120,102,67,33,208,4,67,119,173,153,65,16,120,102,67,16,184,8,67,207,119,151,65,16,120,102,67,0,160,12,67,118,207,159,65,16,120,102,67,240,135,16,67,32,82,172,65,16,120,102,67,33,112,20,67,115,215,173,65,16,120,102,67,16,88,24,67,30,22,184,65,16,120,102,67,0,64,28,67,220,232,229,65,16,120,102,67,240,39,32,67,220,87,227,65,16,120,102,67,33,16,36,67,184,47,229,65,16,120,102,67,16,248,39,67,31,116,236,65,16,120,102,67,0,224,43,67,70,182,236,65,16,120,102,67,240,199,47,67,186,90,238,65,16,120,102,67,33,176,51,67,56,120,224,65,16,120,102,67,16,152,55,67,15,28,221,65,16,120,102,67,0,128,59,67,41,92,215,65,16,120,102,67,240,103,63,67,96,101,206,65,16,120,102,67,33,80,67,67,192,219,190,65,16,120,102,67,16,56,71,67,2,60,177,65,16,120,102,67,0,32,75,67,130,226,174,65,16,120,102,67,240,7,79,67,126,29,174,65,16,120,102,67,33,240,82,67,162,69,178,65,16,120,102,67,16,216,86,67,82,184,179,65,16,120,102,67,0,192,90,67,227,54,131,65,16,120,102,67,240,167,94,67,168,215,128,65,16,120,102,67,33,144,98,67,116,164,135,65,16,120,102,67,16,120,102,67,124,225,135,65,16,120,102,67,0,96,106,67,11,198,128,65,16,120,102,67,240,71,110,67,224,156,127,65,16,120,102,67,33,48,114,67,122,54,117,65,16,120,102,67,16,24,118,67,135,167,116,65,16,120,102,67,0,0,122,67,102,136,107,65,16,120,102,67,42,0,122,64,192,178,220,64,33,144,98,67,21,0,250,64,37,204,210,64,33,144,98,67,52,128,59,65,8,32,193,64,33,144,98,67,0,0,122,65,38,30,151,64,33,144,98,67,26,64,156,65,125,63,105,64,33,144,98,67,0,128,187,65,139,113,139,64,33,144,98,67,26,192,218,65,156,191,131,64,33,144,98,67,0,0,250,65,195,245,137,64,33,144,98,67,13,160,12,66,70,37,91,64,33,144,98,67,0,64,28,66,192,178,18,64,33,144,98,67,13,224,43,66,101,170,30,64,33,144,98,67,0,128,59,66,129,33,17,64,33,144,98,67,13,32,75,66,251,63,143,63,33,144,98,67,0,192,90,66,180,176,27,64,33,144,98,67,13,96,106,66,143,199,120,64,33,144,98,67,0,0,122,66,97,195,127,64,33,144,98,67,7,208,132,66,105,198,137,64,33,144,98,67,0,160,140,66,25,255,141,64,33,144,98,67,7,112,148,66,17,1,121,64,33,144,98,67,0,64,156,66,194,221,131,64,33,144,98,67,7,16,164,66,103,10,177,64,33,144,98,67,0,224,171,66,89,81,204,64,33,144,98,67,7,176,179,66,62,150,217,64,33,144,98,67,0,128,187,66,86,188,4,65,33,144,98,67,7,80,195,66,178,203,7,65,33,144,98,67,66,32,203,66,249,247,30,65,33,144,98,67,33,240,210,66,27,13,57,65,33,144,98,67,0,192,218,66,17,199,80,65,33,144,98,67,223,143,226,66,41,203,93,65,33,144,98,67,66,96,234,66,52,128,111,65,33,144,98,67,33,48,242,66,9,10,131,65,33,144,98,67,0,0,250,66,18,148,137,65,33,144,98,67,240,231,0,67,12,2,139,65,33,144,98,67,33,208,4,67,192,219,144,65,33,144,98,67,16,184,8,67,167,121,149,65,33,144,98,67,0,160,12,67,249,32,148,65,33,144,98,67,240,135,16,67,246,23,166,65,33,144,98,67,33,112,20,67,96,118,168,65,33,144,98,67,16,88,24,67,31,133,211,65,33,144,98,67,0,64,28,67,19,114,217,65,33,144,98,67,240,39,32,67,158,94,218,65,33,144,98,67,33,16,36,67,213,103,224,65,33,144,98,67,16,248,39,67,242,65,229,65,33,144,98,67,0,224,43,67,35,202,226,65,33,144,98,67,240,199,47,67,208,213,189,65,33,144,98,67,33,176,51,67,241,227,184,65,33,144,98,67,16,152,55,67,0,145,180,65,33,144,98,67,0,128,59,67,152,238,180,65,33,144,98,67,240,103,63,67,37,245,174,65,33,144,98,67,33,80,67,67,112,223,159,65,33,144,98,67,16,56,71,67,53,222,183,65,33,144,98,67,0,32,75,67,43,152,176,65,33,144,98,67,240,7,79,67,167,232,179,65,33,144,98,67,33,240,82,67,71,3,178,65,33,144,98,67,16,216,86,67,191,253,178,65,33,144,98,67,0,192,90,67,131,64,182,65,33,144,98,67,240,167,94,67,245,74,136,65,33,144,98,67,33,144,98,67,52,17,129,65,33,144,98,67,16,120,102,67,121,105,135,65,33,144,98,67,0,96,106,67,53,111,137,65,33,144,98,67,240,71,110,67,39,177,138,65,33,144,98,67,33,48,114,67,169,147,129,65,33,144,98,67,16,24,118,67,164,112,116,65,33,144,98,67,0,0,122,67,206,25,114,65,33,144,98,67,42,0,122,64,28,8,218,64,240,167,94,67,21,0,250,64,161,161,231,64,240,167,94,67,52,128,59,65,15,40,195,64,240,167,94,67,0,0,122,65,68,139,158,64,240,167,94,67,26,64,156,65,182,103,120,64,240,167,94,67,0,128,187,65,126,58,130,64,240,167,94,67,26,192,218,65,26,250,121,64,240,167,94,67,0,0,250,65,68,168,130,64,240,167,94,67,13,160,12,66,67,197,80,64,240,167,94,67,0,64,28,66,202,108,196,63,240,167,94,67,13,224,43,66,208,68,244,63,240,167,94,67,0,128,59,66,110,23,254,63,240,167,94,67,13,32,75,66,149,96,9,64,240,167,94,67,0,192,90,66,167,121,47,64,240,167,94,67,13,96,106,66,7,206,111,64,240,167,94,67,0,0,122,66,0,29,128,64,240,167,94,67,7,208,132,66,215,105,140,64,240,167,94,67,0,160,140,66,242,152,123,64,240,167,94,67,7,112,148,66,73,75,91,64,240,167,94,67,0,64,156,66,100,204,161,64,240,167,94,67,7,16,164,66,5,139,191,64,240,167,94,67,0,224,171,66,32,239,208,64,240,167,94,67,7,176,179,66,163,175,218,64,240,167,94,67,0,128,187,66,243,171,239,64,240,167,94,67,7,80,195,66,45,21,3,65,240,167,94,67,66,32,203,66,159,89,21,65,240,167,94,67,33,240,210,66,16,122,61,65,240,167,94,67,0,192,218,66,81,218,81,65,240,167,94,67,223,143,226,66,118,79,94,65,240,167,94,67,66,96,234,66,137,210,108,65,240,167,94,67,33,48,242,66,61,155,118,65,240,167,94,67,0,0,250,66,113,27,123,65,240,167,94,67,240,231,0,67,163,163,129,65,240,167,94,67,33,208,4,67,32,65,136,65,240,167,94,67,16,184,8,67,161,86,148,65,240,167,94,67,0,160,12,67,176,242,150,65,240,167,94,67,240,135,16,67,138,159,155,65,240,167,94,67,33,112,20,67,137,82,207,65,240,167,94,67,16,88,24,67,28,107,205,65,240,167,94,67,0,64,28,67,121,88,208,65,240,167,94,67,240,39,32,67,173,105,210,65,240,167,94,67,33,16,36,67,8,172,216,65,240,167,94,67,16,248,39,67,192,219,216,65,240,167,94,67,0,224,43,67,95,7,182,65,240,167,94,67,240,199,47,67,43,7,187,65,240,167,94,67,33,176,51,67,138,176,184,65,240,167,94,67,16,152,55,67,94,203,180,65,240,167,94,67,0,128,59,67,88,40,176,65,240,167,94,67,240,103,63,67,125,174,174,65,240,167,94,67,33,80,67,67,155,102,160,65,240,167,94,67,16,56,71,67,58,163,148,65,240,167,94,67,0,32,75,67,242,82,146,65,240,167,94,67,240,7,79,67,1,77,182,65,240,167,94,67,33,240,82,67,97,212,175,65,240,167,94,67,16,216,86,67,91,211,171,65,240,167,94,67,0,192,90,67,249,160,172,65,240,167,94,67,240,167,94,67,28,252,172,65,240,167,94,67,33,144,98,67,71,114,142,65,240,167,94,67,16,120,102,67,105,239,140,65,240,167,94,67,0,96,106,67,246,151,146,65,240,167,94,67,240,71,110,67,170,224,147,65,240,167,94,67,33,48,114,67,27,141,138,65,240,167,94,67,16,24,118,67,73,46,134,65,240,167,94,67,0,0,122,67,45,178,132,65,240,167,94,67,84,0,122,64,73,104,0,65,0,192,90,67,21,0,250,64,238,247,3,65,0,192,90,67,52,128,59,65,229,126,221,64,0,192,90,67,0,0,122,65,21,140,187,64,0,192,90,67,26,64,156,65,235,28,146,64,0,192,90,67,0,128,187,65,181,55,108,64,0,192,90,67,26,192,218,65,175,124,136,64,0,192,90,67,0,0,250,65,94,46,88,64,0,192,90,67,13,160,12,66,11,152,220,63,0,192,90,67,0,64,28,66,17,54,14,64,0,192,90,67,13,224,43,66,148,251,45,64,0,192,90,67,0,128,59,66,136,99,73,64,0,192,90,67,13,32,75,66,199,104,67,64,0,192,90,67,0,192,90,66,241,128,76,64,0,192,90,67,13,96,106,66,239,172,107,64,0,192,90,67,0,0,122,66,29,148,86,64,0,192,90,67,7,208,132,66,239,32,128,64,0,192,90,67,0,160,140,66,95,41,59,64,0,192,90,67,7,112,148,66,24,125,140,64,0,192,90,67,0,64,156,66,135,225,177,64,0,192,90,67,7,16,164,66,52,104,204,64,0,192,90,67,0,224,171,66,64,48,203,64,0,192,90,67,7,176,179,66,186,189,217,64,0,192,90,67,0,128,187,66,30,167,210,64,0,192,90,67,7,80,195,66,169,217,232,64,0,192,90,67,66,32,203,66,54,200,26,65,0,192,90,67,33,240,210,66,248,83,45,65,0,192,90,67,0,192,218,66,101,170,66,65,0,192,90,67,223,143,226,66,29,90,83,65,0,192,90,67,66,96,234,66,80,252,99,65,0,192,90,67,33,48,242,66,243,31,107,65,0,192,90,67,0,0,250,66,202,84,100,65,0,192,90,67,240,231,0,67,35,74,127,65,0,192,90,67,33,208,4,67,135,167,133,65,0,192,90,67,16,184,8,67,220,87,141,65,0,192,90,67,0,160,12,67,9,155,150,65,0,192,90,67,240,135,16,67,211,205,193,65,0,192,90,67,33,112,20,67,101,153,200,65,0,192,90,67,16,88,24,67,179,106,207,65,0,192,90,67,0,64,28,67,39,160,209,65,0,192,90,67,240,39,32,67,104,34,196,65,0,192,90,67,33,16,36,67,34,236,209,65,0,192,90,67,16,248,39,67,120,250,212,65,0,192,90,67,0,224,43,67,179,106,179,65,0,192,90,67,240,199,47,67,10,87,190,65,0,192,90,67,33,176,51,67,75,200,186,65,0,192,90,67,16,152,55,67,189,210,177,65,0,192,90,67,0,128,59,67,233,183,177,65,0,192,90,67,240,103,63,67,200,7,166,65,0,192,90,67,33,80,67,67,212,26,156,65,0,192,90,67,16,56,71,67,1,222,155,65,0,192,90,67,0,32,75,67,59,1,147,65,0,192,90,67,240,7,79,67,195,211,144,65,0,192,90,67,33,240,82,67,157,0,160,65,0,192,90,67,16,216,86,67,85,176,177,65,0,192,90,67,0,192,90,67,254,229,172,65,0,192,90,67,240,167,94,67,32,193,180,65,0,192,90,67,33,144,98,67,244,125,194,65,0,192,90,67,16,120,102,67,198,109,152,65,0,192,90,67,0,96,106,67,88,74,149,65,0,192,90,67,240,71,110,67,215,35,150,65,0,192,90,67,33,48,114,67,200,135,146,65,0,192,90,67,16,24,118,67,67,156,133,65,0,192,90,67,0,0,122,67,249,160,136,65,0,192,90,67,84,0,122,64,3,21,20,65,16,216,86,67,21,0,250,64,197,201,26,65,16,216,86,67,52,128,59,65,3,190,14,65,16,216,86,67,0,0,122,65,66,9,221,64,16,216,86,67,26,64,156,65,129,9,196,64,16,216,86,67,0,128,187,65,230,116,159,64,16,216,86,67,26,192,218,65,179,210,104,64,16,216,86,67,0,0,250,65,147,87,33,64,16,216,86,67,13,160,12,66,229,184,83,64,16,216,86,67,0,64,28,66,241,104,129,64,16,216,86,67,13,224,43,66,178,128,143,64,16,216,86,67,0,128,59,66,188,5,141,64,16,216,86,67,13,32,75,66,54,60,113,64,16,216,86,67,0,192,90,66,23,188,54,64,16,216,86,67,13,96,106,66,36,98,36,64,16,216,86,67,0,0,122,66,244,50,36,64,16,216,86,67,7,208,132,66,102,20,53,64,16,216,86,67,0,160,140,66,53,36,48,64,16,216,86,67,7,112,148,66,161,243,160,64,16,216,86,67,0,64,156,66,197,143,185,64,16,216,86,67,7,16,164,66,179,7,193,64,16,216,86,67,0,224,171,66,126,198,200,64,16,216,86,67,7,176,179,66,226,88,197,64,16,216,86,67,0,128,187,66,70,206,219,64,16,216,86,67,7,80,195,66,173,81,254,64,16,216,86,67,66,32,203,66,237,42,18,65,16,216,86,67,33,240,210,66,136,46,26,65,16,216,86,67,0,192,218,66,146,92,37,65,16,216,86,67,223,143,226,66,222,113,70,65,16,216,86,67,66,96,234,66,123,131,80,65,16,216,86,67,33,48,242,66,237,13,90,65,16,216,86,67,0,0,250,66,52,17,101,65,16,216,86,67,240,231,0,67,179,234,112,65,16,216,86,67,33,208,4,67,27,158,129,65,16,216,86,67,16,184,8,67,83,5,142,65,16,216,86,67,0,160,12,67,165,172,189,65,16,216,86,67,240,135,16,67,229,225,194,65,16,216,86,67,33,112,20,67,35,91,199,65,16,216,86,67,16,88,24,67,129,149,201,65,16,216,86,67,0,64,28,67,123,148,166,65,16,216,86,67,240,39,32,67,2,188,196,65,16,216,86,67,33,16,36,67,138,31,201,65,16,216,86,67,16,248,39,67,247,134,208,65,16,216,86,67,0,224,43,67,33,48,177,65,16,216,86,67,240,199,47,67,239,201,221,65,16,216,86,67,33,176,51,67,99,238,219,65,16,216,86,67,16,152,55,67,233,72,213,65,16,216,86,67,0,128,59,67,231,251,212,65,16,216,86,67,240,103,63,67,95,152,210,65,16,216,86,67,33,80,67,67,248,211,198,65,16,216,86,67,16,56,71,67,49,25,189,65,16,216,86,67,0,32,75,67,59,129,169,65,16,216,86,67,240,7,79,67,216,1,158,65,16,216,86,67,33,240,82,67,210,111,178,65,16,216,86,67,16,216,86,67,211,60,180,65,16,216,86,67,0,192,90,67,49,153,183,65,16,216,86,67,240,167,94,67,26,209,185,65,16,216,86,67,33,144,98,67,184,30,199,65,16,216,86,67,16,120,102,67,73,46,188,65,16,216,86,67,0,96,106,67,211,94,152,65,16,216,86,67,240,71,110,67,20,174,143,65,16,216,86,67,33,48,114,67,28,124,150,65,16,216,86,67,16,24,118,67,206,136,138,65,16,216,86,67,0,0,122,67,47,93,134,65,16,216,86,67,84,0,122,64,48,42,41,65,33,240,82,67,21,0,250,64,127,246,28,65,33,240,82,67,52,128,59,65,135,39,27,65,33,240,82,67,0,0,122,65,238,189,6,65,33,240,82,67,26,64,156,65,137,239,226,64,33,240,82,67,0,128,187,65,165,131,206,64,33,240,82,67,26,192,218,65,106,164,146,64,33,240,82,67,0,0,250,65,32,239,137,64,33,240,82,67,13,160,12,66,0,140,135,64,33,240,82,67,0,64,28,66,3,207,152,64,33,240,82,67,13,224,43,66,178,99,176,64,33,240,82,67,0,128,59,66,248,170,175,64,33,240,82,67,13,32,75,66,73,17,144,64,33,240,82,67,0,192,90,66,8,3,130,64,33,240,82,67,13,96,106,66,128,159,91,64,33,240,82,67,0,0,122,66,18,165,91,64,33,240,82,67,7,208,132,66,47,23,105,64,33,240,82,67,0,160,140,66,23,43,165,64,33,240,82,67,7,112,148,66,30,80,215,64,33,240,82,67,0,64,156,66,124,10,238,64,33,240,82,67,7,16,164,66,65,212,233,64,33,240,82,67,0,224,171,66,120,98,209,64,33,240,82,67,7,176,179,66,145,184,190,64,33,240,82,67,0,128,187,66,131,110,206,64,33,240,82,67,7,80,195,66,92,61,5,65,33,240,82,67,66,32,203,66,56,161,13,65,33,240,82,67,33,240,210,66,209,63,26,65,33,240,82,67,0,192,218,66,138,176,38,65,33,240,82,67,223,143,226,66,191,14,59,65,33,240,82,67,66,96,234,66,20,208,64,65,33,240,82,67,33,48,242,66,61,155,81,65,33,240,82,67,0,0,250,66,161,214,103,65,33,240,82,67,240,231,0,67,111,18,114,65,33,240,82,67,33,208,4,67,121,233,121,65,33,240,82,67,16,184,8,67,13,96,135,65,33,240,82,67,0,160,12,67,242,176,187,65,33,240,82,67,240,135,16,67,16,105,197,65,33,240,82,67,33,112,20,67,195,245,208,65,33,240,82,67,16,88,24,67,194,6,174,65,33,240,82,67,0,64,28,67,90,245,165,65,33,240,82,67,240,39,32,67,79,47,193,65,33,240,82,67,33,16,36,67,7,95,208,65,33,240,82,67,16,248,39,67,112,78,201,65,33,240,82,67,0,224,43,67,222,113,166,65,33,240,82,67,240,199,47,67,186,235,210,65,33,240,82,67,33,176,51,67,242,65,204,65,33,240,82,67,16,152,55,67,249,15,211,65,33,240,82,67,0,128,59,67,106,222,210,65,33,240,82,67,240,103,63,67,7,95,209,65,33,240,82,67,33,80,67,67,137,193,207,65,33,240,82,67,16,56,71,67,211,205,194,65,33,240,82,67,0,32,75,67,219,249,190,65,33,240,82,67,240,7,79,67,32,82,184,65,33,240,82,67,33,240,82,67,138,31,179,65,33,240,82,67,16,216,86,67,27,30,182,65,33,240,82,67,0,192,90,67,197,32,186,65,33,240,82,67,240,167,94,67,180,217,190,65,33,240,82,67,33,144,98,67,217,78,197,65,33,240,82,67,16,120,102,67,169,19,195,65,33,240,82,67,0,96,106,67,6,146,146,65,33,240,82,67,240,71,110,67,140,57,141,65,33,240,82,67,33,48,114,67,77,21,143,65,33,240,82,67,16,24,118,67,134,90,137,65,33,240,82,67,0,0,122,67,25,4,129,65,33,240,82,67,42,0,122,64,45,67,39,65,240,7,79,67,21,0,250,64,183,98,32,65,240,7,79,67,52,128,59,65,119,45,38,65,240,7,79,67,0,0,122,65,184,129,13,65,240,7,79,67,26,64,156,65,35,173,5,65,240,7,79,67,0,128,187,65,86,101,207,64,240,7,79,67,26,192,218,65,227,112,195,64,240,7,79,67,0,0,250,65,43,106,196,64,240,7,79,67,13,160,12,66,155,85,208,64,240,7,79,67,0,64,28,66,147,227,212,64,240,7,79,67,13,224,43,66,5,221,200,64,240,7,79,67,0,128,59,66,222,200,185,64,240,7,79,67,13,32,75,66,205,233,188,64,240,7,79,67,0,192,90,66,241,41,181,64,240,7,79,67,13,96,106,66,78,151,149,64,240,7,79,67,0,0,122,66,245,243,153,64,240,7,79,67,7,208,132,66,27,42,194,64,240,7,79,67,0,160,140,66,211,164,243,64,240,7,79,67,7,112,148,66,14,161,11,65,240,7,79,67,0,64,156,66,36,81,21,65,240,7,79,67,7,16,164,66,205,245,7,65,240,7,79,67,0,224,171,66,52,75,251,64,240,7,79,67,7,176,179,66,251,5,236,64,240,7,79,67,0,128,187,66,95,152,238,64,240,7,79,67,7,80,195,66,245,132,248,64,240,7,79,67,66,32,203,66,24,236,10,65,240,7,79,67,33,240,210,66,46,255,38,65,240,7,79,67,0,192,218,66,34,142,39,65,240,7,79,67,223,143,226,66,157,17,55,65,240,7,79,67,66,96,234,66,250,237,68,65,240,7,79,67,33,48,242,66,39,194,78,65,240,7,79,67,0,0,250,66,92,32,101,65,240,7,79,67,240,231,0,67,41,203,114,65,240,7,79,67,33,208,4,67,85,193,103,65,240,7,79,67,16,184,8,67,193,202,167,65,240,7,79,67,0,160,12,67,54,188,187,65,240,7,79,67,240,135,16,67,53,239,199,65,240,7,79,67,33,112,20,67,66,224,205,65,240,7,79,67,16,88,24,67,84,244,171,65,240,7,79,67,0,64,28,67,29,90,177,65,240,7,79,67,240,39,32,67,140,202,199,65,240,7,79,67,33,16,36,67,213,137,211,65,240,7,79,67,16,248,39,67,116,36,207,65,240,7,79,67,0,224,43,67,143,83,164,65,240,7,79,67,240,199,47,67,208,213,193,65,240,7,79,67,33,176,51,67,215,52,195,65,240,7,79,67,16,152,55,67,72,63,202,65,240,7,79,67,0,128,59,67,7,223,206,65,240,7,79,67,240,103,63,67,9,249,210,65,240,7,79,67,33,80,67,67,133,107,208,65,240,7,79,67,16,56,71,67,32,227,196,65,240,7,79,67,0,32,75,67,4,231,192,65,240,7,79,67,240,7,79,67,233,200,187,65,240,7,79,67,33,240,82,67,138,48,181,65,240,7,79,67,16,216,86,67,177,97,182,65,240,7,79,67,0,192,90,67,159,205,147,65,240,7,79,67,240,167,94,67,120,122,185,65,240,7,79,67,33,144,98,67,84,116,185,65,240,7,79,67,16,120,102,67,238,90,183,65,240,7,79,67,0,96,106,67,13,113,158,65,240,7,79,67,240,71,110,67,177,225,134,65,240,7,79,67,33,48,114,67,109,214,136,65,240,7,79,67,16,24,118,67,127,234,128,65,240,7,79,67,0,0,122,67,18,20,112,65,240,7,79,67,42,0,122,64,148,135,55,65,0,32,75,67,21,0,250,64,167,121,49,65,0,32,75,67,52,128,59,65,150,67,55,65,0,32,75,67,0,0,122,65,78,98,38,65,0,32,75,67,26,64,156,65,100,76,14,65,0,32,75,67,0,128,187,65,103,213,240,64,0,32,75,67,26,192,218,65,65,125,226,64,0,32,75,67,0,0,250,65,225,98,255,64,0,32,75,67,13,160,12,66,227,136,12,65,0,32,75,67,0,64,28,66,71,242,13,65,0,32,75,67,13,224,43,66,112,66,6,65,0,32,75,67,0,128,59,66,200,94,239,64,0,32,75,67,13,32,75,66,44,241,216,64,0,32,75,67,0,192,90,66,127,193,228,64,0,32,75,67,13,96,106,66,126,198,206,64,0,32,75,67,0,0,122,66,169,159,215,64,0,32,75,67,7,208,132,66,64,164,244,64,0,32,75,67,0,160,140,66,95,164,19,65,0,32,75,67,7,112,148,66,130,11,30,65,0,32,75,67,0,64,156,66,182,132,34,65,0,32,75,67,7,16,164,66,149,14,29,65,0,32,75,67,0,224,171,66,211,222,29,65,0,32,75,67,7,176,179,66,27,13,32,65,0,32,75,67,0,128,187,66,106,65,28,65,0,32,75,67,7,80,195,66,10,104,19,65,0,32,75,67,66,32,203,66,0,99,14,65,0,32,75,67,33,240,210,66,48,158,29,65,0,32,75,67,0,192,218,66,36,185,55,65,0,32,75,67,223,143,226,66,242,65,62,65,0,32,75,67,66,96,234,66,186,73,69,65,0,32,75,67,33,48,242,66,190,193,89,65,0,32,75,67,0,0,250,66,251,92,98,65,0,32,75,67,240,231,0,67,79,175,108,65,0,32,75,67,33,208,4,67,211,188,130,65,0,32,75,67,16,184,8,67,0,17,182,65,0,32,75,67,0,160,12,67,110,180,196,65,0,32,75,67,240,135,16,67,29,218,202,65,0,32,75,67,33,112,20,67,60,61,174,65,0,32,75,67,16,88,24,67,68,250,192,65,0,32,75,67,0,64,28,67,81,107,213,65,0,32,75,67,240,39,32,67,243,159,205,65,0,32,75,67,33,16,36,67,20,208,215,65,0,32,75,67,16,248,39,67,238,124,207,65,0,32,75,67,0,224,43,67,125,46,158,65,0,32,75,67,240,199,47,67,121,105,154,65,0,32,75,67,33,176,51,67,210,239,153,65,0,32,75,67,16,152,55,67,68,105,198,65,0,32,75,67,0,128,59,67,204,110,202,65,0,32,75,67,240,103,63,67,175,148,202,65,0,32,75,67,33,80,67,67,146,75,160,65,0,32,75,67,16,56,71,67,13,241,155,65,0,32,75,67,0,32,75,67,173,122,187,65,0,32,75,67,240,7,79,67,231,251,181,65,0,32,75,67,33,240,82,67,153,170,179,65,0,32,75,67,16,216,86,67,24,38,151,65,0,32,75,67,0,192,90,67,233,166,139,65,0,32,75,67,240,167,94,67,135,150,150,65,0,32,75,67,33,144,98,67,152,204,171,65,0,32,75,67,16,120,102,67,30,39,174,65,0,32,75,67,0,96,106,67,79,30,169,65,0,32,75,67,240,71,110,67,81,107,126,65,0,32,75,67,33,48,114,67,117,147,127,65,0,32,75,67,16,24,118,67,193,168,115,65,0,32,75,67,0,0,122,67,74,12,89,65,0,32,75,67,42,0,122,64,247,228,65,65,16,56,71,67,21,0,250,64,220,215,69,65,16,56,71,67,52,128,59,65,25,226,65,65,16,56,71,67,0,0,122,65,70,182,49,65,16,56,71,67,26,64,156,65,219,150,30,65,16,56,71,67,0,128,187,65,148,135,10,65,16,56,71,67,26,192,218,65,135,109,255,64,16,56,71,67,0,0,250,65,50,102,18,65,16,56,71,67,13,160,12,66,61,155,36,65,16,56,71,67,0,64,28,66,67,28,36,65,16,56,71,67,13,224,43,66,223,108,25,65,16,56,71,67,0,128,59,66,215,18,2,65,16,56,71,67,13,32,75,66,218,56,250,64,16,56,71,67,0,192,90,66,46,185,8,65,16,56,71,67,13,96,106,66,31,87,2,65,16,56,71,67,0,0,122,66,127,193,9,65,16,56,71,67,7,208,132,66,179,41,26,65,16,56,71,67,0,160,140,66,123,131,40,65,16,56,71,67,7,112,148,66,87,91,37,65,16,56,71,67,0,64,156,66,86,125,52,65,16,56,71,67,7,16,164,66,202,50,54,65,16,56,71,67,0,224,171,66,79,30,59,65,16,56,71,67,7,176,179,66,255,33,70,65,16,56,71,67,0,128,187,66,71,114,71,65,16,56,71,67,7,80,195,66,109,231,53,65,16,56,71,67,66,32,203,66,19,97,36,65,16,56,71,67,33,240,210,66,152,221,38,65,16,56,71,67,0,192,218,66,9,138,49,65,16,56,71,67,223,143,226,66,134,56,66,65,16,56,71,67,66,96,234,66,35,219,72,65,16,56,71,67,33,48,242,66,136,133,84,65,16,56,71,67,0,0,250,66,213,9,115,65,16,56,71,67,240,231,0,67,239,201,130,65,16,56,71,67,33,208,4,67,232,234,140,65,16,56,71,67,16,184,8,67,37,6,191,65,16,56,71,67,0,160,12,67,134,184,196,65,16,56,71,67,240,135,16,67,171,190,209,65,16,56,71,67,33,112,20,67,168,198,174,65,16,56,71,67,16,88,24,67,176,3,212,65,16,56,71,67,0,64,28,67,181,55,210,65,16,56,71,67,240,39,32,67,97,178,211,65,16,56,71,67,33,16,36,67,136,133,209,65,16,56,71,67,16,248,39,67,106,222,208,65,16,56,71,67,0,224,43,67,99,238,165,65,16,56,71,67,240,199,47,67,221,36,163,65,16,56,71,67,33,176,51,67,217,78,158,65,16,56,71,67,16,152,55,67,230,191,167,65,16,56,71,67,0,128,59,67,102,230,190,65,16,56,71,67,240,103,63,67,246,168,192,65,16,56,71,67,33,80,67,67,210,239,155,65,16,56,71,67,16,56,71,67,170,2,167,65,16,56,71,67,0,32,75,67,96,229,175,65,16,56,71,67,240,7,79,67,158,94,175,65,16,56,71,67,33,240,82,67,214,69,160,65,16,56,71,67,16,216,86,67,251,203,124,65,16,56,71,67,0,192,90,67,22,106,124,65,16,56,71,67,240,167,94,67,63,87,126,65,16,56,71,67,33,144,98,67,206,136,158,65,16,56,71,67,16,120,102,67,75,234,159,65,16,56,71,67,0,96,106,67,111,129,155,65,16,56,71,67,240,71,110,67,106,188,99,65,16,56,71,67,33,48,114,67,143,194,110,65,16,56,71,67,16,24,118,67,7,95,89,65,16,56,71,67,0,0,122,67,92,143,59,65,16,56,71,67,42,0,122,64,32,210,92,65,33,80,67,67,21,0,250,64,164,223,92,65,33,80,67,67,52,128,59,65,214,86,82,65,33,80,67,67,0,0,122,65,156,51,68,65,33,80,67,67,26,64,156,65,82,184,42,65,33,80,67,67,0,128,187,65,95,152,32,65,33,80,67,67,26,192,218,65,63,53,21,65,33,80,67,67,0,0,250,65,89,23,40,65,33,80,67,67,13,160,12,66,231,251,48,65,33,80,67,67,0,64,28,66,164,223,51,65,33,80,67,67,13,224,43,66,144,160,39,65,33,80,67,67,0,128,59,66,154,124,16,65,33,80,67,67,13,32,75,66,98,149,23,65,33,80,67,67,0,192,90,66,50,131,26,65,33,80,67,67,13,96,106,66,233,38,26,65,33,80,67,67,0,0,122,66,128,72,31,65,33,80,67,67,7,208,132,66,179,123,45,65,33,80,67,67,0,160,140,66,193,168,60,65,33,80,67,67,7,112,148,66,177,80,57,65,33,80,67,67,0,64,156,66,184,30,81,65,33,80,67,67,7,16,164,66,23,217,92,65,33,80,67,67,0,224,171,66,86,159,79,65,33,80,67,67,7,176,179,66,88,57,106,65,33,80,67,67,0,128,187,66,137,210,105,65,33,80,67,67,7,80,195,66,40,15,85,65,33,80,67,67,66,32,203,66,220,215,75,65,33,80,67,67,33,240,210,66,201,229,76,65,33,80,67,67,0,192,218,66,1,222,65,65,33,80,67,67,223,143,226,66,174,71,75,65,33,80,67,67,66,96,234,66,14,79,71,65,33,80,67,67,33,48,242,66,231,29,89,65,33,80,67,67,0,0,250,66,229,242,114,65,33,80,67,67,240,231,0,67,240,5,134,65,33,80,67,67,33,208,4,67,44,101,153,65,33,80,67,67,16,184,8,67,167,104,191,65,33,80,67,67,0,160,12,67,245,219,207,65,33,80,67,67,240,135,16,67,7,78,209,65,33,80,67,67,33,112,20,67,186,201,171,65,33,80,67,67,16,88,24,67,26,64,204,65,33,80,67,67,0,64,28,67,18,20,216,65,33,80,67,67,240,39,32,67,237,158,220,65,33,80,67,67,33,16,36,67,184,175,216,65,33,80,67,67,16,248,39,67,213,103,210,65,33,80,67,67,0,224,43,67,224,173,187,65,33,80,67,67,240,199,47,67,207,102,211,65,33,80,67,67,33,176,51,67,147,41,169,65,33,80,67,67,16,152,55,67,26,209,168,65,33,80,67,67,0,128,59,67,177,80,201,65,33,80,67,67,240,103,63,67,222,241,198,65,33,80,67,67,33,80,67,67,213,103,193,65,33,80,67,67,16,56,71,67,170,2,160,65,33,80,67,67,0,32,75,67,53,222,188,65,33,80,67,67,240,7,79,67,104,162,181,65,33,80,67,67,33,240,82,67,17,71,139,65,33,80,67,67,16,216,86,67,163,146,134,65,33,80,67,67,0,192,90,67,117,19,130,65,33,80,67,67,240,167,94,67,131,192,120,65,33,80,67,67,33,144,98,67,40,15,164,65,33,80,67,67,16,120,102,67,159,60,160,65,33,80,67,67,0,96,106,67,218,172,155,65,33,80,67,67,240,71,110,67,207,102,101,65,33,80,67,67,33,48,114,67,1,222,93,65,33,80,67,67,16,24,118,67,37,117,76,65,33,80,67,67,0,0,122,67,57,180,74,65,33,80,67,67,42,0,122,64,48,76,102,65,240,103,63,67,21,0,250,64,131,81,101,65,240,103,63,67,52,128,59,65,150,67,88,65,240,103,63,67,0,0,122,65,222,147,69,65,240,103,63,67,26,64,156,65,195,100,46,65,240,103,63,67,0,128,187,65,162,69,44,65,240,103,63,67,26,192,218,65,145,15,65,65,240,103,63,67,0,0,250,65,27,13,64,65,240,103,63,67,13,160,12,66,32,210,74,65,240,103,63,67,0,64,28,66,246,151,71,65,240,103,63,67,13,224,43,66,84,227,46,65,240,103,63,67,0,128,59,66,57,69,49,65,240,103,63,67,13,32,75,66,11,36,52,65,240,103,63,67,0,192,90,66,53,94,49,65,240,103,63,67,13,96,106,66,26,81,34,65,240,103,63,67,0,0,122,66,247,228,49,65,240,103,63,67,7,208,132,66,39,160,67,65,240,103,63,67,0,160,140,66,222,2,69,65,240,103,63,67,7,112,148,66,157,17,91,65,240,103,63,67,0,64,156,66,4,231,102,65,240,103,63,67,7,16,164,66,18,20,107,65,240,103,63,67,0,224,171,66,159,171,122,65,240,103,63,67,7,176,179,66,20,174,128,65,240,103,63,67,0,128,187,66,88,40,130,65,240,103,63,67,7,80,195,66,1,222,130,65,240,103,63,67,66,32,203,66,43,246,121,65,240,103,63,67,33,240,210,66,134,90,107,65,240,103,63,67,0,192,218,66,131,192,98,65,240,103,63,67,223,143,226,66,247,117,90,65,240,103,63,67,66,96,234,66,152,221,106,65,240,103,63,67,33,48,242,66,158,239,114,65,240,103,63,67,0,0,250,66,37,245,131,65,240,103,63,67,240,231,0,67,110,35,140,65,240,103,63,67,33,208,4,67,193,185,179,65,240,103,63,67,16,184,8,67,202,195,201,65,240,103,63,67,0,160,12,67,130,115,213,65,240,103,63,67,240,135,16,67,193,185,219,65,240,103,63,67,33,112,20,67,62,121,182,65,240,103,63,67,16,88,24,67,33,176,178,65,240,103,63,67,0,64,28,67,153,170,232,65,240,103,63,67,240,39,32,67,199,41,236,65,240,103,63,67,33,16,36,67,215,52,235,65,240,103,63,67,16,248,39,67,200,7,228,65,240,103,63,67,0,224,43,67,57,197,221,65,240,103,63,67,240,199,47,67,216,129,221,65,240,103,63,67,33,176,51,67,72,191,206,65,240,103,63,67,16,152,55,67,59,112,186,65,240,103,63,67,0,128,59,67,123,20,221,65,240,103,63,67,240,103,63,67,163,18,209,65,240,103,63,67,33,80,67,67,0,111,213,65,240,103,63,67,16,56,71,67,219,249,181,65,240,103,63,67,0,32,75,67,17,199,182,65,240,103,63,67,240,7,79,67,4,231,174,65,240,103,63,67,33,240,82,67,128,183,164,65,240,103,63,67,16,216,86,67,201,118,165,65,240,103,63,67,0,192,90,67,174,216,127,65,240,103,63,67,240,167,94,67,71,3,131,65,240,103,63,67,33,144,98,67,84,227,172,65,240,103,63,67,16,120,102,67,74,251,166,65,240,103,63,67,0,96,106,67,156,162,161,65,240,103,63,67,240,71,110,67,112,95,117,65,240,103,63,67,33,48,114,67,211,77,107,65,240,103,63,67,16,24,118,67,197,254,102,65,240,103,63,67,0,0,122,67,100,204,97,65,240,103,63,67,42,0,122,64,227,199,98,65,0,128,59,67,42,0,250,64,159,205,104,65,0,128,59,67,52,128,59,65,153,187,89,65,0,128,59,67,0,0,122,65,20,63,68,65,0,128,59,67,26,64,156,65,23,217,59,65,0,128,59,67,0,128,187,65,117,2,70,65,0,128,59,67,26,192,218,65,113,61,97,65,0,128,59,67,0,0,250,65,225,122,95,65,0,128,59,67,13,160,12,66,242,65,101,65,0,128,59,67,0,64,28,66,33,176,81,65,0,128,59,67,13,224,43,66,42,169,80,65,0,128,59,67,0,128,59,66,135,22,85,65,0,128,59,67,13,32,75,66,71,3,79,65,0,128,59,67,0,192,90,66,80,252,78,65,0,128,59,67,13,96,106,66,194,23,66,65,0,128,59,67,0,0,122,66,2,154,77,65,0,128,59,67,7,208,132,66,204,127,80,65,0,128,59,67,0,160,140,66,181,166,82,65,0,128,59,67,7,112,148,66,25,226,105,65,0,128,59,67,0,64,156,66,244,125,129,65,0,128,59,67,7,16,164,66,34,142,130,65,0,128,59,67,0,224,171,66,233,55,135,65,0,128,59,67,7,176,179,66,13,96,140,65,0,128,59,67,0,128,187,66,204,238,144,65,0,128,59,67,7,80,195,66,28,235,149,65,0,128,59,67,66,32,203,66,73,29,146,65,0,128,59,67,33,240,210,66,141,23,140,65,0,128,59,67,0,192,218,66,226,216,134,65,0,128,59,67,223,143,226,66,202,84,125,65,0,128,59,67,66,96,234,66,15,139,131,65,0,128,59,67,33,48,242,66,243,142,136,65,0,128,59,67,0,0,250,66,171,79,144,65,0,128,59,67,240,231,0,67,37,245,158,65,0,128,59,67,33,208,4,67,14,207,198,65,0,128,59,67,16,184,8,67,108,120,213,65,0,128,59,67,0,160,12,67,39,66,228,65,0,128,59,67,240,135,16,67,74,12,230,65,0,128,59,67,33,112,20,67,15,156,204,65,0,128,59,67,16,88,24,67,196,49,207,65,0,128,59,67,0,64,28,67,13,96,232,65,0,128,59,67,240,39,32,67,105,128,0,66,0,128,59,67,33,16,36,67,247,134,0,66,0,128,59,67,16,248,39,67,66,79,254,65,0,128,59,67,0,224,43,67,74,251,242,65,0,128,59,67,240,199,47,67,68,250,240,65,0,128,59,67,33,176,51,67,69,216,242,65,0,128,59,67,16,152,55,67,133,235,243,65,0,128,59,67,0,128,59,67,48,42,235,65,0,128,59,67,240,103,63,67,85,65,245,65,0,128,59,67,33,80,67,67,213,231,246,65,0,128,59,67,16,56,71,67,247,228,208,65,0,128,59,67,0,32,75,67,163,1,204,65,0,128,59,67,240,7,79,67,106,77,198,65,0,128,59,67,33,240,82,67,198,92,220,65,0,128,59,67,16,216,86,67,128,55,204,65,0,128,59,67,0,192,90,67,4,214,161,65,0,128,59,67,240,167,94,67,94,58,138,65,0,128,59,67,33,144,98,67,5,69,176,65,0,128,59,67,16,120,102,67,231,140,177,65,0,128,59,67,0,96,106,67,26,81,173,65,0,128,59,67,240,71,110,67,87,236,134,65,0,128,59,67,33,48,114,67,150,67,123,65,0,128,59,67,16,24,118,67,241,244,127,65,0,128,59,67,0,0,122,67,16,88,115,65,0,128,59,67,42,0,122,64,7,206,95,65,16,152,55,67,42,0,250,64,247,117,101,65,16,152,55,67,52,128,59,65,174,216,82,65,16,152,55,67,0,0,122,65,42,169,77,65,16,152,55,67,26,64,156,65,252,24,95,65,16,152,55,67,0,128,187,65,188,116,107,65,16,152,55,67,26,192,218,65,35,219,111,65,16,152,55,67,0,0,250,65,168,198,118,65,16,152,55,67,13,160,12,66,27,47,118,65,16,152,55,67,0,64,28,66,53,239,99,65,16,152,55,67,13,224,43,66,134,201,116,65,16,152,55,67,0,128,59,66,173,122,128,65,16,152,55,67,13,32,75,66,202,195,109,65,16,152,55,67,0,192,90,66,197,143,111,65,16,152,55,67,13,96,106,66,79,175,89,65,16,152,55,67,0,0,122,66,121,233,80,65,16,152,55,67,7,208,132,66,187,184,86,65,16,152,55,67,0,160,140,66,79,64,97,65,16,152,55,67,7,112,148,66,181,21,117,65,16,152,55,67,0,64,156,66,45,50,131,65,16,152,55,67,7,16,164,66,210,128,139,65,16,152,55,67,0,224,171,66,2,154,143,65,16,152,55,67,7,176,179,66,75,217,147,65,16,152,55,67,0,128,187,66,177,97,155,65,16,152,55,67,7,80,195,66,238,90,161,65,16,152,55,67,66,32,203,66,134,73,161,65,16,152,55,67,33,240,210,66,250,109,156,65,16,152,55,67,0,192,218,66,223,79,152,65,16,152,55,67,223,143,226,66,48,204,145,65,16,152,55,67,66,96,234,66,125,80,149,65,16,152,55,67,33,48,242,66,1,222,153,65,16,152,55,67,0,0,250,66,143,83,163,65,16,152,55,67,240,231,0,67,167,232,168,65,16,152,55,67,33,208,4,67,118,79,205,65,16,152,55,67,16,184,8,67,174,182,219,65,16,152,55,67,0,160,12,67,101,153,232,65,16,152,55,67,240,135,16,67,163,146,245,65,16,152,55,67,33,112,20,67,201,118,215,65,16,152,55,67,16,88,24,67,185,252,223,65,16,152,55,67,0,64,28,67,116,70,227,65,16,152,55,67,240,39,32,67,145,109,7,66,16,152,55,67,33,16,36,67,120,156,10,66,16,152,55,67,16,248,39,67,184,158,5,66,16,152,55,67,0,224,43,67,199,186,254,65,16,152,55,67,240,199,47,67,200,7,255,65,16,152,55,67,33,176,51,67,123,148,1,66,16,152,55,67,16,152,55,67,50,102,3,66,16,152,55,67,0,128,59,67,115,232,229,65,16,152,55,67,240,103,63,67,79,128,6,66,16,152,55,67,33,80,67,67,132,222,3,66,16,152,55,67,16,56,71,67,251,186,254,65,16,152,55,67,0,32,75,67,145,237,211,65,16,152,55,67,240,7,79,67,212,171,235,65,16,152,55,67,33,240,82,67,63,70,230,65,16,152,55,67,16,216,86,67,178,157,212,65,16,152,55,67,0,192,90,67,66,62,200,65,16,152,55,67,240,167,94,67,192,91,150,65,16,152,55,67,33,144,98,67,113,44,185,65,16,152,55,67,16,120,102,67,199,169,178,65,16,152,55,67,0,96,106,67,105,128,173,65,16,152,55,67,240,71,110,67,140,74,131,65,16,152,55,67,33,48,114,67,211,188,131,65,16,152,55,67,16,24,118,67,193,168,130,65,16,152,55,67,0,0,122,67,201,101,128,65,16,152,55,67,42,0,122,64,35,219,106,65,33,176,51,67,42,0,250,64,202,84,103,65,33,176,51,67,52,128,59,65,112,206,91,65,33,176,51,67,0,0,122,65,162,180,95,65,33,176,51,67,26,64,156,65,105,111,111,65,33,176,51,67,0,128,187,65,20,208,117,65,33,176,51,67,26,192,218,65,169,19,129,65,33,176,51,67,0,0,250,65,57,69,131,65,33,176,51,67,13,160,12,66,92,143,129,65,33,176,51,67,0,64,28,66,145,109,129,65,33,176,51,67,13,224,43,66,247,6,138,65,33,176,51,67,0,128,59,66,203,161,138,65,33,176,51,67,13,32,75,66,169,19,128,65,33,176,51,67,0,192,90,66,39,160,119,65,33,176,51,67,13,96,106,66,38,83,97,65,33,176,51,67,0,0,122,66,128,72,78,65,33,176,51,67,7,208,132,66,121,233,97,65,33,176,51,67,0,160,140,66,215,18,111,65,33,176,51,67,7,112,148,66,139,108,126,65,33,176,51,67,0,64,156,66,59,1,139,65,33,176,51,67,7,16,164,66,58,18,149,65,33,176,51,67,0,224,171,66,228,20,158,65,33,176,51,67,7,176,179,66,78,209,158,65,33,176,51,67,0,128,187,66,159,171,164,65,33,176,51,67], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+358400);
/* memory initializer */ allocate([7,80,195,66,180,89,170,65,33,176,51,67,66,32,203,66,71,114,169,65,33,176,51,67,33,240,210,66,246,168,171,65,33,176,51,67,0,192,218,66,159,77,169,65,33,176,51,67,223,143,226,66,202,212,163,65,33,176,51,67,66,96,234,66,77,149,164,65,33,176,51,67,33,48,242,66,52,34,163,65,33,176,51,67,0,0,250,66,1,205,174,65,33,176,51,67,240,231,0,67,16,122,181,65,33,176,51,67,33,208,4,67,229,80,187,65,33,176,51,67,16,184,8,67,41,109,226,65,33,176,51,67,0,160,12,67,170,130,244,65,33,176,51,67,240,135,16,67,68,11,3,66,33,176,51,67,33,112,20,67,21,140,235,65,33,176,51,67,16,88,24,67,156,196,242,65,33,176,51,67,0,64,28,67,45,161,253,65,33,176,51,67,240,39,32,67,227,37,17,66,33,176,51,67,33,16,36,67,29,248,18,66,33,176,51,67,16,248,39,67,40,254,14,66,33,176,51,67,0,224,43,67,163,1,240,65,33,176,51,67,240,199,47,67,254,101,237,65,33,176,51,67,33,176,51,67,92,32,10,66,33,176,51,67,16,152,55,67,88,202,9,66,33,176,51,67,0,128,59,67,70,101,9,66,33,176,51,67,240,103,63,67,230,174,5,66,33,176,51,67,33,80,67,67,167,104,236,65,33,176,51,67,16,56,71,67,239,184,231,65,33,176,51,67,0,32,75,67,50,102,225,65,33,176,51,67,240,7,79,67,142,117,244,65,33,176,51,67,33,240,82,67,221,53,229,65,33,176,51,67,16,216,86,67,93,126,217,65,33,176,51,67,0,192,90,67,150,195,166,65,33,176,51,67,240,167,94,67,212,154,162,65,33,176,51,67,33,144,98,67,62,249,194,65,33,176,51,67,16,120,102,67,242,193,185,65,33,176,51,67,0,96,106,67,184,64,173,65,33,176,51,67,240,71,110,67,86,253,129,65,33,176,51,67,33,48,114,67,11,53,134,65,33,176,51,67,16,24,118,67,11,53,132,65,33,176,51,67,0,0,122,67,27,13,126,65,33,176,51,67,42,0,122,64,165,189,116,65,240,199,47,67,42,0,250,64,51,51,113,65,240,199,47,67,52,128,59,65,16,233,108,65,240,199,47,67,0,0,122,65,129,38,103,65,240,199,47,67,26,64,156,65,179,234,124,65,240,199,47,67,0,128,187,65,208,85,132,65,240,199,47,67,26,192,218,65,153,59,134,65,240,199,47,67,0,0,250,65,86,142,137,65,240,199,47,67,13,160,12,66,173,250,135,65,240,199,47,67,0,64,28,66,88,185,135,65,240,199,47,67,13,224,43,66,0,17,142,65,240,199,47,67,0,128,59,66,133,235,144,65,240,199,47,67,13,32,75,66,29,56,133,65,240,199,47,67,0,192,90,66,29,90,126,65,240,199,47,67,13,96,106,66,124,97,119,65,240,199,47,67,0,0,122,66,247,228,101,65,240,199,47,67,7,208,132,66,18,165,112,65,240,199,47,67,0,160,140,66,204,93,127,65,240,199,47,67,7,112,148,66,228,148,135,65,240,199,47,67,0,64,156,66,77,115,144,65,240,199,47,67,7,16,164,66,67,45,151,65,240,199,47,67,0,224,171,66,97,212,160,65,240,199,47,67,7,176,179,66,207,230,162,65,240,199,47,67,0,128,187,66,8,44,160,65,240,199,47,67,7,80,195,66,52,34,167,65,240,199,47,67,66,32,203,66,43,246,174,65,240,199,47,67,33,240,210,66,220,215,181,65,240,199,47,67,0,192,218,66,151,127,181,65,240,199,47,67,223,143,226,66,179,234,171,65,240,199,47,67,66,96,234,66,89,23,171,65,240,199,47,67,33,48,242,66,238,90,179,65,240,199,47,67,0,0,250,66,206,153,188,65,240,199,47,67,240,231,0,67,91,177,191,65,240,199,47,67,33,208,4,67,81,218,196,65,240,199,47,67,16,184,8,67,154,8,247,65,240,199,47,67,0,160,12,67,242,65,253,65,240,199,47,67,240,135,16,67,213,231,8,66,240,199,47,67,33,112,20,67,85,176,247,65,240,199,47,67,16,88,24,67,88,138,15,66,240,199,47,67,0,64,28,67,54,141,26,66,240,199,47,67,240,39,32,67,111,112,28,66,240,199,47,67,33,16,36,67,27,47,28,66,240,199,47,67,16,248,39,67,124,33,24,66,240,199,47,67,0,224,43,67,247,164,18,66,240,199,47,67,240,199,47,67,254,67,16,66,240,199,47,67,33,176,51,67,165,125,16,66,240,199,47,67,16,152,55,67,49,72,16,66,240,199,47,67,0,128,59,67,189,163,15,66,240,199,47,67,240,103,63,67,233,72,243,65,240,199,47,67,33,80,67,67,72,97,240,65,240,199,47,67,16,56,71,67,211,94,231,65,240,199,47,67,0,32,75,67,23,153,3,66,240,199,47,67,240,7,79,67,155,230,249,65,240,199,47,67,33,240,82,67,187,39,240,65,240,199,47,67,16,216,86,67,76,55,187,65,240,199,47,67,0,192,90,67,26,209,173,65,240,199,47,67,240,167,94,67,167,121,160,65,240,199,47,67,33,144,98,67,20,208,201,65,240,199,47,67,16,120,102,67,60,61,193,65,240,199,47,67,0,96,106,67,155,85,176,65,240,199,47,67,240,71,110,67,228,20,122,65,240,199,47,67,33,48,114,67,144,160,119,65,240,199,47,67,16,24,118,67,156,51,126,65,240,199,47,67,0,0,122,67,116,36,114,65,240,199,47,67,42,0,122,64,255,161,128,65,0,224,43,67,21,0,250,64,147,24,128,65,0,224,43,67,52,128,59,65,152,110,112,65,0,224,43,67,0,0,122,65,224,45,114,65,0,224,43,67,26,64,156,65,201,229,130,65,0,224,43,67,0,128,187,65,220,215,133,65,0,224,43,67,26,192,218,65,242,210,137,65,0,224,43,67,0,0,250,65,213,231,131,65,0,224,43,67,13,160,12,66,183,81,132,65,0,224,43,67,0,64,28,66,109,103,140,65,0,224,43,67,13,224,43,66,34,142,141,65,0,224,43,67,0,128,59,66,28,252,141,65,0,224,43,67,13,32,75,66,135,167,139,65,0,224,43,67,0,192,90,66,37,134,132,65,0,224,43,67,13,96,106,66,155,230,118,65,0,224,43,67,0,0,122,66,90,100,111,65,0,224,43,67,7,208,132,66,142,6,116,65,0,224,43,67,0,160,140,66,108,120,130,65,0,224,43,67,7,112,148,66,128,72,140,65,0,224,43,67,0,64,156,66,113,155,148,65,0,224,43,67,7,16,164,66,50,85,153,65,0,224,43,67,0,224,171,66,95,152,158,65,0,224,43,67,7,176,179,66,219,10,165,65,0,224,43,67,0,128,187,66,12,130,164,65,0,224,43,67,7,80,195,66,73,157,164,65,0,224,43,67,66,32,203,66,4,86,172,65,0,224,43,67,33,240,210,66,231,123,180,65,0,224,43,67,0,192,218,66,43,24,184,65,0,224,43,67,223,143,226,66,106,222,180,65,0,224,43,67,66,96,234,66,54,205,182,65,0,224,43,67,33,48,242,66,137,210,185,65,0,224,43,67,0,0,250,66,170,241,194,65,0,224,43,67,240,231,0,67,113,155,204,65,0,224,43,67,33,208,4,67,11,198,221,65,0,224,43,67,16,184,8,67,24,213,5,66,0,224,43,67,0,160,12,67,181,166,5,66,0,224,43,67,240,135,16,67,55,201,11,66,0,224,43,67,33,112,20,67,59,240,251,65,0,224,43,67,16,88,24,67,204,174,26,66,0,224,43,67,0,64,28,67,208,21,33,66,0,224,43,67,240,39,32,67,121,169,33,66,0,224,43,67,33,16,36,67,194,23,36,66,0,224,43,67,16,248,39,67,190,31,31,66,0,224,43,67,0,224,43,67,180,89,23,66,0,224,43,67,240,199,47,67,62,57,24,66,0,224,43,67,33,176,51,67,14,15,0,66,0,224,43,67,16,152,55,67,81,235,12,66,0,224,43,67,0,128,59,67,110,227,10,66,0,224,43,67,240,103,63,67,173,105,252,65,0,224,43,67,33,80,67,67,185,252,231,65,0,224,43,67,16,56,71,67,123,3,239,65,0,224,43,67,0,32,75,67,197,143,2,66,0,224,43,67,240,7,79,67,251,186,250,65,0,224,43,67,33,240,82,67,60,78,227,65,0,224,43,67,16,216,86,67,93,237,183,65,0,224,43,67,0,192,90,67,252,41,171,65,0,224,43,67,240,167,94,67,12,130,202,65,0,224,43,67,33,144,98,67,159,43,201,65,0,224,43,67,16,120,102,67,214,197,187,65,0,224,43,67,0,96,106,67,182,243,179,65,0,224,43,67,240,71,110,67,43,246,126,65,0,224,43,67,33,48,114,67,120,156,116,65,0,224,43,67,16,24,118,67,114,138,109,65,0,224,43,67,0,0,122,67,47,110,104,65,0,224,43,67,42,0,122,64,252,41,137,65,16,248,39,67,21,0,250,64,181,149,133,65,16,248,39,67,52,128,59,65,120,139,132,65,16,248,39,67,0,0,122,65,103,85,129,65,16,248,39,67,26,64,156,65,131,209,130,65,16,248,39,67,0,128,187,65,171,79,132,65,16,248,39,67,26,192,218,65,195,117,134,65,16,248,39,67,0,0,250,65,240,150,137,65,16,248,39,67,13,160,12,66,72,225,142,65,16,248,39,67,0,64,28,66,180,89,148,65,16,248,39,67,13,224,43,66,217,95,149,65,16,248,39,67,0,128,59,66,117,130,143,65,16,248,39,67,13,32,75,66,137,82,140,65,16,248,39,67,0,192,90,66,127,234,139,65,16,248,39,67,13,96,106,66,66,190,135,65,16,248,39,67,0,0,122,66,236,192,129,65,16,248,39,67,7,208,132,66,79,30,121,65,16,248,39,67,0,160,140,66,123,3,136,65,16,248,39,67,7,112,148,66,27,30,144,65,16,248,39,67,0,64,156,66,106,222,151,65,16,248,39,67,7,16,164,66,191,142,158,65,16,248,39,67,0,224,171,66,218,44,159,65,16,248,39,67,7,176,179,66,249,32,165,65,16,248,39,67,0,128,187,66,125,208,167,65,16,248,39,67,7,80,195,66,202,50,169,65,16,248,39,67,66,32,203,66,126,157,170,65,16,248,39,67,33,240,210,66,34,236,176,65,16,248,39,67,0,192,218,66,252,169,177,65,16,248,39,67,223,143,226,66,137,210,185,65,16,248,39,67,66,96,234,66,222,147,196,65,16,248,39,67,33,48,242,66,5,35,203,65,16,248,39,67,0,0,250,66,122,37,210,65,16,248,39,67,240,231,0,67,160,26,225,65,16,248,39,67,33,208,4,67,30,150,239,65,16,248,39,67,16,184,8,67,245,10,11,66,16,248,39,67,0,160,12,67,125,127,13,66,16,248,39,67,240,135,16,67,118,143,16,66,16,248,39,67,33,112,20,67,28,60,24,66,16,248,39,67,16,88,24,67,108,9,32,66,16,248,39,67,0,64,28,67,152,174,35,66,16,248,39,67,240,39,32,67,152,221,37,66,16,248,39,67,33,16,36,67,154,136,39,66,16,248,39,67,16,248,39,67,44,37,33,66,16,248,39,67,0,224,43,67,247,164,25,66,16,248,39,67,240,199,47,67,8,253,21,66,16,248,39,67,33,176,51,67,227,101,0,66,16,248,39,67,16,152,55,67,216,240,17,66,16,248,39,67,0,128,59,67,142,53,10,66,16,248,39,67,240,103,63,67,241,163,9,66,16,248,39,67,33,80,67,67,178,157,236,65,16,248,39,67,16,56,71,67,28,252,6,66,16,248,39,67,0,32,75,67,143,19,4,66,16,248,39,67,240,7,79,67,32,82,253,65,16,248,39,67,33,240,82,67,100,76,197,65,16,248,39,67,16,216,86,67,193,57,181,65,16,248,39,67,0,192,90,67,27,47,175,65,16,248,39,67,240,167,94,67,68,105,209,65,16,248,39,67,33,144,98,67,95,24,198,65,16,248,39,67,16,120,102,67,232,106,181,65,16,248,39,67,0,96,106,67,43,246,140,65,16,248,39,67,240,71,110,67,202,67,129,65,16,248,39,67,33,48,114,67,91,177,107,65,16,248,39,67,16,24,118,67,57,180,100,65,16,248,39,67,0,0,122,67,211,222,81,65,16,248,39,67,84,0,122,64,97,178,131,65,33,16,36,67,21,0,250,64,227,165,140,65,33,16,36,67,52,128,59,65,57,214,141,65,33,16,36,67,0,0,122,65,12,2,137,65,33,16,36,67,26,64,156,65,134,201,138,65,33,16,36,67,0,128,187,65,241,227,143,65,33,16,36,67,26,192,218,65,100,76,149,65,33,16,36,67,0,0,250,65,226,88,150,65,33,16,36,67,13,160,12,66,147,152,150,65,33,16,36,67,0,64,28,66,169,164,151,65,33,16,36,67,13,224,43,66,136,133,154,65,33,16,36,67,0,128,59,66,251,203,148,65,33,16,36,67,13,32,75,66,64,19,144,65,33,16,36,67,0,192,90,66,197,143,140,65,33,16,36,67,13,96,106,66,67,173,140,65,33,16,36,67,0,0,122,66,114,249,138,65,33,16,36,67,7,208,132,66,79,192,141,65,33,16,36,67,0,160,140,66,16,216,143,65,33,16,36,67,7,112,148,66,136,99,146,65,33,16,36,67,0,64,156,66,30,167,151,65,33,16,36,67,7,16,164,66,72,80,163,65,33,16,36,67,0,224,171,66,132,13,164,65,33,16,36,67,7,176,179,66,138,31,166,65,33,16,36,67,0,128,187,66,203,144,167,65,33,16,36,67,7,80,195,66,198,220,168,65,33,16,36,67,66,32,203,66,6,1,166,65,33,16,36,67,33,240,210,66,39,177,171,65,33,16,36,67,0,192,218,66,229,114,182,65,33,16,36,67,223,143,226,66,190,31,194,65,33,16,36,67,66,96,234,66,31,133,198,65,33,16,36,67,33,48,242,66,71,131,210,65,33,16,36,67,0,0,250,66,221,36,227,65,33,16,36,67,240,231,0,67,182,115,240,65,33,16,36,67,33,208,4,67,235,226,251,65,33,16,36,67,16,184,8,67,60,61,253,65,33,16,36,67,0,160,12,67,34,61,20,66,33,16,36,67,240,135,16,67,146,11,23,66,33,16,36,67,33,112,20,67,136,244,27,66,33,16,36,67,16,88,24,67,194,151,28,66,33,16,36,67,0,64,28,67,251,139,18,66,33,16,36,67,240,39,32,67,219,10,37,66,33,16,36,67,33,16,36,67,71,242,40,66,33,16,36,67,16,248,39,67,30,231,35,66,33,16,36,67,0,224,43,67,61,155,7,66,33,16,36,67,240,199,47,67,29,184,8,66,33,16,36,67,33,176,51,67,214,69,4,66,33,16,36,67,16,152,55,67,88,232,12,66,33,16,36,67,0,128,59,67,156,115,12,66,33,16,36,67,240,103,63,67,106,205,10,66,33,16,36,67,33,80,67,67,16,250,240,65,33,16,36,67,16,56,71,67,5,163,10,66,33,16,36,67,0,32,75,67,94,122,6,66,33,16,36,67,240,7,79,67,210,111,240,65,33,16,36,67,33,240,82,67,209,162,198,65,33,16,36,67,16,216,86,67,8,61,184,65,33,16,36,67,0,192,90,67,65,130,212,65,33,16,36,67,240,167,94,67,223,96,206,65,33,16,36,67,33,144,98,67,240,22,190,65,33,16,36,67,16,120,102,67,179,234,178,65,33,16,36,67,0,96,106,67,151,144,129,65,33,16,36,67,240,71,110,67,217,206,109,65,33,16,36,67,33,48,114,67,51,51,95,65,33,16,36,67,16,24,118,67,24,38,99,65,33,16,36,67,0,0,122,67,187,184,84,65,33,16,36,67,84,0,122,64,37,6,133,65,240,39,32,67,21,0,250,64,22,106,139,65,240,39,32,67,52,128,59,65,88,74,144,65,240,39,32,67,0,0,122,65,148,7,145,65,240,39,32,67,26,64,156,65,68,250,148,65,240,39,32,67,0,128,187,65,165,61,146,65,240,39,32,67,26,192,218,65,199,186,148,65,240,39,32,67,0,0,250,65,115,232,150,65,240,39,32,67,13,160,12,66,32,193,153,65,240,39,32,67,0,64,28,66,138,14,151,65,240,39,32,67,13,224,43,66,249,15,152,65,240,39,32,67,0,128,59,66,7,206,154,65,240,39,32,67,13,32,75,66,159,205,142,65,240,39,32,67,0,192,90,66,242,65,148,65,240,39,32,67,13,96,106,66,69,199,145,65,240,39,32,67,0,0,122,66,137,65,144,65,240,39,32,67,7,208,132,66,141,151,148,65,240,39,32,67,0,160,140,66,104,17,147,65,240,39,32,67,7,112,148,66,113,172,144,65,240,39,32,67,0,64,156,66,213,231,158,65,240,39,32,67,7,16,164,66,240,150,167,65,240,39,32,67,0,224,171,66,37,245,164,65,240,39,32,67,7,176,179,66,246,23,164,65,240,39,32,67,0,128,187,66,121,88,163,65,240,39,32,67,7,80,195,66,87,236,158,65,240,39,32,67,66,32,203,66,169,147,161,65,240,39,32,67,33,240,210,66,208,85,176,65,240,39,32,67,0,192,218,66,39,194,187,65,240,39,32,67,223,143,226,66,54,43,197,65,240,39,32,67,66,96,234,66,254,195,209,65,240,39,32,67,33,48,242,66,204,255,224,65,240,39,32,67,0,0,250,66,74,123,238,65,240,39,32,67,240,231,0,67,19,225,253,65,240,39,32,67,33,208,4,67,26,192,1,66,240,39,32,67,16,184,8,67,53,30,5,66,240,39,32,67,0,160,12,67,208,213,21,66,240,39,32,67,240,135,16,67,43,71,27,66,240,39,32,67,33,112,20,67,75,217,31,66,240,39,32,67,16,88,24,67,104,179,38,66,240,39,32,67,0,64,28,67,98,161,22,66,240,39,32,67,240,39,32,67,136,227,37,66,240,39,32,67,33,16,36,67,75,89,39,66,240,39,32,67,16,248,39,67,101,234,34,66,240,39,32,67,0,224,43,67,226,24,14,66,240,39,32,67,240,199,47,67,190,176,8,66,240,39,32,67,33,176,51,67,232,217,7,66,240,39,32,67,16,152,55,67,110,52,5,66,240,39,32,67,0,128,59,67,244,108,22,66,240,39,32,67,240,103,63,67,222,49,17,66,240,39,32,67,33,80,67,67,53,239,3,66,240,39,32,67,16,56,71,67,192,27,9,66,240,39,32,67,0,32,75,67,40,62,6,66,240,39,32,67,240,7,79,67,22,123,215,65,240,39,32,67,33,240,82,67,1,222,194,65,240,39,32,67,16,216,86,67,168,87,204,65,240,39,32,67,0,192,90,67,15,11,208,65,240,39,32,67,240,167,94,67,106,188,192,65,240,39,32,67,33,144,98,67,141,40,183,65,240,39,32,67,16,120,102,67,234,132,137,65,240,39,32,67,0,96,106,67,25,226,112,65,240,39,32,67,240,71,110,67,229,242,99,65,240,39,32,67,33,48,114,67,70,148,92,65,240,39,32,67,16,24,118,67,17,54,104,65,240,39,32,67,0,0,122,67,247,228,101,65,240,39,32,67,84,0,122,64,16,122,135,65,0,64,28,67,21,0,250,64,25,243,145,65,0,64,28,67,52,128,59,65,95,24,147,65,0,64,28,67,0,0,122,65,16,216,144,65,0,64,28,67,26,64,156,65,188,244,149,65,0,64,28,67,0,128,187,65,84,99,151,65,0,64,28,67,26,192,218,65,215,163,147,65,0,64,28,67,0,0,250,65,177,80,149,65,0,64,28,67,13,160,12,66,243,142,151,65,0,64,28,67,0,64,28,66,16,250,151,65,0,64,28,67,13,224,43,66,4,231,150,65,0,64,28,67,0,128,59,66,65,130,149,65,0,64,28,67,13,32,75,66,146,203,150,65,0,64,28,67,0,192,90,66,194,134,155,65,0,64,28,67,13,96,106,66,62,232,149,65,0,64,28,67,0,0,122,66,180,200,139,65,0,64,28,67,7,208,132,66,140,185,148,65,0,64,28,67,0,160,140,66,54,205,149,65,0,64,28,67,7,112,148,66,170,2,156,65,0,64,28,67,0,64,156,66,169,147,158,65,0,64,28,67,7,16,164,66,28,235,158,65,0,64,28,67,0,224,171,66,252,41,159,65,0,64,28,67,7,176,179,66,83,133,155,65,0,64,28,67,0,128,187,66,223,96,150,65,0,64,28,67,7,80,195,66,110,35,151,65,0,64,28,67,66,32,203,66,186,235,164,65,0,64,28,67,33,240,210,66,245,219,183,65,0,64,28,67,0,192,218,66,1,205,201,65,0,64,28,67,223,143,226,66,97,67,214,65,0,64,28,67,66,96,234,66,59,129,222,65,0,64,28,67,33,48,242,66,152,93,237,65,0,64,28,67,0,0,250,66,242,176,251,65,0,64,28,67,240,231,0,67,212,90,3,66,0,64,28,67,33,208,4,67,52,34,7,66,0,64,28,67,16,184,8,67,43,152,9,66,0,64,28,67,0,160,12,67,195,164,12,66,0,64,28,67,240,135,16,67,156,98,32,66,0,64,28,67,33,112,20,67,48,42,36,66,0,64,28,67,16,88,24,67,72,33,40,66,0,64,28,67,0,64,28,67,172,173,40,66,0,64,28,67,240,39,32,67,188,180,39,66,0,64,28,67,33,16,36,67,178,29,45,66,0,64,28,67,16,248,39,67,227,101,42,66,0,64,28,67,0,224,43,67,89,198,18,66,0,64,28,67,240,199,47,67,113,91,11,66,0,64,28,67,33,176,51,67,224,220,10,66,0,64,28,67,16,152,55,67,74,59,8,66,0,64,28,67,0,128,59,67,14,15,7,66,0,64,28,67,240,103,63,67,149,229,4,66,0,64,28,67,33,80,67,67,212,107,0,66,0,64,28,67,16,56,71,67,26,64,245,65,0,64,28,67,0,32,75,67,244,125,6,66,0,64,28,67,240,7,79,67,193,40,224,65,0,64,28,67,33,240,82,67,215,18,244,65,0,64,28,67,16,216,86,67,249,15,235,65,0,64,28,67,0,192,90,67,239,201,218,65,0,64,28,67,240,167,94,67,210,239,206,65,0,64,28,67,33,144,98,67,154,247,192,65,0,64,28,67,16,120,102,67,179,251,143,65,0,64,28,67,0,96,106,67,15,11,129,65,0,64,28,67,240,71,110,67,230,63,109,65,0,64,28,67,33,48,114,67,80,141,81,65,0,64,28,67,16,24,118,67,195,211,85,65,0,64,28,67,0,0,122,67,106,188,89,65,0,64,28,67,84,0,122,64,197,143,141,65,16,88,24,67,21,0,250,64,180,217,152,65,16,88,24,67,52,128,59,65,79,30,157,65,16,88,24,67,0,0,122,65,155,230,158,65,16,88,24,67,26,64,156,65,147,41,153,65,16,88,24,67,0,128,187,65,19,242,155,65,16,88,24,67,26,192,218,65,92,32,155,65,16,88,24,67,0,0,250,65,144,49,149,65,16,88,24,67,13,160,12,66,188,22,147,65,16,88,24,67,0,64,28,66,129,149,145,65,16,88,24,67,13,224,43,66,252,152,147,65,16,88,24,67,0,128,59,66,102,119,142,65,16,88,24,67,13,32,75,66,159,60,148,65,16,88,24,67,0,192,90,66,16,122,158,65,16,88,24,67,13,96,106,66,193,168,154,65,16,88,24,67,0,0,122,66,162,52,145,65,16,88,24,67,7,208,132,66,254,101,142,65,16,88,24,67,0,160,140,66,173,105,143,65,16,88,24,67,7,112,148,66,80,141,148,65,16,88,24,67,0,64,156,66,206,8,156,65,16,88,24,67,7,16,164,66,73,157,160,65,16,88,24,67,0,224,171,66,76,38,156,65,16,88,24,67,7,176,179,66,215,18,162,65,16,88,24,67,0,128,187,66,42,186,153,65,16,88,24,67,7,80,195,66,111,240,160,65,16,88,24,67,66,32,203,66,213,103,175,65,16,88,24,67,33,240,210,66,13,96,191,65,16,88,24,67,0,192,218,66,227,199,206,65,16,88,24,67,223,143,226,66,174,88,223,65,16,88,24,67,66,96,234,66,8,61,234,65,16,88,24,67,33,48,242,66,202,212,241,65,16,88,24,67,0,0,250,66,250,254,253,65,16,88,24,67,240,231,0,67,113,172,4,66,16,88,24,67,33,208,4,67,180,217,9,66,16,88,24,67,16,184,8,67,14,254,15,66,16,88,24,67,0,160,12,67,52,17,18,66,16,88,24,67,240,135,16,67,225,186,15,66,16,88,24,67,33,112,20,67,139,236,36,66,16,88,24,67,16,88,24,67,30,231,42,66,16,88,24,67,0,64,28,67,151,16,46,66,16,88,24,67,240,39,32,67,145,109,49,66,16,88,24,67,33,16,36,67,85,240,48,66,16,88,24,67,16,248,39,67,84,18,33,66,16,88,24,67,0,224,43,67,246,215,16,66,16,88,24,67,240,199,47,67,249,143,17,66,16,88,24,67,33,176,51,67,115,232,12,66,16,88,24,67,16,152,55,67,106,205,10,66,16,88,24,67,0,128,59,67,238,26,11,66,16,88,24,67,240,103,63,67,100,93,8,66,16,88,24,67,33,80,67,67,211,205,0,66,16,88,24,67,16,56,71,67,227,71,245,65,16,88,24,67,0,32,75,67,83,5,230,65,16,88,24,67,240,7,79,67,28,60,4,66,16,88,24,67,33,240,82,67,47,93,254,65,16,88,24,67,16,216,86,67,221,36,239,65,16,88,24,67,0,192,90,67,140,202,220,65,16,88,24,67,240,167,94,67,222,19,209,65,16,88,24,67,33,144,98,67,55,26,157,65,16,88,24,67,16,120,102,67,220,70,149,65,16,88,24,67,0,96,106,67,8,44,139,65,16,88,24,67,240,71,110,67,140,74,121,65,16,88,24,67,33,48,114,67,123,131,86,65,16,88,24,67,16,24,118,67,75,200,76,65,16,88,24,67,0,0,122,67,105,111,73,65,16,88,24,67,42,0,122,64,134,73,147,65,33,112,20,67,21,0,250,64,200,135,150,65,33,112,20,67,52,128,59,65,179,234,165,65,33,112,20,67,0,0,122,65,51,68,174,65,33,112,20,67,26,64,156,65,208,68,165,65,33,112,20,67,0,128,187,65,170,224,158,65,33,112,20,67,26,192,218,65,196,194,160,65,33,112,20,67,0,0,250,65,177,63,150,65,33,112,20,67,13,160,12,66,231,251,144,65,33,112,20,67,0,64,28,66,27,47,142,65,33,112,20,67,13,224,43,66,117,19,144,65,33,112,20,67,0,128,59,66,80,141,141,65,33,112,20,67,13,32,75,66,50,85,137,65,33,112,20,67,0,192,90,66,134,201,146,65,33,112,20,67,13,96,106,66,86,125,148,65,33,112,20,67,0,0,122,66,40,15,145,65,33,112,20,67,7,208,132,66,146,75,139,65,33,112,20,67,0,160,140,66,100,76,138,65,33,112,20,67,7,112,148,66,231,123,141,65,33,112,20,67,0,64,156,66,94,75,149,65,33,112,20,67,7,16,164,66,88,40,157,65,33,112,20,67,0,224,171,66,94,203,155,65,33,112,20,67,7,176,179,66,66,79,162,65,33,112,20,67,0,128,187,66,167,249,161,65,33,112,20,67,7,80,195,66,13,113,169,65,33,112,20,67,66,32,203,66,2,154,185,65,33,112,20,67,33,240,210,66,101,25,199,65,33,112,20,67,0,192,218,66,174,88,212,65,33,112,20,67,223,143,226,66,88,57,229,65,33,112,20,67,66,96,234,66,170,224,241,65,33,112,20,67,33,48,242,66,40,143,253,65,33,112,20,67,0,0,250,66,22,251,4,66,33,112,20,67,240,231,0,67,234,149,9,66,33,112,20,67,33,208,4,67,78,34,13,66,33,112,20,67,16,184,8,67,240,214,18,66,33,112,20,67,0,160,12,67,216,193,20,66,33,112,20,67,240,135,16,67,181,21,18,66,33,112,20,67,33,112,20,67,23,247,18,66,33,112,20,67,16,88,24,67,106,252,47,66,33,112,20,67,0,64,28,67,52,209,51,66,33,112,20,67,240,39,32,67,48,59,51,66,33,112,20,67,33,16,36,67,41,92,52,66,33,112,20,67,16,248,39,67,49,89,44,66,33,112,20,67,0,224,43,67,169,211,40,66,33,112,20,67,240,199,47,67,220,40,34,66,33,112,20,67,33,176,51,67,247,245,15,66,33,112,20,67,16,152,55,67,32,163,9,66,33,112,20,67,0,128,59,67,79,111,12,66,33,112,20,67,240,103,63,67,75,89,9,66,33,112,20,67,33,80,67,67,138,176,14,66,33,112,20,67,16,56,71,67,16,216,11,66,33,112,20,67,0,32,75,67,116,164,9,66,33,112,20,67,240,7,79,67,222,2,0,66,33,112,20,67,33,240,82,67,215,35,251,65,33,112,20,67,16,216,86,67,202,212,234,65,33,112,20,67,0,192,90,67,108,248,220,65,33,112,20,67,240,167,94,67,238,90,173,65,33,112,20,67,33,144,98,67,23,217,162,65,33,112,20,67,16,120,102,67,43,246,156,65,33,112,20,67,0,96,106,67,99,255,140,65,33,112,20,67,240,71,110,67,33,31,132,65,33,112,20,67,33,48,114,67,127,106,110,65,33,112,20,67,16,24,118,67,88,202,76,65,33,112,20,67,0,0,122,67,136,99,68,65,33,112,20,67,42,0,122,64,163,1,143,65,240,135,16,67,21,0,250,64,166,138,154,65,240,135,16,67,52,128,59,65,7,95,167,65,240,135,16,67,0,0,122,65,7,223,174,65,240,135,16,67,26,64,156,65,189,82,170,65,240,135,16,67,0,128,187,65,195,211,159,65,240,135,16,67,26,192,218,65,83,22,157,65,240,135,16,67,0,0,250,65,182,132,155,65,240,135,16,67,13,160,12,66,220,70,149,65,240,135,16,67,0,64,28,66,215,146,137,65,240,135,16,67,13,224,43,66,66,96,134,65,240,135,16,67,0,128,59,66,122,71,131,65,240,135,16,67,13,32,75,66,236,81,132,65,240,135,16,67,0,192,90,66,238,124,134,65,240,135,16,67,13,96,106,66,225,122,138,65,240,135,16,67,0,0,122,66,82,73,140,65,240,135,16,67,7,208,132,66,199,203,134,65,240,135,16,67,0,160,140,66,233,183,137,65,240,135,16,67,7,112,148,66,43,7,133,65,240,135,16,67,0,64,156,66,44,84,142,65,240,135,16,67,7,16,164,66,220,215,148,65,240,135,16,67,0,224,171,66,199,75,150,65,240,135,16,67,7,176,179,66,220,215,163,65,240,135,16,67,0,128,187,66,105,111,168,65,240,135,16,67,7,80,195,66,240,150,167,65,240,135,16,67,66,32,203,66,223,224,184,65,240,135,16,67,33,240,210,66,190,193,201,65,240,135,16,67,0,192,218,66,171,79,216,65,240,135,16,67,223,143,226,66,16,250,235,65,240,135,16,67,66,96,234,66,9,10,248,65,240,135,16,67,33,48,242,66,16,88,4,66,240,135,16,67,0,0,250,66,247,164,10,66,240,135,16,67,240,231,0,67,77,115,15,66,240,135,16,67,33,208,4,67,3,120,19,66,240,135,16,67,16,184,8,67,188,52,22,66,240,135,16,67,0,160,12,67,189,146,22,66,240,135,16,67,240,135,16,67,183,145,23,66,240,135,16,67,33,112,20,67,196,130,20,66,240,135,16,67,16,88,24,67,100,29,32,66,240,135,16,67,0,64,28,67,249,241,51,66,240,135,16,67,240,39,32,67,135,86,52,66,240,135,16,67,33,16,36,67,19,33,51,66,240,135,16,67,16,248,39,67,156,34,42,66,240,135,16,67,0,224,43,67,48,42,39,66,240,135,16,67,240,199,47,67,7,78,38,66,240,135,16,67,33,176,51,67,251,75,37,66,240,135,16,67,16,152,55,67,233,183,30,66,240,135,16,67,0,128,59,67,177,225,29,66,240,135,16,67,240,103,63,67,16,41,26,66,240,135,16,67,33,80,67,67,140,138,21,66,240,135,16,67,16,56,71,67,238,188,13,66,240,135,16,67,0,32,75,67,140,249,8,66,240,135,16,67,240,7,79,67,12,147,254,65,240,135,16,67,33,240,82,67,50,213,244,65,240,135,16,67,16,216,86,67,104,51,215,65,240,135,16,67,0,192,90,67,167,121,178,65,240,135,16,67,240,167,94,67,138,142,171,65,240,135,16,67,33,144,98,67,125,80,165,65,240,135,16,67,16,120,102,67,200,152,162,65,240,135,16,67,0,96,106,67,60,78,144,65,240,135,16,67,240,71,110,67,0,145,124,65,240,135,16,67,33,48,114,67,106,77,101,65,240,135,16,67,16,24,118,67,138,142,71,65,240,135,16,67,0,0,122,67,29,201,72,65,240,135,16,67,42,0,122,64,110,163,148,65,0,160,12,67,21,0,250,64,26,209,157,65,0,160,12,67,52,128,59,65,81,218,166,65,0,160,12,67,0,0,122,65,253,135,173,65,0,160,12,67,26,64,156,65,47,110,167,65,0,160,12,67,0,128,187,65,192,108,160,65,0,160,12,67,26,192,218,65,242,82,153,65,0,160,12,67,0,0,250,65,140,91,150,65,0,160,12,67,13,160,12,66,32,99,146,65,0,160,12,67,0,64,28,66,209,162,138,65,0,160,12,67,13,224,43,66,19,114,132,65,0,160,12,67,0,128,59,66,220,87,129,65,0,160,12,67,13,32,75,66,168,53,128,65,0,160,12,67,0,192,90,66,195,83,129,65,0,160,12,67,13,96,106,66,8,172,131,65,0,160,12,67,0,0,122,66,224,62,136,65,0,160,12,67,7,208,132,66,219,10,141,65,0,160,12,67,0,160,140,66,145,15,134,65,0,160,12,67,7,112,148,66,242,176,135,65,0,160,12,67,0,64,156,66,79,192,138,65,0,160,12,67,7,16,164,66,144,49,142,65,0,160,12,67,0,224,171,66,132,158,152,65,0,160,12,67,7,176,179,66,70,148,160,65,0,160,12,67,0,128,187,66,83,150,172,65,0,160,12,67,7,80,195,66,59,240,171,65,0,160,12,67,66,32,203,66,173,250,193,65,0,160,12,67,33,240,210,66,153,187,207,65,0,160,12,67,0,192,218,66,219,10,223,65,0,160,12,67,223,143,226,66,27,30,237,65,0,160,12,67,66,96,234,66,76,38,0,66,0,160,12,67,33,48,242,66,86,14,8,66,0,160,12,67,0,0,250,66,183,162,12,66,0,160,12,67,240,231,0,67,170,2,17,66,0,160,12,67,33,208,4,67,135,39,22,66,0,160,12,67,16,184,8,67,167,168,24,66,0,160,12,67,0,160,12,67,9,155,23,66,0,160,12,67,240,135,16,67,36,57,28,66,0,160,12,67,33,112,20,67,226,152,24,66,0,160,12,67,16,88,24,67,5,99,30,66,0,160,12,67,0,64,28,67,21,93,33,66,0,160,12,67,240,39,32,67,68,233,29,66,0,160,12,67,33,16,36,67,22,42,47,66,0,160,12,67,16,248,39,67,159,252,42,66,0,160,12,67,0,224,43,67,242,193,37,66,0,160,12,67,240,199,47,67,84,227,36,66,0,160,12,67,33,176,51,67,231,204,35,66,0,160,12,67,16,152,55,67,174,24,33,66,0,160,12,67,0,128,59,67,32,1,34,66,0,160,12,67,240,103,63,67,31,116,31,66,0,160,12,67,33,80,67,67,222,147,23,66,0,160,12,67,16,56,71,67,77,196,14,66,0,160,12,67,0,32,75,67,79,94,4,66,0,160,12,67,240,7,79,67,99,255,245,65,0,160,12,67,33,240,82,67,10,215,194,65,0,160,12,67,16,216,86,67,177,225,188,65,0,160,12,67,0,192,90,67,161,214,185,65,0,160,12,67,240,167,94,67,145,109,174,65,0,160,12,67,33,144,98,67,129,166,168,65,0,160,12,67,16,120,102,67,213,137,163,65,0,160,12,67,0,96,106,67,219,249,154,65,0,160,12,67,240,71,110,67,91,66,135,65,0,160,12,67,33,48,114,67,240,22,123,65,0,160,12,67,16,24,118,67,215,18,96,65,0,160,12,67,0,0,122,67,180,89,76,65,0,160,12,67,42,0,122,64,122,199,157,65,16,184,8,67,21,0,250,64,127,234,162,65,16,184,8,67,52,128,59,65,231,140,161,65,16,184,8,67,0,0,122,65,252,24,160,65,16,184,8,67,26,64,156,65,251,92,167,65,16,184,8,67,0,128,187,65,51,196,161,65,16,184,8,67,26,192,218,65,54,188,154,65,16,184,8,67,0,0,250,65,175,165,145,65,16,184,8,67,13,160,12,66,7,223,140,65,16,184,8,67,0,64,28,66,74,12,137,65,16,184,8,67,13,224,43,66,224,173,134,65,16,184,8,67,0,128,59,66,5,197,130,65,16,184,8,67,13,32,75,66,73,46,119,65,16,184,8,67,0,192,90,66,132,158,124,65,16,184,8,67,13,96,106,66,176,114,131,65,16,184,8,67,0,0,122,66,208,179,130,65,16,184,8,67,7,208,132,66,2,171,139,65,16,184,8,67,0,160,140,66,36,23,140,65,16,184,8,67,7,112,148,66,39,32,141,65,16,184,8,67,0,64,156,66,168,181,136,65,16,184,8,67,7,16,164,66,68,11,138,65,16,184,8,67,0,224,171,66,194,6,149,65,16,184,8,67,7,176,179,66,204,127,157,65,16,184,8,67,0,128,187,66,57,197,168,65,16,184,8,67,7,80,195,66,50,119,172,65,16,184,8,67,66,32,203,66,159,77,199,65,16,184,8,67,33,240,210,66,218,155,220,65,16,184,8,67,0,192,218,66,216,240,229,65,16,184,8,67,223,143,226,66,51,196,248,65,16,184,8,67,66,96,234,66,142,6,7,66,16,184,8,67,33,48,242,66,83,197,10,66,16,184,8,67,0,0,250,66,130,51,12,66,16,184,8,67,240,231,0,67,71,67,16,66,16,184,8,67,33,208,4,67,231,204,20,66,16,184,8,67,16,184,8,67,0,64,26,66,16,184,8,67,0,160,12,67,11,134,27,66,16,184,8,67,240,135,16,67,90,117,29,66,16,184,8,67,33,112,20,67,14,173,27,66,16,184,8,67,16,88,24,67,180,25,30,66,16,184,8,67,0,64,28,67,36,40,30,66,16,184,8,67,240,39,32,67,237,205,30,66,16,184,8,67,33,16,36,67,1,158,25,66,16,184,8,67,16,248,39,67,143,228,22,66,16,184,8,67,0,224,43,67,1,94,23,66,16,184,8,67,240,199,47,67,251,58,36,66,16,184,8,67,33,176,51,67,187,184,34,66,16,184,8,67,16,152,55,67,137,146,34,66,16,184,8,67,0,128,59,67,22,234,36,66,16,184,8,67,240,103,63,67,78,226,32,66,16,184,8,67,33,80,67,67,198,173,23,66,16,184,8,67,16,56,71,67,61,172,247,65,16,184,8,67,0,32,75,67,33,159,225,65,16,184,8,67,240,7,79,67,211,222,201,65,16,184,8,67,33,240,82,67,82,56,193,65,16,184,8,67,16,216,86,67,64,19,189,65,16,184,8,67,0,192,90,67,46,255,180,65,16,184,8,67,240,167,94,67,164,240,170,65,16,184,8,67,33,144,98,67,101,42,168,65,16,184,8,67,16,120,102,67,225,11,162,65,16,184,8,67,0,96,106,67,198,237,146,65,16,184,8,67,240,71,110,67,52,17,134,65,16,184,8,67,33,48,114,67,172,45,130,65,16,184,8,67,16,24,118,67,249,160,107,65,16,184,8,67,0,0,122,67,138,142,89,65,16,184,8,67,42,0,122,64,193,168,159,65,33,208,4,67,0,0,250,64,12,2,169,65,33,208,4,67,52,128,59,65,74,251,167,65,33,208,4,67,0,0,122,65,127,251,169,65,33,208,4,67,26,64,156,65,233,200,172,65,33,208,4,67,0,128,187,65,198,109,160,65,33,208,4,67,26,192,218,65,236,209,148,65,33,208,4,67,0,0,250,65,248,83,145,65,33,208,4,67,13,160,12,66,240,167,137,65,33,208,4,67,0,64,28,66,96,246,138,65,33,208,4,67,13,224,43,66,82,167,130,65,33,208,4,67,0,128,59,66,98,161,119,65,33,208,4,67,13,32,75,66,0,111,108,65,33,208,4,67,0,192,90,66,93,220,108,65,33,208,4,67,13,96,106,66,101,170,123,65,33,208,4,67,0,0,122,66,103,213,129,65,33,208,4,67,7,208,132,66,190,48,137,65,33,208,4,67,0,160,140,66,136,5,140,65,33,208,4,67,7,112,148,66,239,201,135,65,33,208,4,67,0,64,156,66,17,54,131,65,33,208,4,67,7,16,164,66,151,16,134,65,33,208,4,67,0,224,171,66,228,131,145,65,33,208,4,67,7,176,179,66,116,36,160,65,33,208,4,67,0,128,187,66,129,166,164,65,33,208,4,67,7,80,195,66,227,182,180,65,33,208,4,67,66,32,203,66,143,100,205,65,33,208,4,67,33,240,210,66,245,185,224,65,33,208,4,67,0,192,218,66,50,230,232,65,33,208,4,67,223,143,226,66,54,205,251,65,33,208,4,67,66,96,234,66,99,238,4,66,33,208,4,67,33,48,242,66,177,127,9,66,33,208,4,67,0,0,250,66,35,138,11,66,33,208,4,67,240,231,0,67,39,130,17,66,33,208,4,67,33,208,4,67,248,66,21,66,33,208,4,67,16,184,8,67,120,122,26,66,33,208,4,67,0,160,12,67,240,150,28,66,33,208,4,67,240,135,16,67,115,40,30,66,33,208,4,67,33,112,20,67,71,178,27,66,33,208,4,67,16,88,24,67,108,184,30,66,33,208,4,67,0,64,28,67,236,17,31,66,33,208,4,67,240,39,32,67,29,201,29,66,33,208,4,67,33,16,36,67,210,47,25,66,33,208,4,67,16,248,39,67,187,120,21,66,33,208,4,67,0,224,43,67,14,15,18,66,33,208,4,67,240,199,47,67,210,175,15,66,33,208,4,67,33,176,51,67,230,191,14,66,33,208,4,67,16,152,55,67,163,35,16,66,33,208,4,67,0,128,59,67,2,171,16,66,33,208,4,67,240,103,63,67,28,252,10,66,33,208,4,67,33,80,67,67,73,93,2,66,33,208,4,67,16,56,71,67,165,206,246,65,33,208,4,67,0,32,75,67,172,28,223,65,33,208,4,67,240,7,79,67,249,177,200,65,33,208,4,67,33,240,82,67,57,180,189,65,33,208,4,67,16,216,86,67,109,197,187,65,33,208,4,67,0,192,90,67,61,27,178,65,33,208,4,67,240,167,94,67,144,32,169,65,33,208,4,67,33,144,98,67,20,46,162,65,33,208,4,67,16,120,102,67,14,190,155,65,33,208,4,67,0,96,106,67,218,155,147,65,33,208,4,67,240,71,110,67,171,62,144,65,33,208,4,67,33,48,114,67,166,138,140,65,33,208,4,67,16,24,118,67,88,57,131,65,33,208,4,67,0,0,122,67,162,180,107,65,33,208,4,67,42,0,122,64,104,179,160,65,240,231,0,67,42,0,250,64,120,156,168,65,240,231,0,67,52,128,59,65,196,66,171,65,240,231,0,67,0,0,122,65,9,10,181,65,240,231,0,67,26,64,156,65,111,240,176,65,240,231,0,67,0,128,187,65,125,46,163,65,240,231,0,67,26,192,218,65,217,223,149,65,240,231,0,67,0,0,250,65,177,80,143,65,240,231,0,67,13,160,12,66,81,90,138,65,240,231,0,67,0,64,28,66,14,79,132,65,240,231,0,67,13,224,43,66,247,6,123,65,240,231,0,67,0,128,59,66,45,67,106,65,240,231,0,67,13,32,75,66,166,155,101,65,240,231,0,67,0,192,90,66,0,145,98,65,240,231,0,67,13,96,106,66,162,69,104,65,240,231,0,67,0,0,122,66,242,176,113,65,240,231,0,67,7,208,132,66,21,140,128,65,240,231,0,67,0,160,140,66,52,0,133,65,240,231,0,67,7,112,148,66,157,128,127,65,240,231,0,67,0,64,156,66,236,47,128,65,240,231,0,67,7,16,164,66,215,163,129,65,240,231,0,67,0,224,171,66,154,136,150,65,240,231,0,67,7,176,179,66,122,37,157,65,240,231,0,67,0,128,187,66,50,85,162,65,240,231,0,67,7,80,195,66,174,216,185,65,240,231,0,67,66,32,203,66,86,14,207,65,240,231,0,67,33,240,210,66,188,150,220,65,240,231,0,67,0,192,218,66,199,186,231,65,240,231,0,67,223,143,226,66,197,143,244,65,240,231,0,67,66,96,234,66,207,230,254,65,240,231,0,67,33,48,242,66,30,22,2,66,240,231,0,67,0,0,250,66,103,196,8,66,240,231,0,67,240,231,0,67,125,16,20,66,240,231,0,67,33,208,4,67,154,8,26,66,240,231,0,67,16,184,8,67,4,167,28,66,240,231,0,67,0,160,12,67,43,54,28,66,240,231,0,67,240,135,16,67,13,177,27,66,240,231,0,67,33,112,20,67,140,185,25,66,240,231,0,67,16,88,24,67,53,111,28,66,240,231,0,67,0,64,28,67,14,207,30,66,240,231,0,67,240,39,32,67,235,51,29,66,240,231,0,67,33,16,36,67,93,237,24,66,240,231,0,67,16,248,39,67,72,255,18,66,240,231,0,67,0,224,43,67,147,233,15,66,240,231,0,67,240,199,47,67,181,21,15,66,240,231,0,67,33,176,51,67], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+368640);
/* memory initializer */ allocate([177,127,14,66,240,231,0,67,16,152,55,67,87,236,13,66,240,231,0,67,0,128,59,67,216,112,14,66,240,231,0,67,240,103,63,67,59,31,8,66,240,231,0,67,33,80,67,67,63,23,0,66,240,231,0,67,16,56,71,67,255,33,238,65,240,231,0,67,0,32,75,67,165,44,219,65,240,231,0,67,240,7,79,67,72,80,201,65,240,231,0,67,33,240,82,67,100,59,194,65,240,231,0,67,16,216,86,67,80,124,179,65,240,231,0,67,0,192,90,67,5,52,174,65,240,231,0,67,240,167,94,67,212,26,157,65,240,231,0,67,33,144,98,67,113,61,158,65,240,231,0,67,16,120,102,67,122,71,160,65,240,231,0,67,0,96,106,67,42,58,153,65,240,231,0,67,240,71,110,67,109,231,142,65,240,231,0,67,33,48,114,67,150,67,141,65,240,231,0,67,16,24,118,67,166,155,135,65,240,231,0,67,0,0,122,67,106,94,130,65,240,231,0,67,0,0,1,0,2,0,3,0,2,0,1,0,2,0,3,0,4,0,5,0,4,0,3,0,4,0,5,0,6,0,7,0,6,0,5,0,6,0,7,0,8,0,9,0,8,0,7,0,8,0,9,0,10,0,11,0,10,0,9,0,10,0,11,0,12,0,13,0,12,0,11,0,12,0,13,0,14,0,15,0,14,0,13,0,14,0,15,0,16,0,17,0,16,0,15,0,16,0,17,0,18,0,19,0,18,0,17,0,18,0,19,0,20,0,21,0,20,0,19,0,20,0,21,0,22,0,23,0,22,0,21,0,22,0,23,0,24,0,25,0,24,0,23,0,24,0,25,0,26,0,27,0,26,0,25,0,26,0,27,0,28,0,29,0,28,0,27,0,28,0,29,0,30,0,31,0,30,0,29,0,30,0,31,0,32,0,33,0,32,0,31,0,32,0,33,0,34,0,35,0,34,0,33,0,34,0,35,0,36,0,37,0,36,0,35,0,36,0,37,0,38,0,39,0,38,0,37,0,38,0,39,0,40,0,41,0,40,0,39,0,40,0,41,0,42,0,43,0,42,0,41,0,42,0,43,0,44,0,45,0,44,0,43,0,44,0,45,0,46,0,47,0,46,0,45,0,46,0,47,0,48,0,49,0,48,0,47,0,48,0,49,0,50,0,51,0,50,0,49,0,50,0,51,0,52,0,53,0,52,0,51,0,52,0,53,0,54,0,55,0,54,0,53,0,54,0,55,0,56,0,57,0,56,0,55,0,56,0,57,0,58,0,59,0,58,0,57,0,58,0,59,0,60,0,61,0,60,0,59,0,60,0,61,0,62,0,63,0,62,0,61,0,62,0,63,0,64,0,65,0,64,0,63,0,64,0,65,0,66,0,67,0,66,0,65,0,66,0,67,0,68,0,69,0,68,0,67,0,68,0,69,0,70,0,71,0,70,0,69,0,70,0,71,0,72,0,73,0,72,0,71,0,72,0,73,0,74,0,75,0,74,0,73,0,74,0,75,0,76,0,77,0,76,0,75,0,76,0,77,0,78,0,79,0,78,0,77,0,78,0,79,0,80,0,81,0,80,0,79,0,80,0,81,0,82,0,83,0,82,0,81,0,82,0,83,0,84,0,85,0,84,0,83,0,84,0,85,0,86,0,87,0,86,0,85,0,86,0,87,0,88,0,89,0,88,0,87,0,88,0,89,0,90,0,91,0,90,0,89,0,90,0,91,0,92,0,93,0,92,0,91,0,92,0,93,0,94,0,95,0,94,0,93,0,94,0,95,0,96,0,97,0,96,0,95,0,96,0,97,0,98,0,99,0,98,0,97,0,98,0,99,0,100,0,101,0,100,0,99,0,100,0,101,0,102,0,103,0,102,0,101,0,102,0,103,0,104,0,105,0,104,0,103,0,104,0,105,0,106,0,107,0,106,0,105,0,106,0,107,0,108,0,109,0,108,0,107,0,108,0,109,0,110,0,111,0,110,0,109,0,110,0,111,0,112,0,113,0,112,0,111,0,112,0,113,0,114,0,115,0,114,0,113,0,114,0,115,0,116,0,117,0,116,0,115,0,116,0,117,0,118,0,119,0,118,0,117,0,118,0,119,0,120,0,121,0,120,0,119,0,120,0,121,0,122,0,123,0,122,0,121,0,122,0,123,0,124,0,125,0,124,0,123,0,124,0,125,0,126,0,127,0,126,0,125,0,128,0,0,0,129,0,2,0,129,0,0,0,129,0,2,0,130,0,4,0,130,0,2,0,130,0,4,0,131,0,6,0,131,0,4,0,131,0,6,0,132,0,8,0,132,0,6,0,132,0,8,0,133,0,10,0,133,0,8,0,133,0,10,0,134,0,12,0,134,0,10,0,134,0,12,0,135,0,14,0,135,0,12,0,135,0,14,0,136,0,16,0,136,0,14,0,136,0,16,0,137,0,18,0,137,0,16,0,137,0,18,0,138,0,20,0,138,0,18,0,138,0,20,0,139,0,22,0,139,0,20,0,139,0,22,0,140,0,24,0,140,0,22,0,140,0,24,0,141,0,26,0,141,0,24,0,141,0,26,0,142,0,28,0,142,0,26,0,142,0,28,0,143,0,30,0,143,0,28,0,143,0,30,0,144,0,32,0,144,0,30,0,144,0,32,0,145,0,34,0,145,0,32,0,145,0,34,0,146,0,36,0,146,0,34,0,146,0,36,0,147,0,38,0,147,0,36,0,147,0,38,0,148,0,40,0,148,0,38,0,148,0,40,0,149,0,42,0,149,0,40,0,149,0,42,0,150,0,44,0,150,0,42,0,150,0,44,0,151,0,46,0,151,0,44,0,151,0,46,0,152,0,48,0,152,0,46,0,152,0,48,0,153,0,50,0,153,0,48,0,153,0,50,0,154,0,52,0,154,0,50,0,154,0,52,0,155,0,54,0,155,0,52,0,155,0,54,0,156,0,56,0,156,0,54,0,156,0,56,0,157,0,58,0,157,0,56,0,157,0,58,0,158,0,60,0,158,0,58,0,158,0,60,0,159,0,62,0,159,0,60,0,159,0,62,0,160,0,64,0,160,0,62,0,160,0,64,0,161,0,66,0,161,0,64,0,161,0,66,0,162,0,68,0,162,0,66,0,162,0,68,0,163,0,70,0,163,0,68,0,163,0,70,0,164,0,72,0,164,0,70,0,164,0,72,0,165,0,74,0,165,0,72,0,165,0,74,0,166,0,76,0,166,0,74,0,166,0,76,0,167,0,78,0,167,0,76,0,167,0,78,0,168,0,80,0,168,0,78,0,168,0,80,0,169,0,82,0,169,0,80,0,169,0,82,0,170,0,84,0,170,0,82,0,170,0,84,0,171,0,86,0,171,0,84,0,171,0,86,0,172,0,88,0,172,0,86,0,172,0,88,0,173,0,90,0,173,0,88,0,173,0,90,0,174,0,92,0,174,0,90,0,174,0,92,0,175,0,94,0,175,0,92,0,175,0,94,0,176,0,96,0,176,0,94,0,176,0,96,0,177,0,98,0,177,0,96,0,177,0,98,0,178,0,100,0,178,0,98,0,178,0,100,0,179,0,102,0,179,0,100,0,179,0,102,0,180,0,104,0,180,0,102,0,180,0,104,0,181,0,106,0,181,0,104,0,181,0,106,0,182,0,108,0,182,0,106,0,182,0,108,0,183,0,110,0,183,0,108,0,183,0,110,0,184,0,112,0,184,0,110,0,184,0,112,0,185,0,114,0,185,0,112,0,185,0,114,0,186,0,116,0,186,0,114,0,186,0,116,0,187,0,118,0,187,0,116,0,187,0,118,0,188,0,120,0,188,0,118,0,188,0,120,0,189,0,122,0,189,0,120,0,189,0,122,0,190,0,124,0,190,0,122,0,190,0,124,0,191,0,126,0,191,0,124,0,192,0,128,0,193,0,129,0,193,0,128,0,193,0,129,0,194,0,130,0,194,0,129,0,194,0,130,0,195,0,131,0,195,0,130,0,195,0,131,0,196,0,132,0,196,0,131,0,196,0,132,0,197,0,133,0,197,0,132,0,197,0,133,0,198,0,134,0,198,0,133,0,198,0,134,0,199,0,135,0,199,0,134,0,199,0,135,0,200,0,136,0,200,0,135,0,200,0,136,0,201,0,137,0,201,0,136,0,201,0,137,0,202,0,138,0,202,0,137,0,202,0,138,0,203,0,139,0,203,0,138,0,203,0,139,0,204,0,140,0,204,0,139,0,204,0,140,0,205,0,141,0,205,0,140,0,205,0,141,0,206,0,142,0,206,0,141,0,206,0,142,0,207,0,143,0,207,0,142,0,207,0,143,0,208,0,144,0,208,0,143,0,208,0,144,0,209,0,145,0,209,0,144,0,209,0,145,0,210,0,146,0,210,0,145,0,210,0,146,0,211,0,147,0,211,0,146,0,211,0,147,0,212,0,148,0,212,0,147,0,212,0,148,0,213,0,149,0,213,0,148,0,213,0,149,0,214,0,150,0,214,0,149,0,214,0,150,0,215,0,151,0,215,0,150,0,215,0,151,0,216,0,152,0,216,0,151,0,216,0,152,0,217,0,153,0,217,0,152,0,217,0,153,0,218,0,154,0,218,0,153,0,218,0,154,0,219,0,155,0,219,0,154,0,219,0,155,0,220,0,156,0,220,0,155,0,220,0,156,0,221,0,157,0,221,0,156,0,221,0,157,0,222,0,158,0,222,0,157,0,222,0,158,0,223,0,159,0,223,0,158,0,223,0,159,0,224,0,160,0,224,0,159,0,224,0,160,0,225,0,161,0,225,0,160,0,225,0,161,0,226,0,162,0,226,0,161,0,226,0,162,0,227,0,163,0,227,0,162,0,227,0,163,0,228,0,164,0,228,0,163,0,228,0,164,0,229,0,165,0,229,0,164,0,229,0,165,0,230,0,166,0,230,0,165,0,230,0,166,0,231,0,167,0,231,0,166,0,231,0,167,0,232,0,168,0,232,0,167,0,232,0,168,0,233,0,169,0,233,0,168,0,233,0,169,0,234,0,170,0,234,0,169,0,234,0,170,0,235,0,171,0,235,0,170,0,235,0,171,0,236,0,172,0,236,0,171,0,236,0,172,0,237,0,173,0,237,0,172,0,237,0,173,0,238,0,174,0,238,0,173,0,238,0,174,0,239,0,175,0,239,0,174,0,239,0,175,0,240,0,176,0,240,0,175,0,240,0,176,0,241,0,177,0,241,0,176,0,241,0,177,0,242,0,178,0,242,0,177,0,242,0,178,0,243,0,179,0,243,0,178,0,243,0,179,0,244,0,180,0,244,0,179,0,244,0,180,0,245,0,181,0,245,0,180,0,245,0,181,0,246,0,182,0,246,0,181,0,246,0,182,0,247,0,183,0,247,0,182,0,247,0,183,0,248,0,184,0,248,0,183,0,248,0,184,0,249,0,185,0,249,0,184,0,249,0,185,0,250,0,186,0,250,0,185,0,250,0,186,0,251,0,187,0,251,0,186,0,251,0,187,0,252,0,188,0,252,0,187,0,252,0,188,0,253,0,189,0,253,0,188,0,253,0,189,0,254,0,190,0,254,0,189,0,254,0,190,0,255,0,191,0,255,0,190,0,0,1,192,0,1,1,193,0,1,1,192,0,1,1,193,0,2,1,194,0,2,1,193,0,2,1,194,0,3,1,195,0,3,1,194,0,3,1,195,0,4,1,196,0,4,1,195,0,4,1,196,0,5,1,197,0,5,1,196,0,5,1,197,0,6,1,198,0,6,1,197,0,6,1,198,0,7,1,199,0,7,1,198,0,7,1,199,0,8,1,200,0,8,1,199,0,8,1,200,0,9,1,201,0,9,1,200,0,9,1,201,0,10,1,202,0,10,1,201,0,10,1,202,0,11,1,203,0,11,1,202,0,11,1,203,0,12,1,204,0,12,1,203,0,12,1,204,0,13,1,205,0,13,1,204,0,13,1,205,0,14,1,206,0,14,1,205,0,14,1,206,0,15,1,207,0,15,1,206,0,15,1,207,0,16,1,208,0,16,1,207,0,16,1,208,0,17,1,209,0,17,1,208,0,17,1,209,0,18,1,210,0,18,1,209,0,18,1,210,0,19,1,211,0,19,1,210,0,19,1,211,0,20,1,212,0,20,1,211,0,20,1,212,0,21,1,213,0,21,1,212,0,21,1,213,0,22,1,214,0,22,1,213,0,22,1,214,0,23,1,215,0,23,1,214,0,23,1,215,0,24,1,216,0,24,1,215,0,24,1,216,0,25,1,217,0,25,1,216,0,25,1,217,0,26,1,218,0,26,1,217,0,26,1,218,0,27,1,219,0,27,1,218,0,27,1,219,0,28,1,220,0,28,1,219,0,28,1,220,0,29,1,221,0,29,1,220,0,29,1,221,0,30,1,222,0,30,1,221,0,30,1,222,0,31,1,223,0,31,1,222,0,31,1,223,0,32,1,224,0,32,1,223,0,32,1,224,0,33,1,225,0,33,1,224,0,33,1,225,0,34,1,226,0,34,1,225,0,34,1,226,0,35,1,227,0,35,1,226,0,35,1,227,0,36,1,228,0,36,1,227,0,36,1,228,0,37,1,229,0,37,1,228,0,37,1,229,0,38,1,230,0,38,1,229,0,38,1,230,0,39,1,231,0,39,1,230,0,39,1,231,0,40,1,232,0,40,1,231,0,40,1,232,0,41,1,233,0,41,1,232,0,41,1,233,0,42,1,234,0,42,1,233,0,42,1,234,0,43,1,235,0,43,1,234,0,43,1,235,0,44,1,236,0,44,1,235,0,44,1,236,0,45,1,237,0,45,1,236,0,45,1,237,0,46,1,238,0,46,1,237,0,46,1,238,0,47,1,239,0,47,1,238,0,47,1,239,0,48,1,240,0,48,1,239,0,48,1,240,0,49,1,241,0,49,1,240,0,49,1,241,0,50,1,242,0,50,1,241,0,50,1,242,0,51,1,243,0,51,1,242,0,51,1,243,0,52,1,244,0,52,1,243,0,52,1,244,0,53,1,245,0,53,1,244,0,53,1,245,0,54,1,246,0,54,1,245,0,54,1,246,0,55,1,247,0,55,1,246,0,55,1,247,0,56,1,248,0,56,1,247,0,56,1,248,0,57,1,249,0,57,1,248,0,57,1,249,0,58,1,250,0,58,1,249,0,58,1,250,0,59,1,251,0,59,1,250,0,59,1,251,0,60,1,252,0,60,1,251,0,60,1,252,0,61,1,253,0,61,1,252,0,61,1,253,0,62,1,254,0,62,1,253,0,62,1,254,0,63,1,255,0,63,1,254,0,64,1,0,1,65,1,1,1,65,1,0,1,65,1,1,1,66,1,2,1,66,1,1,1,66,1,2,1,67,1,3,1,67,1,2,1,67,1,3,1,68,1,4,1,68,1,3,1,68,1,4,1,69,1,5,1,69,1,4,1,69,1,5,1,70,1,6,1,70,1,5,1,70,1,6,1,71,1,7,1,71,1,6,1,71,1,7,1,72,1,8,1,72,1,7,1,72,1,8,1,73,1,9,1,73,1,8,1,73,1,9,1,74,1,10,1,74,1,9,1,74,1,10,1,75,1,11,1,75,1,10,1,75,1,11,1,76,1,12,1,76,1,11,1,76,1,12,1,77,1,13,1,77,1,12,1,77,1,13,1,78,1,14,1,78,1,13,1,78,1,14,1,79,1,15,1,79,1,14,1,79,1,15,1,80,1,16,1,80,1,15,1,80,1,16,1,81,1,17,1,81,1,16,1,81,1,17,1,82,1,18,1,82,1,17,1,82,1,18,1,83,1,19,1,83,1,18,1,83,1,19,1,84,1,20,1,84,1,19,1,84,1,20,1,85,1,21,1,85,1,20,1,85,1,21,1,86,1,22,1,86,1,21,1,86,1,22,1,87,1,23,1,87,1,22,1,87,1,23,1,88,1,24,1,88,1,23,1,88,1,24,1,89,1,25,1,89,1,24,1,89,1,25,1,90,1,26,1,90,1,25,1,90,1,26,1,91,1,27,1,91,1,26,1,91,1,27,1,92,1,28,1,92,1,27,1,92,1,28,1,93,1,29,1,93,1,28,1,93,1,29,1,94,1,30,1,94,1,29,1,94,1,30,1,95,1,31,1,95,1,30,1,95,1,31,1,96,1,32,1,96,1,31,1,96,1,32,1,97,1,33,1,97,1,32,1,97,1,33,1,98,1,34,1,98,1,33,1,98,1,34,1,99,1,35,1,99,1,34,1,99,1,35,1,100,1,36,1,100,1,35,1,100,1,36,1,101,1,37,1,101,1,36,1,101,1,37,1,102,1,38,1,102,1,37,1,102,1,38,1,103,1,39,1,103,1,38,1,103,1,39,1,104,1,40,1,104,1,39,1,104,1,40,1,105,1,41,1,105,1,40,1,105,1,41,1,106,1,42,1,106,1,41,1,106,1,42,1,107,1,43,1,107,1,42,1,107,1,43,1,108,1,44,1,108,1,43,1,108,1,44,1,109,1,45,1,109,1,44,1,109,1,45,1,110,1,46,1,110,1,45,1,110,1,46,1,111,1,47,1,111,1,46,1,111,1,47,1,112,1,48,1,112,1,47,1,112,1,48,1,113,1,49,1,113,1,48,1,113,1,49,1,114,1,50,1,114,1,49,1,114,1,50,1,115,1,51,1,115,1,50,1,115,1,51,1,116,1,52,1,116,1,51,1,116,1,52,1,117,1,53,1,117,1,52,1,117,1,53,1,118,1,54,1,118,1,53,1,118,1,54,1,119,1,55,1,119,1,54,1,119,1,55,1,120,1,56,1,120,1,55,1,120,1,56,1,121,1,57,1,121,1,56,1,121,1,57,1,122,1,58,1,122,1,57,1,122,1,58,1,123,1,59,1,123,1,58,1,123,1,59,1,124,1,60,1,124,1,59,1,124,1,60,1,125,1,61,1,125,1,60,1,125,1,61,1,126,1,62,1,126,1,61,1,126,1,62,1,127,1,63,1,127,1,62,1,128,1,64,1,129,1,65,1,129,1,64,1,129,1,65,1,130,1,66,1,130,1,65,1,130,1,66,1,131,1,67,1,131,1,66,1,131,1,67,1,132,1,68,1,132,1,67,1,132,1,68,1,133,1,69,1,133,1,68,1,133,1,69,1,134,1,70,1,134,1,69,1,134,1,70,1,135,1,71,1,135,1,70,1,135,1,71,1,136,1,72,1,136,1,71,1,136,1,72,1,137,1,73,1,137,1,72,1,137,1,73,1,138,1,74,1,138,1,73,1,138,1,74,1,139,1,75,1,139,1,74,1,139,1,75,1,140,1,76,1,140,1,75,1,140,1,76,1,141,1,77,1,141,1,76,1,141,1,77,1,142,1,78,1,142,1,77,1,142,1,78,1,143,1,79,1,143,1,78,1,143,1,79,1,144,1,80,1,144,1,79,1,144,1,80,1,145,1,81,1,145,1,80,1,145,1,81,1,146,1,82,1,146,1,81,1,146,1,82,1,147,1,83,1,147,1,82,1,147,1,83,1,148,1,84,1,148,1,83,1,148,1,84,1,149,1,85,1,149,1,84,1,149,1,85,1,150,1,86,1,150,1,85,1,150,1,86,1,151,1,87,1,151,1,86,1,151,1,87,1,152,1,88,1,152,1,87,1,152,1,88,1,153,1,89,1,153,1,88,1,153,1,89,1,154,1,90,1,154,1,89,1,154,1,90,1,155,1,91,1,155,1,90,1,155,1,91,1,156,1,92,1,156,1,91,1,156,1,92,1,157,1,93,1,157,1,92,1,157,1,93,1,158,1,94,1,158,1,93,1,158,1,94,1,159,1,95,1,159,1,94,1,159,1,95,1,160,1,96,1,160,1,95,1,160,1,96,1,161,1,97,1,161,1,96,1,161,1,97,1,162,1,98,1,162,1,97,1,162,1,98,1,163,1,99,1,163,1,98,1,163,1,99,1,164,1,100,1,164,1,99,1,164,1,100,1,165,1,101,1,165,1,100,1,165,1,101,1,166,1,102,1,166,1,101,1,166,1,102,1,167,1,103,1,167,1,102,1,167,1,103,1,168,1,104,1,168,1,103,1,168,1,104,1,169,1,105,1,169,1,104,1,169,1,105,1,170,1,106,1,170,1,105,1,170,1,106,1,171,1,107,1,171,1,106,1,171,1,107,1,172,1,108,1,172,1,107,1,172,1,108,1,173,1,109,1,173,1,108,1,173,1,109,1,174,1,110,1,174,1,109,1,174,1,110,1,175,1,111,1,175,1,110,1,175,1,111,1,176,1,112,1,176,1,111,1,176,1,112,1,177,1,113,1,177,1,112,1,177,1,113,1,178,1,114,1,178,1,113,1,178,1,114,1,179,1,115,1,179,1,114,1,179,1,115,1,180,1,116,1,180,1,115,1,180,1,116,1,181,1,117,1,181,1,116,1,181,1,117,1,182,1,118,1,182,1,117,1,182,1,118,1,183,1,119,1,183,1,118,1,183,1,119,1,184,1,120,1,184,1,119,1,184,1,120,1,185,1,121,1,185,1,120,1,185,1,121,1,186,1,122,1,186,1,121,1,186,1,122,1,187,1,123,1,187,1,122,1,187,1,123,1,188,1,124,1,188,1,123,1,188,1,124,1,189,1,125,1,189,1,124,1,189,1,125,1,190,1,126,1,190,1,125,1,190,1,126,1,191,1,127,1,191,1,126,1,192,1,128,1,193,1,129,1,193,1,128,1,193,1,129,1,194,1,130,1,194,1,129,1,194,1,130,1,195,1,131,1,195,1,130,1,195,1,131,1,196,1,132,1,196,1,131,1,196,1,132,1,197,1,133,1,197,1,132,1,197,1,133,1,198,1,134,1,198,1,133,1,198,1,134,1,199,1,135,1,199,1,134,1,199,1,135,1,200,1,136,1,200,1,135,1,200,1,136,1,201,1,137,1,201,1,136,1,201,1,137,1,202,1,138,1,202,1,137,1,202,1,138,1,203,1,139,1,203,1,138,1,203,1,139,1,204,1,140,1,204,1,139,1,204,1,140,1,205,1,141,1,205,1,140,1,205,1,141,1,206,1,142,1,206,1,141,1,206,1,142,1,207,1,143,1,207,1,142,1,207,1,143,1,208,1,144,1,208,1,143,1,208,1,144,1,209,1,145,1,209,1,144,1,209,1,145,1,210,1,146,1,210,1,145,1,210,1,146,1,211,1,147,1,211,1,146,1,211,1,147,1,212,1,148,1,212,1,147,1,212,1,148,1,213,1,149,1,213,1,148,1,213,1,149,1,214,1,150,1,214,1,149,1,214,1,150,1,215,1,151,1,215,1,150,1,215,1,151,1,216,1,152,1,216,1,151,1,216,1,152,1,217,1,153,1,217,1,152,1,217,1,153,1,218,1,154,1,218,1,153,1,218,1,154,1,219,1,155,1,219,1,154,1,219,1,155,1,220,1,156,1,220,1,155,1,220,1,156,1,221,1,157,1,221,1,156,1,221,1,157,1,222,1,158,1,222,1,157,1,222,1,158,1,223,1,159,1,223,1,158,1,223,1,159,1,224,1,160,1,224,1,159,1,224,1,160,1,225,1,161,1,225,1,160,1,225,1,161,1,226,1,162,1,226,1,161,1,226,1,162,1,227,1,163,1,227,1,162,1,227,1,163,1,228,1,164,1,228,1,163,1,228,1,164,1,229,1,165,1,229,1,164,1,229,1,165,1,230,1,166,1,230,1,165,1,230,1,166,1,231,1,167,1,231,1,166,1,231,1,167,1,232,1,168,1,232,1,167,1,232,1,168,1,233,1,169,1,233,1,168,1,233,1,169,1,234,1,170,1,234,1,169,1,234,1,170,1,235,1,171,1,235,1,170,1,235,1,171,1,236,1,172,1,236,1,171,1,236,1,172,1,237,1,173,1,237,1,172,1,237,1,173,1,238,1,174,1,238,1,173,1,238,1,174,1,239,1,175,1,239,1,174,1,239,1,175,1,240,1,176,1,240,1,175,1,240,1,176,1,241,1,177,1,241,1,176,1,241,1,177,1,242,1,178,1,242,1,177,1,242,1,178,1,243,1,179,1,243,1,178,1,243,1,179,1,244,1,180,1,244,1,179,1,244,1,180,1,245,1,181,1,245,1,180,1,245,1,181,1,246,1,182,1,246,1,181,1,246,1,182,1,247,1,183,1,247,1,182,1,247,1,183,1,248,1,184,1,248,1,183,1,248,1,184,1,249,1,185,1,249,1,184,1,249,1,185,1,250,1,186,1,250,1,185,1,250,1,186,1,251,1,187,1,251,1,186,1,251,1,187,1,252,1,188,1,252,1,187,1,252,1,188,1,253,1,189,1,253,1,188,1,253,1,189,1,254,1,190,1,254,1,189,1,254,1,190,1,255,1,191,1,255,1,190,1,0,2,192,1,1,2,193,1,1,2,192,1,1,2,193,1,2,2,194,1,2,2,193,1,2,2,194,1,3,2,195,1,3,2,194,1,3,2,195,1,4,2,196,1,4,2,195,1,4,2,196,1,5,2,197,1,5,2,196,1,5,2,197,1,6,2,198,1,6,2,197,1,6,2,198,1,7,2,199,1,7,2,198,1,7,2,199,1,8,2,200,1,8,2,199,1,8,2,200,1,9,2,201,1,9,2,200,1,9,2,201,1,10,2,202,1,10,2,201,1,10,2,202,1,11,2,203,1,11,2,202,1,11,2,203,1,12,2,204,1,12,2,203,1,12,2,204,1,13,2,205,1,13,2,204,1,13,2,205,1,14,2,206,1,14,2,205,1,14,2,206,1,15,2,207,1,15,2,206,1,15,2,207,1,16,2,208,1,16,2,207,1,16,2,208,1,17,2,209,1,17,2,208,1,17,2,209,1,18,2,210,1,18,2,209,1,18,2,210,1,19,2,211,1,19,2,210,1,19,2,211,1,20,2,212,1,20,2,211,1,20,2,212,1,21,2,213,1,21,2,212,1,21,2,213,1,22,2,214,1,22,2,213,1,22,2,214,1,23,2,215,1,23,2,214,1,23,2,215,1,24,2,216,1,24,2,215,1,24,2,216,1,25,2,217,1,25,2,216,1,25,2,217,1,26,2,218,1,26,2,217,1,26,2,218,1,27,2,219,1,27,2,218,1,27,2,219,1,28,2,220,1,28,2,219,1,28,2,220,1,29,2,221,1,29,2,220,1,29,2,221,1,30,2,222,1,30,2,221,1,30,2,222,1,31,2,223,1,31,2,222,1,31,2,223,1,32,2,224,1,32,2,223,1,32,2,224,1,33,2,225,1,33,2,224,1,33,2,225,1,34,2,226,1,34,2,225,1,34,2,226,1,35,2,227,1,35,2,226,1,35,2,227,1,36,2,228,1,36,2,227,1,36,2,228,1,37,2,229,1,37,2,228,1,37,2,229,1,38,2,230,1,38,2,229,1,38,2,230,1,39,2,231,1,39,2,230,1,39,2,231,1,40,2,232,1,40,2,231,1,40,2,232,1,41,2,233,1,41,2,232,1,41,2,233,1,42,2,234,1,42,2,233,1,42,2,234,1,43,2,235,1,43,2,234,1,43,2,235,1,44,2,236,1,44,2,235,1,44,2,236,1,45,2,237,1,45,2,236,1,45,2,237,1,46,2,238,1,46,2,237,1,46,2,238,1,47,2,239,1,47,2,238,1,47,2,239,1,48,2,240,1,48,2,239,1,48,2,240,1,49,2,241,1,49,2,240,1,49,2,241,1,50,2,242,1,50,2,241,1,50,2,242,1,51,2,243,1,51,2,242,1,51,2,243,1,52,2,244,1,52,2,243,1,52,2,244,1,53,2,245,1,53,2,244,1,53,2,245,1,54,2,246,1,54,2,245,1,54,2,246,1,55,2,247,1,55,2,246,1,55,2,247,1,56,2,248,1,56,2,247,1,56,2,248,1,57,2,249,1,57,2,248,1,57,2,249,1,58,2,250,1,58,2,249,1,58,2,250,1,59,2,251,1,59,2,250,1,59,2,251,1,60,2,252,1,60,2,251,1,60,2,252,1,61,2,253,1,61,2,252,1,61,2,253,1,62,2,254,1,62,2,253,1,62,2,254,1,63,2,255,1,63,2,254,1,64,2,0,2,65,2,1,2,65,2,0,2,65,2,1,2,66,2,2,2,66,2,1,2,66,2,2,2,67,2,3,2,67,2,2,2,67,2,3,2,68,2,4,2,68,2,3,2,68,2,4,2,69,2,5,2,69,2,4,2,69,2,5,2,70,2,6,2,70,2,5,2,70,2,6,2,71,2,7,2,71,2,6,2,71,2,7,2,72,2,8,2,72,2,7,2,72,2,8,2,73,2,9,2,73,2,8,2,73,2,9,2,74,2,10,2,74,2,9,2,74,2,10,2,75,2,11,2,75,2,10,2,75,2,11,2,76,2,12,2,76,2,11,2,76,2,12,2,77,2,13,2,77,2,12,2,77,2,13,2,78,2,14,2,78,2,13,2,78,2,14,2,79,2,15,2,79,2,14,2,79,2,15,2,80,2,16,2,80,2,15,2,80,2,16,2,81,2,17,2,81,2,16,2,81,2,17,2,82,2,18,2,82,2,17,2,82,2,18,2,83,2,19,2,83,2,18,2,83,2,19,2,84,2,20,2,84,2,19,2,84,2,20,2,85,2,21,2,85,2,20,2,85,2,21,2,86,2,22,2,86,2,21,2,86,2,22,2,87,2,23,2,87,2,22,2,87,2,23,2,88,2,24,2,88,2,23,2,88,2,24,2,89,2,25,2,89,2,24,2,89,2,25,2,90,2,26,2,90,2,25,2,90,2,26,2,91,2,27,2,91,2,26,2,91,2,27,2,92,2,28,2,92,2,27,2,92,2,28,2,93,2,29,2,93,2,28,2,93,2,29,2,94,2,30,2,94,2,29,2,94,2,30,2,95,2,31,2,95,2,30,2,95,2,31,2,96,2,32,2,96,2,31,2,96,2,32,2,97,2,33,2,97,2,32,2,97,2,33,2,98,2,34,2,98,2,33,2,98,2,34,2,99,2,35,2,99,2,34,2,99,2,35,2,100,2,36,2,100,2,35,2,100,2,36,2,101,2,37,2,101,2,36,2,101,2,37,2,102,2,38,2,102,2,37,2,102,2,38,2,103,2,39,2,103,2,38,2,103,2,39,2,104,2,40,2,104,2,39,2,104,2,40,2,105,2,41,2,105,2,40,2,105,2,41,2,106,2,42,2,106,2,41,2,106,2,42,2,107,2,43,2,107,2,42,2,107,2,43,2,108,2,44,2,108,2,43,2,108,2,44,2,109,2,45,2,109,2,44,2,109,2,45,2,110,2,46,2,110,2,45,2,110,2,46,2,111,2,47,2,111,2,46,2,111,2,47,2,112,2,48,2,112,2,47,2,112,2,48,2,113,2,49,2,113,2,48,2,113,2,49,2,114,2,50,2,114,2,49,2,114,2,50,2,115,2,51,2,115,2,50,2,115,2,51,2,116,2,52,2,116,2,51,2,116,2,52,2,117,2,53,2,117,2,52,2,117,2,53,2,118,2,54,2,118,2,53,2,118,2,54,2,119,2,55,2,119,2,54,2,119,2,55,2,120,2,56,2,120,2,55,2,120,2,56,2,121,2,57,2,121,2,56,2,121,2,57,2,122,2,58,2,122,2,57,2,122,2,58,2,123,2,59,2,123,2,58,2,123,2,59,2,124,2,60,2,124,2,59,2,124,2,60,2,125,2,61,2,125,2,60,2,125,2,61,2,126,2,62,2,126,2,61,2,126,2,62,2,127,2,63,2,127,2,62,2,128,2,64,2,129,2,65,2,129,2,64,2,129,2,65,2,130,2,66,2,130,2,65,2,130,2,66,2,131,2,67,2,131,2,66,2,131,2,67,2,132,2,68,2,132,2,67,2,132,2,68,2,133,2,69,2,133,2,68,2,133,2,69,2,134,2,70,2,134,2,69,2,134,2,70,2,135,2,71,2,135,2,70,2,135,2,71,2,136,2,72,2,136,2,71,2,136,2,72,2,137,2,73,2,137,2,72,2,137,2,73,2,138,2,74,2,138,2,73,2,138,2,74,2,139,2,75,2,139,2,74,2,139,2,75,2,140,2,76,2,140,2,75,2,140,2,76,2,141,2,77,2,141,2,76,2,141,2,77,2,142,2,78,2,142,2,77,2,142,2,78,2,143,2,79,2,143,2,78,2,143,2,79,2,144,2,80,2,144,2,79,2,144,2,80,2,145,2,81,2,145,2,80,2,145,2,81,2,146,2,82,2,146,2,81,2,146,2,82,2,147,2,83,2,147,2,82,2,147,2,83,2,148,2,84,2,148,2,83,2,148,2,84,2,149,2,85,2,149,2,84,2,149,2,85,2,150,2,86,2,150,2,85,2,150,2,86,2,151,2,87,2,151,2,86,2,151,2,87,2,152,2,88,2,152,2,87,2,152,2,88,2,153,2,89,2,153,2,88,2,153,2,89,2,154,2,90,2,154,2,89,2,154,2,90,2,155,2,91,2,155,2,90,2,155,2,91,2,156,2,92,2,156,2,91,2,156,2,92,2,157,2,93,2,157,2,92,2,157,2,93,2,158,2,94,2,158,2,93,2,158,2,94,2,159,2,95,2,159,2,94,2,159,2,95,2,160,2,96,2,160,2,95,2,160,2,96,2,161,2,97,2,161,2,96,2,161,2,97,2,162,2,98,2,162,2,97,2,162,2,98,2,163,2,99,2,163,2,98,2,163,2,99,2,164,2,100,2,164,2,99,2,164,2,100,2,165,2,101,2,165,2,100,2,165,2,101,2,166,2,102,2,166,2,101,2,166,2,102,2,167,2,103,2,167,2,102,2,167,2,103,2,168,2,104,2,168,2,103,2,168,2,104,2,169,2,105,2,169,2,104,2,169,2,105,2,170,2,106,2,170,2,105,2,170,2,106,2,171,2,107,2,171,2,106,2,171,2,107,2,172,2,108,2,172,2,107,2,172,2,108,2,173,2,109,2,173,2,108,2,173,2,109,2,174,2,110,2,174,2,109,2,174,2,110,2,175,2,111,2,175,2,110,2,175,2,111,2,176,2,112,2,176,2,111,2,176,2,112,2,177,2,113,2,177,2,112,2,177,2,113,2,178,2,114,2,178,2,113,2,178,2,114,2,179,2,115,2,179,2,114,2,179,2,115,2,180,2,116,2,180,2,115,2,180,2,116,2,181,2,117,2,181,2,116,2,181,2,117,2,182,2,118,2,182,2,117,2,182,2,118,2,183,2,119,2,183,2,118,2,183,2,119,2,184,2,120,2,184,2,119,2,184,2,120,2,185,2,121,2,185,2,120,2,185,2,121,2,186,2,122,2,186,2,121,2,186,2,122,2,187,2,123,2,187,2,122,2,187,2,123,2,188,2,124,2,188,2,123,2,188,2,124,2,189,2,125,2,189,2,124,2,189,2,125,2,190,2,126,2,190,2,125,2,190,2,126,2,191,2,127,2,191,2,126,2,192,2,128,2,193,2,129,2,193,2,128,2,193,2,129,2,194,2,130,2,194,2,129,2,194,2,130,2,195,2,131,2,195,2,130,2,195,2,131,2,196,2,132,2,196,2,131,2,196,2,132,2,197,2,133,2,197,2,132,2,197,2,133,2,198,2,134,2,198,2,133,2,198,2,134,2,199,2,135,2,199,2,134,2,199,2,135,2,200,2,136,2,200,2,135,2,200,2,136,2,201,2,137,2,201,2,136,2,201,2,137,2,202,2,138,2,202,2,137,2,202,2,138,2,203,2,139,2,203,2,138,2,203,2,139,2,204,2,140,2,204,2,139,2,204,2,140,2,205,2,141,2,205,2,140,2,205,2,141,2,206,2,142,2,206,2,141,2,206,2,142,2,207,2,143,2,207,2,142,2,207,2,143,2,208,2,144,2,208,2,143,2,208,2,144,2,209,2,145,2,209,2,144,2,209,2,145,2,210,2,146,2,210,2,145,2,210,2,146,2,211,2,147,2,211,2,146,2,211,2,147,2,212,2,148,2,212,2,147,2,212,2,148,2,213,2,149,2,213,2,148,2,213,2,149,2,214,2,150,2,214,2,149,2,214,2,150,2,215,2,151,2,215,2,150,2,215,2,151,2,216,2,152,2,216,2,151,2,216,2,152,2,217,2,153,2,217,2,152,2,217,2,153,2,218,2,154,2,218,2,153,2,218,2,154,2,219,2,155,2,219,2,154,2,219,2,155,2,220,2,156,2,220,2,155,2,220,2,156,2,221,2,157,2,221,2,156,2,221,2,157,2,222,2,158,2,222,2,157,2,222,2,158,2,223,2,159,2,223,2,158,2,223,2,159,2,224,2,160,2,224,2,159,2,224,2,160,2,225,2,161,2,225,2,160,2,225,2,161,2,226,2,162,2,226,2,161,2,226,2,162,2,227,2,163,2,227,2,162,2,227,2,163,2,228,2,164,2,228,2,163,2,228,2,164,2,229,2,165,2,229,2,164,2,229,2,165,2,230,2,166,2,230,2,165,2,230,2,166,2,231,2,167,2,231,2,166,2,231,2,167,2,232,2,168,2,232,2,167,2,232,2,168,2,233,2,169,2,233,2,168,2,233,2,169,2,234,2,170,2,234,2,169,2,234,2,170,2,235,2,171,2,235,2,170,2,235,2,171,2,236,2,172,2,236,2,171,2,236,2,172,2,237,2,173,2,237,2,172,2,237,2,173,2,238,2,174,2,238,2,173,2,238,2,174,2,239,2,175,2,239,2,174,2,239,2,175,2,240,2,176,2,240,2,175,2,240,2,176,2,241,2,177,2,241,2,176,2,241,2,177,2,242,2,178,2,242,2,177,2,242,2,178,2,243,2,179,2,243,2,178,2,243,2,179,2,244,2,180,2,244,2,179,2,244,2,180,2,245,2,181,2,245,2,180,2,245,2,181,2,246,2,182,2,246,2,181,2,246,2,182,2,247,2,183,2,247,2,182,2,247,2,183,2,248,2,184,2,248,2,183,2,248,2,184,2,249,2,185,2,249,2,184,2,249,2,185,2,250,2,186,2,250,2,185,2,250,2,186,2,251,2,187,2,251,2,186,2,251,2,187,2,252,2,188,2,252,2,187,2,252,2,188,2,253,2,189,2,253,2,188,2,253,2,189,2,254,2,190,2,254,2,189,2,254,2,190,2,255,2,191,2,255,2,190,2,0,3,192,2,1,3,193,2,1,3,192,2,1,3,193,2,2,3,194,2,2,3,193,2,2,3,194,2,3,3,195,2,3,3,194,2,3,3,195,2,4,3,196,2,4,3,195,2,4,3,196,2,5,3,197,2,5,3,196,2,5,3,197,2,6,3,198,2,6,3,197,2,6,3,198,2,7,3,199,2,7,3,198,2,7,3,199,2,8,3,200,2,8,3,199,2,8,3,200,2,9,3,201,2,9,3,200,2,9,3,201,2,10,3,202,2,10,3,201,2,10,3,202,2,11,3,203,2,11,3,202,2,11,3,203,2,12,3,204,2,12,3,203,2,12,3,204,2,13,3,205,2,13,3,204,2,13,3,205,2,14,3,206,2,14,3,205,2,14,3,206,2,15,3,207,2,15,3,206,2,15,3,207,2,16,3,208,2,16,3,207,2,16,3,208,2,17,3,209,2,17,3,208,2,17,3,209,2,18,3,210,2,18,3,209,2,18,3,210,2,19,3,211,2,19,3,210,2,19,3,211,2,20,3,212,2,20,3,211,2,20,3,212,2,21,3,213,2,21,3,212,2,21,3,213,2,22,3,214,2,22,3,213,2,22,3,214,2,23,3,215,2,23,3,214,2,23,3,215,2,24,3,216,2,24,3,215,2,24,3,216,2,25,3,217,2,25,3,216,2,25,3,217,2,26,3,218,2,26,3,217,2,26,3,218,2,27,3,219,2,27,3,218,2,27,3,219,2,28,3,220,2,28,3,219,2,28,3,220,2,29,3,221,2,29,3,220,2,29,3,221,2,30,3,222,2,30,3,221,2,30,3,222,2,31,3,223,2,31,3,222,2,31,3,223,2,32,3,224,2,32,3,223,2,32,3,224,2,33,3,225,2,33,3,224,2,33,3,225,2,34,3,226,2,34,3,225,2,34,3,226,2,35,3,227,2,35,3,226,2,35,3,227,2,36,3,228,2,36,3,227,2,36,3,228,2,37,3,229,2,37,3,228,2,37,3,229,2,38,3,230,2,38,3,229,2,38,3,230,2,39,3,231,2,39,3,230,2,39,3,231,2,40,3,232,2,40,3,231,2,40,3,232,2,41,3,233,2,41,3,232,2,41,3,233,2,42,3,234,2,42,3,233,2,42,3,234,2,43,3,235,2,43,3,234,2,43,3,235,2,44,3,236,2,44,3,235,2,44,3,236,2,45,3,237,2,45,3,236,2,45,3,237,2,46,3,238,2,46,3,237,2,46,3,238,2,47,3,239,2,47,3,238,2,47,3,239,2,48,3,240,2,48,3,239,2,48,3,240,2,49,3,241,2,49,3,240,2,49,3,241,2,50,3,242,2,50,3,241,2,50,3,242,2,51,3,243,2,51,3,242,2,51,3,243,2,52,3,244,2,52,3,243,2,52,3,244,2,53,3,245,2,53,3,244,2,53,3,245,2,54,3,246,2,54,3,245,2,54,3,246,2,55,3,247,2,55,3,246,2,55,3,247,2,56,3,248,2,56,3,247,2,56,3,248,2,57,3,249,2,57,3,248,2,57,3,249,2,58,3,250,2,58,3,249,2,58,3,250,2,59,3,251,2,59,3,250,2,59,3,251,2,60,3,252,2,60,3,251,2,60,3,252,2,61,3,253,2,61,3,252,2,61,3,253,2,62,3,254,2,62,3,253,2,62,3,254,2,63,3,255,2,63,3,254,2,64,3,0,3,65,3,1,3,65,3,0,3,65,3,1,3,66,3,2,3,66,3,1,3,66,3,2,3,67,3,3,3,67,3,2,3,67,3,3,3,68,3,4,3,68,3,3,3,68,3,4,3,69,3,5,3,69,3,4,3,69,3,5,3,70,3,6,3,70,3,5,3,70,3,6,3,71,3,7,3,71,3,6,3,71,3,7,3,72,3,8,3,72,3,7,3,72,3,8,3,73,3,9,3,73,3,8,3,73,3,9,3,74,3,10,3,74,3,9,3,74,3,10,3,75,3,11,3,75,3,10,3,75,3,11,3,76,3,12,3,76,3,11,3,76,3,12,3,77,3,13,3,77,3,12,3,77,3,13,3,78,3,14,3,78,3,13,3,78,3,14,3,79,3,15,3,79,3,14,3,79,3,15,3,80,3,16,3,80,3,15,3,80,3,16,3,81,3,17,3,81,3,16,3,81,3,17,3,82,3,18,3,82,3,17,3,82,3,18,3,83,3,19,3,83,3,18,3,83,3,19,3,84,3,20,3,84,3,19,3,84,3,20,3,85,3,21,3,85,3,20,3,85,3,21,3,86,3,22,3,86,3,21,3,86,3,22,3,87,3,23,3,87,3,22,3,87,3,23,3,88,3,24,3,88,3,23,3,88,3,24,3,89,3,25,3,89,3,24,3,89,3,25,3,90,3,26,3,90,3,25,3,90,3,26,3,91,3,27,3,91,3,26,3,91,3,27,3,92,3,28,3,92,3,27,3,92,3,28,3,93,3,29,3,93,3,28,3,93,3,29,3,94,3,30,3,94,3,29,3,94,3,30,3,95,3,31,3,95,3,30,3,95,3,31,3,96,3,32,3,96,3,31,3,96,3,32,3,97,3,33,3,97,3,32,3,97,3,33,3,98,3,34,3,98,3,33,3,98,3,34,3,99,3,35,3,99,3,34,3,99,3,35,3,100,3,36,3,100,3,35,3,100,3,36,3,101,3,37,3,101,3,36,3,101,3,37,3,102,3,38,3,102,3,37,3,102,3,38,3,103,3,39,3,103,3,38,3,103,3,39,3,104,3,40,3,104,3,39,3,104,3,40,3,105,3,41,3,105,3,40,3,105,3,41,3,106,3,42,3,106,3,41,3,106,3,42,3,107,3,43,3,107,3,42,3,107,3,43,3,108,3,44,3,108,3,43,3,108,3,44,3,109,3,45,3,109,3,44,3,109,3,45,3,110,3,46,3,110,3,45,3,110,3,46,3,111,3,47,3,111,3,46,3,111,3,47,3,112,3,48,3,112,3,47,3,112,3,48,3,113,3,49,3,113,3,48,3,113,3,49,3,114,3,50,3,114,3,49,3,114,3,50,3,115,3,51,3,115,3,50,3,115,3,51,3,116,3,52,3,116,3,51,3,116,3,52,3,117,3,53,3,117,3,52,3,117,3,53,3,118,3,54,3,118,3,53,3,118,3,54,3,119,3,55,3,119,3,54,3,119,3,55,3,120,3,56,3,120,3,55,3,120,3,56,3,121,3,57,3,121,3,56,3,121,3,57,3,122,3,58,3,122,3,57,3,122,3,58,3,123,3,59,3,123,3,58,3,123,3,59,3,124,3,60,3,124,3,59,3,124,3,60,3,125,3,61,3,125,3,60,3,125,3,61,3,126,3,62,3,126,3,61,3,126,3,62,3,127,3,63,3,127,3,62,3,128,3,64,3,129,3,65,3,129,3,64,3,129,3,65,3,130,3,66,3,130,3,65,3,130,3,66,3,131,3,67,3,131,3,66,3,131,3,67,3,132,3,68,3,132,3,67,3,132,3,68,3,133,3,69,3,133,3,68,3,133,3,69,3,134,3,70,3,134,3,69,3,134,3,70,3,135,3,71,3,135,3,70,3,135,3,71,3,136,3,72,3,136,3,71,3,136,3,72,3,137,3,73,3,137,3,72,3,137,3,73,3,138,3,74,3,138,3,73,3,138,3,74,3,139,3,75,3,139,3,74,3,139,3,75,3,140,3,76,3,140,3,75,3,140,3,76,3,141,3,77,3,141,3,76,3,141,3,77,3,142,3,78,3,142,3,77,3,142,3,78,3,143,3,79,3,143,3,78,3,143,3,79,3,144,3,80,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+378880);
/* memory initializer */ allocate([144,3,79,3,144,3,80,3,145,3,81,3,145,3,80,3,145,3,81,3,146,3,82,3,146,3,81,3,146,3,82,3,147,3,83,3,147,3,82,3,147,3,83,3,148,3,84,3,148,3,83,3,148,3,84,3,149,3,85,3,149,3,84,3,149,3,85,3,150,3,86,3,150,3,85,3,150,3,86,3,151,3,87,3,151,3,86,3,151,3,87,3,152,3,88,3,152,3,87,3,152,3,88,3,153,3,89,3,153,3,88,3,153,3,89,3,154,3,90,3,154,3,89,3,154,3,90,3,155,3,91,3,155,3,90,3,155,3,91,3,156,3,92,3,156,3,91,3,156,3,92,3,157,3,93,3,157,3,92,3,157,3,93,3,158,3,94,3,158,3,93,3,158,3,94,3,159,3,95,3,159,3,94,3,159,3,95,3,160,3,96,3,160,3,95,3,160,3,96,3,161,3,97,3,161,3,96,3,161,3,97,3,162,3,98,3,162,3,97,3,162,3,98,3,163,3,99,3,163,3,98,3,163,3,99,3,164,3,100,3,164,3,99,3,164,3,100,3,165,3,101,3,165,3,100,3,165,3,101,3,166,3,102,3,166,3,101,3,166,3,102,3,167,3,103,3,167,3,102,3,167,3,103,3,168,3,104,3,168,3,103,3,168,3,104,3,169,3,105,3,169,3,104,3,169,3,105,3,170,3,106,3,170,3,105,3,170,3,106,3,171,3,107,3,171,3,106,3,171,3,107,3,172,3,108,3,172,3,107,3,172,3,108,3,173,3,109,3,173,3,108,3,173,3,109,3,174,3,110,3,174,3,109,3,174,3,110,3,175,3,111,3,175,3,110,3,175,3,111,3,176,3,112,3,176,3,111,3,176,3,112,3,177,3,113,3,177,3,112,3,177,3,113,3,178,3,114,3,178,3,113,3,178,3,114,3,179,3,115,3,179,3,114,3,179,3,115,3,180,3,116,3,180,3,115,3,180,3,116,3,181,3,117,3,181,3,116,3,181,3,117,3,182,3,118,3,182,3,117,3,182,3,118,3,183,3,119,3,183,3,118,3,183,3,119,3,184,3,120,3,184,3,119,3,184,3,120,3,185,3,121,3,185,3,120,3,185,3,121,3,186,3,122,3,186,3,121,3,186,3,122,3,187,3,123,3,187,3,122,3,187,3,123,3,188,3,124,3,188,3,123,3,188,3,124,3,189,3,125,3,189,3,124,3,189,3,125,3,190,3,126,3,190,3,125,3,190,3,126,3,191,3,127,3,191,3,126,3,192,3,128,3,193,3,129,3,193,3,128,3,193,3,129,3,194,3,130,3,194,3,129,3,194,3,130,3,195,3,131,3,195,3,130,3,195,3,131,3,196,3,132,3,196,3,131,3,196,3,132,3,197,3,133,3,197,3,132,3,197,3,133,3,198,3,134,3,198,3,133,3,198,3,134,3,199,3,135,3,199,3,134,3,199,3,135,3,200,3,136,3,200,3,135,3,200,3,136,3,201,3,137,3,201,3,136,3,201,3,137,3,202,3,138,3,202,3,137,3,202,3,138,3,203,3,139,3,203,3,138,3,203,3,139,3,204,3,140,3,204,3,139,3,204,3,140,3,205,3,141,3,205,3,140,3,205,3,141,3,206,3,142,3,206,3,141,3,206,3,142,3,207,3,143,3,207,3,142,3,207,3,143,3,208,3,144,3,208,3,143,3,208,3,144,3,209,3,145,3,209,3,144,3,209,3,145,3,210,3,146,3,210,3,145,3,210,3,146,3,211,3,147,3,211,3,146,3,211,3,147,3,212,3,148,3,212,3,147,3,212,3,148,3,213,3,149,3,213,3,148,3,213,3,149,3,214,3,150,3,214,3,149,3,214,3,150,3,215,3,151,3,215,3,150,3,215,3,151,3,216,3,152,3,216,3,151,3,216,3,152,3,217,3,153,3,217,3,152,3,217,3,153,3,218,3,154,3,218,3,153,3,218,3,154,3,219,3,155,3,219,3,154,3,219,3,155,3,220,3,156,3,220,3,155,3,220,3,156,3,221,3,157,3,221,3,156,3,221,3,157,3,222,3,158,3,222,3,157,3,222,3,158,3,223,3,159,3,223,3,158,3,223,3,159,3,224,3,160,3,224,3,159,3,224,3,160,3,225,3,161,3,225,3,160,3,225,3,161,3,226,3,162,3,226,3,161,3,226,3,162,3,227,3,163,3,227,3,162,3,227,3,163,3,228,3,164,3,228,3,163,3,228,3,164,3,229,3,165,3,229,3,164,3,229,3,165,3,230,3,166,3,230,3,165,3,230,3,166,3,231,3,167,3,231,3,166,3,231,3,167,3,232,3,168,3,232,3,167,3,232,3,168,3,233,3,169,3,233,3,168,3,233,3,169,3,234,3,170,3,234,3,169,3,234,3,170,3,235,3,171,3,235,3,170,3,235,3,171,3,236,3,172,3,236,3,171,3,236,3,172,3,237,3,173,3,237,3,172,3,237,3,173,3,238,3,174,3,238,3,173,3,238,3,174,3,239,3,175,3,239,3,174,3,239,3,175,3,240,3,176,3,240,3,175,3,240,3,176,3,241,3,177,3,241,3,176,3,241,3,177,3,242,3,178,3,242,3,177,3,242,3,178,3,243,3,179,3,243,3,178,3,243,3,179,3,244,3,180,3,244,3,179,3,244,3,180,3,245,3,181,3,245,3,180,3,245,3,181,3,246,3,182,3,246,3,181,3,246,3,182,3,247,3,183,3,247,3,182,3,247,3,183,3,248,3,184,3,248,3,183,3,248,3,184,3,249,3,185,3,249,3,184,3,249,3,185,3,250,3,186,3,250,3,185,3,250,3,186,3,251,3,187,3,251,3,186,3,251,3,187,3,252,3,188,3,252,3,187,3,252,3,188,3,253,3,189,3,253,3,188,3,253,3,189,3,254,3,190,3,254,3,189,3,254,3,190,3,255,3,191,3,255,3,190,3,0,4,192,3,1,4,193,3,1,4,192,3,1,4,193,3,2,4,194,3,2,4,193,3,2,4,194,3,3,4,195,3,3,4,194,3,3,4,195,3,4,4,196,3,4,4,195,3,4,4,196,3,5,4,197,3,5,4,196,3,5,4,197,3,6,4,198,3,6,4,197,3,6,4,198,3,7,4,199,3,7,4,198,3,7,4,199,3,8,4,200,3,8,4,199,3,8,4,200,3,9,4,201,3,9,4,200,3,9,4,201,3,10,4,202,3,10,4,201,3,10,4,202,3,11,4,203,3,11,4,202,3,11,4,203,3,12,4,204,3,12,4,203,3,12,4,204,3,13,4,205,3,13,4,204,3,13,4,205,3,14,4,206,3,14,4,205,3,14,4,206,3,15,4,207,3,15,4,206,3,15,4,207,3,16,4,208,3,16,4,207,3,16,4,208,3,17,4,209,3,17,4,208,3,17,4,209,3,18,4,210,3,18,4,209,3,18,4,210,3,19,4,211,3,19,4,210,3,19,4,211,3,20,4,212,3,20,4,211,3,20,4,212,3,21,4,213,3,21,4,212,3,21,4,213,3,22,4,214,3,22,4,213,3,22,4,214,3,23,4,215,3,23,4,214,3,23,4,215,3,24,4,216,3,24,4,215,3,24,4,216,3,25,4,217,3,25,4,216,3,25,4,217,3,26,4,218,3,26,4,217,3,26,4,218,3,27,4,219,3,27,4,218,3,27,4,219,3,28,4,220,3,28,4,219,3,28,4,220,3,29,4,221,3,29,4,220,3,29,4,221,3,30,4,222,3,30,4,221,3,30,4,222,3,31,4,223,3,31,4,222,3,31,4,223,3,32,4,224,3,32,4,223,3,32,4,224,3,33,4,225,3,33,4,224,3,33,4,225,3,34,4,226,3,34,4,225,3,34,4,226,3,35,4,227,3,35,4,226,3,35,4,227,3,36,4,228,3,36,4,227,3,36,4,228,3,37,4,229,3,37,4,228,3,37,4,229,3,38,4,230,3,38,4,229,3,38,4,230,3,39,4,231,3,39,4,230,3,39,4,231,3,40,4,232,3,40,4,231,3,40,4,232,3,41,4,233,3,41,4,232,3,41,4,233,3,42,4,234,3,42,4,233,3,42,4,234,3,43,4,235,3,43,4,234,3,43,4,235,3,44,4,236,3,44,4,235,3,44,4,236,3,45,4,237,3,45,4,236,3,45,4,237,3,46,4,238,3,46,4,237,3,46,4,238,3,47,4,239,3,47,4,238,3,47,4,239,3,48,4,240,3,48,4,239,3,48,4,240,3,49,4,241,3,49,4,240,3,49,4,241,3,50,4,242,3,50,4,241,3,50,4,242,3,51,4,243,3,51,4,242,3,51,4,243,3,52,4,244,3,52,4,243,3,52,4,244,3,53,4,245,3,53,4,244,3,53,4,245,3,54,4,246,3,54,4,245,3,54,4,246,3,55,4,247,3,55,4,246,3,55,4,247,3,56,4,248,3,56,4,247,3,56,4,248,3,57,4,249,3,57,4,248,3,57,4,249,3,58,4,250,3,58,4,249,3,58,4,250,3,59,4,251,3,59,4,250,3,59,4,251,3,60,4,252,3,60,4,251,3,60,4,252,3,61,4,253,3,61,4,252,3,61,4,253,3,62,4,254,3,62,4,253,3,62,4,254,3,63,4,255,3,63,4,254,3,64,4,0,4,65,4,1,4,65,4,0,4,65,4,1,4,66,4,2,4,66,4,1,4,66,4,2,4,67,4,3,4,67,4,2,4,67,4,3,4,68,4,4,4,68,4,3,4,68,4,4,4,69,4,5,4,69,4,4,4,69,4,5,4,70,4,6,4,70,4,5,4,70,4,6,4,71,4,7,4,71,4,6,4,71,4,7,4,72,4,8,4,72,4,7,4,72,4,8,4,73,4,9,4,73,4,8,4,73,4,9,4,74,4,10,4,74,4,9,4,74,4,10,4,75,4,11,4,75,4,10,4,75,4,11,4,76,4,12,4,76,4,11,4,76,4,12,4,77,4,13,4,77,4,12,4,77,4,13,4,78,4,14,4,78,4,13,4,78,4,14,4,79,4,15,4,79,4,14,4,79,4,15,4,80,4,16,4,80,4,15,4,80,4,16,4,81,4,17,4,81,4,16,4,81,4,17,4,82,4,18,4,82,4,17,4,82,4,18,4,83,4,19,4,83,4,18,4,83,4,19,4,84,4,20,4,84,4,19,4,84,4,20,4,85,4,21,4,85,4,20,4,85,4,21,4,86,4,22,4,86,4,21,4,86,4,22,4,87,4,23,4,87,4,22,4,87,4,23,4,88,4,24,4,88,4,23,4,88,4,24,4,89,4,25,4,89,4,24,4,89,4,25,4,90,4,26,4,90,4,25,4,90,4,26,4,91,4,27,4,91,4,26,4,91,4,27,4,92,4,28,4,92,4,27,4,92,4,28,4,93,4,29,4,93,4,28,4,93,4,29,4,94,4,30,4,94,4,29,4,94,4,30,4,95,4,31,4,95,4,30,4,95,4,31,4,96,4,32,4,96,4,31,4,96,4,32,4,97,4,33,4,97,4,32,4,97,4,33,4,98,4,34,4,98,4,33,4,98,4,34,4,99,4,35,4,99,4,34,4,99,4,35,4,100,4,36,4,100,4,35,4,100,4,36,4,101,4,37,4,101,4,36,4,101,4,37,4,102,4,38,4,102,4,37,4,102,4,38,4,103,4,39,4,103,4,38,4,103,4,39,4,104,4,40,4,104,4,39,4,104,4,40,4,105,4,41,4,105,4,40,4,105,4,41,4,106,4,42,4,106,4,41,4,106,4,42,4,107,4,43,4,107,4,42,4,107,4,43,4,108,4,44,4,108,4,43,4,108,4,44,4,109,4,45,4,109,4,44,4,109,4,45,4,110,4,46,4,110,4,45,4,110,4,46,4,111,4,47,4,111,4,46,4,111,4,47,4,112,4,48,4,112,4,47,4,112,4,48,4,113,4,49,4,113,4,48,4,113,4,49,4,114,4,50,4,114,4,49,4,114,4,50,4,115,4,51,4,115,4,50,4,115,4,51,4,116,4,52,4,116,4,51,4,116,4,52,4,117,4,53,4,117,4,52,4,117,4,53,4,118,4,54,4,118,4,53,4,118,4,54,4,119,4,55,4,119,4,54,4,119,4,55,4,120,4,56,4,120,4,55,4,120,4,56,4,121,4,57,4,121,4,56,4,121,4,57,4,122,4,58,4,122,4,57,4,122,4,58,4,123,4,59,4,123,4,58,4,123,4,59,4,124,4,60,4,124,4,59,4,124,4,60,4,125,4,61,4,125,4,60,4,125,4,61,4,126,4,62,4,126,4,61,4,126,4,62,4,127,4,63,4,127,4,62,4,128,4,64,4,129,4,65,4,129,4,64,4,129,4,65,4,130,4,66,4,130,4,65,4,130,4,66,4,131,4,67,4,131,4,66,4,131,4,67,4,132,4,68,4,132,4,67,4,132,4,68,4,133,4,69,4,133,4,68,4,133,4,69,4,134,4,70,4,134,4,69,4,134,4,70,4,135,4,71,4,135,4,70,4,135,4,71,4,136,4,72,4,136,4,71,4,136,4,72,4,137,4,73,4,137,4,72,4,137,4,73,4,138,4,74,4,138,4,73,4,138,4,74,4,139,4,75,4,139,4,74,4,139,4,75,4,140,4,76,4,140,4,75,4,140,4,76,4,141,4,77,4,141,4,76,4,141,4,77,4,142,4,78,4,142,4,77,4,142,4,78,4,143,4,79,4,143,4,78,4,143,4,79,4,144,4,80,4,144,4,79,4,144,4,80,4,145,4,81,4,145,4,80,4,145,4,81,4,146,4,82,4,146,4,81,4,146,4,82,4,147,4,83,4,147,4,82,4,147,4,83,4,148,4,84,4,148,4,83,4,148,4,84,4,149,4,85,4,149,4,84,4,149,4,85,4,150,4,86,4,150,4,85,4,150,4,86,4,151,4,87,4,151,4,86,4,151,4,87,4,152,4,88,4,152,4,87,4,152,4,88,4,153,4,89,4,153,4,88,4,153,4,89,4,154,4,90,4,154,4,89,4,154,4,90,4,155,4,91,4,155,4,90,4,155,4,91,4,156,4,92,4,156,4,91,4,156,4,92,4,157,4,93,4,157,4,92,4,157,4,93,4,158,4,94,4,158,4,93,4,158,4,94,4,159,4,95,4,159,4,94,4,159,4,95,4,160,4,96,4,160,4,95,4,160,4,96,4,161,4,97,4,161,4,96,4,161,4,97,4,162,4,98,4,162,4,97,4,162,4,98,4,163,4,99,4,163,4,98,4,163,4,99,4,164,4,100,4,164,4,99,4,164,4,100,4,165,4,101,4,165,4,100,4,165,4,101,4,166,4,102,4,166,4,101,4,166,4,102,4,167,4,103,4,167,4,102,4,167,4,103,4,168,4,104,4,168,4,103,4,168,4,104,4,169,4,105,4,169,4,104,4,169,4,105,4,170,4,106,4,170,4,105,4,170,4,106,4,171,4,107,4,171,4,106,4,171,4,107,4,172,4,108,4,172,4,107,4,172,4,108,4,173,4,109,4,173,4,108,4,173,4,109,4,174,4,110,4,174,4,109,4,174,4,110,4,175,4,111,4,175,4,110,4,175,4,111,4,176,4,112,4,176,4,111,4,176,4,112,4,177,4,113,4,177,4,112,4,177,4,113,4,178,4,114,4,178,4,113,4,178,4,114,4,179,4,115,4,179,4,114,4,179,4,115,4,180,4,116,4,180,4,115,4,180,4,116,4,181,4,117,4,181,4,116,4,181,4,117,4,182,4,118,4,182,4,117,4,182,4,118,4,183,4,119,4,183,4,118,4,183,4,119,4,184,4,120,4,184,4,119,4,184,4,120,4,185,4,121,4,185,4,120,4,185,4,121,4,186,4,122,4,186,4,121,4,186,4,122,4,187,4,123,4,187,4,122,4,187,4,123,4,188,4,124,4,188,4,123,4,188,4,124,4,189,4,125,4,189,4,124,4,189,4,125,4,190,4,126,4,190,4,125,4,190,4,126,4,191,4,127,4,191,4,126,4,192,4,128,4,193,4,129,4,193,4,128,4,193,4,129,4,194,4,130,4,194,4,129,4,194,4,130,4,195,4,131,4,195,4,130,4,195,4,131,4,196,4,132,4,196,4,131,4,196,4,132,4,197,4,133,4,197,4,132,4,197,4,133,4,198,4,134,4,198,4,133,4,198,4,134,4,199,4,135,4,199,4,134,4,199,4,135,4,200,4,136,4,200,4,135,4,200,4,136,4,201,4,137,4,201,4,136,4,201,4,137,4,202,4,138,4,202,4,137,4,202,4,138,4,203,4,139,4,203,4,138,4,203,4,139,4,204,4,140,4,204,4,139,4,204,4,140,4,205,4,141,4,205,4,140,4,205,4,141,4,206,4,142,4,206,4,141,4,206,4,142,4,207,4,143,4,207,4,142,4,207,4,143,4,208,4,144,4,208,4,143,4,208,4,144,4,209,4,145,4,209,4,144,4,209,4,145,4,210,4,146,4,210,4,145,4,210,4,146,4,211,4,147,4,211,4,146,4,211,4,147,4,212,4,148,4,212,4,147,4,212,4,148,4,213,4,149,4,213,4,148,4,213,4,149,4,214,4,150,4,214,4,149,4,214,4,150,4,215,4,151,4,215,4,150,4,215,4,151,4,216,4,152,4,216,4,151,4,216,4,152,4,217,4,153,4,217,4,152,4,217,4,153,4,218,4,154,4,218,4,153,4,218,4,154,4,219,4,155,4,219,4,154,4,219,4,155,4,220,4,156,4,220,4,155,4,220,4,156,4,221,4,157,4,221,4,156,4,221,4,157,4,222,4,158,4,222,4,157,4,222,4,158,4,223,4,159,4,223,4,158,4,223,4,159,4,224,4,160,4,224,4,159,4,224,4,160,4,225,4,161,4,225,4,160,4,225,4,161,4,226,4,162,4,226,4,161,4,226,4,162,4,227,4,163,4,227,4,162,4,227,4,163,4,228,4,164,4,228,4,163,4,228,4,164,4,229,4,165,4,229,4,164,4,229,4,165,4,230,4,166,4,230,4,165,4,230,4,166,4,231,4,167,4,231,4,166,4,231,4,167,4,232,4,168,4,232,4,167,4,232,4,168,4,233,4,169,4,233,4,168,4,233,4,169,4,234,4,170,4,234,4,169,4,234,4,170,4,235,4,171,4,235,4,170,4,235,4,171,4,236,4,172,4,236,4,171,4,236,4,172,4,237,4,173,4,237,4,172,4,237,4,173,4,238,4,174,4,238,4,173,4,238,4,174,4,239,4,175,4,239,4,174,4,239,4,175,4,240,4,176,4,240,4,175,4,240,4,176,4,241,4,177,4,241,4,176,4,241,4,177,4,242,4,178,4,242,4,177,4,242,4,178,4,243,4,179,4,243,4,178,4,243,4,179,4,244,4,180,4,244,4,179,4,244,4,180,4,245,4,181,4,245,4,180,4,245,4,181,4,246,4,182,4,246,4,181,4,246,4,182,4,247,4,183,4,247,4,182,4,247,4,183,4,248,4,184,4,248,4,183,4,248,4,184,4,249,4,185,4,249,4,184,4,249,4,185,4,250,4,186,4,250,4,185,4,250,4,186,4,251,4,187,4,251,4,186,4,251,4,187,4,252,4,188,4,252,4,187,4,252,4,188,4,253,4,189,4,253,4,188,4,253,4,189,4,254,4,190,4,254,4,189,4,254,4,190,4,255,4,191,4,255,4,190,4,0,5,192,4,1,5,193,4,1,5,192,4,1,5,193,4,2,5,194,4,2,5,193,4,2,5,194,4,3,5,195,4,3,5,194,4,3,5,195,4,4,5,196,4,4,5,195,4,4,5,196,4,5,5,197,4,5,5,196,4,5,5,197,4,6,5,198,4,6,5,197,4,6,5,198,4,7,5,199,4,7,5,198,4,7,5,199,4,8,5,200,4,8,5,199,4,8,5,200,4,9,5,201,4,9,5,200,4,9,5,201,4,10,5,202,4,10,5,201,4,10,5,202,4,11,5,203,4,11,5,202,4,11,5,203,4,12,5,204,4,12,5,203,4,12,5,204,4,13,5,205,4,13,5,204,4,13,5,205,4,14,5,206,4,14,5,205,4,14,5,206,4,15,5,207,4,15,5,206,4,15,5,207,4,16,5,208,4,16,5,207,4,16,5,208,4,17,5,209,4,17,5,208,4,17,5,209,4,18,5,210,4,18,5,209,4,18,5,210,4,19,5,211,4,19,5,210,4,19,5,211,4,20,5,212,4,20,5,211,4,20,5,212,4,21,5,213,4,21,5,212,4,21,5,213,4,22,5,214,4,22,5,213,4,22,5,214,4,23,5,215,4,23,5,214,4,23,5,215,4,24,5,216,4,24,5,215,4,24,5,216,4,25,5,217,4,25,5,216,4,25,5,217,4,26,5,218,4,26,5,217,4,26,5,218,4,27,5,219,4,27,5,218,4,27,5,219,4,28,5,220,4,28,5,219,4,28,5,220,4,29,5,221,4,29,5,220,4,29,5,221,4,30,5,222,4,30,5,221,4,30,5,222,4,31,5,223,4,31,5,222,4,31,5,223,4,32,5,224,4,32,5,223,4,32,5,224,4,33,5,225,4,33,5,224,4,33,5,225,4,34,5,226,4,34,5,225,4,34,5,226,4,35,5,227,4,35,5,226,4,35,5,227,4,36,5,228,4,36,5,227,4,36,5,228,4,37,5,229,4,37,5,228,4,37,5,229,4,38,5,230,4,38,5,229,4,38,5,230,4,39,5,231,4,39,5,230,4,39,5,231,4,40,5,232,4,40,5,231,4,40,5,232,4,41,5,233,4,41,5,232,4,41,5,233,4,42,5,234,4,42,5,233,4,42,5,234,4,43,5,235,4,43,5,234,4,43,5,235,4,44,5,236,4,44,5,235,4,44,5,236,4,45,5,237,4,45,5,236,4,45,5,237,4,46,5,238,4,46,5,237,4,46,5,238,4,47,5,239,4,47,5,238,4,47,5,239,4,48,5,240,4,48,5,239,4,48,5,240,4,49,5,241,4,49,5,240,4,49,5,241,4,50,5,242,4,50,5,241,4,50,5,242,4,51,5,243,4,51,5,242,4,51,5,243,4,52,5,244,4,52,5,243,4,52,5,244,4,53,5,245,4,53,5,244,4,53,5,245,4,54,5,246,4,54,5,245,4,54,5,246,4,55,5,247,4,55,5,246,4,55,5,247,4,56,5,248,4,56,5,247,4,56,5,248,4,57,5,249,4,57,5,248,4,57,5,249,4,58,5,250,4,58,5,249,4,58,5,250,4,59,5,251,4,59,5,250,4,59,5,251,4,60,5,252,4,60,5,251,4,60,5,252,4,61,5,253,4,61,5,252,4,61,5,253,4,62,5,254,4,62,5,253,4,62,5,254,4,63,5,255,4,63,5,254,4,64,5,0,5,65,5,1,5,65,5,0,5,65,5,1,5,66,5,2,5,66,5,1,5,66,5,2,5,67,5,3,5,67,5,2,5,67,5,3,5,68,5,4,5,68,5,3,5,68,5,4,5,69,5,5,5,69,5,4,5,69,5,5,5,70,5,6,5,70,5,5,5,70,5,6,5,71,5,7,5,71,5,6,5,71,5,7,5,72,5,8,5,72,5,7,5,72,5,8,5,73,5,9,5,73,5,8,5,73,5,9,5,74,5,10,5,74,5,9,5,74,5,10,5,75,5,11,5,75,5,10,5,75,5,11,5,76,5,12,5,76,5,11,5,76,5,12,5,77,5,13,5,77,5,12,5,77,5,13,5,78,5,14,5,78,5,13,5,78,5,14,5,79,5,15,5,79,5,14,5,79,5,15,5,80,5,16,5,80,5,15,5,80,5,16,5,81,5,17,5,81,5,16,5,81,5,17,5,82,5,18,5,82,5,17,5,82,5,18,5,83,5,19,5,83,5,18,5,83,5,19,5,84,5,20,5,84,5,19,5,84,5,20,5,85,5,21,5,85,5,20,5,85,5,21,5,86,5,22,5,86,5,21,5,86,5,22,5,87,5,23,5,87,5,22,5,87,5,23,5,88,5,24,5,88,5,23,5,88,5,24,5,89,5,25,5,89,5,24,5,89,5,25,5,90,5,26,5,90,5,25,5,90,5,26,5,91,5,27,5,91,5,26,5,91,5,27,5,92,5,28,5,92,5,27,5,92,5,28,5,93,5,29,5,93,5,28,5,93,5,29,5,94,5,30,5,94,5,29,5,94,5,30,5,95,5,31,5,95,5,30,5,95,5,31,5,96,5,32,5,96,5,31,5,96,5,32,5,97,5,33,5,97,5,32,5,97,5,33,5,98,5,34,5,98,5,33,5,98,5,34,5,99,5,35,5,99,5,34,5,99,5,35,5,100,5,36,5,100,5,35,5,100,5,36,5,101,5,37,5,101,5,36,5,101,5,37,5,102,5,38,5,102,5,37,5,102,5,38,5,103,5,39,5,103,5,38,5,103,5,39,5,104,5,40,5,104,5,39,5,104,5,40,5,105,5,41,5,105,5,40,5,105,5,41,5,106,5,42,5,106,5,41,5,106,5,42,5,107,5,43,5,107,5,42,5,107,5,43,5,108,5,44,5,108,5,43,5,108,5,44,5,109,5,45,5,109,5,44,5,109,5,45,5,110,5,46,5,110,5,45,5,110,5,46,5,111,5,47,5,111,5,46,5,111,5,47,5,112,5,48,5,112,5,47,5,112,5,48,5,113,5,49,5,113,5,48,5,113,5,49,5,114,5,50,5,114,5,49,5,114,5,50,5,115,5,51,5,115,5,50,5,115,5,51,5,116,5,52,5,116,5,51,5,116,5,52,5,117,5,53,5,117,5,52,5,117,5,53,5,118,5,54,5,118,5,53,5,118,5,54,5,119,5,55,5,119,5,54,5,119,5,55,5,120,5,56,5,120,5,55,5,120,5,56,5,121,5,57,5,121,5,56,5,121,5,57,5,122,5,58,5,122,5,57,5,122,5,58,5,123,5,59,5,123,5,58,5,123,5,59,5,124,5,60,5,124,5,59,5,124,5,60,5,125,5,61,5,125,5,60,5,125,5,61,5,126,5,62,5,126,5,61,5,126,5,62,5,127,5,63,5,127,5,62,5,128,5,64,5,129,5,65,5,129,5,64,5,129,5,65,5,130,5,66,5,130,5,65,5,130,5,66,5,131,5,67,5,131,5,66,5,131,5,67,5,132,5,68,5,132,5,67,5,132,5,68,5,133,5,69,5,133,5,68,5,133,5,69,5,134,5,70,5,134,5,69,5,134,5,70,5,135,5,71,5,135,5,70,5,135,5,71,5,136,5,72,5,136,5,71,5,136,5,72,5,137,5,73,5,137,5,72,5,137,5,73,5,138,5,74,5,138,5,73,5,138,5,74,5,139,5,75,5,139,5,74,5,139,5,75,5,140,5,76,5,140,5,75,5,140,5,76,5,141,5,77,5,141,5,76,5,141,5,77,5,142,5,78,5,142,5,77,5,142,5,78,5,143,5,79,5,143,5,78,5,143,5,79,5,144,5,80,5,144,5,79,5,144,5,80,5,145,5,81,5,145,5,80,5,145,5,81,5,146,5,82,5,146,5,81,5,146,5,82,5,147,5,83,5,147,5,82,5,147,5,83,5,148,5,84,5,148,5,83,5,148,5,84,5,149,5,85,5,149,5,84,5,149,5,85,5,150,5,86,5,150,5,85,5,150,5,86,5,151,5,87,5,151,5,86,5,151,5,87,5,152,5,88,5,152,5,87,5,152,5,88,5,153,5,89,5,153,5,88,5,153,5,89,5,154,5,90,5,154,5,89,5,154,5,90,5,155,5,91,5,155,5,90,5,155,5,91,5,156,5,92,5,156,5,91,5,156,5,92,5,157,5,93,5,157,5,92,5,157,5,93,5,158,5,94,5,158,5,93,5,158,5,94,5,159,5,95,5,159,5,94,5,159,5,95,5,160,5,96,5,160,5,95,5,160,5,96,5,161,5,97,5,161,5,96,5,161,5,97,5,162,5,98,5,162,5,97,5,162,5,98,5,163,5,99,5,163,5,98,5,163,5,99,5,164,5,100,5,164,5,99,5,164,5,100,5,165,5,101,5,165,5,100,5,165,5,101,5,166,5,102,5,166,5,101,5,166,5,102,5,167,5,103,5,167,5,102,5,167,5,103,5,168,5,104,5,168,5,103,5,168,5,104,5,169,5,105,5,169,5,104,5,169,5,105,5,170,5,106,5,170,5,105,5,170,5,106,5,171,5,107,5,171,5,106,5,171,5,107,5,172,5,108,5,172,5,107,5,172,5,108,5,173,5,109,5,173,5,108,5,173,5,109,5,174,5,110,5,174,5,109,5,174,5,110,5,175,5,111,5,175,5,110,5,175,5,111,5,176,5,112,5,176,5,111,5,176,5,112,5,177,5,113,5,177,5,112,5,177,5,113,5,178,5,114,5,178,5,113,5,178,5,114,5,179,5,115,5,179,5,114,5,179,5,115,5,180,5,116,5,180,5,115,5,180,5,116,5,181,5,117,5,181,5,116,5,181,5,117,5,182,5,118,5,182,5,117,5,182,5,118,5,183,5,119,5,183,5,118,5,183,5,119,5,184,5,120,5,184,5,119,5,184,5,120,5,185,5,121,5,185,5,120,5,185,5,121,5,186,5,122,5,186,5,121,5,186,5,122,5,187,5,123,5,187,5,122,5,187,5,123,5,188,5,124,5,188,5,123,5,188,5,124,5,189,5,125,5,189,5,124,5,189,5,125,5,190,5,126,5,190,5,125,5,190,5,126,5,191,5,127,5,191,5,126,5,192,5,128,5,193,5,129,5,193,5,128,5,193,5,129,5,194,5,130,5,194,5,129,5,194,5,130,5,195,5,131,5,195,5,130,5,195,5,131,5,196,5,132,5,196,5,131,5,196,5,132,5,197,5,133,5,197,5,132,5,197,5,133,5,198,5,134,5,198,5,133,5,198,5,134,5,199,5,135,5,199,5,134,5,199,5,135,5,200,5,136,5,200,5,135,5,200,5,136,5,201,5,137,5,201,5,136,5,201,5,137,5,202,5,138,5,202,5,137,5,202,5,138,5,203,5,139,5,203,5,138,5,203,5,139,5,204,5,140,5,204,5,139,5,204,5,140,5,205,5,141,5,205,5,140,5,205,5,141,5,206,5,142,5,206,5,141,5,206,5,142,5,207,5,143,5,207,5,142,5,207,5,143,5,208,5,144,5,208,5,143,5,208,5,144,5,209,5,145,5,209,5,144,5,209,5,145,5,210,5,146,5,210,5,145,5,210,5,146,5,211,5,147,5,211,5,146,5,211,5,147,5,212,5,148,5,212,5,147,5,212,5,148,5,213,5,149,5,213,5,148,5,213,5,149,5,214,5,150,5,214,5,149,5,214,5,150,5,215,5,151,5,215,5,150,5,215,5,151,5,216,5,152,5,216,5,151,5,216,5,152,5,217,5,153,5,217,5,152,5,217,5,153,5,218,5,154,5,218,5,153,5,218,5,154,5,219,5,155,5,219,5,154,5,219,5,155,5,220,5,156,5,220,5,155,5,220,5,156,5,221,5,157,5,221,5,156,5,221,5,157,5,222,5,158,5,222,5,157,5,222,5,158,5,223,5,159,5,223,5,158,5,223,5,159,5,224,5,160,5,224,5,159,5,224,5,160,5,225,5,161,5,225,5,160,5,225,5,161,5,226,5,162,5,226,5,161,5,226,5,162,5,227,5,163,5,227,5,162,5,227,5,163,5,228,5,164,5,228,5,163,5,228,5,164,5,229,5,165,5,229,5,164,5,229,5,165,5,230,5,166,5,230,5,165,5,230,5,166,5,231,5,167,5,231,5,166,5,231,5,167,5,232,5,168,5,232,5,167,5,232,5,168,5,233,5,169,5,233,5,168,5,233,5,169,5,234,5,170,5,234,5,169,5,234,5,170,5,235,5,171,5,235,5,170,5,235,5,171,5,236,5,172,5,236,5,171,5,236,5,172,5,237,5,173,5,237,5,172,5,237,5,173,5,238,5,174,5,238,5,173,5,238,5,174,5,239,5,175,5,239,5,174,5,239,5,175,5,240,5,176,5,240,5,175,5,240,5,176,5,241,5,177,5,241,5,176,5,241,5,177,5,242,5,178,5,242,5,177,5,242,5,178,5,243,5,179,5,243,5,178,5,243,5,179,5,244,5,180,5,244,5,179,5,244,5,180,5,245,5,181,5,245,5,180,5,245,5,181,5,246,5,182,5,246,5,181,5,246,5,182,5,247,5,183,5,247,5,182,5,247,5,183,5,248,5,184,5,248,5,183,5,248,5,184,5,249,5,185,5,249,5,184,5,249,5,185,5,250,5,186,5,250,5,185,5,250,5,186,5,251,5,187,5,251,5,186,5,251,5,187,5,252,5,188,5,252,5,187,5,252,5,188,5,253,5,189,5,253,5,188,5,253,5,189,5,254,5,190,5,254,5,189,5,254,5,190,5,255,5,191,5,255,5,190,5,0,6,192,5,1,6,193,5,1,6,192,5,1,6,193,5,2,6,194,5,2,6,193,5,2,6,194,5,3,6,195,5,3,6,194,5,3,6,195,5,4,6,196,5,4,6,195,5,4,6,196,5,5,6,197,5,5,6,196,5,5,6,197,5,6,6,198,5,6,6,197,5,6,6,198,5,7,6,199,5,7,6,198,5,7,6,199,5,8,6,200,5,8,6,199,5,8,6,200,5,9,6,201,5,9,6,200,5,9,6,201,5,10,6,202,5,10,6,201,5,10,6,202,5,11,6,203,5,11,6,202,5,11,6,203,5,12,6,204,5,12,6,203,5,12,6,204,5,13,6,205,5,13,6,204,5,13,6,205,5,14,6,206,5,14,6,205,5,14,6,206,5,15,6,207,5,15,6,206,5,15,6,207,5,16,6,208,5,16,6,207,5,16,6,208,5,17,6,209,5,17,6,208,5,17,6,209,5,18,6,210,5,18,6,209,5,18,6,210,5,19,6,211,5,19,6,210,5,19,6,211,5,20,6,212,5,20,6,211,5,20,6,212,5,21,6,213,5,21,6,212,5,21,6,213,5,22,6,214,5,22,6,213,5,22,6,214,5,23,6,215,5,23,6,214,5,23,6,215,5,24,6,216,5,24,6,215,5,24,6,216,5,25,6,217,5,25,6,216,5,25,6,217,5,26,6,218,5,26,6,217,5,26,6,218,5,27,6,219,5,27,6,218,5,27,6,219,5,28,6,220,5,28,6,219,5,28,6,220,5,29,6,221,5,29,6,220,5,29,6,221,5,30,6,222,5,30,6,221,5,30,6,222,5,31,6,223,5,31,6,222,5,31,6,223,5,32,6,224,5,32,6,223,5,32,6,224,5,33,6,225,5,33,6,224,5,33,6,225,5,34,6,226,5,34,6,225,5,34,6,226,5,35,6,227,5,35,6,226,5,35,6,227,5,36,6,228,5,36,6,227,5,36,6,228,5,37,6,229,5,37,6,228,5,37,6,229,5,38,6,230,5,38,6,229,5,38,6,230,5,39,6,231,5,39,6,230,5,39,6,231,5,40,6,232,5,40,6,231,5,40,6,232,5,41,6,233,5,41,6,232,5,41,6,233,5,42,6,234,5,42,6,233,5,42,6,234,5,43,6,235,5,43,6,234,5,43,6,235,5,44,6,236,5,44,6,235,5,44,6,236,5,45,6,237,5,45,6,236,5,45,6,237,5,46,6,238,5,46,6,237,5,46,6,238,5,47,6,239,5,47,6,238,5,47,6,239,5,48,6,240,5,48,6,239,5,48,6,240,5,49,6,241,5,49,6,240,5,49,6,241,5,50,6,242,5,50,6,241,5,50,6,242,5,51,6,243,5,51,6,242,5,51,6,243,5,52,6,244,5,52,6,243,5,52,6,244,5,53,6,245,5,53,6,244,5,53,6,245,5,54,6,246,5,54,6,245,5,54,6,246,5,55,6,247,5,55,6,246,5,55,6,247,5,56,6,248,5,56,6,247,5,56,6,248,5,57,6,249,5,57,6,248,5,57,6,249,5,58,6,250,5,58,6,249,5,58,6,250,5,59,6,251,5,59,6,250,5,59,6,251,5,60,6,252,5,60,6,251,5,60,6,252,5,61,6,253,5,61,6,252,5,61,6,253,5,62,6,254,5,62,6,253,5,62,6,254,5,63,6,255,5,63,6,254,5,64,6,0,6,65,6,1,6,65,6,0,6,65,6,1,6,66,6,2,6,66,6,1,6,66,6,2,6,67,6,3,6,67,6,2,6,67,6,3,6,68,6,4,6,68,6,3,6,68,6,4,6,69,6,5,6,69,6,4,6,69,6,5,6,70,6,6,6,70,6,5,6,70,6,6,6,71,6,7,6,71,6,6,6,71,6,7,6,72,6,8,6,72,6,7,6,72,6,8,6,73,6,9,6,73,6,8,6,73,6,9,6,74,6,10,6,74,6,9,6,74,6,10,6,75,6,11,6,75,6,10,6,75,6,11,6,76,6,12,6,76,6,11,6,76,6,12,6,77,6,13,6,77,6,12,6,77,6,13,6,78,6,14,6,78,6,13,6,78,6,14,6,79,6,15,6,79,6,14,6,79,6,15,6,80,6,16,6,80,6,15,6,80,6,16,6,81,6,17,6,81,6,16,6,81,6,17,6,82,6,18,6,82,6,17,6,82,6,18,6,83,6,19,6,83,6,18,6,83,6,19,6,84,6,20,6,84,6,19,6,84,6,20,6,85,6,21,6,85,6,20,6,85,6,21,6,86,6,22,6,86,6,21,6,86,6,22,6,87,6,23,6,87,6,22,6,87,6,23,6,88,6,24,6,88,6,23,6,88,6,24,6,89,6,25,6,89,6,24,6,89,6,25,6,90,6,26,6,90,6,25,6,90,6,26,6,91,6,27,6,91,6,26,6,91,6,27,6,92,6,28,6,92,6,27,6,92,6,28,6,93,6,29,6,93,6,28,6,93,6,29,6,94,6,30,6,94,6,29,6,94,6,30,6,95,6,31,6,95,6,30,6,95,6,31,6,96,6,32,6,96,6,31,6,96,6,32,6,97,6,33,6,97,6,32,6,97,6,33,6,98,6,34,6,98,6,33,6,98,6,34,6,99,6,35,6,99,6,34,6,99,6,35,6,100,6,36,6,100,6,35,6,100,6,36,6,101,6,37,6,101,6,36,6,101,6,37,6,102,6,38,6,102,6,37,6,102,6,38,6,103,6,39,6,103,6,38,6,103,6,39,6,104,6,40,6,104,6,39,6,104,6,40,6,105,6,41,6,105,6,40,6,105,6,41,6,106,6,42,6,106,6,41,6,106,6,42,6,107,6,43,6,107,6,42,6,107,6,43,6,108,6,44,6,108,6,43,6,108,6,44,6,109,6,45,6,109,6,44,6,109,6,45,6,110,6,46,6,110,6,45,6,110,6,46,6,111,6,47,6,111,6,46,6,111,6,47,6,112,6,48,6,112,6,47,6,112,6,48,6,113,6,49,6,113,6,48,6,113,6,49,6,114,6,50,6,114,6,49,6,114,6,50,6,115,6,51,6,115,6,50,6,115,6,51,6,116,6,52,6,116,6,51,6,116,6,52,6,117,6,53,6,117,6,52,6,117,6,53,6,118,6,54,6,118,6,53,6,118,6,54,6,119,6,55,6,119,6,54,6,119,6,55,6,120,6,56,6,120,6,55,6,120,6,56,6,121,6,57,6,121,6,56,6,121,6,57,6,122,6,58,6,122,6,57,6,122,6,58,6,123,6,59,6,123,6,58,6,123,6,59,6,124,6,60,6,124,6,59,6,124,6,60,6,125,6,61,6,125,6,60,6,125,6,61,6,126,6,62,6,126,6,61,6,126,6,62,6,127,6,63,6,127,6,62,6,128,6,64,6,129,6,65,6,129,6,64,6,129,6,65,6,130,6,66,6,130,6,65,6,130,6,66,6,131,6,67,6,131,6,66,6,131,6,67,6,132,6,68,6,132,6,67,6,132,6,68,6,133,6,69,6,133,6,68,6,133,6,69,6,134,6,70,6,134,6,69,6,134,6,70,6,135,6,71,6,135,6,70,6,135,6,71,6,136,6,72,6,136,6,71,6,136,6,72,6,137,6,73,6,137,6,72,6,137,6,73,6,138,6,74,6,138,6,73,6,138,6,74,6,139,6,75,6,139,6,74,6,139,6,75,6,140,6,76,6,140,6,75,6,140,6,76,6,141,6,77,6,141,6,76,6,141,6,77,6,142,6,78,6,142,6,77,6,142,6,78,6,143,6,79,6,143,6,78,6,143,6,79,6,144,6,80,6,144,6,79,6,144,6,80,6,145,6,81,6,145,6,80,6,145,6,81,6,146,6,82,6,146,6,81,6,146,6,82,6,147,6,83,6,147,6,82,6,147,6,83,6,148,6,84,6,148,6,83,6,148,6,84,6,149,6,85,6,149,6,84,6,149,6,85,6,150,6,86,6,150,6,85,6,150,6,86,6,151,6,87,6,151,6,86,6,151,6,87,6,152,6,88,6,152,6,87,6,152,6,88,6,153,6,89,6,153,6,88,6,153,6,89,6,154,6,90,6,154,6,89,6,154,6,90,6,155,6,91,6,155,6,90,6,155,6,91,6,156,6,92,6,156,6,91,6,156,6,92,6,157,6,93,6,157,6,92,6,157,6,93,6,158,6,94,6,158,6,93,6,158,6,94,6,159,6,95,6,159,6,94,6,159,6,95,6,160,6,96,6,160,6,95,6,160,6,96,6,161,6,97,6,161,6,96,6,161,6,97,6,162,6,98,6,162,6,97,6,162,6,98,6,163,6,99,6,163,6,98,6,163,6,99,6,164,6,100,6,164,6,99,6,164,6,100,6,165,6,101,6,165,6,100,6,165,6,101,6,166,6,102,6,166,6,101,6,166,6,102,6,167,6,103,6,167,6,102,6,167,6,103,6,168,6,104,6,168,6,103,6,168,6,104,6,169,6,105,6,169,6,104,6,169,6,105,6,170,6,106,6,170,6,105,6,170,6,106,6,171,6,107,6,171,6,106,6,171,6,107,6,172,6,108,6,172,6,107,6,172,6,108,6,173,6,109,6,173,6,108,6,173,6,109,6,174,6,110,6,174,6,109,6,174,6,110,6,175,6,111,6,175,6,110,6,175,6,111,6,176,6,112,6,176,6,111,6,176,6,112,6,177,6,113,6,177,6,112,6,177,6,113,6,178,6,114,6,178,6,113,6,178,6,114,6,179,6,115,6,179,6,114,6,179,6,115,6,180,6,116,6,180,6,115,6,180,6,116,6,181,6,117,6,181,6,116,6,181,6,117,6,182,6,118,6,182,6,117,6,182,6,118,6,183,6,119,6,183,6,118,6,183,6,119,6,184,6,120,6,184,6,119,6,184,6,120,6,185,6,121,6,185,6,120,6,185,6,121,6,186,6,122,6,186,6,121,6,186,6,122,6,187,6,123,6,187,6,122,6,187,6,123,6,188,6,124,6,188,6,123,6,188,6,124,6,189,6,125,6,189,6,124,6,189,6,125,6,190,6,126,6,190,6,125,6,190,6,126,6,191,6,127,6,191,6,126,6,192,6,128,6,193,6,129,6,193,6,128,6,193,6,129,6,194,6,130,6,194,6,129,6,194,6,130,6,195,6,131,6,195,6,130,6,195,6,131,6,196,6,132,6,196,6,131,6,196,6,132,6,197,6,133,6,197,6,132,6,197,6,133,6,198,6,134,6,198,6,133,6,198,6,134,6,199,6,135,6,199,6,134,6,199,6,135,6,200,6,136,6,200,6,135,6,200,6,136,6,201,6,137,6,201,6,136,6,201,6,137,6,202,6,138,6,202,6,137,6,202,6,138,6,203,6,139,6,203,6,138,6,203,6,139,6,204,6,140,6,204,6,139,6,204,6,140,6,205,6,141,6,205,6,140,6,205,6,141,6,206,6,142,6,206,6,141,6,206,6,142,6,207,6,143,6,207,6,142,6,207,6,143,6,208,6,144,6,208,6,143,6,208,6,144,6,209,6,145,6,209,6,144,6,209,6,145,6,210,6,146,6,210,6,145,6,210,6,146,6,211,6,147,6,211,6,146,6,211,6,147,6,212,6,148,6,212,6,147,6,212,6,148,6,213,6,149,6,213,6,148,6,213,6,149,6,214,6,150,6,214,6,149,6,214,6,150,6,215,6,151,6,215,6,150,6,215,6,151,6,216,6,152,6,216,6,151,6,216,6,152,6,217,6,153,6,217,6,152,6,217,6,153,6,218,6,154,6,218,6,153,6,218,6,154,6,219,6,155,6,219,6,154,6,219,6,155,6,220,6,156,6,220,6,155,6,220,6,156,6,221,6,157,6,221,6,156,6,221,6,157,6,222,6,158,6,222,6,157,6,222,6,158,6,223,6,159,6,223,6,158,6,223,6,159,6,224,6,160,6,224,6,159,6,224,6,160,6,225,6,161,6,225,6,160,6,225,6,161,6,226,6,162,6,226,6,161,6,226,6,162,6,227,6,163,6,227,6,162,6,227,6,163,6,228,6,164,6,228,6,163,6,228,6,164,6,229,6,165,6,229,6,164,6,229,6,165,6,230,6,166,6,230,6,165,6,230,6,166,6,231,6,167,6,231,6,166,6,231,6,167,6,232,6,168,6,232,6,167,6,232,6,168,6,233,6,169,6,233,6,168,6,233,6,169,6,234,6,170,6,234,6,169,6,234,6,170,6,235,6,171,6,235,6,170,6,235,6,171,6,236,6,172,6,236,6,171,6,236,6,172,6,237,6,173,6,237,6,172,6,237,6,173,6,238,6,174,6,238,6,173,6,238,6,174,6,239,6,175,6,239,6,174,6,239,6,175,6,240,6,176,6,240,6,175,6,240,6,176,6,241,6,177,6,241,6,176,6,241,6,177,6,242,6,178,6,242,6,177,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+389120);
/* memory initializer */ allocate([242,6,178,6,243,6,179,6,243,6,178,6,243,6,179,6,244,6,180,6,244,6,179,6,244,6,180,6,245,6,181,6,245,6,180,6,245,6,181,6,246,6,182,6,246,6,181,6,246,6,182,6,247,6,183,6,247,6,182,6,247,6,183,6,248,6,184,6,248,6,183,6,248,6,184,6,249,6,185,6,249,6,184,6,249,6,185,6,250,6,186,6,250,6,185,6,250,6,186,6,251,6,187,6,251,6,186,6,251,6,187,6,252,6,188,6,252,6,187,6,252,6,188,6,253,6,189,6,253,6,188,6,253,6,189,6,254,6,190,6,254,6,189,6,254,6,190,6,255,6,191,6,255,6,190,6,0,7,192,6,1,7,193,6,1,7,192,6,1,7,193,6,2,7,194,6,2,7,193,6,2,7,194,6,3,7,195,6,3,7,194,6,3,7,195,6,4,7,196,6,4,7,195,6,4,7,196,6,5,7,197,6,5,7,196,6,5,7,197,6,6,7,198,6,6,7,197,6,6,7,198,6,7,7,199,6,7,7,198,6,7,7,199,6,8,7,200,6,8,7,199,6,8,7,200,6,9,7,201,6,9,7,200,6,9,7,201,6,10,7,202,6,10,7,201,6,10,7,202,6,11,7,203,6,11,7,202,6,11,7,203,6,12,7,204,6,12,7,203,6,12,7,204,6,13,7,205,6,13,7,204,6,13,7,205,6,14,7,206,6,14,7,205,6,14,7,206,6,15,7,207,6,15,7,206,6,15,7,207,6,16,7,208,6,16,7,207,6,16,7,208,6,17,7,209,6,17,7,208,6,17,7,209,6,18,7,210,6,18,7,209,6,18,7,210,6,19,7,211,6,19,7,210,6,19,7,211,6,20,7,212,6,20,7,211,6,20,7,212,6,21,7,213,6,21,7,212,6,21,7,213,6,22,7,214,6,22,7,213,6,22,7,214,6,23,7,215,6,23,7,214,6,23,7,215,6,24,7,216,6,24,7,215,6,24,7,216,6,25,7,217,6,25,7,216,6,25,7,217,6,26,7,218,6,26,7,217,6,26,7,218,6,27,7,219,6,27,7,218,6,27,7,219,6,28,7,220,6,28,7,219,6,28,7,220,6,29,7,221,6,29,7,220,6,29,7,221,6,30,7,222,6,30,7,221,6,30,7,222,6,31,7,223,6,31,7,222,6,31,7,223,6,32,7,224,6,32,7,223,6,32,7,224,6,33,7,225,6,33,7,224,6,33,7,225,6,34,7,226,6,34,7,225,6,34,7,226,6,35,7,227,6,35,7,226,6,35,7,227,6,36,7,228,6,36,7,227,6,36,7,228,6,37,7,229,6,37,7,228,6,37,7,229,6,38,7,230,6,38,7,229,6,38,7,230,6,39,7,231,6,39,7,230,6,39,7,231,6,40,7,232,6,40,7,231,6,40,7,232,6,41,7,233,6,41,7,232,6,41,7,233,6,42,7,234,6,42,7,233,6,42,7,234,6,43,7,235,6,43,7,234,6,43,7,235,6,44,7,236,6,44,7,235,6,44,7,236,6,45,7,237,6,45,7,236,6,45,7,237,6,46,7,238,6,46,7,237,6,46,7,238,6,47,7,239,6,47,7,238,6,47,7,239,6,48,7,240,6,48,7,239,6,48,7,240,6,49,7,241,6,49,7,240,6,49,7,241,6,50,7,242,6,50,7,241,6,50,7,242,6,51,7,243,6,51,7,242,6,51,7,243,6,52,7,244,6,52,7,243,6,52,7,244,6,53,7,245,6,53,7,244,6,53,7,245,6,54,7,246,6,54,7,245,6,54,7,246,6,55,7,247,6,55,7,246,6,55,7,247,6,56,7,248,6,56,7,247,6,56,7,248,6,57,7,249,6,57,7,248,6,57,7,249,6,58,7,250,6,58,7,249,6,58,7,250,6,59,7,251,6,59,7,250,6,59,7,251,6,60,7,252,6,60,7,251,6,60,7,252,6,61,7,253,6,61,7,252,6,61,7,253,6,62,7,254,6,62,7,253,6,62,7,254,6,63,7,255,6,63,7,254,6,64,7,0,7,65,7,1,7,65,7,0,7,65,7,1,7,66,7,2,7,66,7,1,7,66,7,2,7,67,7,3,7,67,7,2,7,67,7,3,7,68,7,4,7,68,7,3,7,68,7,4,7,69,7,5,7,69,7,4,7,69,7,5,7,70,7,6,7,70,7,5,7,70,7,6,7,71,7,7,7,71,7,6,7,71,7,7,7,72,7,8,7,72,7,7,7,72,7,8,7,73,7,9,7,73,7,8,7,73,7,9,7,74,7,10,7,74,7,9,7,74,7,10,7,75,7,11,7,75,7,10,7,75,7,11,7,76,7,12,7,76,7,11,7,76,7,12,7,77,7,13,7,77,7,12,7,77,7,13,7,78,7,14,7,78,7,13,7,78,7,14,7,79,7,15,7,79,7,14,7,79,7,15,7,80,7,16,7,80,7,15,7,80,7,16,7,81,7,17,7,81,7,16,7,81,7,17,7,82,7,18,7,82,7,17,7,82,7,18,7,83,7,19,7,83,7,18,7,83,7,19,7,84,7,20,7,84,7,19,7,84,7,20,7,85,7,21,7,85,7,20,7,85,7,21,7,86,7,22,7,86,7,21,7,86,7,22,7,87,7,23,7,87,7,22,7,87,7,23,7,88,7,24,7,88,7,23,7,88,7,24,7,89,7,25,7,89,7,24,7,89,7,25,7,90,7,26,7,90,7,25,7,90,7,26,7,91,7,27,7,91,7,26,7,91,7,27,7,92,7,28,7,92,7,27,7,92,7,28,7,93,7,29,7,93,7,28,7,93,7,29,7,94,7,30,7,94,7,29,7,94,7,30,7,95,7,31,7,95,7,30,7,95,7,31,7,96,7,32,7,96,7,31,7,96,7,32,7,97,7,33,7,97,7,32,7,97,7,33,7,98,7,34,7,98,7,33,7,98,7,34,7,99,7,35,7,99,7,34,7,99,7,35,7,100,7,36,7,100,7,35,7,100,7,36,7,101,7,37,7,101,7,36,7,101,7,37,7,102,7,38,7,102,7,37,7,102,7,38,7,103,7,39,7,103,7,38,7,103,7,39,7,104,7,40,7,104,7,39,7,104,7,40,7,105,7,41,7,105,7,40,7,105,7,41,7,106,7,42,7,106,7,41,7,106,7,42,7,107,7,43,7,107,7,42,7,107,7,43,7,108,7,44,7,108,7,43,7,108,7,44,7,109,7,45,7,109,7,44,7,109,7,45,7,110,7,46,7,110,7,45,7,110,7,46,7,111,7,47,7,111,7,46,7,111,7,47,7,112,7,48,7,112,7,47,7,112,7,48,7,113,7,49,7,113,7,48,7,113,7,49,7,114,7,50,7,114,7,49,7,114,7,50,7,115,7,51,7,115,7,50,7,115,7,51,7,116,7,52,7,116,7,51,7,116,7,52,7,117,7,53,7,117,7,52,7,117,7,53,7,118,7,54,7,118,7,53,7,118,7,54,7,119,7,55,7,119,7,54,7,119,7,55,7,120,7,56,7,120,7,55,7,120,7,56,7,121,7,57,7,121,7,56,7,121,7,57,7,122,7,58,7,122,7,57,7,122,7,58,7,123,7,59,7,123,7,58,7,123,7,59,7,124,7,60,7,124,7,59,7,124,7,60,7,125,7,61,7,125,7,60,7,125,7,61,7,126,7,62,7,126,7,61,7,126,7,62,7,127,7,63,7,127,7,62,7,128,7,64,7,129,7,65,7,129,7,64,7,129,7,65,7,130,7,66,7,130,7,65,7,130,7,66,7,131,7,67,7,131,7,66,7,131,7,67,7,132,7,68,7,132,7,67,7,132,7,68,7,133,7,69,7,133,7,68,7,133,7,69,7,134,7,70,7,134,7,69,7,134,7,70,7,135,7,71,7,135,7,70,7,135,7,71,7,136,7,72,7,136,7,71,7,136,7,72,7,137,7,73,7,137,7,72,7,137,7,73,7,138,7,74,7,138,7,73,7,138,7,74,7,139,7,75,7,139,7,74,7,139,7,75,7,140,7,76,7,140,7,75,7,140,7,76,7,141,7,77,7,141,7,76,7,141,7,77,7,142,7,78,7,142,7,77,7,142,7,78,7,143,7,79,7,143,7,78,7,143,7,79,7,144,7,80,7,144,7,79,7,144,7,80,7,145,7,81,7,145,7,80,7,145,7,81,7,146,7,82,7,146,7,81,7,146,7,82,7,147,7,83,7,147,7,82,7,147,7,83,7,148,7,84,7,148,7,83,7,148,7,84,7,149,7,85,7,149,7,84,7,149,7,85,7,150,7,86,7,150,7,85,7,150,7,86,7,151,7,87,7,151,7,86,7,151,7,87,7,152,7,88,7,152,7,87,7,152,7,88,7,153,7,89,7,153,7,88,7,153,7,89,7,154,7,90,7,154,7,89,7,154,7,90,7,155,7,91,7,155,7,90,7,155,7,91,7,156,7,92,7,156,7,91,7,156,7,92,7,157,7,93,7,157,7,92,7,157,7,93,7,158,7,94,7,158,7,93,7,158,7,94,7,159,7,95,7,159,7,94,7,159,7,95,7,160,7,96,7,160,7,95,7,160,7,96,7,161,7,97,7,161,7,96,7,161,7,97,7,162,7,98,7,162,7,97,7,162,7,98,7,163,7,99,7,163,7,98,7,163,7,99,7,164,7,100,7,164,7,99,7,164,7,100,7,165,7,101,7,165,7,100,7,165,7,101,7,166,7,102,7,166,7,101,7,166,7,102,7,167,7,103,7,167,7,102,7,167,7,103,7,168,7,104,7,168,7,103,7,168,7,104,7,169,7,105,7,169,7,104,7,169,7,105,7,170,7,106,7,170,7,105,7,170,7,106,7,171,7,107,7,171,7,106,7,171,7,107,7,172,7,108,7,172,7,107,7,172,7,108,7,173,7,109,7,173,7,108,7,173,7,109,7,174,7,110,7,174,7,109,7,174,7,110,7,175,7,111,7,175,7,110,7,175,7,111,7,176,7,112,7,176,7,111,7,176,7,112,7,177,7,113,7,177,7,112,7,177,7,113,7,178,7,114,7,178,7,113,7,178,7,114,7,179,7,115,7,179,7,114,7,179,7,115,7,180,7,116,7,180,7,115,7,180,7,116,7,181,7,117,7,181,7,116,7,181,7,117,7,182,7,118,7,182,7,117,7,182,7,118,7,183,7,119,7,183,7,118,7,183,7,119,7,184,7,120,7,184,7,119,7,184,7,120,7,185,7,121,7,185,7,120,7,185,7,121,7,186,7,122,7,186,7,121,7,186,7,122,7,187,7,123,7,187,7,122,7,187,7,123,7,188,7,124,7,188,7,123,7,188,7,124,7,189,7,125,7,189,7,124,7,189,7,125,7,190,7,126,7,190,7,125,7,190,7,126,7,191,7,127,7,191,7,126,7,192,7,128,7,193,7,129,7,193,7,128,7,193,7,129,7,194,7,130,7,194,7,129,7,194,7,130,7,195,7,131,7,195,7,130,7,195,7,131,7,196,7,132,7,196,7,131,7,196,7,132,7,197,7,133,7,197,7,132,7,197,7,133,7,198,7,134,7,198,7,133,7,198,7,134,7,199,7,135,7,199,7,134,7,199,7,135,7,200,7,136,7,200,7,135,7,200,7,136,7,201,7,137,7,201,7,136,7,201,7,137,7,202,7,138,7,202,7,137,7,202,7,138,7,203,7,139,7,203,7,138,7,203,7,139,7,204,7,140,7,204,7,139,7,204,7,140,7,205,7,141,7,205,7,140,7,205,7,141,7,206,7,142,7,206,7,141,7,206,7,142,7,207,7,143,7,207,7,142,7,207,7,143,7,208,7,144,7,208,7,143,7,208,7,144,7,209,7,145,7,209,7,144,7,209,7,145,7,210,7,146,7,210,7,145,7,210,7,146,7,211,7,147,7,211,7,146,7,211,7,147,7,212,7,148,7,212,7,147,7,212,7,148,7,213,7,149,7,213,7,148,7,213,7,149,7,214,7,150,7,214,7,149,7,214,7,150,7,215,7,151,7,215,7,150,7,215,7,151,7,216,7,152,7,216,7,151,7,216,7,152,7,217,7,153,7,217,7,152,7,217,7,153,7,218,7,154,7,218,7,153,7,218,7,154,7,219,7,155,7,219,7,154,7,219,7,155,7,220,7,156,7,220,7,155,7,220,7,156,7,221,7,157,7,221,7,156,7,221,7,157,7,222,7,158,7,222,7,157,7,222,7,158,7,223,7,159,7,223,7,158,7,223,7,159,7,224,7,160,7,224,7,159,7,224,7,160,7,225,7,161,7,225,7,160,7,225,7,161,7,226,7,162,7,226,7,161,7,226,7,162,7,227,7,163,7,227,7,162,7,227,7,163,7,228,7,164,7,228,7,163,7,228,7,164,7,229,7,165,7,229,7,164,7,229,7,165,7,230,7,166,7,230,7,165,7,230,7,166,7,231,7,167,7,231,7,166,7,231,7,167,7,232,7,168,7,232,7,167,7,232,7,168,7,233,7,169,7,233,7,168,7,233,7,169,7,234,7,170,7,234,7,169,7,234,7,170,7,235,7,171,7,235,7,170,7,235,7,171,7,236,7,172,7,236,7,171,7,236,7,172,7,237,7,173,7,237,7,172,7,237,7,173,7,238,7,174,7,238,7,173,7,238,7,174,7,239,7,175,7,239,7,174,7,239,7,175,7,240,7,176,7,240,7,175,7,240,7,176,7,241,7,177,7,241,7,176,7,241,7,177,7,242,7,178,7,242,7,177,7,242,7,178,7,243,7,179,7,243,7,178,7,243,7,179,7,244,7,180,7,244,7,179,7,244,7,180,7,245,7,181,7,245,7,180,7,245,7,181,7,246,7,182,7,246,7,181,7,246,7,182,7,247,7,183,7,247,7,182,7,247,7,183,7,248,7,184,7,248,7,183,7,248,7,184,7,249,7,185,7,249,7,184,7,249,7,185,7,250,7,186,7,250,7,185,7,250,7,186,7,251,7,187,7,251,7,186,7,251,7,187,7,252,7,188,7,252,7,187,7,252,7,188,7,253,7,189,7,253,7,188,7,253,7,189,7,254,7,190,7,254,7,189,7,254,7,190,7,255,7,191,7,255,7,190,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+399360);
/* memory initializer */ allocate([5,23,139,63,251,5,255,191,0,0,0,0,213,179,68,63,251,5,255,191,213,179,68,191,57,238,164,63,228,82,16,52,57,238,164,191,41,63,233,63,214,204,76,52,0,0,0,0,0,0,0,0,251,5,255,191,5,23,139,191,0,0,0,0,0,0,0,0,41,63,233,191,0,0,0,0,251,5,255,191,5,23,139,191,213,179,68,191,251,5,255,191,213,179,68,191,57,238,164,191,228,82,16,52,57,238,164,191,0,0,0,0,0,0,0,0,41,63,233,191,5,23,139,191,251,5,255,191,107,131,67,52,41,63,233,191,214,204,76,52,109,13,43,52,213,179,68,191,251,5,255,191,229,179,68,63,57,238,164,191,101,163,132,52,57,238,164,63,186,0,25,52,251,5,255,191,5,23,139,63,35,74,128,52,216,41,145,52,41,63,233,63,213,179,68,63,251,5,255,191,213,179,68,63,57,238,164,63,101,163,132,52,57,238,164,63,213,179,68,63,251,5,255,63,213,179,68,191,5,23,139,63,251,5,255,63,0,0,0,0,0,0,0,0,251,5,255,63,5,23,139,191,213,179,68,191,251,5,255,63,213,179,68,191,0,0,0,0,251,5,255,63,5,23,139,191,5,23,139,191,251,5,255,63,0,0,0,0,213,179,68,191,251,5,255,63,213,179,68,63,186,0,25,52,251,5,255,63,5,23,139,63,213,179,68,63,251,5,255,63,213,179,68,63,186,0,25,52,251,5,255,191,5,23,139,63,213,179,68,191,251,5,255,191,229,179,68,63,5,23,139,191,251,5,255,191,107,131,67,52,213,179,68,191,251,5,255,191,213,179,68,191,0,0,0,0,251,5,255,191,5,23,139,191,213,179,68,63,251,5,255,191,213,179,68,191,5,23,139,63,251,5,255,191,0,0,0,0,213,179,68,63,251,5,255,191,213,179,68,63,213,179,68,63,251,5,255,63,213,179,68,191,0,0,0,0,251,5,255,63,5,23,139,191,213,179,68,191,251,5,255,63,213,179,68,191,5,23,139,191,251,5,255,63,0,0,0,0,213,179,68,191,251,5,255,63,213,179,68,63,186,0,25,52,251,5,255,63,5,23,139,63,213,179,68,63,251,5,255,63,213,179,68,63,5,23,139,63,251,5,255,63,0,0,0,0,0,0,0,0,0,8,0,0,188,7,0,0,0,8,0,0,64,8,0,0,196,8,0,0,6,9,0,0,192,8,0,0,130,8,0,0,198,45,0,0,46,44,0,0,198,45,0,0,64,47,0,0,70,50,0,0,204,51,0,0,52,50,0,0,192,48,0,0,232,104,5,0,8,0,0,0,56,181,0,0,200,112,1,0,72,50,2,0,8,0,3,0,232,211,3,0,80,161,4,0,232,200,5,0,216,92,0,0,56,21,1,0,200,211,1,0,120,155,2,0,80,108,3,0,232,60,4,0,104,7,5,0,101,114,114,111,114,58,32,37,100,92,110,0,0,0,0,0,51,48,48,48,32,102,97,108,108,0,0,0,0,0,0,0,49,48,48,48,32,115,116,97,99,107,0,0,0,0,0,0,49,51,54,32,114,97,103,100,111,108,108,115,0,0,0,0,49,48,48,48,32,99,111,110,118,101,120,0,0,0,0,0,112,114,105,109,45,116,114,105,109,101,115,104,0,0,0,0,99,111,110,118,101,120,45,116,114,105,109,101,115,104,0,0,114,97,121,116,101,115,116,115,0,0,0,0,0,0,0,0,82,101,115,117,108,116,115,32,102,111,114,32,37,115,58,32,37,102,10,0,0,0,0,0,0,0,0,0,88,196,6,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,49,51,66,101,110,99,104,109,97,114,107,68,101,109,111,0,49,53,68,101,109,111,65,112,112,108,105,99,97,116,105,111,110,0,0,0,0,0,0,0,248,4,7,0,56,196,6,0,32,5,7,0,40,196,6,0,80,196,6,0,0,0,0,0,0,0,0,0,160,196,6,0,1,0,0,0,1,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,55,0,0,0,0,0,0,0,0,32,5,7,0,136,196,6,0,88,196,6,0,0,0,0,0,0,0,0,0,232,196,6,0,1,0,0,0,1,0,0,0,8,0,0,0,9,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,54,0,0,0,0,0,0,0,0,32,5,7,0,208,196,6,0,88,196,6,0,0,0,0,0,0,0,0,0,48,197,6,0,1,0,0,0,1,0,0,0,10,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,53,0,0,0,0,0,0,0,0,32,5,7,0,24,197,6,0,88,196,6,0,0,0,0,0,0,0,0,0,120,197,6,0,1,0,0,0,1,0,0,0,12,0,0,0,13,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,52,0,0,0,0,0,0,0,0,32,5,7,0,96,197,6,0,88,196,6,0,0,0,0,0,0,0,0,0,192,197,6,0,1,0,0,0,1,0,0,0,14,0,0,0,15,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,51,0,0,0,0,0,0,0,0,32,5,7,0,168,197,6,0,88,196,6,0,0,0,0,0,0,0,0,0,8,198,6,0,1,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,50,0,0,0,0,0,0,0,0,32,5,7,0,240,197,6,0,88,196,6,0,0,0,0,0,0,0,0,0,80,198,6,0,1,0,0,0,1,0,0,0,18,0,0,0,19,0,0,0,4,0,0,0,5,0,0,0,49,52,66,101,110,99,104,109,97,114,107,68,101,109,111,49,0,0,0,0,0,0,0,0,32,5,7,0,56,198,6,0,88,196,6,0,0,0,0,0,0,0,0,0,216,198,6,0,20,0,0,0,21,0,0,0,1,0,0,0,1,0,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,52,67,108,111,115,101,115,116,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,248,4,7,0,168,198,6,0,32,5,7,0,120,198,6,0,208,198,6,0,0,0,0,0,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,68,97,116,97,0,0,0,0,0,0,0,83,80,72,69,82,69,0,0,0,0,0,0,48,199,6,0,22,0,0,0,23,0,0,0,55,82,97,103,68,111,108,108,0,0,0,0,0,0,0,0,248,4,7,0,32,199,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,6,0,24,0,0,0,25,0,0,0,1,0,0,0,2,0,0,0,50,48,98,116,68,101,102,97,117,108,116,77,111,116,105,111,110,83,116,97,116,101,0,0,49,51,98,116,77,111,116,105,111,110,83,116,97,116,101,0,248,4,7,0,232,199,6,0,32,5,7,0,208,199,6,0,248,199,6,0,0,0,0,0,66,111,120,0,0,0,0,0,111,107,46,0,0,0,0,0,0,0,0,0,200,200,6,0,26,0,0,0,27,0,0,0,28,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,49,55,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,49,51,98,116,84,121,112,101,100,79,98,106,101,99,116,0,248,4,7,0,128,200,6,0,128,5,7,0,104,200,6,0,0,0,0,0,1,0,0,0,144,200,6,0,2,4,0,0,50,49,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,0,32,5,7,0,176,200,6,0,152,200,6,0,0,0,0,0,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,0,0,0,0,0,0,0,0,0,0,64,203,6,0,29,0,0,0,30,0,0,0,31,0,0,0,5,0,0,0,3,0,0,0,32,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,33,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,34,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,15,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,35,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,36,0,0,0,20,0,0,0,4,0,0,0,5,0,0,0,37,0,0,0,21,0,0,0,6,0,0,0,100,101,98,117,103,68,114,97,119,87,111,114,108,100,0,0,115,121,110,99,104,114,111,110,105,122,101,77,111,116,105,111,110,83,116,97,116,101,115,0,115,116,101,112,83,105,109,117,108,97,116,105,111,110,0,0,105,110,116,101,114,110,97,108,83,105,110,103,108,101,83,116,101,112,83,105,109,117,108,97,116,105,111,110,0,0,0,0,117,112,100,97,116,101,65,99,116,105,111,110,115,0,0,0,117,112,100,97,116,101,65,99,116,105,118,97,116,105,111,110,83,116,97,116,101,0,0,0,115,111,108,118,101,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,99,97,108,99,117,108,97,116,101,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,116,101,103,114,97,116,101,84,114,97,110,115,102,111,114,109,115,0,0,0,0,0,67,67,68,32,109,111,116,105,111,110,32,99,108,97,109,112,105,110,103,0,0,0,0,0,97,100,100,83,112,101,99,117,108,97,116,105,118,101,67,111,110,116,97,99,116,115,0,0,115,101,97,114,99,104,32,115,112,101,99,117,108,97,116,105,118,101,32,99,111,110,116,97,99,116,115,0,0,0,0,0,112,114,101,100,105,99,116,85,110,99,111,110,115,116,114,97,105,110,116,77,111,116,105,111,110,0,0,0,0,0,0,0,50,51,98,116,68,105,115,99,114,101,116,101,68,121,110,97,109,105,99,115,87,111,114,108,100,0,0,0,0,0,0,0,49,53,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,0,0,0,0,0,0,0,32,5,7,0,24,203,6,0,144,218,6,0,0,0,0,0,32,5,7,0,248,202,6,0,48,203,6,0,0,0,0,0,0,0,0,0,16,204,6,0,38,0,0,0,39,0,0,0,4,0,0,0,3,0,0,0,51,52,98,116,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,0,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,55,67,108,111,115,101,115,116,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,0,0,0,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,0,0,0,0,248,4,7,0,200,203,6,0,32,5,7,0,144,203,6,0,248,203,6,0,0,0,0,0,32,5,7,0,104,203,6,0,0,204,6,0,0,0,0,0,0,0,0,0,0,204,6,0,40,0,0,0,41,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,240,204,6,0,42,0,0,0,43,0,0,0,1,0,0,0,0,0,0,0,90,78,50,51,98,116,68,105,115,99,114,101,116,101,68,121,110,97,109,105,99,115,87,111,114,108,100,49,54,115,111,108,118,101,67,111,110,115,116,114,97,105,110,116,115,69,82,49,57,98,116,67,111,110,116,97,99,116,83,111,108,118,101,114,73,110,102,111,69,50,55,73,110,112,108,97,99,101,83,111,108,118,101,114,73,115,108,97,110,100,67,97,108,108,98,97,99,107,0,0,0,0,0,0,78,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,49,52,73,115,108,97,110,100,67,97,108,108,98,97,99,107,69,0,0,0,248,4,7,0,184,204,6,0,32,5,7,0,80,204,6,0,232,204,6,0,0,0,0,0,0,0,0,0,80,205,6,0,44,0,0,0,45,0,0,0,46,0,0,0,1,0,0,0,22,0,0,0,23,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,2,0,0,0,0,0,0,0,49,55,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,32,5,7,0,56,205,6,0,152,200,6,0,0,0,0,0,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,205,6,0,6,0,0,0,47,0,0,0,48,0,0,0,24,0,0,0,8,0,0,0,3,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,116,82,105,103,105,100,66,111,100,121,70,108,111,97,116,68,97,116,97,0,0,0,0,49,49,98,116,82,105,103,105,100,66,111,100,121,0,0,0,32,5,7,0,216,205,6,0,128,216,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,209,6,0,49,0,0,0,50,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,51,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,115,111,108,118,101,71,114,111,117,112,67,97,99,104,101,70,114,105,101,110,100,108,121,83,101,116,117,112,0,0,0,0,115,111,108,118,101,71,114,111,117,112,67,97,99,104,101,70,114,105,101,110,100,108,121,73,116,101,114,97,116,105,111,110,115,0,0,0,0,0,0,0,115,111,108,118,101,71,114,111,117,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,53,98,116,83,101,113,117,101,110,116,105,97,108,73,109,112,117,108,115,101,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,0,0,49,56,98,116,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,0,0,0,248,4,7,0,24,209,6,0,32,5,7,0,240,208,6,0,48,209,6,0,0,0,0,0,0,0,0,0,152,200,6,0,52,0,0,0,53,0,0,0,54,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,4,0,0,0,0,0,0,0,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,0,0,0,0,0,0,56,210,6,0,55,0,0,0,56,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,26,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,27,0,0,0,57,0,0,0,49,50,98,116,65,120,105,115,83,119,101,101,112,51,0,0,50,48,98,116,65,120,105,115,83,119,101,101,112,51,73,110,116,101,114,110,97,108,73,116,69,0,0,0,0,0,0,0,50,49,98,116,66,114,111,97,100,112,104,97,115,101,73,110,116,101,114,102,97,99,101,0,248,4,7,0,8,210,6,0,32,5,7,0,232,209,6,0,32,210,6,0,0,0,0,0,32,5,7,0,216,209,6,0,40,210,6,0,0,0,0,0,0,0,0,0,40,210,6,0,58,0,0,0,59,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,26,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,27,0,0,0,57,0,0,0,0,0,0,0,72,211,6,0,60,0,0,0,61,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,7,0,0,0,15,0,0,0,8,0,0,0,28,0,0,0,9,0,0,0,6,0,0,0,16,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,49,53,98,116,78,117,108,108,80,97,105,114,67,97,99,104,101,0,0,0,0,0,0,0,50,50,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,0,0,0,0,0,0,0,50,53,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,0,0,248,4,7,0,16,211,6,0,32,5,7,0,240,210,6,0,48,211,6,0,0,0,0,0,32,5,7,0,216,210,6,0,56,211,6,0,0,0,0,0,0,0,0,0,232,211,6,0,62,0,0,0,63,0,0,0,8,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,31,0,0,0,17,0,0,0,1,0,0,0,18,0,0,0,7,0,0,0,2,0,0,0,19,0,0,0,7,0,0,0,32,0,0,0,11,0,0,0,12,0,0,0,9,0,0,0,10,0,0,0,20,0,0,0,13,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,11,0,0,0,14,0,0,0,24,0,0,0,12,0,0,0,1,0,0,0,15,0,0,0,49,48,98,116,66,111,120,83,104,97,112,101,0,0,0,0,32,5,7,0,216,211,6,0,216,245,6,0,0,0,0,0,0,0,0,0,136,212,6,0,64,0,0,0,65,0,0,0,13,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,33,0,0,0,25,0,0,0,2,0,0,0,26,0,0,0,8,0,0,0,3,0,0,0,27,0,0,0,8,0,0,0,32,0,0,0,14,0,0,0,16,0,0,0,17,0,0,0,34,0,0,0,35,0,0,0,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,68,97,116,97,0,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,0,0,0,0,0,0,0,32,5,7,0,104,212,6,0,0,252,6,0,0,0,0,0,66,86,72,84,82,73,65,78,71,76,69,77,69,83,72,0,0,0,0,0,80,213,6,0,66,0,0,0,67,0,0,0,18,0,0,0,0,0,0,0,90,78,75,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,0,0,50,49,98,116,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,248,4,7,0,48,213,6,0,32,5,7,0,192,212,6,0,72,213,6,0,0,0,0,0,0,0,0,0,240,213,6,0,68,0,0,0,69,0,0,0,19,0,0,0,0,0,0,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,55,112,101,114,102,111,114,109,67,111,110,118,101,120,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,83,52,95,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,32,5,7,0,120,213,6,0,72,213,6,0,0,0,0,0,0,0,0,0,128,214,6,0,70,0,0,0,71,0,0,0,20,0,0,0,0,0,0,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,52,112,101,114,102,111,114,109,82,97,121,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,32,5,7,0,24,214,6,0,72,213,6,0,0,0,0,0,0,0,0,0,8,215,6,0,72,0,0,0,73,0,0,0,15,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,17,0,0,0,3,0,0,0,28,0,0,0,9,0,0,0,2,0,0,0,29,0,0,0,9,0,0,0,32,0,0,0,21,0,0,0,22,0,0,0,16,0,0,0,10,0,0,0,30,0,0,0,23,0,0,0,0,0,0,0,49,52,98,116,67,97,112,115,117,108,101,83,104,97,112,101,0,0,0,0,0,0,0,0,32,5,7,0,240,214,6,0,16,228,6,0,0,0,0,0,98,116,67,97,112,115,117,108,101,83,104,97,112,101,68,97,116,97,0,0,0,0,0,0,67,97,112,115,117,108,101,83,104,97,112,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,215,6,0,74,0,0,0,75,0,0,0,2,0,0,0,10,0,0,0,37,0,0,0,38,0,0,0,11,0,0,0,12,0,0,0,17,0,0,0,31,0,0,0,7,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,8,0,0,0,39,0,0,0,50,49,98,116,67,111,108,108,105,115,105,111,110,68,105,115,112,97,116,99,104,101,114,0,32,5,7,0,144,215,6,0,0,234,6,0,0,0,0,0,0,0,0,0,16,216,6,0,76,0,0,0,77,0,0,0,9,0,0,0,0,0,0,0,50,51,98,116,67,111,108,108,105,115,105,111,110,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,49,55,98,116,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,0,0,0,0,248,4,7,0,240,215,6,0,32,5,7,0,208,215,6,0,8,216,6,0,0,0,0,0,0,0,0,0,128,216,6,0,10,0,0,0,78,0,0,0,79,0,0,0,24,0,0,0,35,0,0,0,13,0,0,0,40,0,0,0,0,0,0,0,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,0,0,0,0,0,248,4,7,0,104,216,6,0,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,68,97,116,97,0,0,0,0,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,0,0,0,0,0,0,248,4,7,0,160,216,6,0,0,0,0,0,144,218,6,0,80,0,0,0,81,0,0,0,31,0,0,0,5,0,0,0,3,0,0,0,82,0,0,0,1,0,0,0,2,0,0,0,18,0,0,0,41,0,0,0,33,0,0,0,42,0,0,0,1,0,0,0,0,0,0,0,79,118,101,114,102,108,111,119,32,105,110,32,65,65,66,66,44,32,111,98,106,101,99,116,32,114,101,109,111,118,101,100,32,102,114,111,109,32,115,105,109,117,108,97,116,105,111,110,0,0,0,0,0,0,0,0,73,102,32,121,111,117,32,99,97,110,32,114,101,112,114,111,100,117,99,101,32,116,104,105,115,44,32,112,108,101,97,115,101,32,101,109,97,105,108,32,98,117,103,115,64,99,111,110,116,105,110,117,111,117,115,112,104,121,115,105,99,115,46,99,111,109,10,0,0,0,0,0,80,108,101,97,115,101,32,105,110,99,108,117,100,101,32,97,98,111,118,101,32,105,110,102,111,114,109,97,116,105,111,110,44,32,121,111,117,114,32,80,108,97,116,102,111,114,109,44,32,118,101,114,115,105,111,110,32,111,102,32,79,83,46,10,0,0,0,0,0,0,0,0,84,104,97,110,107,115,46,10,0,0,0,0,0,0,0,0,117,112,100,97,116,101,65,97,98,98,115,0,0,0,0,0,112,101,114,102,111,114,109,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,105,111,110,0,0,0,0,0,0,0,99,97,108,99,117,108,97,116,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,0,0,0,0,0,0,0,100,105,115,112,97,116,99,104,65,108,108,67,111,108,108,105,115,105,111,110,80,97,105,114,115,0,0,0,0,0,0,0,99,111,110,118,101,120,83,119,101,101,112,67,111,109,112,111,117,110,100,0,0,0,0,0,99,111,110,118,101,120,83,119,101,101,112,84,101,115,116,0,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,0,0,0,0,0,0,248,4,7,0,120,218,6,0,0,0,0,0,224,218,6,0,83,0,0,0,84,0,0,0,19,0,0,0,20,0,0,0,252,255,255,255,224,218,6,0,85,0,0,0,86,0,0,0,21,0,0,0,0,0,0,0,49,55,68,101,98,117,103,68,114,97,119,99,97,108,108,98,97,99,107,0,0,0,0,0,128,5,7,0,200,218,6,0,0,0,0,0,2,0,0,0,232,250,6,0,2,0,0,0,24,251,6,0,2,4,0,0,50,52,98,116,66,114,111,97,100,112,104,97,115,101,65,97,98,98,67,97,108,108,98,97,99,107,0,0,0,0,0,0,248,4,7,0,0,219,6,0,0,0,0,0,136,219,6,0,87,0,0,0,88,0,0,0,11,0,0,0,0,0,0,0,50,49,98,116,83,105,110,103,108,101,83,119,101,101,112,67,97,108,108,98,97,99,107,0,50,51,98,116,66,114,111,97,100,112,104,97,115,101,82,97,121,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,32,5,7,0,88,219,6,0,32,219,6,0,0,0,0,0,32,5,7,0,64,219,6,0,120,219,6,0,0,0,0,0,0,0,0,0,200,219,6,0,89,0,0,0,90,0,0,0,12,0,0,0,0,0,0,0,49,57,98,116,83,105,110,103,108,101,82,97,121,67,97,108,108,98,97,99,107,0,0,0,32,5,7,0,176,219,6,0,120,219,6,0,0,0,0,0,0,0,0,0,152,220,6,0,91,0,0,0,92,0,0,0,13,0,0,0,6,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,53,95,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,49,52,76,111,99,97,108,73,110,102,111,65,100,100,101,114,95,49,0,0,0,32,5,7,0,240,219,6,0,248,203,6,0,0,0,0,0,0,0,0,0,120,221,6,0,93,0,0,0,94,0,0,0,22,0,0,0,1,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,53,95,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,32,5,7,0,192,220,6,0,80,247,6,0,0,0,0,0,0,0,0,0,88,222,6,0,95,0,0,0,96,0,0,0,22,0,0,0,2,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,53,95,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,0,0,32,5,7,0,160,221,6,0,80,247,6,0,0,0,0,0,0,0,0,0,16,223,6,0,97,0,0,0,98,0,0,0,14,0,0,0,7,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,51,114,97,121,84,101,115,116,83,105,110,103,108,101,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,50,95,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,49,53,76,111,99,97,108,73,110,102,111,65,100,100,101,114,50,0,0,0,0,0,32,5,7,0,128,222,6,0,208,198,6,0,0,0,0,0,0,0,0,0,240,223,6,0,99,0,0,0,100,0,0,0,24,0,0,0,43,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,51,114,97,121,84,101,115,116,83,105,110,103,108,101,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,50,95,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,57,82,97,121,84,101,115,116,101,114,95,49,0,0,78,54,98,116,68,98,118,116,56,73,67,111,108,108,105,100,101,69,0,0,0,0,0,0,248,4,7,0,208,223,6,0,32,5,7,0,72,223,6,0,232,223,6,0,0,0,0,0,0,0,0,0,184,224,6,0,101,0,0,0,102,0,0,0,23,0,0,0,1,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,51,114,97,121,84,101,115,116,83,105,110,103,108,101,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,50,95,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,0,0,0,0,32,5,7,0,24,224,6,0,32,247,6,0,0,0,0,0,0,0,0,0,128,225,6,0,103,0,0,0,104,0,0,0,23,0,0,0,2,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,51,114,97,121,84,101,115,116,83,105,110,103,108,101,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,80,75,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,83,50,95,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,32,5,7,0,224,224,6,0,32,247,6,0,0,0,0,0,0,0,0,0,208,225,6,0,10,0,0,0,44,0,0,0,25,0,0,0,105,0,0,0,106,0,0,0,0,0,0,0,78,49,50,98,116,67,111,110,118,101,120,67,97,115,116,49,48,67,97,115,116,82,101,115,117,108,116,69,0,0,0,0,248,4,7,0,176,225,6,0,0,0,0,0,16,226,6,0,107,0,0,0,108,0,0,0,1,0,0,0,0,0,0,0,50,55,98,116,67,111,110,116,105,110,117,111,117,115,67,111,110,118,101,120,67,111,108,108,105,115,105,111,110,0,0,0,32,5,7,0,240,225,6,0,176,226,6,0,0,0,0,0,0,0,0,0,144,226,6,0,109,0,0,0,110,0,0,0,26,0,0,0,27,0,0,0,3,0,0,0,0,0,0,0,49,54,98,116,80,111,105,110,116,67,111,108,108,101,99,116,111,114,0,0,0,0,0,0,78,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,54,82,101,115,117,108,116,69,0,248,4,7,0,88,226,6,0,32,5,7,0,64,226,6,0,136,226,6,0,0,0,0,0,49,50,98,116,67,111,110,118,101,120,67,97,115,116,0,0,248,4,7,0,160,226,6,0,0,0,0,0,128,227,6,0,111,0,0,0,112,0,0,0,24,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,45,0,0,0,17,0,0,0,4,0,0,0,36,0,0,0,11,0,0,0,2,0,0,0,37,0,0,0,14,0,0,0,32,0,0,0,28,0,0,0,29,0,0,0,25,0,0,0,10,0,0,0,30,0,0,0,23,0,0,0,21,0,0,0,38,0,0,0,39,0,0,0,26,0,0,0,30,0,0,0,40,0,0,0,27,0,0,0,2,0,0,0,0,0,0,0,98,116,86,101,99,116,111,114,51,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,68,97,116,97,0,0,0,49,55,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,0,0,0,0,0,32,5,7,0,104,227,6,0,16,246,6,0,0,0,0,0,67,111,110,118,101,120,0,0,0,0,0,0,16,228,6,0,113,0,0,0,114,0,0,0,28,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,46,0,0,0,17,0,0,0,1,0,0,0,1,0,0,0,11,0,0,0,2,0,0,0,19,0,0,0,7,0,0,0,32,0,0,0,21,0,0,0,1,0,0,0,1,0,0,0,10,0,0,0,30,0,0,0,23,0,0,0,0,0,0,0,50,49,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,0,32,5,7,0,248,227,6,0,144,228,6,0,0,0,0,0,0,0,0,0,144,228,6,0,115,0,0,0,116,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,41,0,0,0,15,0,0,0,32,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,0,32,5,7,0,128,228,6,0,184,216,6,0,0,0,0,0,0,0,0,0,248,228,6,0,117,0,0,0,118,0,0,0,2,0,0,0,31,0,0,0,2,0,0,0,29,0,0,0,3,0,0,0,30,0,0,0,47,0,0,0,42,0,0,0,43,0,0,0,32,0,0,0,48,0,0,0,119,0,0,0,49,54,98,116,68,98,118,116,66,114,111,97,100,112,104,97,115,101,0,0,0,0,0,0,32,5,7,0,224,228,6,0,32,210,6,0,0,0,0,0,0,0,0,0,72,229,6,0,120,0,0,0,121,0,0,0,24,0,0,0,49,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,50,48,66,114,111,97,100,112,104,97,115,101,65,97,98,98,84,101,115,116,101,114,0,0,32,5,7,0,48,229,6,0,232,223,6,0,0,0,0,0,0,0,0,0,152,229,6,0,122,0,0,0,123,0,0,0,24,0,0,0,50,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,49,57,66,114,111,97,100,112,104,97,115,101,82,97,121,84,101,115,116,101,114,0,0,0,32,5,7,0,128,229,6,0,232,223,6,0,0,0,0,0,0,0,0,0,232,229,6,0,124,0,0,0,125,0,0,0,33,0,0,0,51,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,49,56,98,116,68,98,118,116,84,114,101,101,67,111,108,108,105,100,101,114,0,0,0,0,32,5,7,0,208,229,6,0,232,223,6,0,0,0,0,0,0,0,0,0,112,230,6,0,126,0,0,0,127,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,16,0,0,0,47,0,0,0,0,0,0,0,51,49,98,116,68,101,102,97,117,108,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,0,0,50,52,98,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,0,248,4,7,0,72,230,6,0,32,5,7,0,32,230,6,0,104,230,6,0,0,0,0,0,0,0,0,0,248,230,6,0,128,0,0,0,129,0,0,0,3,0,0,0,0,0,0,0,78,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,51,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,67,114,101,97,116,101,70,117,110,99,0,0,0,0,0,0,0,0,248,4,7,0,200,230,6,0,32,5,7,0,152,230,6,0,240,230,6,0,0,0,0,0,0,0,0,0,80,231,6,0,130,0,0,0,131,0,0,0,4,0,0,0,0,0,0,0,78,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,32,5,7,0,32,231,6,0,240,230,6,0,0,0,0,0,0,0,0,0,176,231,6,0,132,0,0,0,133,0,0,0,5,0,0,0,0,0,0,0,78,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,32,5,7,0,120,231,6,0,240,230,6,0,0,0,0,0,0,0,0,0,16,232,6,0,134,0,0,0,135,0,0,0,6,0,0,0,0,0,0,0,78,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,0,32,5,7,0,216,231,6,0,240,230,6,0,0,0,0,0,0,0,0,0,96,232,6,0,136,0,0,0,137,0,0,0,7,0,0,0,0,0,0,0,78,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,0,32,5,7,0,56,232,6,0,240,230,6,0,0,0,0,0,0,0,0,0,192,232,6,0,138,0,0,0,139,0,0,0,8,0,0,0,0,0,0,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,32,5,7,0,136,232,6,0,240,230,6,0,0,0,0,0,0,0,0,0,24,233,6,0,140,0,0,0,141,0,0,0,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+442592);
/* memory initializer */ allocate([78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,32,5,7,0,232,232,6,0,240,230,6,0,0,0,0,0,0,0,0,0,128,233,6,0,142,0,0,0,143,0,0,0,10,0,0,0,0,0,0,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,0,32,5,7,0,64,233,6,0,240,230,6,0,0,0,0,0,0,0,0,0,224,233,6,0,144,0,0,0,145,0,0,0,11,0,0,0,0,0,0,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,32,5,7,0,168,233,6,0,240,230,6,0,0,0,0,0,49,50,98,116,68,105,115,112,97,116,99,104,101,114,0,0,248,4,7,0,240,233,6,0,0,0,0,0,96,234,6,0,146,0,0,0,147,0,0,0,3,0,0,0,1,0,0,0,52,0,0,0,0,0,0,0,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,50,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,248,4,7,0,64,234,6,0,32,5,7,0,40,234,6,0,88,234,6,0,0,0,0,0,0,0,0,0,224,234,6,0,148,0,0,0,149,0,0,0,1,0,0,0,0,0,0,0,51,48,98,116,71,106,107,69,112,97,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,0,0,0,0,0,0,0,51,48,98,116,67,111,110,118,101,120,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,0,0,0,0,0,0,0,248,4,7,0,176,234,6,0,32,5,7,0,136,234,6,0,216,234,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,235,6,0,150,0,0,0,151,0,0,0,4,0,0,0,0,0,0,0,49,55,98,116,71,106,107,80,97,105,114,68,101,116,101,99,116,111,114,0,0,0,0,0,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,0,0,248,4,7,0,48,235,6,0,32,5,7,0,24,235,6,0,88,235,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,235,6,0,152,0,0,0,153,0,0,0,34,0,0,0,35,0,0,0,4,0,0,0,0,0,0,0,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,0,0,0,0,0,32,5,7,0,152,235,6,0,136,226,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,239,6,0,154,0,0,0,155,0,0,0,2,0,0,0,0,0,0,0,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,0,0,0,0,32,5,7,0,192,239,6,0,216,234,6,0,0,0,0,0,0,0,0,0,216,240,6,0,156,0,0,0,157,0,0,0,36,0,0,0,37,0,0,0,5,0,0,0,0,0,0,0,90,78,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,49,50,99,97,108,99,80,101,110,68,101,112,116,104,69,82,50,50,98,116,86,111,114,111,110,111,105,83,105,109,112,108,101,120,83,111,108,118,101,114,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,83,52,95,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,55,95,82,57,98,116,86,101,99,116,111,114,51,83,57,95,83,57,95,80,49,50,98,116,73,68,101,98,117,103,68,114,97,119,80,49,50,98,116,83,116,97,99,107,65,108,108,111,99,69,50,48,98,116,73,110,116,101,114,109,101,100,105,97,116,101,82,101,115,117,108,116,0,0,0,0,0,0,0,32,5,7,0,24,240,6,0,136,226,6,0,0,0,0,0,0,0,0,0,40,241,6,0,158,0,0,0,159,0,0,0,12,0,0,0,48,0,0,0,17,0,0,0,53,0,0,0,54,0,0,0,13,0,0,0,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,0,0,0,0,0,0,0,0,32,5,7,0,16,241,6,0,200,246,6,0,0,0,0,0,0,0,0,0,176,241,6,0,160,0,0,0,161,0,0,0,31,0,0,0,0,0,0,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,48,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,95,48,0,0,0,0,32,5,7,0,80,241,6,0,24,251,6,0,0,0,0,0,0,0,0,0,64,242,6,0,162,0,0,0,163,0,0,0,32,0,0,0,0,0,0,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,57,81,117,97,110,116,105,122,101,100,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,0,0,0,0,32,5,7,0,216,241,6,0,24,251,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,242,6,0,164,0,0,0,165,0,0,0,18,0,0,0,14,0,0,0,38,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,39,0,0,0,52,0,0,0,40,0,0,0,55,0,0,0,41,0,0,0,19,0,0,0,53,0,0,0,56,0,0,0,57,0,0,0,0,0,0,0,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,0,32,5,7,0,192,242,6,0,56,211,6,0,0,0,0,0,0,0,0,0,144,243,6,0,166,0,0,0,167,0,0,0,17,0,0,0,0,0,0,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,51,55,114,101,109,111,118,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,67,111,110,116,97,105,110,105,110,103,80,114,111,120,121,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,56,82,101,109,111,118,101,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,32,5,7,0,8,243,6,0,8,216,6,0,0,0,0,0,0,0,0,0,40,244,6,0,168,0,0,0,169,0,0,0,18,0,0,0,0,0,0,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,49,57,99,108,101,97,110,80,114,111,120,121,70,114,111,109,80,97,105,114,115,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,55,67,108,101,97,110,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,32,5,7,0,184,243,6,0,8,216,6,0,0,0,0,0,10,215,163,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,245,6,0,170,0,0,0,171,0,0,0,28,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,46,0,0,0,17,0,0,0,4,0,0,0,1,0,0,0,11,0,0,0,2,0,0,0,19,0,0,0,7,0,0,0,32,0,0,0,21,0,0,0,42,0,0,0,33,0,0,0,10,0,0,0,30,0,0,0,23,0,0,0,21,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,16,246,6,0,172,0,0,0,173,0,0,0,24,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,58,0,0,0,17,0,0,0,4,0,0,0,1,0,0,0,11,0,0,0,2,0,0,0,19,0,0,0,7,0,0,0,32,0,0,0,21,0,0,0,42,0,0,0,33,0,0,0,10,0,0,0,30,0,0,0,23,0,0,0,21,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,83,104,97,112,101,0,0,0,0,0,0,0,32,5,7,0,184,245,6,0,16,228,6,0,0,0,0,0,51,52,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,65,97,98,98,67,97,99,104,105,110,103,83,104,97,112,101,0,0,0,0,32,5,7,0,232,245,6,0,216,245,6,0,0,0,0,0,0,0,0,0,200,246,6,0,174,0,0,0,175,0,0,0,12,0,0,0,48,0,0,0,17,0,0,0,53,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,116,79,112,116,105,109,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,0,98,116,66,118,104,83,117,98,116,114,101,101,73,110,102,111,68,97,116,97,0,0,0,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,70,108,111,97,116,68,97,116,97,0,49,52,98,116,81,117,97,110,116,105,122,101,100,66,118,104,0,0,0,0,0,0,0,0,248,4,7,0,176,246,6,0,0,0,0,0,32,247,6,0,176,0,0,0,177,0,0,0,23,0,0,0,1,0,0,0,0,0,0,0,80,247,6,0,178,0,0,0,179,0,0,0,22,0,0,0,1,0,0,0,50,53,98,116,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,32,5,7,0,0,247,6,0,232,250,6,0,0,0,0,0,50,56,98,116,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,0,32,5,7,0,48,247,6,0,232,250,6,0,0,0,0,0,0,0,0,0,248,247,6,0,180,0,0,0,181,0,0,0,34,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,46,0,0,0,17,0,0,0,5,0,0,0,54,0,0,0,11,0,0,0,2,0,0,0,19,0,0,0,7,0,0,0,32,0,0,0,21,0,0,0,43,0,0,0,35,0,0,0,10,0,0,0,55,0,0,0,44,0,0,0,21,0,0,0,56,0,0,0,57,0,0,0,36,0,0,0,45,0,0,0,58,0,0,0,37,0,0,0,3,0,0,0,38,0,0,0,49,53,98,116,84,114,105,97,110,103,108,101,83,104,97,112,101,0,0,0,0,0,0,0,32,5,7,0,224,247,6,0,216,245,6,0,0,0,0,0,84,114,105,97,110,103,108,101,0,0,0,0,0,0,0,0,0,0,0,0,128,248,6,0,182,0,0,0,183,0,0,0,46,0,0,0,59,0,0,0,105,115,108,97,110,100,85,110,105,111,110,70,105,110,100,65,110,100,81,117,105,99,107,83,111,114,116,0,0,0,0,0,112,114,111,99,101,115,115,73,115,108,97,110,100,115,0,0,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,0,0,0,0,0,248,4,7,0,96,248,6,0,0,0,0,0,248,248,6,0,184,0,0,0,185,0,0,0,39,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,46,0,0,0,17,0,0,0,6,0,0,0,59,0,0,0,12,0,0,0,4,0,0,0,19,0,0,0,7,0,0,0,32,0,0,0,47,0,0,0,48,0,0,0,40,0,0,0,10,0,0,0,30,0,0,0,23,0,0,0,0,0,0,0,49,51,98,116,83,112,104,101,114,101,83,104,97,112,101,0,32,5,7,0,232,248,6,0,16,228,6,0,0,0,0,0,0,0,0,0,80,249,6,0,186,0,0,0,187,0,0,0,5,0,0,0,2,0,0,0,60,0,0,0,0,0,0,0,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,32,5,7,0,40,249,6,0,128,253,6,0,0,0,0,0,0,0,0,0,168,249,6,0,188,0,0,0,189,0,0,0,6,0,0,0,3,0,0,0,61,0,0,0,0,0,0,0,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,32,5,7,0,128,249,6,0,128,253,6,0,0,0,0,0,98,116,73,110,116,73,110,100,101,120,68,97,116,97,0,0,98,116,83,104,111,114,116,73,110,116,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,0,0,0,0,0,98,116,67,104,97,114,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,0,98,116,86,101,99,116,111,114,51,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,98,116,86,101,99,116,111,114,51,68,111,117,98,108,101,68,97,116,97,0,0,0,0,0,98,116,77,101,115,104,80,97,114,116,68,97,116,97,0,0,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,68,97,116,97,0,0,0,0,0,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,0,0,0,0,0,0,0,248,4,7,0,96,250,6,0,0,0,0,0,192,250,6,0,190,0,0,0,191,0,0,0,2,0,0,0,0,0,0,0,50,50,98,116,83,117,98,115,105,109,112,108,101,120,67,111,110,118,101,120,67,97,115,116,0,0,0,0,0,0,0,0,32,5,7,0,160,250,6,0,176,226,6,0,0,0,0,0,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,0,0,0,248,4,7,0,208,250,6,0,51,49,98,116,73,110,116,101,114,110,97,108,84,114,105,97,110,103,108,101,73,110,100,101,120,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,248,4,7,0,240,250,6,0,0,0,0,0,136,251,6,0,192,0,0,0,193,0,0,0,41,0,0,0,2,0,0,0,3,0,0,0,62,0,0,0,63,0,0,0,60,0,0,0,64,0,0,0,65,0,0,0,61,0,0,0,49,0,0,0,50,0,0,0,62,0,0,0,20,0,0,0,0,0,0,0,50,54,98,116,84,114,105,97,110,103,108,101,73,110,100,101,120,86,101,114,116,101,120,65,114,114,97,121,0,0,0,0,32,5,7,0,104,251,6,0,128,250,6,0,0,0,0,0,0,0,0,0,0,252,6,0,194,0,0,0,195,0,0,0,13,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,66,0,0,0,25,0,0,0,2,0,0,0,63,0,0,0,8,0,0,0,3,0,0,0,41,0,0,0,15,0,0,0,32,0,0,0,42,0,0,0,16,0,0,0,17,0,0,0,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,0,0,32,5,7,0,232,251,6,0,72,255,6,0,0,0,0,0,84,82,73,65,78,71,76,69,77,69,83,72,0,0,0,0,0,0,0,0,80,252,6,0,196,0,0,0,197,0,0,0,43,0,0,0,0,0,0,0,50,49,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,32,5,7,0,56,252,6,0,232,250,6,0,0,0,0,0,0,0,0,0,224,252,6,0,198,0,0,0,199,0,0,0,44,0,0,0,0,0,0,0,90,78,75,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,49,54,70,105,108,116,101,114,101,100,67,97,108,108,98,97,99,107,0,0,0,32,5,7,0,120,252,6,0,24,251,6,0,0,0,0,0,0,0,0,0,40,253,6,0,200,0,0,0,201,0,0,0,7,0,0,0,0,0,0,0,50,50,83,112,104,101,114,101,84,114,105,97,110,103,108,101,68,101,116,101,99,116,111,114,0,0,0,0,0,0,0,0,32,5,7,0,8,253,6,0,88,235,6,0,0,0,0,0,0,0,0,0,128,253,6,0,202,0,0,0,203,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,51,48,98,116,65,99,116,105,118,97,116,105,110,103,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,0,32,5,7,0,88,253,6,0,88,234,6,0,0,0,0,0,0,0,0,0,208,253,6,0,204,0,0,0,205,0,0,0,8,0,0,0,4,0,0,0,67,0,0,0,0,0,0,0,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,32,5,7,0,176,253,6,0,128,253,6,0,0,0,0,0,0,0,0,0,16,254,6,0,206,0,0,0,207,0,0,0,9,0,0,0,0,0,0,0,49,54,98,116,66,111,120,66,111,120,68,101,116,101,99,116,111,114,0,0,0,0,0,0,32,5,7,0,248,253,6,0,88,235,6,0,0,0,0,0,0,0,0,0,88,234,6,0,208,0,0,0,209,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,254,6,0,210,0,0,0,211,0,0,0,10,0,0,0,5,0,0,0,68,0,0,0,0,0,0,0,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,32,5,7,0,96,254,6,0,128,253,6,0,0,0,0,0,0,0,0,0,216,254,6,0,212,0,0,0,213,0,0,0,24,0,0,0,69,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,50,50,98,116,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,32,5,7,0,184,254,6,0,232,223,6,0,0,0,0,0,0,0,0,0,72,255,6,0,214,0,0,0,215,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,3,0,0,0,41,0,0,0,15,0,0,0,32,0,0,0,1,0,0,0,49,52,98,116,67,111,110,99,97,118,101,83,104,97,112,101,0,0,0,0,0,0,0,0,32,5,7,0,48,255,6,0,184,216,6,0,0,0,0,0,0,0,0,0,184,255,6,0,216,0,0,0,217,0,0,0,11,0,0,0,6,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,232,255,6,0,218,0,0,0,219,0,0,0,45,0,0,0,0,0,0,0,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,32,5,7,0,144,255,6,0,128,253,6,0,0,0,0,0,50,52,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,0,0,0,0,0,32,5,7,0,200,255,6,0,232,250,6,0,0,0,0,0,0,0,0,0,176,0,7,0,220,0,0,0,221,0,0,0,46,0,0,0,0,0,0,0,90,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,50,49,99,97,108,99,117,108,97,116,101,84,105,109,101,79,102,73,109,112,97,99,116,69,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,83,49,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,51,49,76,111,99,97,108,84,114,105,97,110,103,108,101,83,112,104,101,114,101,67,97,115,116,67,97,108,108,98,97,99,107,0,0,0,32,5,7,0,16,0,7,0,232,250,6,0,0,0,0,0,0,0,0,0,88,1,7,0,222,0,0,0,223,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,32,1,7,0,224,0,0,0,225,0,0,0,12,0,0,0,7,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,32,5,7,0,0,1,7,0,128,253,6,0,0,0,0,0,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,32,5,7,0,48,1,7,0,240,230,6,0,0,0,0,0,0,0,0,0,168,1,7,0,226,0,0,0,227,0,0,0,34,0,0,0,35,0,0,0,6,0,0,0,0,0,0,0,50,52,98,116,80,101,114,116,117,114,98,101,100,67,111,110,116,97,99,116,82,101,115,117,108,116,0,0,0,0,0,0,32,5,7,0,136,1,7,0,176,235,6,0,0,0,0,0,0,0,0,0,88,2,7,0,228,0,0,0,229,0,0,0,51,0,0,0,52,0,0,0,7,0,0,0,0,0,0,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,83,49,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,49,51,98,116,68,117,109,109,121,82,101,115,117,108,116,0,0,0,0,32,5,7,0,216,1,7,0,136,226,6,0,0,0,0,0,0,0,0,0,176,2,7,0,230,0,0,0,231,0,0,0,13,0,0,0,8,0,0,0,72,0,0,0,0,0,0,0,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,32,5,7,0,136,2,7,0,88,234,6,0,0,0,0,0,0,0,0,0,232,2,7,0,232,0,0,0,233,0,0,0,49,56,98,116,67,111,110,118,101,120,80,111,108,121,104,101,100,114,111,110,0,0,0,0,248,4,7,0,208,2,7,0,0,0,0,0,32,3,7,0,234,0,0,0,235,0,0,0,3,0,0,0,0,0,0,0,49,53,98,116,71,106,107,67,111,110,118,101,120,67,97,115,116,0,0,0,0,0,0,0,32,5,7,0,8,3,7,0,176,226,6,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,48,62,61,48,46,48,102,0,0,0,0,0,0,0,0,66,117,108,108,101,116,67,111,108,108,105,115,105,111,110,47,78,97,114,114,111,119,80,104,97,115,101,67,111,108,108,105,115,105,111,110,47,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,116,97,99,116,67,108,105,112,112,105,110,103,46,99,112,112,0,0,0,0,84,101,115,116,83,101,112,65,120,105,115,0,0,0,0,0,100,49,62,61,48,46,48,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,236,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,111,111,116,0,0,0,0,40,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,248,4,7,0,104,4,7,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,32,5,7,0,128,4,7,0,120,4,7,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,32,5,7,0,184,4,7,0,168,4,7,0,0,0,0,0,0,0,0,0,224,4,7,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,21,0,0,0,4,0,0,0,14,0,0,0,47,0,0,0,0,0,0,0,104,5,7,0,238,0,0,0,242,0,0,0,240,0,0,0,241,0,0,0,21,0,0,0,5,0,0,0,15,0,0,0,48,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,32,5,7,0,64,5,7,0,224,4,7,0,0,0,0,0,0,0,0,0,200,5,7,0,238,0,0,0,243,0,0,0,240,0,0,0,241,0,0,0,21,0,0,0,6,0,0,0,16,0,0,0,49,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,32,5,7,0,160,5,7,0,224,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,7,0,244,0,0,0,245,0,0,0,65,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,32,5,7,0,248,7,7,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+452832);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _cosf=Math_cos;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;


  function _abort() {
      Module['abort']();
    }

  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (0) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  var _acosf=Math_acos;


  var _sqrtf=Math_sqrt;

   
  Module["_i64Add"] = _i64Add;

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  var _llvm_pow_f32=Math_pow;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodf=_fmod;

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

  var _atan2f=Math_atan2;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function ___cxa_guard_release() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function __ZSt9terminatev() {
  Module['printErr']('dead function: _ZSt9terminatev'); abort(-1);
  }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  var _sinf=Math_sin;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function __ZNSt9exceptionD2Ev() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }


  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _UItoF=true;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiidii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viddiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vidii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidi(index,a1,a2,a3) {
  try {
    Module["dynCall_vidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiddddiid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    Module["dynCall_viiiiddddiid"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_diiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_diiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiid(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diiidii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_diiidii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiidddddid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    Module["dynCall_viiiidddddid"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viidii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_diiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_did(index,a1,a2) {
  try {
    return Module["dynCall_did"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diidii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_diidii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidid(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iidid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_viiidii=env.invoke_viiidii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidi=env.invoke_viidi;
  var invoke_viddiii=env.invoke_viddiii;
  var invoke_vidii=env.invoke_vidii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_viiiiddddiid=env.invoke_viiiiddddiid;
  var invoke_di=env.invoke_di;
  var invoke_diiiiiiiiiii=env.invoke_diiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_diiiii=env.invoke_diiiii;
  var invoke_viiiid=env.invoke_viiiid;
  var invoke_diiidii=env.invoke_diiidii;
  var invoke_viiiidddddid=env.invoke_viiiidddddid;
  var invoke_viidii=env.invoke_viidii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_diii=env.invoke_diii;
  var invoke_diiiiiiiiii=env.invoke_diiiiiiiiii;
  var invoke_did=env.invoke_did;
  var invoke_diidii=env.invoke_diidii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iidid=env.invoke_iidid;
  var invoke_viiii=env.invoke_viiii;
  var _llvm_bswap_i32=env._llvm_bswap_i32;
  var ___cxa_throw=env.___cxa_throw;
  var _cosf=env._cosf;
  var _send=env._send;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var _fmod=env._fmod;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___assert_fail=env.___assert_fail;
  var _atan2f=env._atan2f;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _pwrite=env._pwrite;
  var _acosf=env._acosf;
  var ___setErrNo=env.___setErrNo;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _atexit=env._atexit;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var _sqrtf=env._sqrtf;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var _printf=env._printf;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _gettimeofday=env._gettimeofday;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN20btConvexHullInternal9shiftFaceEPNS_4FaceEf20btAlignedObjectArrayIPNS_6VertexEE(i18, i2, d116, i15) {
 i18 = i18 | 0;
 i2 = i2 | 0;
 d116 = +d116;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, d117 = 0.0, d118 = 0.0, d119 = 0.0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i6 = i1 + 240 | 0;
 i8 = i1 + 224 | 0;
 i22 = i1 + 200 | 0;
 i14 = i1 + 160 | 0;
 i13 = i1 + 120 | 0;
 i12 = i1 + 80 | 0;
 i19 = i1 + 40 | 0;
 i23 = i1;
 __ZN20btConvexHullInternal11getBtNormalEPNS_4FaceE(i8, i18, i2);
 d116 = -d116;
 d118 = +HEAPF32[i8 >> 2] * d116;
 d117 = +HEAPF32[i8 + 4 >> 2] * d116;
 d116 = +HEAPF32[i8 + 8 >> 2] * d116;
 HEAPF32[i6 >> 2] = d118;
 i8 = i6 + 4 | 0;
 HEAPF32[i8 >> 2] = d117;
 i7 = i6 + 8 | 0;
 HEAPF32[i7 >> 2] = d116;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 d119 = +HEAPF32[i18 >> 2];
 if (d119 > 0.0) {
  HEAPF32[i6 >> 2] = d118 / d119;
 }
 d118 = +HEAPF32[i18 + 4 >> 2];
 if (d118 > 0.0) {
  HEAPF32[i8 >> 2] = d117 / d118;
 }
 d117 = +HEAPF32[i18 + 8 >> 2];
 if (d117 > 0.0) {
  HEAPF32[i7 >> 2] = d116 / d117;
 }
 i9 = ~~+HEAPF32[i6 + (HEAP32[i18 + 108 >> 2] << 2) >> 2];
 i10 = ~~+HEAPF32[i6 + (HEAP32[i18 + 112 >> 2] << 2) >> 2];
 i11 = ~~+HEAPF32[i6 + (HEAP32[i18 + 104 >> 2] << 2) >> 2];
 if ((i10 | i9 | i11 | 0) == 0) {
  i115 = 1;
  STACKTOP = i1;
  return i115 | 0;
 }
 i28 = i2 + 32 | 0;
 i112 = HEAP32[i28 >> 2] | 0;
 i26 = i2 + 52 | 0;
 i111 = HEAP32[i26 >> 2] | 0;
 i113 = Math_imul(i111, i112) | 0;
 i29 = i2 + 36 | 0;
 i34 = HEAP32[i29 >> 2] | 0;
 i31 = i2 + 48 | 0;
 i6 = HEAP32[i31 >> 2] | 0;
 i113 = i113 - (Math_imul(i6, i34) | 0) | 0;
 i32 = ((i113 | 0) < 0) << 31 >> 31;
 i30 = i2 + 44 | 0;
 i36 = HEAP32[i30 >> 2] | 0;
 i34 = Math_imul(i36, i34) | 0;
 i27 = i2 + 28 | 0;
 i110 = HEAP32[i27 >> 2] | 0;
 i111 = i34 - (Math_imul(i110, i111) | 0) | 0;
 i34 = ((i111 | 0) < 0) << 31 >> 31;
 i112 = (Math_imul(i110, i6) | 0) - (Math_imul(i36, i112) | 0) | 0;
 i36 = ((i112 | 0) < 0) << 31 >> 31;
 i6 = i22;
 HEAP32[i6 >> 2] = i113;
 HEAP32[i6 + 4 >> 2] = i32;
 i6 = i22 + 8 | 0;
 HEAP32[i6 >> 2] = i111;
 HEAP32[i6 + 4 >> 2] = i34;
 i6 = i22 + 16 | 0;
 HEAP32[i6 >> 2] = i112;
 HEAP32[i6 + 4 >> 2] = i36;
 i6 = i2 + 12 | 0;
 i110 = HEAP32[i6 >> 2] | 0;
 i114 = ___muldi3(i110 | 0, ((i110 | 0) < 0) << 31 >> 31 | 0, i113 | 0, i32 | 0) | 0;
 i109 = tempRet0;
 i7 = i2 + 16 | 0;
 i35 = HEAP32[i7 >> 2] | 0;
 i8 = ___muldi3(i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0, i111 | 0, i34 | 0) | 0;
 i109 = _i64Add(i8 | 0, tempRet0 | 0, i114 | 0, i109 | 0) | 0;
 i114 = tempRet0;
 i8 = i2 + 20 | 0;
 i33 = HEAP32[i8 >> 2] | 0;
 i115 = ___muldi3(i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0, i112 | 0, i36 | 0) | 0;
 i115 = _i64Add(i109 | 0, i114 | 0, i115 | 0, tempRet0 | 0) | 0;
 i114 = tempRet0;
 i9 = i110 + i9 | 0;
 i10 = i35 + i10 | 0;
 i11 = i33 + i11 | 0;
 i33 = ((i9 | 0) < 0) << 31 >> 31;
 i32 = ___muldi3(i9 | 0, i33 | 0, i113 | 0, i32 | 0) | 0;
 i113 = tempRet0;
 i35 = ((i10 | 0) < 0) << 31 >> 31;
 i34 = ___muldi3(i10 | 0, i35 | 0, i111 | 0, i34 | 0) | 0;
 i113 = _i64Add(i34 | 0, tempRet0 | 0, i32 | 0, i113 | 0) | 0;
 i32 = tempRet0;
 i34 = ((i11 | 0) < 0) << 31 >> 31;
 i36 = ___muldi3(i11 | 0, i34 | 0, i112 | 0, i36 | 0) | 0;
 i36 = _i64Add(i113 | 0, i32 | 0, i36 | 0, tempRet0 | 0) | 0;
 i32 = tempRet0;
 if (!((i32 | 0) < (i114 | 0) | (i32 | 0) == (i114 | 0) & i36 >>> 0 < i115 >>> 0)) {
  i115 = 0;
  STACKTOP = i1;
  return i115 | 0;
 }
 i54 = HEAP32[i2 + 4 >> 2] | 0;
 i17 = HEAP32[i54 + 8 >> 2] | 0;
 __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i14, i54, i22);
 i54 = __ZNK20btConvexHullInternal11Rational1287compareEx(i14, i36, i32) | 0;
 if ((i54 | 0) > -1) {
  i16 = i17;
  i24 = i17;
  while (1) {
   __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i13, HEAP32[i16 + 12 >> 2] | 0, i22);
   if ((__ZNK20btConvexHullInternal11Rational1287compareERKS0_(i13, i14) | 0) < 0) {
    i17 = __ZNK20btConvexHullInternal11Rational1287compareEx(i13, i36, i32) | 0;
    i24 = i14 + 0 | 0;
    i38 = i13 + 0 | 0;
    i37 = i24 + 36 | 0;
    do {
     HEAP32[i24 >> 2] = HEAP32[i38 >> 2];
     i24 = i24 + 4 | 0;
     i38 = i38 + 4 | 0;
    } while ((i24 | 0) < (i37 | 0));
    HEAP8[i14 + 36 | 0] = HEAP8[i13 + 36 | 0] | 0;
    i50 = HEAP32[i16 + 8 >> 2] | 0;
    if ((i17 | 0) < 0) {
     break;
    } else {
     i16 = i50;
     i24 = i50;
    }
   } else {
    i17 = i54;
   }
   i16 = HEAP32[i16 + 4 >> 2] | 0;
   if ((i16 | 0) == (i24 | 0)) {
    i21 = 0;
    i5 = 352;
    break;
   } else {
    i54 = i17;
   }
  }
  if ((i5 | 0) == 352) {
   STACKTOP = i1;
   return i21 | 0;
  }
  if ((i50 | 0) == 0) {
   i115 = 0;
   STACKTOP = i1;
   return i115 | 0;
  }
 } else {
  i50 = i17;
  while (1) {
   __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i13, HEAP32[i50 + 12 >> 2] | 0, i22);
   if ((__ZNK20btConvexHullInternal11Rational1287compareERKS0_(i13, i14) | 0) > 0) {
    i16 = __ZNK20btConvexHullInternal11Rational1287compareEx(i13, i36, i32) | 0;
    if ((i16 | 0) > -1) {
     break;
    }
    i24 = i14 + 0 | 0;
    i38 = i13 + 0 | 0;
    i37 = i24 + 36 | 0;
    do {
     HEAP32[i24 >> 2] = HEAP32[i38 >> 2];
     i24 = i24 + 4 | 0;
     i38 = i38 + 4 | 0;
    } while ((i24 | 0) < (i37 | 0));
    HEAP8[i14 + 36 | 0] = HEAP8[i13 + 36 | 0] | 0;
    i17 = HEAP32[i50 + 8 >> 2] | 0;
    i24 = i17;
   } else {
    i24 = i50;
   }
   i24 = HEAP32[i24 + 4 >> 2] | 0;
   if ((i24 | 0) == (i17 | 0)) {
    i21 = 1;
    i5 = 352;
    break;
   } else {
    i50 = i24;
   }
  }
  if ((i5 | 0) == 352) {
   STACKTOP = i1;
   return i21 | 0;
  }
  if ((i50 | 0) == 0) {
   i115 = 1;
   STACKTOP = i1;
   return i115 | 0;
  } else {
   i54 = i16;
  }
 }
 L39 : do {
  if ((i54 | 0) == 0) {
   i13 = i50 + 8 | 0;
   i14 = HEAP32[HEAP32[i13 >> 2] >> 2] | 0;
   while (1) {
    __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i12, HEAP32[i14 + 12 >> 2] | 0, i22);
    if ((__ZNK20btConvexHullInternal11Rational1287compareEx(i12, i36, i32) | 0) >= 1) {
     break L39;
    }
    i14 = HEAP32[i14 >> 2] | 0;
    if ((i14 | 0) == (HEAP32[i13 >> 2] | 0)) {
     i21 = 1;
     break;
    }
   }
   STACKTOP = i1;
   return i21 | 0;
  }
 } while (0);
 i46 = i18 + 32 | 0;
 i42 = (i9 | 0) < 0;
 i45 = _i64Subtract(0, 0, i9 | 0, i33 | 0) | 0;
 i44 = tempRet0;
 i37 = (i10 | 0) < 0;
 i38 = _i64Subtract(0, 0, i10 | 0, i35 | 0) | 0;
 i40 = tempRet0;
 i43 = (i11 | 0) < 0;
 i39 = _i64Subtract(0, 0, i11 | 0, i34 | 0) | 0;
 i41 = tempRet0;
 i13 = i15 + 4 | 0;
 i14 = i15 + 8 | 0;
 i12 = i15 + 12 | 0;
 i15 = i15 + 16 | 0;
 i17 = i18 + 56 | 0;
 i16 = i18 + 116 | 0;
 i47 = i18 + 48 | 0;
 i49 = i18 + 100 | 0;
 i48 = i18 + 120 | 0;
 i53 = 0;
 i24 = 0;
 i51 = 0;
 L46 : while (1) {
  i55 = (i54 | 0) == 0;
  L48 : do {
   if (i55) {
    i52 = HEAP32[HEAP32[i50 + 8 >> 2] >> 2] | 0;
    i56 = i52;
    while (1) {
     __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i19, HEAP32[i56 + 12 >> 2] | 0, i22);
     if ((__ZNK20btConvexHullInternal11Rational1287compareEx(i19, i36, i32) | 0) > -1) {
      i57 = i50;
      break L48;
     }
     i50 = HEAP32[i56 + 8 >> 2] | 0;
     i56 = HEAP32[i56 >> 2] | 0;
     if ((i56 | 0) == (i52 | 0)) {
      i21 = 1;
      i5 = 352;
      break L46;
     }
    }
   } else {
    i57 = i50;
   }
  } while (0);
  if ((i51 | 0) != 0) {
   if ((i57 | 0) == (i51 | 0)) {
    break;
   }
  } else {
   i51 = i57;
  }
  i56 = i57 + 8 | 0;
  i50 = HEAP32[i56 >> 2] | 0;
  do {
   i50 = HEAP32[(HEAP32[i50 + 8 >> 2] | 0) + 4 >> 2] | 0;
   i58 = i50 + 12 | 0;
   __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i23, HEAP32[i58 >> 2] | 0, i22);
   i52 = __ZNK20btConvexHullInternal11Rational1287compareEx(i23, i36, i32) | 0;
  } while (!((i52 | 0) > -1));
  if ((i52 | 0) > 0) {
   i59 = HEAP32[i58 >> 2] | 0;
   i64 = i50 + 8 | 0;
   i60 = HEAP32[i64 >> 2] | 0;
   i61 = i60 + 4 | 0;
   i62 = HEAP32[i61 >> 2] | 0;
   i63 = i59 + 8 | 0;
   if ((i62 | 0) == (i60 | 0)) {
    HEAP32[i63 >> 2] = 0;
   } else {
    HEAP32[i63 >> 2] = i62;
    i114 = HEAP32[i61 >> 2] | 0;
    i115 = HEAP32[i60 >> 2] | 0;
    HEAP32[i114 >> 2] = i115;
    HEAP32[i115 + 4 >> 2] = i114;
    HEAP32[i60 >> 2] = i60;
    HEAP32[i61 >> 2] = i60;
   }
   i110 = HEAP32[i50 + 16 >> 2] | 0;
   i112 = HEAP32[i110 + 32 >> 2] | 0;
   i108 = HEAP32[i110 + 52 >> 2] | 0;
   i111 = Math_imul(i108, i112) | 0;
   i109 = HEAP32[i110 + 36 >> 2] | 0;
   i115 = HEAP32[i110 + 48 >> 2] | 0;
   i111 = i111 - (Math_imul(i115, i109) | 0) | 0;
   i71 = ((i111 | 0) < 0) << 31 >> 31;
   i72 = HEAP32[i110 + 44 >> 2] | 0;
   i109 = Math_imul(i72, i109) | 0;
   i63 = HEAP32[i110 + 28 >> 2] | 0;
   i108 = i109 - (Math_imul(i63, i108) | 0) | 0;
   i109 = ((i108 | 0) < 0) << 31 >> 31;
   i112 = (Math_imul(i63, i115) | 0) - (Math_imul(i72, i112) | 0) | 0;
   i72 = ((i112 | 0) < 0) << 31 >> 31;
   i115 = HEAP32[(HEAP32[i64 >> 2] | 0) + 16 >> 2] | 0;
   i63 = HEAP32[i115 + 32 >> 2] | 0;
   i113 = HEAP32[i115 + 52 >> 2] | 0;
   i74 = Math_imul(i113, i63) | 0;
   i114 = HEAP32[i115 + 36 >> 2] | 0;
   i103 = HEAP32[i115 + 48 >> 2] | 0;
   i74 = i74 - (Math_imul(i103, i114) | 0) | 0;
   i79 = ((i74 | 0) < 0) << 31 >> 31;
   i78 = HEAP32[i115 + 44 >> 2] | 0;
   i114 = Math_imul(i78, i114) | 0;
   i68 = HEAP32[i115 + 28 >> 2] | 0;
   i113 = i114 - (Math_imul(i68, i113) | 0) | 0;
   i114 = ((i113 | 0) < 0) << 31 >> 31;
   i63 = (Math_imul(i68, i103) | 0) - (Math_imul(i78, i63) | 0) | 0;
   i78 = ((i63 | 0) < 0) << 31 >> 31;
   i103 = HEAP32[i27 >> 2] | 0;
   i68 = ((i103 | 0) < 0) << 31 >> 31;
   i61 = ___muldi3(i103 | 0, i68 | 0, i111 | 0, i71 | 0) | 0;
   i106 = tempRet0;
   i100 = HEAP32[i28 >> 2] | 0;
   i101 = ((i100 | 0) < 0) << 31 >> 31;
   i102 = ___muldi3(i100 | 0, i101 | 0, i108 | 0, i109 | 0) | 0;
   i106 = _i64Add(i102 | 0, tempRet0 | 0, i61 | 0, i106 | 0) | 0;
   i61 = tempRet0;
   i102 = HEAP32[i29 >> 2] | 0;
   i69 = ((i102 | 0) < 0) << 31 >> 31;
   i65 = ___muldi3(i102 | 0, i69 | 0, i112 | 0, i72 | 0) | 0;
   i65 = _i64Add(i106 | 0, i61 | 0, i65 | 0, tempRet0 | 0) | 0;
   i61 = tempRet0;
   i106 = HEAP32[i30 >> 2] | 0;
   i83 = ((i106 | 0) < 0) << 31 >> 31;
   i62 = ___muldi3(i106 | 0, i83 | 0, i111 | 0, i71 | 0) | 0;
   i99 = tempRet0;
   i104 = HEAP32[i31 >> 2] | 0;
   i105 = ((i104 | 0) < 0) << 31 >> 31;
   i107 = ___muldi3(i104 | 0, i105 | 0, i108 | 0, i109 | 0) | 0;
   i99 = _i64Add(i107 | 0, tempRet0 | 0, i62 | 0, i99 | 0) | 0;
   i62 = tempRet0;
   i107 = HEAP32[i26 >> 2] | 0;
   i84 = ((i107 | 0) < 0) << 31 >> 31;
   i64 = ___muldi3(i107 | 0, i84 | 0, i112 | 0, i72 | 0) | 0;
   i64 = _i64Add(i99 | 0, i62 | 0, i64 | 0, tempRet0 | 0) | 0;
   i62 = tempRet0;
   i68 = ___muldi3(i103 | 0, i68 | 0, i74 | 0, i79 | 0) | 0;
   i103 = tempRet0;
   i101 = ___muldi3(i100 | 0, i101 | 0, i113 | 0, i114 | 0) | 0;
   i103 = _i64Add(i101 | 0, tempRet0 | 0, i68 | 0, i103 | 0) | 0;
   i68 = tempRet0;
   i69 = ___muldi3(i102 | 0, i69 | 0, i63 | 0, i78 | 0) | 0;
   i69 = _i64Add(i103 | 0, i68 | 0, i69 | 0, tempRet0 | 0) | 0;
   i68 = tempRet0;
   i83 = ___muldi3(i106 | 0, i83 | 0, i74 | 0, i79 | 0) | 0;
   i106 = tempRet0;
   i105 = ___muldi3(i104 | 0, i105 | 0, i113 | 0, i114 | 0) | 0;
   i106 = _i64Add(i105 | 0, tempRet0 | 0, i83 | 0, i106 | 0) | 0;
   i83 = tempRet0;
   i84 = ___muldi3(i107 | 0, i84 | 0, i63 | 0, i78 | 0) | 0;
   i84 = _i64Add(i106 | 0, i83 | 0, i84 | 0, tempRet0 | 0) | 0;
   i83 = tempRet0;
   i106 = (HEAP32[i110 + 12 >> 2] | 0) - i9 | 0;
   i107 = (HEAP32[i110 + 16 >> 2] | 0) - i10 | 0;
   i110 = (HEAP32[i110 + 20 >> 2] | 0) - i11 | 0;
   i71 = ___muldi3(i106 | 0, ((i106 | 0) < 0) << 31 >> 31 | 0, i111 | 0, i71 | 0) | 0;
   i111 = tempRet0;
   i109 = ___muldi3(i107 | 0, ((i107 | 0) < 0) << 31 >> 31 | 0, i108 | 0, i109 | 0) | 0;
   i111 = _i64Add(i109 | 0, tempRet0 | 0, i71 | 0, i111 | 0) | 0;
   i71 = tempRet0;
   i72 = ___muldi3(i110 | 0, ((i110 | 0) < 0) << 31 >> 31 | 0, i112 | 0, i72 | 0) | 0;
   i72 = _i64Add(i111 | 0, i71 | 0, i72 | 0, tempRet0 | 0) | 0;
   i71 = tempRet0;
   i111 = (HEAP32[i115 + 12 >> 2] | 0) - i9 | 0;
   i112 = (HEAP32[i115 + 16 >> 2] | 0) - i10 | 0;
   i115 = (HEAP32[i115 + 20 >> 2] | 0) - i11 | 0;
   i79 = ___muldi3(i111 | 0, ((i111 | 0) < 0) << 31 >> 31 | 0, i74 | 0, i79 | 0) | 0;
   i74 = tempRet0;
   i114 = ___muldi3(i112 | 0, ((i112 | 0) < 0) << 31 >> 31 | 0, i113 | 0, i114 | 0) | 0;
   i74 = _i64Add(i114 | 0, tempRet0 | 0, i79 | 0, i74 | 0) | 0;
   i79 = tempRet0;
   i78 = ___muldi3(i115 | 0, ((i115 | 0) < 0) << 31 >> 31 | 0, i63 | 0, i78 | 0) | 0;
   i78 = _i64Add(i74 | 0, i79 | 0, i78 | 0, tempRet0 | 0) | 0;
   i79 = tempRet0;
   i74 = (i61 | 0) < 0;
   i63 = _i64Subtract(0, 0, i65 | 0, i61 | 0) | 0;
   i76 = i74 ? i63 : i65;
   i77 = i74 ? tempRet0 : i61;
   i86 = (i83 | 0) < 0;
   if (i86) {
    i63 = _i64Subtract(0, 0, i84 | 0, i83 | 0) | 0;
    i61 = tempRet0;
    i67 = i74 ^ 1;
   } else {
    i63 = i84;
    i61 = i83;
    i67 = i74;
   }
   i114 = ___muldi3(i63 | 0, 0, i76 | 0, 0) | 0;
   i65 = tempRet0;
   i111 = ___muldi3(i61 | 0, 0, i76 | 0, 0) | 0;
   i112 = tempRet0;
   i115 = ___muldi3(i63 | 0, 0, i77 | 0, 0) | 0;
   i66 = tempRet0;
   i113 = ___muldi3(i61 | 0, 0, i77 | 0, 0) | 0;
   i63 = tempRet0;
   i61 = _i64Add(i111 | 0, 0, i115 | 0, 0) | 0;
   i115 = tempRet0;
   i63 = _i64Add(i112 | 0, 0, i113 | 0, i63 | 0) | 0;
   i66 = _i64Add(i63 | 0, tempRet0 | 0, i66 | 0, 0) | 0;
   i115 = _i64Add(i66 | 0, tempRet0 | 0, i115 | 0, 0) | 0;
   i66 = tempRet0;
   i63 = _i64Add(0, i61 | 0, i114 | 0, i65 | 0) | 0;
   i65 = tempRet0;
   i61 = _i64Add(i115 | 0, i66 | 0, (i65 >>> 0 < i61 >>> 0 | (i65 | 0) == (i61 | 0) & i63 >>> 0 < 0) & 1 | 0, 0) | 0;
   i66 = tempRet0;
   if (i67) {
    i114 = _i64Subtract(0, 0, i63 | 0, i65 | 0) | 0;
    i115 = tempRet0;
    i61 = _i64Add((i63 | 0) == 0 & (i65 | 0) == 0 & 1 | 0, 0, ~i61 | 0, ~i66 | 0) | 0;
    i63 = i114;
    i65 = i115;
    i66 = tempRet0;
   }
   i80 = (i62 | 0) < 0;
   i67 = _i64Subtract(0, 0, i64 | 0, i62 | 0) | 0;
   i81 = i80 ? i67 : i64;
   i82 = i80 ? tempRet0 : i62;
   i75 = (i68 | 0) < 0;
   if (i75) {
    i64 = _i64Subtract(0, 0, i69 | 0, i68 | 0) | 0;
    i67 = tempRet0;
    i62 = i80 ^ 1;
   } else {
    i64 = i69;
    i67 = i68;
    i62 = i80;
   }
   i73 = ___muldi3(i64 | 0, 0, i81 | 0, 0) | 0;
   i70 = tempRet0;
   i111 = ___muldi3(i67 | 0, 0, i81 | 0, 0) | 0;
   i112 = tempRet0;
   i115 = ___muldi3(i64 | 0, 0, i82 | 0, 0) | 0;
   i85 = tempRet0;
   i113 = ___muldi3(i67 | 0, 0, i82 | 0, 0) | 0;
   i114 = tempRet0;
   i67 = _i64Add(i111 | 0, 0, i115 | 0, 0) | 0;
   i115 = tempRet0;
   i114 = _i64Add(i112 | 0, 0, i113 | 0, i114 | 0) | 0;
   i85 = _i64Add(i114 | 0, tempRet0 | 0, i85 | 0, 0) | 0;
   i115 = _i64Add(i85 | 0, tempRet0 | 0, i115 | 0, 0) | 0;
   i85 = tempRet0;
   i70 = _i64Add(0, i67 | 0, i73 | 0, i70 | 0) | 0;
   i73 = tempRet0;
   i67 = _i64Add(i115 | 0, i85 | 0, (i73 >>> 0 < i67 >>> 0 | (i73 | 0) == (i67 | 0) & i70 >>> 0 < 0) & 1 | 0, 0) | 0;
   i85 = tempRet0;
   if (i62) {
    i114 = _i64Subtract(0, 0, i70 | 0, i73 | 0) | 0;
    i115 = tempRet0;
    i67 = _i64Add((i70 | 0) == 0 & (i73 | 0) == 0 & 1 | 0, 0, ~i67 | 0, ~i85 | 0) | 0;
    i85 = tempRet0;
    i70 = i114;
    i73 = i115;
   }
   i64 = _i64Subtract(i63 | 0, i65 | 0, i70 | 0, i73 | 0) | 0;
   i62 = tempRet0;
   i67 = _i64Add(i61 | 0, i66 | 0, ~i67 | 0, ~i85 | 0) | 0;
   i67 = _i64Add(i67 | 0, tempRet0 | 0, (i70 | 0) == 0 & (i73 | 0) == 0 & 1 | 0, 0) | 0;
   i67 = _i64Add(i67 | 0, tempRet0 | 0, (i62 >>> 0 < i65 >>> 0 | (i62 | 0) == (i65 | 0) & i64 >>> 0 < i63 >>> 0) & 1 | 0, 0) | 0;
   i66 = tempRet0;
   i61 = __ZN20btConvexHullInternal4PoolINS_6VertexEE9newObjectEv(i46) | 0;
   HEAP32[i61 + 100 >> 2] = -1;
   HEAP32[i61 + 104 >> 2] = -1;
   i85 = HEAP32[i27 >> 2] | 0;
   i87 = ((i85 | 0) < 0) << 31 >> 31;
   i89 = ___muldi3(i85 | 0, i87 | 0, i72 | 0, i71 | 0) | 0;
   i90 = tempRet0;
   i88 = (i90 | 0) < 0;
   i91 = _i64Subtract(0, 0, i89 | 0, i90 | 0) | 0;
   i89 = i88 ? i91 : i89;
   i91 = i88 ? tempRet0 : i90;
   if (i86) {
    i90 = _i64Subtract(0, 0, i84 | 0, i83 | 0) | 0;
    i92 = tempRet0;
    i88 = i88 ^ 1;
   } else {
    i90 = i84;
    i92 = i83;
   }
   i113 = ___muldi3(i90 | 0, 0, i89 | 0, 0) | 0;
   i114 = tempRet0;
   i111 = ___muldi3(i92 | 0, 0, i89 | 0, 0) | 0;
   i112 = tempRet0;
   i115 = ___muldi3(i90 | 0, 0, i91 | 0, 0) | 0;
   i89 = tempRet0;
   i90 = ___muldi3(i92 | 0, 0, i91 | 0, 0) | 0;
   i92 = tempRet0;
   i91 = _i64Add(i111 | 0, 0, i115 | 0, 0) | 0;
   i115 = tempRet0;
   i92 = _i64Add(i112 | 0, 0, i90 | 0, i92 | 0) | 0;
   i92 = _i64Add(i92 | 0, tempRet0 | 0, i89 | 0, 0) | 0;
   i115 = _i64Add(i92 | 0, tempRet0 | 0, i115 | 0, 0) | 0;
   i92 = tempRet0;
   i89 = _i64Add(0, i91 | 0, i113 | 0, i114 | 0) | 0;
   i90 = tempRet0;
   i91 = _i64Add(i115 | 0, i92 | 0, (i90 >>> 0 < i91 >>> 0 | (i90 | 0) == (i91 | 0) & i89 >>> 0 < 0) & 1 | 0, 0) | 0;
   i92 = tempRet0;
   if (i88) {
    i114 = _i64Subtract(0, 0, i89 | 0, i90 | 0) | 0;
    i115 = tempRet0;
    i91 = _i64Add((i89 | 0) == 0 & (i90 | 0) == 0 & 1 | 0, 0, ~i91 | 0, ~i92 | 0) | 0;
    i89 = i114;
    i90 = i115;
    i92 = tempRet0;
   }
   i93 = ___muldi3(i85 | 0, i87 | 0, i78 | 0, i79 | 0) | 0;
   i87 = tempRet0;
   i85 = (i87 | 0) < 0;
   i88 = _i64Subtract(0, 0, i93 | 0, i87 | 0) | 0;
   i88 = i85 ? i88 : i93;
   i113 = i85 ? tempRet0 : i87;
   i98 = ___muldi3(i88 | 0, 0, i81 | 0, 0) | 0;
   i95 = tempRet0;
   i115 = ___muldi3(i88 | 0, 0, i82 | 0, 0) | 0;
   i112 = tempRet0;
   i93 = ___muldi3(i113 | 0, 0, i81 | 0, 0) | 0;
   i94 = tempRet0;
   i113 = ___muldi3(i113 | 0, 0, i82 | 0, 0) | 0;
   i114 = tempRet0;
   i93 = _i64Add(i115 | 0, 0, i93 | 0, 0) | 0;
   i115 = tempRet0;
   i114 = _i64Add(i112 | 0, 0, i113 | 0, i114 | 0) | 0;
   i94 = _i64Add(i114 | 0, tempRet0 | 0, i94 | 0, 0) | 0;
   i115 = _i64Add(i94 | 0, tempRet0 | 0, i115 | 0, 0) | 0;
   i94 = tempRet0;
   i95 = _i64Add(0, i93 | 0, i98 | 0, i95 | 0) | 0;
   i98 = tempRet0;
   i93 = _i64Add(i115 | 0, i94 | 0, (i98 >>> 0 < i93 >>> 0 | (i98 | 0) == (i93 | 0) & i95 >>> 0 < 0) & 1 | 0, 0) | 0;
   i94 = tempRet0;
   if (i85 ^ i80) {
    i114 = _i64Subtract(0, 0, i95 | 0, i98 | 0) | 0;
    i115 = tempRet0;
    i93 = _i64Add((i95 | 0) == 0 & (i98 | 0) == 0 & 1 | 0, 0, ~i93 | 0, ~i94 | 0) | 0;
    i94 = tempRet0;
    i95 = i114;
    i98 = i115;
   }
   i97 = _i64Subtract(i89 | 0, i90 | 0, i95 | 0, i98 | 0) | 0;
   i96 = tempRet0;
   i87 = HEAP32[i30 >> 2] | 0;
   i85 = ((i87 | 0) < 0) << 31 >> 31;
   i100 = ___muldi3(i87 | 0, i85 | 0, i78 | 0, i79 | 0) | 0;
   i99 = tempRet0;
   i88 = (i99 | 0) < 0;
   i101 = _i64Subtract(0, 0, i100 | 0, i99 | 0) | 0;
   i100 = i88 ? i101 : i100;
   i113 = i88 ? tempRet0 : i99;
   i101 = ___muldi3(i100 | 0, 0, i76 | 0, 0) | 0;
   i102 = tempRet0;
   i115 = ___muldi3(i100 | 0, 0, i77 | 0, 0) | 0;
   i112 = tempRet0;
   i99 = ___muldi3(i113 | 0, 0, i76 | 0, 0) | 0;
   i100 = tempRet0;
   i113 = ___muldi3(i113 | 0, 0, i77 | 0, 0) | 0;
   i114 = tempRet0;
   i99 = _i64Add(i115 | 0, 0, i99 | 0, 0) | 0;
   i115 = tempRet0;
   i114 = _i64Add(i112 | 0, 0, i113 | 0, i114 | 0) | 0;
   i100 = _i64Add(i114 | 0, tempRet0 | 0, i100 | 0, 0) | 0;
   i115 = _i64Add(i100 | 0, tempRet0 | 0, i115 | 0, 0) | 0;
   i100 = tempRet0;
   i102 = _i64Add(0, i99 | 0, i101 | 0, i102 | 0) | 0;
   i101 = tempRet0;
   i99 = _i64Add(i115 | 0, i100 | 0, (i101 >>> 0 < i99 >>> 0 | (i101 | 0) == (i99 | 0) & i102 >>> 0 < 0) & 1 | 0, 0) | 0;
   i100 = tempRet0;
   if (i88 ^ i74) {
    i88 = _i64Subtract(0, 0, i102 | 0, i101 | 0) | 0;
    i115 = tempRet0;
    i99 = _i64Add((i102 | 0) == 0 & (i101 | 0) == 0 & 1 | 0, 0, ~i99 | 0, ~i100 | 0) | 0;
    i101 = i115;
    i100 = tempRet0;
   } else {
    i88 = i102;
   }
   i101 = _i64Add(i88 | 0, i101 | 0, i97 | 0, i96 | 0) | 0;
   i102 = tempRet0;
   i87 = ___muldi3(i87 | 0, i85 | 0, i72 | 0, i71 | 0) | 0;
   i88 = tempRet0;
   i85 = (i88 | 0) < 0;
   i103 = _i64Subtract(0, 0, i87 | 0, i88 | 0) | 0;
   i87 = i85 ? i103 : i87;
   i88 = i85 ? tempRet0 : i88;
   if (i75) {
    i104 = _i64Subtract(0, 0, i69 | 0, i68 | 0) | 0;
    i103 = tempRet0;
    i85 = i85 ^ 1;
   } else {
    i104 = i69;
    i103 = i68;
   }
   i106 = ___muldi3(i104 | 0, 0, i87 | 0, 0) | 0;
   i105 = tempRet0;
   i111 = ___muldi3(i103 | 0, 0, i87 | 0, 0) | 0;
   i112 = tempRet0;
   i115 = ___muldi3(i104 | 0, 0, i88 | 0, 0) | 0;
   i104 = tempRet0;
   i113 = ___muldi3(i103 | 0, 0, i88 | 0, 0) | 0;
   i114 = tempRet0;
   i103 = _i64Add(i111 | 0, 0, i115 | 0, 0) | 0;
   i115 = tempRet0;
   i114 = _i64Add(i112 | 0, 0, i113 | 0, i114 | 0) | 0;
   i104 = _i64Add(i114 | 0, tempRet0 | 0, i104 | 0, 0) | 0;
   i115 = _i64Add(i104 | 0, tempRet0 | 0, i115 | 0, 0) | 0;
   i104 = tempRet0;
   i105 = _i64Add(0, i103 | 0, i106 | 0, i105 | 0) | 0;
   i106 = tempRet0;
   i103 = _i64Add(i115 | 0, i104 | 0, (i106 >>> 0 < i103 >>> 0 | (i106 | 0) == (i103 | 0) & i105 >>> 0 < 0) & 1 | 0, 0) | 0;
   i104 = tempRet0;
   if (i85) {
    i114 = _i64Subtract(0, 0, i105 | 0, i106 | 0) | 0;
    i115 = tempRet0;
    i103 = _i64Add((i105 | 0) == 0 & (i106 | 0) == 0 & 1 | 0, 0, ~i103 | 0, ~i104 | 0) | 0;
    i104 = tempRet0;
    i105 = i114;
    i106 = i115;
   }
   i107 = _i64Subtract(i101 | 0, i102 | 0, i105 | 0, i106 | 0) | 0;
   i108 = tempRet0;
   i85 = (i66 | 0) < 0;
   if (i85) {
    i88 = _i64Subtract(0, 0, i64 | 0, i62 | 0) | 0;
    i87 = tempRet0;
    i111 = _i64Add((i63 | 0) == (i70 | 0) & (i65 | 0) == (i73 | 0) & 1 | 0, 0, ~i67 | 0, ~i66 | 0) | 0;
    i110 = tempRet0;
   } else {
    i88 = i64;
    i87 = i62;
    i111 = i67;
    i110 = i66;
   }
   i109 = i42 ? i45 : i9;
   i122 = i42 ? i44 : i33;
   i124 = ___muldi3(i109 | 0, 0, i88 | 0, 0) | 0;
   i123 = tempRet0;
   i114 = ___muldi3(i122 | 0, 0, i88 | 0, 0) | 0;
   i112 = tempRet0;
   i115 = ___muldi3(i109 | 0, 0, i87 | 0, 0) | 0;
   i113 = tempRet0;
   i121 = ___muldi3(i122 | 0, 0, i87 | 0, 0) | 0;
   i120 = tempRet0;
   i115 = _i64Add(i114 | 0, 0, i115 | 0, 0) | 0;
   i114 = tempRet0;
   i88 = _i64Add(0, i115 | 0, i124 | 0, i123 | 0) | 0;
   i87 = tempRet0;
   i109 = ___muldi3(i109 | 0, i122 | 0, i111 | 0, i110 | 0) | 0;
   i109 = _i64Add(i121 | 0, i120 | 0, i109 | 0, tempRet0 | 0) | 0;
   i109 = _i64Add(i109 | 0, tempRet0 | 0, i112 | 0, 0) | 0;
   i109 = _i64Add(i109 | 0, tempRet0 | 0, i113 | 0, 0) | 0;
   i109 = _i64Add(i109 | 0, tempRet0 | 0, i114 | 0, 0) | 0;
   i109 = _i64Add(i109 | 0, tempRet0 | 0, (i87 >>> 0 < i115 >>> 0 | (i87 | 0) == (i115 | 0) & i88 >>> 0 < 0) & 1 | 0, 0) | 0;
   i110 = tempRet0;
   if (i85 ^ i42) {
    i123 = _i64Subtract(0, 0, i88 | 0, i87 | 0) | 0;
    i124 = tempRet0;
    i109 = _i64Add((i88 | 0) == 0 & (i87 | 0) == 0 & 1 | 0, 0, ~i109 | 0, ~i110 | 0) | 0;
    i88 = i123;
    i87 = i124;
    i110 = tempRet0;
   }
   i88 = _i64Add(i88 | 0, i87 | 0, i107 | 0, i108 | 0) | 0;
   i87 = tempRet0;
   i92 = _i64Add(i91 | 0, i92 | 0, ~i93 | 0, ~i94 | 0) | 0;
   i92 = _i64Add(i92 | 0, tempRet0 | 0, (i95 | 0) == 0 & (i98 | 0) == 0 & 1 | 0, 0) | 0;
   i90 = _i64Add(i92 | 0, tempRet0 | 0, (i96 >>> 0 < i90 >>> 0 | (i96 | 0) == (i90 | 0) & i97 >>> 0 < i89 >>> 0) & 1 | 0, 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, i99 | 0, i100 | 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, (i102 >>> 0 < i96 >>> 0 | (i102 | 0) == (i96 | 0) & i101 >>> 0 < i97 >>> 0) & 1 | 0, 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, ~i103 | 0, ~i104 | 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, (i105 | 0) == 0 & (i106 | 0) == 0 & 1 | 0, 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, (i108 >>> 0 < i102 >>> 0 | (i108 | 0) == (i102 | 0) & i107 >>> 0 < i101 >>> 0) & 1 | 0, 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, i109 | 0, i110 | 0) | 0;
   i90 = _i64Add(i90 | 0, tempRet0 | 0, (i87 >>> 0 < i108 >>> 0 | (i87 | 0) == (i108 | 0) & i88 >>> 0 < i107 >>> 0) & 1 | 0, 0) | 0;
   i89 = tempRet0;
   i92 = HEAP32[i28 >> 2] | 0;
   i91 = ((i92 | 0) < 0) << 31 >> 31;
   i95 = ___muldi3(i92 | 0, i91 | 0, i72 | 0, i71 | 0) | 0;
   i94 = tempRet0;
   i97 = (i94 | 0) < 0;
   i93 = _i64Subtract(0, 0, i95 | 0, i94 | 0) | 0;
   i93 = i97 ? i93 : i95;
   i94 = i97 ? tempRet0 : i94;
   if (i86) {
    i95 = _i64Subtract(0, 0, i84 | 0, i83 | 0) | 0;
    i96 = tempRet0;
    i97 = i97 ^ 1;
   } else {
    i95 = i84;
    i96 = i83;
   }
   i122 = ___muldi3(i95 | 0, 0, i93 | 0, 0) | 0;
   i123 = tempRet0;
   i124 = ___muldi3(i96 | 0, 0, i93 | 0, 0) | 0;
   i121 = tempRet0;
   i93 = ___muldi3(i95 | 0, 0, i94 | 0, 0) | 0;
   i95 = tempRet0;
   i96 = ___muldi3(i96 | 0, 0, i94 | 0, 0) | 0;
   i94 = tempRet0;
   i93 = _i64Add(i124 | 0, 0, i93 | 0, 0) | 0;
   i124 = tempRet0;
   i94 = _i64Add(i121 | 0, 0, i96 | 0, i94 | 0) | 0;
   i94 = _i64Add(i94 | 0, tempRet0 | 0, i95 | 0, 0) | 0;
   i124 = _i64Add(i94 | 0, tempRet0 | 0, i124 | 0, 0) | 0;
   i94 = tempRet0;
   i95 = _i64Add(0, i93 | 0, i122 | 0, i123 | 0) | 0;
   i96 = tempRet0;
   i93 = _i64Add(i124 | 0, i94 | 0, (i96 >>> 0 < i93 >>> 0 | (i96 | 0) == (i93 | 0) & i95 >>> 0 < 0) & 1 | 0, 0) | 0;
   i94 = tempRet0;
   if (i97) {
    i123 = _i64Subtract(0, 0, i95 | 0, i96 | 0) | 0;
    i124 = tempRet0;
    i93 = _i64Add((i95 | 0) == 0 & (i96 | 0) == 0 & 1 | 0, 0, ~i93 | 0, ~i94 | 0) | 0;
    i94 = tempRet0;
    i95 = i123;
    i96 = i124;
   }
   i97 = ___muldi3(i92 | 0, i91 | 0, i78 | 0, i79 | 0) | 0;
   i92 = tempRet0;
   i91 = (i92 | 0) < 0;
   i98 = _i64Subtract(0, 0, i97 | 0, i92 | 0) | 0;
   i97 = i91 ? i98 : i97;
   i122 = i91 ? tempRet0 : i92;
   i100 = ___muldi3(i97 | 0, 0, i81 | 0, 0) | 0;
   i99 = tempRet0;
   i124 = ___muldi3(i97 | 0, 0, i82 | 0, 0) | 0;
   i121 = tempRet0;
   i97 = ___muldi3(i122 | 0, 0, i81 | 0, 0) | 0;
   i98 = tempRet0;
   i122 = ___muldi3(i122 | 0, 0, i82 | 0, 0) | 0;
   i123 = tempRet0;
   i97 = _i64Add(i124 | 0, 0, i97 | 0, 0) | 0;
   i124 = tempRet0;
   i123 = _i64Add(i121 | 0, 0, i122 | 0, i123 | 0) | 0;
   i98 = _i64Add(i123 | 0, tempRet0 | 0, i98 | 0, 0) | 0;
   i124 = _i64Add(i98 | 0, tempRet0 | 0, i124 | 0, 0) | 0;
   i98 = tempRet0;
   i99 = _i64Add(0, i97 | 0, i100 | 0, i99 | 0) | 0;
   i100 = tempRet0;
   i97 = _i64Add(i124 | 0, i98 | 0, (i100 >>> 0 < i97 >>> 0 | (i100 | 0) == (i97 | 0) & i99 >>> 0 < 0) & 1 | 0, 0) | 0;
   i98 = tempRet0;
   if (i91 ^ i80) {
    i123 = _i64Subtract(0, 0, i99 | 0, i100 | 0) | 0;
    i124 = tempRet0;
    i97 = _i64Add((i99 | 0) == 0 & (i100 | 0) == 0 & 1 | 0, 0, ~i97 | 0, ~i98 | 0) | 0;
    i98 = tempRet0;
    i99 = i123;
    i100 = i124;
   }
   i102 = _i64Subtract(i95 | 0, i96 | 0, i99 | 0, i100 | 0) | 0;
   i101 = tempRet0;
   i91 = HEAP32[i31 >> 2] | 0;
   i92 = ((i91 | 0) < 0) << 31 >> 31;
   i106 = ___muldi3(i91 | 0, i92 | 0, i78 | 0, i79 | 0) | 0;
   i103 = tempRet0;
   i105 = (i103 | 0) < 0;
   i104 = _i64Subtract(0, 0, i106 | 0, i103 | 0) | 0;
   i104 = i105 ? i104 : i106;
   i122 = i105 ? tempRet0 : i103;
   i106 = ___muldi3(i104 | 0, 0, i76 | 0, 0) | 0;
   i107 = tempRet0;
   i124 = ___muldi3(i104 | 0, 0, i77 | 0, 0) | 0;
   i121 = tempRet0;
   i103 = ___muldi3(i122 | 0, 0, i76 | 0, 0) | 0;
   i104 = tempRet0;
   i122 = ___muldi3(i122 | 0, 0, i77 | 0, 0) | 0;
   i123 = tempRet0;
   i103 = _i64Add(i124 | 0, 0, i103 | 0, 0) | 0;
   i124 = tempRet0;
   i123 = _i64Add(i121 | 0, 0, i122 | 0, i123 | 0) | 0;
   i104 = _i64Add(i123 | 0, tempRet0 | 0, i104 | 0, 0) | 0;
   i124 = _i64Add(i104 | 0, tempRet0 | 0, i124 | 0, 0) | 0;
   i104 = tempRet0;
   i107 = _i64Add(0, i103 | 0, i106 | 0, i107 | 0) | 0;
   i106 = tempRet0;
   i103 = _i64Add(i124 | 0, i104 | 0, (i106 >>> 0 < i103 >>> 0 | (i106 | 0) == (i103 | 0) & i107 >>> 0 < 0) & 1 | 0, 0) | 0;
   i104 = tempRet0;
   if (i105 ^ i74) {
    i105 = _i64Subtract(0, 0, i107 | 0, i106 | 0) | 0;
    i124 = tempRet0;
    i103 = _i64Add((i107 | 0) == 0 & (i106 | 0) == 0 & 1 | 0, 0, ~i103 | 0, ~i104 | 0) | 0;
    i106 = i124;
    i104 = tempRet0;
   } else {
    i105 = i107;
   }
   i106 = _i64Add(i105 | 0, i106 | 0, i102 | 0, i101 | 0) | 0;
   i105 = tempRet0;
   i92 = ___muldi3(i91 | 0, i92 | 0, i72 | 0, i71 | 0) | 0;
   i107 = tempRet0;
   i91 = (i107 | 0) < 0;
   i108 = _i64Subtract(0, 0, i92 | 0, i107 | 0) | 0;
   i92 = i91 ? i108 : i92;
   i109 = i91 ? tempRet0 : i107;
   if (i75) {
    i107 = _i64Subtract(0, 0, i69 | 0, i68 | 0) | 0;
    i108 = tempRet0;
    i91 = i91 ^ 1;
   } else {
    i107 = i69;
    i108 = i68;
   }
   i123 = ___muldi3(i107 | 0, 0, i92 | 0, 0) | 0;
   i110 = tempRet0;
   i124 = ___muldi3(i108 | 0, 0, i92 | 0, 0) | 0;
   i121 = tempRet0;
   i107 = ___muldi3(i107 | 0, 0, i109 | 0, 0) | 0;
   i122 = tempRet0;
   i109 = ___muldi3(i108 | 0, 0, i109 | 0, 0) | 0;
   i108 = tempRet0;
   i107 = _i64Add(i124 | 0, 0, i107 | 0, 0) | 0;
   i124 = tempRet0;
   i108 = _i64Add(i121 | 0, 0, i109 | 0, i108 | 0) | 0;
   i108 = _i64Add(i108 | 0, tempRet0 | 0, i122 | 0, 0) | 0;
   i124 = _i64Add(i108 | 0, tempRet0 | 0, i124 | 0, 0) | 0;
   i108 = tempRet0;
   i109 = _i64Add(0, i107 | 0, i123 | 0, i110 | 0) | 0;
   i110 = tempRet0;
   i107 = _i64Add(i124 | 0, i108 | 0, (i110 >>> 0 < i107 >>> 0 | (i110 | 0) == (i107 | 0) & i109 >>> 0 < 0) & 1 | 0, 0) | 0;
   i108 = tempRet0;
   if (i91) {
    i123 = _i64Subtract(0, 0, i109 | 0, i110 | 0) | 0;
    i124 = tempRet0;
    i107 = _i64Add((i109 | 0) == 0 & (i110 | 0) == 0 & 1 | 0, 0, ~i107 | 0, ~i108 | 0) | 0;
    i108 = tempRet0;
    i109 = i123;
    i110 = i124;
   }
   i112 = _i64Subtract(i106 | 0, i105 | 0, i109 | 0, i110 | 0) | 0;
   i111 = tempRet0;
   if (i85) {
    i92 = _i64Subtract(0, 0, i64 | 0, i62 | 0) | 0;
    i91 = tempRet0;
    i114 = _i64Add((i63 | 0) == (i70 | 0) & (i65 | 0) == (i73 | 0) & 1 | 0, 0, ~i67 | 0, ~i66 | 0) | 0;
    i113 = tempRet0;
   } else {
    i92 = i64;
    i91 = i62;
    i114 = i67;
    i113 = i66;
   }
   i115 = i37 ? i38 : i10;
   i126 = i37 ? i40 : i35;
   i128 = ___muldi3(i115 | 0, 0, i92 | 0, 0) | 0;
   i127 = tempRet0;
   i123 = ___muldi3(i126 | 0, 0, i92 | 0, 0) | 0;
   i121 = tempRet0;
   i124 = ___muldi3(i115 | 0, 0, i91 | 0, 0) | 0;
   i122 = tempRet0;
   i125 = ___muldi3(i126 | 0, 0, i91 | 0, 0) | 0;
   i120 = tempRet0;
   i124 = _i64Add(i123 | 0, 0, i124 | 0, 0) | 0;
   i123 = tempRet0;
   i92 = _i64Add(0, i124 | 0, i128 | 0, i127 | 0) | 0;
   i91 = tempRet0;
   i113 = ___muldi3(i115 | 0, i126 | 0, i114 | 0, i113 | 0) | 0;
   i113 = _i64Add(i125 | 0, i120 | 0, i113 | 0, tempRet0 | 0) | 0;
   i113 = _i64Add(i113 | 0, tempRet0 | 0, i121 | 0, 0) | 0;
   i113 = _i64Add(i113 | 0, tempRet0 | 0, i122 | 0, 0) | 0;
   i113 = _i64Add(i113 | 0, tempRet0 | 0, i123 | 0, 0) | 0;
   i113 = _i64Add(i113 | 0, tempRet0 | 0, (i91 >>> 0 < i124 >>> 0 | (i91 | 0) == (i124 | 0) & i92 >>> 0 < 0) & 1 | 0, 0) | 0;
   i114 = tempRet0;
   if (i85 ^ i37) {
    i127 = _i64Subtract(0, 0, i92 | 0, i91 | 0) | 0;
    i128 = tempRet0;
    i113 = _i64Add((i92 | 0) == 0 & (i91 | 0) == 0 & 1 | 0, 0, ~i113 | 0, ~i114 | 0) | 0;
    i92 = i127;
    i91 = i128;
    i114 = tempRet0;
   }
   i91 = _i64Add(i92 | 0, i91 | 0, i112 | 0, i111 | 0) | 0;
   i92 = tempRet0;
   i93 = _i64Add(i93 | 0, i94 | 0, ~i97 | 0, ~i98 | 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, (i99 | 0) == 0 & (i100 | 0) == 0 & 1 | 0, 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, (i101 >>> 0 < i96 >>> 0 | (i101 | 0) == (i96 | 0) & i102 >>> 0 < i95 >>> 0) & 1 | 0, 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, i103 | 0, i104 | 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, (i105 >>> 0 < i101 >>> 0 | (i105 | 0) == (i101 | 0) & i106 >>> 0 < i102 >>> 0) & 1 | 0, 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, ~i107 | 0, ~i108 | 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, (i109 | 0) == 0 & (i110 | 0) == 0 & 1 | 0, 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, (i111 >>> 0 < i105 >>> 0 | (i111 | 0) == (i105 | 0) & i112 >>> 0 < i106 >>> 0) & 1 | 0, 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, i113 | 0, i114 | 0) | 0;
   i93 = _i64Add(i93 | 0, tempRet0 | 0, (i92 >>> 0 < i111 >>> 0 | (i92 | 0) == (i111 | 0) & i91 >>> 0 < i112 >>> 0) & 1 | 0, 0) | 0;
   i94 = tempRet0;
   i96 = HEAP32[i29 >> 2] | 0;
   i97 = ((i96 | 0) < 0) << 31 >> 31;
   i100 = ___muldi3(i96 | 0, i97 | 0, i72 | 0, i71 | 0) | 0;
   i99 = tempRet0;
   i95 = (i99 | 0) < 0;
   i98 = _i64Subtract(0, 0, i100 | 0, i99 | 0) | 0;
   i98 = i95 ? i98 : i100;
   i100 = i95 ? tempRet0 : i99;
   if (i86) {
    i84 = _i64Subtract(0, 0, i84 | 0, i83 | 0) | 0;
    i83 = tempRet0;
    i99 = i95 ^ 1;
   } else {
    i99 = i95;
   }
   i126 = ___muldi3(i84 | 0, 0, i98 | 0, 0) | 0;
   i127 = tempRet0;
   i128 = ___muldi3(i83 | 0, 0, i98 | 0, 0) | 0;
   i125 = tempRet0;
   i86 = ___muldi3(i84 | 0, 0, i100 | 0, 0) | 0;
   i95 = tempRet0;
   i84 = ___muldi3(i83 | 0, 0, i100 | 0, 0) | 0;
   i83 = tempRet0;
   i86 = _i64Add(i128 | 0, 0, i86 | 0, 0) | 0;
   i128 = tempRet0;
   i83 = _i64Add(i125 | 0, 0, i84 | 0, i83 | 0) | 0;
   i95 = _i64Add(i83 | 0, tempRet0 | 0, i95 | 0, 0) | 0;
   i128 = _i64Add(i95 | 0, tempRet0 | 0, i128 | 0, 0) | 0;
   i95 = tempRet0;
   i83 = _i64Add(0, i86 | 0, i126 | 0, i127 | 0) | 0;
   i84 = tempRet0;
   i86 = _i64Add(i128 | 0, i95 | 0, (i84 >>> 0 < i86 >>> 0 | (i84 | 0) == (i86 | 0) & i83 >>> 0 < 0) & 1 | 0, 0) | 0;
   i95 = tempRet0;
   if (i99) {
    i127 = _i64Subtract(0, 0, i83 | 0, i84 | 0) | 0;
    i128 = tempRet0;
    i86 = _i64Add((i83 | 0) == 0 & (i84 | 0) == 0 & 1 | 0, 0, ~i86 | 0, ~i95 | 0) | 0;
    i83 = i127;
    i84 = i128;
    i95 = tempRet0;
   }
   i98 = ___muldi3(i96 | 0, i97 | 0, i78 | 0, i79 | 0) | 0;
   i97 = tempRet0;
   i96 = (i97 | 0) < 0;
   i99 = _i64Subtract(0, 0, i98 | 0, i97 | 0) | 0;
   i98 = i96 ? i99 : i98;
   i124 = i96 ? tempRet0 : i97;
   i126 = ___muldi3(i98 | 0, 0, i81 | 0, 0) | 0;
   i127 = tempRet0;
   i128 = ___muldi3(i98 | 0, 0, i82 | 0, 0) | 0;
   i125 = tempRet0;
   i97 = ___muldi3(i124 | 0, 0, i81 | 0, 0) | 0;
   i81 = tempRet0;
   i98 = ___muldi3(i124 | 0, 0, i82 | 0, 0) | 0;
   i82 = tempRet0;
   i97 = _i64Add(i128 | 0, 0, i97 | 0, 0) | 0;
   i128 = tempRet0;
   i82 = _i64Add(i125 | 0, 0, i98 | 0, i82 | 0) | 0;
   i81 = _i64Add(i82 | 0, tempRet0 | 0, i81 | 0, 0) | 0;
   i128 = _i64Add(i81 | 0, tempRet0 | 0, i128 | 0, 0) | 0;
   i81 = tempRet0;
   i82 = _i64Add(0, i97 | 0, i126 | 0, i127 | 0) | 0;
   i98 = tempRet0;
   i97 = _i64Add(i128 | 0, i81 | 0, (i98 >>> 0 < i97 >>> 0 | (i98 | 0) == (i97 | 0) & i82 >>> 0 < 0) & 1 | 0, 0) | 0;
   i81 = tempRet0;
   if (i96 ^ i80) {
    i127 = _i64Subtract(0, 0, i82 | 0, i98 | 0) | 0;
    i128 = tempRet0;
    i80 = _i64Add((i82 | 0) == 0 & (i98 | 0) == 0 & 1 | 0, 0, ~i97 | 0, ~i81 | 0) | 0;
    i81 = tempRet0;
    i82 = i127;
    i98 = i128;
   } else {
    i80 = i97;
   }
   i97 = _i64Subtract(i83 | 0, i84 | 0, i82 | 0, i98 | 0) | 0;
   i96 = tempRet0;
   i99 = HEAP32[i26 >> 2] | 0;
   i100 = ((i99 | 0) < 0) << 31 >> 31;
   i101 = ___muldi3(i99 | 0, i100 | 0, i78 | 0, i79 | 0) | 0;
   i79 = tempRet0;
   i78 = (i79 | 0) < 0;
   i102 = _i64Subtract(0, 0, i101 | 0, i79 | 0) | 0;
   i101 = i78 ? i102 : i101;
   i126 = i78 ? tempRet0 : i79;
   i127 = ___muldi3(i101 | 0, 0, i76 | 0, 0) | 0;
   i79 = tempRet0;
   i124 = ___muldi3(i101 | 0, 0, i77 | 0, 0) | 0;
   i125 = tempRet0;
   i128 = ___muldi3(i126 | 0, 0, i76 | 0, 0) | 0;
   i76 = tempRet0;
   i126 = ___muldi3(i126 | 0, 0, i77 | 0, 0) | 0;
   i101 = tempRet0;
   i77 = _i64Add(i124 | 0, 0, i128 | 0, 0) | 0;
   i128 = tempRet0;
   i101 = _i64Add(i125 | 0, 0, i126 | 0, i101 | 0) | 0;
   i76 = _i64Add(i101 | 0, tempRet0 | 0, i76 | 0, 0) | 0;
   i128 = _i64Add(i76 | 0, tempRet0 | 0, i128 | 0, 0) | 0;
   i76 = tempRet0;
   i101 = _i64Add(0, i77 | 0, i127 | 0, i79 | 0) | 0;
   i79 = tempRet0;
   i77 = _i64Add(i128 | 0, i76 | 0, (i79 >>> 0 < i77 >>> 0 | (i79 | 0) == (i77 | 0) & i101 >>> 0 < 0) & 1 | 0, 0) | 0;
   i76 = tempRet0;
   if (i78 ^ i74) {
    i78 = _i64Subtract(0, 0, i101 | 0, i79 | 0) | 0;
    i128 = tempRet0;
    i74 = _i64Add((i101 | 0) == 0 & (i79 | 0) == 0 & 1 | 0, 0, ~i77 | 0, ~i76 | 0) | 0;
    i79 = i128;
    i76 = tempRet0;
   } else {
    i78 = i101;
    i74 = i77;
   }
   i77 = _i64Add(i78 | 0, i79 | 0, i97 | 0, i96 | 0) | 0;
   i78 = tempRet0;
   i72 = ___muldi3(i99 | 0, i100 | 0, i72 | 0, i71 | 0) | 0;
   i79 = tempRet0;
   i71 = (i79 | 0) < 0;
   i99 = _i64Subtract(0, 0, i72 | 0, i79 | 0) | 0;
   i72 = i71 ? i99 : i72;
   i79 = i71 ? tempRet0 : i79;
   if (i75) {
    i69 = _i64Subtract(0, 0, i69 | 0, i68 | 0) | 0;
    i68 = tempRet0;
    i99 = i71 ^ 1;
   } else {
    i99 = i71;
   }
   i75 = ___muldi3(i69 | 0, 0, i72 | 0, 0) | 0;
   i71 = tempRet0;
   i124 = ___muldi3(i68 | 0, 0, i72 | 0, 0) | 0;
   i125 = tempRet0;
   i128 = ___muldi3(i69 | 0, 0, i79 | 0, 0) | 0;
   i69 = tempRet0;
   i126 = ___muldi3(i68 | 0, 0, i79 | 0, 0) | 0;
   i127 = tempRet0;
   i68 = _i64Add(i124 | 0, 0, i128 | 0, 0) | 0;
   i128 = tempRet0;
   i127 = _i64Add(i125 | 0, 0, i126 | 0, i127 | 0) | 0;
   i69 = _i64Add(i127 | 0, tempRet0 | 0, i69 | 0, 0) | 0;
   i128 = _i64Add(i69 | 0, tempRet0 | 0, i128 | 0, 0) | 0;
   i69 = tempRet0;
   i71 = _i64Add(0, i68 | 0, i75 | 0, i71 | 0) | 0;
   i75 = tempRet0;
   i68 = _i64Add(i128 | 0, i69 | 0, (i75 >>> 0 < i68 >>> 0 | (i75 | 0) == (i68 | 0) & i71 >>> 0 < 0) & 1 | 0, 0) | 0;
   i69 = tempRet0;
   if (i99) {
    i127 = _i64Subtract(0, 0, i71 | 0, i75 | 0) | 0;
    i128 = tempRet0;
    i68 = _i64Add((i71 | 0) == 0 & (i75 | 0) == 0 & 1 | 0, 0, ~i68 | 0, ~i69 | 0) | 0;
    i69 = tempRet0;
    i71 = i127;
    i75 = i128;
   }
   i72 = _i64Subtract(i77 | 0, i78 | 0, i71 | 0, i75 | 0) | 0;
   i79 = tempRet0;
   if (i85) {
    i127 = _i64Subtract(0, 0, i64 | 0, i62 | 0) | 0;
    i128 = tempRet0;
    i99 = _i64Add((i63 | 0) == (i70 | 0) & (i65 | 0) == (i73 | 0) & 1 | 0, 0, ~i67 | 0, ~i66 | 0) | 0;
    i65 = i127;
    i63 = i128;
    i73 = tempRet0;
   } else {
    i65 = i64;
    i63 = i62;
    i99 = i67;
    i73 = i66;
   }
   i70 = i43 ? i39 : i11;
   i122 = i43 ? i41 : i34;
   i120 = ___muldi3(i70 | 0, 0, i65 | 0, 0) | 0;
   i121 = tempRet0;
   i127 = ___muldi3(i122 | 0, 0, i65 | 0, 0) | 0;
   i125 = tempRet0;
   i128 = ___muldi3(i70 | 0, 0, i63 | 0, 0) | 0;
   i126 = tempRet0;
   i123 = ___muldi3(i122 | 0, 0, i63 | 0, 0) | 0;
   i124 = tempRet0;
   i128 = _i64Add(i127 | 0, 0, i128 | 0, 0) | 0;
   i127 = tempRet0;
   i65 = _i64Add(0, i128 | 0, i120 | 0, i121 | 0) | 0;
   i63 = tempRet0;
   i73 = ___muldi3(i70 | 0, i122 | 0, i99 | 0, i73 | 0) | 0;
   i73 = _i64Add(i123 | 0, i124 | 0, i73 | 0, tempRet0 | 0) | 0;
   i73 = _i64Add(i73 | 0, tempRet0 | 0, i125 | 0, 0) | 0;
   i73 = _i64Add(i73 | 0, tempRet0 | 0, i126 | 0, 0) | 0;
   i73 = _i64Add(i73 | 0, tempRet0 | 0, i127 | 0, 0) | 0;
   i73 = _i64Add(i73 | 0, tempRet0 | 0, (i63 >>> 0 < i128 >>> 0 | (i63 | 0) == (i128 | 0) & i65 >>> 0 < 0) & 1 | 0, 0) | 0;
   i70 = tempRet0;
   if (i85 ^ i43) {
    i127 = _i64Subtract(0, 0, i65 | 0, i63 | 0) | 0;
    i128 = tempRet0;
    i73 = _i64Add((i65 | 0) == 0 & (i63 | 0) == 0 & 1 | 0, 0, ~i73 | 0, ~i70 | 0) | 0;
    i65 = i127;
    i63 = i128;
    i70 = tempRet0;
   }
   i126 = _i64Add(i65 | 0, i63 | 0, i72 | 0, i79 | 0) | 0;
   i127 = tempRet0;
   i128 = _i64Add(i86 | 0, i95 | 0, ~i80 | 0, ~i81 | 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, (i82 | 0) == 0 & (i98 | 0) == 0 & 1 | 0, 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, (i96 >>> 0 < i84 >>> 0 | (i96 | 0) == (i84 | 0) & i97 >>> 0 < i83 >>> 0) & 1 | 0, 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, i74 | 0, i76 | 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, (i78 >>> 0 < i96 >>> 0 | (i78 | 0) == (i96 | 0) & i77 >>> 0 < i97 >>> 0) & 1 | 0, 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, ~i68 | 0, ~i69 | 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, (i71 | 0) == 0 & (i75 | 0) == 0 & 1 | 0, 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, (i79 >>> 0 < i78 >>> 0 | (i79 | 0) == (i78 | 0) & i72 >>> 0 < i77 >>> 0) & 1 | 0, 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, i73 | 0, i70 | 0) | 0;
   i128 = _i64Add(i128 | 0, tempRet0 | 0, (i127 >>> 0 < i79 >>> 0 | (i127 | 0) == (i79 | 0) & i126 >>> 0 < i72 >>> 0) & 1 | 0, 0) | 0;
   i63 = i61 + 24 | 0;
   HEAP32[i63 >> 2] = i88;
   HEAP32[i63 + 4 >> 2] = i87;
   i63 = i61 + 32 | 0;
   HEAP32[i63 >> 2] = i90;
   HEAP32[i63 + 4 >> 2] = i89;
   i63 = i61 + 40 | 0;
   HEAP32[i63 >> 2] = i91;
   HEAP32[i63 + 4 >> 2] = i92;
   i63 = i61 + 48 | 0;
   HEAP32[i63 >> 2] = i93;
   HEAP32[i63 + 4 >> 2] = i94;
   i63 = i61 + 56 | 0;
   HEAP32[i63 >> 2] = i126;
   HEAP32[i63 + 4 >> 2] = i127;
   i63 = i61 + 64 | 0;
   HEAP32[i63 >> 2] = i128;
   HEAP32[i63 + 4 >> 2] = tempRet0;
   i63 = i61 + 72 | 0;
   HEAP32[i63 >> 2] = i64;
   HEAP32[i63 + 4 >> 2] = i62;
   i63 = i61 + 80 | 0;
   HEAP32[i63 >> 2] = i67;
   HEAP32[i63 + 4 >> 2] = i66;
   d119 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i61 + 24 | 0);
   i63 = i61 + 72 | 0;
   HEAP32[i61 + 88 >> 2] = ~~(d119 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i63));
   d119 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i61 + 40 | 0);
   HEAP32[i61 + 92 >> 2] = ~~(d119 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i63));
   d119 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i61 + 56 | 0);
   HEAP32[i61 + 96 >> 2] = ~~(d119 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i63));
   HEAP32[i58 >> 2] = i61;
   HEAP32[i61 + 8 >> 2] = i60;
   i63 = HEAP32[i13 >> 2] | 0;
   i60 = HEAP32[i14 >> 2] | 0;
   if ((i63 | 0) == (i60 | 0)) {
    i60 = (i63 | 0) == 0 ? 1 : i63 << 1;
    if ((i63 | 0) < (i60 | 0)) {
     if ((i60 | 0) == 0) {
      i62 = 0;
     } else {
      i62 = __Z22btAlignedAllocInternalji(i60 << 2, 16) | 0;
      i63 = HEAP32[i13 >> 2] | 0;
     }
     if ((i63 | 0) > 0) {
      i65 = 0;
      do {
       i64 = i62 + (i65 << 2) | 0;
       if ((i64 | 0) != 0) {
        HEAP32[i64 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i65 << 2) >> 2];
       }
       i65 = i65 + 1 | 0;
      } while ((i65 | 0) != (i63 | 0));
     }
     i64 = HEAP32[i12 >> 2] | 0;
     if ((i64 | 0) != 0) {
      if ((HEAP8[i15] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i64);
       i63 = HEAP32[i13 >> 2] | 0;
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i15] = 1;
     HEAP32[i12 >> 2] = i62;
     HEAP32[i14 >> 2] = i60;
     i62 = i63;
    } else {
     i62 = i63;
     i60 = i63;
    }
   } else {
    i62 = i63;
   }
   i63 = (HEAP32[i12 >> 2] | 0) + (i62 << 2) | 0;
   if ((i63 | 0) != 0) {
    HEAP32[i63 >> 2] = i61;
   }
   i62 = i62 + 1 | 0;
   HEAP32[i13 >> 2] = i62;
   if ((i62 | 0) == (i60 | 0)) {
    i61 = (i60 | 0) == 0 ? 1 : i60 << 1;
    if ((i60 | 0) < (i61 | 0)) {
     if ((i61 | 0) == 0) {
      i62 = 0;
     } else {
      i62 = __Z22btAlignedAllocInternalji(i61 << 2, 16) | 0;
      i60 = HEAP32[i13 >> 2] | 0;
     }
     if ((i60 | 0) > 0) {
      i63 = 0;
      do {
       i64 = i62 + (i63 << 2) | 0;
       if ((i64 | 0) != 0) {
        HEAP32[i64 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i63 << 2) >> 2];
       }
       i63 = i63 + 1 | 0;
      } while ((i63 | 0) != (i60 | 0));
     }
     i63 = HEAP32[i12 >> 2] | 0;
     if ((i63 | 0) != 0) {
      if ((HEAP8[i15] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i63);
       i60 = HEAP32[i13 >> 2] | 0;
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i15] = 1;
     HEAP32[i12 >> 2] = i62;
     HEAP32[i14 >> 2] = i61;
     i62 = i60;
     i60 = i61;
    } else {
     i62 = i60;
    }
   }
   i61 = (HEAP32[i12 >> 2] | 0) + (i62 << 2) | 0;
   if ((i61 | 0) != 0) {
    HEAP32[i61 >> 2] = i59;
   }
   i59 = i62 + 1 | 0;
   HEAP32[i13 >> 2] = i59;
   if ((i59 | 0) == (i60 | 0)) {
    i61 = (i60 | 0) == 0 ? 1 : i60 << 1;
    if ((i60 | 0) < (i61 | 0)) {
     if ((i61 | 0) == 0) {
      i59 = 0;
     } else {
      i59 = __Z22btAlignedAllocInternalji(i61 << 2, 16) | 0;
      i60 = HEAP32[i13 >> 2] | 0;
     }
     if ((i60 | 0) > 0) {
      i62 = 0;
      do {
       i63 = i59 + (i62 << 2) | 0;
       if ((i63 | 0) != 0) {
        HEAP32[i63 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i62 << 2) >> 2];
       }
       i62 = i62 + 1 | 0;
      } while ((i62 | 0) != (i60 | 0));
     }
     i62 = HEAP32[i12 >> 2] | 0;
     if ((i62 | 0) != 0) {
      if ((HEAP8[i15] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i62);
       i60 = HEAP32[i13 >> 2] | 0;
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i15] = 1;
     HEAP32[i12 >> 2] = i59;
     HEAP32[i14 >> 2] = i61;
    }
   } else {
    i60 = i59;
   }
   i59 = (HEAP32[i12 >> 2] | 0) + (i60 << 2) | 0;
   if ((i59 | 0) != 0) {
    HEAP32[i59 >> 2] = 0;
   }
   HEAP32[i13 >> 2] = i60 + 1;
  }
  i59 = (i52 | 0) == 0;
  if ((i52 | i54 | 0) == 0) {
   i60 = HEAP32[HEAP32[i56 >> 2] >> 2] | 0;
   i58 = HEAP32[i58 >> 2] | 0;
   if ((HEAP32[i60 + 12 >> 2] | 0) == (i58 | 0)) {
    i25 = i60;
   } else {
    i20 = i58;
    i5 = 143;
   }
  } else {
   i20 = HEAP32[i58 >> 2] | 0;
   i5 = 143;
  }
  if ((i5 | 0) == 143) {
   i5 = 0;
   i58 = HEAP32[i57 + 12 >> 2] | 0;
   i25 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i47) | 0;
   i128 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i47) | 0;
   i57 = i25 + 8 | 0;
   HEAP32[i57 >> 2] = i128;
   HEAP32[i128 + 8 >> 2] = i25;
   HEAP32[i25 + 20 >> 2] = HEAP32[i49 >> 2];
   HEAP32[i128 + 20 >> 2] = HEAP32[i49 >> 2];
   HEAP32[i25 + 12 >> 2] = i20;
   HEAP32[i128 + 12 >> 2] = i58;
   HEAP32[i25 + 16 >> 2] = 0;
   HEAP32[i128 + 16 >> 2] = 0;
   i128 = HEAP32[i16 >> 2] | 0;
   i58 = i128 + 1 | 0;
   HEAP32[i16 >> 2] = i58;
   if ((i128 | 0) >= (HEAP32[i48 >> 2] | 0)) {
    HEAP32[i48 >> 2] = i58;
   }
   if (!i55) {
    if ((i53 | 0) != 0) {
     i5 = 148;
    }
   } else {
    i5 = HEAP32[HEAP32[i56 >> 2] >> 2] | 0;
    HEAP32[i25 >> 2] = i5;
    HEAP32[i5 + 4 >> 2] = i25;
    i5 = 148;
   }
   if ((i5 | 0) == 148) {
    i5 = 0;
    i128 = HEAP32[i56 >> 2] | 0;
    HEAP32[i128 >> 2] = i25;
    HEAP32[i25 + 4 >> 2] = i128;
   }
   i55 = i50 + 8 | 0;
   if (i59) {
    i127 = HEAP32[(HEAP32[i55 >> 2] | 0) + 4 >> 2] | 0;
    i128 = HEAP32[i57 >> 2] | 0;
    HEAP32[i127 >> 2] = i128;
    HEAP32[i128 + 4 >> 2] = i127;
   }
   i127 = HEAP32[i57 >> 2] | 0;
   i128 = HEAP32[i55 >> 2] | 0;
   HEAP32[i127 >> 2] = i128;
   HEAP32[i128 + 4 >> 2] = i127;
  }
  do {
   if ((i53 | 0) != 0) {
    i55 = i53 + 8 | 0;
    i56 = HEAP32[i55 >> 2] | 0;
    if ((i54 | 0) > 0) {
     HEAP32[i25 >> 2] = i56;
     HEAP32[i56 + 4 >> 2] = i25;
     break;
    }
    if ((i25 | 0) != (i56 | 0)) {
     i53 = i53 + 12 | 0;
     i57 = HEAP32[i13 >> 2] | 0;
     i54 = HEAP32[i14 >> 2] | 0;
     if ((i57 | 0) == (i54 | 0)) {
      i54 = (i57 | 0) == 0 ? 1 : i57 << 1;
      if ((i57 | 0) < (i54 | 0)) {
       if ((i54 | 0) == 0) {
        i56 = 0;
       } else {
        i56 = __Z22btAlignedAllocInternalji(i54 << 2, 16) | 0;
        i57 = HEAP32[i13 >> 2] | 0;
       }
       if ((i57 | 0) > 0) {
        i59 = 0;
        do {
         i58 = i56 + (i59 << 2) | 0;
         if ((i58 | 0) != 0) {
          HEAP32[i58 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i59 << 2) >> 2];
         }
         i59 = i59 + 1 | 0;
        } while ((i59 | 0) != (i57 | 0));
       }
       i58 = HEAP32[i12 >> 2] | 0;
       if ((i58 | 0) != 0) {
        if ((HEAP8[i15] | 0) != 0) {
         __Z21btAlignedFreeInternalPv(i58);
         i57 = HEAP32[i13 >> 2] | 0;
        }
        HEAP32[i12 >> 2] = 0;
       }
       HEAP8[i15] = 1;
       HEAP32[i12 >> 2] = i56;
       HEAP32[i14 >> 2] = i54;
       i56 = i57;
      } else {
       i56 = i57;
       i54 = i57;
      }
     } else {
      i56 = i57;
     }
     i57 = (HEAP32[i12 >> 2] | 0) + (i56 << 2) | 0;
     if ((i57 | 0) != 0) {
      HEAP32[i57 >> 2] = HEAP32[i53 >> 2];
     }
     i53 = i56 + 1 | 0;
     HEAP32[i13 >> 2] = i53;
     i57 = HEAP32[i25 >> 2] | 0;
     if ((i57 | 0) != (HEAP32[i55 >> 2] | 0)) {
      do {
       i54 = i57 + 12 | 0;
       i53 = HEAP32[i54 >> 2] | 0;
       i58 = HEAP32[i57 >> 2] | 0;
       i56 = HEAP32[i57 + 8 >> 2] | 0;
       if ((i58 | 0) == (i57 | 0)) {
        HEAP32[(HEAP32[i56 + 12 >> 2] | 0) + 8 >> 2] = 0;
       } else {
        i128 = i57 + 4 | 0;
        HEAP32[i58 + 4 >> 2] = HEAP32[i128 >> 2];
        HEAP32[HEAP32[i128 >> 2] >> 2] = i58;
        HEAP32[(HEAP32[i56 + 12 >> 2] | 0) + 8 >> 2] = i58;
       }
       i58 = HEAP32[i56 >> 2] | 0;
       if ((i58 | 0) == (i56 | 0)) {
        HEAP32[(HEAP32[i54 >> 2] | 0) + 8 >> 2] = 0;
       } else {
        i128 = i56 + 4 | 0;
        HEAP32[i58 + 4 >> 2] = HEAP32[i128 >> 2];
        HEAP32[HEAP32[i128 >> 2] >> 2] = i58;
        HEAP32[(HEAP32[i54 >> 2] | 0) + 8 >> 2] = i58;
       }
       HEAP32[i57 + 0 >> 2] = 0;
       HEAP32[i57 + 4 >> 2] = 0;
       HEAP32[i57 + 8 >> 2] = 0;
       HEAP32[i57 + 12 >> 2] = 0;
       HEAP32[i57 + 16 >> 2] = 0;
       HEAP32[i57 >> 2] = HEAP32[i17 >> 2];
       HEAP32[i17 >> 2] = i57;
       HEAP32[i56 + 0 >> 2] = 0;
       HEAP32[i56 + 4 >> 2] = 0;
       HEAP32[i56 + 8 >> 2] = 0;
       HEAP32[i56 + 12 >> 2] = 0;
       HEAP32[i56 + 16 >> 2] = 0;
       HEAP32[i56 >> 2] = HEAP32[i17 >> 2];
       HEAP32[i17 >> 2] = i56;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
       i57 = HEAP32[i13 >> 2] | 0;
       i54 = HEAP32[i14 >> 2] | 0;
       if ((i57 | 0) == (i54 | 0)) {
        i54 = (i57 | 0) == 0 ? 1 : i57 << 1;
        if ((i57 | 0) < (i54 | 0)) {
         if ((i54 | 0) == 0) {
          i56 = 0;
         } else {
          i56 = __Z22btAlignedAllocInternalji(i54 << 2, 16) | 0;
          i57 = HEAP32[i13 >> 2] | 0;
         }
         if ((i57 | 0) > 0) {
          i59 = 0;
          do {
           i58 = i56 + (i59 << 2) | 0;
           if ((i58 | 0) != 0) {
            HEAP32[i58 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i59 << 2) >> 2];
           }
           i59 = i59 + 1 | 0;
          } while ((i59 | 0) != (i57 | 0));
         }
         i58 = HEAP32[i12 >> 2] | 0;
         if ((i58 | 0) != 0) {
          if ((HEAP8[i15] | 0) != 0) {
           __Z21btAlignedFreeInternalPv(i58);
           i57 = HEAP32[i13 >> 2] | 0;
          }
          HEAP32[i12 >> 2] = 0;
         }
         HEAP8[i15] = 1;
         HEAP32[i12 >> 2] = i56;
         HEAP32[i14 >> 2] = i54;
         i56 = i57;
        } else {
         i56 = i57;
         i54 = i57;
        }
       } else {
        i56 = i57;
       }
       i57 = (HEAP32[i12 >> 2] | 0) + (i56 << 2) | 0;
       if ((i57 | 0) != 0) {
        HEAP32[i57 >> 2] = i53;
       }
       i53 = i56 + 1 | 0;
       HEAP32[i13 >> 2] = i53;
       i57 = HEAP32[i25 >> 2] | 0;
      } while ((i57 | 0) != (HEAP32[i55 >> 2] | 0));
     }
     if ((i53 | 0) == (i54 | 0)) {
      i53 = (i54 | 0) == 0 ? 1 : i54 << 1;
      if ((i54 | 0) < (i53 | 0)) {
       if ((i53 | 0) == 0) {
        i55 = 0;
       } else {
        i55 = __Z22btAlignedAllocInternalji(i53 << 2, 16) | 0;
        i54 = HEAP32[i13 >> 2] | 0;
       }
       if ((i54 | 0) > 0) {
        i56 = 0;
        do {
         i57 = i55 + (i56 << 2) | 0;
         if ((i57 | 0) != 0) {
          HEAP32[i57 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i56 << 2) >> 2];
         }
         i56 = i56 + 1 | 0;
        } while ((i56 | 0) != (i54 | 0));
       }
       i56 = HEAP32[i12 >> 2] | 0;
       if ((i56 | 0) != 0) {
        if ((HEAP8[i15] | 0) != 0) {
         __Z21btAlignedFreeInternalPv(i56);
         i54 = HEAP32[i13 >> 2] | 0;
        }
        HEAP32[i12 >> 2] = 0;
       }
       HEAP8[i15] = 1;
       HEAP32[i12 >> 2] = i55;
       HEAP32[i14 >> 2] = i53;
      }
     } else {
      i54 = i53;
     }
     i53 = (HEAP32[i12 >> 2] | 0) + (i54 << 2) | 0;
     if ((i53 | 0) != 0) {
      HEAP32[i53 >> 2] = 0;
     }
     HEAP32[i13 >> 2] = i54 + 1;
    }
   }
  } while (0);
  HEAP32[i25 + 16 >> 2] = i2;
  HEAP32[(HEAP32[i25 + 8 >> 2] | 0) + 16 >> 2] = HEAP32[i50 + 16 >> 2];
  i54 = i52;
  i53 = i25;
  i24 = (i24 | 0) == 0 ? i25 : i24;
 }
 if ((i5 | 0) == 352) {
  STACKTOP = i1;
  return i21 | 0;
 }
 if ((i54 | 0) <= 0) {
  i19 = i53 + 8 | 0;
  if ((i24 | 0) != (HEAP32[i19 >> 2] | 0)) {
   i20 = i53 + 12 | 0;
   i23 = HEAP32[i13 >> 2] | 0;
   i21 = HEAP32[i14 >> 2] | 0;
   if ((i23 | 0) == (i21 | 0)) {
    i21 = (i23 | 0) == 0 ? 1 : i23 << 1;
    if ((i23 | 0) < (i21 | 0)) {
     if ((i21 | 0) == 0) {
      i22 = 0;
     } else {
      i22 = __Z22btAlignedAllocInternalji(i21 << 2, 16) | 0;
      i23 = HEAP32[i13 >> 2] | 0;
     }
     if ((i23 | 0) > 0) {
      i25 = 0;
      do {
       i26 = i22 + (i25 << 2) | 0;
       if ((i26 | 0) != 0) {
        HEAP32[i26 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i25 << 2) >> 2];
       }
       i25 = i25 + 1 | 0;
      } while ((i25 | 0) != (i23 | 0));
     }
     i25 = HEAP32[i12 >> 2] | 0;
     if ((i25 | 0) != 0) {
      if ((HEAP8[i15] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i25);
       i23 = HEAP32[i13 >> 2] | 0;
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i15] = 1;
     HEAP32[i12 >> 2] = i22;
     HEAP32[i14 >> 2] = i21;
     i22 = i23;
    } else {
     i22 = i23;
     i21 = i23;
    }
   } else {
    i22 = i23;
   }
   i23 = (HEAP32[i12 >> 2] | 0) + (i22 << 2) | 0;
   if ((i23 | 0) != 0) {
    HEAP32[i23 >> 2] = HEAP32[i20 >> 2];
   }
   i20 = i22 + 1 | 0;
   HEAP32[i13 >> 2] = i20;
   i22 = HEAP32[i24 >> 2] | 0;
   if ((i22 | 0) != (HEAP32[i19 >> 2] | 0)) {
    i21 = i22;
    while (1) {
     i23 = i21 + 12 | 0;
     i20 = HEAP32[i23 >> 2] | 0;
     i25 = HEAP32[i21 >> 2] | 0;
     i22 = HEAP32[i21 + 8 >> 2] | 0;
     if ((i25 | 0) == (i21 | 0)) {
      HEAP32[(HEAP32[i22 + 12 >> 2] | 0) + 8 >> 2] = 0;
     } else {
      i128 = i21 + 4 | 0;
      HEAP32[i25 + 4 >> 2] = HEAP32[i128 >> 2];
      HEAP32[HEAP32[i128 >> 2] >> 2] = i25;
      HEAP32[(HEAP32[i22 + 12 >> 2] | 0) + 8 >> 2] = i25;
     }
     i25 = HEAP32[i22 >> 2] | 0;
     if ((i25 | 0) == (i22 | 0)) {
      HEAP32[(HEAP32[i23 >> 2] | 0) + 8 >> 2] = 0;
     } else {
      i128 = i22 + 4 | 0;
      HEAP32[i25 + 4 >> 2] = HEAP32[i128 >> 2];
      HEAP32[HEAP32[i128 >> 2] >> 2] = i25;
      HEAP32[(HEAP32[i23 >> 2] | 0) + 8 >> 2] = i25;
     }
     HEAP32[i21 + 0 >> 2] = 0;
     HEAP32[i21 + 4 >> 2] = 0;
     HEAP32[i21 + 8 >> 2] = 0;
     HEAP32[i21 + 12 >> 2] = 0;
     HEAP32[i21 + 16 >> 2] = 0;
     HEAP32[i21 >> 2] = HEAP32[i17 >> 2];
     HEAP32[i17 >> 2] = i21;
     HEAP32[i22 + 0 >> 2] = 0;
     HEAP32[i22 + 4 >> 2] = 0;
     HEAP32[i22 + 8 >> 2] = 0;
     HEAP32[i22 + 12 >> 2] = 0;
     HEAP32[i22 + 16 >> 2] = 0;
     HEAP32[i22 >> 2] = HEAP32[i17 >> 2];
     HEAP32[i17 >> 2] = i22;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
     i23 = HEAP32[i13 >> 2] | 0;
     i21 = HEAP32[i14 >> 2] | 0;
     if ((i23 | 0) == (i21 | 0)) {
      i21 = (i23 | 0) == 0 ? 1 : i23 << 1;
      if ((i23 | 0) < (i21 | 0)) {
       if ((i21 | 0) == 0) {
        i22 = 0;
       } else {
        i22 = __Z22btAlignedAllocInternalji(i21 << 2, 16) | 0;
        i23 = HEAP32[i13 >> 2] | 0;
       }
       if ((i23 | 0) > 0) {
        i25 = 0;
        do {
         i26 = i22 + (i25 << 2) | 0;
         if ((i26 | 0) != 0) {
          HEAP32[i26 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i25 << 2) >> 2];
         }
         i25 = i25 + 1 | 0;
        } while ((i25 | 0) != (i23 | 0));
       }
       i25 = HEAP32[i12 >> 2] | 0;
       if ((i25 | 0) != 0) {
        if ((HEAP8[i15] | 0) != 0) {
         __Z21btAlignedFreeInternalPv(i25);
         i23 = HEAP32[i13 >> 2] | 0;
        }
        HEAP32[i12 >> 2] = 0;
       }
       HEAP8[i15] = 1;
       HEAP32[i12 >> 2] = i22;
       HEAP32[i14 >> 2] = i21;
       i22 = i23;
      } else {
       i22 = i23;
       i21 = i23;
      }
     } else {
      i22 = i23;
     }
     i23 = (HEAP32[i12 >> 2] | 0) + (i22 << 2) | 0;
     if ((i23 | 0) != 0) {
      HEAP32[i23 >> 2] = i20;
     }
     i20 = i22 + 1 | 0;
     HEAP32[i13 >> 2] = i20;
     i22 = HEAP32[i24 >> 2] | 0;
     if ((i22 | 0) == (HEAP32[i19 >> 2] | 0)) {
      break;
     } else {
      i21 = i22;
     }
    }
   }
   if ((i20 | 0) == (i21 | 0)) {
    i19 = (i21 | 0) == 0 ? 1 : i21 << 1;
    if ((i21 | 0) < (i19 | 0)) {
     if ((i19 | 0) == 0) {
      i20 = 0;
     } else {
      i20 = __Z22btAlignedAllocInternalji(i19 << 2, 16) | 0;
      i21 = HEAP32[i13 >> 2] | 0;
     }
     if ((i21 | 0) > 0) {
      i23 = 0;
      do {
       i22 = i20 + (i23 << 2) | 0;
       if ((i22 | 0) != 0) {
        HEAP32[i22 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i23 << 2) >> 2];
       }
       i23 = i23 + 1 | 0;
      } while ((i23 | 0) != (i21 | 0));
     }
     i22 = HEAP32[i12 >> 2] | 0;
     if ((i22 | 0) != 0) {
      if ((HEAP8[i15] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i22);
       i21 = HEAP32[i13 >> 2] | 0;
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i15] = 1;
     HEAP32[i12 >> 2] = i20;
     HEAP32[i14 >> 2] = i19;
    }
   } else {
    i21 = i20;
   }
   i19 = (HEAP32[i12 >> 2] | 0) + (i21 << 2) | 0;
   if ((i19 | 0) != 0) {
    HEAP32[i19 >> 2] = 0;
   }
   HEAP32[i13 >> 2] = i21 + 1;
  }
 } else {
  HEAP32[(HEAP32[i24 + 8 >> 2] | 0) + 12 >> 2] = HEAP32[i53 + 12 >> 2];
  i128 = HEAP32[i51 + 8 >> 2] | 0;
  HEAP32[i128 >> 2] = i24;
  HEAP32[i24 + 4 >> 2] = i128;
  i128 = HEAP32[i53 + 8 >> 2] | 0;
  HEAP32[i24 >> 2] = i128;
  HEAP32[i128 + 4 >> 2] = i24;
 }
 HEAP32[i18 + 124 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
 i18 = HEAP32[i13 >> 2] | 0;
 if ((i18 | 0) > 0) {
  i22 = 0;
  do {
   if ((i22 | 0) < (i18 | 0)) {
    i20 = i22;
    while (1) {
     i23 = HEAP32[i12 >> 2] | 0;
     i19 = HEAP32[i23 + (i20 << 2) >> 2] | 0;
     i22 = i20 + 2 | 0;
     i23 = HEAP32[i23 + (i20 + 1 << 2) >> 2] | 0;
     if ((i23 | 0) != 0) {
      i21 = i19 + 16 | 0;
      i20 = i19 + 12 | 0;
      i24 = 0;
      while (1) {
       i27 = HEAP32[i21 >> 2] | 0;
       i25 = i23 + 12 | 0;
       i26 = HEAP32[i25 >> 2] | 0;
       if ((i27 | 0) == 0) {
        HEAP32[i20 >> 2] = i26;
       } else {
        HEAP32[i27 + 8 >> 2] = i26;
       }
       i26 = i23 + 16 | 0;
       i27 = HEAP32[i26 >> 2] | 0;
       if ((i27 | 0) != 0) {
        HEAP32[i21 >> 2] = i27;
       }
       i27 = HEAP32[i25 >> 2] | 0;
       if ((i27 | 0) != 0) {
        do {
         HEAP32[i27 + 4 >> 2] = i19;
         i27 = HEAP32[i27 + 8 >> 2] | 0;
        } while ((i27 | 0) != 0);
       }
       HEAP32[i25 >> 2] = 0;
       HEAP32[i26 >> 2] = 0;
       i23 = i23 + 8 | 0;
       i25 = HEAP32[i23 >> 2] | 0;
       if ((i25 | 0) != 0) {
        while (1) {
         i26 = HEAP32[i13 >> 2] | 0;
         i27 = HEAP32[i14 >> 2] | 0;
         if (!i24) {
          if ((i26 | 0) == (i27 | 0)) {
           i24 = (i26 | 0) == 0 ? 1 : i26 << 1;
           if ((i26 | 0) < (i24 | 0)) {
            if ((i24 | 0) == 0) {
             i25 = 0;
            } else {
             i25 = __Z22btAlignedAllocInternalji(i24 << 2, 16) | 0;
             i26 = HEAP32[i13 >> 2] | 0;
            }
            if ((i26 | 0) > 0) {
             i27 = 0;
             do {
              i28 = i25 + (i27 << 2) | 0;
              if ((i28 | 0) != 0) {
               HEAP32[i28 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i27 << 2) >> 2];
              }
              i27 = i27 + 1 | 0;
             } while ((i27 | 0) != (i26 | 0));
            }
            i27 = HEAP32[i12 >> 2] | 0;
            if ((i27 | 0) != 0) {
             if ((HEAP8[i15] | 0) != 0) {
              __Z21btAlignedFreeInternalPv(i27);
              i26 = HEAP32[i13 >> 2] | 0;
             }
             HEAP32[i12 >> 2] = 0;
            }
            HEAP8[i15] = 1;
            HEAP32[i12 >> 2] = i25;
            HEAP32[i14 >> 2] = i24;
            i25 = i26;
           } else {
            i25 = i26;
            i24 = i26;
           }
          } else {
           i25 = i26;
           i24 = i27;
          }
          i26 = (HEAP32[i12 >> 2] | 0) + (i25 << 2) | 0;
          if ((i26 | 0) != 0) {
           HEAP32[i26 >> 2] = i19;
          }
          i26 = i25 + 1 | 0;
          HEAP32[i13 >> 2] = i26;
          i25 = HEAP32[i23 >> 2] | 0;
          i27 = i24;
         }
         i24 = i25 + 12 | 0;
         if ((i26 | 0) == (i27 | 0)) {
          i25 = (i27 | 0) == 0 ? 1 : i27 << 1;
          if ((i27 | 0) < (i25 | 0)) {
           if ((i25 | 0) == 0) {
            i26 = 0;
           } else {
            i26 = __Z22btAlignedAllocInternalji(i25 << 2, 16) | 0;
            i27 = HEAP32[i13 >> 2] | 0;
           }
           if ((i27 | 0) > 0) {
            i29 = 0;
            do {
             i28 = i26 + (i29 << 2) | 0;
             if ((i28 | 0) != 0) {
              HEAP32[i28 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i29 << 2) >> 2];
             }
             i29 = i29 + 1 | 0;
            } while ((i29 | 0) != (i27 | 0));
           }
           i28 = HEAP32[i12 >> 2] | 0;
           if ((i28 | 0) != 0) {
            if ((HEAP8[i15] | 0) != 0) {
             __Z21btAlignedFreeInternalPv(i28);
             i27 = HEAP32[i13 >> 2] | 0;
            }
            HEAP32[i12 >> 2] = 0;
           }
           HEAP8[i15] = 1;
           HEAP32[i12 >> 2] = i26;
           HEAP32[i14 >> 2] = i25;
           i26 = i27;
          } else {
           i26 = i27;
          }
         }
         i25 = (HEAP32[i12 >> 2] | 0) + (i26 << 2) | 0;
         if ((i25 | 0) != 0) {
          HEAP32[i25 >> 2] = HEAP32[i24 >> 2];
         }
         HEAP32[i13 >> 2] = i26 + 1;
         i25 = HEAP32[i23 >> 2] | 0;
         i26 = HEAP32[i25 >> 2] | 0;
         i24 = HEAP32[i25 + 8 >> 2] | 0;
         if ((i26 | 0) == (i25 | 0)) {
          HEAP32[(HEAP32[i24 + 12 >> 2] | 0) + 8 >> 2] = 0;
         } else {
          i128 = i25 + 4 | 0;
          HEAP32[i26 + 4 >> 2] = HEAP32[i128 >> 2];
          HEAP32[HEAP32[i128 >> 2] >> 2] = i26;
          HEAP32[(HEAP32[i24 + 12 >> 2] | 0) + 8 >> 2] = i26;
         }
         i26 = HEAP32[i24 >> 2] | 0;
         if ((i26 | 0) == (i24 | 0)) {
          HEAP32[(HEAP32[i25 + 12 >> 2] | 0) + 8 >> 2] = 0;
         } else {
          i128 = i24 + 4 | 0;
          HEAP32[i26 + 4 >> 2] = HEAP32[i128 >> 2];
          HEAP32[HEAP32[i128 >> 2] >> 2] = i26;
          HEAP32[(HEAP32[i25 + 12 >> 2] | 0) + 8 >> 2] = i26;
         }
         HEAP32[i25 + 0 >> 2] = 0;
         HEAP32[i25 + 4 >> 2] = 0;
         HEAP32[i25 + 8 >> 2] = 0;
         HEAP32[i25 + 12 >> 2] = 0;
         HEAP32[i25 + 16 >> 2] = 0;
         HEAP32[i25 >> 2] = HEAP32[i17 >> 2];
         HEAP32[i17 >> 2] = i25;
         HEAP32[i24 + 0 >> 2] = 0;
         HEAP32[i24 + 4 >> 2] = 0;
         HEAP32[i24 + 8 >> 2] = 0;
         HEAP32[i24 + 12 >> 2] = 0;
         HEAP32[i24 + 16 >> 2] = 0;
         HEAP32[i24 >> 2] = HEAP32[i17 >> 2];
         HEAP32[i17 >> 2] = i24;
         HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
         i25 = HEAP32[i23 >> 2] | 0;
         if ((i25 | 0) == 0) {
          i24 = 1;
          break;
         } else {
          i24 = 1;
         }
        }
       }
       i23 = i22 + 1 | 0;
       i25 = HEAP32[i12 >> 2] | 0;
       i26 = HEAP32[i25 + (i22 << 2) >> 2] | 0;
       if ((i26 | 0) == 0) {
        break;
       } else {
        i22 = i23;
        i23 = i26;
       }
      }
      if (i24) {
       i20 = HEAP32[i13 >> 2] | 0;
       if ((i20 | 0) == (HEAP32[i14 >> 2] | 0) ? (i4 = (i20 | 0) == 0 ? 1 : i20 << 1, (i20 | 0) < (i4 | 0)) : 0) {
        if ((i4 | 0) == 0) {
         i19 = 0;
        } else {
         i19 = __Z22btAlignedAllocInternalji(i4 << 2, 16) | 0;
         i20 = HEAP32[i13 >> 2] | 0;
        }
        if ((i20 | 0) > 0) {
         i21 = 0;
         do {
          i22 = i19 + (i21 << 2) | 0;
          if ((i22 | 0) != 0) {
           HEAP32[i22 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i21 << 2) >> 2];
          }
          i21 = i21 + 1 | 0;
         } while ((i21 | 0) != (i20 | 0));
        }
        i21 = HEAP32[i12 >> 2] | 0;
        if ((i21 | 0) != 0) {
         if ((HEAP8[i15] | 0) != 0) {
          __Z21btAlignedFreeInternalPv(i21);
          i20 = HEAP32[i13 >> 2] | 0;
         }
         HEAP32[i12 >> 2] = 0;
        }
        HEAP8[i15] = 1;
        HEAP32[i12 >> 2] = i19;
        HEAP32[i14 >> 2] = i4;
       } else {
        i19 = i25;
       }
       i19 = i19 + (i20 << 2) | 0;
       if ((i19 | 0) != 0) {
        HEAP32[i19 >> 2] = 0;
       }
       HEAP32[i13 >> 2] = i20 + 1;
       i22 = i23;
      } else {
       i22 = i23;
      }
     }
     if ((i22 | 0) < (i18 | 0)) {
      i20 = i22;
     } else {
      break;
     }
    }
    i18 = HEAP32[i13 >> 2] | 0;
   }
  } while ((i22 | 0) < (i18 | 0));
  if ((i18 | 0) <= 0) {
   i3 = i18;
   i5 = 341;
  }
 } else {
  i3 = i18;
  i5 = 341;
 }
 if ((i5 | 0) == 341 ? (i3 | 0) < 0 : 0) {
  if ((HEAP32[i14 >> 2] | 0) < 0) {
   i4 = HEAP32[i12 >> 2] | 0;
   if ((i4 | 0) != 0) {
    if ((HEAP8[i15] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i4);
    }
    HEAP32[i12 >> 2] = 0;
   }
   HEAP8[i15] = 1;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i14 >> 2] = 0;
  }
  do {
   i4 = (HEAP32[i12 >> 2] | 0) + (i3 << 2) | 0;
   if ((i4 | 0) != 0) {
    HEAP32[i4 >> 2] = 0;
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 0);
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i6 >> 2] = i9;
 HEAP32[i7 >> 2] = i10;
 HEAP32[i8 >> 2] = i11;
 HEAP32[i2 + 24 >> 2] = -1;
 i128 = 1;
 STACKTOP = i1;
 return i128 | 0;
}
function _malloc(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = STACKTOP;
 do {
  if (i12 >>> 0 < 245) {
   if (i12 >>> 0 < 11) {
    i12 = 16;
   } else {
    i12 = i12 + 11 & -8;
   }
   i20 = i12 >>> 3;
   i18 = HEAP32[115062] | 0;
   i21 = i18 >>> i20;
   if ((i21 & 3 | 0) != 0) {
    i6 = (i21 & 1 ^ 1) + i20 | 0;
    i5 = i6 << 1;
    i3 = 460288 + (i5 << 2) | 0;
    i5 = 460288 + (i5 + 2 << 2) | 0;
    i7 = HEAP32[i5 >> 2] | 0;
    i2 = i7 + 8 | 0;
    i4 = HEAP32[i2 >> 2] | 0;
    do {
     if ((i3 | 0) != (i4 | 0)) {
      if (i4 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
       _abort();
      }
      i8 = i4 + 12 | 0;
      if ((HEAP32[i8 >> 2] | 0) == (i7 | 0)) {
       HEAP32[i8 >> 2] = i3;
       HEAP32[i5 >> 2] = i4;
       break;
      } else {
       _abort();
      }
     } else {
      HEAP32[115062] = i18 & ~(1 << i6);
     }
    } while (0);
    i32 = i6 << 3;
    HEAP32[i7 + 4 >> 2] = i32 | 3;
    i32 = i7 + (i32 | 4) | 0;
    HEAP32[i32 >> 2] = HEAP32[i32 >> 2] | 1;
    i32 = i2;
    STACKTOP = i1;
    return i32 | 0;
   }
   if (i12 >>> 0 > (HEAP32[460256 >> 2] | 0) >>> 0) {
    if ((i21 | 0) != 0) {
     i7 = 2 << i20;
     i7 = i21 << i20 & (i7 | 0 - i7);
     i7 = (i7 & 0 - i7) + -1 | 0;
     i2 = i7 >>> 12 & 16;
     i7 = i7 >>> i2;
     i6 = i7 >>> 5 & 8;
     i7 = i7 >>> i6;
     i5 = i7 >>> 2 & 4;
     i7 = i7 >>> i5;
     i4 = i7 >>> 1 & 2;
     i7 = i7 >>> i4;
     i3 = i7 >>> 1 & 1;
     i3 = (i6 | i2 | i5 | i4 | i3) + (i7 >>> i3) | 0;
     i7 = i3 << 1;
     i4 = 460288 + (i7 << 2) | 0;
     i7 = 460288 + (i7 + 2 << 2) | 0;
     i5 = HEAP32[i7 >> 2] | 0;
     i2 = i5 + 8 | 0;
     i6 = HEAP32[i2 >> 2] | 0;
     do {
      if ((i4 | 0) != (i6 | 0)) {
       if (i6 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
        _abort();
       }
       i8 = i6 + 12 | 0;
       if ((HEAP32[i8 >> 2] | 0) == (i5 | 0)) {
        HEAP32[i8 >> 2] = i4;
        HEAP32[i7 >> 2] = i6;
        break;
       } else {
        _abort();
       }
      } else {
       HEAP32[115062] = i18 & ~(1 << i3);
      }
     } while (0);
     i6 = i3 << 3;
     i4 = i6 - i12 | 0;
     HEAP32[i5 + 4 >> 2] = i12 | 3;
     i3 = i5 + i12 | 0;
     HEAP32[i5 + (i12 | 4) >> 2] = i4 | 1;
     HEAP32[i5 + i6 >> 2] = i4;
     i6 = HEAP32[460256 >> 2] | 0;
     if ((i6 | 0) != 0) {
      i5 = HEAP32[460268 >> 2] | 0;
      i8 = i6 >>> 3;
      i9 = i8 << 1;
      i6 = 460288 + (i9 << 2) | 0;
      i7 = HEAP32[115062] | 0;
      i8 = 1 << i8;
      if ((i7 & i8 | 0) != 0) {
       i7 = 460288 + (i9 + 2 << 2) | 0;
       i8 = HEAP32[i7 >> 2] | 0;
       if (i8 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        i28 = i7;
        i27 = i8;
       }
      } else {
       HEAP32[115062] = i7 | i8;
       i28 = 460288 + (i9 + 2 << 2) | 0;
       i27 = i6;
      }
      HEAP32[i28 >> 2] = i5;
      HEAP32[i27 + 12 >> 2] = i5;
      HEAP32[i5 + 8 >> 2] = i27;
      HEAP32[i5 + 12 >> 2] = i6;
     }
     HEAP32[460256 >> 2] = i4;
     HEAP32[460268 >> 2] = i3;
     i32 = i2;
     STACKTOP = i1;
     return i32 | 0;
    }
    i18 = HEAP32[460252 >> 2] | 0;
    if ((i18 | 0) != 0) {
     i2 = (i18 & 0 - i18) + -1 | 0;
     i31 = i2 >>> 12 & 16;
     i2 = i2 >>> i31;
     i30 = i2 >>> 5 & 8;
     i2 = i2 >>> i30;
     i32 = i2 >>> 2 & 4;
     i2 = i2 >>> i32;
     i6 = i2 >>> 1 & 2;
     i2 = i2 >>> i6;
     i3 = i2 >>> 1 & 1;
     i3 = HEAP32[460552 + ((i30 | i31 | i32 | i6 | i3) + (i2 >>> i3) << 2) >> 2] | 0;
     i2 = (HEAP32[i3 + 4 >> 2] & -8) - i12 | 0;
     i6 = i3;
     while (1) {
      i5 = HEAP32[i6 + 16 >> 2] | 0;
      if ((i5 | 0) == 0) {
       i5 = HEAP32[i6 + 20 >> 2] | 0;
       if ((i5 | 0) == 0) {
        break;
       }
      }
      i6 = (HEAP32[i5 + 4 >> 2] & -8) - i12 | 0;
      i4 = i6 >>> 0 < i2 >>> 0;
      i2 = i4 ? i6 : i2;
      i6 = i5;
      i3 = i4 ? i5 : i3;
     }
     i6 = HEAP32[460264 >> 2] | 0;
     if (i3 >>> 0 < i6 >>> 0) {
      _abort();
     }
     i4 = i3 + i12 | 0;
     if (!(i3 >>> 0 < i4 >>> 0)) {
      _abort();
     }
     i5 = HEAP32[i3 + 24 >> 2] | 0;
     i7 = HEAP32[i3 + 12 >> 2] | 0;
     do {
      if ((i7 | 0) == (i3 | 0)) {
       i8 = i3 + 20 | 0;
       i7 = HEAP32[i8 >> 2] | 0;
       if ((i7 | 0) == 0) {
        i8 = i3 + 16 | 0;
        i7 = HEAP32[i8 >> 2] | 0;
        if ((i7 | 0) == 0) {
         i26 = 0;
         break;
        }
       }
       while (1) {
        i10 = i7 + 20 | 0;
        i9 = HEAP32[i10 >> 2] | 0;
        if ((i9 | 0) != 0) {
         i7 = i9;
         i8 = i10;
         continue;
        }
        i10 = i7 + 16 | 0;
        i9 = HEAP32[i10 >> 2] | 0;
        if ((i9 | 0) == 0) {
         break;
        } else {
         i7 = i9;
         i8 = i10;
        }
       }
       if (i8 >>> 0 < i6 >>> 0) {
        _abort();
       } else {
        HEAP32[i8 >> 2] = 0;
        i26 = i7;
        break;
       }
      } else {
       i8 = HEAP32[i3 + 8 >> 2] | 0;
       if (i8 >>> 0 < i6 >>> 0) {
        _abort();
       }
       i6 = i8 + 12 | 0;
       if ((HEAP32[i6 >> 2] | 0) != (i3 | 0)) {
        _abort();
       }
       i9 = i7 + 8 | 0;
       if ((HEAP32[i9 >> 2] | 0) == (i3 | 0)) {
        HEAP32[i6 >> 2] = i7;
        HEAP32[i9 >> 2] = i8;
        i26 = i7;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     do {
      if ((i5 | 0) != 0) {
       i7 = HEAP32[i3 + 28 >> 2] | 0;
       i6 = 460552 + (i7 << 2) | 0;
       if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
        HEAP32[i6 >> 2] = i26;
        if ((i26 | 0) == 0) {
         HEAP32[460252 >> 2] = HEAP32[460252 >> 2] & ~(1 << i7);
         break;
        }
       } else {
        if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
         _abort();
        }
        i6 = i5 + 16 | 0;
        if ((HEAP32[i6 >> 2] | 0) == (i3 | 0)) {
         HEAP32[i6 >> 2] = i26;
        } else {
         HEAP32[i5 + 20 >> 2] = i26;
        }
        if ((i26 | 0) == 0) {
         break;
        }
       }
       if (i26 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
        _abort();
       }
       HEAP32[i26 + 24 >> 2] = i5;
       i5 = HEAP32[i3 + 16 >> 2] | 0;
       do {
        if ((i5 | 0) != 0) {
         if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i26 + 16 >> 2] = i5;
          HEAP32[i5 + 24 >> 2] = i26;
          break;
         }
        }
       } while (0);
       i5 = HEAP32[i3 + 20 >> 2] | 0;
       if ((i5 | 0) != 0) {
        if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         HEAP32[i26 + 20 >> 2] = i5;
         HEAP32[i5 + 24 >> 2] = i26;
         break;
        }
       }
      }
     } while (0);
     if (i2 >>> 0 < 16) {
      i32 = i2 + i12 | 0;
      HEAP32[i3 + 4 >> 2] = i32 | 3;
      i32 = i3 + (i32 + 4) | 0;
      HEAP32[i32 >> 2] = HEAP32[i32 >> 2] | 1;
     } else {
      HEAP32[i3 + 4 >> 2] = i12 | 3;
      HEAP32[i3 + (i12 | 4) >> 2] = i2 | 1;
      HEAP32[i3 + (i2 + i12) >> 2] = i2;
      i6 = HEAP32[460256 >> 2] | 0;
      if ((i6 | 0) != 0) {
       i5 = HEAP32[460268 >> 2] | 0;
       i8 = i6 >>> 3;
       i9 = i8 << 1;
       i6 = 460288 + (i9 << 2) | 0;
       i7 = HEAP32[115062] | 0;
       i8 = 1 << i8;
       if ((i7 & i8 | 0) != 0) {
        i7 = 460288 + (i9 + 2 << 2) | 0;
        i8 = HEAP32[i7 >> 2] | 0;
        if (i8 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         i25 = i7;
         i24 = i8;
        }
       } else {
        HEAP32[115062] = i7 | i8;
        i25 = 460288 + (i9 + 2 << 2) | 0;
        i24 = i6;
       }
       HEAP32[i25 >> 2] = i5;
       HEAP32[i24 + 12 >> 2] = i5;
       HEAP32[i5 + 8 >> 2] = i24;
       HEAP32[i5 + 12 >> 2] = i6;
      }
      HEAP32[460256 >> 2] = i2;
      HEAP32[460268 >> 2] = i4;
     }
     i32 = i3 + 8 | 0;
     STACKTOP = i1;
     return i32 | 0;
    }
   }
  } else {
   if (!(i12 >>> 0 > 4294967231)) {
    i24 = i12 + 11 | 0;
    i12 = i24 & -8;
    i26 = HEAP32[460252 >> 2] | 0;
    if ((i26 | 0) != 0) {
     i25 = 0 - i12 | 0;
     i24 = i24 >>> 8;
     if ((i24 | 0) != 0) {
      if (i12 >>> 0 > 16777215) {
       i27 = 31;
      } else {
       i31 = (i24 + 1048320 | 0) >>> 16 & 8;
       i32 = i24 << i31;
       i30 = (i32 + 520192 | 0) >>> 16 & 4;
       i32 = i32 << i30;
       i27 = (i32 + 245760 | 0) >>> 16 & 2;
       i27 = 14 - (i30 | i31 | i27) + (i32 << i27 >>> 15) | 0;
       i27 = i12 >>> (i27 + 7 | 0) & 1 | i27 << 1;
      }
     } else {
      i27 = 0;
     }
     i30 = HEAP32[460552 + (i27 << 2) >> 2] | 0;
     L9 : do {
      if ((i30 | 0) == 0) {
       i29 = 0;
       i24 = 0;
      } else {
       if ((i27 | 0) == 31) {
        i24 = 0;
       } else {
        i24 = 25 - (i27 >>> 1) | 0;
       }
       i29 = 0;
       i28 = i12 << i24;
       i24 = 0;
       while (1) {
        i32 = HEAP32[i30 + 4 >> 2] & -8;
        i31 = i32 - i12 | 0;
        if (i31 >>> 0 < i25 >>> 0) {
         if ((i32 | 0) == (i12 | 0)) {
          i25 = i31;
          i29 = i30;
          i24 = i30;
          break L9;
         } else {
          i25 = i31;
          i24 = i30;
         }
        }
        i31 = HEAP32[i30 + 20 >> 2] | 0;
        i30 = HEAP32[i30 + (i28 >>> 31 << 2) + 16 >> 2] | 0;
        i29 = (i31 | 0) == 0 | (i31 | 0) == (i30 | 0) ? i29 : i31;
        if ((i30 | 0) == 0) {
         break;
        } else {
         i28 = i28 << 1;
        }
       }
      }
     } while (0);
     if ((i29 | 0) == 0 & (i24 | 0) == 0) {
      i32 = 2 << i27;
      i26 = i26 & (i32 | 0 - i32);
      if ((i26 | 0) == 0) {
       break;
      }
      i32 = (i26 & 0 - i26) + -1 | 0;
      i28 = i32 >>> 12 & 16;
      i32 = i32 >>> i28;
      i27 = i32 >>> 5 & 8;
      i32 = i32 >>> i27;
      i30 = i32 >>> 2 & 4;
      i32 = i32 >>> i30;
      i31 = i32 >>> 1 & 2;
      i32 = i32 >>> i31;
      i29 = i32 >>> 1 & 1;
      i29 = HEAP32[460552 + ((i27 | i28 | i30 | i31 | i29) + (i32 >>> i29) << 2) >> 2] | 0;
     }
     if ((i29 | 0) != 0) {
      while (1) {
       i27 = (HEAP32[i29 + 4 >> 2] & -8) - i12 | 0;
       i26 = i27 >>> 0 < i25 >>> 0;
       i25 = i26 ? i27 : i25;
       i24 = i26 ? i29 : i24;
       i26 = HEAP32[i29 + 16 >> 2] | 0;
       if ((i26 | 0) != 0) {
        i29 = i26;
        continue;
       }
       i29 = HEAP32[i29 + 20 >> 2] | 0;
       if ((i29 | 0) == 0) {
        break;
       }
      }
     }
     if ((i24 | 0) != 0 ? i25 >>> 0 < ((HEAP32[460256 >> 2] | 0) - i12 | 0) >>> 0 : 0) {
      i4 = HEAP32[460264 >> 2] | 0;
      if (i24 >>> 0 < i4 >>> 0) {
       _abort();
      }
      i2 = i24 + i12 | 0;
      if (!(i24 >>> 0 < i2 >>> 0)) {
       _abort();
      }
      i3 = HEAP32[i24 + 24 >> 2] | 0;
      i6 = HEAP32[i24 + 12 >> 2] | 0;
      do {
       if ((i6 | 0) == (i24 | 0)) {
        i6 = i24 + 20 | 0;
        i5 = HEAP32[i6 >> 2] | 0;
        if ((i5 | 0) == 0) {
         i6 = i24 + 16 | 0;
         i5 = HEAP32[i6 >> 2] | 0;
         if ((i5 | 0) == 0) {
          i22 = 0;
          break;
         }
        }
        while (1) {
         i8 = i5 + 20 | 0;
         i7 = HEAP32[i8 >> 2] | 0;
         if ((i7 | 0) != 0) {
          i5 = i7;
          i6 = i8;
          continue;
         }
         i7 = i5 + 16 | 0;
         i8 = HEAP32[i7 >> 2] | 0;
         if ((i8 | 0) == 0) {
          break;
         } else {
          i5 = i8;
          i6 = i7;
         }
        }
        if (i6 >>> 0 < i4 >>> 0) {
         _abort();
        } else {
         HEAP32[i6 >> 2] = 0;
         i22 = i5;
         break;
        }
       } else {
        i5 = HEAP32[i24 + 8 >> 2] | 0;
        if (i5 >>> 0 < i4 >>> 0) {
         _abort();
        }
        i7 = i5 + 12 | 0;
        if ((HEAP32[i7 >> 2] | 0) != (i24 | 0)) {
         _abort();
        }
        i4 = i6 + 8 | 0;
        if ((HEAP32[i4 >> 2] | 0) == (i24 | 0)) {
         HEAP32[i7 >> 2] = i6;
         HEAP32[i4 >> 2] = i5;
         i22 = i6;
         break;
        } else {
         _abort();
        }
       }
      } while (0);
      do {
       if ((i3 | 0) != 0) {
        i4 = HEAP32[i24 + 28 >> 2] | 0;
        i5 = 460552 + (i4 << 2) | 0;
        if ((i24 | 0) == (HEAP32[i5 >> 2] | 0)) {
         HEAP32[i5 >> 2] = i22;
         if ((i22 | 0) == 0) {
          HEAP32[460252 >> 2] = HEAP32[460252 >> 2] & ~(1 << i4);
          break;
         }
        } else {
         if (i3 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
          _abort();
         }
         i4 = i3 + 16 | 0;
         if ((HEAP32[i4 >> 2] | 0) == (i24 | 0)) {
          HEAP32[i4 >> 2] = i22;
         } else {
          HEAP32[i3 + 20 >> 2] = i22;
         }
         if ((i22 | 0) == 0) {
          break;
         }
        }
        if (i22 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
         _abort();
        }
        HEAP32[i22 + 24 >> 2] = i3;
        i3 = HEAP32[i24 + 16 >> 2] | 0;
        do {
         if ((i3 | 0) != 0) {
          if (i3 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i22 + 16 >> 2] = i3;
           HEAP32[i3 + 24 >> 2] = i22;
           break;
          }
         }
        } while (0);
        i3 = HEAP32[i24 + 20 >> 2] | 0;
        if ((i3 | 0) != 0) {
         if (i3 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i22 + 20 >> 2] = i3;
          HEAP32[i3 + 24 >> 2] = i22;
          break;
         }
        }
       }
      } while (0);
      L87 : do {
       if (!(i25 >>> 0 < 16)) {
        HEAP32[i24 + 4 >> 2] = i12 | 3;
        HEAP32[i24 + (i12 | 4) >> 2] = i25 | 1;
        HEAP32[i24 + (i25 + i12) >> 2] = i25;
        i4 = i25 >>> 3;
        if (i25 >>> 0 < 256) {
         i6 = i4 << 1;
         i3 = 460288 + (i6 << 2) | 0;
         i5 = HEAP32[115062] | 0;
         i4 = 1 << i4;
         if ((i5 & i4 | 0) != 0) {
          i5 = 460288 + (i6 + 2 << 2) | 0;
          i4 = HEAP32[i5 >> 2] | 0;
          if (i4 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           i21 = i5;
           i20 = i4;
          }
         } else {
          HEAP32[115062] = i5 | i4;
          i21 = 460288 + (i6 + 2 << 2) | 0;
          i20 = i3;
         }
         HEAP32[i21 >> 2] = i2;
         HEAP32[i20 + 12 >> 2] = i2;
         HEAP32[i24 + (i12 + 8) >> 2] = i20;
         HEAP32[i24 + (i12 + 12) >> 2] = i3;
         break;
        }
        i3 = i25 >>> 8;
        if ((i3 | 0) != 0) {
         if (i25 >>> 0 > 16777215) {
          i3 = 31;
         } else {
          i31 = (i3 + 1048320 | 0) >>> 16 & 8;
          i32 = i3 << i31;
          i30 = (i32 + 520192 | 0) >>> 16 & 4;
          i32 = i32 << i30;
          i3 = (i32 + 245760 | 0) >>> 16 & 2;
          i3 = 14 - (i30 | i31 | i3) + (i32 << i3 >>> 15) | 0;
          i3 = i25 >>> (i3 + 7 | 0) & 1 | i3 << 1;
         }
        } else {
         i3 = 0;
        }
        i6 = 460552 + (i3 << 2) | 0;
        HEAP32[i24 + (i12 + 28) >> 2] = i3;
        HEAP32[i24 + (i12 + 20) >> 2] = 0;
        HEAP32[i24 + (i12 + 16) >> 2] = 0;
        i4 = HEAP32[460252 >> 2] | 0;
        i5 = 1 << i3;
        if ((i4 & i5 | 0) == 0) {
         HEAP32[460252 >> 2] = i4 | i5;
         HEAP32[i6 >> 2] = i2;
         HEAP32[i24 + (i12 + 24) >> 2] = i6;
         HEAP32[i24 + (i12 + 12) >> 2] = i2;
         HEAP32[i24 + (i12 + 8) >> 2] = i2;
         break;
        }
        i4 = HEAP32[i6 >> 2] | 0;
        if ((i3 | 0) == 31) {
         i3 = 0;
        } else {
         i3 = 25 - (i3 >>> 1) | 0;
        }
        L108 : do {
         if ((HEAP32[i4 + 4 >> 2] & -8 | 0) != (i25 | 0)) {
          i3 = i25 << i3;
          while (1) {
           i6 = i4 + (i3 >>> 31 << 2) + 16 | 0;
           i5 = HEAP32[i6 >> 2] | 0;
           if ((i5 | 0) == 0) {
            break;
           }
           if ((HEAP32[i5 + 4 >> 2] & -8 | 0) == (i25 | 0)) {
            i18 = i5;
            break L108;
           } else {
            i3 = i3 << 1;
            i4 = i5;
           }
          }
          if (i6 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i6 >> 2] = i2;
           HEAP32[i24 + (i12 + 24) >> 2] = i4;
           HEAP32[i24 + (i12 + 12) >> 2] = i2;
           HEAP32[i24 + (i12 + 8) >> 2] = i2;
           break L87;
          }
         } else {
          i18 = i4;
         }
        } while (0);
        i4 = i18 + 8 | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        i5 = HEAP32[460264 >> 2] | 0;
        if (i18 >>> 0 < i5 >>> 0) {
         _abort();
        }
        if (i3 >>> 0 < i5 >>> 0) {
         _abort();
        } else {
         HEAP32[i3 + 12 >> 2] = i2;
         HEAP32[i4 >> 2] = i2;
         HEAP32[i24 + (i12 + 8) >> 2] = i3;
         HEAP32[i24 + (i12 + 12) >> 2] = i18;
         HEAP32[i24 + (i12 + 24) >> 2] = 0;
         break;
        }
       } else {
        i32 = i25 + i12 | 0;
        HEAP32[i24 + 4 >> 2] = i32 | 3;
        i32 = i24 + (i32 + 4) | 0;
        HEAP32[i32 >> 2] = HEAP32[i32 >> 2] | 1;
       }
      } while (0);
      i32 = i24 + 8 | 0;
      STACKTOP = i1;
      return i32 | 0;
     }
    }
   } else {
    i12 = -1;
   }
  }
 } while (0);
 i18 = HEAP32[460256 >> 2] | 0;
 if (!(i12 >>> 0 > i18 >>> 0)) {
  i3 = i18 - i12 | 0;
  i2 = HEAP32[460268 >> 2] | 0;
  if (i3 >>> 0 > 15) {
   HEAP32[460268 >> 2] = i2 + i12;
   HEAP32[460256 >> 2] = i3;
   HEAP32[i2 + (i12 + 4) >> 2] = i3 | 1;
   HEAP32[i2 + i18 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = i12 | 3;
  } else {
   HEAP32[460256 >> 2] = 0;
   HEAP32[460268 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = i18 | 3;
   i32 = i2 + (i18 + 4) | 0;
   HEAP32[i32 >> 2] = HEAP32[i32 >> 2] | 1;
  }
  i32 = i2 + 8 | 0;
  STACKTOP = i1;
  return i32 | 0;
 }
 i18 = HEAP32[460260 >> 2] | 0;
 if (i12 >>> 0 < i18 >>> 0) {
  i31 = i18 - i12 | 0;
  HEAP32[460260 >> 2] = i31;
  i32 = HEAP32[460272 >> 2] | 0;
  HEAP32[460272 >> 2] = i32 + i12;
  HEAP32[i32 + (i12 + 4) >> 2] = i31 | 1;
  HEAP32[i32 + 4 >> 2] = i12 | 3;
  i32 = i32 + 8 | 0;
  STACKTOP = i1;
  return i32 | 0;
 }
 do {
  if ((HEAP32[115180] | 0) == 0) {
   i18 = _sysconf(30) | 0;
   if ((i18 + -1 & i18 | 0) == 0) {
    HEAP32[460728 >> 2] = i18;
    HEAP32[460724 >> 2] = i18;
    HEAP32[460732 >> 2] = -1;
    HEAP32[460736 >> 2] = -1;
    HEAP32[460740 >> 2] = 0;
    HEAP32[460692 >> 2] = 0;
    HEAP32[115180] = (_time(0) | 0) & -16 ^ 1431655768;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 i20 = i12 + 48 | 0;
 i25 = HEAP32[460728 >> 2] | 0;
 i21 = i12 + 47 | 0;
 i22 = i25 + i21 | 0;
 i25 = 0 - i25 | 0;
 i18 = i22 & i25;
 if (!(i18 >>> 0 > i12 >>> 0)) {
  i32 = 0;
  STACKTOP = i1;
  return i32 | 0;
 }
 i24 = HEAP32[460688 >> 2] | 0;
 if ((i24 | 0) != 0 ? (i31 = HEAP32[460680 >> 2] | 0, i32 = i31 + i18 | 0, i32 >>> 0 <= i31 >>> 0 | i32 >>> 0 > i24 >>> 0) : 0) {
  i32 = 0;
  STACKTOP = i1;
  return i32 | 0;
 }
 L269 : do {
  if ((HEAP32[460692 >> 2] & 4 | 0) == 0) {
   i26 = HEAP32[460272 >> 2] | 0;
   L271 : do {
    if ((i26 | 0) != 0) {
     i24 = 460696 | 0;
     while (1) {
      i27 = HEAP32[i24 >> 2] | 0;
      if (!(i27 >>> 0 > i26 >>> 0) ? (i23 = i24 + 4 | 0, (i27 + (HEAP32[i23 >> 2] | 0) | 0) >>> 0 > i26 >>> 0) : 0) {
       break;
      }
      i24 = HEAP32[i24 + 8 >> 2] | 0;
      if ((i24 | 0) == 0) {
       i13 = 182;
       break L271;
      }
     }
     if ((i24 | 0) != 0) {
      i25 = i22 - (HEAP32[460260 >> 2] | 0) & i25;
      if (i25 >>> 0 < 2147483647) {
       i13 = _sbrk(i25 | 0) | 0;
       i26 = (i13 | 0) == ((HEAP32[i24 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) | 0);
       i22 = i13;
       i24 = i25;
       i23 = i26 ? i13 : -1;
       i25 = i26 ? i25 : 0;
       i13 = 191;
      } else {
       i25 = 0;
      }
     } else {
      i13 = 182;
     }
    } else {
     i13 = 182;
    }
   } while (0);
   do {
    if ((i13 | 0) == 182) {
     i23 = _sbrk(0) | 0;
     if ((i23 | 0) != (-1 | 0)) {
      i24 = i23;
      i22 = HEAP32[460724 >> 2] | 0;
      i25 = i22 + -1 | 0;
      if ((i25 & i24 | 0) == 0) {
       i25 = i18;
      } else {
       i25 = i18 - i24 + (i25 + i24 & 0 - i22) | 0;
      }
      i24 = HEAP32[460680 >> 2] | 0;
      i26 = i24 + i25 | 0;
      if (i25 >>> 0 > i12 >>> 0 & i25 >>> 0 < 2147483647) {
       i22 = HEAP32[460688 >> 2] | 0;
       if ((i22 | 0) != 0 ? i26 >>> 0 <= i24 >>> 0 | i26 >>> 0 > i22 >>> 0 : 0) {
        i25 = 0;
        break;
       }
       i22 = _sbrk(i25 | 0) | 0;
       i13 = (i22 | 0) == (i23 | 0);
       i24 = i25;
       i23 = i13 ? i23 : -1;
       i25 = i13 ? i25 : 0;
       i13 = 191;
      } else {
       i25 = 0;
      }
     } else {
      i25 = 0;
     }
    }
   } while (0);
   L291 : do {
    if ((i13 | 0) == 191) {
     i13 = 0 - i24 | 0;
     if ((i23 | 0) != (-1 | 0)) {
      i17 = i23;
      i14 = i25;
      i13 = 202;
      break L269;
     }
     do {
      if ((i22 | 0) != (-1 | 0) & i24 >>> 0 < 2147483647 & i24 >>> 0 < i20 >>> 0 ? (i19 = HEAP32[460728 >> 2] | 0, i19 = i21 - i24 + i19 & 0 - i19, i19 >>> 0 < 2147483647) : 0) {
       if ((_sbrk(i19 | 0) | 0) == (-1 | 0)) {
        _sbrk(i13 | 0) | 0;
        break L291;
       } else {
        i24 = i19 + i24 | 0;
        break;
       }
      }
     } while (0);
     if ((i22 | 0) != (-1 | 0)) {
      i17 = i22;
      i14 = i24;
      i13 = 202;
      break L269;
     }
    }
   } while (0);
   HEAP32[460692 >> 2] = HEAP32[460692 >> 2] | 4;
   i13 = 199;
  } else {
   i25 = 0;
   i13 = 199;
  }
 } while (0);
 if ((((i13 | 0) == 199 ? i18 >>> 0 < 2147483647 : 0) ? (i17 = _sbrk(i18 | 0) | 0, i16 = _sbrk(0) | 0, (i16 | 0) != (-1 | 0) & (i17 | 0) != (-1 | 0) & i17 >>> 0 < i16 >>> 0) : 0) ? (i15 = i16 - i17 | 0, i14 = i15 >>> 0 > (i12 + 40 | 0) >>> 0, i14) : 0) {
  i14 = i14 ? i15 : i25;
  i13 = 202;
 }
 if ((i13 | 0) == 202) {
  i15 = (HEAP32[460680 >> 2] | 0) + i14 | 0;
  HEAP32[460680 >> 2] = i15;
  if (i15 >>> 0 > (HEAP32[460684 >> 2] | 0) >>> 0) {
   HEAP32[460684 >> 2] = i15;
  }
  i15 = HEAP32[460272 >> 2] | 0;
  L311 : do {
   if ((i15 | 0) != 0) {
    i21 = 460696 | 0;
    while (1) {
     i16 = HEAP32[i21 >> 2] | 0;
     i19 = i21 + 4 | 0;
     i20 = HEAP32[i19 >> 2] | 0;
     if ((i17 | 0) == (i16 + i20 | 0)) {
      i13 = 214;
      break;
     }
     i18 = HEAP32[i21 + 8 >> 2] | 0;
     if ((i18 | 0) == 0) {
      break;
     } else {
      i21 = i18;
     }
    }
    if (((i13 | 0) == 214 ? (HEAP32[i21 + 12 >> 2] & 8 | 0) == 0 : 0) ? i15 >>> 0 >= i16 >>> 0 & i15 >>> 0 < i17 >>> 0 : 0) {
     HEAP32[i19 >> 2] = i20 + i14;
     i2 = (HEAP32[460260 >> 2] | 0) + i14 | 0;
     i3 = i15 + 8 | 0;
     if ((i3 & 7 | 0) == 0) {
      i3 = 0;
     } else {
      i3 = 0 - i3 & 7;
     }
     i32 = i2 - i3 | 0;
     HEAP32[460272 >> 2] = i15 + i3;
     HEAP32[460260 >> 2] = i32;
     HEAP32[i15 + (i3 + 4) >> 2] = i32 | 1;
     HEAP32[i15 + (i2 + 4) >> 2] = 40;
     HEAP32[460276 >> 2] = HEAP32[460736 >> 2];
     break;
    }
    if (i17 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
     HEAP32[460264 >> 2] = i17;
    }
    i19 = i17 + i14 | 0;
    i16 = 460696 | 0;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) == (i19 | 0)) {
      i13 = 224;
      break;
     }
     i18 = HEAP32[i16 + 8 >> 2] | 0;
     if ((i18 | 0) == 0) {
      break;
     } else {
      i16 = i18;
     }
    }
    if ((i13 | 0) == 224 ? (HEAP32[i16 + 12 >> 2] & 8 | 0) == 0 : 0) {
     HEAP32[i16 >> 2] = i17;
     i6 = i16 + 4 | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i14;
     i6 = i17 + 8 | 0;
     if ((i6 & 7 | 0) == 0) {
      i6 = 0;
     } else {
      i6 = 0 - i6 & 7;
     }
     i7 = i17 + (i14 + 8) | 0;
     if ((i7 & 7 | 0) == 0) {
      i13 = 0;
     } else {
      i13 = 0 - i7 & 7;
     }
     i15 = i17 + (i13 + i14) | 0;
     i8 = i6 + i12 | 0;
     i7 = i17 + i8 | 0;
     i10 = i15 - (i17 + i6) - i12 | 0;
     HEAP32[i17 + (i6 + 4) >> 2] = i12 | 3;
     L348 : do {
      if ((i15 | 0) != (HEAP32[460272 >> 2] | 0)) {
       if ((i15 | 0) == (HEAP32[460268 >> 2] | 0)) {
        i32 = (HEAP32[460256 >> 2] | 0) + i10 | 0;
        HEAP32[460256 >> 2] = i32;
        HEAP32[460268 >> 2] = i7;
        HEAP32[i17 + (i8 + 4) >> 2] = i32 | 1;
        HEAP32[i17 + (i32 + i8) >> 2] = i32;
        break;
       }
       i12 = i14 + 4 | 0;
       i18 = HEAP32[i17 + (i12 + i13) >> 2] | 0;
       if ((i18 & 3 | 0) == 1) {
        i11 = i18 & -8;
        i16 = i18 >>> 3;
        do {
         if (!(i18 >>> 0 < 256)) {
          i9 = HEAP32[i17 + ((i13 | 24) + i14) >> 2] | 0;
          i19 = HEAP32[i17 + (i14 + 12 + i13) >> 2] | 0;
          do {
           if ((i19 | 0) == (i15 | 0)) {
            i19 = i13 | 16;
            i18 = i17 + (i12 + i19) | 0;
            i16 = HEAP32[i18 >> 2] | 0;
            if ((i16 | 0) == 0) {
             i18 = i17 + (i19 + i14) | 0;
             i16 = HEAP32[i18 >> 2] | 0;
             if ((i16 | 0) == 0) {
              i5 = 0;
              break;
             }
            }
            while (1) {
             i20 = i16 + 20 | 0;
             i19 = HEAP32[i20 >> 2] | 0;
             if ((i19 | 0) != 0) {
              i16 = i19;
              i18 = i20;
              continue;
             }
             i19 = i16 + 16 | 0;
             i20 = HEAP32[i19 >> 2] | 0;
             if ((i20 | 0) == 0) {
              break;
             } else {
              i16 = i20;
              i18 = i19;
             }
            }
            if (i18 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
             _abort();
            } else {
             HEAP32[i18 >> 2] = 0;
             i5 = i16;
             break;
            }
           } else {
            i18 = HEAP32[i17 + ((i13 | 8) + i14) >> 2] | 0;
            if (i18 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
             _abort();
            }
            i16 = i18 + 12 | 0;
            if ((HEAP32[i16 >> 2] | 0) != (i15 | 0)) {
             _abort();
            }
            i20 = i19 + 8 | 0;
            if ((HEAP32[i20 >> 2] | 0) == (i15 | 0)) {
             HEAP32[i16 >> 2] = i19;
             HEAP32[i20 >> 2] = i18;
             i5 = i19;
             break;
            } else {
             _abort();
            }
           }
          } while (0);
          if ((i9 | 0) != 0) {
           i16 = HEAP32[i17 + (i14 + 28 + i13) >> 2] | 0;
           i18 = 460552 + (i16 << 2) | 0;
           if ((i15 | 0) == (HEAP32[i18 >> 2] | 0)) {
            HEAP32[i18 >> 2] = i5;
            if ((i5 | 0) == 0) {
             HEAP32[460252 >> 2] = HEAP32[460252 >> 2] & ~(1 << i16);
             break;
            }
           } else {
            if (i9 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
             _abort();
            }
            i16 = i9 + 16 | 0;
            if ((HEAP32[i16 >> 2] | 0) == (i15 | 0)) {
             HEAP32[i16 >> 2] = i5;
            } else {
             HEAP32[i9 + 20 >> 2] = i5;
            }
            if ((i5 | 0) == 0) {
             break;
            }
           }
           if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
            _abort();
           }
           HEAP32[i5 + 24 >> 2] = i9;
           i15 = i13 | 16;
           i9 = HEAP32[i17 + (i15 + i14) >> 2] | 0;
           do {
            if ((i9 | 0) != 0) {
             if (i9 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
              _abort();
             } else {
              HEAP32[i5 + 16 >> 2] = i9;
              HEAP32[i9 + 24 >> 2] = i5;
              break;
             }
            }
           } while (0);
           i9 = HEAP32[i17 + (i12 + i15) >> 2] | 0;
           if ((i9 | 0) != 0) {
            if (i9 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
             _abort();
            } else {
             HEAP32[i5 + 20 >> 2] = i9;
             HEAP32[i9 + 24 >> 2] = i5;
             break;
            }
           }
          }
         } else {
          i5 = HEAP32[i17 + ((i13 | 8) + i14) >> 2] | 0;
          i12 = HEAP32[i17 + (i14 + 12 + i13) >> 2] | 0;
          i18 = 460288 + (i16 << 1 << 2) | 0;
          if ((i5 | 0) != (i18 | 0)) {
           if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
            _abort();
           }
           if ((HEAP32[i5 + 12 >> 2] | 0) != (i15 | 0)) {
            _abort();
           }
          }
          if ((i12 | 0) == (i5 | 0)) {
           HEAP32[115062] = HEAP32[115062] & ~(1 << i16);
           break;
          }
          if ((i12 | 0) != (i18 | 0)) {
           if (i12 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
            _abort();
           }
           i16 = i12 + 8 | 0;
           if ((HEAP32[i16 >> 2] | 0) == (i15 | 0)) {
            i9 = i16;
           } else {
            _abort();
           }
          } else {
           i9 = i12 + 8 | 0;
          }
          HEAP32[i5 + 12 >> 2] = i12;
          HEAP32[i9 >> 2] = i5;
         }
        } while (0);
        i15 = i17 + ((i11 | i13) + i14) | 0;
        i10 = i11 + i10 | 0;
       }
       i5 = i15 + 4 | 0;
       HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
       HEAP32[i17 + (i8 + 4) >> 2] = i10 | 1;
       HEAP32[i17 + (i10 + i8) >> 2] = i10;
       i5 = i10 >>> 3;
       if (i10 >>> 0 < 256) {
        i10 = i5 << 1;
        i2 = 460288 + (i10 << 2) | 0;
        i9 = HEAP32[115062] | 0;
        i5 = 1 << i5;
        if ((i9 & i5 | 0) != 0) {
         i9 = 460288 + (i10 + 2 << 2) | 0;
         i5 = HEAP32[i9 >> 2] | 0;
         if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          i3 = i9;
          i4 = i5;
         }
        } else {
         HEAP32[115062] = i9 | i5;
         i3 = 460288 + (i10 + 2 << 2) | 0;
         i4 = i2;
        }
        HEAP32[i3 >> 2] = i7;
        HEAP32[i4 + 12 >> 2] = i7;
        HEAP32[i17 + (i8 + 8) >> 2] = i4;
        HEAP32[i17 + (i8 + 12) >> 2] = i2;
        break;
       }
       i3 = i10 >>> 8;
       if ((i3 | 0) != 0) {
        if (i10 >>> 0 > 16777215) {
         i3 = 31;
        } else {
         i31 = (i3 + 1048320 | 0) >>> 16 & 8;
         i32 = i3 << i31;
         i30 = (i32 + 520192 | 0) >>> 16 & 4;
         i32 = i32 << i30;
         i3 = (i32 + 245760 | 0) >>> 16 & 2;
         i3 = 14 - (i30 | i31 | i3) + (i32 << i3 >>> 15) | 0;
         i3 = i10 >>> (i3 + 7 | 0) & 1 | i3 << 1;
        }
       } else {
        i3 = 0;
       }
       i4 = 460552 + (i3 << 2) | 0;
       HEAP32[i17 + (i8 + 28) >> 2] = i3;
       HEAP32[i17 + (i8 + 20) >> 2] = 0;
       HEAP32[i17 + (i8 + 16) >> 2] = 0;
       i9 = HEAP32[460252 >> 2] | 0;
       i5 = 1 << i3;
       if ((i9 & i5 | 0) == 0) {
        HEAP32[460252 >> 2] = i9 | i5;
        HEAP32[i4 >> 2] = i7;
        HEAP32[i17 + (i8 + 24) >> 2] = i4;
        HEAP32[i17 + (i8 + 12) >> 2] = i7;
        HEAP32[i17 + (i8 + 8) >> 2] = i7;
        break;
       }
       i4 = HEAP32[i4 >> 2] | 0;
       if ((i3 | 0) == 31) {
        i3 = 0;
       } else {
        i3 = 25 - (i3 >>> 1) | 0;
       }
       L444 : do {
        if ((HEAP32[i4 + 4 >> 2] & -8 | 0) != (i10 | 0)) {
         i3 = i10 << i3;
         while (1) {
          i5 = i4 + (i3 >>> 31 << 2) + 16 | 0;
          i9 = HEAP32[i5 >> 2] | 0;
          if ((i9 | 0) == 0) {
           break;
          }
          if ((HEAP32[i9 + 4 >> 2] & -8 | 0) == (i10 | 0)) {
           i2 = i9;
           break L444;
          } else {
           i3 = i3 << 1;
           i4 = i9;
          }
         }
         if (i5 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i5 >> 2] = i7;
          HEAP32[i17 + (i8 + 24) >> 2] = i4;
          HEAP32[i17 + (i8 + 12) >> 2] = i7;
          HEAP32[i17 + (i8 + 8) >> 2] = i7;
          break L348;
         }
        } else {
         i2 = i4;
        }
       } while (0);
       i4 = i2 + 8 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       i5 = HEAP32[460264 >> 2] | 0;
       if (i2 >>> 0 < i5 >>> 0) {
        _abort();
       }
       if (i3 >>> 0 < i5 >>> 0) {
        _abort();
       } else {
        HEAP32[i3 + 12 >> 2] = i7;
        HEAP32[i4 >> 2] = i7;
        HEAP32[i17 + (i8 + 8) >> 2] = i3;
        HEAP32[i17 + (i8 + 12) >> 2] = i2;
        HEAP32[i17 + (i8 + 24) >> 2] = 0;
        break;
       }
      } else {
       i32 = (HEAP32[460260 >> 2] | 0) + i10 | 0;
       HEAP32[460260 >> 2] = i32;
       HEAP32[460272 >> 2] = i7;
       HEAP32[i17 + (i8 + 4) >> 2] = i32 | 1;
      }
     } while (0);
     i32 = i17 + (i6 | 8) | 0;
     STACKTOP = i1;
     return i32 | 0;
    }
    i3 = 460696 | 0;
    while (1) {
     i2 = HEAP32[i3 >> 2] | 0;
     if (!(i2 >>> 0 > i15 >>> 0) ? (i11 = HEAP32[i3 + 4 >> 2] | 0, i10 = i2 + i11 | 0, i10 >>> 0 > i15 >>> 0) : 0) {
      break;
     }
     i3 = HEAP32[i3 + 8 >> 2] | 0;
    }
    i3 = i2 + (i11 + -39) | 0;
    if ((i3 & 7 | 0) == 0) {
     i3 = 0;
    } else {
     i3 = 0 - i3 & 7;
    }
    i2 = i2 + (i11 + -47 + i3) | 0;
    i2 = i2 >>> 0 < (i15 + 16 | 0) >>> 0 ? i15 : i2;
    i3 = i2 + 8 | 0;
    i4 = i17 + 8 | 0;
    if ((i4 & 7 | 0) == 0) {
     i4 = 0;
    } else {
     i4 = 0 - i4 & 7;
    }
    i32 = i14 + -40 - i4 | 0;
    HEAP32[460272 >> 2] = i17 + i4;
    HEAP32[460260 >> 2] = i32;
    HEAP32[i17 + (i4 + 4) >> 2] = i32 | 1;
    HEAP32[i17 + (i14 + -36) >> 2] = 40;
    HEAP32[460276 >> 2] = HEAP32[460736 >> 2];
    HEAP32[i2 + 4 >> 2] = 27;
    HEAP32[i3 + 0 >> 2] = HEAP32[460696 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[460700 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[460704 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[460708 >> 2];
    HEAP32[460696 >> 2] = i17;
    HEAP32[460700 >> 2] = i14;
    HEAP32[460708 >> 2] = 0;
    HEAP32[460704 >> 2] = i3;
    i4 = i2 + 28 | 0;
    HEAP32[i4 >> 2] = 7;
    if ((i2 + 32 | 0) >>> 0 < i10 >>> 0) {
     while (1) {
      i3 = i4 + 4 | 0;
      HEAP32[i3 >> 2] = 7;
      if ((i4 + 8 | 0) >>> 0 < i10 >>> 0) {
       i4 = i3;
      } else {
       break;
      }
     }
    }
    if ((i2 | 0) != (i15 | 0)) {
     i2 = i2 - i15 | 0;
     i3 = i15 + (i2 + 4) | 0;
     HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -2;
     HEAP32[i15 + 4 >> 2] = i2 | 1;
     HEAP32[i15 + i2 >> 2] = i2;
     i3 = i2 >>> 3;
     if (i2 >>> 0 < 256) {
      i4 = i3 << 1;
      i2 = 460288 + (i4 << 2) | 0;
      i5 = HEAP32[115062] | 0;
      i3 = 1 << i3;
      if ((i5 & i3 | 0) != 0) {
       i4 = 460288 + (i4 + 2 << 2) | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        i7 = i4;
        i8 = i3;
       }
      } else {
       HEAP32[115062] = i5 | i3;
       i7 = 460288 + (i4 + 2 << 2) | 0;
       i8 = i2;
      }
      HEAP32[i7 >> 2] = i15;
      HEAP32[i8 + 12 >> 2] = i15;
      HEAP32[i15 + 8 >> 2] = i8;
      HEAP32[i15 + 12 >> 2] = i2;
      break;
     }
     i3 = i2 >>> 8;
     if ((i3 | 0) != 0) {
      if (i2 >>> 0 > 16777215) {
       i3 = 31;
      } else {
       i31 = (i3 + 1048320 | 0) >>> 16 & 8;
       i32 = i3 << i31;
       i30 = (i32 + 520192 | 0) >>> 16 & 4;
       i32 = i32 << i30;
       i3 = (i32 + 245760 | 0) >>> 16 & 2;
       i3 = 14 - (i30 | i31 | i3) + (i32 << i3 >>> 15) | 0;
       i3 = i2 >>> (i3 + 7 | 0) & 1 | i3 << 1;
      }
     } else {
      i3 = 0;
     }
     i7 = 460552 + (i3 << 2) | 0;
     HEAP32[i15 + 28 >> 2] = i3;
     HEAP32[i15 + 20 >> 2] = 0;
     HEAP32[i15 + 16 >> 2] = 0;
     i4 = HEAP32[460252 >> 2] | 0;
     i5 = 1 << i3;
     if ((i4 & i5 | 0) == 0) {
      HEAP32[460252 >> 2] = i4 | i5;
      HEAP32[i7 >> 2] = i15;
      HEAP32[i15 + 24 >> 2] = i7;
      HEAP32[i15 + 12 >> 2] = i15;
      HEAP32[i15 + 8 >> 2] = i15;
      break;
     }
     i4 = HEAP32[i7 >> 2] | 0;
     if ((i3 | 0) == 31) {
      i3 = 0;
     } else {
      i3 = 25 - (i3 >>> 1) | 0;
     }
     L499 : do {
      if ((HEAP32[i4 + 4 >> 2] & -8 | 0) != (i2 | 0)) {
       i3 = i2 << i3;
       while (1) {
        i7 = i4 + (i3 >>> 31 << 2) + 16 | 0;
        i5 = HEAP32[i7 >> 2] | 0;
        if ((i5 | 0) == 0) {
         break;
        }
        if ((HEAP32[i5 + 4 >> 2] & -8 | 0) == (i2 | 0)) {
         i6 = i5;
         break L499;
        } else {
         i3 = i3 << 1;
         i4 = i5;
        }
       }
       if (i7 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i7 >> 2] = i15;
        HEAP32[i15 + 24 >> 2] = i4;
        HEAP32[i15 + 12 >> 2] = i15;
        HEAP32[i15 + 8 >> 2] = i15;
        break L311;
       }
      } else {
       i6 = i4;
      }
     } while (0);
     i4 = i6 + 8 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i2 = HEAP32[460264 >> 2] | 0;
     if (i6 >>> 0 < i2 >>> 0) {
      _abort();
     }
     if (i3 >>> 0 < i2 >>> 0) {
      _abort();
     } else {
      HEAP32[i3 + 12 >> 2] = i15;
      HEAP32[i4 >> 2] = i15;
      HEAP32[i15 + 8 >> 2] = i3;
      HEAP32[i15 + 12 >> 2] = i6;
      HEAP32[i15 + 24 >> 2] = 0;
      break;
     }
    }
   } else {
    i32 = HEAP32[460264 >> 2] | 0;
    if ((i32 | 0) == 0 | i17 >>> 0 < i32 >>> 0) {
     HEAP32[460264 >> 2] = i17;
    }
    HEAP32[460696 >> 2] = i17;
    HEAP32[460700 >> 2] = i14;
    HEAP32[460708 >> 2] = 0;
    HEAP32[460284 >> 2] = HEAP32[115180];
    HEAP32[460280 >> 2] = -1;
    i2 = 0;
    do {
     i32 = i2 << 1;
     i31 = 460288 + (i32 << 2) | 0;
     HEAP32[460288 + (i32 + 3 << 2) >> 2] = i31;
     HEAP32[460288 + (i32 + 2 << 2) >> 2] = i31;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != 32);
    i2 = i17 + 8 | 0;
    if ((i2 & 7 | 0) == 0) {
     i2 = 0;
    } else {
     i2 = 0 - i2 & 7;
    }
    i32 = i14 + -40 - i2 | 0;
    HEAP32[460272 >> 2] = i17 + i2;
    HEAP32[460260 >> 2] = i32;
    HEAP32[i17 + (i2 + 4) >> 2] = i32 | 1;
    HEAP32[i17 + (i14 + -36) >> 2] = 40;
    HEAP32[460276 >> 2] = HEAP32[460736 >> 2];
   }
  } while (0);
  i2 = HEAP32[460260 >> 2] | 0;
  if (i2 >>> 0 > i12 >>> 0) {
   i31 = i2 - i12 | 0;
   HEAP32[460260 >> 2] = i31;
   i32 = HEAP32[460272 >> 2] | 0;
   HEAP32[460272 >> 2] = i32 + i12;
   HEAP32[i32 + (i12 + 4) >> 2] = i31 | 1;
   HEAP32[i32 + 4 >> 2] = i12 | 3;
   i32 = i32 + 8 | 0;
   STACKTOP = i1;
   return i32 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i32 = 0;
 STACKTOP = i1;
 return i32 | 0;
}
function __ZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i4, i39, i8, i44, i2) {
 i4 = i4 | 0;
 i39 = i39 | 0;
 i8 = i8 | 0;
 i44 = i44 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, d25 = 0.0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, i31 = 0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, i38 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, d96 = 0.0, d97 = 0.0, d98 = 0.0, d99 = 0.0, d100 = 0.0, d101 = 0.0, d102 = 0.0, d103 = 0.0, d104 = 0.0, d105 = 0.0, d106 = 0.0, d107 = 0.0, d108 = 0.0, d109 = 0.0, d110 = 0.0, d111 = 0.0, d112 = 0.0, d113 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 736 | 0;
 i6 = i1 + 720 | 0;
 i7 = i1 + 704 | 0;
 i10 = i1 + 568 | 0;
 i5 = i1 + 492 | 0;
 i46 = i1 + 488 | 0;
 i43 = i1 + 472 | 0;
 i35 = i1 + 456 | 0;
 i34 = i1 + 432 | 0;
 i9 = i1 + 368 | 0;
 i11 = i1;
 i38 = i4 + 20 | 0;
 i12 = HEAP32[i38 >> 2] | 0;
 if ((i12 | 0) == 0) {
  i12 = HEAP32[i4 + 4 >> 2] | 0;
  i12 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, i39, i8) | 0;
  HEAP32[i38 >> 2] = i12;
  HEAP8[i4 + 16 | 0] = 1;
 }
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = i12;
 i41 = HEAP32[i39 + 192 >> 2] | 0;
 i40 = HEAP32[i8 + 192 >> 2] | 0;
 i47 = i41 + 4 | 0;
 if ((HEAP32[i47 >> 2] | 0) == 10 ? (HEAP32[i40 + 4 >> 2] | 0) == 10 : 0) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 28 >> 2] & 127](i41) | 0;
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[i40 >> 2] | 0) + 28 >> 2] & 127](i40) | 0;
  d25 = +__ZNK20btPersistentManifold27getContactBreakingThresholdEv(HEAP32[i38 >> 2] | 0);
  i94 = HEAP32[i41 + 52 >> 2] | 0;
  d101 = +HEAPF32[i41 + (i94 << 2) + 28 >> 2];
  d33 = +HEAPF32[i41 + (((i94 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
  i95 = HEAP32[i40 + 52 >> 2] | 0;
  d103 = +HEAPF32[i40 + (i95 << 2) + 28 >> 2];
  d28 = +HEAPF32[i40 + (((i95 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
  d37 = +HEAPF32[i39 + (i94 << 2) + 4 >> 2];
  d32 = +HEAPF32[i39 + (i94 << 2) + 20 >> 2];
  d36 = +HEAPF32[i39 + (i94 << 2) + 36 >> 2];
  d102 = +HEAPF32[i8 + (i95 << 2) + 4 >> 2];
  d100 = +HEAPF32[i8 + (i95 << 2) + 20 >> 2];
  d98 = +HEAPF32[i8 + (i95 << 2) + 36 >> 2];
  d27 = +HEAPF32[i8 + 52 >> 2];
  d29 = +HEAPF32[i8 + 56 >> 2];
  d30 = +HEAPF32[i8 + 60 >> 2];
  d99 = d27 - +HEAPF32[i39 + 52 >> 2];
  d97 = d29 - +HEAPF32[i39 + 56 >> 2];
  d96 = d30 - +HEAPF32[i39 + 60 >> 2];
  d105 = d37 * d102 + d32 * d100 + d36 * d98;
  d104 = d37 * d99 + d32 * d97 + d36 * d96;
  d106 = d102 * d99 + d100 * d97 + d98 * d96;
  d107 = 1.0 - d105 * d105;
  if (!(d107 == 0.0)) {
   d107 = (d104 - d105 * d106) / d107;
   d108 = -d101;
   if (!(d107 < d108)) {
    if (d107 > d101) {
     d108 = d101;
    } else {
     d108 = d107;
    }
   }
  } else {
   d108 = 0.0;
  }
  d107 = d105 * d108 - d106;
  d106 = -d103;
  if (d107 < d106) {
   d104 = d105 * d106 + d104;
   d103 = -d101;
   if (!(d104 < d103)) {
    if (d104 > d101) {
     d103 = d106;
    } else {
     d101 = d104;
     d103 = d106;
    }
   } else {
    d101 = d103;
    d103 = d106;
   }
  } else {
   if (d107 > d103) {
    d104 = d103 * d105 + d104;
    d105 = -d101;
    if (!(d104 < d105)) {
     if (!(d104 > d101)) {
      d101 = d104;
     }
    } else {
     d101 = d105;
    }
   } else {
    d101 = d108;
    d103 = d107;
   }
  }
  d102 = d102 * d103;
  d100 = d100 * d103;
  d98 = d98 * d103;
  d99 = d102 + (d99 - d37 * d101);
  d97 = d100 + (d97 - d32 * d101);
  d101 = d98 + (d96 - d36 * d101);
  d103 = d101 * d101 + (d99 * d99 + d97 * d97);
  d96 = +Math_sqrt(+d103);
  d33 = d96 - d33 - d28;
  if (!(d33 > d25)) {
   do {
    if (d103 <= 1.4210854715202004e-14) {
     if (+Math_abs(+d36) > .7071067690849304) {
      d37 = 1.0 / +Math_sqrt(+(d32 * d32 + d36 * d36));
      HEAPF32[i6 >> 2] = 0.0;
      d36 = -(d36 * d37);
      HEAPF32[i6 + 4 >> 2] = d36;
      d32 = d32 * d37;
      HEAPF32[i6 + 8 >> 2] = d32;
      d37 = 0.0;
      break;
     } else {
      d36 = 1.0 / +Math_sqrt(+(d37 * d37 + d32 * d32));
      d32 = -(d32 * d36);
      HEAPF32[i6 >> 2] = d32;
      d36 = d37 * d36;
      HEAPF32[i6 + 4 >> 2] = d36;
      HEAPF32[i6 + 8 >> 2] = 0.0;
      d37 = d32;
      d32 = 0.0;
      break;
     }
    } else {
     d32 = -(1.0 / d96);
     d37 = d99 * d32;
     d36 = d97 * d32;
     d32 = d101 * d32;
     HEAPF32[i6 >> 2] = d37;
     HEAPF32[i6 + 4 >> 2] = d36;
     HEAPF32[i6 + 8 >> 2] = d32;
     HEAPF32[i6 + 12 >> 2] = 0.0;
    }
   } while (0);
   HEAPF32[i7 >> 2] = d28 * d37 + (d102 + d27);
   HEAPF32[i7 + 4 >> 2] = d28 * d36 + (d100 + d29);
   HEAPF32[i7 + 8 >> 2] = d28 * d32 + (d98 + d30);
   HEAPF32[i7 + 12 >> 2] = 0.0;
  }
  if (d33 < d25) {
   FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 7](i2, i6, i7, d33);
  }
  i3 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i2 + 136 >> 2] | 0)) {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i2 + 8 | 0, i2 + 72 | 0);
   STACKTOP = i1;
   return;
  } else {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i2 + 72 | 0, i2 + 8 | 0);
   STACKTOP = i1;
   return;
  }
 }
 i15 = i10 + 128 | 0;
 HEAPF32[i15 >> 2] = 999999984306749400.0;
 i6 = i10 + 132 | 0;
 HEAP32[i6 >> 2] = 0;
 __ZN17btGjkPairDetectorC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i5, i41, i40, HEAP32[i4 + 8 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0);
 HEAP32[i5 + 28 >> 2] = i41;
 HEAP32[i5 + 32 >> 2] = i40;
 d107 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i41 >> 2] | 0) + 44 >> 2] & 7](i41);
 d108 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i40 >> 2] | 0) + 44 >> 2] & 7](i40);
 d108 = d107 + d108 + +__ZNK20btPersistentManifold27getContactBreakingThresholdEv(HEAP32[i38 >> 2] | 0);
 HEAPF32[i15 >> 2] = d108 * d108;
 HEAP32[i6 >> 2] = HEAP32[i44 + 40 >> 2];
 i6 = i39 + 4 | 0;
 HEAP32[i10 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i15 = i10 + 16 | 0;
 i24 = i39 + 20 | 0;
 HEAP32[i15 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
 HEAP32[i15 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
 HEAP32[i15 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
 HEAP32[i15 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
 i13 = i10 + 32 | 0;
 i22 = i39 + 36 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 i14 = i10 + 48 | 0;
 i20 = i39 + 52 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 i16 = i10 + 64 | 0;
 i7 = i8 + 4 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i18 = i10 + 80 | 0;
 i19 = i8 + 20 | 0;
 HEAP32[i18 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
 i12 = i10 + 96 | 0;
 i23 = i8 + 36 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
 i17 = i10 + 112 | 0;
 i21 = i8 + 52 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 if (((HEAP32[i47 >> 2] | 0) < 7 ? (i45 = HEAP32[i40 + 4 >> 2] | 0, (i45 | 0) < 7) : 0) ? (HEAP32[i46 >> 2] = 459200, i26 = i41 + 52 | 0, (HEAP32[i26 >> 2] | 0) != 0) : 0) {
  i47 = i40 + 52 | 0;
  if ((HEAP32[i47 >> 2] | 0) != 0) {
   __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i5, i10, i46, HEAP32[i44 + 20 >> 2] | 0, 0);
   d25 = +__ZNK20btPersistentManifold27getContactBreakingThresholdEv(HEAP32[i38 >> 2] | 0);
   if ((HEAP8[i44 + 24 | 0] | 0) != 0) {
    if (__ZN27btPolyhedralContactClipping18findSeparatingAxisERK18btConvexPolyhedronS2_RK11btTransformS5_R9btVector3(HEAP32[i26 >> 2] | 0, HEAP32[i47 >> 2] | 0, i6, i7, i43) | 0) {
     d27 = 0.0;
     i42 = 37;
    }
   } else {
    d106 = +HEAPF32[i5 + 4 >> 2];
    d107 = +HEAPF32[i5 + 8 >> 2];
    d108 = +HEAPF32[i5 + 12 >> 2];
    d27 = 1.0 / +Math_sqrt(+(d106 * d106 + d107 * d107 + d108 * d108));
    HEAPF32[i43 >> 2] = d106 * d27;
    HEAPF32[i43 + 4 >> 2] = d107 * d27;
    HEAPF32[i43 + 8 >> 2] = d108 * d27;
    HEAPF32[i43 + 12 >> 2] = 0.0;
    d27 = +HEAPF32[i5 + 56 >> 2];
    i42 = 37;
   }
   if ((i42 | 0) == 37) {
    __ZN27btPolyhedralContactClipping19clipHullAgainstHullERK9btVector3RK18btConvexPolyhedronS5_RK11btTransformS8_ffRN36btDiscreteCollisionDetectorInterface6ResultE(i43, HEAP32[i26 >> 2] | 0, HEAP32[i47 >> 2] | 0, i6, i7, d27 - d25, d25, i2);
   }
   if ((HEAP8[i4 + 16 | 0] | 0) == 0) {
    STACKTOP = i1;
    return;
   }
   i3 = HEAP32[i3 >> 2] | 0;
   if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
    STACKTOP = i1;
    return;
   }
   if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i2 + 136 >> 2] | 0)) {
    __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i2 + 8 | 0, i2 + 72 | 0);
    STACKTOP = i1;
    return;
   } else {
    __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i2 + 72 | 0, i2 + 8 | 0);
    STACKTOP = i1;
    return;
   }
  }
  if ((i45 | 0) == 1) {
   __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i5, i10, i46, HEAP32[i44 + 20 >> 2] | 0, 0);
   d25 = +HEAPF32[i5 + 4 >> 2];
   d28 = +HEAPF32[i5 + 8 >> 2];
   d108 = +HEAPF32[i5 + 12 >> 2];
   d107 = 1.0 / +Math_sqrt(+(d25 * d25 + d28 * d28 + d108 * d108));
   HEAPF32[i35 >> 2] = d25 * d107;
   HEAPF32[i35 + 4 >> 2] = d28 * d107;
   HEAPF32[i35 + 8 >> 2] = d108 * d107;
   HEAPF32[i35 + 12 >> 2] = 0.0;
   i11 = i34 + 16 | 0;
   HEAP8[i11] = 1;
   i12 = i34 + 12 | 0;
   HEAP32[i12 >> 2] = 0;
   i10 = i34 + 4 | 0;
   HEAP32[i10 >> 2] = 0;
   i9 = i34 + 8 | 0;
   HEAP32[i9 >> 2] = 0;
   i20 = i40 + 56 | 0;
   d107 = +HEAPF32[i20 >> 2];
   i22 = i8 + 8 | 0;
   d108 = +HEAPF32[i20 + 4 >> 2];
   i23 = i8 + 12 | 0;
   d28 = +HEAPF32[i20 + 8 >> 2];
   i21 = i8 + 52 | 0;
   d25 = +HEAPF32[i21 >> 2] + (+HEAPF32[i7 >> 2] * d107 + +HEAPF32[i22 >> 2] * d108 + +HEAPF32[i23 >> 2] * d28);
   i16 = i8 + 20 | 0;
   i19 = i8 + 24 | 0;
   i17 = i8 + 28 | 0;
   i18 = i8 + 56 | 0;
   d27 = +HEAPF32[i18 >> 2] + (d107 * +HEAPF32[i16 >> 2] + d108 * +HEAPF32[i19 >> 2] + d28 * +HEAPF32[i17 >> 2]);
   i13 = i8 + 36 | 0;
   i15 = i8 + 40 | 0;
   i14 = i8 + 44 | 0;
   i8 = i8 + 60 | 0;
   d28 = +HEAPF32[i8 >> 2] + (d107 * +HEAPF32[i13 >> 2] + d108 * +HEAPF32[i15 >> 2] + d28 * +HEAPF32[i14 >> 2]);
   i24 = __Z22btAlignedAllocInternalji(16, 16) | 0;
   i41 = HEAP32[i10 >> 2] | 0;
   if ((i41 | 0) > 0) {
    i39 = 0;
    do {
     i40 = i24 + (i39 << 4) | 0;
     if ((i40 | 0) != 0) {
      i95 = (HEAP32[i12 >> 2] | 0) + (i39 << 4) | 0;
      HEAP32[i40 + 0 >> 2] = HEAP32[i95 + 0 >> 2];
      HEAP32[i40 + 4 >> 2] = HEAP32[i95 + 4 >> 2];
      HEAP32[i40 + 8 >> 2] = HEAP32[i95 + 8 >> 2];
      HEAP32[i40 + 12 >> 2] = HEAP32[i95 + 12 >> 2];
     }
     i39 = i39 + 1 | 0;
    } while ((i39 | 0) != (i41 | 0));
   }
   i39 = HEAP32[i12 >> 2] | 0;
   if ((i39 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i39);
    }
    HEAP32[i12 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i12 >> 2] = i24;
   HEAP32[i9 >> 2] = 1;
   i39 = HEAP32[i10 >> 2] | 0;
   i40 = i24 + (i39 << 4) | 0;
   if ((i40 | 0) == 0) {
    i40 = 1;
   } else {
    HEAPF32[i40 >> 2] = d25;
    HEAPF32[i24 + (i39 << 4) + 4 >> 2] = d27;
    HEAPF32[i24 + (i39 << 4) + 8 >> 2] = d28;
    HEAPF32[i24 + (i39 << 4) + 12 >> 2] = 0.0;
    i39 = HEAP32[i10 >> 2] | 0;
    i40 = HEAP32[i9 >> 2] | 0;
   }
   i41 = i39 + 1 | 0;
   HEAP32[i10 >> 2] = i41;
   d107 = +HEAPF32[i20 + 16 >> 2];
   d108 = +HEAPF32[i20 + 20 >> 2];
   d27 = +HEAPF32[i20 + 24 >> 2];
   d25 = +HEAPF32[i21 >> 2] + (+HEAPF32[i7 >> 2] * d107 + +HEAPF32[i22 >> 2] * d108 + +HEAPF32[i23 >> 2] * d27);
   d28 = +HEAPF32[i18 >> 2] + (d107 * +HEAPF32[i16 >> 2] + d108 * +HEAPF32[i19 >> 2] + d27 * +HEAPF32[i17 >> 2]);
   d27 = +HEAPF32[i8 >> 2] + (d107 * +HEAPF32[i13 >> 2] + d108 * +HEAPF32[i15 >> 2] + d27 * +HEAPF32[i14 >> 2]);
   if ((i41 | 0) == (i40 | 0)) {
    i24 = (i40 | 0) == 0 ? 1 : i40 << 1;
    if ((i40 | 0) < (i24 | 0)) {
     if ((i24 | 0) == 0) {
      i39 = 0;
     } else {
      i39 = __Z22btAlignedAllocInternalji(i24 << 4, 16) | 0;
      i40 = HEAP32[i10 >> 2] | 0;
     }
     if ((i40 | 0) > 0) {
      i42 = 0;
      do {
       i41 = i39 + (i42 << 4) | 0;
       if ((i41 | 0) != 0) {
        i95 = (HEAP32[i12 >> 2] | 0) + (i42 << 4) | 0;
        HEAP32[i41 + 0 >> 2] = HEAP32[i95 + 0 >> 2];
        HEAP32[i41 + 4 >> 2] = HEAP32[i95 + 4 >> 2];
        HEAP32[i41 + 8 >> 2] = HEAP32[i95 + 8 >> 2];
        HEAP32[i41 + 12 >> 2] = HEAP32[i95 + 12 >> 2];
       }
       i42 = i42 + 1 | 0;
      } while ((i42 | 0) != (i40 | 0));
     }
     i40 = HEAP32[i12 >> 2] | 0;
     if ((i40 | 0) != 0) {
      if ((HEAP8[i11] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i40);
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i11] = 1;
     HEAP32[i12 >> 2] = i39;
     HEAP32[i9 >> 2] = i24;
     i41 = HEAP32[i10 >> 2] | 0;
    } else {
     i24 = i40;
     i41 = i40;
    }
   } else {
    i24 = i40;
   }
   i39 = HEAP32[i12 >> 2] | 0;
   i40 = i39 + (i41 << 4) | 0;
   if ((i40 | 0) != 0) {
    HEAPF32[i40 >> 2] = d25;
    HEAPF32[i39 + (i41 << 4) + 4 >> 2] = d28;
    HEAPF32[i39 + (i41 << 4) + 8 >> 2] = d27;
    HEAPF32[i39 + (i41 << 4) + 12 >> 2] = 0.0;
    i41 = HEAP32[i10 >> 2] | 0;
    i24 = HEAP32[i9 >> 2] | 0;
   }
   i39 = i41 + 1 | 0;
   HEAP32[i10 >> 2] = i39;
   d107 = +HEAPF32[i20 + 32 >> 2];
   d108 = +HEAPF32[i20 + 36 >> 2];
   d28 = +HEAPF32[i20 + 40 >> 2];
   d25 = +HEAPF32[i21 >> 2] + (+HEAPF32[i7 >> 2] * d107 + +HEAPF32[i22 >> 2] * d108 + +HEAPF32[i23 >> 2] * d28);
   d27 = +HEAPF32[i18 >> 2] + (d107 * +HEAPF32[i16 >> 2] + d108 * +HEAPF32[i19 >> 2] + d28 * +HEAPF32[i17 >> 2]);
   d28 = +HEAPF32[i8 >> 2] + (d107 * +HEAPF32[i13 >> 2] + d108 * +HEAPF32[i15 >> 2] + d28 * +HEAPF32[i14 >> 2]);
   if ((i39 | 0) == (i24 | 0)) {
    i7 = (i24 | 0) == 0 ? 1 : i24 << 1;
    if ((i24 | 0) < (i7 | 0)) {
     if ((i7 | 0) == 0) {
      i8 = 0;
     } else {
      i8 = __Z22btAlignedAllocInternalji(i7 << 4, 16) | 0;
      i24 = HEAP32[i10 >> 2] | 0;
     }
     if ((i24 | 0) > 0) {
      i13 = 0;
      do {
       i14 = i8 + (i13 << 4) | 0;
       if ((i14 | 0) != 0) {
        i95 = (HEAP32[i12 >> 2] | 0) + (i13 << 4) | 0;
        HEAP32[i14 + 0 >> 2] = HEAP32[i95 + 0 >> 2];
        HEAP32[i14 + 4 >> 2] = HEAP32[i95 + 4 >> 2];
        HEAP32[i14 + 8 >> 2] = HEAP32[i95 + 8 >> 2];
        HEAP32[i14 + 12 >> 2] = HEAP32[i95 + 12 >> 2];
       }
       i13 = i13 + 1 | 0;
      } while ((i13 | 0) != (i24 | 0));
     }
     i13 = HEAP32[i12 >> 2] | 0;
     if ((i13 | 0) != 0) {
      if ((HEAP8[i11] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i13);
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i11] = 1;
     HEAP32[i12 >> 2] = i8;
     HEAP32[i9 >> 2] = i7;
     i24 = HEAP32[i10 >> 2] | 0;
    }
   } else {
    i24 = i39;
   }
   i7 = HEAP32[i12 >> 2] | 0;
   i8 = i7 + (i24 << 4) | 0;
   if ((i8 | 0) != 0) {
    HEAPF32[i8 >> 2] = d25;
    HEAPF32[i7 + (i24 << 4) + 4 >> 2] = d27;
    HEAPF32[i7 + (i24 << 4) + 8 >> 2] = d28;
    HEAPF32[i7 + (i24 << 4) + 12 >> 2] = 0.0;
    i24 = HEAP32[i10 >> 2] | 0;
   }
   HEAP32[i10 >> 2] = i24 + 1;
   d108 = +__ZNK20btPersistentManifold27getContactBreakingThresholdEv(HEAP32[i38 >> 2] | 0);
   __ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_EffRN36btDiscreteCollisionDetectorInterface6ResultE(i35, HEAP32[i26 >> 2] | 0, i6, i34, +HEAPF32[i5 + 56 >> 2] - d108, d108, i2);
   do {
    if ((HEAP8[i4 + 16 | 0] | 0) != 0 ? (i31 = HEAP32[i3 >> 2] | 0, (HEAP32[i31 + 1116 >> 2] | 0) != 0) : 0) {
     if ((HEAP32[i31 + 1108 >> 2] | 0) == (HEAP32[i2 + 136 >> 2] | 0)) {
      __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i31, i2 + 8 | 0, i2 + 72 | 0);
      break;
     } else {
      __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i31, i2 + 72 | 0, i2 + 8 | 0);
      break;
     }
    }
   } while (0);
   i2 = HEAP32[i12 >> 2] | 0;
   if ((i2 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i2);
    }
    HEAP32[i12 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   STACKTOP = i1;
   return;
  }
 }
 i26 = i44 + 20 | 0;
 __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i5, i10, i2, HEAP32[i26 >> 2] | 0, 0);
 i31 = i4 + 28 | 0;
 if ((HEAP32[i31 >> 2] | 0) != 0 ? (HEAP32[(HEAP32[i3 >> 2] | 0) + 1116 >> 2] | 0) < (HEAP32[i4 + 32 >> 2] | 0) : 0) {
  d27 = +HEAPF32[i5 + 4 >> 2];
  d28 = +HEAPF32[i5 + 8 >> 2];
  d108 = +HEAPF32[i5 + 12 >> 2];
  d32 = 1.0 / +Math_sqrt(+(d27 * d27 + d28 * d28 + d108 * d108));
  d27 = d27 * d32;
  d28 = d28 * d32;
  d32 = d108 * d32;
  if (+Math_abs(+d32) > .7071067690849304) {
   d25 = 1.0 / +Math_sqrt(+(d32 * d32 + d28 * d28));
   d29 = 0.0;
   d30 = -(d32 * d25);
   d25 = d28 * d25;
  } else {
   d30 = 1.0 / +Math_sqrt(+(d27 * d27 + d28 * d28));
   d29 = -(d28 * d30);
   d30 = d27 * d30;
   d25 = 0.0;
  }
  d33 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i41 >> 2] | 0) + 16 >> 2] & 7](i41);
  d36 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i40 >> 2] | 0) + 16 >> 2] & 7](i40);
  i43 = d33 < d36;
  d36 = +HEAPF32[113934] / (i43 ? d33 : d36);
  if (i43) {
   HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   i95 = i9 + 16 | 0;
   HEAP32[i95 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
   HEAP32[i95 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i95 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
   HEAP32[i95 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
   i95 = i9 + 32 | 0;
   HEAP32[i95 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
   HEAP32[i95 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i95 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i95 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i95 = i9 + 48 | 0;
   HEAP32[i95 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
   HEAP32[i95 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i95 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i95 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
  } else {
   HEAP32[i9 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
   i95 = i9 + 16 | 0;
   HEAP32[i95 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
   HEAP32[i95 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i95 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i95 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
   i95 = i9 + 32 | 0;
   HEAP32[i95 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
   HEAP32[i95 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i95 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i95 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   i95 = i9 + 48 | 0;
   HEAP32[i95 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
   HEAP32[i95 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i95 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i95 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
  }
  i35 = HEAP32[i31 >> 2] | 0;
  if ((i35 | 0) > 0) {
   d33 = d25 * d25 + (d30 * d30 + d29 * d29);
   d36 = d36 > .39269909262657166 ? .19634954631328583 : d36 * .5;
   d37 = d32 * d32 + (d27 * d27 + d28 * d28);
   i64 = i39 + 20 | 0;
   i63 = i39 + 36 | 0;
   i58 = i39 + 8 | 0;
   i62 = i39 + 24 | 0;
   i61 = i39 + 40 | 0;
   i60 = i39 + 12 | 0;
   i59 = i39 + 28 | 0;
   i66 = i39 + 44 | 0;
   i67 = i10 + 4 | 0;
   i74 = i10 + 8 | 0;
   i75 = i10 + 12 | 0;
   i76 = i10 + 16 | 0;
   i77 = i10 + 20 | 0;
   i78 = i10 + 24 | 0;
   i79 = i10 + 28 | 0;
   i80 = i10 + 32 | 0;
   i81 = i10 + 36 | 0;
   i82 = i10 + 40 | 0;
   i83 = i10 + 44 | 0;
   i44 = i11 + 144 | 0;
   i45 = i11 + 160 | 0;
   i46 = i11 + 164 | 0;
   i47 = i11 + 180 | 0;
   i48 = i11 + 196 | 0;
   i49 = i11 + 212 | 0;
   i50 = i11 + 228 | 0;
   i51 = i11 + 244 | 0;
   i52 = i11 + 260 | 0;
   i53 = i11 + 276 | 0;
   i54 = i11 + 292 | 0;
   i56 = i11 + 308 | 0;
   i55 = i9 + 16 | 0;
   i38 = i11 + 324 | 0;
   i57 = i9 + 32 | 0;
   i39 = i11 + 340 | 0;
   i34 = i9 + 48 | 0;
   i41 = i11 + 356 | 0;
   i40 = i43 & 1;
   i42 = i11 + 360 | 0;
   i65 = i8 + 20 | 0;
   i73 = i8 + 36 | 0;
   i72 = i8 + 8 | 0;
   i70 = i8 + 24 | 0;
   i69 = i8 + 40 | 0;
   i68 = i8 + 12 | 0;
   i71 = i8 + 28 | 0;
   i91 = i8 + 44 | 0;
   i90 = i10 + 64 | 0;
   i89 = i10 + 68 | 0;
   i86 = i10 + 72 | 0;
   i85 = i10 + 76 | 0;
   i84 = i10 + 80 | 0;
   i8 = i10 + 84 | 0;
   i94 = i10 + 88 | 0;
   i93 = i10 + 92 | 0;
   i95 = i10 + 96 | 0;
   i92 = i10 + 100 | 0;
   i87 = i10 + 104 | 0;
   i88 = i10 + 108 | 0;
   if (d33 > 1.1920928955078125e-7) {
    if (i43) {
     i8 = 0;
     do {
      d99 = +Math_sin(+d36) / +Math_sqrt(+d33);
      d100 = d29 * d99;
      d113 = d30 * d99;
      d99 = d25 * d99;
      d101 = +Math_cos(+d36);
      d112 = +(i8 | 0) * (6.2831854820251465 / +(i35 | 0)) * .5;
      d109 = +Math_sin(+d112) / +Math_sqrt(+d37);
      d103 = d27 * d109;
      d107 = d28 * d109;
      d109 = d32 * d109;
      d112 = +Math_cos(+d112);
      d111 = -d103;
      d98 = -d107;
      d96 = -d109;
      d105 = d99 * d98 + (d100 * d112 + d101 * d111) - d113 * d96;
      d97 = d100 * d96 + (d113 * d112 + d101 * d98) - d99 * d111;
      d110 = d113 * d111 + (d99 * d112 + d101 * d96) - d100 * d98;
      d96 = d101 * d112 - d100 * d111 - d113 * d98 - d99 * d96;
      d99 = d109 * d97 + (d103 * d96 + d112 * d105) - d107 * d110;
      d98 = d103 * d110 + (d112 * d97 + d107 * d96) - d109 * d105;
      d113 = d107 * d105 + (d109 * d96 + d112 * d110) - d103 * d97;
      d110 = d112 * d96 - d103 * d105 - d107 * d97 - d109 * d110;
      d109 = 2.0 / (d110 * d110 + (d113 * d113 + (d99 * d99 + d98 * d98)));
      d97 = d99 * d109;
      d107 = d98 * d109;
      d109 = d113 * d109;
      d105 = d110 * d97;
      d103 = d110 * d107;
      d110 = d110 * d109;
      d97 = d99 * d97;
      d96 = d99 * d107;
      d99 = d99 * d109;
      d107 = d98 * d107;
      d98 = d98 * d109;
      d109 = d113 * d109;
      d113 = 1.0 - (d107 + d109);
      d112 = d96 - d110;
      d111 = d99 + d103;
      d110 = d96 + d110;
      d109 = 1.0 - (d97 + d109);
      d96 = d98 - d105;
      d103 = d99 - d103;
      d105 = d98 + d105;
      d107 = 1.0 - (d97 + d107);
      d97 = +HEAPF32[i6 >> 2];
      d98 = +HEAPF32[i64 >> 2];
      d99 = +HEAPF32[i63 >> 2];
      d100 = +HEAPF32[i58 >> 2];
      d101 = +HEAPF32[i62 >> 2];
      d102 = +HEAPF32[i61 >> 2];
      d104 = +HEAPF32[i60 >> 2];
      d106 = +HEAPF32[i59 >> 2];
      d108 = +HEAPF32[i66 >> 2];
      HEAPF32[i10 >> 2] = d99 * d111 + (d98 * d112 + d97 * d113);
      HEAPF32[i67 >> 2] = d113 * d100 + d112 * d101 + d111 * d102;
      HEAPF32[i74 >> 2] = d113 * d104 + d112 * d106 + d111 * d108;
      HEAPF32[i75 >> 2] = 0.0;
      HEAPF32[i76 >> 2] = d99 * d96 + (d97 * d110 + d98 * d109);
      HEAPF32[i77 >> 2] = d110 * d100 + d109 * d101 + d96 * d102;
      HEAPF32[i78 >> 2] = d110 * d104 + d109 * d106 + d96 * d108;
      HEAPF32[i79 >> 2] = 0.0;
      HEAPF32[i80 >> 2] = d97 * d103 + d98 * d105 + d99 * d107;
      HEAPF32[i81 >> 2] = d103 * d100 + d105 * d101 + d107 * d102;
      HEAPF32[i82 >> 2] = d103 * d104 + d105 * d106 + d107 * d108;
      HEAPF32[i83 >> 2] = 0.0;
      HEAP32[i16 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
      HEAP32[i16 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
      HEAP32[i16 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
      HEAP32[i16 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
      HEAP32[i18 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
      HEAP32[i18 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
      HEAP32[i18 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
      HEAP32[i18 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
      HEAP32[i12 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
      HEAP32[i12 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
      HEAP32[i12 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
      HEAP32[i12 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
      HEAP32[i17 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
      i95 = HEAP32[i26 >> 2] | 0;
      HEAP32[i44 + 0 >> 2] = -1;
      HEAP32[i44 + 4 >> 2] = -1;
      HEAP32[i44 + 8 >> 2] = -1;
      HEAP32[i44 + 12 >> 2] = -1;
      HEAP32[i11 >> 2] = 459120;
      HEAP32[i45 >> 2] = i2;
      HEAP32[i46 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
      HEAP32[i46 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
      HEAP32[i46 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
      HEAP32[i46 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
      HEAP32[i47 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
      HEAP32[i47 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
      HEAP32[i47 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
      HEAP32[i47 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
      HEAP32[i48 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
      HEAP32[i48 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
      HEAP32[i48 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
      HEAP32[i48 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
      HEAP32[i49 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
      HEAP32[i49 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
      HEAP32[i49 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
      HEAP32[i49 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
      HEAP32[i50 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      HEAP32[i50 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      HEAP32[i50 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
      HEAP32[i50 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
      HEAP32[i51 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
      HEAP32[i51 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      HEAP32[i51 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
      HEAP32[i51 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
      HEAP32[i52 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
      HEAP32[i52 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
      HEAP32[i52 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
      HEAP32[i52 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
      HEAP32[i53 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
      HEAP32[i53 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
      HEAP32[i53 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
      HEAP32[i53 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
      HEAP32[i54 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
      HEAP32[i54 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
      HEAP32[i54 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
      HEAP32[i54 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
      HEAP32[i56 + 0 >> 2] = HEAP32[i55 + 0 >> 2];
      HEAP32[i56 + 4 >> 2] = HEAP32[i55 + 4 >> 2];
      HEAP32[i56 + 8 >> 2] = HEAP32[i55 + 8 >> 2];
      HEAP32[i56 + 12 >> 2] = HEAP32[i55 + 12 >> 2];
      HEAP32[i38 + 0 >> 2] = HEAP32[i57 + 0 >> 2];
      HEAP32[i38 + 4 >> 2] = HEAP32[i57 + 4 >> 2];
      HEAP32[i38 + 8 >> 2] = HEAP32[i57 + 8 >> 2];
      HEAP32[i38 + 12 >> 2] = HEAP32[i57 + 12 >> 2];
      HEAP32[i39 + 0 >> 2] = HEAP32[i34 + 0 >> 2];
      HEAP32[i39 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
      HEAP32[i39 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
      HEAP32[i39 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
      HEAP8[i41] = i40;
      HEAP32[i42 >> 2] = i95;
      __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i5, i10, i11, i95, 0);
      i35 = HEAP32[i31 >> 2] | 0;
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) < (i35 | 0));
    } else {
     i19 = 0;
     do {
      d104 = +Math_sin(+d36) / +Math_sqrt(+d33);
      d105 = d29 * d104;
      d96 = d30 * d104;
      d104 = d25 * d104;
      d106 = +Math_cos(+d36);
      d97 = +(i19 | 0) * (6.2831854820251465 / +(i35 | 0)) * .5;
      d100 = +Math_sin(+d97) / +Math_sqrt(+d37);
      d108 = d27 * d100;
      d112 = d28 * d100;
      d100 = d32 * d100;
      d97 = +Math_cos(+d97);
      HEAP32[i10 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
      HEAP32[i10 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
      HEAP32[i10 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
      HEAP32[i10 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
      HEAP32[i15 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
      HEAP32[i15 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
      HEAP32[i15 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
      HEAP32[i13 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
      HEAP32[i13 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
      HEAP32[i14 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
      HEAP32[i14 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
      HEAP32[i14 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
      HEAP32[i14 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
      d98 = -d108;
      d103 = -d112;
      d101 = -d100;
      d110 = d104 * d103 + (d105 * d97 + d106 * d98) - d96 * d101;
      d102 = d105 * d101 + (d96 * d97 + d106 * d103) - d104 * d98;
      d99 = d96 * d98 + (d104 * d97 + d106 * d101) - d105 * d103;
      d101 = d106 * d97 - d105 * d98 - d96 * d103 - d104 * d101;
      d104 = d100 * d102 + (d108 * d101 + d97 * d110) - d112 * d99;
      d103 = d108 * d99 + (d97 * d102 + d112 * d101) - d100 * d110;
      d96 = d112 * d110 + (d100 * d101 + d97 * d99) - d108 * d102;
      d99 = d97 * d101 - d108 * d110 - d112 * d102 - d100 * d99;
      d100 = 2.0 / (d99 * d99 + (d96 * d96 + (d104 * d104 + d103 * d103)));
      d102 = d104 * d100;
      d112 = d103 * d100;
      d100 = d96 * d100;
      d110 = d99 * d102;
      d108 = d99 * d112;
      d99 = d99 * d100;
      d102 = d104 * d102;
      d101 = d104 * d112;
      d104 = d104 * d100;
      d112 = d103 * d112;
      d103 = d103 * d100;
      d100 = d96 * d100;
      d96 = 1.0 - (d112 + d100);
      d97 = d101 - d99;
      d98 = d104 + d108;
      d99 = d101 + d99;
      d100 = 1.0 - (d102 + d100);
      d101 = d103 - d110;
      d108 = d104 - d108;
      d110 = d103 + d110;
      d112 = 1.0 - (d102 + d112);
      d102 = +HEAPF32[i7 >> 2];
      d103 = +HEAPF32[i65 >> 2];
      d104 = +HEAPF32[i73 >> 2];
      d105 = +HEAPF32[i72 >> 2];
      d106 = +HEAPF32[i70 >> 2];
      d107 = +HEAPF32[i69 >> 2];
      d109 = +HEAPF32[i68 >> 2];
      d111 = +HEAPF32[i71 >> 2];
      d113 = +HEAPF32[i91 >> 2];
      HEAPF32[i90 >> 2] = d104 * d98 + (d103 * d97 + d102 * d96);
      HEAPF32[i89 >> 2] = d96 * d105 + d97 * d106 + d98 * d107;
      HEAPF32[i86 >> 2] = d96 * d109 + d97 * d111 + d98 * d113;
      HEAPF32[i85 >> 2] = 0.0;
      HEAPF32[i84 >> 2] = d104 * d101 + (d102 * d99 + d103 * d100);
      HEAPF32[i8 >> 2] = d99 * d105 + d100 * d106 + d101 * d107;
      HEAPF32[i94 >> 2] = d99 * d109 + d100 * d111 + d101 * d113;
      HEAPF32[i93 >> 2] = 0.0;
      HEAPF32[i95 >> 2] = d102 * d108 + d103 * d110 + d104 * d112;
      HEAPF32[i92 >> 2] = d108 * d105 + d110 * d106 + d112 * d107;
      HEAPF32[i87 >> 2] = d108 * d109 + d110 * d111 + d112 * d113;
      HEAPF32[i88 >> 2] = 0.0;
      i83 = HEAP32[i26 >> 2] | 0;
      HEAP32[i44 + 0 >> 2] = -1;
      HEAP32[i44 + 4 >> 2] = -1;
      HEAP32[i44 + 8 >> 2] = -1;
      HEAP32[i44 + 12 >> 2] = -1;
      HEAP32[i11 >> 2] = 459120;
      HEAP32[i45 >> 2] = i2;
      HEAP32[i46 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
      HEAP32[i46 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
      HEAP32[i46 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
      HEAP32[i46 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
      HEAP32[i47 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
      HEAP32[i47 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
      HEAP32[i47 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
      HEAP32[i47 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
      HEAP32[i48 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
      HEAP32[i48 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
      HEAP32[i48 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
      HEAP32[i48 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
      HEAP32[i49 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
      HEAP32[i49 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
      HEAP32[i49 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
      HEAP32[i49 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
      HEAP32[i50 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      HEAP32[i50 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      HEAP32[i50 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
      HEAP32[i50 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
      HEAP32[i51 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
      HEAP32[i51 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      HEAP32[i51 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
      HEAP32[i51 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
      HEAP32[i52 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
      HEAP32[i52 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
      HEAP32[i52 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
      HEAP32[i52 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
      HEAP32[i53 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
      HEAP32[i53 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
      HEAP32[i53 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
      HEAP32[i53 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
      HEAP32[i54 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
      HEAP32[i54 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
      HEAP32[i54 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
      HEAP32[i54 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
      HEAP32[i56 + 0 >> 2] = HEAP32[i55 + 0 >> 2];
      HEAP32[i56 + 4 >> 2] = HEAP32[i55 + 4 >> 2];
      HEAP32[i56 + 8 >> 2] = HEAP32[i55 + 8 >> 2];
      HEAP32[i56 + 12 >> 2] = HEAP32[i55 + 12 >> 2];
      HEAP32[i38 + 0 >> 2] = HEAP32[i57 + 0 >> 2];
      HEAP32[i38 + 4 >> 2] = HEAP32[i57 + 4 >> 2];
      HEAP32[i38 + 8 >> 2] = HEAP32[i57 + 8 >> 2];
      HEAP32[i38 + 12 >> 2] = HEAP32[i57 + 12 >> 2];
      HEAP32[i39 + 0 >> 2] = HEAP32[i34 + 0 >> 2];
      HEAP32[i39 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
      HEAP32[i39 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
      HEAP32[i39 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
      HEAP8[i41] = i40;
      HEAP32[i42 >> 2] = i83;
      __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i5, i10, i11, i83, 0);
      i35 = HEAP32[i31 >> 2] | 0;
      i19 = i19 + 1 | 0;
     } while ((i19 | 0) < (i35 | 0));
    }
   } else {
    if (i43) {
     i5 = 0;
     do {
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (i35 | 0));
    } else {
     i5 = 0;
     do {
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (i35 | 0));
    }
   }
  }
 }
 if ((HEAP8[i4 + 16 | 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i2 + 136 >> 2] | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i2 + 8 | 0, i2 + 72 | 0);
  STACKTOP = i1;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i2 + 72 | 0, i2 + 8 | 0);
  STACKTOP = i1;
  return;
 }
}
function __ZN7RagDollC2EP15btDynamicsWorldRK9btVector3f(i6, i11, i9, d1) {
 i6 = i6 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d7 = 0.0, d8 = 0.0, d10 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, i34 = 0, d35 = 0.0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 832 | 0;
 i44 = i5 + 768 | 0;
 i43 = i5 + 704 | 0;
 i41 = i5 + 640 | 0;
 i40 = i5 + 576 | 0;
 i39 = i5 + 512 | 0;
 i38 = i5 + 448 | 0;
 i16 = i5 + 384 | 0;
 i17 = i5 + 320 | 0;
 i34 = i5 + 256 | 0;
 i33 = i5 + 192 | 0;
 i24 = i5 + 128 | 0;
 i4 = i5 + 64 | 0;
 i2 = i5;
 HEAP32[i6 >> 2] = 444184;
 i3 = i6 + 4 | 0;
 HEAP32[i3 >> 2] = i11;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d7 = d1 * .15000000596046448;
 d8 = d1 * .20000000298023224;
 __ZN14btCapsuleShapeC2Eff(i18, d7, d8);
 i21 = i6 + 8 | 0;
 HEAP32[i21 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 __ZN14btCapsuleShapeC2Eff(i18, d7, d1 * .2800000011920929);
 i42 = i6 + 12 | 0;
 HEAP32[i42 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d23 = d1 * .05000000074505806;
 __ZN14btCapsuleShapeC2Eff(i18, d1 * .10000000149011612, d23);
 i11 = i6 + 16 | 0;
 HEAP32[i11 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d31 = d1 * .07000000029802322;
 d28 = d1 * .44999998807907104;
 __ZN14btCapsuleShapeC2Eff(i18, d31, d28);
 i12 = i6 + 20 | 0;
 HEAP32[i12 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d25 = d1 * .3700000047683716;
 __ZN14btCapsuleShapeC2Eff(i18, d23, d25);
 i14 = i6 + 24 | 0;
 HEAP32[i14 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 __ZN14btCapsuleShapeC2Eff(i18, d31, d28);
 i15 = i6 + 28 | 0;
 HEAP32[i15 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 __ZN14btCapsuleShapeC2Eff(i18, d23, d25);
 i37 = i6 + 32 | 0;
 HEAP32[i37 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d25 = d1 * .33000001311302185;
 __ZN14btCapsuleShapeC2Eff(i18, d23, d25);
 i36 = i6 + 36 | 0;
 HEAP32[i36 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d28 = d1 * .03999999910593033;
 d31 = d1 * .25;
 __ZN14btCapsuleShapeC2Eff(i18, d28, d31);
 i19 = i6 + 40 | 0;
 HEAP32[i19 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 __ZN14btCapsuleShapeC2Eff(i18, d23, d25);
 i20 = i6 + 44 | 0;
 HEAP32[i20 >> 2] = i18;
 i18 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 __ZN14btCapsuleShapeC2Eff(i18, d28, d31);
 i22 = i6 + 48 | 0;
 HEAP32[i22 >> 2] = i18;
 d31 = +HEAPF32[i9 >> 2];
 d28 = +HEAPF32[i9 + 4 >> 2];
 d25 = +HEAPF32[i9 + 8 >> 2];
 d23 = d1 * 0.0;
 d30 = d23 * 0.0;
 d26 = d23 + d23 + d30 + d31;
 d29 = d30 + (d30 + d1) + d28;
 d10 = d23 + (d23 + d30) + d25;
 HEAPF32[i44 >> 2] = 1.0;
 i18 = i44 + 4 | 0;
 i9 = i44 + 20 | 0;
 HEAP32[i18 + 0 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i18 + 12 >> 2] = 0;
 HEAPF32[i9 >> 2] = 1.0;
 i9 = i44 + 24 | 0;
 i18 = i44 + 40 | 0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAPF32[i18 >> 2] = 1.0;
 HEAPF32[i44 + 44 >> 2] = 0.0;
 HEAPF32[i44 + 48 >> 2] = d26;
 HEAPF32[i44 + 52 >> 2] = d29;
 HEAPF32[i44 + 56 >> 2] = d10;
 HEAPF32[i44 + 60 >> 2] = 0.0;
 i18 = i6 + 52 | 0;
 HEAP32[i18 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i44, HEAP32[i21 >> 2] | 0) | 0;
 d10 = d1 * 1.2000000476837158;
 d29 = d10 * 0.0;
 d26 = d30 + (d23 + d29) + d31;
 d10 = d30 + (d10 + d30) + d28;
 d29 = d23 + (d30 + d29) + d25;
 HEAPF32[i43 >> 2] = 1.0;
 i21 = i43 + 4 | 0;
 i9 = i43 + 20 | 0;
 HEAP32[i21 + 0 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 HEAP32[i21 + 12 >> 2] = 0;
 HEAPF32[i9 >> 2] = 1.0;
 i9 = i43 + 24 | 0;
 i21 = i43 + 40 | 0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAPF32[i21 >> 2] = 1.0;
 HEAPF32[i43 + 44 >> 2] = 0.0;
 HEAPF32[i43 + 48 >> 2] = d26;
 HEAPF32[i43 + 52 >> 2] = d10;
 HEAPF32[i43 + 56 >> 2] = d29;
 HEAPF32[i43 + 60 >> 2] = 0.0;
 i21 = i6 + 56 | 0;
 HEAP32[i21 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i43, HEAP32[i42 >> 2] | 0) | 0;
 d29 = d1 * 1.600000023841858;
 d10 = d29 * 0.0;
 d26 = d30 + (d23 + d10) + d31;
 d29 = d30 + (d29 + d30) + d28;
 d10 = d23 + (d30 + d10) + d25;
 HEAPF32[i41 >> 2] = 1.0;
 i9 = i41 + 4 | 0;
 i42 = i41 + 20 | 0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAPF32[i42 >> 2] = 1.0;
 i42 = i41 + 24 | 0;
 i9 = i41 + 40 | 0;
 HEAP32[i42 + 0 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 HEAP32[i42 + 12 >> 2] = 0;
 HEAPF32[i9 >> 2] = 1.0;
 HEAPF32[i41 + 44 >> 2] = 0.0;
 HEAPF32[i41 + 48 >> 2] = d26;
 HEAPF32[i41 + 52 >> 2] = d29;
 HEAPF32[i41 + 56 >> 2] = d10;
 HEAPF32[i41 + 60 >> 2] = 0.0;
 i9 = i6 + 60 | 0;
 HEAP32[i9 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i41, HEAP32[i11 >> 2] | 0) | 0;
 d10 = d1 * -.18000000715255737;
 d29 = d1 * .6499999761581421;
 d26 = d29 * 0.0;
 d35 = d30 + (d10 + d26) + d31;
 d13 = d10 * 0.0;
 d32 = d30 + (d29 + d13) + d28;
 d27 = d23 + (d13 + d26) + d25;
 HEAPF32[i40 >> 2] = 1.0;
 i11 = i40 + 4 | 0;
 i41 = i40 + 20 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAPF32[i41 >> 2] = 1.0;
 i41 = i40 + 24 | 0;
 i11 = i40 + 40 | 0;
 HEAP32[i41 + 0 >> 2] = 0;
 HEAP32[i41 + 4 >> 2] = 0;
 HEAP32[i41 + 8 >> 2] = 0;
 HEAP32[i41 + 12 >> 2] = 0;
 HEAPF32[i11 >> 2] = 1.0;
 HEAPF32[i40 + 44 >> 2] = 0.0;
 HEAPF32[i40 + 48 >> 2] = d35;
 HEAPF32[i40 + 52 >> 2] = d32;
 HEAPF32[i40 + 56 >> 2] = d27;
 HEAPF32[i40 + 60 >> 2] = 0.0;
 i11 = i6 + 64 | 0;
 HEAP32[i11 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i40, HEAP32[i12 >> 2] | 0) | 0;
 d27 = d8 * 0.0;
 d32 = d30 + (d10 + d27) + d31;
 d35 = d30 + (d8 + d13) + d28;
 d13 = d23 + (d13 + d27) + d25;
 HEAPF32[i39 >> 2] = 1.0;
 i12 = i39 + 4 | 0;
 i40 = i39 + 20 | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAPF32[i40 >> 2] = 1.0;
 i40 = i39 + 24 | 0;
 i12 = i39 + 40 | 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i12 >> 2] = 1.0;
 HEAPF32[i39 + 44 >> 2] = 0.0;
 HEAPF32[i39 + 48 >> 2] = d32;
 HEAPF32[i39 + 52 >> 2] = d35;
 HEAPF32[i39 + 56 >> 2] = d13;
 HEAPF32[i39 + 60 >> 2] = 0.0;
 i12 = i6 + 68 | 0;
 HEAP32[i12 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i39, HEAP32[i14 >> 2] | 0) | 0;
 d13 = d1 * .18000000715255737;
 d35 = d30 + (d13 + d26) + d31;
 d32 = d13 * 0.0;
 d29 = d30 + (d29 + d32) + d28;
 d26 = d23 + (d32 + d26) + d25;
 HEAPF32[i38 >> 2] = 1.0;
 i14 = i38 + 4 | 0;
 i39 = i38 + 20 | 0;
 HEAP32[i14 + 0 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 HEAPF32[i39 >> 2] = 1.0;
 i39 = i38 + 24 | 0;
 i14 = i38 + 40 | 0;
 HEAP32[i39 + 0 >> 2] = 0;
 HEAP32[i39 + 4 >> 2] = 0;
 HEAP32[i39 + 8 >> 2] = 0;
 HEAP32[i39 + 12 >> 2] = 0;
 HEAPF32[i14 >> 2] = 1.0;
 HEAPF32[i38 + 44 >> 2] = 0.0;
 HEAPF32[i38 + 48 >> 2] = d35;
 HEAPF32[i38 + 52 >> 2] = d29;
 HEAPF32[i38 + 56 >> 2] = d26;
 HEAPF32[i38 + 60 >> 2] = 0.0;
 i14 = i6 + 72 | 0;
 HEAP32[i14 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i38, HEAP32[i15 >> 2] | 0) | 0;
 d26 = d30 + (d13 + d27) + d31;
 d29 = d30 + (d8 + d32) + d28;
 d27 = d23 + (d32 + d27) + d25;
 HEAPF32[i16 >> 2] = 1.0;
 i15 = i16 + 4 | 0;
 i38 = i16 + 20 | 0;
 HEAP32[i15 + 0 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 HEAPF32[i38 >> 2] = 1.0;
 i38 = i16 + 24 | 0;
 i15 = i16 + 40 | 0;
 HEAP32[i38 + 0 >> 2] = 0;
 HEAP32[i38 + 4 >> 2] = 0;
 HEAP32[i38 + 8 >> 2] = 0;
 HEAP32[i38 + 12 >> 2] = 0;
 HEAPF32[i15 >> 2] = 1.0;
 HEAPF32[i16 + 44 >> 2] = 0.0;
 HEAPF32[i16 + 48 >> 2] = d26;
 HEAPF32[i16 + 52 >> 2] = d29;
 HEAPF32[i16 + 56 >> 2] = d27;
 HEAPF32[i16 + 60 >> 2] = 0.0;
 i15 = i6 + 76 | 0;
 HEAP32[i15 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i16, HEAP32[i37 >> 2] | 0) | 0;
 d27 = d1 * -.3499999940395355;
 d29 = d1 * 1.4500000476837158;
 d26 = d29 * 0.0;
 d32 = d30 + (d27 + d26) + d31;
 d27 = d27 * 0.0;
 d35 = d30 + (d29 + d27) + d28;
 d27 = d23 + (d27 + d26) + d25;
 HEAPF32[i17 >> 2] = -4.371138828673793e-8;
 HEAPF32[i17 + 4 >> 2] = -1.0;
 HEAPF32[i17 + 8 >> 2] = 0.0;
 HEAPF32[i17 + 12 >> 2] = 0.0;
 HEAPF32[i17 + 16 >> 2] = 1.0;
 HEAPF32[i17 + 20 >> 2] = -4.371138828673793e-8;
 i37 = i17 + 24 | 0;
 i16 = i17 + 40 | 0;
 HEAP32[i37 + 0 >> 2] = 0;
 HEAP32[i37 + 4 >> 2] = 0;
 HEAP32[i37 + 8 >> 2] = 0;
 HEAP32[i37 + 12 >> 2] = 0;
 HEAPF32[i16 >> 2] = 1.0;
 HEAPF32[i17 + 44 >> 2] = 0.0;
 HEAPF32[i17 + 48 >> 2] = d32;
 HEAPF32[i17 + 52 >> 2] = d35;
 HEAPF32[i17 + 56 >> 2] = d27;
 HEAPF32[i17 + 60 >> 2] = 0.0;
 i16 = i6 + 80 | 0;
 HEAP32[i16 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i17, HEAP32[i36 >> 2] | 0) | 0;
 d27 = d1 * -.699999988079071;
 d35 = d30 + (d27 + d26) + d31;
 d27 = d27 * 0.0;
 d32 = d30 + (d29 + d27) + d28;
 d27 = d23 + (d27 + d26) + d25;
 HEAPF32[i34 >> 2] = -4.371138828673793e-8;
 HEAPF32[i34 + 4 >> 2] = -1.0;
 HEAPF32[i34 + 8 >> 2] = 0.0;
 HEAPF32[i34 + 12 >> 2] = 0.0;
 HEAPF32[i34 + 16 >> 2] = 1.0;
 HEAPF32[i34 + 20 >> 2] = -4.371138828673793e-8;
 i36 = i34 + 24 | 0;
 i17 = i34 + 40 | 0;
 HEAP32[i36 + 0 >> 2] = 0;
 HEAP32[i36 + 4 >> 2] = 0;
 HEAP32[i36 + 8 >> 2] = 0;
 HEAP32[i36 + 12 >> 2] = 0;
 HEAPF32[i17 >> 2] = 1.0;
 HEAPF32[i34 + 44 >> 2] = 0.0;
 HEAPF32[i34 + 48 >> 2] = d35;
 HEAPF32[i34 + 52 >> 2] = d32;
 HEAPF32[i34 + 56 >> 2] = d27;
 HEAPF32[i34 + 60 >> 2] = 0.0;
 i17 = i6 + 84 | 0;
 HEAP32[i17 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i34, HEAP32[i19 >> 2] | 0) | 0;
 d27 = d1 * .3499999940395355;
 d32 = d27 * 0.0;
 HEAPF32[i33 >> 2] = -4.371138828673793e-8;
 HEAPF32[i33 + 4 >> 2] = 1.0;
 HEAPF32[i33 + 8 >> 2] = 0.0;
 HEAPF32[i33 + 12 >> 2] = 0.0;
 HEAPF32[i33 + 16 >> 2] = -1.0;
 HEAPF32[i33 + 20 >> 2] = -4.371138828673793e-8;
 HEAPF32[i33 + 24 >> 2] = 0.0;
 HEAPF32[i33 + 28 >> 2] = 0.0;
 HEAPF32[i33 + 32 >> 2] = -0.0;
 HEAPF32[i33 + 36 >> 2] = 0.0;
 HEAPF32[i33 + 40 >> 2] = 1.0;
 HEAPF32[i33 + 44 >> 2] = 0.0;
 HEAPF32[i33 + 48 >> 2] = d30 + (d27 + d26) + d31;
 HEAPF32[i33 + 52 >> 2] = d30 + (d29 + d32) + d28;
 HEAPF32[i33 + 56 >> 2] = d23 + (d32 + d26) + d25;
 HEAPF32[i33 + 60 >> 2] = 0.0;
 i19 = i6 + 88 | 0;
 HEAP32[i19 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i33, HEAP32[i20 >> 2] | 0) | 0;
 d32 = d1 * .699999988079071;
 d27 = d32 * 0.0;
 HEAPF32[i24 >> 2] = -4.371138828673793e-8;
 HEAPF32[i24 + 4 >> 2] = 1.0;
 HEAPF32[i24 + 8 >> 2] = 0.0;
 HEAPF32[i24 + 12 >> 2] = 0.0;
 HEAPF32[i24 + 16 >> 2] = -1.0;
 HEAPF32[i24 + 20 >> 2] = -4.371138828673793e-8;
 HEAPF32[i24 + 24 >> 2] = 0.0;
 HEAPF32[i24 + 28 >> 2] = 0.0;
 HEAPF32[i24 + 32 >> 2] = -0.0;
 HEAPF32[i24 + 36 >> 2] = 0.0;
 HEAPF32[i24 + 40 >> 2] = 1.0;
 HEAPF32[i24 + 44 >> 2] = 0.0;
 HEAPF32[i24 + 48 >> 2] = d30 + (d32 + d26) + d31;
 HEAPF32[i24 + 52 >> 2] = d30 + (d29 + d27) + d28;
 HEAPF32[i24 + 56 >> 2] = d23 + (d27 + d26) + d25;
 HEAPF32[i24 + 60 >> 2] = 0.0;
 i20 = i6 + 92 | 0;
 HEAP32[i20 >> 2] = __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i6, 1.0, i24, HEAP32[i22 >> 2] | 0) | 0;
 i22 = 0;
 do {
  i44 = i6 + (i22 << 2) + 52 | 0;
  __ZN11btRigidBody10setDampingEff(HEAP32[i44 >> 2] | 0, .05000000074505806, .8500000238418579);
  i44 = HEAP32[i44 >> 2] | 0;
  HEAPF32[i44 + 220 >> 2] = .800000011920929;
  HEAPF32[i44 + 464 >> 2] = 1.600000023841858;
  HEAPF32[i44 + 468 >> 2] = 2.5;
  i22 = i22 + 1 | 0;
 } while ((i22 | 0) != 11);
 i61 = i4 + 4 | 0;
 i57 = i4 + 20 | 0;
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 i56 = i4 + 24 | 0;
 i52 = i4 + 40 | 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 i51 = i4 + 44 | 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 i46 = i2 + 4 | 0;
 i33 = i2 + 20 | 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 i34 = i2 + 24 | 0;
 i39 = i2 + 40 | 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 i40 = i2 + 44 | 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -4.371138828673793e-8;
 HEAPF32[i61 >> 2] = 0.0;
 i60 = i4 + 8 | 0;
 HEAPF32[i60 >> 2] = 1.0;
 i59 = i4 + 12 | 0;
 HEAPF32[i59 >> 2] = 0.0;
 i58 = i4 + 16 | 0;
 HEAPF32[i58 >> 2] = -0.0;
 HEAPF32[i57 >> 2] = 1.0;
 HEAPF32[i56 >> 2] = 0.0;
 i55 = i4 + 28 | 0;
 HEAPF32[i55 >> 2] = 0.0;
 i54 = i4 + 32 | 0;
 HEAPF32[i54 >> 2] = -1.0;
 i53 = i4 + 36 | 0;
 HEAPF32[i53 >> 2] = -0.0;
 HEAPF32[i52 >> 2] = -4.371138828673793e-8;
 HEAPF32[i51 >> 2] = 0.0;
 i50 = i4 + 48 | 0;
 HEAPF32[i50 >> 2] = d23;
 i49 = i4 + 52 | 0;
 HEAPF32[i49 >> 2] = d7;
 i48 = i4 + 56 | 0;
 HEAPF32[i48 >> 2] = d23;
 i47 = i4 + 60 | 0;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = 0.0;
 i45 = i2 + 8 | 0;
 HEAPF32[i45 >> 2] = 1.0;
 i22 = i2 + 12 | 0;
 HEAPF32[i22 >> 2] = 0.0;
 i24 = i2 + 16 | 0;
 HEAPF32[i24 >> 2] = -0.0;
 HEAPF32[i33 >> 2] = 1.0;
 HEAPF32[i34 >> 2] = 0.0;
 i36 = i2 + 28 | 0;
 HEAPF32[i36 >> 2] = 0.0;
 i37 = i2 + 32 | 0;
 HEAPF32[i37 >> 2] = -1.0;
 i38 = i2 + 36 | 0;
 HEAPF32[i38 >> 2] = -0.0;
 HEAPF32[i39 >> 2] = -4.371138828673793e-8;
 HEAPF32[i40 >> 2] = 0.0;
 i41 = i2 + 48 | 0;
 HEAPF32[i41 >> 2] = d23;
 i42 = i2 + 52 | 0;
 HEAPF32[i42 >> 2] = d1 * -.15000000596046448;
 i43 = i2 + 56 | 0;
 HEAPF32[i43 >> 2] = d23;
 i44 = i2 + 60 | 0;
 HEAPF32[i44 >> 2] = 0.0;
 i62 = __Znwj(756) | 0;
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK11btTransformS4_b(i62, HEAP32[i18 >> 2] | 0, HEAP32[i21 >> 2] | 0, i4, i2, 0);
 __ZN14btAngularLimit3setEfffff(i62 + 680 | 0, -.7853981852531433, 1.5707963705062866, .8999999761581421, .30000001192092896, 1.0);
 HEAP32[i6 + 96 >> 2] = i62;
 i63 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i63 >> 2] | 0) + 52 >> 2] & 63](i63, i62, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -4.371138828673793e-8;
 HEAPF32[i61 >> 2] = -1.0;
 HEAPF32[i60 >> 2] = 0.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = 1.0;
 HEAPF32[i57 >> 2] = -4.371138828673793e-8;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -0.0;
 HEAPF32[i53 >> 2] = 0.0;
 HEAPF32[i52 >> 2] = 1.0;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d23;
 HEAPF32[i49 >> 2] = d1 * .30000001192092896;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = -1.0;
 HEAPF32[i45 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = 1.0;
 HEAPF32[i33 >> 2] = -4.371138828673793e-8;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -0.0;
 HEAPF32[i38 >> 2] = 0.0;
 HEAPF32[i39 >> 2] = 1.0;
 HEAPF32[i40 >> 2] = 0.0;
 d35 = d1 * -.14000000059604645;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d35;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i62 = __Znwj(600) | 0;
 __ZN21btConeTwistConstraintC2ER11btRigidBodyS1_RK11btTransformS4_(i62, HEAP32[i21 >> 2] | 0, HEAP32[i9 >> 2] | 0, i4, i2);
 HEAPF32[i62 + 436 >> 2] = .7853981852531433;
 HEAPF32[i62 + 440 >> 2] = .7853981852531433;
 HEAPF32[i62 + 444 >> 2] = 1.5707963705062866;
 HEAPF32[i62 + 420 >> 2] = 1.0;
 HEAPF32[i62 + 424 >> 2] = .30000001192092896;
 HEAPF32[i62 + 428 >> 2] = 1.0;
 HEAP32[i6 + 100 >> 2] = i62;
 i9 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] & 63](i9, i62, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -.7071068286895752;
 HEAPF32[i61 >> 2] = -.7071067094802856;
 HEAPF32[i60 >> 2] = 0.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = .7071067094802856;
 HEAPF32[i57 >> 2] = -.7071068286895752;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -0.0;
 HEAPF32[i53 >> 2] = 0.0;
 HEAPF32[i52 >> 2] = 1.0;
 HEAPF32[i51 >> 2] = 0.0;
 d29 = d1 * -.10000000149011612;
 HEAPF32[i50 >> 2] = d10;
 HEAPF32[i49 >> 2] = d29;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -.7071068286895752;
 HEAPF32[i46 >> 2] = -.7071067094802856;
 HEAPF32[i45 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = .7071067094802856;
 HEAPF32[i33 >> 2] = -.7071068286895752;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -0.0;
 HEAPF32[i38 >> 2] = 0.0;
 HEAPF32[i39 >> 2] = 1.0;
 HEAPF32[i40 >> 2] = 0.0;
 d30 = d1 * .22499999403953552;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d30;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i9 = __Znwj(600) | 0;
 __ZN21btConeTwistConstraintC2ER11btRigidBodyS1_RK11btTransformS4_(i9, HEAP32[i18 >> 2] | 0, HEAP32[i11 >> 2] | 0, i4, i2);
 HEAPF32[i9 + 436 >> 2] = .7853981852531433;
 HEAPF32[i9 + 440 >> 2] = .7853981852531433;
 HEAPF32[i9 + 444 >> 2] = 0.0;
 HEAPF32[i9 + 420 >> 2] = 1.0;
 HEAPF32[i9 + 424 >> 2] = .30000001192092896;
 HEAPF32[i9 + 428 >> 2] = 1.0;
 HEAP32[i6 + 104 >> 2] = i9;
 i62 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i62 >> 2] | 0) + 52 >> 2] & 63](i62, i9, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -4.371138828673793e-8;
 HEAPF32[i61 >> 2] = 0.0;
 HEAPF32[i60 >> 2] = 1.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = -0.0;
 HEAPF32[i57 >> 2] = 1.0;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -1.0;
 HEAPF32[i53 >> 2] = -0.0;
 HEAPF32[i52 >> 2] = -4.371138828673793e-8;
 HEAPF32[i51 >> 2] = 0.0;
 d31 = d1 * -.22499999403953552;
 HEAPF32[i50 >> 2] = d23;
 HEAPF32[i49 >> 2] = d31;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = 0.0;
 HEAPF32[i45 >> 2] = 1.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = -0.0;
 HEAPF32[i33 >> 2] = 1.0;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -1.0;
 HEAPF32[i38 >> 2] = -0.0;
 HEAPF32[i39 >> 2] = -4.371138828673793e-8;
 HEAPF32[i40 >> 2] = 0.0;
 d32 = d1 * .1850000023841858;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d32;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i9 = __Znwj(756) | 0;
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK11btTransformS4_b(i9, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, i4, i2, 0);
 __ZN14btAngularLimit3setEfffff(i9 + 680 | 0, 0.0, 1.5707963705062866, .8999999761581421, .30000001192092896, 1.0);
 HEAP32[i6 + 108 >> 2] = i9;
 i12 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, i9, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = .7071067690849304;
 HEAPF32[i61 >> 2] = -.7071067690849304;
 HEAPF32[i60 >> 2] = 0.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = .7071067690849304;
 HEAPF32[i57 >> 2] = .7071067690849304;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -0.0;
 HEAPF32[i53 >> 2] = 0.0;
 HEAPF32[i52 >> 2] = 1.0;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d13;
 HEAPF32[i49 >> 2] = d29;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = .7071067690849304;
 HEAPF32[i46 >> 2] = -.7071067690849304;
 HEAPF32[i45 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = .7071067690849304;
 HEAPF32[i33 >> 2] = .7071067690849304;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -0.0;
 HEAPF32[i38 >> 2] = 0.0;
 HEAPF32[i39 >> 2] = 1.0;
 HEAPF32[i40 >> 2] = 0.0;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d30;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i12 = __Znwj(600) | 0;
 __ZN21btConeTwistConstraintC2ER11btRigidBodyS1_RK11btTransformS4_(i12, HEAP32[i18 >> 2] | 0, HEAP32[i14 >> 2] | 0, i4, i2);
 HEAPF32[i12 + 436 >> 2] = .7853981852531433;
 HEAPF32[i12 + 440 >> 2] = .7853981852531433;
 HEAPF32[i12 + 444 >> 2] = 0.0;
 HEAPF32[i12 + 420 >> 2] = 1.0;
 HEAPF32[i12 + 424 >> 2] = .30000001192092896;
 HEAPF32[i12 + 428 >> 2] = 1.0;
 HEAP32[i6 + 112 >> 2] = i12;
 i18 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i18 >> 2] | 0) + 52 >> 2] & 63](i18, i12, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -4.371138828673793e-8;
 HEAPF32[i61 >> 2] = 0.0;
 HEAPF32[i60 >> 2] = 1.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = -0.0;
 HEAPF32[i57 >> 2] = 1.0;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -1.0;
 HEAPF32[i53 >> 2] = -0.0;
 HEAPF32[i52 >> 2] = -4.371138828673793e-8;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d23;
 HEAPF32[i49 >> 2] = d31;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = 0.0;
 HEAPF32[i45 >> 2] = 1.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = -0.0;
 HEAPF32[i33 >> 2] = 1.0;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -1.0;
 HEAPF32[i38 >> 2] = -0.0;
 HEAPF32[i39 >> 2] = -4.371138828673793e-8;
 HEAPF32[i40 >> 2] = 0.0;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d32;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i18 = __Znwj(756) | 0;
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK11btTransformS4_b(i18, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, i4, i2, 0);
 __ZN14btAngularLimit3setEfffff(i18 + 680 | 0, 0.0, 1.5707963705062866, .8999999761581421, .30000001192092896, 1.0);
 HEAP32[i6 + 116 >> 2] = i18;
 i15 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i15 >> 2] | 0) + 52 >> 2] & 63](i15, i18, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -1.0;
 HEAPF32[i61 >> 2] = 8.742277657347586e-8;
 HEAPF32[i60 >> 2] = -0.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = -8.742277657347586e-8;
 HEAPF32[i57 >> 2] = -1.0;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -0.0;
 HEAPF32[i53 >> 2] = 0.0;
 HEAPF32[i52 >> 2] = 1.0;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d1 * -.20000000298023224;
 HEAPF32[i49 >> 2] = d7;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = -1.0;
 HEAPF32[i45 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = 1.0;
 HEAPF32[i33 >> 2] = -4.371138828673793e-8;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -0.0;
 HEAPF32[i38 >> 2] = 0.0;
 HEAPF32[i39 >> 2] = 1.0;
 HEAPF32[i40 >> 2] = 0.0;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d10;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i18 = __Znwj(600) | 0;
 __ZN21btConeTwistConstraintC2ER11btRigidBodyS1_RK11btTransformS4_(i18, HEAP32[i21 >> 2] | 0, HEAP32[i16 >> 2] | 0, i4, i2);
 HEAPF32[i18 + 436 >> 2] = 1.5707963705062866;
 HEAPF32[i18 + 440 >> 2] = 1.5707963705062866;
 HEAPF32[i18 + 444 >> 2] = 0.0;
 HEAPF32[i18 + 420 >> 2] = 1.0;
 HEAPF32[i18 + 424 >> 2] = .30000001192092896;
 HEAPF32[i18 + 428 >> 2] = 1.0;
 HEAP32[i6 + 120 >> 2] = i18;
 i15 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i15 >> 2] | 0) + 52 >> 2] & 63](i15, i18, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -4.371138828673793e-8;
 HEAPF32[i61 >> 2] = 0.0;
 HEAPF32[i60 >> 2] = 1.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = -0.0;
 HEAPF32[i57 >> 2] = 1.0;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -1.0;
 HEAPF32[i53 >> 2] = -0.0;
 HEAPF32[i52 >> 2] = -4.371138828673793e-8;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d23;
 HEAPF32[i49 >> 2] = d13;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = 0.0;
 HEAPF32[i45 >> 2] = 1.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = -0.0;
 HEAPF32[i33 >> 2] = 1.0;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -1.0;
 HEAPF32[i38 >> 2] = -0.0;
 HEAPF32[i39 >> 2] = -4.371138828673793e-8;
 HEAPF32[i40 >> 2] = 0.0;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d35;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i18 = __Znwj(756) | 0;
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK11btTransformS4_b(i18, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i4, i2, 0);
 __ZN14btAngularLimit3setEfffff(i18 + 680 | 0, -1.5707963705062866, 0.0, .8999999761581421, .30000001192092896, 1.0);
 HEAP32[i6 + 124 >> 2] = i18;
 i17 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i17 >> 2] | 0) + 52 >> 2] & 63](i17, i18, 1);
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i61 + 12 >> 2] = 0;
 HEAPF32[i57 >> 2] = 1.0;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -0.0;
 HEAPF32[i53 >> 2] = 0.0;
 HEAPF32[i52 >> 2] = 1.0;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d8;
 HEAPF32[i49 >> 2] = d7;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = -1.0;
 HEAPF32[i45 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = 1.0;
 HEAPF32[i33 >> 2] = -4.371138828673793e-8;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -0.0;
 HEAPF32[i38 >> 2] = 0.0;
 HEAPF32[i39 >> 2] = 1.0;
 HEAPF32[i40 >> 2] = 0.0;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d10;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i18 = __Znwj(600) | 0;
 __ZN21btConeTwistConstraintC2ER11btRigidBodyS1_RK11btTransformS4_(i18, HEAP32[i21 >> 2] | 0, HEAP32[i19 >> 2] | 0, i4, i2);
 HEAPF32[i18 + 436 >> 2] = 1.5707963705062866;
 HEAPF32[i18 + 440 >> 2] = 1.5707963705062866;
 HEAPF32[i18 + 444 >> 2] = 0.0;
 HEAPF32[i18 + 420 >> 2] = 1.0;
 HEAPF32[i18 + 424 >> 2] = .30000001192092896;
 HEAPF32[i18 + 428 >> 2] = 1.0;
 HEAP32[i6 + 128 >> 2] = i18;
 i21 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i21 >> 2] | 0) + 52 >> 2] & 63](i21, i18, 1);
 HEAP32[i61 + 0 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i56 + 0 >> 2] = 0;
 HEAP32[i56 + 4 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 HEAP32[i51 + 0 >> 2] = 0;
 HEAP32[i51 + 4 >> 2] = 0;
 HEAP32[i51 + 8 >> 2] = 0;
 HEAP32[i51 + 12 >> 2] = 0;
 HEAP32[i46 + 0 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i40 + 0 >> 2] = 0;
 HEAP32[i40 + 4 >> 2] = 0;
 HEAP32[i40 + 8 >> 2] = 0;
 HEAP32[i40 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = -4.371138828673793e-8;
 HEAPF32[i61 >> 2] = 0.0;
 HEAPF32[i60 >> 2] = 1.0;
 HEAPF32[i59 >> 2] = 0.0;
 HEAPF32[i58 >> 2] = -0.0;
 HEAPF32[i57 >> 2] = 1.0;
 HEAPF32[i56 >> 2] = 0.0;
 HEAPF32[i55 >> 2] = 0.0;
 HEAPF32[i54 >> 2] = -1.0;
 HEAPF32[i53 >> 2] = -0.0;
 HEAPF32[i52 >> 2] = -4.371138828673793e-8;
 HEAPF32[i51 >> 2] = 0.0;
 HEAPF32[i50 >> 2] = d23;
 HEAPF32[i49 >> 2] = d13;
 HEAPF32[i48 >> 2] = d23;
 HEAPF32[i47 >> 2] = 0.0;
 HEAPF32[i2 >> 2] = -4.371138828673793e-8;
 HEAPF32[i46 >> 2] = 0.0;
 HEAPF32[i45 >> 2] = 1.0;
 HEAPF32[i22 >> 2] = 0.0;
 HEAPF32[i24 >> 2] = -0.0;
 HEAPF32[i33 >> 2] = 1.0;
 HEAPF32[i34 >> 2] = 0.0;
 HEAPF32[i36 >> 2] = 0.0;
 HEAPF32[i37 >> 2] = -1.0;
 HEAPF32[i38 >> 2] = -0.0;
 HEAPF32[i39 >> 2] = -4.371138828673793e-8;
 HEAPF32[i40 >> 2] = 0.0;
 HEAPF32[i41 >> 2] = d23;
 HEAPF32[i42 >> 2] = d35;
 HEAPF32[i43 >> 2] = d23;
 HEAPF32[i44 >> 2] = 0.0;
 i44 = __Znwj(756) | 0;
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK11btTransformS4_b(i44, HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0, i4, i2, 0);
 __ZN14btAngularLimit3setEfffff(i44 + 680 | 0, -1.5707963705062866, 0.0, .8999999761581421, .30000001192092896, 1.0);
 HEAP32[i6 + 132 >> 2] = i44;
 i43 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i43 >> 2] | 0) + 52 >> 2] & 63](i43, i44, 1);
 STACKTOP = i5;
 return;
}
function __ZN21btConeTwistConstraint23solveConstraintObsoleteER11btRigidBodyS1_f(i6, i4, i1, d7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, i35 = 0, i36 = 0, d37 = 0.0, i38 = 0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, d54 = 0.0, d55 = 0.0, d56 = 0.0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0, i73 = 0, d74 = 0.0, d75 = 0.0, i76 = 0, d77 = 0.0, d78 = 0.0, d79 = 0.0, d80 = 0.0, d81 = 0.0, d82 = 0.0, d83 = 0.0, d84 = 0.0, d85 = 0.0, d86 = 0.0, d87 = 0.0, i88 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 i8 = i2 + 440 | 0;
 i12 = i2 + 432 | 0;
 i14 = i2 + 368 | 0;
 i24 = i2 + 304 | 0;
 i10 = i2 + 288 | 0;
 i9 = i2 + 272 | 0;
 i13 = i2 + 208 | 0;
 i11 = i2 + 192 | 0;
 i17 = i2 + 128 | 0;
 i15 = i2 + 64 | 0;
 i16 = i2;
 if ((HEAP8[i6 + 519 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = i6 + 24 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i18 = i6 + 340 | 0;
 d72 = +HEAPF32[i18 >> 2];
 i19 = i6 + 344 | 0;
 d71 = +HEAPF32[i19 >> 2];
 i20 = i6 + 348 | 0;
 d55 = +HEAPF32[i20 >> 2];
 i25 = i3 + 52 | 0;
 d46 = +HEAPF32[i25 >> 2] + (+HEAPF32[i3 + 4 >> 2] * d72 + +HEAPF32[i3 + 8 >> 2] * d71 + +HEAPF32[i3 + 12 >> 2] * d55);
 d37 = +HEAPF32[i3 + 56 >> 2];
 d47 = d37 + (d72 * +HEAPF32[i3 + 20 >> 2] + d71 * +HEAPF32[i3 + 24 >> 2] + d55 * +HEAPF32[i3 + 28 >> 2]);
 d39 = +HEAPF32[i3 + 60 >> 2];
 d55 = d39 + (d72 * +HEAPF32[i3 + 36 >> 2] + d71 * +HEAPF32[i3 + 40 >> 2] + d55 * +HEAPF32[i3 + 44 >> 2]);
 i3 = i6 + 28 | 0;
 i73 = HEAP32[i3 >> 2] | 0;
 i21 = i6 + 404 | 0;
 d71 = +HEAPF32[i21 >> 2];
 i22 = i6 + 408 | 0;
 d72 = +HEAPF32[i22 >> 2];
 i23 = i6 + 412 | 0;
 d54 = +HEAPF32[i23 >> 2];
 d40 = +HEAPF32[i73 + 52 >> 2];
 d64 = d40 + (+HEAPF32[i73 + 4 >> 2] * d71 + +HEAPF32[i73 + 8 >> 2] * d72 + +HEAPF32[i73 + 12 >> 2] * d54);
 d41 = +HEAPF32[i73 + 56 >> 2];
 d56 = d41 + (d71 * +HEAPF32[i73 + 20 >> 2] + d72 * +HEAPF32[i73 + 24 >> 2] + d54 * +HEAPF32[i73 + 28 >> 2]);
 d42 = +HEAPF32[i73 + 60 >> 2];
 d54 = d42 + (d71 * +HEAPF32[i73 + 36 >> 2] + d72 * +HEAPF32[i73 + 40 >> 2] + d54 * +HEAPF32[i73 + 44 >> 2]);
 if ((HEAP8[i6 + 516 | 0] | 0) == 0) {
  d34 = d46 - +HEAPF32[i25 >> 2];
  d37 = d47 - d37;
  d39 = d55 - d39;
  d40 = d64 - d40;
  d41 = d56 - d41;
  d45 = d54 - d42;
  i36 = i4 + 504 | 0;
  i38 = i4 + 508 | 0;
  i25 = i4 + 512 | 0;
  i26 = i4 + 520 | 0;
  d70 = +HEAPF32[i4 + 320 >> 2] + +HEAPF32[i26 >> 2];
  i27 = i4 + 524 | 0;
  d71 = +HEAPF32[i4 + 324 >> 2] + +HEAPF32[i27 >> 2];
  i28 = i4 + 528 | 0;
  d69 = +HEAPF32[i4 + 328 >> 2] + +HEAPF32[i28 >> 2];
  i31 = i1 + 504 | 0;
  i30 = i1 + 508 | 0;
  i29 = i1 + 512 | 0;
  i33 = i1 + 520 | 0;
  d72 = +HEAPF32[i1 + 320 >> 2] + +HEAPF32[i33 >> 2];
  i32 = i1 + 524 | 0;
  d44 = +HEAPF32[i1 + 324 >> 2] + +HEAPF32[i32 >> 2];
  i35 = i1 + 528 | 0;
  d43 = +HEAPF32[i1 + 328 >> 2] + +HEAPF32[i35 >> 2];
  d42 = +HEAPF32[i4 + 304 >> 2] + +HEAPF32[i36 >> 2] + (d39 * d71 - d37 * d69) - (+HEAPF32[i1 + 304 >> 2] + +HEAPF32[i31 >> 2] + (d45 * d44 - d41 * d43));
  d43 = +HEAPF32[i4 + 308 >> 2] + +HEAPF32[i38 >> 2] + (d34 * d69 - d39 * d70) - (+HEAPF32[i1 + 308 >> 2] + +HEAPF32[i30 >> 2] + (d40 * d43 - d45 * d72));
  d44 = +HEAPF32[i4 + 312 >> 2] + +HEAPF32[i25 >> 2] + (d37 * d70 - d34 * d71) - (+HEAPF32[i1 + 312 >> 2] + +HEAPF32[i29 >> 2] + (d41 * d72 - d40 * d44));
  d46 = d46 - d64;
  d47 = d47 - d56;
  d64 = d55 - d54;
  i51 = i6 + 32 | 0;
  i52 = i4 + 336 | 0;
  i60 = i4 + 536 | 0;
  i49 = i4 + 540 | 0;
  i50 = i4 + 544 | 0;
  i62 = i1 + 336 | 0;
  i63 = i1 + 536 | 0;
  i61 = i1 + 540 | 0;
  i48 = i1 + 544 | 0;
  i53 = 0;
  do {
   d67 = 1.0 / +HEAPF32[i6 + (i53 * 84 | 0) + 120 >> 2];
   i59 = i6 + (i53 * 84 | 0) + 40 | 0;
   d71 = +HEAPF32[i59 >> 2];
   i57 = i6 + (i53 * 84 | 0) + 44 | 0;
   d70 = +HEAPF32[i57 >> 2];
   i58 = i6 + (i53 * 84 | 0) + 48 | 0;
   d65 = +HEAPF32[i58 >> 2];
   d65 = d67 * ((d46 * d71 + d47 * d70 + d64 * d65) * -.30000001192092896 / d7) - d67 * (d42 * d71 + d43 * d70 + d44 * d65);
   HEAPF32[i51 >> 2] = +HEAPF32[i51 >> 2] + d65;
   d70 = +HEAPF32[i58 >> 2];
   d71 = +HEAPF32[i57 >> 2];
   d67 = d37 * d70 - d39 * d71;
   d72 = +HEAPF32[i59 >> 2];
   d68 = d39 * d72 - d34 * d70;
   d66 = d34 * d71 - d37 * d72;
   d55 = d41 * d70 - d45 * d71;
   d54 = d45 * d72 - d40 * d70;
   d56 = d40 * d71 - d41 * d72;
   i73 = HEAP32[i5 >> 2] | 0;
   d69 = +HEAPF32[i73 + 336 >> 2];
   if (+HEAPF32[i52 >> 2] != 0.0) {
    d74 = d68 * +HEAPF32[i73 + 292 >> 2] + d67 * +HEAPF32[i73 + 288 >> 2] + d66 * +HEAPF32[i73 + 296 >> 2];
    d75 = d68 * +HEAPF32[i73 + 276 >> 2] + d67 * +HEAPF32[i73 + 272 >> 2] + d66 * +HEAPF32[i73 + 280 >> 2];
    d68 = d68 * +HEAPF32[i73 + 260 >> 2] + d67 * +HEAPF32[i73 + 256 >> 2] + d66 * +HEAPF32[i73 + 264 >> 2];
    HEAPF32[i36 >> 2] = d65 * d72 * d69 + +HEAPF32[i36 >> 2];
    HEAPF32[i38 >> 2] = d65 * d71 * d69 + +HEAPF32[i38 >> 2];
    HEAPF32[i25 >> 2] = d65 * d70 * d69 + +HEAPF32[i25 >> 2];
    d71 = d75 * d65 * +HEAPF32[i49 >> 2];
    d72 = d74 * d65 * +HEAPF32[i50 >> 2];
    HEAPF32[i26 >> 2] = d68 * d65 * +HEAPF32[i60 >> 2] + +HEAPF32[i26 >> 2];
    HEAPF32[i27 >> 2] = d71 + +HEAPF32[i27 >> 2];
    HEAPF32[i28 >> 2] = d72 + +HEAPF32[i28 >> 2];
   }
   i73 = HEAP32[i3 >> 2] | 0;
   d66 = +HEAPF32[i73 + 336 >> 2];
   d65 = -d65;
   if (+HEAPF32[i62 >> 2] != 0.0) {
    d75 = d54 * +HEAPF32[i73 + 292 >> 2] + d55 * +HEAPF32[i73 + 288 >> 2] + d56 * +HEAPF32[i73 + 296 >> 2];
    d74 = d54 * +HEAPF32[i73 + 276 >> 2] + d55 * +HEAPF32[i73 + 272 >> 2] + d56 * +HEAPF32[i73 + 280 >> 2];
    d72 = d54 * +HEAPF32[i73 + 260 >> 2] + d55 * +HEAPF32[i73 + 256 >> 2] + d56 * +HEAPF32[i73 + 264 >> 2];
    d70 = d66 * +HEAPF32[i57 >> 2] * d65;
    d71 = d66 * +HEAPF32[i58 >> 2] * d65;
    HEAPF32[i31 >> 2] = +HEAPF32[i31 >> 2] + d66 * +HEAPF32[i59 >> 2] * d65;
    HEAPF32[i30 >> 2] = d70 + +HEAPF32[i30 >> 2];
    HEAPF32[i29 >> 2] = d71 + +HEAPF32[i29 >> 2];
    d74 = d74 * +HEAPF32[i61 >> 2] * d65;
    d75 = d75 * +HEAPF32[i48 >> 2] * d65;
    HEAPF32[i33 >> 2] = d72 * +HEAPF32[i63 >> 2] * d65 + +HEAPF32[i33 >> 2];
    HEAPF32[i32 >> 2] = d74 + +HEAPF32[i32 >> 2];
    HEAPF32[i35 >> 2] = d75 + +HEAPF32[i35 >> 2];
   }
   i53 = i53 + 1 | 0;
  } while ((i53 | 0) != 3);
 }
 do {
  if ((HEAP8[i6 + 544 | 0] | 0) == 0) {
   d40 = +HEAPF32[i6 + 432 >> 2];
   i25 = i4 + 320 | 0;
   if (!(d40 > 1.1920928955078125e-7)) {
    i38 = i4 + 520 | 0;
    i36 = i4 + 324 | 0;
    i35 = i4 + 524 | 0;
    i33 = i4 + 328 | 0;
    i32 = i4 + 528 | 0;
    i31 = i1 + 320 | 0;
    i30 = i1 + 520 | 0;
    i29 = i1 + 324 | 0;
    i28 = i1 + 524 | 0;
    i27 = i1 + 328 | 0;
    i26 = i1 + 528 | 0;
    break;
   }
   i38 = i4 + 520 | 0;
   i36 = i4 + 324 | 0;
   i35 = i4 + 524 | 0;
   i33 = i4 + 328 | 0;
   i32 = i4 + 528 | 0;
   i31 = i1 + 320 | 0;
   i30 = i1 + 520 | 0;
   i29 = i1 + 324 | 0;
   i28 = i1 + 524 | 0;
   i27 = i1 + 328 | 0;
   i26 = i1 + 528 | 0;
   d37 = +HEAPF32[i31 >> 2] + +HEAPF32[i30 >> 2] - (+HEAPF32[i25 >> 2] + +HEAPF32[i38 >> 2]);
   d39 = +HEAPF32[i29 >> 2] + +HEAPF32[i28 >> 2] - (+HEAPF32[i36 >> 2] + +HEAPF32[i35 >> 2]);
   d34 = +HEAPF32[i27 >> 2] + +HEAPF32[i26 >> 2] - (+HEAPF32[i33 >> 2] + +HEAPF32[i32 >> 2]);
   d41 = d37 * d37 + d39 * d39 + d34 * d34;
   if (d41 > 1.1920928955078125e-7) {
    d75 = 1.0 / +Math_sqrt(+d41);
    d72 = d37 * d75;
    d74 = d39 * d75;
    d75 = d34 * d75;
    i13 = HEAP32[i5 >> 2] | 0;
    i16 = i13 + 256 | 0;
    i11 = i13 + 272 | 0;
    i14 = i13 + 288 | 0;
    i9 = i13 + 260 | 0;
    i12 = i13 + 276 | 0;
    i15 = i13 + 292 | 0;
    i8 = i13 + 264 | 0;
    i10 = i13 + 280 | 0;
    i13 = i13 + 296 | 0;
    i73 = HEAP32[i3 >> 2] | 0;
    d75 = d40 * (1.0 / (d72 * (d72 * +HEAPF32[i16 >> 2] + d74 * +HEAPF32[i11 >> 2] + d75 * +HEAPF32[i14 >> 2]) + d74 * (d72 * +HEAPF32[i9 >> 2] + d74 * +HEAPF32[i12 >> 2] + d75 * +HEAPF32[i15 >> 2]) + d75 * (d72 * +HEAPF32[i8 >> 2] + d74 * +HEAPF32[i10 >> 2] + d75 * +HEAPF32[i13 >> 2]) + (d72 * (d72 * +HEAPF32[i73 + 256 >> 2] + d74 * +HEAPF32[i73 + 272 >> 2] + d75 * +HEAPF32[i73 + 288 >> 2]) + d74 * (d72 * +HEAPF32[i73 + 260 >> 2] + d74 * +HEAPF32[i73 + 276 >> 2] + d75 * +HEAPF32[i73 + 292 >> 2]) + d75 * (d72 * +HEAPF32[i73 + 264 >> 2] + d74 * +HEAPF32[i73 + 280 >> 2] + d75 * +HEAPF32[i73 + 296 >> 2]))));
    d74 = d37 * d75;
    d40 = d39 * d75;
    d37 = d34 * d75;
    d34 = +Math_sqrt(+(d37 * d37 + (d74 * d74 + d40 * d40)));
    d75 = 1.0 / d34;
    d39 = d75 * d74;
    d40 = d75 * d40;
    d37 = d75 * d37;
    if (+HEAPF32[i4 + 336 >> 2] != 0.0) {
     d75 = d40 * +HEAPF32[i15 >> 2] + d39 * +HEAPF32[i14 >> 2] + d37 * +HEAPF32[i13 >> 2];
     d74 = d40 * +HEAPF32[i12 >> 2] + d39 * +HEAPF32[i11 >> 2] + d37 * +HEAPF32[i10 >> 2];
     d72 = d40 * +HEAPF32[i9 >> 2] + d39 * +HEAPF32[i16 >> 2] + d37 * +HEAPF32[i8 >> 2];
     d71 = d34 * 0.0;
     i73 = i4 + 504 | 0;
     HEAPF32[i73 >> 2] = d71 + +HEAPF32[i73 >> 2];
     i73 = i4 + 508 | 0;
     HEAPF32[i73 >> 2] = d71 + +HEAPF32[i73 >> 2];
     i73 = i4 + 512 | 0;
     HEAPF32[i73 >> 2] = d71 + +HEAPF32[i73 >> 2];
     d74 = d74 * d34 * +HEAPF32[i4 + 540 >> 2];
     d75 = d75 * d34 * +HEAPF32[i4 + 544 >> 2];
     HEAPF32[i38 >> 2] = d72 * d34 * +HEAPF32[i4 + 536 >> 2] + +HEAPF32[i38 >> 2];
     HEAPF32[i35 >> 2] = d74 + +HEAPF32[i35 >> 2];
     HEAPF32[i32 >> 2] = d75 + +HEAPF32[i32 >> 2];
    }
    i8 = HEAP32[i3 >> 2] | 0;
    d41 = -d34;
    if (+HEAPF32[i1 + 336 >> 2] != 0.0) {
     d75 = d40 * +HEAPF32[i8 + 292 >> 2] + d39 * +HEAPF32[i8 + 288 >> 2] + d37 * +HEAPF32[i8 + 296 >> 2];
     d74 = d40 * +HEAPF32[i8 + 276 >> 2] + d39 * +HEAPF32[i8 + 272 >> 2] + d37 * +HEAPF32[i8 + 280 >> 2];
     d72 = d40 * +HEAPF32[i8 + 260 >> 2] + d39 * +HEAPF32[i8 + 256 >> 2] + d37 * +HEAPF32[i8 + 264 >> 2];
     d71 = d34 * -0.0;
     i73 = i1 + 504 | 0;
     HEAPF32[i73 >> 2] = d71 + +HEAPF32[i73 >> 2];
     i73 = i1 + 508 | 0;
     HEAPF32[i73 >> 2] = d71 + +HEAPF32[i73 >> 2];
     i73 = i1 + 512 | 0;
     HEAPF32[i73 >> 2] = d71 + +HEAPF32[i73 >> 2];
     d74 = d74 * +HEAPF32[i1 + 540 >> 2] * d41;
     d75 = d75 * +HEAPF32[i1 + 544 >> 2] * d41;
     HEAPF32[i30 >> 2] = d72 * +HEAPF32[i1 + 536 >> 2] * d41 + +HEAPF32[i30 >> 2];
     HEAPF32[i28 >> 2] = d74 + +HEAPF32[i28 >> 2];
     HEAPF32[i26 >> 2] = d75 + +HEAPF32[i26 >> 2];
    }
   }
  } else {
   i25 = HEAP32[i5 >> 2] | 0;
   i38 = i25 + 4 | 0;
   HEAP32[i14 + 0 >> 2] = HEAP32[i38 + 0 >> 2];
   HEAP32[i14 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i14 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i14 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   i38 = i14 + 16 | 0;
   i36 = i25 + 20 | 0;
   HEAP32[i38 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
   i38 = i14 + 32 | 0;
   i36 = i25 + 36 | 0;
   HEAP32[i38 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
   i38 = i14 + 48 | 0;
   i25 = i25 + 52 | 0;
   HEAP32[i38 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
   i38 = HEAP32[i3 >> 2] | 0;
   i25 = i38 + 4 | 0;
   HEAP32[i24 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
   HEAP32[i24 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
   HEAP32[i24 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
   HEAP32[i24 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
   i25 = i24 + 16 | 0;
   i36 = i38 + 20 | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
   i25 = i24 + 32 | 0;
   i36 = i38 + 36 | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
   i25 = i24 + 48 | 0;
   i38 = i38 + 52 | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i38 + 0 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   i25 = i4 + 320 | 0;
   i38 = i4 + 520 | 0;
   i36 = i4 + 324 | 0;
   i35 = i4 + 524 | 0;
   d79 = +HEAPF32[i36 >> 2] + +HEAPF32[i35 >> 2];
   i33 = i4 + 328 | 0;
   i32 = i4 + 528 | 0;
   d80 = +HEAPF32[i33 >> 2] + +HEAPF32[i32 >> 2];
   HEAPF32[i10 >> 2] = +HEAPF32[i25 >> 2] + +HEAPF32[i38 >> 2];
   i61 = i10 + 4 | 0;
   HEAPF32[i61 >> 2] = d79;
   i62 = i10 + 8 | 0;
   HEAPF32[i62 >> 2] = d80;
   HEAPF32[i10 + 12 >> 2] = 0.0;
   i31 = i1 + 320 | 0;
   i30 = i1 + 520 | 0;
   i29 = i1 + 324 | 0;
   i28 = i1 + 524 | 0;
   d80 = +HEAPF32[i29 >> 2] + +HEAPF32[i28 >> 2];
   i27 = i1 + 328 | 0;
   i26 = i1 + 528 | 0;
   d79 = +HEAPF32[i27 >> 2] + +HEAPF32[i26 >> 2];
   HEAPF32[i9 >> 2] = +HEAPF32[i31 >> 2] + +HEAPF32[i30 >> 2];
   i63 = i9 + 4 | 0;
   HEAPF32[i63 >> 2] = d80;
   i73 = i9 + 8 | 0;
   HEAPF32[i73 >> 2] = d79;
   HEAPF32[i9 + 12 >> 2] = 0.0;
   HEAPF32[i13 >> 2] = 1.0;
   i51 = i13 + 4 | 0;
   i53 = i13 + 20 | 0;
   HEAP32[i51 + 0 >> 2] = 0;
   HEAP32[i51 + 4 >> 2] = 0;
   HEAP32[i51 + 8 >> 2] = 0;
   HEAP32[i51 + 12 >> 2] = 0;
   HEAPF32[i53 >> 2] = 1.0;
   i52 = i13 + 24 | 0;
   i57 = i13 + 40 | 0;
   HEAP32[i52 + 0 >> 2] = 0;
   HEAP32[i52 + 4 >> 2] = 0;
   HEAP32[i52 + 8 >> 2] = 0;
   HEAP32[i52 + 12 >> 2] = 0;
   HEAPF32[i57 >> 2] = 1.0;
   i58 = i13 + 44 | 0;
   HEAP32[i58 + 0 >> 2] = 0;
   HEAP32[i58 + 4 >> 2] = 0;
   HEAP32[i58 + 8 >> 2] = 0;
   HEAP32[i58 + 12 >> 2] = 0;
   HEAP32[i58 + 16 >> 2] = 0;
   i58 = i11 + 4 | 0;
   i59 = i11 + 8 | 0;
   i60 = i11 + 12 | 0;
   HEAP32[i11 + 0 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   HEAP32[i11 + 8 >> 2] = 0;
   HEAP32[i11 + 12 >> 2] = 0;
   __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i14, i11, i10, d7, i13);
   HEAPF32[i17 >> 2] = 1.0;
   i76 = i17 + 4 | 0;
   i48 = i17 + 20 | 0;
   HEAP32[i76 + 0 >> 2] = 0;
   HEAP32[i76 + 4 >> 2] = 0;
   HEAP32[i76 + 8 >> 2] = 0;
   HEAP32[i76 + 12 >> 2] = 0;
   HEAPF32[i48 >> 2] = 1.0;
   i49 = i17 + 24 | 0;
   i50 = i17 + 40 | 0;
   HEAP32[i49 + 0 >> 2] = 0;
   HEAP32[i49 + 4 >> 2] = 0;
   HEAP32[i49 + 8 >> 2] = 0;
   HEAP32[i49 + 12 >> 2] = 0;
   HEAPF32[i50 >> 2] = 1.0;
   i88 = i17 + 44 | 0;
   HEAP32[i88 + 0 >> 2] = 0;
   HEAP32[i88 + 4 >> 2] = 0;
   HEAP32[i88 + 8 >> 2] = 0;
   HEAP32[i88 + 12 >> 2] = 0;
   HEAP32[i88 + 16 >> 2] = 0;
   __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i24, i11, i9, d7, i17);
   d79 = +HEAPF32[i6 + 548 >> 2];
   d80 = +HEAPF32[i6 + 552 >> 2];
   d82 = +HEAPF32[i6 + 556 >> 2];
   d84 = +HEAPF32[i6 + 560 >> 2];
   d83 = 2.0 / (d79 * d79 + d80 * d80 + d82 * d82 + d84 * d84);
   d81 = d79 * d83;
   d41 = d80 * d83;
   d83 = d82 * d83;
   d45 = d84 * d81;
   d40 = d84 * d41;
   d84 = d84 * d83;
   d81 = d79 * d81;
   d87 = d79 * d41;
   d79 = d79 * d83;
   d41 = d80 * d41;
   d80 = d80 * d83;
   d83 = d82 * d83;
   d82 = 1.0 - (d41 + d83);
   d86 = d87 - d84;
   d85 = d79 + d40;
   d84 = d87 + d84;
   d83 = 1.0 - (d81 + d83);
   d87 = d80 - d45;
   d40 = d79 - d40;
   d45 = d80 + d45;
   d41 = 1.0 - (d81 + d41);
   d81 = +HEAPF32[i6 + 356 >> 2];
   d80 = +HEAPF32[i6 + 360 >> 2];
   d79 = +HEAPF32[i6 + 364 >> 2];
   d77 = d40 * d79 + (d80 * d84 + d81 * d82);
   d54 = d79 * d45 + (d81 * d86 + d80 * d83);
   d78 = d81 * d85 + d80 * d87 + d79 * d41;
   d44 = +HEAPF32[i6 + 372 >> 2];
   d46 = +HEAPF32[i6 + 376 >> 2];
   d47 = +HEAPF32[i6 + 380 >> 2];
   d64 = d82 * d44 + d84 * d46 + d40 * d47;
   d43 = d86 * d44 + d83 * d46 + d45 * d47;
   d56 = d85 * d44 + d87 * d46 + d41 * d47;
   d65 = +HEAPF32[i6 + 388 >> 2];
   d66 = +HEAPF32[i6 + 392 >> 2];
   d75 = +HEAPF32[i6 + 396 >> 2];
   d40 = d82 * d65 + d84 * d66 + d40 * d75;
   d45 = d86 * d65 + d83 * d66 + d45 * d75;
   d41 = d85 * d65 + d87 * d66 + d41 * d75;
   d87 = +HEAPF32[i6 + 292 >> 2];
   d85 = +HEAPF32[i6 + 308 >> 2];
   d83 = +HEAPF32[i6 + 324 >> 2];
   d86 = +HEAPF32[i6 + 296 >> 2];
   d84 = +HEAPF32[i6 + 312 >> 2];
   d82 = +HEAPF32[i6 + 328 >> 2];
   d74 = +HEAPF32[i6 + 300 >> 2];
   d39 = +HEAPF32[i6 + 316 >> 2];
   d42 = +HEAPF32[i6 + 332 >> 2];
   d68 = -+HEAPF32[i18 >> 2];
   d67 = -+HEAPF32[i19 >> 2];
   d37 = -+HEAPF32[i20 >> 2];
   d34 = d87 * d68 + d85 * d67 + d83 * d37;
   d55 = d86 * d68 + d84 * d67 + d82 * d37;
   d37 = d74 * d68 + d39 * d67 + d42 * d37;
   d67 = d77 * d87 + d54 * d86 + d78 * d74;
   d68 = d77 * d85 + d54 * d84 + d78 * d39;
   d69 = d77 * d83 + d54 * d82 + d78 * d42;
   d70 = d64 * d87 + d43 * d86 + d56 * d74;
   d71 = d64 * d85 + d43 * d84 + d56 * d39;
   d72 = d64 * d83 + d43 * d82 + d56 * d42;
   d74 = d40 * d87 + d45 * d86 + d41 * d74;
   d39 = d40 * d85 + d45 * d84 + d41 * d39;
   d42 = d40 * d83 + d45 * d82 + d41 * d42;
   d54 = d81 * 0.0 + d80 * 0.0 + d79 * 0.0 + +HEAPF32[i21 >> 2] + (d78 * d37 + (d77 * d34 + d54 * d55));
   d43 = d44 * 0.0 + d46 * 0.0 + d47 * 0.0 + +HEAPF32[i22 >> 2] + (d56 * d37 + (d64 * d34 + d43 * d55));
   d55 = d65 * 0.0 + d66 * 0.0 + d75 * 0.0 + +HEAPF32[i23 >> 2] + (d41 * d37 + (d40 * d34 + d45 * d55));
   d45 = +HEAPF32[i17 >> 2];
   d34 = +HEAPF32[i76 >> 2];
   d40 = +HEAPF32[i17 + 8 >> 2];
   d37 = +HEAPF32[i17 + 16 >> 2];
   d41 = +HEAPF32[i48 >> 2];
   d75 = +HEAPF32[i49 >> 2];
   d66 = +HEAPF32[i17 + 32 >> 2];
   d65 = +HEAPF32[i17 + 36 >> 2];
   d64 = +HEAPF32[i50 >> 2];
   d56 = d40 * d55 + (d45 * d54 + d34 * d43) + +HEAPF32[i17 + 48 >> 2];
   d47 = d55 * d75 + (d37 * d54 + d41 * d43) + +HEAPF32[i17 + 52 >> 2];
   d46 = d54 * d66 + d43 * d65 + d55 * d64 + +HEAPF32[i17 + 56 >> 2];
   HEAPF32[i15 >> 2] = d67 * d45 + d70 * d34 + d74 * d40;
   HEAPF32[i15 + 4 >> 2] = d68 * d45 + d71 * d34 + d39 * d40;
   HEAPF32[i15 + 8 >> 2] = d69 * d45 + d72 * d34 + d42 * d40;
   HEAPF32[i15 + 12 >> 2] = 0.0;
   HEAPF32[i15 + 16 >> 2] = d67 * d37 + d70 * d41 + d74 * d75;
   HEAPF32[i15 + 20 >> 2] = d68 * d37 + d71 * d41 + d39 * d75;
   HEAPF32[i15 + 24 >> 2] = d69 * d37 + d72 * d41 + d42 * d75;
   HEAPF32[i15 + 28 >> 2] = 0.0;
   HEAPF32[i15 + 32 >> 2] = d67 * d66 + d70 * d65 + d74 * d64;
   HEAPF32[i15 + 36 >> 2] = d68 * d66 + d71 * d65 + d39 * d64;
   HEAPF32[i15 + 40 >> 2] = d69 * d66 + d72 * d65 + d42 * d64;
   HEAPF32[i15 + 44 >> 2] = 0.0;
   HEAPF32[i15 + 48 >> 2] = d56;
   HEAPF32[i15 + 52 >> 2] = d47;
   HEAPF32[i15 + 56 >> 2] = d46;
   HEAPF32[i15 + 60 >> 2] = 0.0;
   d54 = -d54;
   d43 = -d43;
   d55 = -d55;
   d46 = d74 * d55 + (d67 * d54 + d70 * d43);
   d47 = d39 * d55 + (d68 * d54 + d71 * d43);
   d43 = d42 * d55 + (d69 * d54 + d72 * d43);
   d54 = +HEAPF32[i13 >> 2];
   d55 = +HEAPF32[i51 >> 2];
   d56 = +HEAPF32[i13 + 8 >> 2];
   d64 = +HEAPF32[i13 + 16 >> 2];
   d65 = +HEAPF32[i53 >> 2];
   d66 = +HEAPF32[i52 >> 2];
   d75 = +HEAPF32[i13 + 32 >> 2];
   d41 = +HEAPF32[i13 + 36 >> 2];
   d37 = +HEAPF32[i57 >> 2];
   d40 = d46 * d54 + d47 * d55 + d43 * d56 + +HEAPF32[i13 + 48 >> 2];
   d34 = d46 * d64 + d47 * d65 + d43 * d66 + +HEAPF32[i13 + 52 >> 2];
   d43 = d46 * d75 + d47 * d41 + d43 * d37 + +HEAPF32[i13 + 56 >> 2];
   HEAPF32[i16 >> 2] = d67 * d54 + d68 * d55 + d69 * d56;
   HEAPF32[i16 + 4 >> 2] = d70 * d54 + d71 * d55 + d72 * d56;
   HEAPF32[i16 + 8 >> 2] = d74 * d54 + d39 * d55 + d42 * d56;
   HEAPF32[i16 + 12 >> 2] = 0.0;
   HEAPF32[i16 + 16 >> 2] = d67 * d64 + d68 * d65 + d69 * d66;
   HEAPF32[i16 + 20 >> 2] = d70 * d64 + d71 * d65 + d72 * d66;
   HEAPF32[i16 + 24 >> 2] = d74 * d64 + d39 * d65 + d42 * d66;
   HEAPF32[i16 + 28 >> 2] = 0.0;
   HEAPF32[i16 + 32 >> 2] = d67 * d75 + d68 * d41 + d69 * d37;
   HEAPF32[i16 + 36 >> 2] = d70 * d75 + d71 * d41 + d72 * d37;
   HEAPF32[i16 + 40 >> 2] = d74 * d75 + d39 * d41 + d42 * d37;
   HEAPF32[i16 + 44 >> 2] = 0.0;
   i57 = i16 + 48 | 0;
   HEAPF32[i57 >> 2] = d40;
   i52 = i16 + 52 | 0;
   HEAPF32[i52 >> 2] = d34;
   i53 = i16 + 56 | 0;
   HEAPF32[i53 >> 2] = d43;
   HEAPF32[i16 + 60 >> 2] = 0.0;
   d43 = 1.0 / d7;
   __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i14, i15, i8, i12);
   d34 = +HEAPF32[i12 >> 2];
   d40 = d43 * +HEAPF32[i8 >> 2] * d34;
   d37 = d43 * d34 * +HEAPF32[i8 + 4 >> 2];
   d34 = d43 * d34 * +HEAPF32[i8 + 8 >> 2];
   d42 = d43 * (+HEAPF32[i52 >> 2] - +HEAPF32[i24 + 52 >> 2]);
   d41 = d43 * (+HEAPF32[i53 >> 2] - +HEAPF32[i24 + 56 >> 2]);
   HEAPF32[i11 >> 2] = d43 * (+HEAPF32[i57 >> 2] - +HEAPF32[i24 + 48 >> 2]);
   HEAPF32[i58 >> 2] = d42;
   HEAPF32[i59 >> 2] = d41;
   HEAPF32[i60 >> 2] = 0.0;
   __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i24, i16, i8, i12);
   d41 = +HEAPF32[i12 >> 2];
   d40 = d40 - +HEAPF32[i10 >> 2];
   d37 = d37 - +HEAPF32[i61 >> 2];
   d34 = d34 - +HEAPF32[i62 >> 2];
   d42 = d43 * +HEAPF32[i8 >> 2] * d41 - +HEAPF32[i9 >> 2];
   d39 = d43 * d41 * +HEAPF32[i8 + 4 >> 2] - +HEAPF32[i63 >> 2];
   d41 = d43 * d41 * +HEAPF32[i8 + 8 >> 2] - +HEAPF32[i73 >> 2];
   d43 = d40 * d40 + d37 * d37 + d34 * d34;
   if (d43 > 1.1920928955078125e-7) {
    d43 = 1.0 / +Math_sqrt(+d43);
    d54 = d40 * d43;
    d45 = d37 * d43;
    d43 = d34 * d43;
    i88 = HEAP32[i5 >> 2] | 0;
    d44 = d54 * (d54 * +HEAPF32[i88 + 256 >> 2] + d45 * +HEAPF32[i88 + 272 >> 2] + d43 * +HEAPF32[i88 + 288 >> 2]) + d45 * (d54 * +HEAPF32[i88 + 260 >> 2] + d45 * +HEAPF32[i88 + 276 >> 2] + d43 * +HEAPF32[i88 + 292 >> 2]) + d43 * (d54 * +HEAPF32[i88 + 264 >> 2] + d45 * +HEAPF32[i88 + 280 >> 2] + d43 * +HEAPF32[i88 + 296 >> 2]);
   } else {
    d44 = 0.0;
    d54 = 0.0;
    d45 = 0.0;
    d43 = 0.0;
   }
   d46 = d42 * d42 + d39 * d39 + d41 * d41;
   if (d46 > 1.1920928955078125e-7) {
    d46 = 1.0 / +Math_sqrt(+d46);
    d56 = d42 * d46;
    d55 = d39 * d46;
    d46 = d41 * d46;
    i88 = HEAP32[i3 >> 2] | 0;
    d47 = d56 * (d56 * +HEAPF32[i88 + 256 >> 2] + d55 * +HEAPF32[i88 + 272 >> 2] + d46 * +HEAPF32[i88 + 288 >> 2]) + d55 * (d56 * +HEAPF32[i88 + 260 >> 2] + d55 * +HEAPF32[i88 + 276 >> 2] + d46 * +HEAPF32[i88 + 292 >> 2]) + d46 * (d56 * +HEAPF32[i88 + 264 >> 2] + d55 * +HEAPF32[i88 + 280 >> 2] + d46 * +HEAPF32[i88 + 296 >> 2]);
   } else {
    d47 = 0.0;
    d56 = 0.0;
    d55 = 0.0;
    d46 = 0.0;
   }
   d54 = d54 * d44 + d56 * d47;
   d45 = d45 * d44 + d55 * d47;
   d44 = d43 * d44 + d46 * d47;
   d43 = d44 * d44 + (d54 * d54 + d45 * d45);
   if (d43 > 1.1920928955078125e-7) {
    d43 = 1.0 / +Math_sqrt(+d43);
    d86 = d54 * d43;
    d87 = d45 * d43;
    d44 = d44 * d43;
    i88 = HEAP32[i5 >> 2] | 0;
    d43 = d86 * (d86 * +HEAPF32[i88 + 256 >> 2] + d87 * +HEAPF32[i88 + 272 >> 2] + d44 * +HEAPF32[i88 + 288 >> 2]) + d87 * (d86 * +HEAPF32[i88 + 260 >> 2] + d87 * +HEAPF32[i88 + 276 >> 2] + d44 * +HEAPF32[i88 + 292 >> 2]) + d44 * (d86 * +HEAPF32[i88 + 264 >> 2] + d87 * +HEAPF32[i88 + 280 >> 2] + d44 * +HEAPF32[i88 + 296 >> 2]);
    i88 = HEAP32[i3 >> 2] | 0;
    d44 = d86 * (d86 * +HEAPF32[i88 + 256 >> 2] + d87 * +HEAPF32[i88 + 272 >> 2] + d44 * +HEAPF32[i88 + 288 >> 2]) + d87 * (d86 * +HEAPF32[i88 + 260 >> 2] + d87 * +HEAPF32[i88 + 276 >> 2] + d44 * +HEAPF32[i88 + 292 >> 2]) + d44 * (d86 * +HEAPF32[i88 + 264 >> 2] + d87 * +HEAPF32[i88 + 280 >> 2] + d44 * +HEAPF32[i88 + 296 >> 2]);
    d87 = d43 + d44;
    d87 = 1.0 / (d87 * d87);
    d40 = d87 * (d40 * d43 - d42 * d44);
    d37 = d87 * (d37 * d43 - d39 * d44);
    d34 = d87 * (d34 * d43 - d41 * d44);
    d44 = +HEAPF32[i6 + 564 >> 2];
    if (d44 >= 0.0) {
     if ((HEAP8[i6 + 545 | 0] | 0) != 0) {
      d44 = d44 / d43;
     }
     i10 = i6 + 568 | 0;
     d42 = +HEAPF32[i10 >> 2];
     d47 = d40 + d42;
     i8 = i6 + 572 | 0;
     d39 = +HEAPF32[i8 >> 2];
     d45 = d37 + d39;
     i9 = i6 + 576 | 0;
     d41 = +HEAPF32[i9 >> 2];
     d43 = d34 + d41;
     d46 = +Math_sqrt(+(d47 * d47 + d45 * d45 + d43 * d43));
     if (d46 > d44) {
      d34 = 1.0 / d46;
      d40 = d44 * d47 * d34 - d42;
      d37 = d44 * d45 * d34 - d39;
      d34 = d44 * d43 * d34 - d41;
     }
     HEAPF32[i10 >> 2] = d40 + d42;
     HEAPF32[i8 >> 2] = d37 + d39;
     HEAPF32[i9 >> 2] = d34 + d41;
    }
    d39 = +Math_sqrt(+(d34 * d34 + (d37 * d37 + d40 * d40)));
    d87 = 1.0 / d39;
    d40 = d40 * d87;
    d37 = d37 * d87;
    d34 = d34 * d87;
    i8 = HEAP32[i5 >> 2] | 0;
    if (+HEAPF32[i4 + 336 >> 2] != 0.0) {
     d87 = d37 * +HEAPF32[i8 + 292 >> 2] + d40 * +HEAPF32[i8 + 288 >> 2] + d34 * +HEAPF32[i8 + 296 >> 2];
     d86 = d37 * +HEAPF32[i8 + 276 >> 2] + d40 * +HEAPF32[i8 + 272 >> 2] + d34 * +HEAPF32[i8 + 280 >> 2];
     d85 = d37 * +HEAPF32[i8 + 260 >> 2] + d40 * +HEAPF32[i8 + 256 >> 2] + d34 * +HEAPF32[i8 + 264 >> 2];
     d84 = d39 * 0.0;
     i88 = i4 + 504 | 0;
     HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
     i88 = i4 + 508 | 0;
     HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
     i88 = i4 + 512 | 0;
     HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
     d86 = d86 * d39 * +HEAPF32[i4 + 540 >> 2];
     d87 = d87 * d39 * +HEAPF32[i4 + 544 >> 2];
     HEAPF32[i38 >> 2] = d85 * d39 * +HEAPF32[i4 + 536 >> 2] + +HEAPF32[i38 >> 2];
     HEAPF32[i35 >> 2] = d86 + +HEAPF32[i35 >> 2];
     HEAPF32[i32 >> 2] = d87 + +HEAPF32[i32 >> 2];
    }
    i8 = HEAP32[i3 >> 2] | 0;
    d41 = -d39;
    if (+HEAPF32[i1 + 336 >> 2] != 0.0) {
     d87 = d37 * +HEAPF32[i8 + 292 >> 2] + d40 * +HEAPF32[i8 + 288 >> 2] + d34 * +HEAPF32[i8 + 296 >> 2];
     d86 = d37 * +HEAPF32[i8 + 276 >> 2] + d40 * +HEAPF32[i8 + 272 >> 2] + d34 * +HEAPF32[i8 + 280 >> 2];
     d85 = d37 * +HEAPF32[i8 + 260 >> 2] + d40 * +HEAPF32[i8 + 256 >> 2] + d34 * +HEAPF32[i8 + 264 >> 2];
     d84 = d39 * -0.0;
     i88 = i1 + 504 | 0;
     HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
     i88 = i1 + 508 | 0;
     HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
     i88 = i1 + 512 | 0;
     HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
     d86 = d86 * +HEAPF32[i1 + 540 >> 2] * d41;
     d87 = d87 * +HEAPF32[i1 + 544 >> 2] * d41;
     HEAPF32[i30 >> 2] = d85 * +HEAPF32[i1 + 536 >> 2] * d41 + +HEAPF32[i30 >> 2];
     HEAPF32[i28 >> 2] = d86 + +HEAPF32[i28 >> 2];
     HEAPF32[i26 >> 2] = d87 + +HEAPF32[i26 >> 2];
    }
   }
  }
 } while (0);
 d34 = +HEAPF32[i25 >> 2] + +HEAPF32[i38 >> 2];
 d37 = +HEAPF32[i36 >> 2] + +HEAPF32[i35 >> 2];
 d39 = +HEAPF32[i33 >> 2] + +HEAPF32[i32 >> 2];
 d40 = +HEAPF32[i31 >> 2] + +HEAPF32[i30 >> 2];
 d41 = +HEAPF32[i29 >> 2] + +HEAPF32[i28 >> 2];
 d42 = +HEAPF32[i27 >> 2] + +HEAPF32[i26 >> 2];
 if ((HEAP8[i6 + 518 | 0] | 0) != 0) {
  d46 = +HEAPF32[i6 + 520 >> 2];
  d47 = d46 * +HEAPF32[i6 + 496 >> 2] * +HEAPF32[i6 + 424 >> 2] / d7;
  d44 = +HEAPF32[i6 + 452 >> 2];
  d43 = +HEAPF32[i6 + 456 >> 2];
  d45 = +HEAPF32[i6 + 460 >> 2];
  d54 = (d40 - d34) * d44 + (d41 - d37) * d43 + (d42 - d39) * d45;
  if (d54 > 0.0) {
   d47 = d47 + d46 * d54 * +HEAPF32[i6 + 428 >> 2];
  }
  i8 = i6 + 508 | 0;
  d46 = +HEAPF32[i8 >> 2];
  d47 = d46 + d47 * +HEAPF32[i6 + 484 >> 2];
  d87 = d47 > 0.0 ? d47 : 0.0;
  HEAPF32[i8 >> 2] = d87;
  d87 = d87 - d46;
  d85 = d44 * d87;
  d86 = d43 * d87;
  d87 = d45 * d87;
  d45 = +HEAPF32[i6 + 528 >> 2];
  d46 = +HEAPF32[i6 + 532 >> 2];
  d43 = +HEAPF32[i6 + 536 >> 2];
  d44 = d45 * d85 + d86 * d46 + d87 * d43;
  d45 = d85 - d45 * d44;
  d46 = d86 - d46 * d44;
  d44 = d87 - d43 * d44;
  d43 = +Math_sqrt(+(d44 * d44 + (d45 * d45 + d46 * d46)));
  d87 = 1.0 / d43;
  d45 = d87 * d45;
  d46 = d87 * d46;
  d44 = d87 * d44;
  i8 = HEAP32[i5 >> 2] | 0;
  if (+HEAPF32[i4 + 336 >> 2] != 0.0) {
   d87 = d46 * +HEAPF32[i8 + 292 >> 2] + d45 * +HEAPF32[i8 + 288 >> 2] + d44 * +HEAPF32[i8 + 296 >> 2];
   d86 = d46 * +HEAPF32[i8 + 276 >> 2] + d45 * +HEAPF32[i8 + 272 >> 2] + d44 * +HEAPF32[i8 + 280 >> 2];
   d85 = d46 * +HEAPF32[i8 + 260 >> 2] + d45 * +HEAPF32[i8 + 256 >> 2] + d44 * +HEAPF32[i8 + 264 >> 2];
   d84 = d43 * 0.0;
   i88 = i4 + 504 | 0;
   HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
   i88 = i4 + 508 | 0;
   HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
   i88 = i4 + 512 | 0;
   HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
   d86 = d86 * d43 * +HEAPF32[i4 + 540 >> 2];
   d87 = d87 * d43 * +HEAPF32[i4 + 544 >> 2];
   HEAPF32[i38 >> 2] = d85 * d43 * +HEAPF32[i4 + 536 >> 2] + +HEAPF32[i38 >> 2];
   HEAPF32[i35 >> 2] = d86 + +HEAPF32[i35 >> 2];
   HEAPF32[i32 >> 2] = d87 + +HEAPF32[i32 >> 2];
  }
  i8 = HEAP32[i3 >> 2] | 0;
  d47 = -d43;
  if (+HEAPF32[i1 + 336 >> 2] != 0.0) {
   d87 = d46 * +HEAPF32[i8 + 292 >> 2] + d45 * +HEAPF32[i8 + 288 >> 2] + d44 * +HEAPF32[i8 + 296 >> 2];
   d86 = d46 * +HEAPF32[i8 + 276 >> 2] + d45 * +HEAPF32[i8 + 272 >> 2] + d44 * +HEAPF32[i8 + 280 >> 2];
   d85 = d46 * +HEAPF32[i8 + 260 >> 2] + d45 * +HEAPF32[i8 + 256 >> 2] + d44 * +HEAPF32[i8 + 264 >> 2];
   d84 = d43 * -0.0;
   i88 = i1 + 504 | 0;
   HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
   i88 = i1 + 508 | 0;
   HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
   i88 = i1 + 512 | 0;
   HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
   d86 = d86 * +HEAPF32[i1 + 540 >> 2] * d47;
   d87 = d87 * +HEAPF32[i1 + 544 >> 2] * d47;
   HEAPF32[i30 >> 2] = d85 * +HEAPF32[i1 + 536 >> 2] * d47 + +HEAPF32[i30 >> 2];
   HEAPF32[i28 >> 2] = d86 + +HEAPF32[i28 >> 2];
   HEAPF32[i26 >> 2] = d87 + +HEAPF32[i26 >> 2];
  }
 }
 if ((HEAP8[i6 + 517 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d45 = +HEAPF32[i6 + 524 >> 2];
 d46 = d45 * +HEAPF32[i6 + 500 >> 2] * +HEAPF32[i6 + 424 >> 2] / d7;
 i9 = i6 + 468 | 0;
 d43 = +HEAPF32[i9 >> 2];
 i10 = i6 + 472 | 0;
 d44 = +HEAPF32[i10 >> 2];
 i8 = i6 + 476 | 0;
 d7 = +HEAPF32[i8 >> 2];
 d34 = (d40 - d34) * d43 + (d41 - d37) * d44 + (d42 - d39) * d7;
 if (d34 > 0.0) {
  d46 = d46 + d45 * d34 * +HEAPF32[i6 + 428 >> 2];
 }
 i11 = i6 + 512 | 0;
 d34 = +HEAPF32[i11 >> 2];
 d37 = d34 + d46 * +HEAPF32[i6 + 488 >> 2];
 d87 = d37 > 0.0 ? d37 : 0.0;
 HEAPF32[i11 >> 2] = d87;
 d34 = d87 - d34;
 i5 = HEAP32[i5 >> 2] | 0;
 if (+HEAPF32[i4 + 336 >> 2] != 0.0) {
  d87 = d44 * +HEAPF32[i5 + 292 >> 2] + d43 * +HEAPF32[i5 + 288 >> 2] + d7 * +HEAPF32[i5 + 296 >> 2];
  d86 = d44 * +HEAPF32[i5 + 276 >> 2] + d43 * +HEAPF32[i5 + 272 >> 2] + d7 * +HEAPF32[i5 + 280 >> 2];
  d7 = d44 * +HEAPF32[i5 + 260 >> 2] + d43 * +HEAPF32[i5 + 256 >> 2] + d7 * +HEAPF32[i5 + 264 >> 2];
  d43 = d34 * 0.0;
  i88 = i4 + 504 | 0;
  HEAPF32[i88 >> 2] = d43 + +HEAPF32[i88 >> 2];
  i88 = i4 + 508 | 0;
  HEAPF32[i88 >> 2] = d43 + +HEAPF32[i88 >> 2];
  i88 = i4 + 512 | 0;
  HEAPF32[i88 >> 2] = d43 + +HEAPF32[i88 >> 2];
  d43 = d86 * d34 * +HEAPF32[i4 + 540 >> 2];
  d44 = d87 * d34 * +HEAPF32[i4 + 544 >> 2];
  HEAPF32[i38 >> 2] = d7 * d34 * +HEAPF32[i4 + 536 >> 2] + +HEAPF32[i38 >> 2];
  HEAPF32[i35 >> 2] = d43 + +HEAPF32[i35 >> 2];
  HEAPF32[i32 >> 2] = d44 + +HEAPF32[i32 >> 2];
  d44 = +HEAPF32[i10 >> 2];
  d43 = +HEAPF32[i9 >> 2];
  d7 = +HEAPF32[i8 >> 2];
 }
 i3 = HEAP32[i3 >> 2] | 0;
 d37 = -d34;
 if (!(+HEAPF32[i1 + 336 >> 2] != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d87 = d44 * +HEAPF32[i3 + 292 >> 2] + d43 * +HEAPF32[i3 + 288 >> 2] + d7 * +HEAPF32[i3 + 296 >> 2];
 d86 = d44 * +HEAPF32[i3 + 276 >> 2] + d43 * +HEAPF32[i3 + 272 >> 2] + d7 * +HEAPF32[i3 + 280 >> 2];
 d85 = d44 * +HEAPF32[i3 + 260 >> 2] + d43 * +HEAPF32[i3 + 256 >> 2] + d7 * +HEAPF32[i3 + 264 >> 2];
 d84 = d34 * -0.0;
 i88 = i1 + 504 | 0;
 HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
 i88 = i1 + 508 | 0;
 HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
 i88 = i1 + 512 | 0;
 HEAPF32[i88 >> 2] = d84 + +HEAPF32[i88 >> 2];
 d86 = d86 * +HEAPF32[i1 + 540 >> 2] * d37;
 d87 = d87 * +HEAPF32[i1 + 544 >> 2] * d37;
 HEAPF32[i30 >> 2] = d85 * +HEAPF32[i1 + 536 >> 2] * d37 + +HEAPF32[i30 >> 2];
 HEAPF32[i28 >> 2] = d86 + +HEAPF32[i28 >> 2];
 HEAPF32[i26 >> 2] = d87 + +HEAPF32[i26 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld19debugDrawConstraintEP17btTypedConstraint(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, d3 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 i41 = i2 + 944 | 0;
 i36 = i2 + 880 | 0;
 i42 = i2 + 816 | 0;
 i37 = i2 + 800 | 0;
 i39 = i2 + 784 | 0;
 i38 = i2 + 768 | 0;
 i7 = i2 + 704 | 0;
 i40 = i2 + 640 | 0;
 i14 = i2 + 624 | 0;
 i13 = i2 + 608 | 0;
 i15 = i2 + 592 | 0;
 i12 = i2 + 576 | 0;
 i11 = i2 + 512 | 0;
 i5 = i2 + 448 | 0;
 i6 = i2 + 432 | 0;
 i8 = i2 + 416 | 0;
 i9 = i2 + 400 | 0;
 i10 = i2 + 384 | 0;
 i22 = i2 + 320 | 0;
 i26 = i2 + 304 | 0;
 i27 = i2 + 288 | 0;
 i28 = i2 + 272 | 0;
 i24 = i2 + 256 | 0;
 i21 = i2 + 240 | 0;
 i23 = i2 + 224 | 0;
 i20 = i2 + 208 | 0;
 i25 = i2 + 192 | 0;
 i18 = i2 + 176 | 0;
 i19 = i2 + 160 | 0;
 i34 = i2 + 96 | 0;
 i32 = i2 + 80 | 0;
 i31 = i2 + 64 | 0;
 i30 = i2 + 48 | 0;
 i35 = i2 + 32 | 0;
 i29 = i2 + 16 | 0;
 i33 = i2;
 i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 i17 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 48 >> 2] & 127](i17) | 0) >>> 11;
 i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 i16 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i16 >> 2] | 0) + 48 >> 2] & 127](i16) | 0) >>> 12;
 d3 = +HEAPF32[i4 + 36 >> 2];
 if (d3 <= 0.0) {
  STACKTOP = i2;
  return;
 }
 switch (HEAP32[i4 + 4 >> 2] | 0) {
 case 6:
 case 9:
  {
   i5 = i4 + 1056 | 0;
   HEAP32[i22 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i22 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   i10 = i22 + 16 | 0;
   i11 = i5 + 16 | 0;
   HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   i8 = i22 + 32 | 0;
   i9 = i5 + 32 | 0;
   HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   i6 = i22 + 48 | 0;
   i7 = i5 + 48 | 0;
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   if ((i17 & 1 | 0) == 0) {
    i42 = i4 + 1120 | 0;
    HEAP32[i22 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i22 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i22 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i22 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 1136 | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 1152 | 0;
    HEAP32[i8 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i8 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i8 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 1168 | 0;
    HEAP32[i6 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i6 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   } else {
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i22, d3);
    i42 = i4 + 1120 | 0;
    HEAP32[i22 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i22 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i22 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i22 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 1136 | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 1152 | 0;
    HEAP32[i8 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i8 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i8 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 1168 | 0;
    HEAP32[i6 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i6 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i22, d3);
   }
   if ((i16 & 1 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   HEAP32[i22 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i22 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i40 = i4 + 1120 | 0;
   i12 = i4 + 1168 | 0;
   HEAPF32[i26 >> 2] = +HEAPF32[i22 + 8 >> 2];
   HEAPF32[i26 + 4 >> 2] = +HEAPF32[i22 + 24 >> 2];
   HEAPF32[i26 + 8 >> 2] = +HEAPF32[i22 + 40 >> 2];
   HEAPF32[i26 + 12 >> 2] = 0.0;
   i41 = i22 + 16 | 0;
   i42 = i22 + 32 | 0;
   HEAPF32[i27 >> 2] = +HEAPF32[i22 >> 2];
   i38 = i27 + 4 | 0;
   HEAPF32[i38 >> 2] = +HEAPF32[i41 >> 2];
   i39 = i27 + 8 | 0;
   HEAPF32[i39 >> 2] = +HEAPF32[i42 >> 2];
   i37 = i27 + 12 | 0;
   HEAPF32[i37 >> 2] = 0.0;
   i36 = i4 + 924 | 0;
   d49 = +HEAPF32[i36 >> 2];
   d43 = +HEAPF32[i36 + 4 >> 2];
   i36 = i4 + 988 | 0;
   d47 = +HEAPF32[i36 >> 2];
   d46 = +HEAPF32[i36 + 4 >> 2];
   i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   i35 = HEAP32[(HEAP32[i36 >> 2] | 0) + 64 >> 2] | 0;
   HEAP32[i28 + 0 >> 2] = 0;
   HEAP32[i28 + 4 >> 2] = 0;
   HEAP32[i28 + 8 >> 2] = 0;
   HEAP32[i28 + 12 >> 2] = 0;
   FUNCTION_TABLE_viiiidddddid[i35 & 0](i36, i12, i26, i27, d3 * .8999999761581421, d49, d43, d47, d46, i28, 10.0);
   d46 = +HEAPF32[i22 + 20 >> 2];
   d47 = +HEAPF32[i22 + 36 >> 2];
   HEAPF32[i27 >> 2] = +HEAPF32[i22 + 4 >> 2];
   HEAPF32[i38 >> 2] = d46;
   HEAPF32[i39 >> 2] = d47;
   HEAPF32[i37 >> 2] = 0.0;
   d47 = +__ZNK23btGeneric6DofConstraint8getAngleEi(i4, 1);
   d46 = +__ZNK23btGeneric6DofConstraint8getAngleEi(i4, 2);
   d43 = +Math_cos(+d47);
   d47 = +Math_sin(+d47);
   d49 = +Math_cos(+d46);
   d46 = +Math_sin(+d46);
   d48 = +HEAPF32[i27 >> 2];
   d45 = +HEAPF32[i38 >> 2];
   d44 = +HEAPF32[i39 >> 2];
   HEAPF32[i24 >> 2] = d43 * d49 * d48 + d43 * d46 * d45 - d47 * d44;
   HEAPF32[i24 + 4 >> 2] = d49 * d45 - d46 * d48;
   HEAPF32[i24 + 8 >> 2] = d47 * d49 * d48 + d47 * d46 * d45 + d43 * d44;
   HEAP32[i22 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
   HEAP32[i22 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
   HEAP32[i22 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
   i40 = i4 + 1136 | 0;
   HEAP32[i10 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
   i40 = i4 + 1152 | 0;
   HEAP32[i8 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
   HEAP32[i6 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   d44 = -+HEAPF32[i41 >> 2];
   d43 = -+HEAPF32[i42 >> 2];
   HEAPF32[i21 >> 2] = -+HEAPF32[i22 >> 2];
   HEAPF32[i21 + 4 >> 2] = d44;
   HEAPF32[i21 + 8 >> 2] = d43;
   HEAPF32[i21 + 12 >> 2] = 0.0;
   i42 = i4 + 860 | 0;
   d43 = +HEAPF32[i42 >> 2];
   d44 = +HEAPF32[i42 + 4 >> 2];
   if (!(d43 > d44)) {
    if (d43 < d44) {
     i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
     i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 60 >> 2] | 0;
     HEAP32[i20 + 0 >> 2] = 0;
     HEAP32[i20 + 4 >> 2] = 0;
     HEAP32[i20 + 8 >> 2] = 0;
     HEAP32[i20 + 12 >> 2] = 0;
     FUNCTION_TABLE_viiiiddddiid[i41 & 0](i42, i12, i21, i24, d3, d3, d43, d44, i20, 1, 10.0);
    }
   } else {
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 60 >> 2] | 0;
    HEAP32[i23 + 0 >> 2] = 0;
    HEAP32[i23 + 4 >> 2] = 0;
    HEAP32[i23 + 8 >> 2] = 0;
    HEAP32[i23 + 12 >> 2] = 0;
    FUNCTION_TABLE_viiiiddddiid[i41 & 0](i42, i12, i21, i24, d3, d3, -3.1415927410125732, 3.1415927410125732, i23, 0, 10.0);
   }
   HEAP32[i22 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i22 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i42 = i4 + 672 | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   i42 = i42 + 16 | 0;
   HEAP32[i18 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
   HEAP32[i18 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
   HEAP32[i18 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 72 >> 2] | 0;
   HEAP32[i19 + 0 >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   HEAP32[i19 + 8 >> 2] = 0;
   HEAP32[i19 + 12 >> 2] = 0;
   FUNCTION_TABLE_viiiii[i41 & 31](i42, i25, i18, i22, i19);
   STACKTOP = i2;
   return;
  }
 case 4:
  {
   __ZNK11btTransformmlERKS_(i36, (HEAP32[i4 + 24 >> 2] | 0) + 4 | 0, i4 + 544 | 0);
   if ((i17 & 1 | 0) == 0) {
    __ZNK11btTransformmlERKS_(i42, (HEAP32[i4 + 28 >> 2] | 0) + 4 | 0, i4 + 608 | 0);
    HEAP32[i36 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i36 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i36 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i36 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i41 = i36 + 16 | 0;
    i40 = i42 + 16 | 0;
    HEAP32[i41 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i41 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i41 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i41 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i41 = i36 + 32 | 0;
    i40 = i42 + 32 | 0;
    HEAP32[i41 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i41 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i41 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i41 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i41 = i36 + 48 | 0;
    i42 = i42 + 48 | 0;
    HEAP32[i41 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i41 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i41 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i41 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   } else {
    i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i41 >> 2] | 0) + 56 >> 2] & 1](i41, i36, d3);
    __ZNK11btTransformmlERKS_(i42, (HEAP32[i4 + 28 >> 2] | 0) + 4 | 0, i4 + 608 | 0);
    HEAP32[i36 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i36 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i36 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i36 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i41 = i36 + 16 | 0;
    i40 = i42 + 16 | 0;
    HEAP32[i41 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i41 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i41 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i41 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i41 = i36 + 32 | 0;
    i40 = i42 + 32 | 0;
    HEAP32[i41 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i41 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i41 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i41 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i41 = i36 + 48 | 0;
    i42 = i42 + 48 | 0;
    HEAP32[i41 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i41 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i41 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i41 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i36, d3);
   }
   i42 = i4 + 680 | 0;
   d43 = +__ZNK14btAngularLimit6getLowEv(i42);
   d44 = +__ZNK14btAngularLimit7getHighEv(i42);
   if (d43 == d44) {
    STACKTOP = i2;
    return;
   }
   i4 = d43 > d44;
   if ((i16 & 1 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   HEAPF32[i37 >> 2] = +HEAPF32[i36 + 8 >> 2];
   HEAPF32[i37 + 4 >> 2] = +HEAPF32[i36 + 24 >> 2];
   HEAPF32[i37 + 8 >> 2] = +HEAPF32[i36 + 40 >> 2];
   HEAPF32[i37 + 12 >> 2] = 0.0;
   HEAPF32[i39 >> 2] = +HEAPF32[i36 >> 2];
   HEAPF32[i39 + 4 >> 2] = +HEAPF32[i36 + 16 >> 2];
   HEAPF32[i39 + 8 >> 2] = +HEAPF32[i36 + 32 >> 2];
   HEAPF32[i39 + 12 >> 2] = 0.0;
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 60 >> 2] | 0;
   HEAP32[i38 + 0 >> 2] = 0;
   HEAP32[i38 + 4 >> 2] = 0;
   HEAP32[i38 + 8 >> 2] = 0;
   HEAP32[i38 + 12 >> 2] = 0;
   FUNCTION_TABLE_viiiiddddiid[i41 & 0](i42, i36 + 48 | 0, i37, i39, d3, d3, i4 ? 0.0 : d43, i4 ? 6.2831854820251465 : d44, i38, i4 ^ 1, 10.0);
   STACKTOP = i2;
   return;
  }
 case 3:
  {
   HEAPF32[i41 >> 2] = 1.0;
   i39 = i41 + 4 | 0;
   HEAP32[i39 + 0 >> 2] = 0;
   HEAP32[i39 + 4 >> 2] = 0;
   HEAP32[i39 + 8 >> 2] = 0;
   HEAP32[i39 + 12 >> 2] = 0;
   HEAPF32[i41 + 20 >> 2] = 1.0;
   i39 = i41 + 24 | 0;
   HEAP32[i39 + 0 >> 2] = 0;
   HEAP32[i39 + 4 >> 2] = 0;
   HEAP32[i39 + 8 >> 2] = 0;
   HEAP32[i39 + 12 >> 2] = 0;
   HEAPF32[i41 + 40 >> 2] = 1.0;
   i39 = i41 + 44 | 0;
   HEAP32[i39 + 0 >> 2] = 0;
   HEAP32[i39 + 4 >> 2] = 0;
   HEAP32[i39 + 8 >> 2] = 0;
   HEAP32[i39 + 12 >> 2] = 0;
   HEAP32[i39 + 16 >> 2] = 0;
   d49 = +HEAPF32[i4 + 292 >> 2];
   d48 = +HEAPF32[i4 + 296 >> 2];
   d47 = +HEAPF32[i4 + 300 >> 2];
   i39 = HEAP32[i4 + 24 >> 2] | 0;
   d46 = +HEAPF32[i39 + 56 >> 2] + (d49 * +HEAPF32[i39 + 20 >> 2] + d48 * +HEAPF32[i39 + 24 >> 2] + d47 * +HEAPF32[i39 + 28 >> 2]);
   d45 = +HEAPF32[i39 + 60 >> 2] + (d49 * +HEAPF32[i39 + 36 >> 2] + d48 * +HEAPF32[i39 + 40 >> 2] + d47 * +HEAPF32[i39 + 44 >> 2]);
   i38 = i41 + 48 | 0;
   HEAPF32[i38 >> 2] = +HEAPF32[i39 + 52 >> 2] + (d49 * +HEAPF32[i39 + 4 >> 2] + d48 * +HEAPF32[i39 + 8 >> 2] + d47 * +HEAPF32[i39 + 12 >> 2]);
   i39 = i41 + 52 | 0;
   HEAPF32[i39 >> 2] = d46;
   i40 = i41 + 56 | 0;
   HEAPF32[i40 >> 2] = d45;
   i42 = i41 + 60 | 0;
   HEAPF32[i42 >> 2] = 0.0;
   i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   FUNCTION_TABLE_viid[HEAP32[(HEAP32[i37 >> 2] | 0) + 56 >> 2] & 1](i37, i41, d3);
   d45 = +HEAPF32[i4 + 308 >> 2];
   d46 = +HEAPF32[i4 + 312 >> 2];
   d47 = +HEAPF32[i4 + 316 >> 2];
   i37 = HEAP32[i4 + 28 >> 2] | 0;
   d48 = +HEAPF32[i37 + 56 >> 2] + (d45 * +HEAPF32[i37 + 20 >> 2] + d46 * +HEAPF32[i37 + 24 >> 2] + d47 * +HEAPF32[i37 + 28 >> 2]);
   d49 = +HEAPF32[i37 + 60 >> 2] + (d45 * +HEAPF32[i37 + 36 >> 2] + d46 * +HEAPF32[i37 + 40 >> 2] + d47 * +HEAPF32[i37 + 44 >> 2]);
   HEAPF32[i38 >> 2] = +HEAPF32[i37 + 52 >> 2] + (d45 * +HEAPF32[i37 + 4 >> 2] + d46 * +HEAPF32[i37 + 8 >> 2] + d47 * +HEAPF32[i37 + 12 >> 2]);
   HEAPF32[i39 >> 2] = d48;
   HEAPF32[i40 >> 2] = d49;
   HEAPF32[i42 >> 2] = 0.0;
   if ((i17 & 1 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i41, d3);
   STACKTOP = i2;
   return;
  }
 case 7:
  {
   i8 = i4 + 816 | 0;
   HEAP32[i34 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
   HEAP32[i34 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i34 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i34 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
   i5 = i34 + 16 | 0;
   i6 = i8 + 16 | 0;
   HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   i6 = i34 + 32 | 0;
   i7 = i8 + 32 | 0;
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i7 = i34 + 48 | 0;
   i42 = i8 + 48 | 0;
   HEAP32[i7 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
   HEAP32[i7 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   if ((i17 & 1 | 0) == 0) {
    i42 = i4 + 880 | 0;
    HEAP32[i34 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i34 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i34 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i34 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 896 | 0;
    HEAP32[i5 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i5 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i5 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 912 | 0;
    HEAP32[i6 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i6 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 928 | 0;
    HEAP32[i7 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   } else {
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i34, d3);
    i42 = i4 + 880 | 0;
    HEAP32[i34 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i34 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i34 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i34 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 896 | 0;
    HEAP32[i5 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i5 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i5 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 912 | 0;
    HEAP32[i6 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i6 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = i4 + 928 | 0;
    HEAP32[i7 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i34, d3);
   }
   if ((i16 & 1 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   i42 = (HEAP8[i4 + 172 | 0] | 0) != 0 ? i8 : i4 + 880 | 0;
   d44 = +HEAPF32[i42 >> 2];
   d47 = +HEAPF32[i42 + 4 >> 2];
   d45 = +HEAPF32[i42 + 16 >> 2];
   d49 = +HEAPF32[i42 + 20 >> 2];
   d46 = +HEAPF32[i42 + 32 >> 2];
   d48 = +HEAPF32[i42 + 36 >> 2];
   d58 = +HEAPF32[i42 + 48 >> 2];
   d55 = +HEAPF32[i42 + 52 >> 2];
   d52 = +HEAPF32[i42 + 56 >> 2];
   d43 = +HEAPF32[i4 + 176 >> 2];
   d56 = d47 * 0.0;
   d57 = +HEAPF32[i42 + 8 >> 2] * 0.0;
   d53 = d49 * 0.0;
   d54 = +HEAPF32[i42 + 24 >> 2] * 0.0;
   d50 = d48 * 0.0;
   d51 = +HEAPF32[i42 + 40 >> 2] * 0.0;
   HEAPF32[i32 >> 2] = d58 + (d57 + (d56 + d44 * d43));
   HEAPF32[i32 + 4 >> 2] = d55 + (d54 + (d53 + d45 * d43));
   HEAPF32[i32 + 8 >> 2] = d52 + (d51 + (d50 + d46 * d43));
   HEAPF32[i32 + 12 >> 2] = 0.0;
   d43 = +HEAPF32[i4 + 180 >> 2];
   HEAPF32[i31 >> 2] = d58 + (d57 + (d56 + d44 * d43));
   HEAPF32[i31 + 4 >> 2] = d55 + (d54 + (d53 + d45 * d43));
   HEAPF32[i31 + 8 >> 2] = d52 + (d51 + (d50 + d46 * d43));
   HEAPF32[i31 + 12 >> 2] = 0.0;
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[i30 + 0 >> 2] = 0;
   HEAP32[i30 + 4 >> 2] = 0;
   HEAP32[i30 + 8 >> 2] = 0;
   HEAP32[i30 + 12 >> 2] = 0;
   FUNCTION_TABLE_viiii[i41 & 63](i42, i32, i31, i30);
   HEAPF32[i35 >> 2] = d44;
   HEAPF32[i35 + 4 >> 2] = d45;
   HEAPF32[i35 + 8 >> 2] = d46;
   HEAPF32[i35 + 12 >> 2] = 0.0;
   HEAPF32[i29 >> 2] = d47;
   HEAPF32[i29 + 4 >> 2] = d49;
   HEAPF32[i29 + 8 >> 2] = d48;
   HEAPF32[i29 + 12 >> 2] = 0.0;
   d48 = +HEAPF32[i4 + 184 >> 2];
   d49 = +HEAPF32[i4 + 188 >> 2];
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 60 >> 2] | 0;
   HEAP32[i33 + 0 >> 2] = 0;
   HEAP32[i33 + 4 >> 2] = 0;
   HEAP32[i33 + 8 >> 2] = 0;
   HEAP32[i33 + 12 >> 2] = 0;
   FUNCTION_TABLE_viiiiddddiid[i41 & 0](i42, i4 + 928 | 0, i35, i29, d3, d3, d48, d49, i33, 1, 10.0);
   STACKTOP = i2;
   return;
  }
 case 5:
  {
   i18 = i4 + 24 | 0;
   i19 = i4 + 292 | 0;
   __ZNK11btTransformmlERKS_(i7, (HEAP32[i18 >> 2] | 0) + 4 | 0, i19);
   if ((i17 & 1 | 0) == 0) {
    __ZNK11btTransformmlERKS_(i40, (HEAP32[i4 + 28 >> 2] | 0) + 4 | 0, i4 + 356 | 0);
    HEAP32[i7 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i42 = i7 + 16 | 0;
    i41 = i40 + 16 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i7 + 32 | 0;
    i41 = i40 + 32 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i7 + 48 | 0;
    i41 = i40 + 48 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   } else {
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i7, d3);
    __ZNK11btTransformmlERKS_(i40, (HEAP32[i4 + 28 >> 2] | 0) + 4 | 0, i4 + 356 | 0);
    HEAP32[i7 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i42 = i7 + 16 | 0;
    i41 = i40 + 16 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i7 + 32 | 0;
    i41 = i40 + 32 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i7 + 48 | 0;
    i41 = i40 + 48 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    FUNCTION_TABLE_viid[HEAP32[(HEAP32[i42 >> 2] | 0) + 56 >> 2] & 1](i42, i7, d3);
   }
   if ((i16 & 1 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   __ZNK21btConeTwistConstraint16GetPointForAngleEff(i14, i4, 6.0868353843688965, d3);
   d54 = +HEAPF32[i14 >> 2];
   i20 = i7 + 4 | 0;
   i28 = i14 + 4 | 0;
   d55 = +HEAPF32[i28 >> 2];
   i27 = i7 + 8 | 0;
   i29 = i14 + 8 | 0;
   d56 = +HEAPF32[i29 >> 2];
   i33 = i7 + 48 | 0;
   i22 = i7 + 16 | 0;
   i17 = i7 + 20 | 0;
   i25 = i7 + 24 | 0;
   i26 = i7 + 52 | 0;
   d57 = +HEAPF32[i26 >> 2] + (d54 * +HEAPF32[i22 >> 2] + d55 * +HEAPF32[i17 >> 2] + d56 * +HEAPF32[i25 >> 2]);
   i23 = i7 + 32 | 0;
   i16 = i7 + 36 | 0;
   i30 = i7 + 40 | 0;
   i24 = i7 + 56 | 0;
   d58 = +HEAPF32[i24 >> 2] + (d54 * +HEAPF32[i23 >> 2] + d55 * +HEAPF32[i16 >> 2] + d56 * +HEAPF32[i30 >> 2]);
   HEAPF32[i14 >> 2] = +HEAPF32[i33 >> 2] + (+HEAPF32[i7 >> 2] * d54 + +HEAPF32[i20 >> 2] * d55 + +HEAPF32[i27 >> 2] * d56);
   HEAPF32[i28 >> 2] = d57;
   HEAPF32[i29 >> 2] = d58;
   HEAPF32[i14 + 12 >> 2] = 0.0;
   i29 = i13 + 4 | 0;
   i28 = i13 + 8 | 0;
   i32 = i13 + 12 | 0;
   i21 = i7 + 48 | 0;
   i31 = 0;
   do {
    __ZNK21btConeTwistConstraint16GetPointForAngleEff(i13, i4, +(i31 | 0) * 6.283185005187988 * .03125, d3);
    d54 = +HEAPF32[i13 >> 2];
    d55 = +HEAPF32[i29 >> 2];
    d56 = +HEAPF32[i28 >> 2];
    d57 = +HEAPF32[i26 >> 2] + (d54 * +HEAPF32[i22 >> 2] + d55 * +HEAPF32[i17 >> 2] + d56 * +HEAPF32[i25 >> 2]);
    d58 = +HEAPF32[i24 >> 2] + (d54 * +HEAPF32[i23 >> 2] + d55 * +HEAPF32[i16 >> 2] + d56 * +HEAPF32[i30 >> 2]);
    HEAPF32[i13 >> 2] = +HEAPF32[i33 >> 2] + (+HEAPF32[i7 >> 2] * d54 + +HEAPF32[i20 >> 2] * d55 + +HEAPF32[i27 >> 2] * d56);
    HEAPF32[i29 >> 2] = d57;
    HEAPF32[i28 >> 2] = d58;
    HEAPF32[i32 >> 2] = 0.0;
    i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
    i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 8 >> 2] | 0;
    HEAP32[i15 + 0 >> 2] = 0;
    HEAP32[i15 + 4 >> 2] = 0;
    HEAP32[i15 + 8 >> 2] = 0;
    HEAP32[i15 + 12 >> 2] = 0;
    FUNCTION_TABLE_viiii[i41 & 63](i42, i14, i13, i15);
    if ((i31 & 3 | 0) == 0) {
     i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
     i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 8 >> 2] | 0;
     HEAP32[i12 + 0 >> 2] = 0;
     HEAP32[i12 + 4 >> 2] = 0;
     HEAP32[i12 + 8 >> 2] = 0;
     HEAP32[i12 + 12 >> 2] = 0;
     FUNCTION_TABLE_viiii[i41 & 63](i42, i21, i13, i12);
    }
    HEAP32[i14 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
    HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
    HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
    HEAP32[i14 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
    i31 = i31 + 1 | 0;
   } while ((i31 | 0) != 32);
   d44 = +HEAPF32[i4 + 444 >> 2];
   d43 = +HEAPF32[i4 + 504 >> 2];
   i12 = HEAP32[i4 + 28 >> 2] | 0;
   if (+HEAPF32[i12 + 336 >> 2] > 0.0) {
    __ZNK11btTransformmlERKS_(i11, i12 + 4 | 0, i4 + 356 | 0);
    HEAP32[i7 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    i42 = i7 + 16 | 0;
    i41 = i11 + 16 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i7 + 32 | 0;
    i41 = i11 + 32 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i11 + 48 | 0;
    HEAP32[i21 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i21 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i21 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i21 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   } else {
    __ZNK11btTransformmlERKS_(i5, (HEAP32[i18 >> 2] | 0) + 4 | 0, i19);
    HEAP32[i7 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
    i42 = i7 + 16 | 0;
    i41 = i5 + 16 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i7 + 32 | 0;
    i41 = i5 + 32 | 0;
    HEAP32[i42 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
    HEAP32[i42 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
    HEAP32[i42 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
    HEAP32[i42 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
    i42 = i5 + 48 | 0;
    HEAP32[i21 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
    HEAP32[i21 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
    HEAP32[i21 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
    HEAP32[i21 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   }
   HEAP32[i6 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
   HEAPF32[i8 >> 2] = +HEAPF32[i7 >> 2];
   HEAPF32[i8 + 4 >> 2] = +HEAPF32[i22 >> 2];
   HEAPF32[i8 + 8 >> 2] = +HEAPF32[i23 >> 2];
   HEAPF32[i8 + 12 >> 2] = 0.0;
   HEAPF32[i9 >> 2] = +HEAPF32[i20 >> 2];
   HEAPF32[i9 + 4 >> 2] = +HEAPF32[i17 >> 2];
   HEAPF32[i9 + 8 >> 2] = +HEAPF32[i16 >> 2];
   HEAPF32[i9 + 12 >> 2] = 0.0;
   i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
   i41 = HEAP32[(HEAP32[i42 >> 2] | 0) + 60 >> 2] | 0;
   d57 = -d43 - d44;
   d58 = d44 - d43;
   HEAP32[i10 + 0 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   HEAP32[i10 + 12 >> 2] = 0;
   FUNCTION_TABLE_viiiiddddiid[i41 & 0](i42, i6, i8, i9, d3, d3, d57, d58, i10, 1, 10.0);
   STACKTOP = i2;
   return;
  }
 default:
  {
   STACKTOP = i2;
   return;
  }
 }
}
function __ZN20btConvexHullInternal24findEdgeForCoplanarFacesEPNS_6VertexES1_RPNS_4EdgeES4_S1_S1_(i24, i15, i13, i10, i8, i1, i2) {
 i24 = i24 | 0;
 i15 = i15 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i28 = i9 + 168 | 0;
 i27 = i9 + 144 | 0;
 i25 = i9 + 120 | 0;
 i26 = i9 + 96 | 0;
 i5 = i9 + 72 | 0;
 i6 = i9 + 48 | 0;
 i3 = i9 + 24 | 0;
 i4 = i9;
 i30 = HEAP32[i10 >> 2] | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i14 = (i30 | 0) != 0;
 if (i14) {
  i11 = HEAP32[i30 + 12 >> 2] | 0;
 } else {
  i11 = i15;
 }
 i35 = HEAP32[i11 + 88 >> 2] | 0;
 i34 = HEAP32[i11 + 92 >> 2] | 0;
 i33 = HEAP32[i11 + 96 >> 2] | 0;
 if ((i7 | 0) == 0) {
  i11 = i13;
 } else {
  i11 = HEAP32[i7 + 12 >> 2] | 0;
 }
 i39 = HEAP32[i11 + 88 >> 2] | 0;
 i38 = HEAP32[i11 + 92 >> 2] | 0;
 i37 = HEAP32[i11 + 96 >> 2] | 0;
 i18 = HEAP32[i15 + 88 >> 2] | 0;
 i11 = (HEAP32[i13 + 88 >> 2] | 0) - i18 | 0;
 i19 = HEAP32[i15 + 92 >> 2] | 0;
 i12 = (HEAP32[i13 + 92 >> 2] | 0) - i19 | 0;
 i20 = HEAP32[i15 + 96 >> 2] | 0;
 i13 = (HEAP32[i13 + 96 >> 2] | 0) - i20 | 0;
 i16 = HEAP32[(i14 ? i30 : i7) + 12 >> 2] | 0;
 i32 = (HEAP32[i16 + 88 >> 2] | 0) - i18 | 0;
 i31 = (HEAP32[i16 + 92 >> 2] | 0) - i19 | 0;
 i16 = (HEAP32[i16 + 96 >> 2] | 0) - i20 | 0;
 i14 = (Math_imul(i31, i13) | 0) - (Math_imul(i16, i12) | 0) | 0;
 i15 = ((i14 | 0) < 0) << 31 >> 31;
 i16 = (Math_imul(i16, i11) | 0) - (Math_imul(i32, i13) | 0) | 0;
 i17 = ((i16 | 0) < 0) << 31 >> 31;
 i31 = (Math_imul(i32, i12) | 0) - (Math_imul(i31, i11) | 0) | 0;
 i32 = ((i31 | 0) < 0) << 31 >> 31;
 i22 = ___muldi3(i14 | 0, i15 | 0, i18 | 0, ((i18 | 0) < 0) << 31 >> 31 | 0) | 0;
 i23 = tempRet0;
 i40 = ___muldi3(i16 | 0, i17 | 0, i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0) | 0;
 i41 = tempRet0;
 i18 = ___muldi3(i31 | 0, i32 | 0, i20 | 0, ((i20 | 0) < 0) << 31 >> 31 | 0) | 0;
 i18 = _i64Add(i22 | 0, i23 | 0, i18 | 0, tempRet0 | 0) | 0;
 i41 = _i64Add(i18 | 0, tempRet0 | 0, i40 | 0, i41 | 0) | 0;
 i40 = tempRet0;
 i18 = ((i12 | 0) < 0) << 31 >> 31;
 i20 = ___muldi3(i31 | 0, i32 | 0, i12 | 0, i18 | 0) | 0;
 i23 = tempRet0;
 i22 = ((i13 | 0) < 0) << 31 >> 31;
 i19 = ___muldi3(i16 | 0, i17 | 0, i13 | 0, i22 | 0) | 0;
 i19 = _i64Subtract(i20 | 0, i23 | 0, i19 | 0, tempRet0 | 0) | 0;
 i23 = tempRet0;
 i22 = ___muldi3(i14 | 0, i15 | 0, i13 | 0, i22 | 0) | 0;
 i20 = tempRet0;
 i43 = ((i11 | 0) < 0) << 31 >> 31;
 i21 = ___muldi3(i31 | 0, i32 | 0, i11 | 0, i43 | 0) | 0;
 i21 = _i64Subtract(i22 | 0, i20 | 0, i21 | 0, tempRet0 | 0) | 0;
 i20 = tempRet0;
 i43 = ___muldi3(i16 | 0, i17 | 0, i11 | 0, i43 | 0) | 0;
 i22 = tempRet0;
 i18 = ___muldi3(i14 | 0, i15 | 0, i12 | 0, i18 | 0) | 0;
 i18 = _i64Subtract(i43 | 0, i22 | 0, i18 | 0, tempRet0 | 0) | 0;
 i22 = tempRet0;
 i43 = ___muldi3(i19 | 0, i23 | 0, i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = tempRet0;
 i42 = ___muldi3(i21 | 0, i20 | 0, i34 | 0, ((i34 | 0) < 0) << 31 >> 31 | 0) | 0;
 i44 = _i64Add(i42 | 0, tempRet0 | 0, i43 | 0, i44 | 0) | 0;
 i43 = tempRet0;
 i42 = ___muldi3(i18 | 0, i22 | 0, i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0) | 0;
 i42 = _i64Add(i44 | 0, i43 | 0, i42 | 0, tempRet0 | 0) | 0;
 i43 = tempRet0;
 i44 = HEAP32[i10 >> 2] | 0;
 L7 : do {
  if ((i44 | 0) != 0 ? (HEAP32[i44 + 12 >> 2] | 0) != (i1 | 0) : 0) {
   i36 = i24 + 100 | 0;
   while (1) {
    i44 = HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 4 >> 2] | 0;
    i45 = i44 + 12 | 0;
    i48 = HEAP32[i45 >> 2] | 0;
    i49 = HEAP32[i48 + 88 >> 2] | 0;
    i47 = ((i49 | 0) < 0) << 31 >> 31;
    i69 = ___muldi3(i49 | 0, i47 | 0, i14 | 0, i15 | 0) | 0;
    i68 = tempRet0;
    i51 = HEAP32[i48 + 92 >> 2] | 0;
    i50 = ((i51 | 0) < 0) << 31 >> 31;
    i46 = ___muldi3(i51 | 0, i50 | 0, i16 | 0, i17 | 0) | 0;
    i68 = _i64Add(i46 | 0, tempRet0 | 0, i69 | 0, i68 | 0) | 0;
    i69 = tempRet0;
    i48 = HEAP32[i48 + 96 >> 2] | 0;
    i46 = ((i48 | 0) < 0) << 31 >> 31;
    i70 = ___muldi3(i48 | 0, i46 | 0, i31 | 0, i32 | 0) | 0;
    i70 = _i64Add(i68 | 0, i69 | 0, i70 | 0, tempRet0 | 0) | 0;
    i69 = tempRet0;
    if ((i69 | 0) < (i40 | 0) | (i69 | 0) == (i40 | 0) & i70 >>> 0 < i41 >>> 0) {
     break L7;
    }
    if ((HEAP32[i44 + 20 >> 2] | 0) == (HEAP32[i36 >> 2] | 0)) {
     break L7;
    }
    i70 = ___muldi3(i49 | 0, i47 | 0, i19 | 0, i23 | 0) | 0;
    i69 = tempRet0;
    i47 = ___muldi3(i51 | 0, i50 | 0, i21 | 0, i20 | 0) | 0;
    i69 = _i64Add(i47 | 0, tempRet0 | 0, i70 | 0, i69 | 0) | 0;
    i70 = tempRet0;
    i47 = ___muldi3(i48 | 0, i46 | 0, i18 | 0, i22 | 0) | 0;
    i47 = _i64Add(i69 | 0, i70 | 0, i47 | 0, tempRet0 | 0) | 0;
    i46 = tempRet0;
    if (!((i46 | 0) > (i43 | 0) | (i46 | 0) == (i43 | 0) & i47 >>> 0 > i42 >>> 0)) {
     break L7;
    }
    HEAP32[i10 >> 2] = i44;
    i70 = HEAP32[i45 >> 2] | 0;
    i35 = HEAP32[i70 + 88 >> 2] | 0;
    i34 = HEAP32[i70 + 92 >> 2] | 0;
    i33 = HEAP32[i70 + 96 >> 2] | 0;
    if ((i70 | 0) == (i1 | 0)) {
     i42 = i47;
     i43 = i46;
     break;
    } else {
     i43 = i46;
     i42 = i47;
    }
   }
  }
 } while (0);
 i45 = ___muldi3(i19 | 0, i23 | 0, i39 | 0, ((i39 | 0) < 0) << 31 >> 31 | 0) | 0;
 i36 = tempRet0;
 i46 = ___muldi3(i21 | 0, i20 | 0, i38 | 0, ((i38 | 0) < 0) << 31 >> 31 | 0) | 0;
 i36 = _i64Add(i46 | 0, tempRet0 | 0, i45 | 0, i36 | 0) | 0;
 i45 = tempRet0;
 i46 = ___muldi3(i18 | 0, i22 | 0, i37 | 0, ((i37 | 0) < 0) << 31 >> 31 | 0) | 0;
 i46 = _i64Add(i36 | 0, i45 | 0, i46 | 0, tempRet0 | 0) | 0;
 i45 = tempRet0;
 i36 = HEAP32[i8 >> 2] | 0;
 L16 : do {
  if ((i36 | 0) != 0) {
   if ((HEAP32[i36 + 12 >> 2] | 0) != (i2 | 0)) {
    i44 = i24 + 100 | 0;
    while (1) {
     i47 = HEAP32[HEAP32[i36 + 8 >> 2] >> 2] | 0;
     i48 = i47 + 12 | 0;
     i53 = HEAP32[i48 >> 2] | 0;
     i50 = HEAP32[i53 + 88 >> 2] | 0;
     i51 = ((i50 | 0) < 0) << 31 >> 31;
     i69 = ___muldi3(i50 | 0, i51 | 0, i14 | 0, i15 | 0) | 0;
     i68 = tempRet0;
     i49 = HEAP32[i53 + 92 >> 2] | 0;
     i52 = ((i49 | 0) < 0) << 31 >> 31;
     i54 = ___muldi3(i49 | 0, i52 | 0, i16 | 0, i17 | 0) | 0;
     i68 = _i64Add(i54 | 0, tempRet0 | 0, i69 | 0, i68 | 0) | 0;
     i69 = tempRet0;
     i53 = HEAP32[i53 + 96 >> 2] | 0;
     i54 = ((i53 | 0) < 0) << 31 >> 31;
     i70 = ___muldi3(i53 | 0, i54 | 0, i31 | 0, i32 | 0) | 0;
     i70 = _i64Add(i68 | 0, i69 | 0, i70 | 0, tempRet0 | 0) | 0;
     i69 = tempRet0;
     if ((i69 | 0) < (i40 | 0) | (i69 | 0) == (i40 | 0) & i70 >>> 0 < i41 >>> 0) {
      break L16;
     }
     if ((HEAP32[i47 + 20 >> 2] | 0) == (HEAP32[i44 >> 2] | 0)) {
      break L16;
     }
     i50 = ___muldi3(i50 | 0, i51 | 0, i19 | 0, i23 | 0) | 0;
     i70 = tempRet0;
     i49 = ___muldi3(i49 | 0, i52 | 0, i21 | 0, i20 | 0) | 0;
     i70 = _i64Add(i49 | 0, tempRet0 | 0, i50 | 0, i70 | 0) | 0;
     i49 = tempRet0;
     i50 = ___muldi3(i53 | 0, i54 | 0, i18 | 0, i22 | 0) | 0;
     i50 = _i64Add(i70 | 0, i49 | 0, i50 | 0, tempRet0 | 0) | 0;
     i49 = tempRet0;
     if (!((i49 | 0) > (i45 | 0) | (i49 | 0) == (i45 | 0) & i50 >>> 0 > i46 >>> 0)) {
      break L16;
     }
     HEAP32[i8 >> 2] = i47;
     i70 = HEAP32[i48 >> 2] | 0;
     i39 = HEAP32[i70 + 88 >> 2] | 0;
     i38 = HEAP32[i70 + 92 >> 2] | 0;
     i37 = HEAP32[i70 + 96 >> 2] | 0;
     if ((i70 | 0) == (i2 | 0)) {
      i46 = i50;
      i45 = i49;
      i36 = i47;
      break;
     } else {
      i36 = i47;
      i45 = i49;
      i46 = i50;
     }
    }
   }
  } else {
   i36 = 0;
  }
 } while (0);
 i41 = _i64Subtract(i46 | 0, i45 | 0, i42 | 0, i43 | 0) | 0;
 i40 = tempRet0;
 if ((i40 | 0) > 0 | (i40 | 0) == 0 & i41 >>> 0 > 0) {
  i52 = i24 + 100 | 0;
  i45 = _i64Subtract(0, 0, i31 | 0, i32 | 0) | 0;
  i48 = tempRet0;
  i49 = i25 + 16 | 0;
  i55 = i25 + 8 | 0;
  i42 = i26 + 16 | 0;
  i43 = i26 + 8 | 0;
  i54 = i28 + 16 | 0;
  i53 = i28 + 8 | 0;
  i51 = i27 + 16 | 0;
  i50 = i27 + 8 | 0;
  i47 = i33;
  i46 = i34;
  i44 = i35;
  i60 = i37;
  i61 = i38;
  i62 = i39;
  i57 = i41;
  i56 = i40;
  L27 : while (1) {
   L29 : while (1) {
    i59 = (Math_imul(i61 - i46 | 0, i12) | 0) + (Math_imul(i60 - i47 | 0, i13) | 0) + (Math_imul(i62 - i44 | 0, i11) | 0) | 0;
    i58 = ((i59 | 0) < 0) << 31 >> 31;
    i63 = HEAP32[i10 >> 2] | 0;
    do {
     if (((i63 | 0) != 0 ? (HEAP32[i63 + 12 >> 2] | 0) != (i1 | 0) : 0) ? (i29 = HEAP32[(HEAP32[i63 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i29 + 20 >> 2] | 0) > (HEAP32[i52 >> 2] | 0)) : 0) {
      i65 = HEAP32[i29 + 12 >> 2] | 0;
      i64 = HEAP32[i65 + 88 >> 2] | 0;
      i70 = i64 - i44 | 0;
      i66 = HEAP32[i65 + 92 >> 2] | 0;
      i71 = i66 - i46 | 0;
      i65 = HEAP32[i65 + 96 >> 2] | 0;
      i69 = i65 - i47 | 0;
      i67 = ___muldi3(i70 | 0, ((i70 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
      i72 = tempRet0;
      i68 = ___muldi3(i71 | 0, ((i71 | 0) < 0) << 31 >> 31 | 0, i21 | 0, i20 | 0) | 0;
      i72 = _i64Add(i68 | 0, tempRet0 | 0, i67 | 0, i72 | 0) | 0;
      i67 = tempRet0;
      i68 = ___muldi3(i69 | 0, ((i69 | 0) < 0) << 31 >> 31 | 0, i18 | 0, i22 | 0) | 0;
      i68 = _i64Add(i72 | 0, i67 | 0, i68 | 0, tempRet0 | 0) | 0;
      i67 = tempRet0;
      i69 = (Math_imul(i71, i12) | 0) + (Math_imul(i70, i11) | 0) + (Math_imul(i69, i13) | 0) | 0;
      i70 = ((i69 | 0) < 0) << 31 >> 31;
      if ((i68 | 0) == 0 & (i67 | 0) == 0) {
       if ((i69 | 0) < 0) {
        break L29;
       } else {
        break;
       }
      }
      if ((i67 | 0) < 0) {
       do {
        if ((i69 | 0) <= 0) {
         if ((i69 | 0) < 0) {
          HEAP32[i54 >> 2] = -1;
          i72 = _i64Subtract(0, 0, i69 | 0, i70 | 0) | 0;
          i69 = i28;
          HEAP32[i69 >> 2] = i72;
          HEAP32[i69 + 4 >> 2] = tempRet0;
          i69 = -1;
          break;
         } else {
          HEAP32[i54 >> 2] = 0;
          i69 = i28;
          HEAP32[i69 >> 2] = 0;
          HEAP32[i69 + 4 >> 2] = 0;
          i69 = 0;
          break;
         }
        } else {
         HEAP32[i54 >> 2] = 1;
         i72 = i28;
         HEAP32[i72 >> 2] = i69;
         HEAP32[i72 + 4 >> 2] = i70;
         i69 = 1;
        }
       } while (0);
       if (!((i67 | 0) > 0 | (i67 | 0) == 0 & i68 >>> 0 > 0)) {
        HEAP32[i54 >> 2] = 0 - i69;
        i68 = _i64Subtract(0, 0, i68 | 0, i67 | 0) | 0;
        i67 = tempRet0;
       }
       i72 = i53;
       HEAP32[i72 >> 2] = i68;
       HEAP32[i72 + 4 >> 2] = i67;
       do {
        if ((i59 | 0) <= 0) {
         if ((i59 | 0) < 0) {
          HEAP32[i51 >> 2] = -1;
          i72 = _i64Subtract(0, 0, i59 | 0, i58 | 0) | 0;
          i67 = i27;
          HEAP32[i67 >> 2] = i72;
          HEAP32[i67 + 4 >> 2] = tempRet0;
          i67 = -1;
          break;
         } else {
          HEAP32[i51 >> 2] = 0;
          i67 = i27;
          HEAP32[i67 >> 2] = 0;
          HEAP32[i67 + 4 >> 2] = 0;
          i67 = 0;
          break;
         }
        } else {
         HEAP32[i51 >> 2] = 1;
         i67 = i27;
         HEAP32[i67 >> 2] = i59;
         HEAP32[i67 + 4 >> 2] = i58;
         i67 = 1;
        }
       } while (0);
       do {
        if (!((i56 | 0) > 0 | (i56 | 0) == 0 & i57 >>> 0 > 0)) {
         if ((i56 | 0) < 0) {
          HEAP32[i51 >> 2] = 0 - i67;
          i71 = _i64Subtract(0, 0, i57 | 0, i56 | 0) | 0;
          i72 = i50;
          HEAP32[i72 >> 2] = i71;
          HEAP32[i72 + 4 >> 2] = tempRet0;
          break;
         } else {
          i72 = i50;
          HEAP32[i72 >> 2] = 0;
          HEAP32[i72 + 4 >> 2] = 0;
          break;
         }
        } else {
         i72 = i50;
         HEAP32[i72 >> 2] = i57;
         HEAP32[i72 + 4 >> 2] = i56;
        }
       } while (0);
       if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i28, i27) | 0) > -1) {
        break L29;
       }
      }
     }
    } while (0);
    i63 = HEAP32[i8 >> 2] | 0;
    if ((i63 | 0) == 0) {
     i25 = 128;
     break L27;
    }
    if ((HEAP32[i63 + 12 >> 2] | 0) == (i2 | 0)) {
     i25 = 128;
     break L27;
    }
    i63 = HEAP32[HEAP32[i63 + 8 >> 2] >> 2] | 0;
    if ((HEAP32[i63 + 20 >> 2] | 0) <= (HEAP32[i52 >> 2] | 0)) {
     i25 = 128;
     break L27;
    }
    i64 = i63 + 12 | 0;
    i69 = HEAP32[i64 >> 2] | 0;
    i65 = HEAP32[i69 + 88 >> 2] | 0;
    i67 = i65 - i62 | 0;
    i62 = HEAP32[i69 + 92 >> 2] | 0;
    i68 = i62 - i61 | 0;
    i61 = HEAP32[i69 + 96 >> 2] | 0;
    i69 = i61 - i60 | 0;
    i70 = ((i67 | 0) < 0) << 31 >> 31;
    i72 = ___muldi3(i67 | 0, i70 | 0, i14 | 0, i15 | 0) | 0;
    i73 = tempRet0;
    i66 = ((i68 | 0) < 0) << 31 >> 31;
    i60 = ___muldi3(i68 | 0, i66 | 0, i16 | 0, i17 | 0) | 0;
    i73 = _i64Add(i60 | 0, tempRet0 | 0, i72 | 0, i73 | 0) | 0;
    i72 = tempRet0;
    i60 = ((i69 | 0) < 0) << 31 >> 31;
    i71 = ___muldi3(i69 | 0, i60 | 0, i45 | 0, i48 | 0) | 0;
    if (!((i73 | 0) == (i71 | 0) & (i72 | 0) == (tempRet0 | 0))) {
     i25 = 128;
     break L27;
    }
    i72 = ___muldi3(i67 | 0, i70 | 0, i19 | 0, i23 | 0) | 0;
    i73 = tempRet0;
    i66 = ___muldi3(i68 | 0, i66 | 0, i21 | 0, i20 | 0) | 0;
    i73 = _i64Add(i66 | 0, tempRet0 | 0, i72 | 0, i73 | 0) | 0;
    i72 = tempRet0;
    i66 = ___muldi3(i69 | 0, i60 | 0, i18 | 0, i22 | 0) | 0;
    i66 = _i64Add(i73 | 0, i72 | 0, i66 | 0, tempRet0 | 0) | 0;
    i60 = tempRet0;
    i69 = (Math_imul(i68, i12) | 0) + (Math_imul(i67, i11) | 0) + (Math_imul(i69, i13) | 0) | 0;
    i68 = ((i69 | 0) < 0) << 31 >> 31;
    i65 = i65 - i44 | 0;
    i72 = i62 - i46 | 0;
    i67 = i61 - i47 | 0;
    i65 = ___muldi3(i65 | 0, ((i65 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
    i73 = tempRet0;
    i72 = ___muldi3(i72 | 0, ((i72 | 0) < 0) << 31 >> 31 | 0, i21 | 0, i20 | 0) | 0;
    i73 = _i64Add(i72 | 0, tempRet0 | 0, i65 | 0, i73 | 0) | 0;
    i65 = tempRet0;
    i67 = ___muldi3(i67 | 0, ((i67 | 0) < 0) << 31 >> 31 | 0, i18 | 0, i22 | 0) | 0;
    i67 = _i64Add(i73 | 0, i65 | 0, i67 | 0, tempRet0 | 0) | 0;
    i65 = tempRet0;
    if (!((i65 | 0) > 0 | (i65 | 0) == 0 & i67 >>> 0 > 0)) {
     i25 = 128;
     break L27;
    }
    if ((i66 | 0) == 0 & (i60 | 0) == 0) {
     if ((i69 | 0) >= 0) {
      i25 = 128;
      break L27;
     }
    } else {
     if ((i60 | 0) >= 0) {
      i25 = 128;
      break L27;
     }
     do {
      if ((i69 | 0) <= 0) {
       if ((i69 | 0) < 0) {
        HEAP32[i49 >> 2] = -1;
        i73 = _i64Subtract(0, 0, i69 | 0, i68 | 0) | 0;
        i61 = i25;
        HEAP32[i61 >> 2] = i73;
        HEAP32[i61 + 4 >> 2] = tempRet0;
        i61 = -1;
        break;
       } else {
        HEAP32[i49 >> 2] = 0;
        i61 = i25;
        HEAP32[i61 >> 2] = 0;
        HEAP32[i61 + 4 >> 2] = 0;
        i61 = 0;
        break;
       }
      } else {
       HEAP32[i49 >> 2] = 1;
       i61 = i25;
       HEAP32[i61 >> 2] = i69;
       HEAP32[i61 + 4 >> 2] = i68;
       i61 = 1;
      }
     } while (0);
     if (!((i60 | 0) > 0 | (i60 | 0) == 0 & i66 >>> 0 > 0)) {
      HEAP32[i49 >> 2] = 0 - i61;
      i66 = _i64Subtract(0, 0, i66 | 0, i60 | 0) | 0;
      i60 = tempRet0;
     }
     i73 = i55;
     HEAP32[i73 >> 2] = i66;
     HEAP32[i73 + 4 >> 2] = i60;
     do {
      if ((i59 | 0) <= 0) {
       if ((i59 | 0) < 0) {
        HEAP32[i42 >> 2] = -1;
        i73 = _i64Subtract(0, 0, i59 | 0, i58 | 0) | 0;
        i58 = i26;
        HEAP32[i58 >> 2] = i73;
        HEAP32[i58 + 4 >> 2] = tempRet0;
        i58 = -1;
        break;
       } else {
        HEAP32[i42 >> 2] = 0;
        i58 = i26;
        HEAP32[i58 >> 2] = 0;
        HEAP32[i58 + 4 >> 2] = 0;
        i58 = 0;
        break;
       }
      } else {
       HEAP32[i42 >> 2] = 1;
       i73 = i26;
       HEAP32[i73 >> 2] = i59;
       HEAP32[i73 + 4 >> 2] = i58;
       i58 = 1;
      }
     } while (0);
     do {
      if (!((i56 | 0) > 0 | (i56 | 0) == 0 & i57 >>> 0 > 0)) {
       if ((i56 | 0) < 0) {
        HEAP32[i42 >> 2] = 0 - i58;
        i72 = _i64Subtract(0, 0, i57 | 0, i56 | 0) | 0;
        i73 = i43;
        HEAP32[i73 >> 2] = i72;
        HEAP32[i73 + 4 >> 2] = tempRet0;
        break;
       } else {
        i73 = i43;
        HEAP32[i73 >> 2] = 0;
        HEAP32[i73 + 4 >> 2] = 0;
        break;
       }
      } else {
       i73 = i43;
       HEAP32[i73 >> 2] = i57;
       HEAP32[i73 + 4 >> 2] = i56;
      }
     } while (0);
     if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i25, i26) | 0) <= 0) {
      i25 = 128;
      break L27;
     }
    }
    HEAP32[i8 >> 2] = i63;
    i60 = HEAP32[i64 >> 2] | 0;
    i62 = HEAP32[i60 + 88 >> 2] | 0;
    i61 = HEAP32[i60 + 92 >> 2] | 0;
    i60 = HEAP32[i60 + 96 >> 2] | 0;
    i56 = i65;
    i57 = i67;
   }
   i73 = i62 - i64 | 0;
   i71 = i61 - i66 | 0;
   i57 = i60 - i65 | 0;
   i73 = ___muldi3(i73 | 0, ((i73 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
   i72 = tempRet0;
   i71 = ___muldi3(i71 | 0, ((i71 | 0) < 0) << 31 >> 31 | 0, i21 | 0, i20 | 0) | 0;
   i72 = _i64Add(i71 | 0, tempRet0 | 0, i73 | 0, i72 | 0) | 0;
   i73 = tempRet0;
   i57 = ___muldi3(i57 | 0, ((i57 | 0) < 0) << 31 >> 31 | 0, i18 | 0, i22 | 0) | 0;
   i57 = _i64Add(i72 | 0, i73 | 0, i57 | 0, tempRet0 | 0) | 0;
   HEAP32[i10 >> 2] = (i63 | 0) == (i30 | 0) ? 0 : i29;
   i47 = i65;
   i46 = i66;
   i44 = i64;
   i56 = tempRet0;
  }
  if ((i25 | 0) == 128) {
   STACKTOP = i9;
   return;
  }
 }
 if ((i40 | 0) >= 0) {
  STACKTOP = i9;
  return;
 }
 i24 = i24 + 100 | 0;
 i27 = _i64Subtract(0, 0, i31 | 0, i32 | 0) | 0;
 i29 = tempRet0;
 i28 = i3 + 16 | 0;
 i42 = i3 + 8 | 0;
 i43 = i4 + 16 | 0;
 i30 = i4 + 8 | 0;
 i25 = i5 + 16 | 0;
 i26 = i5 + 8 | 0;
 i31 = i6 + 16 | 0;
 i32 = i6 + 8 | 0;
 while (1) {
  i44 = (Math_imul(i38 - i34 | 0, i12) | 0) + (Math_imul(i37 - i33 | 0, i13) | 0) + (Math_imul(i39 - i35 | 0, i11) | 0) | 0;
  i45 = ((i44 | 0) < 0) << 31 >> 31;
  L114 : do {
   if ((i36 | 0) == 0) {
    i36 = i44;
   } else {
    i46 = i44;
    while (1) {
     if ((HEAP32[i36 + 12 >> 2] | 0) == (i2 | 0)) {
      i36 = i46;
      break L114;
     }
     i50 = HEAP32[(HEAP32[i36 + 4 >> 2] | 0) + 8 >> 2] | 0;
     if ((HEAP32[i50 + 20 >> 2] | 0) <= (HEAP32[i24 >> 2] | 0)) {
      i36 = i46;
      break L114;
     }
     i49 = HEAP32[i50 + 12 >> 2] | 0;
     i47 = HEAP32[i49 + 88 >> 2] | 0;
     i53 = i47 - i39 | 0;
     i48 = HEAP32[i49 + 92 >> 2] | 0;
     i73 = i48 - i38 | 0;
     i49 = HEAP32[i49 + 96 >> 2] | 0;
     i54 = i49 - i37 | 0;
     i51 = ___muldi3(i53 | 0, ((i53 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
     i72 = tempRet0;
     i52 = ___muldi3(i73 | 0, ((i73 | 0) < 0) << 31 >> 31 | 0, i21 | 0, i20 | 0) | 0;
     i72 = _i64Add(i52 | 0, tempRet0 | 0, i51 | 0, i72 | 0) | 0;
     i51 = tempRet0;
     i52 = ___muldi3(i54 | 0, ((i54 | 0) < 0) << 31 >> 31 | 0, i18 | 0, i22 | 0) | 0;
     i52 = _i64Add(i72 | 0, i51 | 0, i52 | 0, tempRet0 | 0) | 0;
     i51 = tempRet0;
     i54 = (Math_imul(i73, i12) | 0) + (Math_imul(i53, i11) | 0) + (Math_imul(i54, i13) | 0) | 0;
     i53 = ((i54 | 0) < 0) << 31 >> 31;
     if ((i52 | 0) == 0 & (i51 | 0) == 0) {
      if ((i54 | 0) <= 0) {
       i36 = i46;
       break L114;
      }
     } else {
      if ((i51 | 0) >= 0) {
       i36 = i46;
       break L114;
      }
      do {
       if ((i54 | 0) <= 0) {
        if ((i54 | 0) < 0) {
         HEAP32[i25 >> 2] = -1;
         i73 = _i64Subtract(0, 0, i54 | 0, i53 | 0) | 0;
         i53 = i5;
         HEAP32[i53 >> 2] = i73;
         HEAP32[i53 + 4 >> 2] = tempRet0;
         i53 = -1;
         break;
        } else {
         HEAP32[i25 >> 2] = 0;
         i53 = i5;
         HEAP32[i53 >> 2] = 0;
         HEAP32[i53 + 4 >> 2] = 0;
         i53 = 0;
         break;
        }
       } else {
        HEAP32[i25 >> 2] = 1;
        i73 = i5;
        HEAP32[i73 >> 2] = i54;
        HEAP32[i73 + 4 >> 2] = i53;
        i53 = 1;
       }
      } while (0);
      if (!((i51 | 0) > 0 | (i51 | 0) == 0 & i52 >>> 0 > 0)) {
       HEAP32[i25 >> 2] = 0 - i53;
       i52 = _i64Subtract(0, 0, i52 | 0, i51 | 0) | 0;
       i51 = tempRet0;
      }
      i73 = i26;
      HEAP32[i73 >> 2] = i52;
      HEAP32[i73 + 4 >> 2] = i51;
      do {
       if ((i46 | 0) <= 0) {
        if ((i46 | 0) < 0) {
         HEAP32[i31 >> 2] = -1;
         i73 = _i64Subtract(0, 0, i44 | 0, i45 | 0) | 0;
         i51 = i6;
         HEAP32[i51 >> 2] = i73;
         HEAP32[i51 + 4 >> 2] = tempRet0;
         i51 = -1;
         break;
        } else {
         HEAP32[i31 >> 2] = 0;
         i51 = i6;
         HEAP32[i51 >> 2] = 0;
         HEAP32[i51 + 4 >> 2] = 0;
         i51 = 0;
         break;
        }
       } else {
        HEAP32[i31 >> 2] = 1;
        i51 = i6;
        HEAP32[i51 >> 2] = i44;
        HEAP32[i51 + 4 >> 2] = i45;
        i51 = 1;
       }
      } while (0);
      do {
       if (!((i40 | 0) > 0 | (i40 | 0) == 0 & i41 >>> 0 > 0)) {
        if ((i40 | 0) < 0) {
         HEAP32[i31 >> 2] = 0 - i51;
         i72 = _i64Subtract(0, 0, i41 | 0, i40 | 0) | 0;
         i73 = i32;
         HEAP32[i73 >> 2] = i72;
         HEAP32[i73 + 4 >> 2] = tempRet0;
         break;
        } else {
         i73 = i32;
         HEAP32[i73 >> 2] = 0;
         HEAP32[i73 + 4 >> 2] = 0;
         break;
        }
       } else {
        i73 = i32;
        HEAP32[i73 >> 2] = i41;
        HEAP32[i73 + 4 >> 2] = i40;
       }
      } while (0);
      if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i5, i6) | 0) >= 1) {
       i36 = i46;
       break L114;
      }
     }
     i37 = i47 - i35 | 0;
     i39 = i48 - i34 | 0;
     i38 = i49 - i33 | 0;
     i40 = ___muldi3(i37 | 0, ((i37 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
     i73 = tempRet0;
     i41 = ___muldi3(i39 | 0, ((i39 | 0) < 0) << 31 >> 31 | 0, i21 | 0, i20 | 0) | 0;
     i73 = _i64Add(i41 | 0, tempRet0 | 0, i40 | 0, i73 | 0) | 0;
     i40 = tempRet0;
     i41 = ___muldi3(i38 | 0, ((i38 | 0) < 0) << 31 >> 31 | 0, i18 | 0, i22 | 0) | 0;
     i41 = _i64Add(i73 | 0, i40 | 0, i41 | 0, tempRet0 | 0) | 0;
     i40 = tempRet0;
     i36 = (i36 | 0) == (i7 | 0) ? 0 : i50;
     HEAP32[i8 >> 2] = i36;
     i44 = (Math_imul(i39, i12) | 0) + (Math_imul(i38, i13) | 0) + (Math_imul(i37, i11) | 0) | 0;
     i45 = ((i44 | 0) < 0) << 31 >> 31;
     if ((i36 | 0) == 0) {
      i37 = i49;
      i38 = i48;
      i39 = i47;
      i36 = i44;
      break;
     } else {
      i39 = i47;
      i38 = i48;
      i37 = i49;
      i46 = i44;
     }
    }
   }
  } while (0);
  i46 = HEAP32[i10 >> 2] | 0;
  if ((i46 | 0) == 0) {
   i25 = 128;
   break;
  }
  if ((HEAP32[i46 + 12 >> 2] | 0) == (i1 | 0)) {
   i25 = 128;
   break;
  }
  i47 = HEAP32[(HEAP32[i46 + 8 >> 2] | 0) + 4 >> 2] | 0;
  if ((HEAP32[i47 + 20 >> 2] | 0) <= (HEAP32[i24 >> 2] | 0)) {
   i25 = 128;
   break;
  }
  i46 = i47 + 12 | 0;
  i52 = HEAP32[i46 >> 2] | 0;
  i48 = HEAP32[i52 + 88 >> 2] | 0;
  i49 = i48 - i35 | 0;
  i35 = HEAP32[i52 + 92 >> 2] | 0;
  i51 = i35 - i34 | 0;
  i34 = HEAP32[i52 + 96 >> 2] | 0;
  i52 = i34 - i33 | 0;
  i53 = ((i49 | 0) < 0) << 31 >> 31;
  i73 = ___muldi3(i49 | 0, i53 | 0, i14 | 0, i15 | 0) | 0;
  i71 = tempRet0;
  i50 = ((i51 | 0) < 0) << 31 >> 31;
  i33 = ___muldi3(i51 | 0, i50 | 0, i16 | 0, i17 | 0) | 0;
  i71 = _i64Add(i33 | 0, tempRet0 | 0, i73 | 0, i71 | 0) | 0;
  i73 = tempRet0;
  i33 = ((i52 | 0) < 0) << 31 >> 31;
  i72 = ___muldi3(i52 | 0, i33 | 0, i27 | 0, i29 | 0) | 0;
  if (!((i71 | 0) == (i72 | 0) & (i73 | 0) == (tempRet0 | 0))) {
   i25 = 128;
   break;
  }
  i72 = ___muldi3(i49 | 0, i53 | 0, i19 | 0, i23 | 0) | 0;
  i73 = tempRet0;
  i50 = ___muldi3(i51 | 0, i50 | 0, i21 | 0, i20 | 0) | 0;
  i73 = _i64Add(i50 | 0, tempRet0 | 0, i72 | 0, i73 | 0) | 0;
  i72 = tempRet0;
  i50 = ___muldi3(i52 | 0, i33 | 0, i18 | 0, i22 | 0) | 0;
  i50 = _i64Add(i73 | 0, i72 | 0, i50 | 0, tempRet0 | 0) | 0;
  i33 = tempRet0;
  i51 = (Math_imul(i51, i12) | 0) + (Math_imul(i49, i11) | 0) + (Math_imul(i52, i13) | 0) | 0;
  i52 = ((i51 | 0) < 0) << 31 >> 31;
  i48 = i39 - i48 | 0;
  i72 = i38 - i35 | 0;
  i49 = i37 - i34 | 0;
  i48 = ___muldi3(i48 | 0, ((i48 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
  i73 = tempRet0;
  i72 = ___muldi3(i72 | 0, ((i72 | 0) < 0) << 31 >> 31 | 0, i21 | 0, i20 | 0) | 0;
  i73 = _i64Add(i72 | 0, tempRet0 | 0, i48 | 0, i73 | 0) | 0;
  i48 = tempRet0;
  i49 = ___muldi3(i49 | 0, ((i49 | 0) < 0) << 31 >> 31 | 0, i18 | 0, i22 | 0) | 0;
  i49 = _i64Add(i73 | 0, i48 | 0, i49 | 0, tempRet0 | 0) | 0;
  i48 = tempRet0;
  if ((i48 | 0) >= 0) {
   i25 = 128;
   break;
  }
  if ((i50 | 0) == 0 & (i33 | 0) == 0) {
   if ((i51 | 0) <= 0) {
    i25 = 128;
    break;
   }
  } else {
   if ((i33 | 0) >= 0) {
    i25 = 128;
    break;
   }
   do {
    if ((i51 | 0) <= 0) {
     if ((i51 | 0) < 0) {
      HEAP32[i28 >> 2] = -1;
      i73 = _i64Subtract(0, 0, i51 | 0, i52 | 0) | 0;
      i34 = i3;
      HEAP32[i34 >> 2] = i73;
      HEAP32[i34 + 4 >> 2] = tempRet0;
      i34 = -1;
      break;
     } else {
      HEAP32[i28 >> 2] = 0;
      i34 = i3;
      HEAP32[i34 >> 2] = 0;
      HEAP32[i34 + 4 >> 2] = 0;
      i34 = 0;
      break;
     }
    } else {
     HEAP32[i28 >> 2] = 1;
     i34 = i3;
     HEAP32[i34 >> 2] = i51;
     HEAP32[i34 + 4 >> 2] = i52;
     i34 = 1;
    }
   } while (0);
   if (!((i33 | 0) > 0 | (i33 | 0) == 0 & i50 >>> 0 > 0)) {
    HEAP32[i28 >> 2] = 0 - i34;
    i50 = _i64Subtract(0, 0, i50 | 0, i33 | 0) | 0;
    i33 = tempRet0;
   }
   i73 = i42;
   HEAP32[i73 >> 2] = i50;
   HEAP32[i73 + 4 >> 2] = i33;
   do {
    if ((i36 | 0) <= 0) {
     if ((i36 | 0) < 0) {
      HEAP32[i43 >> 2] = -1;
      i73 = _i64Subtract(0, 0, i44 | 0, i45 | 0) | 0;
      i33 = i4;
      HEAP32[i33 >> 2] = i73;
      HEAP32[i33 + 4 >> 2] = tempRet0;
      i33 = -1;
      break;
     } else {
      HEAP32[i43 >> 2] = 0;
      i33 = i4;
      HEAP32[i33 >> 2] = 0;
      HEAP32[i33 + 4 >> 2] = 0;
      i33 = 0;
      break;
     }
    } else {
     HEAP32[i43 >> 2] = 1;
     i33 = i4;
     HEAP32[i33 >> 2] = i44;
     HEAP32[i33 + 4 >> 2] = i45;
     i33 = 1;
    }
   } while (0);
   do {
    if (!((i40 | 0) > 0 | (i40 | 0) == 0 & i41 >>> 0 > 0)) {
     if ((i40 | 0) < 0) {
      HEAP32[i43 >> 2] = 0 - i33;
      i72 = _i64Subtract(0, 0, i41 | 0, i40 | 0) | 0;
      i73 = i30;
      HEAP32[i73 >> 2] = i72;
      HEAP32[i73 + 4 >> 2] = tempRet0;
      break;
     } else {
      i73 = i30;
      HEAP32[i73 >> 2] = 0;
      HEAP32[i73 + 4 >> 2] = 0;
      break;
     }
    } else {
     i73 = i30;
     HEAP32[i73 >> 2] = i41;
     HEAP32[i73 + 4 >> 2] = i40;
    }
   } while (0);
   if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i3, i4) | 0) >= 0) {
    i25 = 128;
    break;
   }
  }
  HEAP32[i10 >> 2] = i47;
  i35 = HEAP32[i46 >> 2] | 0;
  i33 = HEAP32[i35 + 96 >> 2] | 0;
  i34 = HEAP32[i35 + 92 >> 2] | 0;
  i35 = HEAP32[i35 + 88 >> 2] | 0;
  i36 = HEAP32[i8 >> 2] | 0;
  i41 = i49;
  i40 = i48;
 }
 if ((i25 | 0) == 128) {
  STACKTOP = i9;
  return;
 }
}
function __Z8dBoxBox2RK9btVector3PKfS1_S1_S3_S1_RS_PfPiiP12dContactGeomiRN36btDiscreteCollisionDetectorInterface6ResultE(i45, i26, i29, i33, i25, i28, i3, i21, i1, i17, i4, i5, i2) {
 i45 = i45 | 0;
 i26 = i26 | 0;
 i29 = i29 | 0;
 i33 = i33 | 0;
 i25 = i25 | 0;
 i28 = i28 | 0;
 i3 = i3 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i46 = 0, i47 = 0, d48 = 0.0, d49 = 0.0, i50 = 0, i51 = 0, d52 = 0.0, i53 = 0, i54 = 0, i55 = 0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0, d73 = 0.0, d74 = 0.0, d75 = 0.0, d76 = 0.0, d77 = 0.0, d78 = 0.0, d79 = 0.0, d80 = 0.0, d81 = 0.0, d82 = 0.0, d83 = 0.0, d84 = 0.0, d85 = 0.0, d86 = 0.0, d87 = 0.0, d88 = 0.0, d89 = 0.0, d90 = 0.0, d91 = 0.0, d92 = 0.0, d93 = 0.0, d94 = 0.0, d95 = 0.0, i96 = 0, i97 = 0, d98 = 0.0, d99 = 0.0, d100 = 0.0, d101 = 0.0, i102 = 0, d103 = 0.0, d104 = 0.0, i105 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i20 = i4 + 496 | 0;
 i50 = i4 + 484 | 0;
 i30 = i4 + 472 | 0;
 i22 = i4 + 456 | 0;
 i24 = i4 + 440 | 0;
 i23 = i4 + 424 | 0;
 i40 = i4 + 408 | 0;
 i18 = i4 + 392 | 0;
 i27 = i4 + 360 | 0;
 i19 = i4 + 352 | 0;
 i12 = i4 + 288 | 0;
 i6 = i4 + 192 | 0;
 i5 = i4 + 160 | 0;
 i14 = i4 + 144 | 0;
 i13 = i4 + 128 | 0;
 i16 = i4 + 112 | 0;
 i15 = i4 + 96 | 0;
 i8 = i4 + 64 | 0;
 i7 = i4 + 48 | 0;
 i10 = i4 + 32 | 0;
 i9 = i4 + 16 | 0;
 i11 = i4;
 d92 = +HEAPF32[i33 >> 2] - +HEAPF32[i45 >> 2];
 d91 = +HEAPF32[i33 + 4 >> 2] - +HEAPF32[i45 + 4 >> 2];
 d90 = +HEAPF32[i33 + 8 >> 2] - +HEAPF32[i45 + 8 >> 2];
 d67 = +HEAPF32[i26 >> 2];
 i53 = i26 + 16 | 0;
 d71 = +HEAPF32[i53 >> 2];
 i51 = i26 + 32 | 0;
 d58 = +HEAPF32[i51 >> 2];
 d61 = d92 * d67 + d91 * d71 + d90 * d58;
 i47 = i26 + 4 | 0;
 d77 = +HEAPF32[i47 >> 2];
 i46 = i26 + 20 | 0;
 d57 = +HEAPF32[i46 >> 2];
 i44 = i26 + 36 | 0;
 d60 = +HEAPF32[i44 >> 2];
 d62 = d92 * d77 + d91 * d57 + d90 * d60;
 i43 = i26 + 8 | 0;
 i42 = i26 + 24 | 0;
 d86 = +HEAPF32[i42 >> 2];
 i41 = i26 + 40 | 0;
 d72 = +HEAPF32[i41 >> 2];
 d74 = d92 * +HEAPF32[i43 >> 2] + d91 * d86 + d90 * d72;
 HEAPF32[i50 >> 2] = +HEAPF32[i29 >> 2] * .5;
 i105 = i50 + 4 | 0;
 HEAPF32[i105 >> 2] = +HEAPF32[i29 + 4 >> 2] * .5;
 i102 = i50 + 8 | 0;
 HEAPF32[i102 >> 2] = +HEAPF32[i29 + 8 >> 2] * .5;
 HEAPF32[i30 >> 2] = +HEAPF32[i28 >> 2] * .5;
 i34 = i30 + 4 | 0;
 HEAPF32[i34 >> 2] = +HEAPF32[i28 + 4 >> 2] * .5;
 d49 = +HEAPF32[i28 + 8 >> 2] * .5;
 i28 = i30 + 8 | 0;
 HEAPF32[i28 >> 2] = d49;
 d83 = +HEAPF32[i25 >> 2];
 i39 = i25 + 16 | 0;
 d87 = +HEAPF32[i39 >> 2];
 i38 = i25 + 32 | 0;
 d82 = +HEAPF32[i38 >> 2];
 d69 = d67 * d83 + d71 * d87 + d58 * d82;
 i37 = i25 + 4 | 0;
 d75 = +HEAPF32[i37 >> 2];
 i36 = i25 + 20 | 0;
 d81 = +HEAPF32[i36 >> 2];
 i35 = i25 + 36 | 0;
 d76 = +HEAPF32[i35 >> 2];
 d65 = d67 * d75 + d71 * d81 + d58 * d76;
 i32 = i25 + 8 | 0;
 d93 = +HEAPF32[i32 >> 2];
 i31 = i25 + 24 | 0;
 d95 = +HEAPF32[i31 >> 2];
 i29 = i25 + 40 | 0;
 d94 = +HEAPF32[i29 >> 2];
 d58 = d67 * d93 + d71 * d95 + d58 * d94;
 d71 = d83 * d77 + d87 * d57 + d82 * d60;
 d67 = d75 * d77 + d81 * d57 + d76 * d60;
 d60 = d93 * d77 + d95 * d57 + d94 * d60;
 d57 = +HEAPF32[i43 >> 2];
 d82 = d83 * d57 + d87 * d86 + d82 * d72;
 d76 = d75 * d57 + d81 * d86 + d76 * d72;
 d72 = d93 * d57 + d95 * d86 + d94 * d72;
 d86 = +Math_abs(+d69);
 d81 = +Math_abs(+d65);
 d75 = +Math_abs(+d58);
 d87 = +Math_abs(+d71);
 d83 = +Math_abs(+d67);
 d77 = +Math_abs(+d60);
 d79 = +Math_abs(+d82);
 d80 = +Math_abs(+d76);
 d85 = +Math_abs(+d72);
 d104 = +Math_abs(+d61);
 d52 = +HEAPF32[i50 >> 2];
 d64 = +HEAPF32[i30 >> 2];
 d63 = +HEAPF32[i34 >> 2];
 d49 = d104 - (d49 * d75 + (d52 + d86 * d64 + d81 * d63));
 if (d49 > 0.0) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 if (d49 > -3.4028234663852886e+38) {
  i54 = 1;
  i96 = d61 < 0.0 | 0;
  i97 = i26;
 } else {
  i54 = 0;
  i96 = 0;
  i97 = 0;
  d49 = -3.4028234663852886e+38;
 }
 d99 = +Math_abs(+d62);
 d48 = +HEAPF32[i105 >> 2];
 d68 = +HEAPF32[i28 >> 2];
 d99 = d99 - (d48 + d87 * d64 + d83 * d63 + d77 * d68);
 if (d99 > 0.0) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 if (d99 > d49) {
  i54 = 2;
  i96 = d62 < 0.0 | 0;
  i97 = i47;
 } else {
  d99 = d49;
 }
 d98 = +Math_abs(+d74);
 d49 = +HEAPF32[i102 >> 2];
 d98 = d98 - (d49 + d79 * d64 + d80 * d63 + d85 * d68);
 if (d98 > 0.0) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 if (d98 > d99) {
  i54 = 3;
  i96 = d74 < 0.0 | 0;
  i97 = i43;
 } else {
  d98 = d99;
 }
 d100 = d92 * +HEAPF32[i25 >> 2] + d91 * +HEAPF32[i39 >> 2] + d90 * +HEAPF32[i38 >> 2];
 d99 = +Math_abs(+d100) - (d64 + (d86 * d52 + d87 * d48 + d79 * d49));
 if (d99 > 0.0) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 if (d99 > d98) {
  i54 = 4;
  i96 = d100 < 0.0 | 0;
  i97 = i25;
 } else {
  d99 = d98;
 }
 d100 = d92 * +HEAPF32[i37 >> 2] + d91 * +HEAPF32[i36 >> 2] + d90 * +HEAPF32[i35 >> 2];
 d98 = +Math_abs(+d100) - (d63 + (d81 * d52 + d83 * d48 + d80 * d49));
 if (d98 > 0.0) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 if (d98 > d99) {
  i54 = 5;
  i96 = d100 < 0.0 | 0;
  i97 = i37;
 } else {
  d98 = d99;
 }
 d90 = d92 * d93 + d91 * d95 + d90 * d94;
 d91 = +Math_abs(+d90) - (d68 + (d75 * d52 + d77 * d48 + d85 * d49));
 if (d91 > 0.0) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 if (d91 > d98) {
  i54 = 6;
  i96 = d90 < 0.0 | 0;
  i97 = i32;
 } else {
  d91 = d98;
 }
 d86 = d86 + 9999999747378752.0e-21;
 d81 = d81 + 9999999747378752.0e-21;
 d75 = d75 + 9999999747378752.0e-21;
 d87 = d87 + 9999999747378752.0e-21;
 d83 = d83 + 9999999747378752.0e-21;
 d77 = d77 + 9999999747378752.0e-21;
 d79 = d79 + 9999999747378752.0e-21;
 d80 = d80 + 9999999747378752.0e-21;
 d85 = d85 + 9999999747378752.0e-21;
 d92 = d74 * d71 - d62 * d82;
 d93 = +Math_abs(+d92) - (d79 * d48 + d87 * d49 + d75 * d63 + d81 * d68);
 if (d93 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d98 = -d82;
 d94 = d82 * d82 + 0.0;
 d90 = d71 * d71;
 d95 = +Math_sqrt(+(d90 + d94));
 if (d95 > 1.1920928955078125e-7 ? (d88 = d93 / d95, d88 * 1.0499999523162842 > d91) : 0) {
  d93 = d71 / d95;
  d98 = d98 / d95;
  d99 = 0.0 / d95;
  i54 = 7;
  i96 = d92 < 0.0 | 0;
  i97 = 0;
  d91 = d88;
 } else {
  d93 = 0.0;
  d98 = 0.0;
  d99 = 0.0;
 }
 d95 = d74 * d67 - d62 * d76;
 d103 = +Math_abs(+d95) - (d80 * d48 + d83 * d49 + d75 * d64 + d86 * d68);
 if (d103 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d101 = -d76;
 d92 = d76 * d76 + 0.0;
 d88 = d67 * d67;
 d100 = +Math_sqrt(+(d88 + d92));
 if (d100 > 1.1920928955078125e-7 ? (d89 = d103 / d100, d89 * 1.0499999523162842 > d91) : 0) {
  d93 = d67 / d100;
  d98 = d101 / d100;
  d99 = 0.0 / d100;
  i54 = 8;
  i96 = d95 < 0.0 | 0;
  i97 = 0;
  d100 = d89;
 } else {
  d100 = d91;
 }
 d101 = d74 * d60 - d62 * d72;
 d95 = +Math_abs(+d101) - (d85 * d48 + d77 * d49 + d81 * d64 + d86 * d63);
 if (d95 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d104 = -d72;
 d91 = d72 * d72 + 0.0;
 d89 = d60 * d60;
 d103 = +Math_sqrt(+(d89 + d91));
 if (d103 > 1.1920928955078125e-7 ? (d84 = d95 / d103, d84 * 1.0499999523162842 > d100) : 0) {
  d95 = d60 / d103;
  d98 = d104 / d103;
  d99 = 0.0 / d103;
  i54 = 9;
  i96 = d101 < 0.0 | 0;
  i97 = 0;
 } else {
  d95 = d93;
  d84 = d100;
 }
 d100 = d61 * d82 - d74 * d69;
 d101 = +Math_abs(+d100) - (d79 * d52 + d86 * d49 + d77 * d63 + d83 * d68);
 if (d101 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d103 = -d69;
 d93 = d69 * d69;
 d94 = +Math_sqrt(+(d93 + d94));
 if (d94 > 1.1920928955078125e-7 ? (d78 = d101 / d94, d78 * 1.0499999523162842 > d84) : 0) {
  d95 = d103 / d94;
  d98 = 0.0 / d94;
  d99 = d82 / d94;
  i54 = 10;
  i96 = d100 < 0.0 | 0;
  i97 = 0;
 } else {
  d78 = d84;
 }
 d84 = d61 * d76 - d74 * d65;
 d100 = +Math_abs(+d84) - (d80 * d52 + d81 * d49 + d77 * d64 + d87 * d68);
 if (d100 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d94 = -d65;
 d82 = d65 * d65;
 d92 = +Math_sqrt(+(d82 + d92));
 if (d92 > 1.1920928955078125e-7 ? (d73 = d100 / d92, d73 * 1.0499999523162842 > d78) : 0) {
  d95 = d94 / d92;
  d98 = 0.0 / d92;
  d99 = d76 / d92;
  i54 = 11;
  i96 = d84 < 0.0 | 0;
  i97 = 0;
 } else {
  d73 = d78;
 }
 d76 = d61 * d72 - d74 * d58;
 d92 = +Math_abs(+d76) - (d85 * d52 + d75 * d49 + d83 * d64 + d87 * d63);
 if (d92 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d84 = -d58;
 d74 = d58 * d58;
 d78 = +Math_sqrt(+(d74 + d91));
 if (d78 > 1.1920928955078125e-7 ? (d70 = d92 / d78, d70 * 1.0499999523162842 > d73) : 0) {
  d95 = d84 / d78;
  d98 = 0.0 / d78;
  d99 = d72 / d78;
  i54 = 12;
  i96 = d76 < 0.0 | 0;
  i97 = 0;
 } else {
  d70 = d73;
 }
 d72 = d62 * d69 - d61 * d71;
 d73 = +Math_abs(+d72) - (d87 * d52 + d86 * d48 + d85 * d63 + d80 * d68);
 if (d73 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d71 = -d71;
 d76 = +Math_sqrt(+(d93 + d90 + 0.0));
 if (d76 > 1.1920928955078125e-7 ? (d66 = d73 / d76, d66 * 1.0499999523162842 > d70) : 0) {
  d95 = 0.0 / d76;
  d98 = d69 / d76;
  d99 = d71 / d76;
  i54 = 13;
  i96 = d72 < 0.0 | 0;
  i97 = 0;
 } else {
  d66 = d70;
 }
 d69 = d62 * d65 - d61 * d67;
 d68 = +Math_abs(+d69) - (d83 * d52 + d81 * d48 + d85 * d64 + d79 * d68);
 if (d68 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d67 = -d67;
 d70 = +Math_sqrt(+(d82 + d88 + 0.0));
 if (d70 > 1.1920928955078125e-7 ? (d59 = d68 / d70, d59 * 1.0499999523162842 > d66) : 0) {
  d95 = 0.0 / d70;
  d98 = d65 / d70;
  d99 = d67 / d70;
  i54 = 14;
  i96 = d69 < 0.0 | 0;
  i97 = 0;
 } else {
  d59 = d66;
 }
 d61 = d62 * d58 - d61 * d60;
 d62 = +Math_abs(+d61) - (d77 * d52 + d75 * d48 + d80 * d64 + d79 * d63);
 if (d62 > 1.1920928955078125e-7) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d60 = -d60;
 d63 = +Math_sqrt(+(d74 + d89 + 0.0));
 if (d63 > 1.1920928955078125e-7 ? (d56 = d62 / d63, d56 * 1.0499999523162842 > d59) : 0) {
  d99 = d60 / d63;
  d98 = d58 / d63;
  d95 = 0.0 / d63;
  i54 = 15;
  i96 = d61 < 0.0 | 0;
  i55 = 58;
 } else {
  if ((i54 | 0) == 0) {
   i105 = 0;
   STACKTOP = i4;
   return i105 | 0;
  }
  if ((i97 | 0) == 0) {
   d56 = d59;
   i55 = 58;
  } else {
   d57 = +HEAPF32[i97 >> 2];
   HEAPF32[i3 >> 2] = d57;
   d58 = +HEAPF32[i97 + 16 >> 2];
   HEAPF32[i3 + 4 >> 2] = d58;
   d60 = +HEAPF32[i97 + 32 >> 2];
   HEAPF32[i3 + 8 >> 2] = d60;
   d56 = d59;
  }
 }
 if ((i55 | 0) == 58) {
  d57 = d99 * +HEAPF32[i26 >> 2] + d98 * +HEAPF32[i47 >> 2] + d95 * d57;
  HEAPF32[i3 >> 2] = d57;
  d58 = d99 * +HEAPF32[i53 >> 2] + d98 * +HEAPF32[i46 >> 2] + d95 * +HEAPF32[i42 >> 2];
  HEAPF32[i3 + 4 >> 2] = d58;
  d60 = d99 * +HEAPF32[i51 >> 2] + d98 * +HEAPF32[i44 >> 2] + d95 * +HEAPF32[i41 >> 2];
  HEAPF32[i3 + 8 >> 2] = d60;
 }
 if ((i96 | 0) != 0) {
  HEAPF32[i3 >> 2] = -d57;
  HEAPF32[i3 + 4 >> 2] = -d58;
  HEAPF32[i3 + 8 >> 2] = -d60;
 }
 HEAPF32[i21 >> 2] = -d56;
 if ((i54 | 0) > 6) {
  HEAP32[i22 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
  d57 = +HEAPF32[i3 >> 2];
  i6 = i3 + 4 | 0;
  d58 = +HEAPF32[i6 >> 2];
  i5 = i3 + 8 | 0;
  d59 = +HEAPF32[i5 >> 2];
  d56 = +HEAPF32[i26 >> 2];
  d61 = +HEAPF32[i53 >> 2];
  d62 = +HEAPF32[i51 >> 2];
  d52 = (d57 * d56 + d58 * d61 + d59 * d62 > 0.0 ? 1.0 : -1.0) * d52;
  i8 = i22 + 4 | 0;
  i7 = i22 + 8 | 0;
  d60 = +HEAPF32[i47 >> 2];
  d63 = +HEAPF32[i46 >> 2];
  d64 = +HEAPF32[i44 >> 2];
  d48 = (d57 * d60 + d58 * d63 + d59 * d64 > 0.0 ? 1.0 : -1.0) * d48;
  d61 = +HEAPF32[i8 >> 2] + d52 * d61 + d48 * d63;
  d62 = +HEAPF32[i7 >> 2] + d52 * d62 + d48 * d64;
  d63 = +HEAPF32[i43 >> 2];
  d64 = +HEAPF32[i42 >> 2];
  d65 = +HEAPF32[i41 >> 2];
  d49 = (d57 * d63 + d58 * d64 + d59 * d65 > 0.0 ? 1.0 : -1.0) * d49;
  HEAPF32[i22 >> 2] = +HEAPF32[i22 >> 2] + d52 * d56 + d48 * d60 + d49 * d63;
  HEAPF32[i8 >> 2] = d61 + d49 * d64;
  HEAPF32[i7 >> 2] = d62 + d49 * d65;
  HEAP32[i24 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
  HEAP32[i24 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
  HEAP32[i24 + 8 >> 2] = HEAP32[i33 + 8 >> 2];
  d48 = +HEAPF32[i3 >> 2];
  d56 = +HEAPF32[i6 >> 2];
  d52 = +HEAPF32[i5 >> 2];
  d49 = +HEAPF32[i25 >> 2];
  d59 = +HEAPF32[i39 >> 2];
  d60 = +HEAPF32[i38 >> 2];
  d57 = (d48 * d49 + d56 * d59 + d52 * d60 > 0.0 ? -1.0 : 1.0) * +HEAPF32[i30 >> 2];
  i9 = i24 + 4 | 0;
  i10 = i24 + 8 | 0;
  d58 = +HEAPF32[i37 >> 2];
  d62 = +HEAPF32[i36 >> 2];
  d63 = +HEAPF32[i35 >> 2];
  d61 = (d48 * d58 + d56 * d62 + d52 * d63 > 0.0 ? -1.0 : 1.0) * +HEAPF32[i34 >> 2];
  d59 = +HEAPF32[i9 >> 2] + d57 * d59 + d61 * d62;
  d60 = +HEAPF32[i10 >> 2] + d57 * d60 + d61 * d63;
  d62 = +HEAPF32[i32 >> 2];
  d64 = +HEAPF32[i31 >> 2];
  d63 = +HEAPF32[i29 >> 2];
  d56 = (d48 * d62 + d56 * d64 + d52 * d63 > 0.0 ? -1.0 : 1.0) * +HEAPF32[i28 >> 2];
  d104 = +HEAPF32[i24 >> 2] + d57 * d49 + d61 * d58 + d56 * d62;
  HEAPF32[i24 >> 2] = d104;
  d48 = d59 + d56 * d64;
  HEAPF32[i9 >> 2] = d48;
  d56 = d60 + d56 * d63;
  HEAPF32[i10 >> 2] = d56;
  i105 = i54 + -7 | 0;
  i102 = (i105 | 0) / 3 | 0;
  d49 = +HEAPF32[i26 + (i102 << 2) >> 2];
  d52 = +HEAPF32[i26 + (i102 + 4 << 2) >> 2];
  d59 = +HEAPF32[i26 + (i102 + 8 << 2) >> 2];
  i105 = (i105 | 0) % 3 | 0;
  d57 = +HEAPF32[i25 + (i105 << 2) >> 2];
  d58 = +HEAPF32[i25 + (i105 + 4 << 2) >> 2];
  d62 = +HEAPF32[i25 + (i105 + 8 << 2) >> 2];
  d61 = +HEAPF32[i22 >> 2];
  d104 = d104 - d61;
  d60 = +HEAPF32[i8 >> 2];
  d64 = d48 - d60;
  d63 = +HEAPF32[i7 >> 2];
  d67 = d56 - d63;
  d66 = d49 * d57 + d52 * d58 + d59 * d62;
  d65 = d104 * d49 + d64 * d52 + d67 * d59;
  d67 = d104 * d57 + d64 * d58 + d67 * d62;
  d64 = 1.0 - d66 * d66;
  if (!(d64 <= 9999999747378752.0e-20)) {
   d104 = 1.0 / d64;
   d64 = (d65 - d67 * d66) * d104;
   d65 = (d65 * d66 - d67) * d104;
  } else {
   d64 = 0.0;
   d65 = 0.0;
  }
  HEAPF32[i22 >> 2] = d61 + d64 * d49;
  HEAPF32[i8 >> 2] = d60 + d64 * d52;
  HEAPF32[i7 >> 2] = d63 + d64 * d59;
  HEAPF32[i24 >> 2] = +HEAPF32[i24 >> 2] + d65 * d57;
  HEAPF32[i9 >> 2] = d48 + d65 * d58;
  HEAPF32[i10 >> 2] = d56 + d65 * d62;
  i105 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  d103 = -+HEAPF32[i6 >> 2];
  d104 = -+HEAPF32[i5 >> 2];
  HEAPF32[i23 >> 2] = -+HEAPF32[i3 >> 2];
  HEAPF32[i23 + 4 >> 2] = d103;
  HEAPF32[i23 + 8 >> 2] = d104;
  HEAPF32[i23 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[i105 & 7](i2, i23, i24, -+HEAPF32[i21 >> 2]);
  HEAP32[i1 >> 2] = i54;
  i105 = 1;
  STACKTOP = i4;
  return i105 | 0;
 }
 i22 = (i54 | 0) < 4;
 d52 = +HEAPF32[i3 >> 2];
 if (i22) {
  d48 = +HEAPF32[i3 + 4 >> 2];
  d49 = +HEAPF32[i3 + 8 >> 2];
  i29 = i26;
  i23 = i50;
  i21 = i45;
 } else {
  d52 = -d52;
  d48 = -+HEAPF32[i3 + 4 >> 2];
  d49 = -+HEAPF32[i3 + 8 >> 2];
  i29 = i25;
  i25 = i26;
  i23 = i30;
  i30 = i50;
  i21 = i33;
  i33 = i45;
 }
 d56 = d52 * +HEAPF32[i25 >> 2] + d48 * +HEAPF32[i25 + 16 >> 2] + d49 * +HEAPF32[i25 + 32 >> 2];
 HEAPF32[i40 >> 2] = d56;
 d57 = d52 * +HEAPF32[i25 + 4 >> 2] + d48 * +HEAPF32[i25 + 20 >> 2] + d49 * +HEAPF32[i25 + 36 >> 2];
 HEAPF32[i40 + 4 >> 2] = d57;
 d58 = d52 * +HEAPF32[i25 + 8 >> 2] + d48 * +HEAPF32[i25 + 24 >> 2] + d49 * +HEAPF32[i25 + 40 >> 2];
 HEAPF32[i40 + 8 >> 2] = d58;
 d56 = +Math_abs(+d56);
 d57 = +Math_abs(+d57);
 d58 = +Math_abs(+d58);
 if (d57 > d56) {
  i105 = d57 > d58;
  i26 = i105;
  i35 = 0;
  i24 = i105 ? 1 : 2;
 } else {
  i105 = d56 > d58;
  i26 = i105;
  i35 = i105 & 1;
  i24 = i105 ? 0 : 2;
 }
 i36 = i26 ? 2 : 1;
 d58 = +HEAPF32[i30 + (i24 << 2) >> 2];
 d56 = +HEAPF32[i33 >> 2] - +HEAPF32[i21 >> 2];
 d57 = d58 * +HEAPF32[i25 + (i24 << 2) >> 2];
 if (+HEAPF32[i40 + (i24 << 2) >> 2] < 0.0) {
  d57 = d56 + d57;
  HEAPF32[i18 >> 2] = d57;
  d104 = +HEAPF32[i33 + 4 >> 2] - +HEAPF32[i21 + 4 >> 2] + d58 * +HEAPF32[i25 + ((i24 | 4) << 2) >> 2];
  HEAPF32[i18 + 4 >> 2] = d104;
  d59 = +HEAPF32[i33 + 8 >> 2] - +HEAPF32[i21 + 8 >> 2] + d58 * +HEAPF32[i25 + ((i24 | 8) << 2) >> 2];
  HEAPF32[i18 + 8 >> 2] = d59;
  d58 = d104;
 } else {
  d57 = d56 - d57;
  HEAPF32[i18 >> 2] = d57;
  d104 = +HEAPF32[i33 + 4 >> 2] - +HEAPF32[i21 + 4 >> 2] - d58 * +HEAPF32[i25 + ((i24 | 4) << 2) >> 2];
  HEAPF32[i18 + 4 >> 2] = d104;
  d59 = +HEAPF32[i33 + 8 >> 2] - +HEAPF32[i21 + 8 >> 2] - d58 * +HEAPF32[i25 + ((i24 | 8) << 2) >> 2];
  HEAPF32[i18 + 8 >> 2] = d59;
  d58 = d104;
 }
 i32 = (i22 ? -1 : -4) + i54 | 0;
 if ((i32 | 0) == 1) {
  i37 = 0;
  i38 = 2;
 } else if ((i32 | 0) == 0) {
  i37 = 1;
  i38 = 2;
 } else {
  i37 = 0;
  i38 = 1;
 }
 i28 = i18 + 4 | 0;
 i24 = i18 + 8 | 0;
 d93 = +HEAPF32[i29 + (i37 << 2) >> 2];
 d94 = +HEAPF32[i29 + ((i37 | 4) << 2) >> 2];
 d61 = +HEAPF32[i29 + ((i37 | 8) << 2) >> 2];
 d56 = d57 * d93 + d58 * d94 + d59 * d61;
 d98 = +HEAPF32[i29 + (i38 << 2) >> 2];
 d104 = +HEAPF32[i29 + ((i38 | 4) << 2) >> 2];
 d103 = +HEAPF32[i29 + ((i38 | 8) << 2) >> 2];
 d57 = d57 * d98 + d58 * d104 + d59 * d103;
 i34 = i25 + (i35 << 2) | 0;
 d95 = +HEAPF32[i34 >> 2];
 i31 = i25 + ((i35 | 4) << 2) | 0;
 d99 = +HEAPF32[i31 >> 2];
 i26 = i25 + ((i35 | 8) << 2) | 0;
 d59 = +HEAPF32[i26 >> 2];
 d60 = d93 * d95 + d94 * d99 + d61 * d59;
 i33 = i25 + (i36 << 2) | 0;
 d101 = +HEAPF32[i33 >> 2];
 i29 = i25 + ((i36 | 4) << 2) | 0;
 d100 = +HEAPF32[i29 >> 2];
 i25 = i25 + ((i36 | 8) << 2) | 0;
 d58 = +HEAPF32[i25 >> 2];
 d61 = d93 * d101 + d94 * d100 + d61 * d58;
 d59 = d98 * d95 + d104 * d99 + d103 * d59;
 d58 = d98 * d101 + d104 * d100 + d103 * d58;
 d103 = +HEAPF32[i30 + (i35 << 2) >> 2];
 d100 = d60 * d103;
 d103 = d59 * d103;
 d104 = +HEAPF32[i30 + (i36 << 2) >> 2];
 d101 = d61 * d104;
 d104 = d58 * d104;
 d98 = d56 - d100;
 HEAPF32[i27 >> 2] = d98 - d101;
 d99 = d57 - d103;
 HEAPF32[i27 + 4 >> 2] = d99 - d104;
 HEAPF32[i27 + 8 >> 2] = d98 + d101;
 HEAPF32[i27 + 12 >> 2] = d99 + d104;
 d100 = d56 + d100;
 HEAPF32[i27 + 16 >> 2] = d100 + d101;
 d103 = d57 + d103;
 HEAPF32[i27 + 20 >> 2] = d103 + d104;
 HEAPF32[i27 + 24 >> 2] = d100 - d101;
 HEAPF32[i27 + 28 >> 2] = d103 - d104;
 HEAPF32[i19 >> 2] = +HEAPF32[i23 + (i37 << 2) >> 2];
 HEAPF32[i19 + 4 >> 2] = +HEAPF32[i23 + (i38 << 2) >> 2];
 i30 = 0;
 i39 = 4;
 i35 = i12;
 L134 : while (1) {
  i37 = i19 + (i30 << 2) | 0;
  i36 = 1 - i30 | 0;
  i38 = -1;
  while (1) {
   if ((i39 | 0) > 0) {
    d62 = +(i38 | 0);
    i42 = 0;
    i40 = i27;
    i41 = i35;
    while (1) {
     i43 = i40 + (i30 << 2) | 0;
     d63 = +HEAPF32[i43 >> 2];
     d64 = +HEAPF32[i37 >> 2];
     if (d62 * d63 < d64) {
      HEAPF32[i41 >> 2] = +HEAPF32[i40 >> 2];
      HEAPF32[i41 + 4 >> 2] = +HEAPF32[i40 + 4 >> 2];
      i42 = i42 + 1 | 0;
      if ((i42 & 8 | 0) != 0) {
       i39 = i42;
       break L134;
      }
      d63 = +HEAPF32[i43 >> 2];
      d64 = +HEAPF32[i37 >> 2];
      i43 = i41 + 8 | 0;
     } else {
      i43 = i41;
     }
     i41 = i40 + 8 | 0;
     i44 = (i39 | 0) > 1 ? i41 : i27;
     d65 = +HEAPF32[i44 + (i30 << 2) >> 2];
     if (d62 * d63 < d64 ^ d62 * d65 < d64) {
      d104 = +HEAPF32[i40 + (i36 << 2) >> 2];
      HEAPF32[i43 + (i36 << 2) >> 2] = d104 + (d62 * d64 - d63) * ((+HEAPF32[i44 + (i36 << 2) >> 2] - d104) / (d65 - d63));
      HEAPF32[i43 + (i30 << 2) >> 2] = d62 * +HEAPF32[i37 >> 2];
      i42 = i42 + 1 | 0;
      if ((i42 & 8 | 0) == 0) {
       i43 = i43 + 8 | 0;
      } else {
       i39 = i42;
       break L134;
      }
     }
     i39 = i39 + -1 | 0;
     if ((i39 | 0) > 0) {
      i40 = i41;
      i41 = i43;
     } else {
      i39 = i42;
      break;
     }
    }
   } else {
    i39 = 0;
   }
   i40 = (i35 | 0) == (i12 | 0) ? i20 : i12;
   if ((i38 | 0) < 0) {
    i27 = i35;
    i35 = i40;
    i38 = i38 + 2 | 0;
   } else {
    break;
   }
  }
  i30 = i30 + 1 | 0;
  if ((i30 | 0) < 2) {
   i27 = i35;
   i35 = i40;
  } else {
   break;
  }
 }
 if ((i35 | 0) != (i12 | 0)) {
  _memcpy(i12 | 0, i35 | 0, i39 << 3 | 0) | 0;
 }
 if ((i39 | 0) < 1) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 d62 = 1.0 / (d60 * d58 - d59 * d61);
 d60 = d60 * d62;
 d61 = d61 * d62;
 d59 = d59 * d62;
 d58 = d58 * d62;
 d62 = +HEAPF32[i23 + (i32 << 2) >> 2];
 d63 = +HEAPF32[i18 >> 2];
 d64 = +HEAPF32[i34 >> 2];
 d65 = +HEAPF32[i33 >> 2];
 d66 = +HEAPF32[i28 >> 2];
 d67 = +HEAPF32[i31 >> 2];
 d68 = +HEAPF32[i29 >> 2];
 d69 = +HEAPF32[i24 >> 2];
 d70 = +HEAPF32[i26 >> 2];
 d71 = +HEAPF32[i25 >> 2];
 i18 = 0;
 i19 = 0;
 do {
  i97 = i19 << 1;
  d73 = +HEAPF32[i12 + (i97 << 2) >> 2];
  d104 = d73 - d56;
  d72 = +HEAPF32[i12 + ((i97 | 1) << 2) >> 2];
  d101 = d72 - d57;
  d103 = d58 * d104 - d61 * d101;
  d104 = d60 * d101 - d59 * d104;
  i97 = i18 * 3 | 0;
  i102 = i6 + (i97 << 2) | 0;
  HEAPF32[i102 >> 2] = d63 + d103 * d64 + d104 * d65;
  i105 = i6 + (i97 + 1 << 2) | 0;
  HEAPF32[i105 >> 2] = d66 + d103 * d67 + d104 * d68;
  d104 = d69 + d103 * d70 + d104 * d71;
  HEAPF32[i6 + (i97 + 2 << 2) >> 2] = d104;
  d104 = d62 - (d52 * +HEAPF32[i102 >> 2] + d48 * +HEAPF32[i105 >> 2] + d49 * d104);
  HEAPF32[i5 + (i18 << 2) >> 2] = d104;
  if (d104 >= 0.0) {
   i105 = i18 << 1;
   HEAPF32[i12 + (i105 << 2) >> 2] = d73;
   HEAPF32[i12 + ((i105 | 1) << 2) >> 2] = d72;
   i18 = i18 + 1 | 0;
  }
  i19 = i19 + 1 | 0;
 } while ((i19 | 0) != (i39 | 0));
 if ((i18 | 0) < 1) {
  i105 = 0;
  STACKTOP = i4;
  return i105 | 0;
 }
 i17 = (i18 | 0) < (i17 | 0) ? i18 : i17;
 i17 = (i17 | 0) < 1 ? 1 : i17;
 do {
  if ((i18 | 0) > (i17 | 0)) {
   if ((i18 | 0) > 1) {
    i15 = 1;
    i14 = 0;
    d48 = +HEAPF32[i5 >> 2];
    while (1) {
     d49 = +HEAPF32[i5 + (i15 << 2) >> 2];
     i13 = d49 > d48;
     i14 = i13 ? i15 : i14;
     i15 = i15 + 1 | 0;
     if ((i15 | 0) == (i18 | 0)) {
      break;
     } else {
      d48 = i13 ? d49 : d48;
     }
    }
   } else {
    i14 = 0;
   }
   __Z11cullPoints2iPfiiPi(i18, i12, i17, i14, i8);
   if ((i17 | 0) > 0) {
    i13 = i3 + 4 | 0;
    i12 = i3 + 8 | 0;
    i27 = i10 + 4 | 0;
    i26 = i10 + 8 | 0;
    i24 = i10 + 12 | 0;
    i23 = i9 + 4 | 0;
    i18 = i9 + 8 | 0;
    i25 = i9 + 12 | 0;
    i15 = i7 + 4 | 0;
    i14 = i7 + 8 | 0;
    i20 = i11 + 4 | 0;
    i19 = i11 + 8 | 0;
    i16 = i11 + 12 | 0;
    if (i22) {
     i9 = 0;
     while (1) {
      i105 = HEAP32[i8 + (i9 << 2) >> 2] | 0;
      i102 = i105 * 3 | 0;
      HEAPF32[i7 >> 2] = +HEAPF32[i6 + (i102 << 2) >> 2] + +HEAPF32[i21 >> 2];
      HEAPF32[i15 >> 2] = +HEAPF32[i6 + (i102 + 1 << 2) >> 2] + +HEAPF32[i21 + 4 >> 2];
      HEAPF32[i14 >> 2] = +HEAPF32[i6 + (i102 + 2 << 2) >> 2] + +HEAPF32[i21 + 8 >> 2];
      d104 = -+HEAPF32[i12 >> 2];
      d103 = -+HEAPF32[i13 >> 2];
      i102 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
      HEAPF32[i10 >> 2] = -+HEAPF32[i3 >> 2];
      HEAPF32[i27 >> 2] = d103;
      HEAPF32[i26 >> 2] = d104;
      HEAPF32[i24 >> 2] = 0.0;
      FUNCTION_TABLE_viiid[i102 & 7](i2, i10, i7, -+HEAPF32[i5 + (i105 << 2) >> 2]);
      i9 = i9 + 1 | 0;
      if ((i9 | 0) >= (i17 | 0)) {
       i18 = i17;
       break;
      }
     }
    } else {
     i10 = 0;
     while (1) {
      i102 = HEAP32[i8 + (i10 << 2) >> 2] | 0;
      i105 = i102 * 3 | 0;
      d95 = +HEAPF32[i6 + (i105 << 2) >> 2] + +HEAPF32[i21 >> 2];
      HEAPF32[i7 >> 2] = d95;
      d99 = +HEAPF32[i6 + (i105 + 1 << 2) >> 2] + +HEAPF32[i21 + 4 >> 2];
      HEAPF32[i15 >> 2] = d99;
      d101 = +HEAPF32[i6 + (i105 + 2 << 2) >> 2] + +HEAPF32[i21 + 8 >> 2];
      HEAPF32[i14 >> 2] = d101;
      d103 = +HEAPF32[i12 >> 2];
      d100 = +HEAPF32[i13 >> 2];
      d98 = +HEAPF32[i3 >> 2];
      i105 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
      HEAPF32[i9 >> 2] = -d98;
      HEAPF32[i23 >> 2] = -d100;
      HEAPF32[i18 >> 2] = -d103;
      HEAPF32[i25 >> 2] = 0.0;
      d104 = +HEAPF32[i5 + (i102 << 2) >> 2];
      HEAPF32[i11 >> 2] = d95 - d98 * d104;
      HEAPF32[i20 >> 2] = d99 - d104 * d100;
      HEAPF32[i19 >> 2] = d101 - d104 * d103;
      HEAPF32[i16 >> 2] = 0.0;
      FUNCTION_TABLE_viiid[i105 & 7](i2, i9, i11, -d104);
      i10 = i10 + 1 | 0;
      if ((i10 | 0) >= (i17 | 0)) {
       i18 = i17;
       break;
      }
     }
    }
   } else {
    i18 = i17;
   }
  } else {
   i7 = (i18 | 0) > 0;
   if (i22) {
    if (!i7) {
     break;
    }
    i8 = i3 + 4 | 0;
    i9 = i3 + 8 | 0;
    i10 = i13 + 4 | 0;
    i7 = i13 + 8 | 0;
    i11 = i13 + 12 | 0;
    i12 = 0;
    do {
     i105 = i12 * 3 | 0;
     HEAPF32[i14 >> 2] = +HEAPF32[i6 + (i105 << 2) >> 2] + +HEAPF32[i21 >> 2];
     HEAPF32[i14 + 4 >> 2] = +HEAPF32[i6 + (i105 + 1 << 2) >> 2] + +HEAPF32[i21 + 4 >> 2];
     HEAPF32[i14 + 8 >> 2] = +HEAPF32[i6 + (i105 + 2 << 2) >> 2] + +HEAPF32[i21 + 8 >> 2];
     i105 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
     d103 = -+HEAPF32[i8 >> 2];
     d104 = -+HEAPF32[i9 >> 2];
     HEAPF32[i13 >> 2] = -+HEAPF32[i3 >> 2];
     HEAPF32[i10 >> 2] = d103;
     HEAPF32[i7 >> 2] = d104;
     HEAPF32[i11 >> 2] = 0.0;
     FUNCTION_TABLE_viiid[i105 & 7](i2, i13, i14, -+HEAPF32[i5 + (i12 << 2) >> 2]);
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i18 | 0));
   } else {
    if (!i7) {
     break;
    }
    i11 = i3 + 4 | 0;
    i10 = i3 + 8 | 0;
    i9 = i15 + 4 | 0;
    i7 = i15 + 8 | 0;
    i8 = i15 + 12 | 0;
    i12 = 0;
    do {
     i105 = i12 * 3 | 0;
     d104 = +HEAPF32[i5 + (i12 << 2) >> 2];
     d100 = +HEAPF32[i3 >> 2];
     HEAPF32[i16 >> 2] = +HEAPF32[i6 + (i105 << 2) >> 2] + +HEAPF32[i21 >> 2] - d100 * d104;
     d101 = +HEAPF32[i11 >> 2];
     HEAPF32[i16 + 4 >> 2] = +HEAPF32[i6 + (i105 + 1 << 2) >> 2] + +HEAPF32[i21 + 4 >> 2] - d101 * d104;
     d103 = +HEAPF32[i10 >> 2];
     HEAPF32[i16 + 8 >> 2] = +HEAPF32[i6 + (i105 + 2 << 2) >> 2] + +HEAPF32[i21 + 8 >> 2] - d103 * d104;
     i105 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
     HEAPF32[i15 >> 2] = -d100;
     HEAPF32[i9 >> 2] = -d101;
     HEAPF32[i7 >> 2] = -d103;
     HEAPF32[i8 >> 2] = 0.0;
     FUNCTION_TABLE_viiid[i105 & 7](i2, i15, i16, -d104);
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i18 | 0));
   }
  }
 } while (0);
 HEAP32[i1 >> 2] = i54;
 i105 = i18;
 STACKTOP = i4;
 return i105 | 0;
}
function __ZN20btConvexHullInternal5mergeERNS_16IntermediateHullES1_(i4, i16, i19) {
 i4 = i4 | 0;
 i16 = i16 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i8 = i1 + 132 | 0;
 i2 = i1 + 128 | 0;
 i18 = i1 + 124 | 0;
 i17 = i1 + 120 | 0;
 i11 = i1 + 104 | 0;
 i10 = i1 + 72 | 0;
 i14 = i1 + 48 | 0;
 i7 = i1 + 24 | 0;
 i9 = i1;
 i12 = i1 + 100 | 0;
 i13 = i1 + 96 | 0;
 if ((HEAP32[i19 + 4 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i16 + 4 >> 2] | 0) == 0) {
  HEAP32[i16 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
  STACKTOP = i1;
  return;
 }
 i3 = i4 + 100 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i51 = __ZN20btConvexHullInternal15mergeProjectionERNS_16IntermediateHullES1_RPNS_6VertexES4_(0, i16, i19, i8, i2) | 0;
 i16 = HEAP32[i2 >> 2] | 0;
 if (i51) {
  i20 = HEAP32[i8 >> 2] | 0;
  i31 = HEAP32[i16 + 88 >> 2] | 0;
  i33 = HEAP32[i20 + 88 >> 2] | 0;
  i36 = i31 - i33 | 0;
  i22 = HEAP32[i16 + 92 >> 2] | 0;
  i34 = HEAP32[i20 + 92 >> 2] | 0;
  i26 = i22 - i34 | 0;
  i21 = HEAP32[i16 + 96 >> 2] | 0;
  i37 = HEAP32[i20 + 96 >> 2] | 0;
  i28 = i21 - i37 | 0;
  i25 = ((i26 | 0) < 0) << 31 >> 31;
  i19 = 0 - i36 | 0;
  i23 = ((i19 | 0) < 0) << 31 >> 31;
  i29 = ((i28 | 0) < 0) << 31 >> 31;
  i32 = _i64Subtract(0, 0, i19 | 0, i23 | 0) | 0;
  i32 = ___muldi3(i28 | 0, i29 | 0, i32 | 0, tempRet0 | 0) | 0;
  i30 = tempRet0;
  i29 = ___muldi3(i28 | 0, i29 | 0, i26 | 0, i25 | 0) | 0;
  i28 = tempRet0;
  i36 = ___muldi3(i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
  i27 = tempRet0;
  i24 = ___muldi3(i26 | 0, i25 | 0, i26 | 0, i25 | 0) | 0;
  i24 = _i64Subtract(i36 | 0, i27 | 0, i24 | 0, tempRet0 | 0) | 0;
  i27 = tempRet0;
  i36 = HEAP32[i20 + 8 >> 2] | 0;
  HEAP32[i18 >> 2] = 0;
  if ((i36 | 0) == 0) {
   i40 = 0;
  } else {
   i35 = _i64Subtract(0, 0, i26 | 0, i25 | 0) | 0;
   i38 = tempRet0;
   i40 = 0;
   i39 = i36;
   do {
    i41 = HEAP32[i39 + 12 >> 2] | 0;
    i43 = HEAP32[i41 + 88 >> 2] | 0;
    i45 = i43 - i33 | 0;
    i42 = HEAP32[i41 + 92 >> 2] | 0;
    i47 = i42 - i34 | 0;
    i41 = HEAP32[i41 + 96 >> 2] | 0;
    i44 = ((i45 | 0) < 0) << 31 >> 31;
    i46 = ((i47 | 0) < 0) << 31 >> 31;
    i49 = ___muldi3(i47 | 0, i46 | 0, i19 | 0, i23 | 0) | 0;
    i51 = tempRet0;
    i50 = ___muldi3(i45 | 0, i44 | 0, i35 | 0, i38 | 0) | 0;
    do {
     if ((i49 | 0) == (i50 | 0) & (i51 | 0) == (tempRet0 | 0) ? (i51 = i41 - i37 | 0, i50 = ___muldi3(i45 | 0, i44 | 0, i32 | 0, i30 | 0) | 0, i49 = tempRet0, i48 = ___muldi3(i47 | 0, i46 | 0, i29 | 0, i28 | 0) | 0, i49 = _i64Add(i48 | 0, tempRet0 | 0, i50 | 0, i49 | 0) | 0, i50 = tempRet0, i51 = ___muldi3(i51 | 0, ((i51 | 0) < 0) << 31 >> 31 | 0, i24 | 0, i27 | 0) | 0, i51 = _i64Add(i49 | 0, i50 | 0, i51 | 0, tempRet0 | 0) | 0, i50 = tempRet0, (i50 | 0) > 0 | (i50 | 0) == 0 & i51 >>> 0 > 0) : 0) {
      if ((i40 | 0) != 0) {
       i44 = (HEAP32[i40 + 4 >> 2] | 0) == (i39 | 0);
       if ((HEAP32[i40 >> 2] | 0) == (i39 | 0)) {
        if (!i44) {
         break;
        }
        i50 = HEAP32[i40 + 12 >> 2] | 0;
        i48 = HEAP32[(HEAP32[i39 + 8 >> 2] | 0) + 12 >> 2] | 0;
        i51 = HEAP32[i48 + 88 >> 2] | 0;
        i49 = HEAP32[i48 + 92 >> 2] | 0;
        i48 = HEAP32[i48 + 96 >> 2] | 0;
        i47 = (HEAP32[i50 + 96 >> 2] | 0) - i48 | 0;
        i48 = i41 - i48 | 0;
        i49 = (Math_imul(i48, (HEAP32[i50 + 92 >> 2] | 0) - i49 | 0) | 0) - (Math_imul(i47, i42 - i49 | 0) | 0) | 0;
        i51 = (Math_imul(i47, i43 - i51 | 0) | 0) - (Math_imul(i48, (HEAP32[i50 + 88 >> 2] | 0) - i51 | 0) | 0) | 0;
        i49 = ___muldi3(i49 | 0, ((i49 | 0) < 0) << 31 >> 31 | 0, i26 | 0, i25 | 0) | 0;
        i50 = tempRet0;
        i51 = ___muldi3(i51 | 0, ((i51 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0;
        i51 = _i64Add(i49 | 0, i50 | 0, i51 | 0, tempRet0 | 0) | 0;
        i50 = tempRet0;
        i41 = (i50 | 0) > 0 | (i50 | 0) == 0 & i51 >>> 0 > 0 ? 2 : 1;
       } else {
        i41 = i44 & 1;
       }
       if ((i41 | 0) != 1) {
        break;
       }
      }
      HEAP32[i18 >> 2] = i39;
      i40 = i39;
     }
    } while (0);
    i39 = HEAP32[i39 >> 2] | 0;
   } while ((i39 | 0) != (i36 | 0));
  }
  i34 = HEAP32[i16 + 8 >> 2] | 0;
  HEAP32[i17 >> 2] = 0;
  if ((i34 | 0) == 0) {
   i36 = 0;
  } else {
   i35 = _i64Subtract(0, 0, i26 | 0, i25 | 0) | 0;
   i33 = tempRet0;
   i36 = 0;
   i37 = i34;
   do {
    i42 = HEAP32[i37 + 12 >> 2] | 0;
    i43 = HEAP32[i42 + 88 >> 2] | 0;
    i44 = i43 - i31 | 0;
    i41 = HEAP32[i42 + 92 >> 2] | 0;
    i38 = i41 - i22 | 0;
    i42 = HEAP32[i42 + 96 >> 2] | 0;
    i45 = ((i44 | 0) < 0) << 31 >> 31;
    i39 = ((i38 | 0) < 0) << 31 >> 31;
    i49 = ___muldi3(i38 | 0, i39 | 0, i19 | 0, i23 | 0) | 0;
    i51 = tempRet0;
    i50 = ___muldi3(i44 | 0, i45 | 0, i35 | 0, i33 | 0) | 0;
    do {
     if ((i49 | 0) == (i50 | 0) & (i51 | 0) == (tempRet0 | 0) ? (i51 = i42 - i21 | 0, i50 = ___muldi3(i44 | 0, i45 | 0, i32 | 0, i30 | 0) | 0, i49 = tempRet0, i48 = ___muldi3(i38 | 0, i39 | 0, i29 | 0, i28 | 0) | 0, i49 = _i64Add(i48 | 0, tempRet0 | 0, i50 | 0, i49 | 0) | 0, i50 = tempRet0, i51 = ___muldi3(i51 | 0, ((i51 | 0) < 0) << 31 >> 31 | 0, i24 | 0, i27 | 0) | 0, i51 = _i64Add(i49 | 0, i50 | 0, i51 | 0, tempRet0 | 0) | 0, i50 = tempRet0, (i50 | 0) > 0 | (i50 | 0) == 0 & i51 >>> 0 > 0) : 0) {
      if ((i36 | 0) != 0) {
       if ((HEAP32[i36 >> 2] | 0) != (i37 | 0)) {
        break;
       }
       if ((HEAP32[i36 + 4 >> 2] | 0) == (i37 | 0) ? (i50 = HEAP32[i36 + 12 >> 2] | 0, i48 = HEAP32[(HEAP32[i37 + 8 >> 2] | 0) + 12 >> 2] | 0, i51 = HEAP32[i48 + 88 >> 2] | 0, i49 = HEAP32[i48 + 92 >> 2] | 0, i48 = HEAP32[i48 + 96 >> 2] | 0, i47 = (HEAP32[i50 + 96 >> 2] | 0) - i48 | 0, i48 = i42 - i48 | 0, i49 = (Math_imul(i48, (HEAP32[i50 + 92 >> 2] | 0) - i49 | 0) | 0) - (Math_imul(i47, i41 - i49 | 0) | 0) | 0, i51 = (Math_imul(i47, i43 - i51 | 0) | 0) - (Math_imul(i48, (HEAP32[i50 + 88 >> 2] | 0) - i51 | 0) | 0) | 0, i49 = ___muldi3(i49 | 0, ((i49 | 0) < 0) << 31 >> 31 | 0, i26 | 0, i25 | 0) | 0, i50 = tempRet0, i51 = ___muldi3(i51 | 0, ((i51 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i23 | 0) | 0, i51 = _i64Add(i49 | 0, i50 | 0, i51 | 0, tempRet0 | 0) | 0, i50 = tempRet0, !((i50 | 0) > 0 | (i50 | 0) == 0 & i51 >>> 0 > 0)) : 0) {
        break;
       }
      }
      HEAP32[i17 >> 2] = i37;
      i36 = i37;
     }
    } while (0);
    i37 = HEAP32[i37 >> 2] | 0;
   } while ((i37 | 0) != (i34 | 0));
  }
  if (!((i40 | 0) == 0 & (i36 | 0) == 0)) {
   __ZN20btConvexHullInternal24findEdgeForCoplanarFacesEPNS_6VertexES1_RPNS_4EdgeES4_S1_S1_(i4, i20, i16, i18, i17, 0, 0);
   i18 = HEAP32[i18 >> 2] | 0;
   if ((i18 | 0) != 0) {
    i20 = HEAP32[i18 + 12 >> 2] | 0;
    HEAP32[i8 >> 2] = i20;
   }
   i17 = HEAP32[i17 >> 2] | 0;
   if ((i17 | 0) != 0) {
    i16 = HEAP32[i17 + 12 >> 2] | 0;
    HEAP32[i2 >> 2] = i16;
   }
  }
  i19 = i16;
  i43 = (HEAP32[i16 + 96 >> 2] | 0) + 1 | 0;
  i40 = HEAP32[i16 + 88 >> 2] | 0;
 } else {
  i19 = i16;
  i20 = HEAP32[i8 >> 2] | 0;
  i43 = HEAP32[i16 + 96 >> 2] | 0;
  i40 = (HEAP32[i16 + 88 >> 2] | 0) + 1 | 0;
 }
 i28 = i11 + 4 | 0;
 i27 = i11 + 8 | 0;
 i26 = i11 + 12 | 0;
 i25 = i10 + 8 | 0;
 i24 = i10 + 16 | 0;
 i22 = i14 + 8 | 0;
 i32 = i14 + 16 | 0;
 i29 = i7 + 16 | 0;
 i30 = i7 + 8 | 0;
 i23 = i9 + 16 | 0;
 i31 = i9 + 8 | 0;
 i21 = i4 + 48 | 0;
 i16 = i4 + 116 | 0;
 i18 = i4 + 120 | 0;
 i17 = i4 + 56 | 0;
 i44 = i19;
 i48 = i20;
 i41 = HEAP32[i19 + 92 >> 2] | 0;
 i33 = 0;
 i38 = 0;
 i47 = 1;
 i36 = 0;
 i45 = 0;
 i37 = 0;
 i46 = 0;
 i34 = 0;
 i39 = 0;
 while (1) {
  i54 = i48 + 88 | 0;
  i56 = (HEAP32[i44 + 88 >> 2] | 0) - (HEAP32[i54 >> 2] | 0) | 0;
  i58 = i48 + 92 | 0;
  i52 = (HEAP32[i44 + 92 >> 2] | 0) - (HEAP32[i58 >> 2] | 0) | 0;
  i48 = i48 + 96 | 0;
  i49 = (HEAP32[i44 + 96 >> 2] | 0) - (HEAP32[i48 >> 2] | 0) | 0;
  HEAP32[i11 >> 2] = i56;
  HEAP32[i28 >> 2] = i52;
  HEAP32[i27 >> 2] = i49;
  HEAP32[i26 >> 2] = -1;
  i44 = i40 - (HEAP32[i54 >> 2] | 0) | 0;
  i58 = i41 - (HEAP32[i58 >> 2] | 0) | 0;
  i48 = i43 - (HEAP32[i48 >> 2] | 0) | 0;
  i54 = (Math_imul(i49, i58) | 0) - (Math_imul(i52, i48) | 0) | 0;
  i53 = ((i54 | 0) < 0) << 31 >> 31;
  i48 = (Math_imul(i56, i48) | 0) - (Math_imul(i49, i44) | 0) | 0;
  i51 = ((i48 | 0) < 0) << 31 >> 31;
  i58 = (Math_imul(i52, i44) | 0) - (Math_imul(i56, i58) | 0) | 0;
  i44 = ((i58 | 0) < 0) << 31 >> 31;
  i35 = i10;
  HEAP32[i35 >> 2] = i54;
  HEAP32[i35 + 4 >> 2] = i53;
  i35 = i25;
  HEAP32[i35 >> 2] = i48;
  HEAP32[i35 + 4 >> 2] = i51;
  i35 = i24;
  HEAP32[i35 >> 2] = i58;
  HEAP32[i35 + 4 >> 2] = i44;
  i35 = ((i52 | 0) < 0) << 31 >> 31;
  i55 = ___muldi3(i58 | 0, i44 | 0, i52 | 0, i35 | 0) | 0;
  i42 = tempRet0;
  i57 = ((i49 | 0) < 0) << 31 >> 31;
  i50 = ___muldi3(i49 | 0, i57 | 0, i48 | 0, i51 | 0) | 0;
  i50 = _i64Subtract(i55 | 0, i42 | 0, i50 | 0, tempRet0 | 0) | 0;
  i42 = tempRet0;
  i57 = ___muldi3(i54 | 0, i53 | 0, i49 | 0, i57 | 0) | 0;
  i49 = tempRet0;
  i55 = ((i56 | 0) < 0) << 31 >> 31;
  i44 = ___muldi3(i56 | 0, i55 | 0, i58 | 0, i44 | 0) | 0;
  i44 = _i64Subtract(i57 | 0, i49 | 0, i44 | 0, tempRet0 | 0) | 0;
  i49 = tempRet0;
  i51 = ___muldi3(i56 | 0, i55 | 0, i48 | 0, i51 | 0) | 0;
  i48 = tempRet0;
  i35 = ___muldi3(i54 | 0, i53 | 0, i52 | 0, i35 | 0) | 0;
  i35 = _i64Subtract(i51 | 0, i48 | 0, i35 | 0, tempRet0 | 0) | 0;
  i48 = i14;
  HEAP32[i48 >> 2] = i50;
  HEAP32[i48 + 4 >> 2] = i42;
  i48 = i22;
  HEAP32[i48 >> 2] = i44;
  HEAP32[i48 + 4 >> 2] = i49;
  i48 = i32;
  HEAP32[i48 >> 2] = i35;
  HEAP32[i48 + 4 >> 2] = tempRet0;
  HEAP32[i7 + 0 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAP32[i7 + 16 >> 2] = 0;
  i48 = HEAP32[i8 >> 2] | 0;
  i35 = __ZN20btConvexHullInternal12findMaxAngleEbPKNS_6VertexERKNS_7Point32ERKNS_7Point64ES8_RNS_10Rational64E(i4, 0, i48, i11, i10, i14, i7) | 0;
  HEAP32[i9 + 0 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  HEAP32[i9 + 12 >> 2] = 0;
  HEAP32[i9 + 16 >> 2] = 0;
  i49 = HEAP32[i2 >> 2] | 0;
  i44 = __ZN20btConvexHullInternal12findMaxAngleEbPKNS_6VertexERKNS_7Point32ERKNS_7Point64ES8_RNS_10Rational64E(i4, 1, i49, i11, i10, i14, i9) | 0;
  i42 = (i35 | 0) != 0;
  i50 = i42 ^ 1;
  i51 = (i44 | 0) == 0;
  if (i51 & i50) {
   i15 = 36;
   break;
  }
  if (i51 | i50) {
   i42 = i42 ? -1 : 1;
  } else {
   i42 = __ZNK20btConvexHullInternal10Rational647compareERKS0_(i7, i9) | 0;
  }
  do {
   if (!i47) {
    if ((i42 | 0) > -1) {
     if ((HEAP32[i23 >> 2] | 0) >= 0) {
      i15 = 47;
      break;
     }
     i58 = i31;
     if ((HEAP32[i58 >> 2] | 0) == 0 & (HEAP32[i58 + 4 >> 2] | 0) == 0) {
      break;
     } else {
      i15 = 47;
      break;
     }
    } else {
     if ((HEAP32[i29 >> 2] | 0) >= 0) {
      i15 = 47;
      break;
     }
     i58 = i30;
     if ((HEAP32[i58 >> 2] | 0) == 0 & (HEAP32[i58 + 4 >> 2] | 0) == 0) {
      break;
     } else {
      i15 = 47;
      break;
     }
    }
   } else {
    i15 = 47;
   }
  } while (0);
  if ((i15 | 0) == 47) {
   i15 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i21) | 0;
   i58 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i21) | 0;
   i47 = i15 + 8 | 0;
   HEAP32[i47 >> 2] = i58;
   HEAP32[i58 + 8 >> 2] = i15;
   HEAP32[i15 + 20 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i58 + 20 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i15 + 12 >> 2] = i49;
   HEAP32[i58 + 12 >> 2] = i48;
   HEAP32[i15 + 16 >> 2] = 0;
   HEAP32[i58 + 16 >> 2] = 0;
   i58 = HEAP32[i16 >> 2] | 0;
   i48 = i58 + 1 | 0;
   HEAP32[i16 >> 2] = i48;
   if ((i58 | 0) >= (HEAP32[i18 >> 2] | 0)) {
    HEAP32[i18 >> 2] = i48;
   }
   if ((i37 | 0) == 0) {
    i36 = i15;
   } else {
    HEAP32[i37 + 4 >> 2] = i15;
   }
   HEAP32[i15 >> 2] = i37;
   i47 = HEAP32[i47 >> 2] | 0;
   if ((i46 | 0) == 0) {
    i45 = i47;
   } else {
    HEAP32[i46 >> 2] = i47;
   }
   HEAP32[i47 + 4 >> 2] = i46;
   i37 = i15;
   i46 = i47;
  }
  HEAP32[i12 >> 2] = i35;
  HEAP32[i13 >> 2] = i44;
  if ((i42 | 0) != 0) {
   if ((i42 | 0) > -1) {
    i47 = i44;
    i15 = 57;
   } else {
    i44 = i35;
    i42 = i46;
    i15 = 76;
   }
  } else {
   __ZN20btConvexHullInternal24findEdgeForCoplanarFacesEPNS_6VertexES1_RPNS_4EdgeES4_S1_S1_(i4, HEAP32[i8 >> 2] | 0, HEAP32[i2 >> 2] | 0, i12, i13, 0, 0);
   i47 = HEAP32[i13 >> 2] | 0;
   i15 = 57;
  }
  if ((i15 | 0) == 57) {
   i15 = 0;
   if ((i47 | 0) != 0) {
    i40 = (i39 | 0) != 0;
    if (i40 ? (i5 = HEAP32[i39 >> 2] | 0, (i5 | 0) != (i44 | 0)) : 0) {
     i49 = i5;
     while (1) {
      i48 = HEAP32[i49 >> 2] | 0;
      i43 = HEAP32[i49 + 8 >> 2] | 0;
      if ((i48 | 0) == (i49 | 0)) {
       HEAP32[(HEAP32[i43 + 12 >> 2] | 0) + 8 >> 2] = 0;
      } else {
       i58 = i49 + 4 | 0;
       HEAP32[i48 + 4 >> 2] = HEAP32[i58 >> 2];
       HEAP32[HEAP32[i58 >> 2] >> 2] = i48;
       HEAP32[(HEAP32[i43 + 12 >> 2] | 0) + 8 >> 2] = i48;
      }
      i41 = HEAP32[i43 >> 2] | 0;
      if ((i41 | 0) == (i43 | 0)) {
       HEAP32[(HEAP32[i49 + 12 >> 2] | 0) + 8 >> 2] = 0;
      } else {
       i58 = i43 + 4 | 0;
       HEAP32[i41 + 4 >> 2] = HEAP32[i58 >> 2];
       HEAP32[HEAP32[i58 >> 2] >> 2] = i41;
       HEAP32[(HEAP32[i49 + 12 >> 2] | 0) + 8 >> 2] = i41;
      }
      HEAP32[i49 + 0 >> 2] = 0;
      HEAP32[i49 + 4 >> 2] = 0;
      HEAP32[i49 + 8 >> 2] = 0;
      HEAP32[i49 + 12 >> 2] = 0;
      HEAP32[i49 + 16 >> 2] = 0;
      HEAP32[i49 >> 2] = HEAP32[i17 >> 2];
      HEAP32[i17 >> 2] = i49;
      HEAP32[i43 + 0 >> 2] = 0;
      HEAP32[i43 + 4 >> 2] = 0;
      HEAP32[i43 + 8 >> 2] = 0;
      HEAP32[i43 + 12 >> 2] = 0;
      HEAP32[i43 + 16 >> 2] = 0;
      HEAP32[i43 >> 2] = HEAP32[i17 >> 2];
      HEAP32[i17 >> 2] = i43;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
      if ((i48 | 0) == (i44 | 0)) {
       break;
      } else {
       i49 = i48;
      }
     }
    }
    if ((i46 | 0) == 0) {
     i39 = i47;
     i38 = i40 ? i38 : i44;
    } else {
     if (i40) {
      HEAP32[i39 >> 2] = i45;
      HEAP32[i45 + 4 >> 2] = i39;
      i39 = i44 + 4 | 0;
     } else {
      i39 = i44 + 4 | 0;
      i38 = HEAP32[i39 >> 2] | 0;
      HEAP32[i38 >> 2] = i45;
      HEAP32[i45 + 4 >> 2] = i38;
      i38 = i45;
     }
     HEAP32[i46 >> 2] = i44;
     HEAP32[i39 >> 2] = i46;
     i39 = HEAP32[i13 >> 2] | 0;
     i45 = 0;
    }
    i43 = HEAP32[i2 >> 2] | 0;
    i40 = HEAP32[i43 + 88 >> 2] | 0;
    i41 = HEAP32[i43 + 92 >> 2] | 0;
    i43 = HEAP32[i43 + 96 >> 2] | 0;
    HEAP32[i2 >> 2] = HEAP32[i39 + 12 >> 2];
    i46 = 0;
    i39 = HEAP32[i39 + 8 >> 2] | 0;
   }
   if ((i42 | 0) < 1) {
    i44 = HEAP32[i12 >> 2] | 0;
    i42 = i46;
    i15 = 76;
   } else {
    i35 = i45;
    i42 = i46;
   }
  }
  if ((i15 | 0) == 76) {
   i15 = 0;
   if ((i44 | 0) == 0) {
    i35 = i45;
   } else {
    i40 = (i34 | 0) != 0;
    if (i40 ? (i6 = HEAP32[i34 + 4 >> 2] | 0, (i6 | 0) != (i35 | 0)) : 0) {
     i41 = i6;
     while (1) {
      i47 = i41 + 4 | 0;
      i46 = HEAP32[i47 >> 2] | 0;
      i48 = HEAP32[i41 >> 2] | 0;
      i43 = HEAP32[i41 + 8 >> 2] | 0;
      if ((i48 | 0) == (i41 | 0)) {
       HEAP32[(HEAP32[i43 + 12 >> 2] | 0) + 8 >> 2] = 0;
      } else {
       HEAP32[i48 + 4 >> 2] = i46;
       HEAP32[HEAP32[i47 >> 2] >> 2] = i48;
       HEAP32[(HEAP32[i43 + 12 >> 2] | 0) + 8 >> 2] = i48;
      }
      i47 = HEAP32[i43 >> 2] | 0;
      if ((i47 | 0) == (i43 | 0)) {
       HEAP32[(HEAP32[i41 + 12 >> 2] | 0) + 8 >> 2] = 0;
      } else {
       i58 = i43 + 4 | 0;
       HEAP32[i47 + 4 >> 2] = HEAP32[i58 >> 2];
       HEAP32[HEAP32[i58 >> 2] >> 2] = i47;
       HEAP32[(HEAP32[i41 + 12 >> 2] | 0) + 8 >> 2] = i47;
      }
      HEAP32[i41 + 0 >> 2] = 0;
      HEAP32[i41 + 4 >> 2] = 0;
      HEAP32[i41 + 8 >> 2] = 0;
      HEAP32[i41 + 12 >> 2] = 0;
      HEAP32[i41 + 16 >> 2] = 0;
      HEAP32[i41 >> 2] = HEAP32[i17 >> 2];
      HEAP32[i17 >> 2] = i41;
      HEAP32[i43 + 0 >> 2] = 0;
      HEAP32[i43 + 4 >> 2] = 0;
      HEAP32[i43 + 8 >> 2] = 0;
      HEAP32[i43 + 12 >> 2] = 0;
      HEAP32[i43 + 16 >> 2] = 0;
      HEAP32[i43 >> 2] = HEAP32[i17 >> 2];
      HEAP32[i17 >> 2] = i43;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
      if ((i46 | 0) == (i35 | 0)) {
       break;
      } else {
       i41 = i46;
      }
     }
    }
    if ((i37 | 0) == 0) {
     i33 = i40 ? i33 : i35;
    } else {
     if (i40) {
      HEAP32[i36 >> 2] = i34;
      HEAP32[i34 + 4 >> 2] = i36;
      i34 = i35;
     } else {
      i34 = HEAP32[i35 >> 2] | 0;
      HEAP32[i36 >> 2] = i34;
      HEAP32[i34 + 4 >> 2] = i36;
      i34 = i35;
      i33 = i36;
     }
     HEAP32[i34 >> 2] = i37;
     HEAP32[i37 + 4 >> 2] = i35;
     i44 = HEAP32[i12 >> 2] | 0;
     i36 = 0;
    }
    i43 = HEAP32[i8 >> 2] | 0;
    i40 = HEAP32[i43 + 88 >> 2] | 0;
    i41 = HEAP32[i43 + 92 >> 2] | 0;
    i43 = HEAP32[i43 + 96 >> 2] | 0;
    HEAP32[i8 >> 2] = HEAP32[i44 + 12 >> 2];
    i35 = i45;
    i37 = 0;
    i34 = HEAP32[i44 + 8 >> 2] | 0;
   }
  }
  i48 = HEAP32[i8 >> 2] | 0;
  i44 = HEAP32[i2 >> 2] | 0;
  if ((i48 | 0) == (i20 | 0) & (i44 | 0) == (i19 | 0)) {
   break;
  } else {
   i47 = 0;
   i45 = i35;
   i46 = i42;
  }
 }
 if ((i15 | 0) == 36) {
  i2 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i21) | 0;
  i58 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i21) | 0;
  i4 = i2 + 8 | 0;
  HEAP32[i4 >> 2] = i58;
  HEAP32[i58 + 8 >> 2] = i2;
  HEAP32[i2 + 20 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i58 + 20 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 12 >> 2] = i49;
  HEAP32[i58 + 12 >> 2] = i48;
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i58 + 16 >> 2] = 0;
  i58 = HEAP32[i16 >> 2] | 0;
  i3 = i58 + 1 | 0;
  HEAP32[i16 >> 2] = i3;
  if ((i58 | 0) >= (HEAP32[i18 >> 2] | 0)) {
   HEAP32[i18 >> 2] = i3;
  }
  HEAP32[i2 >> 2] = i2;
  HEAP32[i2 + 4 >> 2] = i2;
  HEAP32[i48 + 8 >> 2] = i2;
  i58 = HEAP32[i4 >> 2] | 0;
  HEAP32[i58 >> 2] = i58;
  HEAP32[i58 + 4 >> 2] = i58;
  HEAP32[i49 + 8 >> 2] = i58;
  STACKTOP = i1;
  return;
 }
 if ((i34 | 0) != 0) {
  i3 = i34 + 4 | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  if ((i5 | 0) != (i33 | 0)) {
   while (1) {
    i7 = i5 + 4 | 0;
    i4 = HEAP32[i7 >> 2] | 0;
    i8 = HEAP32[i5 >> 2] | 0;
    i6 = HEAP32[i5 + 8 >> 2] | 0;
    if ((i8 | 0) == (i5 | 0)) {
     HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 8 >> 2] = 0;
    } else {
     HEAP32[i8 + 4 >> 2] = i4;
     HEAP32[HEAP32[i7 >> 2] >> 2] = i8;
     HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 8 >> 2] = i8;
    }
    i7 = HEAP32[i6 >> 2] | 0;
    if ((i7 | 0) == (i6 | 0)) {
     HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 8 >> 2] = 0;
    } else {
     i58 = i6 + 4 | 0;
     HEAP32[i7 + 4 >> 2] = HEAP32[i58 >> 2];
     HEAP32[HEAP32[i58 >> 2] >> 2] = i7;
     HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 8 >> 2] = i7;
    }
    HEAP32[i5 + 0 >> 2] = 0;
    HEAP32[i5 + 4 >> 2] = 0;
    HEAP32[i5 + 8 >> 2] = 0;
    HEAP32[i5 + 12 >> 2] = 0;
    HEAP32[i5 + 16 >> 2] = 0;
    HEAP32[i5 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i17 >> 2] = i5;
    HEAP32[i6 + 0 >> 2] = 0;
    HEAP32[i6 + 4 >> 2] = 0;
    HEAP32[i6 + 8 >> 2] = 0;
    HEAP32[i6 + 12 >> 2] = 0;
    HEAP32[i6 + 16 >> 2] = 0;
    HEAP32[i6 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i17 >> 2] = i6;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
    if ((i4 | 0) == (i33 | 0)) {
     break;
    } else {
     i5 = i4;
    }
   }
  }
  if ((i37 | 0) != 0) {
   HEAP32[i36 >> 2] = i34;
   HEAP32[i3 >> 2] = i36;
   HEAP32[i33 >> 2] = i37;
   HEAP32[i37 + 4 >> 2] = i33;
  }
 } else {
  HEAP32[i36 >> 2] = i37;
  HEAP32[i37 + 4 >> 2] = i36;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = i37;
 }
 if ((i39 | 0) == 0) {
  HEAP32[i42 >> 2] = i35;
  HEAP32[i35 + 4 >> 2] = i42;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] = i42;
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i39 >> 2] | 0;
 if ((i5 | 0) != (i38 | 0)) {
  while (1) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = HEAP32[i5 + 8 >> 2] | 0;
   if ((i3 | 0) == (i5 | 0)) {
    HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 8 >> 2] = 0;
   } else {
    i58 = i5 + 4 | 0;
    HEAP32[i3 + 4 >> 2] = HEAP32[i58 >> 2];
    HEAP32[HEAP32[i58 >> 2] >> 2] = i3;
    HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 8 >> 2] = i3;
   }
   i2 = HEAP32[i4 >> 2] | 0;
   if ((i2 | 0) == (i4 | 0)) {
    HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 8 >> 2] = 0;
   } else {
    i58 = i4 + 4 | 0;
    HEAP32[i2 + 4 >> 2] = HEAP32[i58 >> 2];
    HEAP32[HEAP32[i58 >> 2] >> 2] = i2;
    HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 8 >> 2] = i2;
   }
   HEAP32[i5 + 0 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i5 + 16 >> 2] = 0;
   HEAP32[i5 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i17 >> 2] = i5;
   HEAP32[i4 + 0 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 12 >> 2] = 0;
   HEAP32[i4 + 16 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i17 >> 2] = i4;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
   if ((i3 | 0) == (i38 | 0)) {
    break;
   } else {
    i5 = i3;
   }
  }
 }
 if ((i42 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i39 >> 2] = i35;
 HEAP32[i35 + 4 >> 2] = i39;
 HEAP32[i42 >> 2] = i38;
 HEAP32[i38 + 4 >> 2] = i42;
 STACKTOP = i1;
 return;
}
function __ZN17btGjkPairDetector26getClosestPointsNonVirtualERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDraw(i20, i30, i5, i29) {
 i20 = i20 | 0;
 i30 = i30 | 0;
 i5 = i5 | 0;
 i29 = i29 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, i26 = 0, i27 = 0, i28 = 0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, d100 = 0.0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, d107 = 0.0, d108 = 0.0, d109 = 0.0, d110 = 0.0, d111 = 0.0, d112 = 0.0, d113 = 0.0, d114 = 0.0, d115 = 0.0, d116 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i3 = i4 + 336 | 0;
 i15 = i4 + 320 | 0;
 i2 = i4 + 304 | 0;
 i26 = i4 + 240 | 0;
 i33 = i4 + 176 | 0;
 i44 = i4 + 160 | 0;
 i37 = i4 + 144 | 0;
 i38 = i4 + 128 | 0;
 i39 = i4 + 112 | 0;
 i43 = i4 + 96 | 0;
 i40 = i4 + 80 | 0;
 i42 = i4 + 64 | 0;
 i36 = i4 + 48 | 0;
 i12 = i4 + 32 | 0;
 i13 = i4 + 16 | 0;
 i6 = i4;
 i10 = i20 + 56 | 0;
 HEAPF32[i10 >> 2] = 0.0;
 i14 = i3 + 4 | 0;
 i11 = i3 + 8 | 0;
 i19 = i3 + 12 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i26 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i26 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
 i27 = i26 + 16 | 0;
 i45 = i30 + 16 | 0;
 HEAP32[i27 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
 HEAP32[i27 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
 HEAP32[i27 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
 HEAP32[i27 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
 i27 = i26 + 32 | 0;
 i45 = i30 + 32 | 0;
 HEAP32[i27 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
 HEAP32[i27 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
 HEAP32[i27 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
 HEAP32[i27 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
 i27 = i26 + 48 | 0;
 i45 = i30 + 48 | 0;
 HEAP32[i27 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
 HEAP32[i27 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
 HEAP32[i27 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
 HEAP32[i27 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
 i45 = i30 + 64 | 0;
 HEAP32[i33 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
 HEAP32[i33 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
 HEAP32[i33 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
 HEAP32[i33 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
 i28 = i33 + 16 | 0;
 i41 = i30 + 80 | 0;
 HEAP32[i28 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
 HEAP32[i28 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
 HEAP32[i28 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
 HEAP32[i28 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
 i28 = i33 + 32 | 0;
 i41 = i30 + 96 | 0;
 HEAP32[i28 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
 HEAP32[i28 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
 HEAP32[i28 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
 HEAP32[i28 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
 i28 = i33 + 48 | 0;
 i41 = i30 + 112 | 0;
 HEAP32[i28 + 0 >> 2] = HEAP32[i41 + 0 >> 2];
 HEAP32[i28 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
 HEAP32[i28 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
 HEAP32[i28 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
 d109 = +HEAPF32[i27 >> 2];
 d112 = +HEAPF32[i28 >> 2];
 i41 = i26 + 52 | 0;
 d110 = +HEAPF32[i41 >> 2];
 i46 = i33 + 52 | 0;
 d113 = +HEAPF32[i46 >> 2];
 i98 = i26 + 56 | 0;
 d111 = +HEAPF32[i98 >> 2];
 i97 = i33 + 56 | 0;
 d114 = +HEAPF32[i97 >> 2];
 d7 = (d109 + d112) * .5;
 d9 = (d110 + d113) * .5;
 d8 = (d111 + d114) * .5;
 HEAPF32[i27 >> 2] = d109 - d7;
 HEAPF32[i41 >> 2] = d110 - d9;
 HEAPF32[i98 >> 2] = d111 - d8;
 HEAPF32[i28 >> 2] = d112 - d7;
 HEAPF32[i46 >> 2] = d113 - d9;
 HEAPF32[i97 >> 2] = d114 - d8;
 i28 = i20 + 28 | 0;
 i27 = i20 + 32 | 0;
 if (((HEAP32[(HEAP32[i28 >> 2] | 0) + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2) {
  i106 = ((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2;
 } else {
  i106 = 0;
 }
 d24 = +HEAPF32[i20 + 44 >> 2];
 d25 = +HEAPF32[i20 + 48 >> 2];
 HEAP32[113342] = (HEAP32[113342] | 0) + 1;
 i16 = (HEAP8[i20 + 52 | 0] | 0) == 0;
 d24 = i16 ? d24 : 0.0;
 d25 = i16 ? d25 : 0.0;
 i53 = i20 + 64 | 0;
 HEAP32[i53 >> 2] = 0;
 i17 = i20 + 4 | 0;
 HEAPF32[i17 >> 2] = 0.0;
 i23 = i20 + 8 | 0;
 HEAPF32[i23 >> 2] = 1.0;
 i22 = i20 + 12 | 0;
 HEAPF32[i22 >> 2] = 0.0;
 i21 = i20 + 16 | 0;
 HEAPF32[i21 >> 2] = 0.0;
 i35 = i20 + 68 | 0;
 HEAP32[i35 >> 2] = 0;
 i18 = i20 + 60 | 0;
 HEAP32[i18 >> 2] = -1;
 d31 = d24 + d25;
 i34 = i20 + 24 | 0;
 __ZN22btVoronoiSimplexSolver5resetEv(HEAP32[i34 >> 2] | 0);
 i62 = i30 + 16 | 0;
 i63 = i30 + 32 | 0;
 i56 = i30 + 4 | 0;
 i57 = i30 + 20 | 0;
 i58 = i30 + 36 | 0;
 i59 = i30 + 8 | 0;
 i60 = i30 + 24 | 0;
 i61 = i30 + 40 | 0;
 i64 = i44 + 4 | 0;
 i65 = i44 + 8 | 0;
 i66 = i44 + 12 | 0;
 i73 = i30 + 80 | 0;
 i74 = i30 + 96 | 0;
 i67 = i30 + 68 | 0;
 i68 = i30 + 84 | 0;
 i69 = i30 + 100 | 0;
 i70 = i30 + 72 | 0;
 i71 = i30 + 88 | 0;
 i72 = i30 + 104 | 0;
 i75 = i37 + 4 | 0;
 i76 = i37 + 8 | 0;
 i77 = i37 + 12 | 0;
 i81 = i26 + 4 | 0;
 i50 = i38 + 4 | 0;
 i82 = i26 + 8 | 0;
 i79 = i38 + 8 | 0;
 i80 = i26 + 48 | 0;
 i83 = i26 + 16 | 0;
 i84 = i26 + 20 | 0;
 i85 = i26 + 24 | 0;
 i101 = i26 + 32 | 0;
 i102 = i26 + 36 | 0;
 i103 = i26 + 40 | 0;
 i86 = i43 + 4 | 0;
 i47 = i43 + 8 | 0;
 i87 = i43 + 12 | 0;
 i91 = i33 + 4 | 0;
 i88 = i39 + 4 | 0;
 i92 = i33 + 8 | 0;
 i89 = i39 + 8 | 0;
 i90 = i33 + 48 | 0;
 i93 = i33 + 16 | 0;
 i94 = i33 + 20 | 0;
 i95 = i33 + 24 | 0;
 i104 = i33 + 32 | 0;
 i105 = i33 + 36 | 0;
 i99 = i33 + 40 | 0;
 i96 = i40 + 4 | 0;
 i78 = i40 + 8 | 0;
 i48 = i40 + 12 | 0;
 i52 = i42 + 4 | 0;
 i49 = i42 + 8 | 0;
 i51 = i42 + 12 | 0;
 i16 = i30 + 128 | 0;
 i54 = i36 + 4 | 0;
 i55 = i36 + 8 | 0;
 L4 : do {
  if (i106) {
   d100 = 999999984306749400.0;
   while (1) {
    d107 = +HEAPF32[i17 >> 2];
    d108 = -d107;
    d112 = +HEAPF32[i23 >> 2];
    d109 = -d112;
    d113 = +HEAPF32[i22 >> 2];
    d114 = -d113;
    d111 = +HEAPF32[i56 >> 2] * d108 + +HEAPF32[i57 >> 2] * d109 + +HEAPF32[i58 >> 2] * d114;
    d110 = +HEAPF32[i59 >> 2] * d108 + +HEAPF32[i60 >> 2] * d109 + +HEAPF32[i61 >> 2] * d114;
    HEAPF32[i44 >> 2] = +HEAPF32[i30 >> 2] * d108 + +HEAPF32[i62 >> 2] * d109 + +HEAPF32[i63 >> 2] * d114;
    HEAPF32[i64 >> 2] = d111;
    HEAPF32[i65 >> 2] = d110;
    HEAPF32[i66 >> 2] = 0.0;
    d110 = d107 * +HEAPF32[i67 >> 2] + d112 * +HEAPF32[i68 >> 2] + d113 * +HEAPF32[i69 >> 2];
    d111 = d107 * +HEAPF32[i70 >> 2] + d112 * +HEAPF32[i71 >> 2] + d113 * +HEAPF32[i72 >> 2];
    HEAPF32[i37 >> 2] = +HEAPF32[i45 >> 2] * d107 + +HEAPF32[i73 >> 2] * d112 + +HEAPF32[i74 >> 2] * d113;
    HEAPF32[i75 >> 2] = d110;
    HEAPF32[i76 >> 2] = d111;
    HEAPF32[i77 >> 2] = 0.0;
    __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i38, HEAP32[i28 >> 2] | 0, i44);
    __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i39, HEAP32[i27 >> 2] | 0, i37);
    d111 = +HEAPF32[i38 >> 2];
    d110 = +HEAPF32[i50 >> 2];
    d113 = +HEAPF32[i79 >> 2];
    d112 = +HEAPF32[i80 >> 2] + (+HEAPF32[i26 >> 2] * d111 + +HEAPF32[i81 >> 2] * d110 + +HEAPF32[i82 >> 2] * d113);
    d113 = +HEAPF32[i41 >> 2] + (d111 * +HEAPF32[i83 >> 2] + d110 * +HEAPF32[i84 >> 2] + d113 * +HEAPF32[i85 >> 2]);
    HEAPF32[i43 >> 2] = d112;
    HEAPF32[i86 >> 2] = d113;
    HEAPF32[i87 >> 2] = 0.0;
    d110 = +HEAPF32[i39 >> 2];
    d111 = +HEAPF32[i88 >> 2];
    d107 = +HEAPF32[i89 >> 2];
    d114 = +HEAPF32[i90 >> 2] + (+HEAPF32[i33 >> 2] * d110 + +HEAPF32[i91 >> 2] * d111 + +HEAPF32[i92 >> 2] * d107);
    d107 = +HEAPF32[i46 >> 2] + (d110 * +HEAPF32[i93 >> 2] + d111 * +HEAPF32[i94 >> 2] + d107 * +HEAPF32[i95 >> 2]);
    HEAPF32[i40 >> 2] = d114;
    HEAPF32[i96 >> 2] = d107;
    HEAPF32[i48 >> 2] = 0.0;
    HEAPF32[i47 >> 2] = 0.0;
    HEAPF32[i78 >> 2] = 0.0;
    d114 = d112 - d114;
    d107 = d113 - d107;
    HEAPF32[i42 >> 2] = d114;
    HEAPF32[i52 >> 2] = d107;
    HEAPF32[i49 >> 2] = 0.0;
    HEAPF32[i51 >> 2] = 0.0;
    d107 = +HEAPF32[i17 >> 2] * d114 + +HEAPF32[i23 >> 2] * d107 + +HEAPF32[i22 >> 2] * 0.0;
    if (d107 > 0.0 ? d107 * d107 > d100 * +HEAPF32[i16 >> 2] : 0) {
     i1 = 15;
     break L4;
    }
    if (__ZN22btVoronoiSimplexSolver9inSimplexERK9btVector3(HEAP32[i34 >> 2] | 0, i42) | 0) {
     i1 = 17;
     break L4;
    }
    d107 = d100 - d107;
    if (d107 <= d100 * 9.999999974752427e-7) {
     i1 = 19;
     break L4;
    }
    __ZN22btVoronoiSimplexSolver9addVertexERK9btVector3S2_S2_(HEAP32[i34 >> 2] | 0, i42, i43, i40);
    if (!(__ZN22btVoronoiSimplexSolver7closestER9btVector3(HEAP32[i34 >> 2] | 0, i36) | 0)) {
     i1 = 21;
     break L4;
    }
    d113 = +HEAPF32[i36 >> 2];
    d114 = +HEAPF32[i54 >> 2];
    d107 = +HEAPF32[i55 >> 2];
    d107 = d113 * d113 + d114 * d114 + d107 * d107;
    if (d107 < 9.999999974752427e-7) {
     i1 = 23;
     break L4;
    }
    if (d100 - d107 <= d100 * 1.1920928955078125e-7) {
     d100 = d107;
     i1 = 25;
     break L4;
    }
    HEAP32[i17 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
    HEAP32[i17 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
    HEAP32[i17 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
    HEAP32[i17 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
    i106 = HEAP32[i53 >> 2] | 0;
    HEAP32[i53 >> 2] = i106 + 1;
    if ((i106 | 0) > 1e3) {
     d100 = 0.0;
     i36 = 0;
     break L4;
    }
    if ((HEAP32[HEAP32[i34 >> 2] >> 2] | 0) == 4) {
     i1 = 28;
     break;
    } else {
     d100 = d107;
    }
   }
  } else {
   d100 = 999999984306749400.0;
   while (1) {
    d111 = +HEAPF32[i17 >> 2];
    d114 = -d111;
    d110 = +HEAPF32[i23 >> 2];
    d113 = -d110;
    d112 = +HEAPF32[i22 >> 2];
    d107 = -d112;
    d109 = +HEAPF32[i56 >> 2] * d114 + +HEAPF32[i57 >> 2] * d113 + +HEAPF32[i58 >> 2] * d107;
    d108 = +HEAPF32[i59 >> 2] * d114 + +HEAPF32[i60 >> 2] * d113 + +HEAPF32[i61 >> 2] * d107;
    HEAPF32[i44 >> 2] = +HEAPF32[i30 >> 2] * d114 + +HEAPF32[i62 >> 2] * d113 + +HEAPF32[i63 >> 2] * d107;
    HEAPF32[i64 >> 2] = d109;
    HEAPF32[i65 >> 2] = d108;
    HEAPF32[i66 >> 2] = 0.0;
    d108 = d111 * +HEAPF32[i67 >> 2] + d110 * +HEAPF32[i68 >> 2] + d112 * +HEAPF32[i69 >> 2];
    d109 = d111 * +HEAPF32[i70 >> 2] + d110 * +HEAPF32[i71 >> 2] + d112 * +HEAPF32[i72 >> 2];
    HEAPF32[i37 >> 2] = +HEAPF32[i45 >> 2] * d111 + +HEAPF32[i73 >> 2] * d110 + +HEAPF32[i74 >> 2] * d112;
    HEAPF32[i75 >> 2] = d108;
    HEAPF32[i76 >> 2] = d109;
    HEAPF32[i77 >> 2] = 0.0;
    __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i38, HEAP32[i28 >> 2] | 0, i44);
    __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i39, HEAP32[i27 >> 2] | 0, i37);
    d109 = +HEAPF32[i38 >> 2];
    d108 = +HEAPF32[i50 >> 2];
    d112 = +HEAPF32[i79 >> 2];
    d110 = +HEAPF32[i80 >> 2] + (+HEAPF32[i26 >> 2] * d109 + +HEAPF32[i81 >> 2] * d108 + +HEAPF32[i82 >> 2] * d112);
    d111 = +HEAPF32[i41 >> 2] + (d109 * +HEAPF32[i83 >> 2] + d108 * +HEAPF32[i84 >> 2] + d112 * +HEAPF32[i85 >> 2]);
    d112 = +HEAPF32[i98 >> 2] + (d109 * +HEAPF32[i101 >> 2] + d108 * +HEAPF32[i102 >> 2] + d112 * +HEAPF32[i103 >> 2]);
    HEAPF32[i43 >> 2] = d110;
    HEAPF32[i86 >> 2] = d111;
    HEAPF32[i47 >> 2] = d112;
    HEAPF32[i87 >> 2] = 0.0;
    d108 = +HEAPF32[i39 >> 2];
    d109 = +HEAPF32[i88 >> 2];
    d107 = +HEAPF32[i89 >> 2];
    d113 = +HEAPF32[i90 >> 2] + (+HEAPF32[i33 >> 2] * d108 + +HEAPF32[i91 >> 2] * d109 + +HEAPF32[i92 >> 2] * d107);
    d114 = +HEAPF32[i46 >> 2] + (d108 * +HEAPF32[i93 >> 2] + d109 * +HEAPF32[i94 >> 2] + d107 * +HEAPF32[i95 >> 2]);
    d107 = +HEAPF32[i97 >> 2] + (d108 * +HEAPF32[i104 >> 2] + d109 * +HEAPF32[i105 >> 2] + d107 * +HEAPF32[i99 >> 2]);
    HEAPF32[i40 >> 2] = d113;
    HEAPF32[i96 >> 2] = d114;
    HEAPF32[i78 >> 2] = d107;
    HEAPF32[i48 >> 2] = 0.0;
    d113 = d110 - d113;
    d114 = d111 - d114;
    d107 = d112 - d107;
    HEAPF32[i42 >> 2] = d113;
    HEAPF32[i52 >> 2] = d114;
    HEAPF32[i49 >> 2] = d107;
    HEAPF32[i51 >> 2] = 0.0;
    d107 = +HEAPF32[i17 >> 2] * d113 + +HEAPF32[i23 >> 2] * d114 + +HEAPF32[i22 >> 2] * d107;
    if (d107 > 0.0 ? d107 * d107 > d100 * +HEAPF32[i16 >> 2] : 0) {
     i1 = 15;
     break L4;
    }
    if (__ZN22btVoronoiSimplexSolver9inSimplexERK9btVector3(HEAP32[i34 >> 2] | 0, i42) | 0) {
     i1 = 17;
     break L4;
    }
    d107 = d100 - d107;
    if (d107 <= d100 * 9.999999974752427e-7) {
     i1 = 19;
     break L4;
    }
    __ZN22btVoronoiSimplexSolver9addVertexERK9btVector3S2_S2_(HEAP32[i34 >> 2] | 0, i42, i43, i40);
    if (!(__ZN22btVoronoiSimplexSolver7closestER9btVector3(HEAP32[i34 >> 2] | 0, i36) | 0)) {
     i1 = 21;
     break L4;
    }
    d113 = +HEAPF32[i36 >> 2];
    d114 = +HEAPF32[i54 >> 2];
    d107 = +HEAPF32[i55 >> 2];
    d107 = d113 * d113 + d114 * d114 + d107 * d107;
    if (d107 < 9.999999974752427e-7) {
     i1 = 23;
     break L4;
    }
    if (d100 - d107 <= d100 * 1.1920928955078125e-7) {
     d100 = d107;
     i1 = 25;
     break L4;
    }
    HEAP32[i17 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
    HEAP32[i17 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
    HEAP32[i17 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
    HEAP32[i17 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
    i106 = HEAP32[i53 >> 2] | 0;
    HEAP32[i53 >> 2] = i106 + 1;
    if ((i106 | 0) > 1e3) {
     d100 = 0.0;
     i36 = 0;
     break L4;
    }
    if ((HEAP32[HEAP32[i34 >> 2] >> 2] | 0) == 4) {
     i1 = 28;
     break;
    } else {
     d100 = d107;
    }
   }
  }
 } while (0);
 if ((i1 | 0) == 15) {
  HEAP32[i35 >> 2] = 10;
  i1 = 29;
 } else if ((i1 | 0) == 17) {
  HEAP32[i35 >> 2] = 1;
  i1 = 29;
 } else if ((i1 | 0) == 19) {
  HEAP32[i35 >> 2] = !(d107 <= 0.0) ? 11 : 2;
  i1 = 29;
 } else if ((i1 | 0) == 21) {
  HEAP32[i35 >> 2] = 3;
  i1 = 29;
 } else if ((i1 | 0) == 23) {
  HEAP32[i17 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
  HEAP32[i17 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
  HEAP32[i35 >> 2] = 6;
  i1 = 29;
 } else if ((i1 | 0) == 25) {
  HEAP32[i35 >> 2] = 12;
  i1 = 29;
 } else if ((i1 | 0) == 28) {
  HEAP32[i35 >> 2] = 13;
  d100 = 0.0;
  i36 = 0;
 }
 do {
  if ((i1 | 0) == 29) {
   __ZN22btVoronoiSimplexSolver14compute_pointsER9btVector3S1_(HEAP32[i34 >> 2] | 0, i15, i2);
   HEAP32[i3 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   d108 = +HEAPF32[i17 >> 2];
   d109 = +HEAPF32[i23 >> 2];
   d110 = +HEAPF32[i22 >> 2];
   d107 = d108 * d108 + d109 * d109 + d110 * d110;
   if (d107 < 1.0e-4) {
    HEAP32[i35 >> 2] = 5;
   }
   if (d107 > 1.4210854715202004e-14) {
    d114 = 1.0 / +Math_sqrt(+d107);
    HEAPF32[i3 >> 2] = d114 * +HEAPF32[i3 >> 2];
    HEAPF32[i14 >> 2] = d114 * +HEAPF32[i14 >> 2];
    HEAPF32[i11 >> 2] = d114 * +HEAPF32[i11 >> 2];
    d100 = +Math_sqrt(+d100);
    d113 = d24 / d100;
    HEAPF32[i15 >> 2] = +HEAPF32[i15 >> 2] - d113 * d108;
    i36 = i15 + 4 | 0;
    HEAPF32[i36 >> 2] = +HEAPF32[i36 >> 2] - d113 * d109;
    i36 = i15 + 8 | 0;
    HEAPF32[i36 >> 2] = +HEAPF32[i36 >> 2] - d113 * d110;
    d100 = d25 / d100;
    HEAPF32[i2 >> 2] = d100 * d108 + +HEAPF32[i2 >> 2];
    i36 = i2 + 4 | 0;
    HEAPF32[i36 >> 2] = d100 * d109 + +HEAPF32[i36 >> 2];
    i36 = i2 + 8 | 0;
    HEAPF32[i36 >> 2] = d100 * d110 + +HEAPF32[i36 >> 2];
    HEAP32[i18 >> 2] = 1;
    d100 = 1.0 / d114 - d31;
    i36 = 1;
    break;
   } else {
    HEAP32[i18 >> 2] = 2;
    d100 = 0.0;
    i36 = 0;
    break;
   }
  }
 } while (0);
 if (((HEAP32[i20 + 72 >> 2] | 0) != 0 ? (HEAP32[i20 + 20 >> 2] | 0) != 0 : 0) ? (HEAP32[i35 >> 2] | 0) != 0 : 0) {
  i37 = d31 + d100 < .01;
 } else {
  i37 = 0;
 }
 i35 = i36 ^ 1;
 do {
  if (i37 | i35 ? (i32 = HEAP32[i20 + 20 >> 2] | 0, (i32 | 0) != 0) : 0) {
   HEAP32[113340] = (HEAP32[113340] | 0) + 1;
   HEAP32[i17 + 0 >> 2] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
   HEAP32[i17 + 8 >> 2] = 0;
   HEAP32[i17 + 12 >> 2] = 0;
   if (!(FUNCTION_TABLE_iiiiiiiiiiii[HEAP32[(HEAP32[i32 >> 2] | 0) + 8 >> 2] & 3](i32, HEAP32[i34 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i27 >> 2] | 0, i26, i33, i17, i12, i13, i29, HEAP32[i30 + 132 >> 2] | 0) | 0)) {
    d107 = +HEAPF32[i17 >> 2];
    d108 = +HEAPF32[i23 >> 2];
    d109 = +HEAPF32[i22 >> 2];
    if (!(d107 * d107 + d108 * d108 + d109 * d109 > 0.0)) {
     i1 = 52;
     break;
    }
    d112 = +HEAPF32[i12 >> 2] - +HEAPF32[i13 >> 2];
    d113 = +HEAPF32[i12 + 4 >> 2] - +HEAPF32[i13 + 4 >> 2];
    d114 = +HEAPF32[i12 + 8 >> 2] - +HEAPF32[i13 + 8 >> 2];
    d31 = +Math_sqrt(+(d112 * d112 + d113 * d113 + d114 * d114)) - d31;
    if (d31 < d100 | i35) {
     HEAP32[i15 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
     HEAP32[i15 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
     HEAP32[i15 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
     HEAP32[i2 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i2 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i2 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i2 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     HEAPF32[i15 >> 2] = +HEAPF32[i15 >> 2] - d24 * d107;
     i106 = i15 + 4 | 0;
     HEAPF32[i106 >> 2] = +HEAPF32[i106 >> 2] - d24 * d108;
     i106 = i15 + 8 | 0;
     HEAPF32[i106 >> 2] = +HEAPF32[i106 >> 2] - d24 * d109;
     HEAPF32[i2 >> 2] = d25 * d107 + +HEAPF32[i2 >> 2];
     i106 = i2 + 4 | 0;
     HEAPF32[i106 >> 2] = d25 * d108 + +HEAPF32[i106 >> 2];
     i106 = i2 + 8 | 0;
     HEAPF32[i106 >> 2] = d25 * d109 + +HEAPF32[i106 >> 2];
     HEAP32[i3 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
     HEAP32[i3 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
     HEAP32[i3 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
     d112 = +HEAPF32[i3 >> 2];
     d113 = +HEAPF32[i14 >> 2];
     d114 = +HEAPF32[i11 >> 2];
     d100 = 1.0 / +Math_sqrt(+(d112 * d112 + d113 * d113 + d114 * d114));
     HEAPF32[i3 >> 2] = d112 * d100;
     HEAPF32[i14 >> 2] = d113 * d100;
     HEAPF32[i11 >> 2] = d114 * d100;
     HEAP32[i18 >> 2] = 6;
     d100 = d31;
     break;
    }
    HEAP32[i18 >> 2] = 5;
    if (i36) {
     break;
    }
    STACKTOP = i4;
    return;
   }
   d31 = +HEAPF32[i13 >> 2];
   d107 = +HEAPF32[i12 >> 2];
   d113 = d31 - d107;
   d25 = +HEAPF32[i13 + 4 >> 2];
   d24 = +HEAPF32[i12 + 4 >> 2];
   d112 = d25 - d24;
   d109 = +HEAPF32[i13 + 8 >> 2];
   d108 = +HEAPF32[i12 + 8 >> 2];
   d111 = d109 - d108;
   d110 = d113 * d113 + d112 * d112 + d111 * d111;
   if (!(d110 <= 1.4210854715202004e-14)) {
    d114 = 0.0;
   } else {
    d116 = +HEAPF32[i20 + 4 >> 2];
    d115 = +HEAPF32[i23 >> 2];
    d110 = +HEAPF32[i22 >> 2];
    d111 = d110;
    d112 = d115;
    d113 = d116;
    d114 = +HEAPF32[i21 >> 2];
    d110 = d116 * d116 + d115 * d115 + d110 * d110;
   }
   if (!(d110 > 1.4210854715202004e-14)) {
    HEAP32[i18 >> 2] = 9;
    if (i36) {
     break;
    }
    STACKTOP = i4;
    return;
   }
   d110 = 1.0 / +Math_sqrt(+d110);
   d115 = d107 - d31;
   d116 = d24 - d25;
   d24 = d108 - d109;
   d24 = -+Math_sqrt(+(d115 * d115 + d116 * d116 + d24 * d24));
   if (d100 > d24 | i35) {
    d100 = d111 * d110;
    d116 = d112 * d110;
    d115 = d113 * d110;
    HEAP32[i15 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
    HEAP32[i15 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
    HEAP32[i2 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
    HEAP32[i2 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
    HEAP32[i2 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
    HEAPF32[i3 >> 2] = d115;
    HEAPF32[i14 >> 2] = d116;
    HEAPF32[i11 >> 2] = d100;
    HEAPF32[i19 >> 2] = d114;
    HEAP32[i18 >> 2] = 3;
    d100 = d24;
    break;
   }
   HEAP32[i18 >> 2] = 8;
   if (!i36) {
    STACKTOP = i4;
    return;
   }
  } else {
   i1 = 52;
  }
 } while (0);
 if ((i1 | 0) == 52) {
  if (!i36) {
   STACKTOP = i4;
   return;
  }
 }
 if (!(d100 < 0.0) ? !(d100 * d100 < +HEAPF32[i16 >> 2]) : 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i17 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i10 >> 2] = d100;
 i106 = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0;
 d115 = d9 + +HEAPF32[i2 + 4 >> 2];
 d116 = d8 + +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i6 >> 2] = d7 + +HEAPF32[i2 >> 2];
 HEAPF32[i6 + 4 >> 2] = d115;
 HEAPF32[i6 + 8 >> 2] = d116;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiid[i106 & 7](i5, i3, i6, d100);
 STACKTOP = i4;
 return;
}
function __ZN16btCollisionWorld15debugDrawObjectERK11btTransformPK16btCollisionShapeRK9btVector3(i2, i3, i12, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, d41 = 0.0, d42 = 0.0, i43 = 0, i44 = 0, i45 = 0, d46 = 0.0, i47 = 0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, i69 = 0, i70 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i11 = i1 + 416 | 0;
 i24 = i1 + 400 | 0;
 i21 = i1 + 384 | 0;
 i10 = i1 + 320 | 0;
 i25 = i1 + 304 | 0;
 i22 = i1 + 288 | 0;
 i23 = i1 + 272 | 0;
 i19 = i1 + 176 | 0;
 i20 = i1 + 160 | 0;
 i18 = i1 + 144 | 0;
 i8 = i1 + 128 | 0;
 i9 = i1 + 112 | 0;
 i5 = i1 + 96 | 0;
 i6 = i1 + 80 | 0;
 i7 = i1 + 64 | 0;
 i16 = i1 + 48 | 0;
 i13 = i1 + 32 | 0;
 i14 = i1 + 16 | 0;
 i15 = i1;
 i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[i17 >> 2] | 0) + 56 >> 2] & 1](i17, i3, 1.0);
 i17 = i12 + 4 | 0;
 i26 = HEAP32[i17 >> 2] | 0;
 switch (i26 | 0) {
 case 8:
  {
   d46 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_vidii[HEAP32[(HEAP32[i47 >> 2] | 0) + 16 >> 2] & 0](i47, d46, i3, i4);
   STACKTOP = i1;
   return;
  }
 case 28:
  {
   d46 = +HEAPF32[i12 + 64 >> 2];
   i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viidii[HEAP32[(HEAP32[i47 >> 2] | 0) + 88 >> 2] & 0](i47, i12 + 48 | 0, d46, i3, i4);
   STACKTOP = i1;
   return;
  }
 case 0:
  {
   i47 = i12 + 28 | 0;
   HEAP32[i24 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
   HEAP32[i24 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
   HEAP32[i24 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
   HEAP32[i24 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
   d41 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   d42 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   d46 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   d41 = d41 + +HEAPF32[i24 >> 2];
   HEAPF32[i24 >> 2] = d41;
   i47 = i24 + 4 | 0;
   d42 = d42 + +HEAPF32[i47 >> 2];
   HEAPF32[i47 >> 2] = d42;
   i47 = i24 + 8 | 0;
   d46 = d46 + +HEAPF32[i47 >> 2];
   HEAPF32[i47 >> 2] = d46;
   i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
   i45 = HEAP32[(HEAP32[i47 >> 2] | 0) + 72 >> 2] | 0;
   HEAPF32[i21 >> 2] = -d41;
   HEAPF32[i21 + 4 >> 2] = -d42;
   HEAPF32[i21 + 8 >> 2] = -d46;
   HEAPF32[i21 + 12 >> 2] = 0.0;
   FUNCTION_TABLE_viiiii[i45 & 31](i47, i21, i24, i3, i4);
   STACKTOP = i1;
   return;
  }
 case 9:
  {
   i8 = HEAP32[i12 + 92 >> 2] | 0;
   if ((i8 | 0) <= 0) {
    STACKTOP = i1;
    return;
   }
   i5 = i12 + 100 | 0;
   i11 = i12 + 120 | 0;
   i12 = i3 + 4 | 0;
   i13 = i3 + 8 | 0;
   i14 = i3 + 16 | 0;
   i6 = i3 + 20 | 0;
   i16 = i3 + 24 | 0;
   i17 = i3 + 32 | 0;
   i19 = i3 + 36 | 0;
   i20 = i3 + 40 | 0;
   i21 = i3 + 48 | 0;
   i22 = i3 + 52 | 0;
   i34 = i3 + 56 | 0;
   i33 = i10 + 4 | 0;
   i32 = i10 + 8 | 0;
   i31 = i10 + 12 | 0;
   i30 = i10 + 16 | 0;
   i29 = i10 + 20 | 0;
   i28 = i10 + 24 | 0;
   i27 = i10 + 28 | 0;
   i26 = i10 + 32 | 0;
   i25 = i10 + 36 | 0;
   i24 = i10 + 40 | 0;
   i23 = i10 + 44 | 0;
   i9 = i10 + 48 | 0;
   i15 = i10 + 52 | 0;
   i7 = i10 + 56 | 0;
   i18 = i10 + 60 | 0;
   do {
    i8 = i8 + -1 | 0;
    i47 = HEAP32[i5 >> 2] | 0;
    d68 = +HEAPF32[i47 + (i8 << 4) >> 2];
    d67 = +HEAPF32[i47 + (i8 << 4) + 4 >> 2];
    d42 = +HEAPF32[i47 + (i8 << 4) + 8 >> 2];
    i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
    i45 = HEAP32[(HEAP32[i47 >> 2] | 0) + 16 >> 2] | 0;
    d46 = +HEAPF32[(HEAP32[i11 >> 2] | 0) + (i8 << 2) >> 2];
    d66 = +HEAPF32[i3 >> 2];
    d65 = +HEAPF32[i12 >> 2];
    d61 = d65 * 0.0;
    d63 = +HEAPF32[i13 >> 2];
    d64 = d63 * 0.0;
    d62 = d66 * 0.0;
    d60 = +HEAPF32[i14 >> 2];
    d59 = +HEAPF32[i6 >> 2];
    d55 = d59 * 0.0;
    d57 = +HEAPF32[i16 >> 2];
    d58 = d57 * 0.0;
    d56 = d60 * 0.0;
    d54 = +HEAPF32[i17 >> 2];
    d53 = +HEAPF32[i19 >> 2];
    d49 = d53 * 0.0;
    d51 = +HEAPF32[i20 >> 2];
    d52 = d51 * 0.0;
    d50 = d54 * 0.0;
    d48 = d68 * d66 + d67 * d65 + d42 * d63 + +HEAPF32[i21 >> 2];
    d41 = d68 * d60 + d67 * d59 + d42 * d57 + +HEAPF32[i22 >> 2];
    d42 = d68 * d54 + d67 * d53 + d42 * d51 + +HEAPF32[i34 >> 2];
    HEAPF32[i10 >> 2] = d66 + d61 + d64;
    HEAPF32[i33 >> 2] = d62 + d65 + d64;
    HEAPF32[i32 >> 2] = d63 + (d62 + d61);
    HEAPF32[i31 >> 2] = 0.0;
    HEAPF32[i30 >> 2] = d60 + d55 + d58;
    HEAPF32[i29 >> 2] = d56 + d59 + d58;
    HEAPF32[i28 >> 2] = d57 + (d56 + d55);
    HEAPF32[i27 >> 2] = 0.0;
    HEAPF32[i26 >> 2] = d54 + d49 + d52;
    HEAPF32[i25 >> 2] = d50 + d53 + d52;
    HEAPF32[i24 >> 2] = d51 + (d50 + d49);
    HEAPF32[i23 >> 2] = 0.0;
    HEAPF32[i9 >> 2] = d48;
    HEAPF32[i15 >> 2] = d41;
    HEAPF32[i7 >> 2] = d42;
    HEAPF32[i18 >> 2] = 0.0;
    FUNCTION_TABLE_vidii[i45 & 0](i47, d46, i10, i4);
   } while ((i8 | 0) > 0);
   STACKTOP = i1;
   return;
  }
 case 13:
  {
   i47 = HEAP32[i12 + 52 >> 2] | 0;
   d67 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] & 7](i12);
   i45 = i12 + 28 | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
   d65 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   d66 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   d68 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 7](i12);
   HEAPF32[i25 >> 2] = d65 + +HEAPF32[i25 >> 2];
   i45 = i25 + 4 | 0;
   HEAPF32[i45 >> 2] = d66 + +HEAPF32[i45 >> 2];
   i45 = i25 + 8 | 0;
   HEAPF32[i45 >> 2] = d68 + +HEAPF32[i45 >> 2];
   d68 = +HEAPF32[i25 + (i47 << 2) >> 2];
   i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viddiii[HEAP32[(HEAP32[i45 >> 2] | 0) + 80 >> 2] & 0](i45, d67, d68, i47, i3, i4);
   STACKTOP = i1;
   return;
  }
 case 10:
  {
   i47 = HEAP32[i12 + 52 >> 2] | 0;
   d67 = +HEAPF32[i12 + (((i47 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
   d68 = +HEAPF32[i12 + (i47 << 2) + 28 >> 2];
   i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viddiii[HEAP32[(HEAP32[i45 >> 2] | 0) + 76 >> 2] & 0](i45, d67, d68, i47, i3, i4);
   STACKTOP = i1;
   return;
  }
 case 11:
  {
   d67 = +HEAPF32[i12 + 56 >> 2];
   d68 = +HEAPF32[i12 + 60 >> 2];
   i47 = HEAP32[i12 + 68 >> 2] | 0;
   i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viddiii[HEAP32[(HEAP32[i45 >> 2] | 0) + 84 >> 2] & 0](i45, d67, d68, i47, i3, i4);
   STACKTOP = i1;
   return;
  }
 case 31:
  {
   i8 = HEAP32[i12 + 16 >> 2] | 0;
   if ((i8 | 0) <= 0) {
    STACKTOP = i1;
    return;
   }
   i25 = i12 + 24 | 0;
   i26 = i3 + 4 | 0;
   i27 = i3 + 8 | 0;
   i28 = i3 + 16 | 0;
   i29 = i3 + 20 | 0;
   i30 = i3 + 24 | 0;
   i31 = i3 + 32 | 0;
   i32 = i3 + 36 | 0;
   i33 = i3 + 40 | 0;
   i5 = i3 + 48 | 0;
   i6 = i3 + 52 | 0;
   i7 = i3 + 56 | 0;
   i9 = i11 + 4 | 0;
   i10 = i11 + 8 | 0;
   i12 = i11 + 12 | 0;
   i13 = i11 + 16 | 0;
   i14 = i11 + 20 | 0;
   i15 = i11 + 24 | 0;
   i16 = i11 + 28 | 0;
   i17 = i11 + 32 | 0;
   i18 = i11 + 36 | 0;
   i19 = i11 + 40 | 0;
   i20 = i11 + 44 | 0;
   i21 = i11 + 48 | 0;
   i22 = i11 + 52 | 0;
   i23 = i11 + 56 | 0;
   i24 = i11 + 60 | 0;
   do {
    i8 = i8 + -1 | 0;
    i47 = HEAP32[i25 >> 2] | 0;
    d54 = +HEAPF32[i47 + (i8 * 80 | 0) >> 2];
    d57 = +HEAPF32[i47 + (i8 * 80 | 0) + 4 >> 2];
    d60 = +HEAPF32[i47 + (i8 * 80 | 0) + 8 >> 2];
    d55 = +HEAPF32[i47 + (i8 * 80 | 0) + 16 >> 2];
    d58 = +HEAPF32[i47 + (i8 * 80 | 0) + 20 >> 2];
    d62 = +HEAPF32[i47 + (i8 * 80 | 0) + 24 >> 2];
    d56 = +HEAPF32[i47 + (i8 * 80 | 0) + 32 >> 2];
    d59 = +HEAPF32[i47 + (i8 * 80 | 0) + 36 >> 2];
    d64 = +HEAPF32[i47 + (i8 * 80 | 0) + 40 >> 2];
    d42 = +HEAPF32[i47 + (i8 * 80 | 0) + 48 >> 2];
    d46 = +HEAPF32[i47 + (i8 * 80 | 0) + 52 >> 2];
    d68 = +HEAPF32[i47 + (i8 * 80 | 0) + 56 >> 2];
    i47 = HEAP32[i47 + (i8 * 80 | 0) + 64 >> 2] | 0;
    i45 = HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0;
    d48 = +HEAPF32[i3 >> 2];
    d49 = +HEAPF32[i26 >> 2];
    d50 = +HEAPF32[i27 >> 2];
    d51 = +HEAPF32[i28 >> 2];
    d52 = +HEAPF32[i29 >> 2];
    d53 = +HEAPF32[i30 >> 2];
    d61 = +HEAPF32[i31 >> 2];
    d63 = +HEAPF32[i32 >> 2];
    d65 = +HEAPF32[i33 >> 2];
    d66 = d42 * d48 + d46 * d49 + d68 * d50 + +HEAPF32[i5 >> 2];
    d67 = d42 * d51 + d46 * d52 + d68 * d53 + +HEAPF32[i6 >> 2];
    d68 = d42 * d61 + d46 * d63 + d68 * d65 + +HEAPF32[i7 >> 2];
    HEAPF32[i11 >> 2] = d54 * d48 + d55 * d49 + d56 * d50;
    HEAPF32[i9 >> 2] = d57 * d48 + d58 * d49 + d59 * d50;
    HEAPF32[i10 >> 2] = d60 * d48 + d62 * d49 + d64 * d50;
    HEAPF32[i12 >> 2] = 0.0;
    HEAPF32[i13 >> 2] = d54 * d51 + d55 * d52 + d56 * d53;
    HEAPF32[i14 >> 2] = d57 * d51 + d58 * d52 + d59 * d53;
    HEAPF32[i15 >> 2] = d60 * d51 + d62 * d52 + d64 * d53;
    HEAPF32[i16 >> 2] = 0.0;
    HEAPF32[i17 >> 2] = d54 * d61 + d55 * d63 + d56 * d65;
    HEAPF32[i18 >> 2] = d57 * d61 + d58 * d63 + d59 * d65;
    HEAPF32[i19 >> 2] = d60 * d61 + d62 * d63 + d64 * d65;
    HEAPF32[i20 >> 2] = 0.0;
    HEAPF32[i21 >> 2] = d66;
    HEAPF32[i22 >> 2] = d67;
    HEAPF32[i23 >> 2] = d68;
    HEAPF32[i24 >> 2] = 0.0;
    FUNCTION_TABLE_viiii[i45 & 63](i2, i11, i47, i4);
   } while ((i8 | 0) > 0);
   STACKTOP = i1;
   return;
  }
 default:
  {
   if ((i26 + -21 | 0) >>> 0 < 9) {
    HEAPF32[i22 >> 2] = 999999984306749400.0;
    HEAPF32[i22 + 4 >> 2] = 999999984306749400.0;
    HEAPF32[i22 + 8 >> 2] = 999999984306749400.0;
    HEAPF32[i22 + 12 >> 2] = 0.0;
    HEAPF32[i23 >> 2] = -999999984306749400.0;
    HEAPF32[i23 + 4 >> 2] = -999999984306749400.0;
    HEAPF32[i23 + 8 >> 2] = -999999984306749400.0;
    HEAPF32[i23 + 12 >> 2] = 0.0;
    i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
    HEAP32[i19 >> 2] = 449184;
    HEAP32[i19 + 4 >> 2] = 449208;
    HEAP32[i19 + 8 >> 2] = i26;
    i26 = i19 + 12 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
    i26 = i19 + 28 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    i26 = i19 + 44 | 0;
    i47 = i3 + 16 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
    i26 = i19 + 60 | 0;
    i47 = i3 + 32 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
    i26 = i19 + 76 | 0;
    i47 = i3 + 48 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 60 >> 2] & 63](i12, i19, i23, i22);
    i26 = HEAP32[i17 >> 2] | 0;
   }
   if ((i26 | 0) == 3) {
    HEAPF32[i20 >> 2] = 999999984306749400.0;
    HEAPF32[i20 + 4 >> 2] = 999999984306749400.0;
    HEAPF32[i20 + 8 >> 2] = 999999984306749400.0;
    HEAPF32[i20 + 12 >> 2] = 0.0;
    HEAPF32[i18 >> 2] = -999999984306749400.0;
    HEAPF32[i18 + 4 >> 2] = -999999984306749400.0;
    HEAPF32[i18 + 8 >> 2] = -999999984306749400.0;
    HEAPF32[i18 + 12 >> 2] = 0.0;
    i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
    HEAP32[i19 >> 2] = 449184;
    HEAP32[i19 + 4 >> 2] = 449208;
    HEAP32[i19 + 8 >> 2] = i26;
    i26 = i19 + 12 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
    i26 = i19 + 28 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    i26 = i19 + 44 | 0;
    i47 = i3 + 16 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
    i26 = i19 + 60 | 0;
    i47 = i3 + 32 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
    i26 = i19 + 76 | 0;
    i47 = i3 + 48 | 0;
    HEAP32[i26 + 0 >> 2] = HEAP32[i47 + 0 >> 2];
    HEAP32[i26 + 4 >> 2] = HEAP32[i47 + 4 >> 2];
    HEAP32[i26 + 8 >> 2] = HEAP32[i47 + 8 >> 2];
    HEAP32[i26 + 12 >> 2] = HEAP32[i47 + 12 >> 2];
    i26 = HEAP32[i12 + 92 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 8 >> 2] & 63](i26, i19 + 4 | 0, i18, i20);
    i26 = HEAP32[i17 >> 2] | 0;
   }
   if ((i26 | 0) >= 7) {
    STACKTOP = i1;
    return;
   }
   i32 = HEAP32[i12 + 52 >> 2] | 0;
   if ((i32 | 0) == 0) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] & 127](i12) | 0) <= 0) {
     STACKTOP = i1;
     return;
    }
    i24 = i3 + 4 | 0;
    i25 = i16 + 4 | 0;
    i31 = i3 + 8 | 0;
    i30 = i16 + 8 | 0;
    i29 = i3 + 48 | 0;
    i28 = i3 + 16 | 0;
    i27 = i3 + 20 | 0;
    i22 = i3 + 24 | 0;
    i21 = i3 + 52 | 0;
    i20 = i3 + 32 | 0;
    i19 = i3 + 36 | 0;
    i18 = i3 + 40 | 0;
    i17 = i3 + 56 | 0;
    i11 = i14 + 4 | 0;
    i10 = i14 + 8 | 0;
    i9 = i14 + 12 | 0;
    i8 = i13 + 4 | 0;
    i23 = i13 + 8 | 0;
    i7 = i15 + 4 | 0;
    i6 = i15 + 8 | 0;
    i26 = i15 + 12 | 0;
    i5 = 0;
    do {
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 96 >> 2] & 63](i12, i5, i16, i13);
     d55 = +HEAPF32[i3 >> 2];
     d67 = +HEAPF32[i16 >> 2];
     d56 = +HEAPF32[i24 >> 2];
     d65 = +HEAPF32[i25 >> 2];
     d57 = +HEAPF32[i31 >> 2];
     d63 = +HEAPF32[i30 >> 2];
     d54 = +HEAPF32[i29 >> 2];
     d59 = +HEAPF32[i28 >> 2];
     d60 = +HEAPF32[i27 >> 2];
     d61 = +HEAPF32[i22 >> 2];
     d58 = +HEAPF32[i21 >> 2];
     d64 = +HEAPF32[i20 >> 2];
     d66 = +HEAPF32[i19 >> 2];
     d68 = +HEAPF32[i18 >> 2];
     d62 = +HEAPF32[i17 >> 2];
     HEAPF32[i14 >> 2] = d54 + (d55 * d67 + d56 * d65 + d57 * d63);
     HEAPF32[i11 >> 2] = d58 + (d67 * d59 + d65 * d60 + d63 * d61);
     HEAPF32[i10 >> 2] = d62 + (d67 * d64 + d65 * d66 + d63 * d68);
     HEAPF32[i9 >> 2] = 0.0;
     d63 = +HEAPF32[i13 >> 2];
     d65 = +HEAPF32[i8 >> 2];
     d67 = +HEAPF32[i23 >> 2];
     HEAPF32[i15 >> 2] = d54 + (d55 * d63 + d56 * d65 + d57 * d67);
     HEAPF32[i7 >> 2] = d58 + (d63 * d59 + d65 * d60 + d67 * d61);
     HEAPF32[i6 >> 2] = d62 + (d63 * d64 + d65 * d66 + d67 * d68);
     HEAPF32[i26 >> 2] = 0.0;
     i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i47 >> 2] | 0) + 8 >> 2] & 63](i47, i14, i15, i4);
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] & 127](i12) | 0));
    STACKTOP = i1;
    return;
   }
   i16 = i32 + 28 | 0;
   if ((HEAP32[i16 >> 2] | 0) <= 0) {
    STACKTOP = i1;
    return;
   }
   i13 = i32 + 36 | 0;
   i17 = i5 + 4 | 0;
   i18 = i5 + 8 | 0;
   i11 = i5 + 12 | 0;
   i12 = i3 + 4 | 0;
   i14 = i3 + 8 | 0;
   i15 = i3 + 48 | 0;
   i19 = i3 + 16 | 0;
   i20 = i3 + 20 | 0;
   i21 = i3 + 24 | 0;
   i22 = i3 + 52 | 0;
   i23 = i3 + 32 | 0;
   i24 = i3 + 36 | 0;
   i31 = i3 + 40 | 0;
   i30 = i3 + 56 | 0;
   i29 = i6 + 4 | 0;
   i28 = i6 + 8 | 0;
   i27 = i6 + 12 | 0;
   i26 = i7 + 4 | 0;
   i25 = i7 + 8 | 0;
   i10 = i7 + 12 | 0;
   i38 = i32 + 16 | 0;
   i37 = i8 + 4 | 0;
   i34 = i8 + 8 | 0;
   i35 = i8 + 12 | 0;
   i36 = i9 + 4 | 0;
   i32 = i9 + 8 | 0;
   i33 = i9 + 12 | 0;
   i40 = 0;
   do {
    i44 = HEAP32[i13 >> 2] | 0;
    i39 = HEAP32[i44 + (i40 * 56 | 0) + 4 >> 2] | 0;
    L28 : do {
     if ((i39 | 0) > 0) {
      i45 = HEAP32[i44 + (i40 * 56 | 0) + 12 >> 2] | 0;
      i44 = i45;
      d46 = 0.0;
      d42 = 0.0;
      d41 = 0.0;
      i45 = HEAP32[i45 + (i39 + -1 << 2) >> 2] | 0;
      i47 = 0;
      while (1) {
       i43 = HEAP32[i44 + (i47 << 2) >> 2] | 0;
       i44 = HEAP32[i38 >> 2] | 0;
       d46 = d46 + +HEAPF32[i44 + (i43 << 4) >> 2];
       d42 = d42 + +HEAPF32[i44 + (i43 << 4) + 4 >> 2];
       d41 = d41 + +HEAPF32[i44 + (i43 << 4) + 8 >> 2];
       i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
       i69 = HEAP32[(HEAP32[i44 >> 2] | 0) + 8 >> 2] | 0;
       i70 = HEAP32[i38 >> 2] | 0;
       d55 = +HEAPF32[i3 >> 2];
       d67 = +HEAPF32[i70 + (i45 << 4) >> 2];
       d56 = +HEAPF32[i12 >> 2];
       d65 = +HEAPF32[i70 + (i45 << 4) + 4 >> 2];
       d57 = +HEAPF32[i14 >> 2];
       d63 = +HEAPF32[i70 + (i45 << 4) + 8 >> 2];
       d54 = +HEAPF32[i15 >> 2];
       d59 = +HEAPF32[i19 >> 2];
       d60 = +HEAPF32[i20 >> 2];
       d61 = +HEAPF32[i21 >> 2];
       d58 = +HEAPF32[i22 >> 2];
       d64 = +HEAPF32[i23 >> 2];
       d66 = +HEAPF32[i24 >> 2];
       d68 = +HEAPF32[i31 >> 2];
       d62 = +HEAPF32[i30 >> 2];
       HEAPF32[i8 >> 2] = d54 + (d55 * d67 + d56 * d65 + d57 * d63);
       HEAPF32[i37 >> 2] = d58 + (d67 * d59 + d65 * d60 + d63 * d61);
       HEAPF32[i34 >> 2] = d62 + (d67 * d64 + d65 * d66 + d63 * d68);
       HEAPF32[i35 >> 2] = 0.0;
       d63 = +HEAPF32[i70 + (i43 << 4) >> 2];
       d65 = +HEAPF32[i70 + (i43 << 4) + 4 >> 2];
       d67 = +HEAPF32[i70 + (i43 << 4) + 8 >> 2];
       HEAPF32[i9 >> 2] = d54 + (d55 * d63 + d56 * d65 + d57 * d67);
       HEAPF32[i36 >> 2] = d58 + (d63 * d59 + d65 * d60 + d67 * d61);
       HEAPF32[i32 >> 2] = d62 + (d63 * d64 + d65 * d66 + d67 * d68);
       HEAPF32[i33 >> 2] = 0.0;
       FUNCTION_TABLE_viiii[i69 & 63](i44, i8, i9, i4);
       i47 = i47 + 1 | 0;
       i44 = HEAP32[i13 >> 2] | 0;
       if ((i47 | 0) >= (HEAP32[i44 + (i40 * 56 | 0) + 4 >> 2] | 0)) {
        break L28;
       }
       i44 = HEAP32[i44 + (i40 * 56 | 0) + 12 >> 2] | 0;
       i45 = i43;
      }
     } else {
      d46 = 0.0;
      d42 = 0.0;
      d41 = 0.0;
     }
    } while (0);
    d53 = 1.0 / +(i39 | 0);
    d51 = d46 * d53;
    d52 = d42 * d53;
    d53 = d41 * d53;
    HEAPF32[i5 >> 2] = 1.0;
    HEAPF32[i17 >> 2] = 1.0;
    HEAPF32[i18 >> 2] = 0.0;
    HEAPF32[i11 >> 2] = 0.0;
    d63 = +HEAPF32[i44 + (i40 * 56 | 0) + 40 >> 2];
    d65 = +HEAPF32[i44 + (i40 * 56 | 0) + 44 >> 2];
    d67 = +HEAPF32[i44 + (i40 * 56 | 0) + 48 >> 2];
    i70 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
    i69 = HEAP32[(HEAP32[i70 >> 2] | 0) + 8 >> 2] | 0;
    d55 = +HEAPF32[i3 >> 2];
    d56 = +HEAPF32[i12 >> 2];
    d57 = +HEAPF32[i14 >> 2];
    d54 = +HEAPF32[i15 >> 2];
    d59 = +HEAPF32[i19 >> 2];
    d60 = +HEAPF32[i20 >> 2];
    d61 = +HEAPF32[i21 >> 2];
    d58 = +HEAPF32[i22 >> 2];
    d64 = +HEAPF32[i23 >> 2];
    d66 = +HEAPF32[i24 >> 2];
    d68 = +HEAPF32[i31 >> 2];
    d62 = +HEAPF32[i30 >> 2];
    HEAPF32[i6 >> 2] = d54 + (d51 * d55 + d52 * d56 + d53 * d57);
    HEAPF32[i29 >> 2] = d58 + (d51 * d59 + d52 * d60 + d53 * d61);
    HEAPF32[i28 >> 2] = d62 + (d51 * d64 + d52 * d66 + d53 * d68);
    HEAPF32[i27 >> 2] = 0.0;
    d63 = d51 + d63;
    d65 = d52 + d65;
    d67 = d53 + d67;
    HEAPF32[i7 >> 2] = d54 + (d63 * d55 + d65 * d56 + d67 * d57);
    HEAPF32[i26 >> 2] = d58 + (d63 * d59 + d65 * d60 + d67 * d61);
    HEAPF32[i25 >> 2] = d62 + (d63 * d64 + d65 * d66 + d67 * d68);
    HEAPF32[i10 >> 2] = 0.0;
    FUNCTION_TABLE_viiii[i69 & 63](i70, i6, i7, i5);
    i40 = i40 + 1 | 0;
   } while ((i40 | 0) < (HEAP32[i16 >> 2] | 0));
   STACKTOP = i1;
   return;
  }
 }
}
function __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i3, i28, i26, i4, i5) {
 i3 = i3 | 0;
 i28 = i28 | 0;
 i26 = i26 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0, d25 = 0.0, i27 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, d52 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i29 = i2 + 208 | 0;
 i49 = i2 + 144 | 0;
 i50 = i2 + 80 | 0;
 i51 = i2 + 64 | 0;
 i27 = i2 + 48 | 0;
 i48 = i2 + 32 | 0;
 i31 = i2 + 16 | 0;
 i30 = i2;
 i18 = i3 + 496 | 0;
 HEAPF32[i18 >> 2] = 0.0;
 HEAPF32[i3 + 492 >> 2] = 0.0;
 i6 = i3 + 517 | 0;
 HEAP8[i6] = 0;
 i1 = i3 + 518 | 0;
 HEAP8[i1] = 0;
 if ((HEAP8[i3 + 544 | 0] | 0) != 0 ? (HEAP8[i3 + 519 | 0] | 0) == 0 : 0) {
  d47 = +HEAPF32[i3 + 548 >> 2];
  d12 = +HEAPF32[i3 + 552 >> 2];
  d43 = +HEAPF32[i3 + 556 >> 2];
  d38 = +HEAPF32[i3 + 560 >> 2];
  d41 = 2.0 / (d47 * d47 + d12 * d12 + d43 * d43 + d38 * d38);
  d11 = d47 * d41;
  d44 = d12 * d41;
  d41 = d43 * d41;
  d42 = d38 * d11;
  d40 = d38 * d44;
  d38 = d38 * d41;
  d11 = d47 * d11;
  d34 = d47 * d44;
  d47 = d47 * d41;
  d44 = d12 * d44;
  d12 = d12 * d41;
  d41 = d43 * d41;
  d43 = 1.0 - (d44 + d41);
  d35 = d34 - d38;
  d37 = d47 + d40;
  d38 = d34 + d38;
  d41 = 1.0 - (d11 + d41);
  d34 = d12 - d42;
  d40 = d47 - d40;
  d42 = d12 + d42;
  d44 = 1.0 - (d11 + d44);
  __ZNK11btTransformmlERKS_(i29, i28, i3 + 292 | 0);
  __ZNK11btTransformmlERKS_(i49, i26, i3 + 356 | 0);
  d11 = +HEAPF32[i49 >> 2];
  d12 = +HEAPF32[i49 + 4 >> 2];
  d47 = +HEAPF32[i49 + 8 >> 2];
  d21 = d43 * d11 + d38 * d12 + d40 * d47;
  d22 = d35 * d11 + d41 * d12 + d42 * d47;
  d23 = d37 * d11 + d34 * d12 + d44 * d47;
  d13 = +HEAPF32[i49 + 16 >> 2];
  d14 = +HEAPF32[i49 + 20 >> 2];
  d46 = +HEAPF32[i49 + 24 >> 2];
  d25 = d43 * d13 + d38 * d14 + d40 * d46;
  d32 = d35 * d13 + d41 * d14 + d42 * d46;
  d33 = d37 * d13 + d34 * d14 + d44 * d46;
  d15 = +HEAPF32[i49 + 32 >> 2];
  d16 = +HEAPF32[i49 + 36 >> 2];
  d17 = +HEAPF32[i49 + 40 >> 2];
  d40 = d43 * d15 + d38 * d16 + d40 * d17;
  d42 = d35 * d15 + d41 * d16 + d42 * d17;
  d44 = d37 * d15 + d34 * d16 + d44 * d17;
  d34 = +HEAPF32[i29 >> 2];
  d37 = +HEAPF32[i29 + 16 >> 2];
  d41 = +HEAPF32[i29 + 32 >> 2];
  d35 = +HEAPF32[i29 + 4 >> 2];
  d38 = +HEAPF32[i29 + 20 >> 2];
  d43 = +HEAPF32[i29 + 36 >> 2];
  d36 = +HEAPF32[i29 + 8 >> 2];
  d39 = +HEAPF32[i29 + 24 >> 2];
  d7 = +HEAPF32[i29 + 40 >> 2];
  d9 = -+HEAPF32[i29 + 48 >> 2];
  d10 = -+HEAPF32[i29 + 52 >> 2];
  d19 = -+HEAPF32[i29 + 56 >> 2];
  d20 = d34 * d9 + d37 * d10 + d41 * d19;
  d45 = d35 * d9 + d38 * d10 + d43 * d19;
  d19 = d36 * d9 + d39 * d10 + d7 * d19;
  d47 = d11 * 0.0 + d12 * 0.0 + d47 * 0.0 + +HEAPF32[i49 + 48 >> 2] + (d23 * d19 + (d21 * d20 + d22 * d45));
  d46 = d13 * 0.0 + d14 * 0.0 + d46 * 0.0 + +HEAPF32[i49 + 52 >> 2] + (d33 * d19 + (d25 * d20 + d32 * d45));
  d45 = d15 * 0.0 + d16 * 0.0 + d17 * 0.0 + +HEAPF32[i49 + 56 >> 2] + (d44 * d19 + (d40 * d20 + d42 * d45));
  HEAPF32[i50 >> 2] = d21 * d34 + d22 * d35 + d23 * d36;
  HEAPF32[i50 + 4 >> 2] = d21 * d37 + d22 * d38 + d23 * d39;
  HEAPF32[i50 + 8 >> 2] = d21 * d41 + d22 * d43 + d23 * d7;
  HEAPF32[i50 + 12 >> 2] = 0.0;
  HEAPF32[i50 + 16 >> 2] = d25 * d34 + d32 * d35 + d33 * d36;
  HEAPF32[i50 + 20 >> 2] = d25 * d37 + d32 * d38 + d33 * d39;
  HEAPF32[i50 + 24 >> 2] = d25 * d41 + d32 * d43 + d33 * d7;
  HEAPF32[i50 + 28 >> 2] = 0.0;
  HEAPF32[i50 + 32 >> 2] = d40 * d34 + d42 * d35 + d44 * d36;
  HEAPF32[i50 + 36 >> 2] = d40 * d37 + d42 * d38 + d44 * d39;
  HEAPF32[i50 + 40 >> 2] = d40 * d41 + d42 * d43 + d44 * d7;
  HEAPF32[i50 + 44 >> 2] = 0.0;
  HEAPF32[i50 + 48 >> 2] = d47;
  HEAPF32[i50 + 52 >> 2] = d46;
  HEAPF32[i50 + 56 >> 2] = d45;
  HEAPF32[i50 + 60 >> 2] = 0.0;
  __ZNK11btMatrix3x311getRotationER12btQuaternion(i50, i51);
  d45 = +HEAPF32[i51 >> 2];
  d46 = +HEAPF32[i51 + 4 >> 2];
  d47 = +HEAPF32[i51 + 8 >> 2];
  HEAPF32[i3 + 464 >> 2] = 0.0;
  d7 = 1.0 / +Math_sqrt(+(d45 * d45 + d46 * d46 + d47 * d47));
  HEAPF32[i3 + 452 >> 2] = d45 * d7;
  HEAPF32[i3 + 456 >> 2] = d46 * d7;
  HEAPF32[i3 + 460 >> 2] = d47 * d7;
  d7 = +HEAPF32[i51 + 12 >> 2];
  d7 = d7 < -1.0 ? -1.0 : d7;
  d47 = +Math_acos(+(d7 > 1.0 ? 1.0 : d7)) * 2.0;
  HEAPF32[i18 >> 2] = d47;
  if (+Math_abs(+d47) < 1.1920928955078125e-7) {
   STACKTOP = i2;
   return;
  }
  HEAP8[i1] = 1;
  STACKTOP = i2;
  return;
 }
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i28, i27);
 i29 = i3 + 292 | 0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i29, i48);
 d16 = +HEAPF32[i27 + 12 >> 2];
 d12 = +HEAPF32[i48 >> 2];
 d23 = +HEAPF32[i27 >> 2];
 d11 = +HEAPF32[i48 + 12 >> 2];
 d21 = +HEAPF32[i27 + 4 >> 2];
 d20 = +HEAPF32[i48 + 8 >> 2];
 d9 = +HEAPF32[i27 + 8 >> 2];
 d19 = +HEAPF32[i48 + 4 >> 2];
 d7 = d16 * d12 + d23 * d11 + d21 * d20 - d9 * d19;
 d10 = d12 * d9 + (d11 * d21 + d16 * d19) - d23 * d20;
 d8 = d16 * d20 + d11 * d9 + d23 * d19 - d12 * d21;
 d9 = d16 * d11 - d12 * d23 - d21 * d19 - d20 * d9;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i26, i31);
 i27 = i3 + 356 | 0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i27, i30);
 d20 = +HEAPF32[i31 + 12 >> 2];
 d19 = +HEAPF32[i30 >> 2];
 d21 = +HEAPF32[i31 >> 2];
 d23 = +HEAPF32[i30 + 12 >> 2];
 d12 = +HEAPF32[i31 + 4 >> 2];
 d11 = +HEAPF32[i30 + 8 >> 2];
 d16 = +HEAPF32[i31 + 8 >> 2];
 d15 = +HEAPF32[i30 + 4 >> 2];
 d13 = d20 * d19 + d21 * d23 + d12 * d11 - d16 * d15;
 d17 = d19 * d16 + (d23 * d12 + d20 * d15) - d21 * d11;
 d14 = d20 * d11 + d23 * d16 + d21 * d15 - d19 * d12;
 d16 = d20 * d23 - d19 * d21 - d12 * d15 - d11 * d16;
 d11 = -d13;
 d15 = -d17;
 d12 = -d14;
 d21 = d7 * d16 + d9 * d11 + d8 * d15 - d10 * d12;
 d19 = d7 * d12 + (d10 * d16 + d9 * d15) - d8 * d11;
 d23 = d10 * d11 + (d8 * d16 + d9 * d12) - d7 * d15;
 d20 = d9 * d16 - d7 * d11 - d10 * d15 - d8 * d12;
 d37 = +HEAPF32[111126];
 d35 = +HEAPF32[444512 >> 2];
 d33 = +HEAPF32[444508 >> 2];
 d43 = d37 * d20 + d35 * d19 - d33 * d23;
 d32 = d37 * d23 + d33 * d20 - d35 * d21;
 d45 = d35 * d20 + d33 * d21 - d37 * d19;
 d46 = -(d37 * d21) - d33 * d19 - d35 * d23;
 d38 = -d21;
 d44 = -d19;
 d47 = -d23;
 d34 = d32 * d47 + (d20 * d43 + d46 * d38) - d45 * d44;
 d36 = d45 * d38 + (d20 * d32 + d46 * d44) - d43 * d47;
 d38 = d43 * d44 + (d20 * d45 + d46 * d47) - d32 * d38;
 d32 = 1.0 / +Math_sqrt(+(d38 * d38 + (d34 * d34 + d36 * d36)));
 d34 = d32 * d34;
 d36 = d32 * d36;
 d38 = d32 * d38;
 d32 = d35 * d38 + (d33 * d36 + d37 * d34);
 do {
  if (d32 < -.9999998807907104) {
   if (+Math_abs(+d35) > .7071067690849304) {
    d37 = 1.0 / +Math_sqrt(+(d35 * d35 + d33 * d33));
    d32 = 0.0;
    d35 = -(d35 * d37);
    d37 = d33 * d37;
    d36 = 0.0;
    break;
   } else {
    d35 = 1.0 / +Math_sqrt(+(d37 * d37 + d33 * d33));
    d32 = -(d33 * d35);
    d35 = d37 * d35;
    d37 = 0.0;
    d36 = 0.0;
    break;
   }
  } else {
   d47 = +Math_sqrt(+((d32 + 1.0) * 2.0));
   d46 = 1.0 / d47;
   d32 = (d33 * d38 - d35 * d36) * d46;
   d35 = (d35 * d34 - d37 * d38) * d46;
   d37 = (d37 * d36 - d33 * d34) * d46;
   d36 = d47 * .5;
  }
 } while (0);
 d44 = 1.0 / +Math_sqrt(+(d36 * d36 + (d37 * d37 + (d35 * d35 + d32 * d32))));
 d33 = d32 * d44;
 d34 = d35 * d44;
 d35 = d37 * d44;
 d36 = d36 * d44;
 d44 = -d33;
 d45 = -d34;
 d32 = -d35;
 d46 = d23 * d45 + (d21 * d36 + d20 * d44) - d19 * d32;
 d47 = d21 * d32 + (d19 * d36 + d20 * d45) - d23 * d44;
 d37 = d19 * d44 + (d23 * d36 + d20 * d32) - d21 * d45;
 d23 = d20 * d36 - d21 * d44 - d19 * d45 - d23 * d32;
 d32 = 1.0 / +Math_sqrt(+(d23 * d23 + (d37 * d37 + (d46 * d46 + d47 * d47))));
 d21 = d32 * d46;
 d20 = d32 * d47;
 d19 = d32 * d37;
 d23 = d32 * d23;
 i31 = i3 + 436 | 0;
 d32 = +HEAPF32[i31 >> 2];
 i30 = i3 + 448 | 0;
 d37 = +HEAPF32[i30 >> 2];
 if (d32 >= d37 ? (d25 = +HEAPF32[i3 + 440 >> 2], d25 >= d37) : 0) {
  d22 = d36 < -1.0 ? -1.0 : d36;
  d22 = +Math_acos(+(d22 > 1.0 ? 1.0 : d22)) * 2.0;
  if (d22 > 1.1920928955078125e-7) {
   d47 = 1.0 / +Math_sqrt(+(d35 * d35 + (d33 * d33 + d34 * d34)));
   d36 = d33 * d47;
   d33 = d34 * d47;
   d34 = d35 * d47;
   if (+Math_abs(+d33) > 1.1920928955078125e-7) {
    d35 = d34 * d34 / (d33 * d33);
    d35 = +Math_sqrt(+((d35 + 1.0) / (1.0 / (d25 * d25) + d35 / (d32 * d32))));
   } else {
    d35 = d32;
   }
  } else {
   d35 = 0.0;
   d33 = 0.0;
   d34 = 0.0;
   d36 = 0.0;
  }
  d38 = +HEAPF32[i3 + 420 >> 2];
  d37 = d35 * d38;
  if (d22 > d37) {
   HEAP8[i1] = 1;
   if (d22 < d35 & d38 < .9999998807907104) {
    d35 = (d22 - d37) / (d35 - d37);
   } else {
    d35 = 1.0;
   }
   HEAPF32[i3 + 520 >> 2] = d35;
   HEAPF32[i18 >> 2] = d22 - d37;
   if (+Math_abs(+d33) > 1.1920928955078125e-7) {
    d22 = +Math_abs(+(d33 * -d34 / d33 * (d25 / d32)));
    if (!(d34 < -0.0)) {
     d22 = -d22;
    }
    d34 = 1.0 / +Math_sqrt(+(d33 * d33 + d36 * d36 + d22 * d22));
    d36 = d36 * d34;
    d33 = d33 * d34;
    d34 = -(d22 * d34);
   }
   d46 = -d36;
   d45 = -d33;
   d44 = -d34;
   d42 = d17 * d44 + d16 * d46 - d14 * d45;
   d47 = d16 * d45 + d14 * d46 - d13 * d44;
   d43 = d16 * d44 + d13 * d45 - d17 * d46;
   d44 = -(d13 * d46) - d17 * d45 - d14 * d44;
   d45 = d47 * d12 + (d16 * d42 + d44 * d11) - d43 * d15;
   d46 = d43 * d11 + (d16 * d47 + d44 * d15) - d42 * d12;
   d47 = d42 * d15 + (d16 * d43 + d44 * d12) - d47 * d11;
   HEAPF32[i3 + 452 >> 2] = d45;
   HEAPF32[i3 + 456 >> 2] = d46;
   HEAPF32[i3 + 460 >> 2] = d47;
   HEAPF32[i3 + 464 >> 2] = 0.0;
   i51 = i3 + 528 | 0;
   HEAP32[i51 + 0 >> 2] = 0;
   HEAP32[i51 + 4 >> 2] = 0;
   HEAP32[i51 + 8 >> 2] = 0;
   HEAP32[i51 + 12 >> 2] = 0;
   HEAPF32[i3 + 484 >> 2] = 1.0 / (d45 * (+HEAPF32[i4 >> 2] * d45 + +HEAPF32[i4 + 16 >> 2] * d46 + +HEAPF32[i4 + 32 >> 2] * d47) + d46 * (d45 * +HEAPF32[i4 + 4 >> 2] + d46 * +HEAPF32[i4 + 20 >> 2] + d47 * +HEAPF32[i4 + 36 >> 2]) + d47 * (d45 * +HEAPF32[i4 + 8 >> 2] + d46 * +HEAPF32[i4 + 24 >> 2] + d47 * +HEAPF32[i4 + 40 >> 2]) + (d45 * (d45 * +HEAPF32[i5 >> 2] + d46 * +HEAPF32[i5 + 16 >> 2] + d47 * +HEAPF32[i5 + 32 >> 2]) + d46 * (d45 * +HEAPF32[i5 + 4 >> 2] + d46 * +HEAPF32[i5 + 20 >> 2] + d47 * +HEAPF32[i5 + 36 >> 2]) + d47 * (d45 * +HEAPF32[i5 + 8 >> 2] + d46 * +HEAPF32[i5 + 24 >> 2] + d47 * +HEAPF32[i5 + 40 >> 2])));
  }
 } else {
  i24 = 23;
 }
 L33 : do {
  if ((i24 | 0) == 23) {
   d41 = +HEAPF32[i29 >> 2];
   d45 = +HEAPF32[i3 + 308 >> 2];
   d35 = +HEAPF32[i3 + 324 >> 2];
   d52 = +HEAPF32[i28 >> 2];
   d47 = +HEAPF32[i28 + 4 >> 2];
   d34 = +HEAPF32[i28 + 8 >> 2];
   d25 = d41 * d52 + d45 * d47 + d35 * d34;
   d46 = +HEAPF32[i28 + 16 >> 2];
   d43 = +HEAPF32[i28 + 20 >> 2];
   d37 = +HEAPF32[i28 + 24 >> 2];
   d32 = d41 * d46 + d45 * d43 + d35 * d37;
   d40 = +HEAPF32[i28 + 32 >> 2];
   d42 = +HEAPF32[i28 + 36 >> 2];
   d44 = +HEAPF32[i28 + 40 >> 2];
   d35 = d41 * d40 + d45 * d42 + d35 * d44;
   d45 = +HEAPF32[i3 + 296 >> 2];
   d41 = +HEAPF32[i3 + 312 >> 2];
   d36 = +HEAPF32[i3 + 328 >> 2];
   d39 = d52 * d45 + d47 * d41 + d34 * d36;
   d38 = d46 * d45 + d43 * d41 + d37 * d36;
   d36 = d40 * d45 + d42 * d41 + d44 * d36;
   d41 = +HEAPF32[i3 + 300 >> 2];
   d45 = +HEAPF32[i3 + 316 >> 2];
   d33 = +HEAPF32[i3 + 332 >> 2];
   d34 = d52 * d41 + d47 * d45 + d34 * d33;
   d37 = d46 * d41 + d43 * d45 + d37 * d33;
   d33 = d40 * d41 + d42 * d45 + d44 * d33;
   d44 = +HEAPF32[i27 >> 2];
   d45 = +HEAPF32[i3 + 372 >> 2];
   d42 = +HEAPF32[i3 + 388 >> 2];
   d41 = d44 * +HEAPF32[i26 >> 2] + d45 * +HEAPF32[i26 + 4 >> 2] + d42 * +HEAPF32[i26 + 8 >> 2];
   d40 = d44 * +HEAPF32[i26 + 16 >> 2] + d45 * +HEAPF32[i26 + 20 >> 2] + d42 * +HEAPF32[i26 + 24 >> 2];
   d42 = d44 * +HEAPF32[i26 + 32 >> 2] + d45 * +HEAPF32[i26 + 36 >> 2] + d42 * +HEAPF32[i26 + 40 >> 2];
   d45 = d25 * d41 + d32 * d40 + d35 * d42;
   d44 = d39 * d41 + d38 * d40 + d36 * d42;
   d43 = d34 * d41 + d37 * d40 + d33 * d42;
   d46 = +HEAPF32[i31 >> 2];
   d47 = +HEAPF32[i30 >> 2];
   do {
    if (d46 < d47) {
     i24 = +Math_abs(+d44) < 1.1920928955078125e-7;
     if (+HEAPF32[i3 + 440 >> 2] < d47) {
      if (i24 ? +Math_abs(+d43) < 1.1920928955078125e-7 : 0) {
       break L33;
      }
      HEAP8[i1] = 1;
      HEAPF32[i3 + 452 >> 2] = -(d35 * d40 - d32 * d42);
      HEAPF32[i3 + 456 >> 2] = -(d25 * d42 - d35 * d41);
      HEAPF32[i3 + 460 >> 2] = -(d32 * d41 - d25 * d40);
      HEAPF32[i3 + 464 >> 2] = 0.0;
      break L33;
     }
     if (!i24 ? (HEAP8[i1] = 1, d22 = +HEAPF32[i3 + 440 >> 2], d22 >= d47) : 0) {
      d44 = +Math_atan2(+d43, +d45);
      if (d44 > d22) {
       d45 = +Math_cos(+d22);
       d44 = 0.0;
       d43 = +Math_sin(+d22);
       break;
      }
      if (d44 < -d22) {
       d45 = +Math_cos(+d22);
       d44 = 0.0;
       d43 = -+Math_sin(+d22);
      } else {
       d44 = 0.0;
      }
     }
    } else {
     if (!(+Math_abs(+d43) < 1.1920928955078125e-7) ? (HEAP8[i1] = 1, d46 >= d47) : 0) {
      d22 = +Math_atan2(+d44, +d45);
      if (d22 > d46) {
       d45 = +Math_cos(+d46);
       d44 = +Math_sin(+d46);
       d43 = 0.0;
       break;
      }
      if (d22 < -d46) {
       d45 = +Math_cos(+d46);
       d44 = -+Math_sin(+d46);
       d43 = 0.0;
      } else {
       d43 = 0.0;
      }
     }
    }
   } while (0);
   d47 = d34 * d43 + (d39 * d44 + d25 * d45);
   d52 = d37 * d43 + (d38 * d44 + d32 * d45);
   d46 = d33 * d43 + (d36 * d44 + d35 * d45);
   d45 = 1.0 / +Math_sqrt(+(d46 * d46 + (d47 * d47 + d52 * d52)));
   d47 = d45 * d47;
   d52 = d45 * d52;
   d46 = d45 * d46;
   d45 = d40 * d46 - d42 * d52;
   d46 = d42 * d47 - d41 * d46;
   d47 = d41 * d52 - d40 * d47;
   HEAPF32[i3 + 464 >> 2] = 0.0;
   d52 = +Math_sqrt(+(d45 * d45 + d46 * d46 + d47 * d47));
   HEAPF32[i18 >> 2] = d52;
   d52 = 1.0 / d52;
   HEAPF32[i3 + 452 >> 2] = -(d45 * d52);
   HEAPF32[i3 + 456 >> 2] = -(d46 * d52);
   HEAPF32[i3 + 460 >> 2] = -(d47 * d52);
  }
 } while (0);
 d22 = +HEAPF32[i3 + 444 >> 2];
 i18 = i3 + 504 | 0;
 if (!(d22 >= 0.0)) {
  HEAPF32[i18 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
 d25 = d23 < -1.0 ? -1.0 : d23;
 d25 = +Math_acos(+(d25 > 1.0 ? 1.0 : d25)) * 2.0;
 if (d25 > 3.1415927410125732) {
  d23 = d23 > 1.0 ? -1.0 : -d23;
  d23 = +Math_acos(+(d23 > 1.0 ? 1.0 : d23)) * 2.0;
  d21 = -d21;
  d20 = -d20;
  d19 = -d19;
 } else {
  d23 = d25;
 }
 HEAPF32[i18 >> 2] = d23;
 if (d23 > 1.1920928955078125e-7) {
  d52 = 1.0 / +Math_sqrt(+(d19 * d19 + (d20 * d20 + d21 * d21)));
  d21 = d21 * d52;
  d20 = d20 * d52;
  d19 = d19 * d52;
 }
 d32 = +HEAPF32[i3 + 420 >> 2];
 d25 = d22 * d32;
 if (d23 > d25) {
  HEAP8[i6] = 1;
  if (d23 < d22 & d32 < .9999998807907104) {
   d22 = (d23 - d25) / (d22 - d25);
  } else {
   d22 = 1.0;
  }
  HEAPF32[i3 + 524 >> 2] = d22;
  HEAPF32[i3 + 500 >> 2] = d23 - d25;
  d47 = -d21;
  d46 = -d20;
  d45 = -d19;
  d43 = d17 * d45 + d16 * d47 - d14 * d46;
  d52 = d16 * d46 + d14 * d47 - d13 * d45;
  d44 = d16 * d45 + d13 * d46 - d17 * d47;
  d45 = -(d13 * d47) - d17 * d46 - d14 * d45;
  d46 = d52 * d12 + (d16 * d43 + d45 * d11) - d44 * d15;
  d47 = d44 * d11 + (d16 * d52 + d45 * d15) - d43 * d12;
  d52 = d43 * d15 + (d16 * d44 + d45 * d12) - d52 * d11;
  HEAPF32[i3 + 468 >> 2] = d46;
  HEAPF32[i3 + 472 >> 2] = d47;
  HEAPF32[i3 + 476 >> 2] = d52;
  HEAPF32[i3 + 480 >> 2] = 0.0;
  HEAPF32[i3 + 488 >> 2] = 1.0 / (d46 * (+HEAPF32[i4 >> 2] * d46 + +HEAPF32[i4 + 16 >> 2] * d47 + +HEAPF32[i4 + 32 >> 2] * d52) + d47 * (d46 * +HEAPF32[i4 + 4 >> 2] + d47 * +HEAPF32[i4 + 20 >> 2] + d52 * +HEAPF32[i4 + 36 >> 2]) + d52 * (d46 * +HEAPF32[i4 + 8 >> 2] + d47 * +HEAPF32[i4 + 24 >> 2] + d52 * +HEAPF32[i4 + 40 >> 2]) + (d46 * (d46 * +HEAPF32[i5 >> 2] + d47 * +HEAPF32[i5 + 16 >> 2] + d52 * +HEAPF32[i5 + 32 >> 2]) + d47 * (d46 * +HEAPF32[i5 + 4 >> 2] + d47 * +HEAPF32[i5 + 20 >> 2] + d52 * +HEAPF32[i5 + 36 >> 2]) + d52 * (d46 * +HEAPF32[i5 + 8 >> 2] + d47 * +HEAPF32[i5 + 24 >> 2] + d52 * +HEAPF32[i5 + 40 >> 2])));
 }
 if ((HEAP8[i1] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d43 = -d21;
 d52 = -d20;
 d45 = -d19;
 d42 = d10 * d45 + d9 * d43 - d8 * d52;
 d47 = d9 * d52 + d8 * d43 - d7 * d45;
 d44 = d9 * d45 + d7 * d52 - d10 * d43;
 d45 = -(d7 * d43) - d10 * d52 - d8 * d45;
 d52 = -d7;
 d43 = -d10;
 d46 = -d8;
 HEAPF32[i3 + 528 >> 2] = d47 * d46 + (d9 * d42 + d45 * d52) - d44 * d43;
 HEAPF32[i3 + 532 >> 2] = d44 * d52 + (d9 * d47 + d45 * d43) - d42 * d46;
 HEAPF32[i3 + 536 >> 2] = d42 * d43 + (d9 * d44 + d45 * d46) - d47 * d52;
 HEAPF32[i3 + 540 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i1, i11, i10, i5, i4, i7, i6, i3, i8, i2) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, d68 = 0.0, i69 = 0, i70 = 0, d71 = 0.0, d72 = 0.0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, d79 = 0.0, i80 = 0, i81 = 0, d82 = 0.0, d83 = 0.0, d84 = 0.0, d85 = 0.0, d86 = 0.0, d87 = 0.0, d88 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i9 = i2 + 56 | 0;
 i8 = i2;
 __ZN15CProfileManager13Start_ProfileEPKc(446e3);
 if ((i6 | 0) == (0 - i4 | 0)) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return 0.0;
 }
 i12 = (i10 | 0) > 0;
 if ((HEAP32[i3 + 44 >> 2] | 0) == 0) {
  if (i12) {
   i12 = 0;
   do {
    i13 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
    if (!((HEAP32[i13 + 232 >> 2] & 2 | 0) == 0 | (i13 | 0) == 0)) {
     i67 = i13 + 504 | 0;
     HEAP32[i67 + 0 >> 2] = 0;
     HEAP32[i67 + 4 >> 2] = 0;
     HEAP32[i67 + 8 >> 2] = 0;
     HEAP32[i67 + 12 >> 2] = 0;
     HEAP32[i67 + 16 >> 2] = 0;
     HEAP32[i67 + 20 >> 2] = 0;
     HEAP32[i67 + 24 >> 2] = 0;
     HEAP32[i67 + 28 >> 2] = 0;
    }
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i10 | 0));
  }
 } else {
  if (i12) {
   i13 = 0;
   do {
    i12 = HEAP32[i11 + (i13 << 2) >> 2] | 0;
    if (!((HEAP32[i12 + 232 >> 2] & 2 | 0) == 0 | (i12 | 0) == 0)) {
     i66 = i12 + 504 | 0;
     i67 = i12 + 568 | 0;
     HEAP32[i66 + 0 >> 2] = 0;
     HEAP32[i66 + 4 >> 2] = 0;
     HEAP32[i66 + 8 >> 2] = 0;
     HEAP32[i66 + 12 >> 2] = 0;
     HEAP32[i66 + 16 >> 2] = 0;
     HEAP32[i66 + 20 >> 2] = 0;
     HEAP32[i66 + 24 >> 2] = 0;
     HEAP32[i66 + 28 >> 2] = 0;
     HEAP32[i67 + 0 >> 2] = 0;
     HEAP32[i67 + 4 >> 2] = 0;
     HEAP32[i67 + 8 >> 2] = 0;
     HEAP32[i67 + 12 >> 2] = 0;
     HEAP32[i67 + 16 >> 2] = 0;
     HEAP32[i67 + 20 >> 2] = 0;
     HEAP32[i67 + 24 >> 2] = 0;
     HEAP32[i67 + 28 >> 2] = 0;
    }
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i10 | 0));
  }
 }
 i10 = (i6 | 0) > 0;
 if (i10) {
  i11 = 0;
  do {
   i67 = HEAP32[i7 + (i11 << 2) >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i67 >> 2] | 0) + 8 >> 2] & 255](i67);
   HEAPF32[i67 + 32 >> 2] = 0.0;
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (i6 | 0));
 }
 i11 = i1 + 108 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if ((i12 | 0) < (i6 | 0)) {
  i13 = i1 + 112 | 0;
  if ((HEAP32[i13 >> 2] | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) {
    i14 = 0;
    i16 = i12;
   } else {
    i14 = __Z22btAlignedAllocInternalji(i6 << 3, 16) | 0;
    i16 = HEAP32[i11 >> 2] | 0;
   }
   i15 = i1 + 116 | 0;
   if ((i16 | 0) > 0) {
    i18 = 0;
    do {
     i17 = i14 + (i18 << 3) | 0;
     if ((i17 | 0) != 0) {
      i65 = (HEAP32[i15 >> 2] | 0) + (i18 << 3) | 0;
      i66 = HEAP32[i65 + 4 >> 2] | 0;
      i67 = i17;
      HEAP32[i67 >> 2] = HEAP32[i65 >> 2];
      HEAP32[i67 + 4 >> 2] = i66;
     }
     i18 = i18 + 1 | 0;
    } while ((i18 | 0) != (i16 | 0));
   }
   i17 = HEAP32[i15 >> 2] | 0;
   i16 = i1 + 120 | 0;
   if ((i17 | 0) != 0) {
    if ((HEAP8[i16] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i17);
    }
    HEAP32[i15 >> 2] = 0;
   }
   HEAP8[i16] = 1;
   HEAP32[i15 >> 2] = i14;
   HEAP32[i13 >> 2] = i6;
  } else {
   i15 = i1 + 116 | 0;
  }
  do {
   i13 = (HEAP32[i15 >> 2] | 0) + (i12 << 3) | 0;
   if ((i13 | 0) != 0) {
    i67 = i13;
    HEAP32[i67 >> 2] = 0;
    HEAP32[i67 + 4 >> 2] = 0;
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i6 | 0));
 }
 HEAP32[i11 >> 2] = i6;
 if (i10) {
  i12 = i1 + 116 | 0;
  i13 = 0;
  i11 = 0;
  do {
   i14 = HEAP32[i12 >> 2] | 0;
   i16 = i14 + (i13 << 3) | 0;
   i15 = HEAP32[i7 + (i13 << 2) >> 2] | 0;
   if ((HEAP8[i15 + 20 | 0] | 0) == 0) {
    HEAP32[i16 >> 2] = 0;
    HEAP32[i14 + (i13 << 3) + 4 >> 2] = 0;
    i14 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i15 >> 2] | 0) + 16 >> 2] & 127](i15, i16);
    i14 = HEAP32[i16 >> 2] | 0;
   }
   i11 = i14 + i11 | 0;
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) < (i6 | 0));
 } else {
  i11 = 0;
 }
 _memset(i9 | 0, 0, 136) | 0;
 i12 = i1 + 28 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 if ((i13 | 0) < (i11 | 0)) {
  i14 = i1 + 32 | 0;
  if ((HEAP32[i14 >> 2] | 0) < (i11 | 0)) {
   if ((i11 | 0) == 0) {
    i16 = 0;
    i17 = i13;
   } else {
    i16 = __Z22btAlignedAllocInternalji(i11 * 136 | 0, 16) | 0;
    i17 = HEAP32[i12 >> 2] | 0;
   }
   i15 = i1 + 36 | 0;
   if ((i17 | 0) > 0) {
    i18 = 0;
    do {
     _memcpy(i16 + (i18 * 136 | 0) | 0, (HEAP32[i15 >> 2] | 0) + (i18 * 136 | 0) | 0, 136) | 0;
     i18 = i18 + 1 | 0;
    } while ((i18 | 0) != (i17 | 0));
   }
   i18 = HEAP32[i15 >> 2] | 0;
   i17 = i1 + 40 | 0;
   if ((i18 | 0) != 0) {
    if ((HEAP8[i17] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i18);
    }
    HEAP32[i15 >> 2] = 0;
   }
   HEAP8[i17] = 1;
   HEAP32[i15 >> 2] = i16;
   HEAP32[i14 >> 2] = i11;
  } else {
   i15 = i1 + 36 | 0;
  }
  do {
   _memcpy((HEAP32[i15 >> 2] | 0) + (i13 * 136 | 0) | 0, i9 | 0, 136) | 0;
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) != (i11 | 0));
 }
 HEAP32[i12 >> 2] = i11;
 if (i10) {
  i16 = i1 + 116 | 0;
  i12 = i1 + 36 | 0;
  i28 = i3 + 12 | 0;
  i27 = i3 + 32 | 0;
  i26 = i8 + 4 | 0;
  i25 = i8 + 8 | 0;
  i24 = i8 + 12 | 0;
  i23 = i8 + 16 | 0;
  i22 = i8 + 20 | 0;
  i21 = i8 + 24 | 0;
  i20 = i8 + 28 | 0;
  i19 = i3 + 40 | 0;
  i18 = i3 + 4 | 0;
  i9 = i8 + 52 | 0;
  i17 = i8 + 32 | 0;
  i29 = i8 + 36 | 0;
  i15 = i8 + 40 | 0;
  i14 = i3 + 20 | 0;
  i13 = i8 + 48 | 0;
  i31 = HEAP32[i16 >> 2] | 0;
  i11 = 0;
  i10 = 0;
  while (1) {
   i30 = i31 + (i10 << 3) | 0;
   i37 = HEAP32[i30 >> 2] | 0;
   if ((i37 | 0) == 0) {
    i30 = 0;
   } else {
    i31 = HEAP32[i12 >> 2] | 0;
    i39 = i7 + (i10 << 2) | 0;
    i32 = HEAP32[i39 >> 2] | 0;
    i34 = i32 + 24 | 0;
    i36 = HEAP32[i34 >> 2] | 0;
    i33 = i32 + 28 | 0;
    i35 = HEAP32[i33 >> 2] | 0;
    if ((i37 | 0) > 0) {
     i37 = 0;
     do {
      i67 = i37 + i11 | 0;
      _memset(i31 + (i67 * 136 | 0) | 0, 0, 136) | 0;
      HEAPF32[i31 + (i67 * 136 | 0) + 124 >> 2] = -3.4028234663852886e+38;
      HEAPF32[i31 + (i67 * 136 | 0) + 128 >> 2] = 3.4028234663852886e+38;
      HEAPF32[i31 + (i67 * 136 | 0) + 84 >> 2] = 0.0;
      HEAPF32[i31 + (i67 * 136 | 0) + 80 >> 2] = 0.0;
      HEAP32[i31 + (i67 * 136 | 0) + 104 >> 2] = i36;
      HEAP32[i31 + (i67 * 136 | 0) + 108 >> 2] = i35;
      i37 = i37 + 1 | 0;
     } while ((i37 | 0) < (HEAP32[i30 >> 2] | 0));
     i40 = HEAP32[i39 >> 2] | 0;
    } else {
     i40 = i32;
    }
    i38 = i36 + 504 | 0;
    i37 = i35 + 504 | 0;
    HEAP32[i38 + 0 >> 2] = 0;
    HEAP32[i38 + 4 >> 2] = 0;
    HEAP32[i38 + 8 >> 2] = 0;
    HEAP32[i38 + 12 >> 2] = 0;
    HEAP32[i38 + 16 >> 2] = 0;
    HEAP32[i38 + 20 >> 2] = 0;
    HEAP32[i38 + 24 >> 2] = 0;
    HEAP32[i38 + 28 >> 2] = 0;
    HEAP32[i37 + 0 >> 2] = 0;
    HEAP32[i37 + 4 >> 2] = 0;
    HEAP32[i37 + 8 >> 2] = 0;
    HEAP32[i37 + 12 >> 2] = 0;
    HEAP32[i37 + 16 >> 2] = 0;
    HEAP32[i37 + 20 >> 2] = 0;
    HEAP32[i37 + 24 >> 2] = 0;
    HEAP32[i37 + 28 >> 2] = 0;
    HEAPF32[i8 >> 2] = 1.0 / +HEAPF32[i28 >> 2];
    HEAPF32[i26 >> 2] = +HEAPF32[i27 >> 2];
    HEAP32[i25 >> 2] = i31 + (i11 * 136 | 0) + 16;
    HEAP32[i24 >> 2] = i31 + (i11 * 136 | 0);
    HEAP32[i23 >> 2] = 0;
    HEAP32[i22 >> 2] = i31 + (i11 * 136 | 0) + 32;
    HEAP32[i21 >> 2] = 34;
    HEAP32[i20 >> 2] = i31 + (i11 * 136 | 0) + 116;
    i37 = i31 + (i11 * 136 | 0) + 120 | 0;
    HEAPF32[i37 >> 2] = +HEAPF32[i19 >> 2];
    HEAPF32[i9 >> 2] = +HEAPF32[i18 >> 2];
    HEAP32[i17 >> 2] = i37;
    i37 = i31 + (i11 * 136 | 0) + 124 | 0;
    HEAP32[i29 >> 2] = i37;
    i38 = i31 + (i11 * 136 | 0) + 128 | 0;
    HEAP32[i15 >> 2] = i38;
    HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i40 >> 2] | 0) + 20 >> 2] & 127](i40, i8);
    i39 = (HEAP32[i39 >> 2] | 0) + 16 | 0;
    d68 = +HEAPF32[i39 >> 2];
    if (+HEAPF32[i38 >> 2] > d68) {
     HEAPF32[i38 >> 2] = d68;
     d68 = +HEAPF32[i39 >> 2];
    }
    d68 = -d68;
    if (+HEAPF32[i37 >> 2] < d68) {
     HEAPF32[i37 >> 2] = d68;
    }
    if ((HEAP32[i30 >> 2] | 0) > 0) {
     i52 = i36 + 336 | 0;
     i53 = i36 + 256 | 0;
     i50 = i36 + 260 | 0;
     i49 = i36 + 264 | 0;
     i48 = i36 + 272 | 0;
     i47 = i36 + 276 | 0;
     i46 = i36 + 280 | 0;
     i45 = i36 + 288 | 0;
     i44 = i36 + 292 | 0;
     i43 = i36 + 296 | 0;
     i51 = i35 + 336 | 0;
     i42 = i35 + 256 | 0;
     i41 = i35 + 260 | 0;
     i40 = i35 + 264 | 0;
     i39 = i35 + 272 | 0;
     i38 = i35 + 276 | 0;
     i54 = i35 + 280 | 0;
     i61 = i35 + 288 | 0;
     i55 = i35 + 292 | 0;
     i37 = i35 + 296 | 0;
     i56 = i36 + 304 | 0;
     i57 = i36 + 308 | 0;
     i58 = i36 + 312 | 0;
     i59 = i36 + 320 | 0;
     i60 = i36 + 324 | 0;
     i62 = i36 + 328 | 0;
     i65 = i35 + 304 | 0;
     i66 = i35 + 308 | 0;
     i36 = i35 + 312 | 0;
     i63 = i35 + 320 | 0;
     i64 = i35 + 324 | 0;
     i67 = i35 + 328 | 0;
     i35 = 0;
     do {
      i69 = i35 + i11 | 0;
      HEAP32[i31 + (i69 * 136 | 0) + 112 >> 2] = i32;
      i81 = HEAP32[i34 >> 2] | 0;
      i78 = i31 + (i69 * 136 | 0) | 0;
      d88 = +HEAPF32[i78 >> 2];
      i77 = i31 + (i69 * 136 | 0) + 4 | 0;
      d83 = +HEAPF32[i77 >> 2];
      i76 = i31 + (i69 * 136 | 0) + 8 | 0;
      d82 = +HEAPF32[i76 >> 2];
      d84 = (d88 * +HEAPF32[i81 + 272 >> 2] + d83 * +HEAPF32[i81 + 276 >> 2] + d82 * +HEAPF32[i81 + 280 >> 2]) * +HEAPF32[i81 + 540 >> 2];
      d87 = (d88 * +HEAPF32[i81 + 288 >> 2] + d83 * +HEAPF32[i81 + 292 >> 2] + d82 * +HEAPF32[i81 + 296 >> 2]) * +HEAPF32[i81 + 544 >> 2];
      HEAPF32[i31 + (i69 * 136 | 0) + 48 >> 2] = (+HEAPF32[i81 + 256 >> 2] * d88 + +HEAPF32[i81 + 260 >> 2] * d83 + +HEAPF32[i81 + 264 >> 2] * d82) * +HEAPF32[i81 + 536 >> 2];
      HEAPF32[i31 + (i69 * 136 | 0) + 52 >> 2] = d84;
      HEAPF32[i31 + (i69 * 136 | 0) + 56 >> 2] = d87;
      HEAPF32[i31 + (i69 * 136 | 0) + 60 >> 2] = 0.0;
      i81 = HEAP32[i33 >> 2] | 0;
      i75 = i31 + (i69 * 136 | 0) + 32 | 0;
      d87 = +HEAPF32[i75 >> 2];
      i74 = i31 + (i69 * 136 | 0) + 36 | 0;
      d84 = +HEAPF32[i74 >> 2];
      i73 = i31 + (i69 * 136 | 0) + 40 | 0;
      d82 = +HEAPF32[i73 >> 2];
      d83 = (d87 * +HEAPF32[i81 + 272 >> 2] + d84 * +HEAPF32[i81 + 276 >> 2] + d82 * +HEAPF32[i81 + 280 >> 2]) * +HEAPF32[i81 + 540 >> 2];
      d88 = (d87 * +HEAPF32[i81 + 288 >> 2] + d84 * +HEAPF32[i81 + 292 >> 2] + d82 * +HEAPF32[i81 + 296 >> 2]) * +HEAPF32[i81 + 544 >> 2];
      HEAPF32[i31 + (i69 * 136 | 0) + 64 >> 2] = (+HEAPF32[i81 + 256 >> 2] * d87 + +HEAPF32[i81 + 260 >> 2] * d84 + +HEAPF32[i81 + 264 >> 2] * d82) * +HEAPF32[i81 + 536 >> 2];
      HEAPF32[i31 + (i69 * 136 | 0) + 68 >> 2] = d83;
      HEAPF32[i31 + (i69 * 136 | 0) + 72 >> 2] = d88;
      HEAPF32[i31 + (i69 * 136 | 0) + 76 >> 2] = 0.0;
      d88 = +HEAPF32[i52 >> 2];
      i81 = i31 + (i69 * 136 | 0) + 16 | 0;
      d83 = +HEAPF32[i81 >> 2];
      i80 = i31 + (i69 * 136 | 0) + 20 | 0;
      d82 = +HEAPF32[i80 >> 2];
      i70 = i31 + (i69 * 136 | 0) + 24 | 0;
      d84 = +HEAPF32[i70 >> 2];
      d87 = +HEAPF32[i78 >> 2];
      d86 = +HEAPF32[i77 >> 2];
      d85 = +HEAPF32[i76 >> 2];
      d68 = +HEAPF32[i51 >> 2];
      d71 = +HEAPF32[i75 >> 2];
      d72 = +HEAPF32[i74 >> 2];
      d79 = +HEAPF32[i73 >> 2];
      d79 = 1.0 / (d83 * d88 * d83 + d82 * d88 * d82 + d84 * d88 * d84 + (d87 * (+HEAPF32[i53 >> 2] * d87 + +HEAPF32[i50 >> 2] * d86 + +HEAPF32[i49 >> 2] * d85) + d86 * (d87 * +HEAPF32[i48 >> 2] + d86 * +HEAPF32[i47 >> 2] + d85 * +HEAPF32[i46 >> 2]) + d85 * (d87 * +HEAPF32[i45 >> 2] + d86 * +HEAPF32[i44 >> 2] + d85 * +HEAPF32[i43 >> 2])) + (d84 * d84 * d68 + (d83 * d83 * d68 + d82 * d82 * d68)) + (d71 * (+HEAPF32[i42 >> 2] * d71 + +HEAPF32[i41 >> 2] * d72 + +HEAPF32[i40 >> 2] * d79) + d72 * (d71 * +HEAPF32[i39 >> 2] + d72 * +HEAPF32[i38 >> 2] + d79 * +HEAPF32[i54 >> 2]) + d79 * (d71 * +HEAPF32[i61 >> 2] + d72 * +HEAPF32[i55 >> 2] + d79 * +HEAPF32[i37 >> 2])));
      HEAPF32[i31 + (i69 * 136 | 0) + 92 >> 2] = d79;
      d72 = +HEAPF32[i81 >> 2];
      d71 = +HEAPF32[i80 >> 2];
      d68 = +HEAPF32[i70 >> 2];
      i70 = i31 + (i69 * 136 | 0) + 116 | 0;
      HEAPF32[i70 >> 2] = d79 * +HEAPF32[i70 >> 2] + d79 * (0.0 - +HEAPF32[i9 >> 2] * (d72 * +HEAPF32[i56 >> 2] + d71 * +HEAPF32[i57 >> 2] + d68 * +HEAPF32[i58 >> 2] + (+HEAPF32[i78 >> 2] * +HEAPF32[i59 >> 2] + +HEAPF32[i77 >> 2] * +HEAPF32[i60 >> 2] + +HEAPF32[i76 >> 2] * +HEAPF32[i62 >> 2]) + (+HEAPF32[i75 >> 2] * +HEAPF32[i63 >> 2] + +HEAPF32[i74 >> 2] * +HEAPF32[i64 >> 2] + +HEAPF32[i73 >> 2] * +HEAPF32[i67 >> 2] - (d72 * +HEAPF32[i65 >> 2] + d71 * +HEAPF32[i66 >> 2] + d68 * +HEAPF32[i36 >> 2]))));
      HEAPF32[i31 + (i69 * 136 | 0) + 84 >> 2] = 0.0;
      i35 = i35 + 1 | 0;
     } while ((i35 | 0) < (HEAP32[i30 >> 2] | 0));
    }
    i31 = HEAP32[i16 >> 2] | 0;
    i30 = HEAP32[i31 + (i10 << 3) >> 2] | 0;
   }
   i10 = i10 + 1 | 0;
   if ((i10 | 0) >= (i6 | 0)) {
    break;
   } else {
    i11 = i30 + i11 | 0;
   }
  }
 }
 if ((i4 | 0) > 0) {
  i6 = 0;
  do {
   __ZN35btSequentialImpulseConstraintSolver14convertContactEP20btPersistentManifoldRK19btContactSolverInfo(i1, HEAP32[i5 + (i6 << 2) >> 2] | 0, i3);
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (i4 | 0));
 }
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = HEAP32[i1 + 48 >> 2] | 0;
 i5 = i1 + 68 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) < (i4 | 0)) {
  i9 = i1 + 72 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i8 = 0;
    i10 = i6;
   } else {
    i8 = __Z22btAlignedAllocInternalji(i4 << 2, 16) | 0;
    i10 = HEAP32[i5 >> 2] | 0;
   }
   i7 = i1 + 76 | 0;
   if ((i10 | 0) > 0) {
    i11 = 0;
    do {
     i12 = i8 + (i11 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i10 | 0));
   }
   i10 = HEAP32[i7 >> 2] | 0;
   i11 = i1 + 80 | 0;
   if ((i10 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i10);
    }
    HEAP32[i7 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i7 >> 2] = i8;
   HEAP32[i9 >> 2] = i4;
  } else {
   i8 = HEAP32[i1 + 76 >> 2] | 0;
  }
  do {
   i7 = i8 + (i6 << 2) | 0;
   if ((i7 | 0) != 0) {
    HEAP32[i7 >> 2] = 0;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i4 | 0));
 }
 HEAP32[i5 >> 2] = i4;
 i5 = i1 + 88 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) < (i3 | 0)) {
  i9 = i1 + 92 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i3 | 0)) {
   if ((i3 | 0) == 0) {
    i7 = 0;
    i12 = i6;
   } else {
    i7 = __Z22btAlignedAllocInternalji(i3 << 2, 16) | 0;
    i12 = HEAP32[i5 >> 2] | 0;
   }
   i8 = i1 + 96 | 0;
   if ((i12 | 0) > 0) {
    i11 = 0;
    do {
     i10 = i7 + (i11 << 2) | 0;
     if ((i10 | 0) != 0) {
      HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i12 | 0));
   }
   i11 = HEAP32[i8 >> 2] | 0;
   i10 = i1 + 100 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i8 >> 2] = i7;
   HEAP32[i9 >> 2] = i3;
  } else {
   i7 = HEAP32[i1 + 96 >> 2] | 0;
  }
  do {
   i8 = i7 + (i6 << 2) | 0;
   if ((i8 | 0) != 0) {
    HEAP32[i8 >> 2] = 0;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i3 | 0));
 }
 HEAP32[i5 >> 2] = i3;
 if ((i4 | 0) > 0) {
  i5 = HEAP32[i1 + 76 >> 2] | 0;
  i6 = 0;
  do {
   HEAP32[i5 + (i6 << 2) >> 2] = i6;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i4 | 0));
 }
 if ((i3 | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return 0.0;
 }
 i1 = HEAP32[i1 + 96 >> 2] | 0;
 i4 = 0;
 do {
  HEAP32[i1 + (i4 << 2) >> 2] = i4;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i3 | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return 0.0;
}
function __ZN20btConvexHullComputer7computeEPKvbiiff(i3, i16, i15, i14, i17, d36, d5) {
 i3 = i3 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i17 = i17 | 0;
 d36 = +d36;
 d5 = +d5;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i2 = i1 + 72 | 0;
 i13 = i1 + 56 | 0;
 i11 = i1 + 40 | 0;
 i9 = i1 + 24 | 0;
 i7 = i1 + 12 | 0;
 i6 = i1;
 if ((i17 | 0) < 1) {
  i6 = i3 + 4 | 0;
  i4 = i3 + 12 | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  i2 = i3 + 16 | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i2] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i7);
   }
   HEAP32[i4 >> 2] = 0;
  }
  HEAP8[i2] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  i6 = i3 + 24 | 0;
  i4 = i3 + 32 | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  i2 = i3 + 36 | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i2] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i7);
   }
   HEAP32[i4 >> 2] = 0;
  }
  HEAP8[i2] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 + 28 >> 2] = 0;
  i6 = i3 + 44 | 0;
  i4 = i3 + 52 | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  i2 = i3 + 56 | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i2] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i7);
   }
   HEAP32[i4 >> 2] = 0;
  }
  HEAP8[i2] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 + 48 >> 2] = 0;
  d36 = 0.0;
  STACKTOP = i1;
  return +d36;
 }
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 40 >> 2] = 0;
 HEAP32[i2 + 44 >> 2] = 256;
 HEAP32[i2 + 48 >> 2] = 0;
 HEAP32[i2 + 52 >> 2] = 0;
 HEAP32[i2 + 56 >> 2] = 0;
 HEAP32[i2 + 60 >> 2] = 256;
 HEAP32[i2 + 64 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 0;
 HEAP32[i2 + 76 >> 2] = 256;
 HEAP8[i2 + 96 | 0] = 1;
 HEAP32[i2 + 92 >> 2] = 0;
 HEAP32[i2 + 84 >> 2] = 0;
 HEAP32[i2 + 88 >> 2] = 0;
 __ZN20btConvexHullInternal7computeEPKvbii(i2, i16, i15, i14, i17);
 if (d36 > 0.0) {
  d5 = +__ZN20btConvexHullInternal6shrinkEff(i2, d36, d5);
  if (d5 < 0.0) {
   i6 = i3 + 4 | 0;
   i8 = i3 + 12 | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   i4 = i3 + 16 | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i4] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i7);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i4] = 1;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   i4 = i3 + 24 | 0;
   i7 = i3 + 32 | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   i6 = i3 + 36 | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i6] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i8);
    }
    HEAP32[i7 >> 2] = 0;
   }
   HEAP8[i6] = 1;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i3 + 28 >> 2] = 0;
   i7 = i3 + 44 | 0;
   i6 = i3 + 52 | 0;
   i8 = HEAP32[i6 >> 2] | 0;
   i4 = i3 + 56 | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i4] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i8);
    }
    HEAP32[i6 >> 2] = 0;
   }
   HEAP8[i4] = 1;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i3 + 48 >> 2] = 0;
  } else {
   i12 = 30;
  }
 } else {
  d5 = 0.0;
  i12 = 30;
 }
 if ((i12 | 0) == 30) {
  i12 = i3 + 4 | 0;
  i17 = HEAP32[i12 >> 2] | 0;
  if ((i17 | 0) < 0) {
   i18 = i3 + 8 | 0;
   i14 = i3 + 12 | 0;
   if ((HEAP32[i18 >> 2] | 0) < 0) {
    i15 = HEAP32[i14 >> 2] | 0;
    i16 = i3 + 16 | 0;
    if ((i15 | 0) != 0) {
     if ((HEAP8[i16] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i15);
     }
     HEAP32[i14 >> 2] = 0;
    }
    HEAP8[i16] = 1;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i18 >> 2] = 0;
   }
   do {
    i15 = (HEAP32[i14 >> 2] | 0) + (i17 << 4) | 0;
    if ((i15 | 0) != 0) {
     HEAP32[i15 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i15 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i15 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
    }
    i17 = i17 + 1 | 0;
   } while ((i17 | 0) != 0);
  }
  HEAP32[i12 >> 2] = 0;
  HEAP32[i11 + 0 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  i13 = i3 + 24 | 0;
  i18 = HEAP32[i13 >> 2] | 0;
  if ((i18 | 0) < 0) {
   i16 = i3 + 28 | 0;
   i14 = i3 + 32 | 0;
   if ((HEAP32[i16 >> 2] | 0) < 0) {
    i17 = HEAP32[i14 >> 2] | 0;
    i15 = i3 + 36 | 0;
    if ((i17 | 0) != 0) {
     if ((HEAP8[i15] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i17);
     }
     HEAP32[i14 >> 2] = 0;
    }
    HEAP8[i15] = 1;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i16 >> 2] = 0;
   }
   do {
    i15 = (HEAP32[i14 >> 2] | 0) + (i18 * 12 | 0) | 0;
    if ((i15 | 0) != 0) {
     HEAP32[i15 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i15 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    }
    i18 = i18 + 1 | 0;
   } while ((i18 | 0) != 0);
  }
  HEAP32[i13 >> 2] = 0;
  i11 = i3 + 44 | 0;
  i14 = HEAP32[i11 >> 2] | 0;
  if ((i14 | 0) < 0) {
   i17 = i3 + 48 | 0;
   i18 = i3 + 52 | 0;
   i16 = HEAP32[i18 >> 2] | 0;
   if ((HEAP32[i17 >> 2] | 0) < 0) {
    i15 = i3 + 56 | 0;
    if ((i16 | 0) != 0) {
     if ((HEAP8[i15] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i16);
     }
     HEAP32[i18 >> 2] = 0;
    }
    HEAP8[i15] = 1;
    HEAP32[i18 >> 2] = 0;
    HEAP32[i17 >> 2] = 0;
    i16 = 0;
   }
   do {
    i15 = i16 + (i14 << 2) | 0;
    if ((i15 | 0) != 0) {
     HEAP32[i15 >> 2] = 0;
    }
    i14 = i14 + 1 | 0;
   } while ((i14 | 0) != 0);
  }
  HEAP32[i11 >> 2] = 0;
  i14 = HEAP32[i2 + 124 >> 2] | 0;
  i15 = i14 + 104 | 0;
  if ((HEAP32[i15 >> 2] | 0) < 0) {
   HEAP32[i15 >> 2] = 0;
   i29 = __Z22btAlignedAllocInternalji(4, 16) | 0;
   if ((i29 | 0) != 0) {
    HEAP32[i29 >> 2] = i14;
   }
   i19 = i3 + 8 | 0;
   i17 = i3 + 12 | 0;
   i15 = i3 + 16 | 0;
   i16 = i3 + 28 | 0;
   i18 = i3 + 32 | 0;
   i14 = i3 + 36 | 0;
   i23 = 1;
   i27 = 1;
   i20 = 0;
   while (1) {
    i21 = HEAP32[i29 + (i20 << 2) >> 2] | 0;
    __ZN20btConvexHullInternal14getCoordinatesEPKNS_6VertexE(i9, i2, i21);
    i25 = HEAP32[i12 >> 2] | 0;
    if ((i25 | 0) == (HEAP32[i19 >> 2] | 0) ? (i10 = (i25 | 0) == 0 ? 1 : i25 << 1, (i25 | 0) < (i10 | 0)) : 0) {
     if ((i10 | 0) == 0) {
      i22 = 0;
     } else {
      i22 = __Z22btAlignedAllocInternalji(i10 << 4, 16) | 0;
      i25 = HEAP32[i12 >> 2] | 0;
     }
     if ((i25 | 0) > 0) {
      i24 = 0;
      do {
       i26 = i22 + (i24 << 4) | 0;
       if ((i26 | 0) != 0) {
        i35 = (HEAP32[i17 >> 2] | 0) + (i24 << 4) | 0;
        HEAP32[i26 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
        HEAP32[i26 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
        HEAP32[i26 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
        HEAP32[i26 + 12 >> 2] = HEAP32[i35 + 12 >> 2];
       }
       i24 = i24 + 1 | 0;
      } while ((i24 | 0) != (i25 | 0));
     }
     i24 = HEAP32[i17 >> 2] | 0;
     if ((i24 | 0) != 0) {
      if ((HEAP8[i15] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i24);
      }
      HEAP32[i17 >> 2] = 0;
     }
     HEAP8[i15] = 1;
     HEAP32[i17 >> 2] = i22;
     HEAP32[i19 >> 2] = i10;
     i25 = HEAP32[i12 >> 2] | 0;
    }
    i22 = (HEAP32[i17 >> 2] | 0) + (i25 << 4) | 0;
    if ((i22 | 0) != 0) {
     HEAP32[i22 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
     HEAP32[i22 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
     HEAP32[i22 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
     HEAP32[i22 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
     i25 = HEAP32[i12 >> 2] | 0;
    }
    HEAP32[i12 >> 2] = i25 + 1;
    i21 = HEAP32[i21 + 8 >> 2] | 0;
    if ((i21 | 0) != 0) {
     i22 = i21;
     i24 = -1;
     i26 = -1;
     do {
      i25 = i22 + 20 | 0;
      i28 = HEAP32[i25 >> 2] | 0;
      if ((i28 | 0) < 0) {
       i28 = HEAP32[i13 >> 2] | 0;
       HEAP32[i7 + 0 >> 2] = 0;
       HEAP32[i7 + 4 >> 2] = 0;
       HEAP32[i7 + 8 >> 2] = 0;
       i30 = HEAP32[i16 >> 2] | 0;
       if ((i28 | 0) == (i30 | 0)) {
        i30 = (i28 | 0) == 0 ? 1 : i28 << 1;
        if ((i28 | 0) < (i30 | 0)) {
         if ((i30 | 0) == 0) {
          i31 = 0;
          i32 = i28;
         } else {
          i31 = __Z22btAlignedAllocInternalji(i30 * 12 | 0, 16) | 0;
          i32 = HEAP32[i13 >> 2] | 0;
         }
         if ((i32 | 0) > 0) {
          i33 = 0;
          do {
           i34 = i31 + (i33 * 12 | 0) | 0;
           if ((i34 | 0) != 0) {
            i35 = (HEAP32[i18 >> 2] | 0) + (i33 * 12 | 0) | 0;
            HEAP32[i34 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
            HEAP32[i34 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
            HEAP32[i34 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
           }
           i33 = i33 + 1 | 0;
          } while ((i33 | 0) != (i32 | 0));
         }
         i32 = HEAP32[i18 >> 2] | 0;
         if ((i32 | 0) != 0) {
          if ((HEAP8[i14] | 0) != 0) {
           __Z21btAlignedFreeInternalPv(i32);
          }
          HEAP32[i18 >> 2] = 0;
         }
         HEAP8[i14] = 1;
         HEAP32[i18 >> 2] = i31;
         HEAP32[i16 >> 2] = i30;
         i31 = HEAP32[i13 >> 2] | 0;
        } else {
         i31 = i28;
         i30 = i28;
        }
       } else {
        i31 = i28;
       }
       i32 = (HEAP32[i18 >> 2] | 0) + (i31 * 12 | 0) | 0;
       if ((i32 | 0) == 0) {
        i32 = i30;
       } else {
        HEAP32[i32 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
        HEAP32[i32 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
        HEAP32[i32 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
        i31 = HEAP32[i13 >> 2] | 0;
        i32 = HEAP32[i16 >> 2] | 0;
       }
       i30 = i31 + 1 | 0;
       HEAP32[i13 >> 2] = i30;
       HEAP32[i6 + 0 >> 2] = 0;
       HEAP32[i6 + 4 >> 2] = 0;
       HEAP32[i6 + 8 >> 2] = 0;
       if ((i30 | 0) == (i32 | 0)) {
        i31 = (i32 | 0) == 0 ? 1 : i32 << 1;
        if ((i32 | 0) < (i31 | 0)) {
         if ((i31 | 0) == 0) {
          i30 = 0;
         } else {
          i30 = __Z22btAlignedAllocInternalji(i31 * 12 | 0, 16) | 0;
          i32 = HEAP32[i13 >> 2] | 0;
         }
         if ((i32 | 0) > 0) {
          i34 = 0;
          do {
           i33 = i30 + (i34 * 12 | 0) | 0;
           if ((i33 | 0) != 0) {
            i35 = (HEAP32[i18 >> 2] | 0) + (i34 * 12 | 0) | 0;
            HEAP32[i33 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
            HEAP32[i33 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
            HEAP32[i33 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
           }
           i34 = i34 + 1 | 0;
          } while ((i34 | 0) != (i32 | 0));
         }
         i32 = HEAP32[i18 >> 2] | 0;
         if ((i32 | 0) != 0) {
          if ((HEAP8[i14] | 0) != 0) {
           __Z21btAlignedFreeInternalPv(i32);
          }
          HEAP32[i18 >> 2] = 0;
         }
         HEAP8[i14] = 1;
         HEAP32[i18 >> 2] = i30;
         HEAP32[i16 >> 2] = i31;
         i32 = HEAP32[i13 >> 2] | 0;
        }
       } else {
        i32 = i30;
       }
       i30 = HEAP32[i18 >> 2] | 0;
       i31 = i30 + (i32 * 12 | 0) | 0;
       if ((i31 | 0) != 0) {
        HEAP32[i31 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
        HEAP32[i31 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
        HEAP32[i31 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
        i32 = HEAP32[i13 >> 2] | 0;
        i30 = HEAP32[i18 >> 2] | 0;
       }
       HEAP32[i13 >> 2] = i32 + 1;
       i31 = i28 + 1 | 0;
       HEAP32[i25 >> 2] = i28;
       HEAP32[(HEAP32[i22 + 8 >> 2] | 0) + 20 >> 2] = i31;
       HEAP32[i30 + (i28 * 12 | 0) + 4 >> 2] = 1;
       HEAP32[i30 + (i31 * 12 | 0) + 4 >> 2] = -1;
       i32 = HEAP32[i22 + 12 >> 2] | 0;
       i34 = i32 + 104 | 0;
       i33 = HEAP32[i34 >> 2] | 0;
       if ((i33 | 0) < 0) {
        HEAP32[i34 >> 2] = i23;
        if ((i23 | 0) == (i27 | 0) ? (i8 = (i27 | 0) == 0 ? 1 : i27 << 1, (i27 | 0) < (i8 | 0)) : 0) {
         if ((i8 | 0) == 0) {
          i35 = 0;
         } else {
          i35 = __Z22btAlignedAllocInternalji(i8 << 2, 16) | 0;
         }
         if ((i27 | 0) > 0) {
          i34 = 0;
          do {
           i33 = i35 + (i34 << 2) | 0;
           if ((i33 | 0) != 0) {
            HEAP32[i33 >> 2] = HEAP32[i29 + (i34 << 2) >> 2];
           }
           i34 = i34 + 1 | 0;
          } while ((i34 | 0) != (i27 | 0));
         }
         if ((i29 | 0) == 0) {
          i29 = i35;
          i27 = i8;
         } else {
          __Z21btAlignedFreeInternalPv(i29);
          i29 = i35;
          i27 = i8;
         }
        }
        i33 = i29 + (i23 << 2) | 0;
        if ((i33 | 0) != 0) {
         HEAP32[i33 >> 2] = i32;
        }
        i32 = i23 + 1 | 0;
       } else {
        i32 = i23;
        i23 = i33;
       }
       HEAP32[i30 + (i28 * 12 | 0) + 8 >> 2] = i23;
       HEAP32[i30 + (i31 * 12 | 0) + 8 >> 2] = i20;
       i28 = HEAP32[i25 >> 2] | 0;
       i23 = i32;
      }
      if ((i26 | 0) > -1) {
       HEAP32[(HEAP32[i18 >> 2] | 0) + (i28 * 12 | 0) >> 2] = i26 - i28;
       i26 = HEAP32[i25 >> 2] | 0;
      } else {
       i26 = i28;
       i24 = i28;
      }
      i22 = HEAP32[i22 >> 2] | 0;
     } while ((i22 | 0) != (i21 | 0));
     HEAP32[(HEAP32[i18 >> 2] | 0) + (i24 * 12 | 0) >> 2] = i26 - i24;
    }
    i21 = i20 + 1 | 0;
    if ((i21 | 0) < (i23 | 0)) {
     i20 = i21;
    } else {
     break;
    }
   }
   if ((i20 | 0) > -1) {
    i7 = i3 + 48 | 0;
    i6 = i3 + 52 | 0;
    i3 = i3 + 56 | 0;
    i8 = 0;
    do {
     i9 = HEAP32[(HEAP32[i29 + (i8 << 2) >> 2] | 0) + 8 >> 2] | 0;
     if ((i9 | 0) != 0) {
      i10 = i9;
      do {
       i12 = i10 + 20 | 0;
       if ((HEAP32[i12 >> 2] | 0) > -1) {
        i16 = HEAP32[i11 >> 2] | 0;
        if ((i16 | 0) == (HEAP32[i7 >> 2] | 0) ? (i4 = (i16 | 0) == 0 ? 1 : i16 << 1, (i16 | 0) < (i4 | 0)) : 0) {
         if ((i4 | 0) == 0) {
          i13 = 0;
         } else {
          i13 = __Z22btAlignedAllocInternalji(i4 << 2, 16) | 0;
          i16 = HEAP32[i11 >> 2] | 0;
         }
         if ((i16 | 0) > 0) {
          i15 = 0;
          do {
           i14 = i13 + (i15 << 2) | 0;
           if ((i14 | 0) != 0) {
            HEAP32[i14 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + (i15 << 2) >> 2];
           }
           i15 = i15 + 1 | 0;
          } while ((i15 | 0) != (i16 | 0));
         }
         i14 = HEAP32[i6 >> 2] | 0;
         if ((i14 | 0) != 0) {
          if ((HEAP8[i3] | 0) != 0) {
           __Z21btAlignedFreeInternalPv(i14);
          }
          HEAP32[i6 >> 2] = 0;
         }
         HEAP8[i3] = 1;
         HEAP32[i6 >> 2] = i13;
         HEAP32[i7 >> 2] = i4;
         i16 = HEAP32[i11 >> 2] | 0;
        }
        i13 = (HEAP32[i6 >> 2] | 0) + (i16 << 2) | 0;
        if ((i13 | 0) != 0) {
         HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
         i16 = HEAP32[i11 >> 2] | 0;
        }
        HEAP32[i11 >> 2] = i16 + 1;
        i12 = i10;
        do {
         HEAP32[i12 + 20 >> 2] = -1;
         i12 = HEAP32[(HEAP32[i12 + 8 >> 2] | 0) + 4 >> 2] | 0;
        } while ((i12 | 0) != (i10 | 0));
       }
       i10 = HEAP32[i10 >> 2] | 0;
      } while ((i10 | 0) != (i9 | 0));
     }
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) < (i21 | 0));
   }
   if ((i29 | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i29);
   }
  }
 }
 __ZN20btConvexHullInternalD2Ev(i2);
 d36 = d5;
 STACKTOP = i1;
 return +d36;
}
function __ZNK14btQuantizedBvh9serializeEPvjb(i6, i1, i2, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i3 = STACKTOP;
 i2 = i6 + 168 | 0;
 HEAP32[i2 >> 2] = HEAP32[i6 + 152 >> 2];
 HEAP32[i1 >> 2] = 456232;
 HEAP32[i1 + 52 >> 2] = 278;
 i19 = i1 + 60 | 0;
 HEAP8[i19] = 0;
 HEAP8[i1 + 80 | 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 i12 = i1 + 100 | 0;
 HEAP8[i12] = 1;
 i11 = i1 + 96 | 0;
 HEAP32[i11 >> 2] = 0;
 i10 = i1 + 88 | 0;
 HEAP32[i10 >> 2] = 0;
 i17 = i1 + 92 | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP8[i1 + 120 | 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i18 = i1 + 140 | 0;
 HEAP8[i18] = 1;
 i16 = i1 + 136 | 0;
 HEAP32[i16 >> 2] = 0;
 i14 = i1 + 128 | 0;
 HEAP32[i14 >> 2] = 0;
 i15 = i1 + 132 | 0;
 HEAP32[i15 >> 2] = 0;
 i29 = i1 + 144 | 0;
 HEAP32[i29 >> 2] = 0;
 i7 = i1 + 164 | 0;
 HEAP8[i7] = 1;
 i8 = i1 + 160 | 0;
 HEAP32[i8 >> 2] = 0;
 i4 = i1 + 152 | 0;
 HEAP32[i4 >> 2] = 0;
 i9 = i1 + 156 | 0;
 HEAP32[i9 >> 2] = 0;
 i20 = i1 + 168 | 0;
 HEAP32[i20 >> 2] = 0;
 i23 = i1 + 4 | 0;
 HEAPF32[i23 >> 2] = -3.4028234663852886e+38;
 i22 = i1 + 8 | 0;
 HEAPF32[i22 >> 2] = -3.4028234663852886e+38;
 i27 = i1 + 12 | 0;
 HEAPF32[i27 >> 2] = -3.4028234663852886e+38;
 i30 = i1 + 16 | 0;
 HEAPF32[i30 >> 2] = 0.0;
 i21 = i1 + 20 | 0;
 HEAPF32[i21 >> 2] = 3.4028234663852886e+38;
 i25 = i1 + 24 | 0;
 HEAPF32[i25 >> 2] = 3.4028234663852886e+38;
 i26 = i1 + 28 | 0;
 HEAPF32[i26 >> 2] = 3.4028234663852886e+38;
 i28 = i1 + 32 | 0;
 HEAPF32[i28 >> 2] = 0.0;
 i13 = i6 + 56 | 0;
 i24 = HEAP32[i13 >> 2] | 0;
 if (i5) {
  HEAP32[i1 + 56 >> 2] = _llvm_bswap_i32(i24 | 0) | 0;
  i24 = i6 + 4 | 0;
  HEAP8[i23] = HEAP8[i24 + 3 | 0] | 0;
  HEAP8[i1 + 5 | 0] = HEAP8[i24 + 2 | 0] | 0;
  HEAP8[i1 + 6 | 0] = HEAP8[i24 + 1 | 0] | 0;
  HEAP8[i1 + 7 | 0] = HEAP8[i24] | 0;
  i24 = i6 + 8 | 0;
  HEAP8[i22] = HEAP8[i24 + 3 | 0] | 0;
  HEAP8[i1 + 9 | 0] = HEAP8[i24 + 2 | 0] | 0;
  HEAP8[i1 + 10 | 0] = HEAP8[i24 + 1 | 0] | 0;
  HEAP8[i1 + 11 | 0] = HEAP8[i24] | 0;
  i24 = i6 + 12 | 0;
  HEAP8[i27] = HEAP8[i24 + 3 | 0] | 0;
  HEAP8[i1 + 13 | 0] = HEAP8[i24 + 2 | 0] | 0;
  HEAP8[i1 + 14 | 0] = HEAP8[i24 + 1 | 0] | 0;
  HEAP8[i1 + 15 | 0] = HEAP8[i24] | 0;
  i27 = i6 + 16 | 0;
  HEAP8[i30] = HEAP8[i27 + 3 | 0] | 0;
  HEAP8[i1 + 17 | 0] = HEAP8[i27 + 2 | 0] | 0;
  HEAP8[i1 + 18 | 0] = HEAP8[i27 + 1 | 0] | 0;
  HEAP8[i1 + 19 | 0] = HEAP8[i27] | 0;
  i30 = i6 + 20 | 0;
  HEAP8[i21] = HEAP8[i30 + 3 | 0] | 0;
  HEAP8[i1 + 21 | 0] = HEAP8[i30 + 2 | 0] | 0;
  HEAP8[i1 + 22 | 0] = HEAP8[i30 + 1 | 0] | 0;
  HEAP8[i1 + 23 | 0] = HEAP8[i30] | 0;
  i21 = i6 + 24 | 0;
  HEAP8[i25] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 25 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 26 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 27 | 0] = HEAP8[i21] | 0;
  i21 = i6 + 28 | 0;
  HEAP8[i26] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 29 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 30 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 31 | 0] = HEAP8[i21] | 0;
  i21 = i6 + 32 | 0;
  HEAP8[i28] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 33 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 34 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 35 | 0] = HEAP8[i21] | 0;
  i21 = i6 + 36 | 0;
  HEAP8[i1 + 36 | 0] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 37 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 38 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 39 | 0] = HEAP8[i21] | 0;
  i21 = i6 + 40 | 0;
  HEAP8[i1 + 40 | 0] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 41 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 42 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 43 | 0] = HEAP8[i21] | 0;
  i21 = i6 + 44 | 0;
  HEAP8[i1 + 44 | 0] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 45 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 46 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 47 | 0] = HEAP8[i21] | 0;
  i21 = i6 + 48 | 0;
  HEAP8[i1 + 48 | 0] = HEAP8[i21 + 3 | 0] | 0;
  HEAP8[i1 + 49 | 0] = HEAP8[i21 + 2 | 0] | 0;
  HEAP8[i1 + 50 | 0] = HEAP8[i21 + 1 | 0] | 0;
  HEAP8[i1 + 51 | 0] = HEAP8[i21] | 0;
  HEAP32[i29 >> 2] = _llvm_bswap_i32(HEAP32[i6 + 144 >> 2] | 0) | 0;
  i21 = _llvm_bswap_i32(HEAP32[i2 >> 2] | 0) | 0;
 } else {
  HEAP32[i1 + 56 >> 2] = i24;
  i30 = i6 + 4 | 0;
  HEAP32[i23 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
  HEAP32[i23 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
  i30 = i6 + 20 | 0;
  HEAP32[i21 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
  i21 = i1 + 36 | 0;
  i30 = i6 + 36 | 0;
  HEAP32[i21 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
  HEAP32[i29 >> 2] = HEAP32[i6 + 144 >> 2];
  i21 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i20 >> 2] = i21;
 i30 = i6 + 60 | 0;
 HEAP8[i19] = HEAP8[i30] | 0;
 i19 = i1 + 172 | 0;
 i13 = HEAP32[i13 >> 2] | 0;
 if ((HEAP8[i30] | 0) == 0) {
  i14 = HEAP32[i11 >> 2] | 0;
  if ((i14 | 0) != 0) {
   if ((HEAP8[i12] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i14);
   }
   HEAP32[i11 >> 2] = 0;
  }
  HEAP32[i10 + 0 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  HEAP8[i10 + 12 | 0] = 0;
  HEAP32[i11 >> 2] = i19;
  HEAP32[i10 >> 2] = i13;
  HEAP32[i17 >> 2] = i13;
  i14 = (i13 | 0) > 0;
  if (i5) {
   if (i14) {
    i14 = i6 + 96 | 0;
    i15 = HEAP32[i14 >> 2] | 0;
    i16 = 0;
    do {
     i30 = i15 + (i16 << 6) | 0;
     i29 = i19 + (i16 << 6) | 0;
     HEAP8[i29] = HEAP8[i30 + 3 | 0] | 0;
     HEAP8[i29 + 1 | 0] = HEAP8[i30 + 2 | 0] | 0;
     HEAP8[i29 + 2 | 0] = HEAP8[i30 + 1 | 0] | 0;
     HEAP8[i29 + 3 | 0] = HEAP8[i30] | 0;
     i29 = i15 + (i16 << 6) + 4 | 0;
     i30 = i19 + (i16 << 6) + 4 | 0;
     HEAP8[i30] = HEAP8[i29 + 3 | 0] | 0;
     HEAP8[i30 + 1 | 0] = HEAP8[i29 + 2 | 0] | 0;
     HEAP8[i30 + 2 | 0] = HEAP8[i29 + 1 | 0] | 0;
     HEAP8[i30 + 3 | 0] = HEAP8[i29] | 0;
     i30 = i15 + (i16 << 6) + 8 | 0;
     i29 = i19 + (i16 << 6) + 8 | 0;
     HEAP8[i29] = HEAP8[i30 + 3 | 0] | 0;
     HEAP8[i29 + 1 | 0] = HEAP8[i30 + 2 | 0] | 0;
     HEAP8[i29 + 2 | 0] = HEAP8[i30 + 1 | 0] | 0;
     HEAP8[i29 + 3 | 0] = HEAP8[i30] | 0;
     i29 = i15 + (i16 << 6) + 12 | 0;
     i30 = i19 + (i16 << 6) + 12 | 0;
     HEAP8[i30] = HEAP8[i29 + 3 | 0] | 0;
     HEAP8[i30 + 1 | 0] = HEAP8[i29 + 2 | 0] | 0;
     HEAP8[i30 + 2 | 0] = HEAP8[i29 + 1 | 0] | 0;
     HEAP8[i30 + 3 | 0] = HEAP8[i29] | 0;
     i30 = HEAP32[i14 >> 2] | 0;
     i29 = i30 + (i16 << 6) + 16 | 0;
     i15 = HEAP32[i11 >> 2] | 0;
     i19 = i15 + (i16 << 6) + 16 | 0;
     HEAP8[i19] = HEAP8[i29 + 3 | 0] | 0;
     HEAP8[i19 + 1 | 0] = HEAP8[i29 + 2 | 0] | 0;
     HEAP8[i19 + 2 | 0] = HEAP8[i29 + 1 | 0] | 0;
     HEAP8[i19 + 3 | 0] = HEAP8[i29] | 0;
     i19 = i30 + (i16 << 6) + 20 | 0;
     i29 = i15 + (i16 << 6) + 20 | 0;
     HEAP8[i29] = HEAP8[i19 + 3 | 0] | 0;
     HEAP8[i29 + 1 | 0] = HEAP8[i19 + 2 | 0] | 0;
     HEAP8[i29 + 2 | 0] = HEAP8[i19 + 1 | 0] | 0;
     HEAP8[i29 + 3 | 0] = HEAP8[i19] | 0;
     i29 = i30 + (i16 << 6) + 24 | 0;
     i19 = i15 + (i16 << 6) + 24 | 0;
     HEAP8[i19] = HEAP8[i29 + 3 | 0] | 0;
     HEAP8[i19 + 1 | 0] = HEAP8[i29 + 2 | 0] | 0;
     HEAP8[i19 + 2 | 0] = HEAP8[i29 + 1 | 0] | 0;
     HEAP8[i19 + 3 | 0] = HEAP8[i29] | 0;
     i30 = i30 + (i16 << 6) + 28 | 0;
     i15 = i15 + (i16 << 6) + 28 | 0;
     HEAP8[i15] = HEAP8[i30 + 3 | 0] | 0;
     HEAP8[i15 + 1 | 0] = HEAP8[i30 + 2 | 0] | 0;
     HEAP8[i15 + 2 | 0] = HEAP8[i30 + 1 | 0] | 0;
     HEAP8[i15 + 3 | 0] = HEAP8[i30] | 0;
     i15 = HEAP32[i14 >> 2] | 0;
     i30 = _llvm_bswap_i32(HEAP32[i15 + (i16 << 6) + 32 >> 2] | 0) | 0;
     i19 = HEAP32[i11 >> 2] | 0;
     HEAP32[i19 + (i16 << 6) + 32 >> 2] = i30;
     HEAP32[i19 + (i16 << 6) + 36 >> 2] = _llvm_bswap_i32(HEAP32[i15 + (i16 << 6) + 36 >> 2] | 0) | 0;
     HEAP32[i19 + (i16 << 6) + 40 >> 2] = _llvm_bswap_i32(HEAP32[i15 + (i16 << 6) + 40 >> 2] | 0) | 0;
     i16 = i16 + 1 | 0;
    } while ((i16 | 0) != (i13 | 0));
   }
  } else {
   if (i14) {
    i14 = i6 + 96 | 0;
    i16 = HEAP32[i14 >> 2] | 0;
    i15 = 0;
    do {
     i19 = i19 + (i15 << 6) | 0;
     i16 = i16 + (i15 << 6) | 0;
     HEAP32[i19 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i19 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i19 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i19 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
     i16 = (HEAP32[i11 >> 2] | 0) + (i15 << 6) + 16 | 0;
     i19 = (HEAP32[i14 >> 2] | 0) + (i15 << 6) + 16 | 0;
     HEAP32[i16 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
     HEAP32[i16 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     HEAP32[i16 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
     HEAP32[i16 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
     i16 = HEAP32[i14 >> 2] | 0;
     i19 = HEAP32[i11 >> 2] | 0;
     HEAP32[i19 + (i15 << 6) + 32 >> 2] = HEAP32[i16 + (i15 << 6) + 32 >> 2];
     HEAP32[i19 + (i15 << 6) + 36 >> 2] = HEAP32[i16 + (i15 << 6) + 36 >> 2];
     HEAP32[i19 + (i15 << 6) + 40 >> 2] = HEAP32[i16 + (i15 << 6) + 40 >> 2];
     i15 = i15 + 1 | 0;
    } while ((i15 | 0) != (i13 | 0));
   }
  }
  i13 = i13 << 6;
  if ((i19 | 0) != 0) {
   if ((HEAP8[i12] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i19);
   }
   HEAP32[i11 >> 2] = 0;
  }
  HEAP32[i10 + 0 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  HEAP8[i10 + 12 | 0] = 0;
 } else {
  i10 = HEAP32[i16 >> 2] | 0;
  if ((i10 | 0) != 0) {
   if ((HEAP8[i18] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i10);
   }
   HEAP32[i16 >> 2] = 0;
  }
  HEAP32[i14 + 0 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  HEAP8[i14 + 12 | 0] = 0;
  HEAP32[i16 >> 2] = i19;
  HEAP32[i14 >> 2] = i13;
  HEAP32[i15 >> 2] = i13;
  i10 = (i13 | 0) > 0;
  if (i5) {
   if (i10) {
    i11 = HEAP32[i6 + 136 >> 2] | 0;
    i10 = 0;
    do {
     i30 = HEAPU16[i11 + (i10 << 4) >> 1] | 0;
     HEAP16[i19 + (i10 << 4) >> 1] = i30 >>> 8 | i30 << 8;
     i30 = HEAPU16[i11 + (i10 << 4) + 2 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 2 >> 1] = i30 >>> 8 | i30 << 8;
     i30 = HEAPU16[i11 + (i10 << 4) + 4 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 4 >> 1] = i30 >>> 8 | i30 << 8;
     i30 = HEAPU16[i11 + (i10 << 4) + 6 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 6 >> 1] = i30 >>> 8 | i30 << 8;
     i30 = HEAPU16[i11 + (i10 << 4) + 8 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 8 >> 1] = i30 >>> 8 | i30 << 8;
     i30 = HEAPU16[i11 + (i10 << 4) + 10 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 10 >> 1] = i30 >>> 8 | i30 << 8;
     HEAP32[i19 + (i10 << 4) + 12 >> 2] = _llvm_bswap_i32(HEAP32[i11 + (i10 << 4) + 12 >> 2] | 0) | 0;
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i13 | 0));
   }
  } else {
   if (i10) {
    i11 = HEAP32[i6 + 136 >> 2] | 0;
    i10 = 0;
    do {
     HEAP16[i19 + (i10 << 4) >> 1] = HEAP16[i11 + (i10 << 4) >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 2 >> 1] = HEAP16[i11 + (i10 << 4) + 2 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 4 >> 1] = HEAP16[i11 + (i10 << 4) + 4 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 6 >> 1] = HEAP16[i11 + (i10 << 4) + 6 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 8 >> 1] = HEAP16[i11 + (i10 << 4) + 8 >> 1] | 0;
     HEAP16[i19 + (i10 << 4) + 10 >> 1] = HEAP16[i11 + (i10 << 4) + 10 >> 1] | 0;
     HEAP32[i19 + (i10 << 4) + 12 >> 2] = HEAP32[i11 + (i10 << 4) + 12 >> 2];
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i13 | 0));
   }
  }
  i13 = i13 << 4;
  HEAP32[i14 + 0 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  HEAP8[i14 + 12 | 0] = 0;
 }
 i10 = i1 + (i13 + 172) | 0;
 i11 = HEAP32[i2 >> 2] | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 if ((i12 | 0) != 0) {
  if ((HEAP8[i7] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i12);
  }
  HEAP32[i8 >> 2] = 0;
 }
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP8[i4 + 12 | 0] = 0;
 HEAP32[i8 >> 2] = i10;
 HEAP32[i4 >> 2] = i11;
 HEAP32[i9 >> 2] = i11;
 i7 = (HEAP32[i2 >> 2] | 0) > 0;
 if (i5) {
  if (!i7) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i4 + 0 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP8[i4 + 12 | 0] = 0;
   STACKTOP = i3;
   return 1;
  }
  i5 = HEAP32[i6 + 160 >> 2] | 0;
  i6 = 0;
  do {
   i30 = HEAPU16[i5 + (i6 << 5) >> 1] | 0;
   HEAP16[i10 + (i6 << 5) >> 1] = i30 >>> 8 | i30 << 8;
   i30 = HEAPU16[i5 + (i6 << 5) + 2 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 2 >> 1] = i30 >>> 8 | i30 << 8;
   i30 = HEAPU16[i5 + (i6 << 5) + 4 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 4 >> 1] = i30 >>> 8 | i30 << 8;
   i30 = HEAPU16[i5 + (i6 << 5) + 6 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 6 >> 1] = i30 >>> 8 | i30 << 8;
   i30 = HEAPU16[i5 + (i6 << 5) + 8 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 8 >> 1] = i30 >>> 8 | i30 << 8;
   i30 = HEAPU16[i5 + (i6 << 5) + 10 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 10 >> 1] = i30 >>> 8 | i30 << 8;
   HEAP32[i10 + (i6 << 5) + 12 >> 2] = _llvm_bswap_i32(HEAP32[i5 + (i6 << 5) + 12 >> 2] | 0) | 0;
   HEAP32[i10 + (i6 << 5) + 16 >> 2] = _llvm_bswap_i32(HEAP32[i5 + (i6 << 5) + 16 >> 2] | 0) | 0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i2 >> 2] | 0));
  HEAP32[i1 >> 2] = 0;
  HEAP32[i4 + 0 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP8[i4 + 12 | 0] = 0;
  STACKTOP = i3;
  return 1;
 } else {
  if (!i7) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i4 + 0 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP8[i4 + 12 | 0] = 0;
   STACKTOP = i3;
   return 1;
  }
  i5 = HEAP32[i6 + 160 >> 2] | 0;
  i6 = 0;
  do {
   HEAP16[i10 + (i6 << 5) >> 1] = HEAP16[i5 + (i6 << 5) >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 2 >> 1] = HEAP16[i5 + (i6 << 5) + 2 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 4 >> 1] = HEAP16[i5 + (i6 << 5) + 4 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 6 >> 1] = HEAP16[i5 + (i6 << 5) + 6 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 8 >> 1] = HEAP16[i5 + (i6 << 5) + 8 >> 1] | 0;
   HEAP16[i10 + (i6 << 5) + 10 >> 1] = HEAP16[i5 + (i6 << 5) + 10 >> 1] | 0;
   HEAP32[i10 + (i6 << 5) + 12 >> 2] = HEAP32[i5 + (i6 << 5) + 12 >> 2];
   HEAP32[i10 + (i6 << 5) + 16 >> 2] = HEAP32[i5 + (i6 << 5) + 16 >> 2];
   HEAP32[i10 + (i6 << 5) + 20 >> 2] = 0;
   HEAP32[i10 + (i6 << 5) + 24 >> 2] = 0;
   HEAP32[i10 + (i6 << 5) + 28 >> 2] = 0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i2 >> 2] | 0));
  HEAP32[i1 >> 2] = 0;
  HEAP32[i4 + 0 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP8[i4 + 12 | 0] = 0;
  STACKTOP = i3;
  return 1;
 }
 return 0;
}
function __ZN20btConvexHullInternal6shrinkEff(i3, d4, d5) {
 i3 = i3 | 0;
 d4 = +d4;
 d5 = +d5;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i1 + 120 | 0;
 i15 = i1 + 48 | 0;
 i11 = i1 + 32 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1;
 i8 = i1 + 104 | 0;
 i6 = i1 + 88 | 0;
 i2 = i1 + 64 | 0;
 i16 = i3 + 124 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i17 | 0) == 0) {
  d52 = 0.0;
  STACKTOP = i1;
  return +d52;
 }
 i31 = i3 + 100 | 0;
 i14 = (HEAP32[i31 >> 2] | 0) + -1 | 0;
 HEAP32[i31 >> 2] = i14;
 HEAP32[i17 + 104 >> 2] = i14;
 i31 = __Z22btAlignedAllocInternalji(4, 16) | 0;
 if ((i31 | 0) != 0) {
  HEAP32[i31 >> 2] = HEAP32[i16 >> 2];
 }
 i19 = HEAP32[i16 >> 2] | 0;
 i21 = HEAP32[i19 + 88 >> 2] | 0;
 i20 = HEAP32[i19 + 92 >> 2] | 0;
 i19 = HEAP32[i19 + 96 >> 2] | 0;
 i18 = i15 + 8 | 0;
 HEAP32[i15 + 0 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 i16 = i11 + 8 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 i17 = i10 + 8 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 i22 = i9 + 8 | 0;
 i23 = i3 + 64 | 0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i32 = 1;
 i35 = 0;
 i30 = 1;
 i34 = 0;
 i28 = 0;
 i37 = 0;
 i39 = 0;
 i38 = 0;
 i36 = 0;
 L7 : while (1) {
  do {
   if ((i30 | 0) <= 0) {
    break L7;
   }
   i30 = i30 + -1 | 0;
   i27 = HEAP32[i31 + (i30 << 2) >> 2] | 0;
   i26 = i27 + 8 | 0;
   i29 = HEAP32[i26 >> 2] | 0;
  } while ((i29 | 0) == 0);
  i24 = i27 + 88 | 0;
  i25 = i27 + 92 | 0;
  i27 = i27 + 96 | 0;
  while (1) {
   i40 = i29 + 12 | 0;
   i33 = (HEAP32[i40 >> 2] | 0) + 104 | 0;
   if ((HEAP32[i33 >> 2] | 0) != (i14 | 0)) {
    HEAP32[i33 >> 2] = i14;
    if ((i30 | 0) == (i32 | 0) ? (i12 = (i32 | 0) == 0 ? 1 : i32 << 1, (i32 | 0) < (i12 | 0)) : 0) {
     if ((i12 | 0) == 0) {
      i33 = 0;
     } else {
      i33 = __Z22btAlignedAllocInternalji(i12 << 2, 16) | 0;
     }
     if ((i32 | 0) > 0) {
      i42 = 0;
      do {
       i41 = i33 + (i42 << 2) | 0;
       if ((i41 | 0) != 0) {
        HEAP32[i41 >> 2] = HEAP32[i31 + (i42 << 2) >> 2];
       }
       i42 = i42 + 1 | 0;
      } while ((i42 | 0) != (i32 | 0));
     }
     if ((i31 | 0) == 0) {
      i32 = i12;
      i31 = i33;
     } else {
      __Z21btAlignedFreeInternalPv(i31);
      i32 = i12;
      i31 = i33;
     }
    }
    i33 = i31 + (i30 << 2) | 0;
    if ((i33 | 0) != 0) {
     HEAP32[i33 >> 2] = HEAP32[i40 >> 2];
    }
    i30 = i30 + 1 | 0;
   }
   if ((HEAP32[i29 + 20 >> 2] | 0) != (i14 | 0)) {
    i33 = __ZN20btConvexHullInternal4PoolINS_4FaceEE9newObjectEv(i23) | 0;
    i41 = HEAP32[i40 >> 2] | 0;
    i44 = HEAP32[(HEAP32[(HEAP32[i29 + 8 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i33 + 4 >> 2] = i41;
    i47 = i33 + 12 | 0;
    i40 = i41 + 88 | 0;
    HEAP32[i47 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
    HEAP32[i47 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
    HEAP32[i47 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
    HEAP32[i47 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
    i47 = i41 + 88 | 0;
    i40 = i41 + 92 | 0;
    i45 = (HEAP32[i44 + 92 >> 2] | 0) - (HEAP32[i40 >> 2] | 0) | 0;
    i42 = i41 + 96 | 0;
    i46 = (HEAP32[i44 + 96 >> 2] | 0) - (HEAP32[i42 >> 2] | 0) | 0;
    HEAP32[i33 + 28 >> 2] = (HEAP32[i44 + 88 >> 2] | 0) - (HEAP32[i47 >> 2] | 0);
    HEAP32[i33 + 32 >> 2] = i45;
    HEAP32[i33 + 36 >> 2] = i46;
    HEAP32[i33 + 40 >> 2] = -1;
    i40 = (HEAP32[i25 >> 2] | 0) - (HEAP32[i40 >> 2] | 0) | 0;
    i42 = (HEAP32[i27 >> 2] | 0) - (HEAP32[i42 >> 2] | 0) | 0;
    HEAP32[i33 + 44 >> 2] = (HEAP32[i24 >> 2] | 0) - (HEAP32[i47 >> 2] | 0);
    HEAP32[i33 + 48 >> 2] = i40;
    HEAP32[i33 + 52 >> 2] = i42;
    HEAP32[i33 + 56 >> 2] = -1;
    i42 = i41 + 16 | 0;
    i40 = HEAP32[i42 >> 2] | 0;
    if ((i40 | 0) == 0) {
     HEAP32[i41 + 12 >> 2] = i33;
    } else {
     HEAP32[i40 + 8 >> 2] = i33;
    }
    HEAP32[i42 >> 2] = i33;
    if ((i28 | 0) == (i35 | 0) ? (i13 = (i35 | 0) == 0 ? 1 : i35 << 1, (i35 | 0) < (i13 | 0)) : 0) {
     if ((i13 | 0) == 0) {
      i40 = 0;
     } else {
      i40 = __Z22btAlignedAllocInternalji(i13 << 2, 16) | 0;
     }
     if ((i35 | 0) > 0) {
      i41 = 0;
      do {
       i42 = i40 + (i41 << 2) | 0;
       if ((i42 | 0) != 0) {
        HEAP32[i42 >> 2] = HEAP32[i34 + (i41 << 2) >> 2];
       }
       i41 = i41 + 1 | 0;
      } while ((i41 | 0) != (i35 | 0));
     }
     if ((i34 | 0) == 0) {
      i35 = i13;
      i34 = i40;
     } else {
      __Z21btAlignedFreeInternalPv(i34);
      i35 = i13;
      i34 = i40;
     }
    }
    i40 = i34 + (i28 << 2) | 0;
    if ((i40 | 0) == 0) {
     i41 = i36;
     i40 = i37;
     i42 = 0;
     i36 = 0;
     i37 = i29;
    } else {
     HEAP32[i40 >> 2] = i33;
     i41 = i36;
     i40 = i37;
     i42 = 0;
     i36 = 0;
     i37 = i29;
    }
    while (1) {
     if (!((i42 | 0) == 0 | (i36 | 0) == 0)) {
      i47 = HEAP32[i24 >> 2] | 0;
      i56 = i47 - i21 | 0;
      i54 = HEAP32[i25 >> 2] | 0;
      i39 = i54 - i20 | 0;
      i44 = HEAP32[i27 >> 2] | 0;
      i46 = i44 - i19 | 0;
      i53 = HEAP32[i42 + 88 >> 2] | 0;
      i59 = i53 - i21 | 0;
      i43 = HEAP32[i42 + 92 >> 2] | 0;
      i57 = i43 - i20 | 0;
      i45 = HEAP32[i42 + 96 >> 2] | 0;
      i61 = i45 - i19 | 0;
      i41 = HEAP32[i36 + 88 >> 2] | 0;
      i58 = i41 - i21 | 0;
      i42 = HEAP32[i36 + 92 >> 2] | 0;
      i60 = i42 - i20 | 0;
      i40 = HEAP32[i36 + 96 >> 2] | 0;
      i38 = i40 - i19 | 0;
      i55 = (Math_imul(i38, i57) | 0) - (Math_imul(i60, i61) | 0) | 0;
      i38 = (Math_imul(i58, i61) | 0) - (Math_imul(i38, i59) | 0) | 0;
      i57 = (Math_imul(i60, i59) | 0) - (Math_imul(i58, i57) | 0) | 0;
      i56 = ___muldi3(i55 | 0, ((i55 | 0) < 0) << 31 >> 31 | 0, i56 | 0, ((i56 | 0) < 0) << 31 >> 31 | 0) | 0;
      i55 = tempRet0;
      i39 = ___muldi3(i38 | 0, ((i38 | 0) < 0) << 31 >> 31 | 0, i39 | 0, ((i39 | 0) < 0) << 31 >> 31 | 0) | 0;
      i38 = tempRet0;
      i46 = ___muldi3(i57 | 0, ((i57 | 0) < 0) << 31 >> 31 | 0, i46 | 0, ((i46 | 0) < 0) << 31 >> 31 | 0) | 0;
      i46 = _i64Add(i56 | 0, i55 | 0, i46 | 0, tempRet0 | 0) | 0;
      i38 = _i64Add(i46 | 0, tempRet0 | 0, i39 | 0, i38 | 0) | 0;
      i39 = tempRet0;
      i41 = i47 + i21 + i53 + i41 | 0;
      i42 = i54 + i20 + i43 + i42 | 0;
      i40 = i44 + i19 + i45 + i40 | 0;
      i41 = ___muldi3(i38 | 0, i39 | 0, i41 | 0, ((i41 | 0) < 0) << 31 >> 31 | 0) | 0;
      i45 = tempRet0;
      i44 = _bitshift64Ashr(i41 | 0, i45 | 0, 63) | 0;
      i43 = tempRet0;
      i54 = i15;
      i53 = HEAP32[i54 >> 2] | 0;
      i54 = HEAP32[i54 + 4 >> 2] | 0;
      i45 = _i64Add(i41 | 0, i45 | 0, i53 | 0, i54 | 0) | 0;
      i41 = tempRet0;
      i47 = i18;
      i46 = HEAP32[i47 >> 2] | 0;
      i47 = HEAP32[i47 + 4 >> 2] | 0;
      if (i41 >>> 0 < i54 >>> 0 | (i41 | 0) == (i54 | 0) & i45 >>> 0 < i53 >>> 0) {
       i46 = _i64Add(i46 | 0, i47 | 0, 1, 0) | 0;
       i47 = tempRet0;
       i61 = i18;
       HEAP32[i61 >> 2] = i46;
       HEAP32[i61 + 4 >> 2] = i47;
      }
      i60 = i15;
      HEAP32[i60 >> 2] = i45;
      HEAP32[i60 + 4 >> 2] = i41;
      i43 = _i64Add(i46 | 0, i47 | 0, i44 | 0, i43 | 0) | 0;
      i41 = i18;
      HEAP32[i41 >> 2] = i43;
      HEAP32[i41 + 4 >> 2] = tempRet0;
      i42 = ___muldi3(i38 | 0, i39 | 0, i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0) | 0;
      i41 = tempRet0;
      i43 = _bitshift64Ashr(i42 | 0, i41 | 0, 63) | 0;
      i44 = tempRet0;
      i60 = i11;
      i61 = HEAP32[i60 >> 2] | 0;
      i60 = HEAP32[i60 + 4 >> 2] | 0;
      i41 = _i64Add(i61 | 0, i60 | 0, i42 | 0, i41 | 0) | 0;
      i42 = tempRet0;
      i45 = i16;
      i46 = HEAP32[i45 >> 2] | 0;
      i45 = HEAP32[i45 + 4 >> 2] | 0;
      if (i42 >>> 0 < i60 >>> 0 | (i42 | 0) == (i60 | 0) & i41 >>> 0 < i61 >>> 0) {
       i46 = _i64Add(i46 | 0, i45 | 0, 1, 0) | 0;
       i45 = tempRet0;
       i61 = i16;
       HEAP32[i61 >> 2] = i46;
       HEAP32[i61 + 4 >> 2] = i45;
      }
      i60 = i11;
      HEAP32[i60 >> 2] = i41;
      HEAP32[i60 + 4 >> 2] = i42;
      i43 = _i64Add(i46 | 0, i45 | 0, i43 | 0, i44 | 0) | 0;
      i42 = i16;
      HEAP32[i42 >> 2] = i43;
      HEAP32[i42 + 4 >> 2] = tempRet0;
      i42 = ___muldi3(i38 | 0, i39 | 0, i40 | 0, ((i40 | 0) < 0) << 31 >> 31 | 0) | 0;
      i43 = tempRet0;
      i40 = _bitshift64Ashr(i42 | 0, i43 | 0, 63) | 0;
      i41 = tempRet0;
      i60 = i10;
      i61 = HEAP32[i60 >> 2] | 0;
      i60 = HEAP32[i60 + 4 >> 2] | 0;
      i43 = _i64Add(i61 | 0, i60 | 0, i42 | 0, i43 | 0) | 0;
      i42 = tempRet0;
      i45 = i17;
      i44 = HEAP32[i45 >> 2] | 0;
      i45 = HEAP32[i45 + 4 >> 2] | 0;
      if (i42 >>> 0 < i60 >>> 0 | (i42 | 0) == (i60 | 0) & i43 >>> 0 < i61 >>> 0) {
       i44 = _i64Add(i44 | 0, i45 | 0, 1, 0) | 0;
       i45 = tempRet0;
       i61 = i17;
       HEAP32[i61 >> 2] = i44;
       HEAP32[i61 + 4 >> 2] = i45;
      }
      i60 = i10;
      HEAP32[i60 >> 2] = i43;
      HEAP32[i60 + 4 >> 2] = i42;
      i42 = _i64Add(i44 | 0, i45 | 0, i40 | 0, i41 | 0) | 0;
      i40 = i17;
      HEAP32[i40 >> 2] = i42;
      HEAP32[i40 + 4 >> 2] = tempRet0;
      i40 = _bitshift64Ashr(i38 | 0, i39 | 0, 63) | 0;
      i42 = tempRet0;
      i60 = i9;
      i61 = HEAP32[i60 >> 2] | 0;
      i60 = HEAP32[i60 + 4 >> 2] | 0;
      i39 = _i64Add(i61 | 0, i60 | 0, i38 | 0, i39 | 0) | 0;
      i41 = tempRet0;
      i38 = i22;
      i43 = HEAP32[i38 >> 2] | 0;
      i38 = HEAP32[i38 + 4 >> 2] | 0;
      if (i41 >>> 0 < i60 >>> 0 | (i41 | 0) == (i60 | 0) & i39 >>> 0 < i61 >>> 0) {
       i43 = _i64Add(i43 | 0, i38 | 0, 1, 0) | 0;
       i38 = tempRet0;
       i61 = i22;
       HEAP32[i61 >> 2] = i43;
       HEAP32[i61 + 4 >> 2] = i38;
      }
      i61 = i9;
      HEAP32[i61 >> 2] = i39;
      HEAP32[i61 + 4 >> 2] = i41;
      i38 = _i64Add(i43 | 0, i38 | 0, i40 | 0, i42 | 0) | 0;
      i40 = tempRet0;
      i61 = i22;
      HEAP32[i61 >> 2] = i38;
      HEAP32[i61 + 4 >> 2] = i40;
     }
     HEAP32[i37 + 20 >> 2] = i14;
     HEAP32[i37 + 16 >> 2] = i33;
     i42 = HEAP32[(HEAP32[i37 + 8 >> 2] | 0) + 4 >> 2] | 0;
     if ((i42 | 0) == (i29 | 0)) {
      break;
     } else {
      i61 = i36;
      i36 = HEAP32[i37 + 12 >> 2] | 0;
      i37 = i42;
      i42 = i61;
     }
    }
    i36 = i41;
    i37 = i40;
    i28 = i28 + 1 | 0;
   }
   i29 = HEAP32[i29 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i26 >> 2] | 0)) {
    continue L7;
   }
  }
 }
 L79 : do {
  if ((i37 | 0) >= 0 ? !((i38 | i39 | 0) == 0 & (i37 | i36 | 0) == 0) : 0) {
   d48 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i15);
   i12 = i3 + 108 | 0;
   HEAPF32[i8 + (HEAP32[i12 >> 2] << 2) >> 2] = d48;
   d48 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i11);
   i11 = i3 + 112 | 0;
   HEAPF32[i8 + (HEAP32[i11 >> 2] << 2) >> 2] = d48;
   d48 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i10);
   i10 = i3 + 104 | 0;
   HEAPF32[i8 + (HEAP32[i10 >> 2] << 2) >> 2] = d48;
   d48 = 1.0 / (+__ZNK20btConvexHullInternal6Int1288toScalarEv(i9) * 4.0);
   i13 = i8 + 4 | 0;
   d51 = d48 * +HEAPF32[i13 >> 2];
   i61 = i8 + 8 | 0;
   d52 = d48 * +HEAPF32[i61 >> 2];
   d48 = +HEAPF32[i3 >> 2] * d48 * +HEAPF32[i8 >> 2];
   HEAPF32[i8 >> 2] = d48;
   i9 = i3 + 4 | 0;
   d51 = +HEAPF32[i9 >> 2] * d51;
   HEAPF32[i13 >> 2] = d51;
   i13 = i3 + 8 | 0;
   d52 = +HEAPF32[i13 >> 2] * d52;
   HEAPF32[i61 >> 2] = d52;
   if (d5 > 0.0) {
    if ((i28 | 0) > 0) {
     i16 = i7 + 4 | 0;
     i15 = i7 + 8 | 0;
     i17 = i6 + 4 | 0;
     i14 = i6 + 8 | 0;
     i8 = 0;
     d50 = 3.4028234663852886e+38;
     do {
      i61 = i34 + (i8 << 2) | 0;
      __ZN20btConvexHullInternal11getBtNormalEPNS_4FaceE(i6, i3, HEAP32[i61 >> 2] | 0);
      i61 = HEAP32[i61 >> 2] | 0;
      HEAPF32[i7 + (HEAP32[i12 >> 2] << 2) >> 2] = +(HEAP32[i61 + 12 >> 2] | 0);
      HEAPF32[i7 + (HEAP32[i11 >> 2] << 2) >> 2] = +(HEAP32[i61 + 16 >> 2] | 0);
      HEAPF32[i7 + (HEAP32[i10 >> 2] << 2) >> 2] = +(HEAP32[i61 + 20 >> 2] | 0);
      d49 = (+HEAPF32[i7 >> 2] * +HEAPF32[i3 >> 2] - d48) * +HEAPF32[i6 >> 2] + (+HEAPF32[i16 >> 2] * +HEAPF32[i9 >> 2] - d51) * +HEAPF32[i17 >> 2] + (+HEAPF32[i15 >> 2] * +HEAPF32[i13 >> 2] - d52) * +HEAPF32[i14 >> 2];
      d50 = d49 < d50 ? d49 : d50;
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) != (i28 | 0));
     if (d50 <= 0.0) {
      d4 = 0.0;
      break;
     }
    } else {
     d50 = 3.4028234663852886e+38;
    }
    d5 = d50 * d5;
    d4 = d5 > d4 ? d4 : d5;
   }
   i7 = (i28 | 0) > 0;
   if (i7) {
    i8 = 0;
    i6 = 243703;
    do {
     i59 = i34 + (i8 << 2) | 0;
     i61 = i34 + (((i6 >>> 0) % (i28 >>> 0) | 0) << 2) | 0;
     i60 = HEAP32[i59 >> 2] | 0;
     HEAP32[i59 >> 2] = HEAP32[i61 >> 2];
     HEAP32[i61 >> 2] = i60;
     i8 = i8 + 1 | 0;
     i6 = (Math_imul(i6, 1664525) | 0) + 1013904223 | 0;
    } while ((i8 | 0) != (i28 | 0));
    if (i7) {
     i10 = i2 + 16 | 0;
     i8 = i2 + 12 | 0;
     i7 = i2 + 4 | 0;
     i9 = i2 + 8 | 0;
     i12 = 0;
     while (1) {
      i6 = HEAP32[i34 + (i12 << 2) >> 2] | 0;
      HEAP8[i10] = 1;
      HEAP32[i8 >> 2] = 0;
      HEAP32[i7 >> 2] = 0;
      HEAP32[i9 >> 2] = 0;
      HEAP32[i7 >> 2] = i30;
      i6 = __ZN20btConvexHullInternal9shiftFaceEPNS_4FaceEf20btAlignedObjectArrayIPNS_6VertexEE(i3, i6, d4, i2) | 0;
      i11 = HEAP32[i8 >> 2] | 0;
      if ((i11 | 0) != 0) {
       if ((HEAP8[i10] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i11);
       }
       HEAP32[i8 >> 2] = 0;
      }
      HEAP8[i10] = 1;
      HEAP32[i8 >> 2] = 0;
      HEAP32[i7 >> 2] = 0;
      HEAP32[i9 >> 2] = 0;
      i12 = i12 + 1 | 0;
      if (!i6) {
       break;
      }
      if ((i12 | 0) >= (i28 | 0)) {
       break L79;
      }
     }
     d4 = -d4;
    }
   }
  } else {
   d4 = 0.0;
  }
 } while (0);
 if ((i34 | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i34);
 }
 if ((i31 | 0) == 0) {
  d52 = d4;
  STACKTOP = i1;
  return +d52;
 }
 __Z21btAlignedFreeInternalPv(i31);
 d52 = d4;
 STACKTOP = i1;
 return +d52;
}
function __ZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEf(i6, i5, i4, i2, i11, i3, i7, d9) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 d9 = +d9;
 var i1 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, i57 = 0, i58 = 0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 i8 = i1 + 840 | 0;
 i12 = i1 + 480 | 0;
 i27 = i1 + 472 | 0;
 i28 = i1 + 448 | 0;
 i25 = i1 + 400 | 0;
 i32 = i1 + 384 | 0;
 i30 = i1 + 368 | 0;
 i29 = i1 + 352 | 0;
 i33 = i1 + 336 | 0;
 i26 = i1 + 160 | 0;
 i24 = i1 + 136 | 0;
 i17 = i1 + 88 | 0;
 i16 = i1 + 72 | 0;
 i13 = i1 + 56 | 0;
 i15 = i1 + 40 | 0;
 i14 = i1 + 24 | 0;
 i10 = i1;
 i31 = HEAP32[i11 + 4 >> 2] | 0;
 if ((i31 | 0) < 20) {
  HEAP32[i8 >> 2] = 450968;
  i10 = i8 + 164 | 0;
  HEAP32[i8 + 168 >> 2] = 0;
  HEAPF32[i8 + 172 >> 2] = d9;
  i13 = i7 + 4 | 0;
  HEAPF32[i10 >> 2] = +HEAPF32[i13 >> 2];
  HEAPF32[i12 + 308 >> 2] = 9999999747378752.0e-20;
  HEAP8[i12 + 332 | 0] = 0;
  HEAP32[i27 >> 2] = 453240;
  __ZN27btContinuousConvexCollisionC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i28, i6, i11, i12, i27);
  if ((FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] & 3](i28, i5, i4, i3, i3, i8) | 0 ? (i22 = i8 + 132 | 0, d54 = +HEAPF32[i22 >> 2], i21 = i8 + 136 | 0, d47 = +HEAPF32[i21 >> 2], i20 = i8 + 140 | 0, d52 = +HEAPF32[i20 >> 2], d55 = d54 * d54 + d47 * d47 + d52 * d52, d55 > 9999999747378752.0e-20) : 0) ? (d56 = +HEAPF32[i10 >> 2], d56 < +HEAPF32[i13 >> 2]) : 0) {
   d55 = 1.0 / +Math_sqrt(+d55);
   HEAPF32[i22 >> 2] = d54 * d55;
   HEAPF32[i21 >> 2] = d47 * d55;
   HEAPF32[i20 >> 2] = d52 * d55;
   i45 = i8 + 148 | 0;
   HEAP32[i25 >> 2] = i2;
   HEAP32[i25 + 4 >> 2] = 0;
   i46 = i25 + 8 | 0;
   HEAP32[i46 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
   HEAP32[i46 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
   HEAP32[i46 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAP32[i46 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
   i46 = i25 + 24 | 0;
   HEAP32[i46 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
   HEAP32[i46 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
   HEAP32[i46 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
   HEAP32[i46 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
   HEAPF32[i25 + 40 >> 2] = d56;
   +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 7](i7, i25, 1);
  }
  STACKTOP = i1;
  return;
 }
 if (!((i31 + -21 | 0) >>> 0 < 9)) {
  if ((i31 | 0) != 31) {
   STACKTOP = i1;
   return;
  }
  __ZN15CProfileManager13Start_ProfileEPKc(449104);
  i12 = i11 + 16 | 0;
  if ((HEAP32[i12 >> 2] | 0) > 0) {
   i41 = i11 + 24 | 0;
   i42 = i3 + 4 | 0;
   i43 = i3 + 8 | 0;
   i13 = i3 + 16 | 0;
   i45 = i3 + 20 | 0;
   i46 = i3 + 24 | 0;
   i39 = i3 + 32 | 0;
   i38 = i3 + 36 | 0;
   i37 = i3 + 40 | 0;
   i36 = i3 + 48 | 0;
   i35 = i3 + 52 | 0;
   i34 = i3 + 56 | 0;
   i33 = i8 + 4 | 0;
   i32 = i8 + 8 | 0;
   i31 = i8 + 12 | 0;
   i30 = i8 + 16 | 0;
   i23 = i8 + 20 | 0;
   i22 = i8 + 24 | 0;
   i21 = i8 + 28 | 0;
   i20 = i8 + 32 | 0;
   i19 = i8 + 36 | 0;
   i18 = i8 + 40 | 0;
   i17 = i8 + 44 | 0;
   i16 = i8 + 48 | 0;
   i40 = i8 + 52 | 0;
   i29 = i8 + 56 | 0;
   i28 = i8 + 60 | 0;
   i27 = i2 + 192 | 0;
   i44 = i10 + 4 | 0;
   i26 = i10 + 8 | 0;
   i25 = i10 + 10 | 0;
   i24 = i10 + 12 | 0;
   i15 = i10 + 16 | 0;
   i11 = i7 + 4 | 0;
   i14 = 0;
   do {
    i58 = HEAP32[i41 >> 2] | 0;
    d63 = +HEAPF32[i58 + (i14 * 80 | 0) >> 2];
    d60 = +HEAPF32[i58 + (i14 * 80 | 0) + 4 >> 2];
    d48 = +HEAPF32[i58 + (i14 * 80 | 0) + 8 >> 2];
    d62 = +HEAPF32[i58 + (i14 * 80 | 0) + 16 >> 2];
    d59 = +HEAPF32[i58 + (i14 * 80 | 0) + 20 >> 2];
    d50 = +HEAPF32[i58 + (i14 * 80 | 0) + 24 >> 2];
    d61 = +HEAPF32[i58 + (i14 * 80 | 0) + 32 >> 2];
    d47 = +HEAPF32[i58 + (i14 * 80 | 0) + 36 >> 2];
    d52 = +HEAPF32[i58 + (i14 * 80 | 0) + 40 >> 2];
    d71 = +HEAPF32[i58 + (i14 * 80 | 0) + 48 >> 2];
    d70 = +HEAPF32[i58 + (i14 * 80 | 0) + 52 >> 2];
    d56 = +HEAPF32[i58 + (i14 * 80 | 0) + 56 >> 2];
    i58 = HEAP32[i58 + (i14 * 80 | 0) + 64 >> 2] | 0;
    d69 = +HEAPF32[i3 >> 2];
    d68 = +HEAPF32[i42 >> 2];
    d67 = +HEAPF32[i43 >> 2];
    d66 = +HEAPF32[i13 >> 2];
    d65 = +HEAPF32[i45 >> 2];
    d64 = +HEAPF32[i46 >> 2];
    d49 = +HEAPF32[i39 >> 2];
    d51 = +HEAPF32[i38 >> 2];
    d53 = +HEAPF32[i37 >> 2];
    d54 = d71 * d69 + d70 * d68 + d56 * d67 + +HEAPF32[i36 >> 2];
    d55 = d71 * d66 + d70 * d65 + d56 * d64 + +HEAPF32[i35 >> 2];
    d56 = d71 * d49 + d70 * d51 + d56 * d53 + +HEAPF32[i34 >> 2];
    HEAPF32[i8 >> 2] = d63 * d69 + d62 * d68 + d61 * d67;
    HEAPF32[i33 >> 2] = d60 * d69 + d59 * d68 + d47 * d67;
    HEAPF32[i32 >> 2] = d48 * d69 + d50 * d68 + d52 * d67;
    HEAPF32[i31 >> 2] = 0.0;
    HEAPF32[i30 >> 2] = d63 * d66 + d62 * d65 + d61 * d64;
    HEAPF32[i23 >> 2] = d60 * d66 + d59 * d65 + d47 * d64;
    HEAPF32[i22 >> 2] = d48 * d66 + d50 * d65 + d52 * d64;
    HEAPF32[i21 >> 2] = 0.0;
    HEAPF32[i20 >> 2] = d63 * d49 + d62 * d51 + d61 * d53;
    HEAPF32[i19 >> 2] = d60 * d49 + d59 * d51 + d47 * d53;
    HEAPF32[i18 >> 2] = d48 * d49 + d50 * d51 + d52 * d53;
    HEAPF32[i17 >> 2] = 0.0;
    HEAPF32[i16 >> 2] = d54;
    HEAPF32[i40 >> 2] = d55;
    HEAPF32[i29 >> 2] = d56;
    HEAPF32[i28 >> 2] = 0.0;
    i57 = HEAP32[i27 >> 2] | 0;
    HEAP32[i27 >> 2] = i58;
    HEAP16[i26 >> 1] = 1;
    HEAP16[i25 >> 1] = -1;
    HEAP32[i10 >> 2] = 449504;
    HEAP32[i24 >> 2] = i7;
    HEAP32[i15 >> 2] = i14;
    HEAPF32[i44 >> 2] = +HEAPF32[i11 >> 2];
    __ZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEf(i6, i5, i4, i2, i58, i8, i10, d9);
    HEAP32[i27 >> 2] = i57;
    i14 = i14 + 1 | 0;
   } while ((i14 | 0) < (HEAP32[i12 >> 2] | 0));
  }
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 if ((i31 | 0) == 28) {
  HEAP32[i26 >> 2] = 450968;
  i8 = i26 + 164 | 0;
  HEAP32[i26 + 168 >> 2] = 0;
  HEAPF32[i26 + 172 >> 2] = d9;
  i10 = i7 + 4 | 0;
  HEAPF32[i8 >> 2] = +HEAPF32[i10 >> 2];
  __ZN27btContinuousConvexCollisionC2EPK13btConvexShapePK18btStaticPlaneShape(i24, i6, i11);
  if ((FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i24 >> 2] | 0) + 8 >> 2] & 3](i24, i5, i4, i3, i3, i26) | 0 ? (i19 = i26 + 132 | 0, d49 = +HEAPF32[i19 >> 2], i18 = i26 + 136 | 0, d48 = +HEAPF32[i18 >> 2], i23 = i26 + 140 | 0, d53 = +HEAPF32[i23 >> 2], d50 = d49 * d49 + d48 * d48 + d53 * d53, d50 > 9999999747378752.0e-20) : 0) ? (d51 = +HEAPF32[i8 >> 2], d51 < +HEAPF32[i10 >> 2]) : 0) {
   d71 = 1.0 / +Math_sqrt(+d50);
   HEAPF32[i19 >> 2] = d49 * d71;
   HEAPF32[i18 >> 2] = d48 * d71;
   HEAPF32[i23 >> 2] = d53 * d71;
   i57 = i26 + 148 | 0;
   HEAP32[i17 >> 2] = i2;
   HEAP32[i17 + 4 >> 2] = 0;
   i58 = i17 + 8 | 0;
   HEAP32[i58 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
   HEAP32[i58 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
   HEAP32[i58 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
   HEAP32[i58 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
   i58 = i17 + 24 | 0;
   HEAP32[i58 + 0 >> 2] = HEAP32[i57 + 0 >> 2];
   HEAP32[i58 + 4 >> 2] = HEAP32[i57 + 4 >> 2];
   HEAP32[i58 + 8 >> 2] = HEAP32[i57 + 8 >> 2];
   HEAP32[i58 + 12 >> 2] = HEAP32[i57 + 12 >> 2];
   HEAPF32[i17 + 40 >> 2] = d51;
   +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 7](i7, i17, 1);
  }
  STACKTOP = i1;
  return;
 } else if ((i31 | 0) == 21) {
  d52 = +HEAPF32[i3 >> 2];
  d53 = +HEAPF32[i3 + 16 >> 2];
  d54 = +HEAPF32[i3 + 32 >> 2];
  d55 = +HEAPF32[i3 + 4 >> 2];
  d56 = +HEAPF32[i3 + 20 >> 2];
  d59 = +HEAPF32[i3 + 36 >> 2];
  d66 = +HEAPF32[i3 + 8 >> 2];
  d68 = +HEAPF32[i3 + 24 >> 2];
  d70 = +HEAPF32[i3 + 40 >> 2];
  d61 = -+HEAPF32[i3 + 48 >> 2];
  d60 = -+HEAPF32[i3 + 52 >> 2];
  d63 = -+HEAPF32[i3 + 56 >> 2];
  d65 = d52 * d61 + d53 * d60 + d54 * d63;
  d64 = d55 * d61 + d56 * d60 + d59 * d63;
  d63 = d66 * d61 + d68 * d60 + d70 * d63;
  d60 = +HEAPF32[i5 + 48 >> 2];
  d61 = +HEAPF32[i5 + 52 >> 2];
  d62 = +HEAPF32[i5 + 56 >> 2];
  HEAPF32[i32 >> 2] = d65 + (d52 * d60 + d53 * d61 + d54 * d62);
  HEAPF32[i32 + 4 >> 2] = d64 + (d55 * d60 + d56 * d61 + d59 * d62);
  HEAPF32[i32 + 8 >> 2] = d63 + (d66 * d60 + d68 * d61 + d70 * d62);
  HEAPF32[i32 + 12 >> 2] = 0.0;
  d62 = +HEAPF32[i4 + 48 >> 2];
  d61 = +HEAPF32[i4 + 52 >> 2];
  d60 = +HEAPF32[i4 + 56 >> 2];
  HEAPF32[i30 >> 2] = d65 + (d52 * d62 + d53 * d61 + d54 * d60);
  HEAPF32[i30 + 4 >> 2] = d64 + (d55 * d62 + d56 * d61 + d59 * d60);
  HEAPF32[i30 + 8 >> 2] = d63 + (d66 * d62 + d68 * d61 + d70 * d60);
  HEAPF32[i30 + 12 >> 2] = 0.0;
  d60 = +HEAPF32[i4 >> 2];
  d61 = +HEAPF32[i4 + 16 >> 2];
  d62 = +HEAPF32[i4 + 32 >> 2];
  d63 = +HEAPF32[i4 + 4 >> 2];
  d64 = +HEAPF32[i4 + 20 >> 2];
  d65 = +HEAPF32[i4 + 36 >> 2];
  d67 = +HEAPF32[i4 + 8 >> 2];
  d69 = +HEAPF32[i4 + 24 >> 2];
  d71 = +HEAPF32[i4 + 40 >> 2];
  HEAPF32[i8 >> 2] = d52 * d60 + d53 * d61 + d54 * d62;
  HEAPF32[i8 + 4 >> 2] = d52 * d63 + d53 * d64 + d54 * d65;
  HEAPF32[i8 + 8 >> 2] = d52 * d67 + d53 * d69 + d54 * d71;
  HEAPF32[i8 + 12 >> 2] = 0.0;
  HEAPF32[i8 + 16 >> 2] = d55 * d60 + d56 * d61 + d59 * d62;
  HEAPF32[i8 + 20 >> 2] = d55 * d63 + d56 * d64 + d59 * d65;
  HEAPF32[i8 + 24 >> 2] = d55 * d67 + d56 * d69 + d59 * d71;
  HEAPF32[i8 + 28 >> 2] = 0.0;
  HEAPF32[i8 + 32 >> 2] = d66 * d60 + d68 * d61 + d70 * d62;
  HEAPF32[i8 + 36 >> 2] = d66 * d63 + d68 * d64 + d70 * d65;
  HEAPF32[i8 + 40 >> 2] = d66 * d67 + d68 * d69 + d70 * d71;
  i58 = i8 + 44 | 0;
  HEAP32[i58 + 0 >> 2] = 0;
  HEAP32[i58 + 4 >> 2] = 0;
  HEAP32[i58 + 8 >> 2] = 0;
  HEAP32[i58 + 12 >> 2] = 0;
  HEAP32[i58 + 16 >> 2] = 0;
  __ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f(i12, i6, i5, i4, i3, +FUNCTION_TABLE_di[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 7](i11));
  HEAP32[i12 >> 2] = 449936;
  HEAP32[i12 + 212 >> 2] = i7;
  HEAP32[i12 + 216 >> 2] = i2;
  HEAP32[i12 + 220 >> 2] = i11;
  HEAPF32[i12 + 200 >> 2] = +HEAPF32[i7 + 4 >> 2];
  HEAPF32[i12 + 208 >> 2] = d9;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 63](i6, i8, i29, i33);
  __ZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_(i11, i12, i32, i30, i29, i33);
  STACKTOP = i1;
  return;
 } else {
  d72 = +HEAPF32[i3 >> 2];
  d53 = +HEAPF32[i3 + 16 >> 2];
  d54 = +HEAPF32[i3 + 32 >> 2];
  d55 = +HEAPF32[i3 + 4 >> 2];
  d56 = +HEAPF32[i3 + 20 >> 2];
  d59 = +HEAPF32[i3 + 36 >> 2];
  d66 = +HEAPF32[i3 + 8 >> 2];
  d68 = +HEAPF32[i3 + 24 >> 2];
  d70 = +HEAPF32[i3 + 40 >> 2];
  d61 = -+HEAPF32[i3 + 48 >> 2];
  d60 = -+HEAPF32[i3 + 52 >> 2];
  d62 = -+HEAPF32[i3 + 56 >> 2];
  d51 = d72 * d61 + d53 * d60 + d54 * d62;
  d49 = d55 * d61 + d56 * d60 + d59 * d62;
  d62 = d66 * d61 + d68 * d60 + d70 * d62;
  d60 = +HEAPF32[i5 + 48 >> 2];
  d61 = +HEAPF32[i5 + 52 >> 2];
  d48 = +HEAPF32[i5 + 56 >> 2];
  d52 = d51 + (d72 * d60 + d53 * d61 + d54 * d48);
  d50 = d49 + (d55 * d60 + d56 * d61 + d59 * d48);
  d48 = d62 + (d66 * d60 + d68 * d61 + d70 * d48);
  d61 = +HEAPF32[i4 + 48 >> 2];
  d60 = +HEAPF32[i4 + 52 >> 2];
  d47 = +HEAPF32[i4 + 56 >> 2];
  d51 = d51 + (d72 * d61 + d53 * d60 + d54 * d47);
  d49 = d49 + (d55 * d61 + d56 * d60 + d59 * d47);
  d47 = d62 + (d66 * d61 + d68 * d60 + d70 * d47);
  d60 = +HEAPF32[i4 >> 2];
  d61 = +HEAPF32[i4 + 16 >> 2];
  d62 = +HEAPF32[i4 + 32 >> 2];
  d63 = +HEAPF32[i4 + 4 >> 2];
  d64 = +HEAPF32[i4 + 20 >> 2];
  d65 = +HEAPF32[i4 + 36 >> 2];
  d67 = +HEAPF32[i4 + 8 >> 2];
  d69 = +HEAPF32[i4 + 24 >> 2];
  d71 = +HEAPF32[i4 + 40 >> 2];
  HEAPF32[i8 >> 2] = d72 * d60 + d53 * d61 + d54 * d62;
  HEAPF32[i8 + 4 >> 2] = d72 * d63 + d53 * d64 + d54 * d65;
  HEAPF32[i8 + 8 >> 2] = d72 * d67 + d53 * d69 + d54 * d71;
  HEAPF32[i8 + 12 >> 2] = 0.0;
  HEAPF32[i8 + 16 >> 2] = d55 * d60 + d56 * d61 + d59 * d62;
  HEAPF32[i8 + 20 >> 2] = d55 * d63 + d56 * d64 + d59 * d65;
  HEAPF32[i8 + 24 >> 2] = d55 * d67 + d56 * d69 + d59 * d71;
  HEAPF32[i8 + 28 >> 2] = 0.0;
  HEAPF32[i8 + 32 >> 2] = d66 * d60 + d68 * d61 + d70 * d62;
  HEAPF32[i8 + 36 >> 2] = d66 * d63 + d68 * d64 + d70 * d65;
  HEAPF32[i8 + 40 >> 2] = d66 * d67 + d68 * d69 + d70 * d71;
  i58 = i8 + 44 | 0;
  HEAP32[i58 + 0 >> 2] = 0;
  HEAP32[i58 + 4 >> 2] = 0;
  HEAP32[i58 + 8 >> 2] = 0;
  HEAP32[i58 + 12 >> 2] = 0;
  HEAP32[i58 + 16 >> 2] = 0;
  __ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f(i12, i6, i5, i4, i3, +FUNCTION_TABLE_di[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 7](i11));
  HEAP32[i12 >> 2] = 449712;
  HEAP32[i12 + 212 >> 2] = i7;
  HEAP32[i12 + 216 >> 2] = i2;
  HEAP32[i12 + 220 >> 2] = i11;
  HEAPF32[i12 + 200 >> 2] = +HEAPF32[i7 + 4 >> 2];
  HEAPF32[i12 + 208 >> 2] = d9;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 63](i6, i8, i16, i13);
  HEAPF32[i15 >> 2] = d52;
  i4 = i15 + 4 | 0;
  HEAPF32[i4 >> 2] = d50;
  i5 = i15 + 8 | 0;
  HEAPF32[i5 >> 2] = d48;
  HEAPF32[i15 + 12 >> 2] = 0.0;
  if (d51 < d52) {
   HEAPF32[i15 >> 2] = d51;
   d9 = d51;
  } else {
   d9 = d52;
  }
  if (d49 < d50) {
   HEAPF32[i4 >> 2] = d49;
   d53 = d49;
  } else {
   d53 = d50;
  }
  if (d47 < d48) {
   HEAPF32[i5 >> 2] = d47;
   d54 = d47;
  } else {
   d54 = d48;
  }
  HEAPF32[i14 >> 2] = d52;
  i3 = i14 + 4 | 0;
  HEAPF32[i3 >> 2] = d50;
  i2 = i14 + 8 | 0;
  HEAPF32[i2 >> 2] = d48;
  HEAPF32[i14 + 12 >> 2] = 0.0;
  if (d52 < d51) {
   HEAPF32[i14 >> 2] = d51;
  } else {
   d51 = d52;
  }
  if (d50 < d49) {
   HEAPF32[i3 >> 2] = d49;
  } else {
   d49 = d50;
  }
  if (d48 < d47) {
   HEAPF32[i2 >> 2] = d47;
  } else {
   d47 = d48;
  }
  HEAPF32[i15 >> 2] = +HEAPF32[i16 >> 2] + d9;
  HEAPF32[i4 >> 2] = +HEAPF32[i16 + 4 >> 2] + d53;
  HEAPF32[i5 >> 2] = +HEAPF32[i16 + 8 >> 2] + d54;
  HEAPF32[i14 >> 2] = +HEAPF32[i13 >> 2] + d51;
  HEAPF32[i3 >> 2] = +HEAPF32[i13 + 4 >> 2] + d49;
  HEAPF32[i2 >> 2] = +HEAPF32[i13 + 8 >> 2] + d47;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 60 >> 2] & 63](i11, i12, i15, i14);
  STACKTOP = i1;
  return;
 }
}
function __ZN17btHingeConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, i53 = 0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i6 = i2 + 128 | 0;
 i9 = i2 + 80 | 0;
 i4 = i2 + 32 | 0;
 i10 = i2 + 16 | 0;
 i5 = i2;
 if ((HEAP8[i1 + 730 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 + 32 >> 2] = 0.0;
 HEAPF32[i1 + 736 >> 2] = 0.0;
 L4 : do {
  if ((HEAP8[i1 + 728 | 0] | 0) == 0) {
   i7 = i1 + 24 | 0;
   i45 = HEAP32[i7 >> 2] | 0;
   d50 = +HEAPF32[i1 + 592 >> 2];
   d48 = +HEAPF32[i1 + 596 >> 2];
   d15 = +HEAPF32[i1 + 600 >> 2];
   d8 = +HEAPF32[i45 + 56 >> 2] + (d50 * +HEAPF32[i45 + 20 >> 2] + d48 * +HEAPF32[i45 + 24 >> 2] + d15 * +HEAPF32[i45 + 28 >> 2]);
   i14 = i1 + 28 | 0;
   i16 = HEAP32[i14 >> 2] | 0;
   d46 = +HEAPF32[i1 + 656 >> 2];
   d47 = +HEAPF32[i1 + 660 >> 2];
   d13 = +HEAPF32[i1 + 664 >> 2];
   d11 = +HEAPF32[i16 + 56 >> 2] + (d46 * +HEAPF32[i16 + 20 >> 2] + d47 * +HEAPF32[i16 + 24 >> 2] + d13 * +HEAPF32[i16 + 28 >> 2]);
   d12 = +HEAPF32[i16 + 60 >> 2] + (d46 * +HEAPF32[i16 + 36 >> 2] + d47 * +HEAPF32[i16 + 40 >> 2] + d13 * +HEAPF32[i16 + 44 >> 2]);
   d49 = d11 - d8;
   d3 = +HEAPF32[i45 + 52 >> 2] + (+HEAPF32[i45 + 4 >> 2] * d50 + +HEAPF32[i45 + 8 >> 2] * d48 + +HEAPF32[i45 + 12 >> 2] * d15);
   d15 = +HEAPF32[i45 + 60 >> 2] + (d50 * +HEAPF32[i45 + 36 >> 2] + d48 * +HEAPF32[i45 + 40 >> 2] + d15 * +HEAPF32[i45 + 44 >> 2]);
   d13 = +HEAPF32[i16 + 52 >> 2] + (+HEAPF32[i16 + 4 >> 2] * d46 + +HEAPF32[i16 + 8 >> 2] * d47 + +HEAPF32[i16 + 12 >> 2] * d13);
   d47 = d13 - d3;
   d46 = d12 - d15;
   d48 = d47 * d47 + d49 * d49 + d46 * d46;
   if (d48 > 1.1920928955078125e-7) {
    d48 = 1.0 / +Math_sqrt(+d48);
    d47 = d47 * d48;
    d50 = d49 * d48;
    d48 = d46 * d48;
    HEAPF32[i6 >> 2] = d47;
    HEAPF32[i6 + 4 >> 2] = d50;
    HEAPF32[i6 + 8 >> 2] = d48;
    HEAPF32[i6 + 12 >> 2] = 0.0;
    d46 = d50;
   } else {
    HEAPF32[i6 >> 2] = 1.0;
    HEAPF32[i6 + 4 >> 2] = 0.0;
    HEAPF32[i6 + 8 >> 2] = 0.0;
    HEAPF32[i6 + 12 >> 2] = 0.0;
    d48 = 0.0;
    d46 = 0.0;
    d47 = 1.0;
   }
   i17 = i6 + 16 | 0;
   i18 = i6 + 32 | 0;
   if (+Math_abs(+d48) > .7071067690849304) {
    d52 = d48 * d48 + d46 * d46;
    d51 = 1.0 / +Math_sqrt(+d52);
    HEAPF32[i17 >> 2] = 0.0;
    d50 = -(d51 * d48);
    HEAPF32[i6 + 20 >> 2] = d50;
    d49 = d51 * d46;
    HEAPF32[i6 + 24 >> 2] = d49;
    HEAPF32[i18 >> 2] = d52 * d51;
    HEAPF32[i6 + 36 >> 2] = -(d47 * d49);
    HEAPF32[i6 + 40 >> 2] = d47 * d50;
   } else {
    d51 = d47 * d47 + d46 * d46;
    d52 = 1.0 / +Math_sqrt(+d51);
    d50 = -(d46 * d52);
    HEAPF32[i17 >> 2] = d50;
    d49 = d52 * d47;
    HEAPF32[i6 + 20 >> 2] = d49;
    HEAPF32[i6 + 24 >> 2] = 0.0;
    HEAPF32[i18 >> 2] = -(d48 * d49);
    HEAPF32[i6 + 36 >> 2] = d48 * d50;
    HEAPF32[i6 + 40 >> 2] = d51 * d52;
   }
   i32 = i9 + 4 | 0;
   i33 = i9 + 8 | 0;
   i34 = i9 + 12 | 0;
   i21 = i9 + 16 | 0;
   i36 = i9 + 20 | 0;
   i37 = i9 + 24 | 0;
   i38 = i9 + 28 | 0;
   i39 = i9 + 32 | 0;
   i40 = i9 + 36 | 0;
   i41 = i9 + 40 | 0;
   i42 = i9 + 44 | 0;
   i43 = i4 + 4 | 0;
   i44 = i4 + 8 | 0;
   i31 = i4 + 12 | 0;
   i30 = i4 + 16 | 0;
   i29 = i4 + 20 | 0;
   i28 = i4 + 24 | 0;
   i27 = i4 + 28 | 0;
   i26 = i4 + 32 | 0;
   i25 = i4 + 36 | 0;
   i24 = i4 + 40 | 0;
   i23 = i4 + 44 | 0;
   i20 = i10 + 4 | 0;
   i19 = i10 + 8 | 0;
   i18 = i10 + 12 | 0;
   i17 = i5 + 4 | 0;
   i35 = i5 + 8 | 0;
   i22 = i5 + 12 | 0;
   i45 = 0;
   while (1) {
    i53 = HEAP32[i7 >> 2] | 0;
    HEAPF32[i9 >> 2] = +HEAPF32[i53 + 4 >> 2];
    HEAPF32[i32 >> 2] = +HEAPF32[i53 + 20 >> 2];
    HEAPF32[i33 >> 2] = +HEAPF32[i53 + 36 >> 2];
    HEAPF32[i34 >> 2] = 0.0;
    HEAPF32[i21 >> 2] = +HEAPF32[i53 + 8 >> 2];
    HEAPF32[i36 >> 2] = +HEAPF32[i53 + 24 >> 2];
    HEAPF32[i37 >> 2] = +HEAPF32[i53 + 40 >> 2];
    HEAPF32[i38 >> 2] = 0.0;
    HEAPF32[i39 >> 2] = +HEAPF32[i53 + 12 >> 2];
    HEAPF32[i40 >> 2] = +HEAPF32[i53 + 28 >> 2];
    HEAPF32[i41 >> 2] = +HEAPF32[i53 + 44 >> 2];
    HEAPF32[i42 >> 2] = 0.0;
    HEAPF32[i4 >> 2] = +HEAPF32[i16 + 4 >> 2];
    HEAPF32[i43 >> 2] = +HEAPF32[i16 + 20 >> 2];
    HEAPF32[i44 >> 2] = +HEAPF32[i16 + 36 >> 2];
    HEAPF32[i31 >> 2] = 0.0;
    HEAPF32[i30 >> 2] = +HEAPF32[i16 + 8 >> 2];
    HEAPF32[i29 >> 2] = +HEAPF32[i16 + 24 >> 2];
    HEAPF32[i28 >> 2] = +HEAPF32[i16 + 40 >> 2];
    HEAPF32[i27 >> 2] = 0.0;
    HEAPF32[i26 >> 2] = +HEAPF32[i16 + 12 >> 2];
    HEAPF32[i25 >> 2] = +HEAPF32[i16 + 28 >> 2];
    HEAPF32[i24 >> 2] = +HEAPF32[i16 + 44 >> 2];
    HEAPF32[i23 >> 2] = 0.0;
    i53 = HEAP32[i7 >> 2] | 0;
    d52 = d8 - +HEAPF32[i53 + 56 >> 2];
    d51 = d15 - +HEAPF32[i53 + 60 >> 2];
    HEAPF32[i10 >> 2] = d3 - +HEAPF32[i53 + 52 >> 2];
    HEAPF32[i20 >> 2] = d52;
    HEAPF32[i19 >> 2] = d51;
    HEAPF32[i18 >> 2] = 0.0;
    d51 = d11 - +HEAPF32[i16 + 56 >> 2];
    d52 = d12 - +HEAPF32[i16 + 60 >> 2];
    HEAPF32[i5 >> 2] = d13 - +HEAPF32[i16 + 52 >> 2];
    HEAPF32[i17 >> 2] = d51;
    HEAPF32[i35 >> 2] = d52;
    HEAPF32[i22 >> 2] = 0.0;
    i16 = HEAP32[i14 >> 2] | 0;
    __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1 + (i45 * 84 | 0) + 40 | 0, i9, i4, i10, i5, i6 + (i45 << 4) | 0, i53 + 388 | 0, +HEAPF32[i53 + 336 >> 2], i16 + 388 | 0, +HEAPF32[i16 + 336 >> 2]);
    i45 = i45 + 1 | 0;
    if ((i45 | 0) == 3) {
     break L4;
    }
    i16 = HEAP32[i14 >> 2] | 0;
   }
  }
 } while (0);
 i4 = i1 + 552 | 0;
 i5 = i1 + 568 | 0;
 i6 = i1 + 584 | 0;
 d3 = +HEAPF32[i4 >> 2];
 d8 = +HEAPF32[i5 >> 2];
 d15 = +HEAPF32[i6 >> 2];
 if (+Math_abs(+d15) > .7071067690849304) {
  d50 = d8 * d8 + d15 * d15;
  d51 = 1.0 / +Math_sqrt(+d50);
  d52 = -(d15 * d51);
  d15 = d8 * d51;
  d13 = 0.0;
  d12 = d52;
  d11 = d15;
  d8 = d50 * d51;
  d15 = -(d3 * d15);
  d3 = d3 * d52;
 } else {
  d51 = d3 * d3 + d8 * d8;
  d52 = 1.0 / +Math_sqrt(+d51);
  d50 = -(d8 * d52);
  d8 = d3 * d52;
  d13 = d50;
  d12 = d8;
  d11 = 0.0;
  d8 = -(d15 * d8);
  d15 = d15 * d50;
  d3 = d51 * d52;
 }
 i45 = i1 + 24 | 0;
 i42 = HEAP32[i45 >> 2] | 0;
 d68 = +HEAPF32[i42 + 4 >> 2];
 d66 = +HEAPF32[i42 + 8 >> 2];
 d56 = +HEAPF32[i42 + 12 >> 2];
 d46 = d13 * d68 + d12 * d66 + d11 * d56;
 d67 = +HEAPF32[i42 + 20 >> 2];
 d65 = +HEAPF32[i42 + 24 >> 2];
 d59 = +HEAPF32[i42 + 28 >> 2];
 d60 = d13 * d67 + d12 * d65 + d11 * d59;
 d52 = +HEAPF32[i42 + 36 >> 2];
 d63 = +HEAPF32[i42 + 40 >> 2];
 d64 = +HEAPF32[i42 + 44 >> 2];
 d54 = d13 * d52 + d12 * d63 + d11 * d64;
 d55 = d8 * d68 + d15 * d66 + d3 * d56;
 d49 = d8 * d67 + d15 * d65 + d3 * d59;
 d58 = d8 * d52 + d15 * d63 + d3 * d64;
 d13 = +HEAPF32[i4 >> 2];
 d57 = +HEAPF32[i5 >> 2];
 d51 = +HEAPF32[i6 >> 2];
 d12 = d68 * d13 + d66 * d57 + d56 * d51;
 d47 = d67 * d13 + d65 * d57 + d59 * d51;
 d51 = d52 * d13 + d63 * d57 + d64 * d51;
 i43 = i1 + 292 | 0;
 i53 = i1 + 28 | 0;
 i40 = HEAP32[i53 >> 2] | 0;
 d57 = +HEAPF32[i40 + 4 >> 2];
 d13 = +HEAPF32[i40 + 20 >> 2];
 d61 = +HEAPF32[i40 + 36 >> 2];
 d3 = +HEAPF32[i40 + 8 >> 2];
 d48 = +HEAPF32[i40 + 24 >> 2];
 d50 = +HEAPF32[i40 + 40 >> 2];
 d8 = +HEAPF32[i40 + 12 >> 2];
 d62 = +HEAPF32[i40 + 28 >> 2];
 d11 = +HEAPF32[i40 + 44 >> 2];
 HEAP32[i43 + 0 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 HEAP32[i43 + 12 >> 2] = 0;
 d52 = d68 * d46 + d67 * d60 + d52 * d54;
 d63 = d66 * d46 + d65 * d60 + d63 * d54;
 d64 = d56 * d46 + d59 * d60 + d64 * d54;
 i43 = i1 + 308 | 0;
 HEAPF32[i43 >> 2] = d52;
 i44 = i1 + 312 | 0;
 HEAPF32[i44 >> 2] = d63;
 i41 = i1 + 316 | 0;
 HEAPF32[i41 >> 2] = d64;
 HEAPF32[i1 + 320 >> 2] = 0.0;
 d46 = -d46;
 d60 = -d60;
 d15 = -d54;
 d61 = d57 * d46 + d13 * d60 + d61 * d15;
 d50 = d3 * d46 + d48 * d60 + d50 * d15;
 d15 = d8 * d46 + d62 * d60 + d11 * d15;
 HEAPF32[i1 + 324 >> 2] = d61;
 HEAPF32[i1 + 328 >> 2] = d50;
 HEAPF32[i1 + 332 >> 2] = d15;
 HEAPF32[i1 + 336 >> 2] = 0.0;
 d52 = d52 * +HEAPF32[i42 + 388 >> 2];
 d63 = d63 * +HEAPF32[i42 + 392 >> 2];
 d64 = d64 * +HEAPF32[i42 + 396 >> 2];
 HEAPF32[i1 + 340 >> 2] = d52;
 HEAPF32[i1 + 344 >> 2] = d63;
 HEAPF32[i1 + 348 >> 2] = d64;
 HEAPF32[i1 + 352 >> 2] = 0.0;
 d11 = d61 * +HEAPF32[i40 + 388 >> 2];
 d60 = d50 * +HEAPF32[i40 + 392 >> 2];
 d62 = d15 * +HEAPF32[i40 + 396 >> 2];
 HEAPF32[i1 + 356 >> 2] = d11;
 HEAPF32[i1 + 360 >> 2] = d60;
 HEAPF32[i1 + 364 >> 2] = d62;
 HEAPF32[i1 + 368 >> 2] = 0.0;
 HEAPF32[i1 + 372 >> 2] = d61 * d11 + d50 * d60 + d15 * d62 + (d52 * +HEAPF32[i43 >> 2] + d63 * +HEAPF32[i44 >> 2] + d64 * +HEAPF32[i41 >> 2]);
 i41 = i1 + 376 | 0;
 i44 = HEAP32[i45 >> 2] | 0;
 d64 = +HEAPF32[i44 + 4 >> 2];
 d63 = +HEAPF32[i44 + 20 >> 2];
 d52 = +HEAPF32[i44 + 36 >> 2];
 d62 = +HEAPF32[i44 + 8 >> 2];
 d15 = +HEAPF32[i44 + 24 >> 2];
 d60 = +HEAPF32[i44 + 40 >> 2];
 d50 = +HEAPF32[i44 + 12 >> 2];
 d11 = +HEAPF32[i44 + 28 >> 2];
 d61 = +HEAPF32[i44 + 44 >> 2];
 i43 = HEAP32[i53 >> 2] | 0;
 d46 = +HEAPF32[i43 + 4 >> 2];
 d8 = +HEAPF32[i43 + 20 >> 2];
 d48 = +HEAPF32[i43 + 36 >> 2];
 d3 = +HEAPF32[i43 + 8 >> 2];
 d13 = +HEAPF32[i43 + 24 >> 2];
 d57 = +HEAPF32[i43 + 40 >> 2];
 d54 = +HEAPF32[i43 + 12 >> 2];
 d59 = +HEAPF32[i43 + 28 >> 2];
 d56 = +HEAPF32[i43 + 44 >> 2];
 HEAP32[i41 + 0 >> 2] = 0;
 HEAP32[i41 + 4 >> 2] = 0;
 HEAP32[i41 + 8 >> 2] = 0;
 HEAP32[i41 + 12 >> 2] = 0;
 d52 = d55 * d64 + d49 * d63 + d58 * d52;
 d60 = d55 * d62 + d49 * d15 + d58 * d60;
 d61 = d55 * d50 + d49 * d11 + d58 * d61;
 i41 = i1 + 392 | 0;
 HEAPF32[i41 >> 2] = d52;
 i40 = i1 + 396 | 0;
 HEAPF32[i40 >> 2] = d60;
 i42 = i1 + 400 | 0;
 HEAPF32[i42 >> 2] = d61;
 HEAPF32[i1 + 404 >> 2] = 0.0;
 d55 = -d55;
 d49 = -d49;
 d58 = -d58;
 d48 = d46 * d55 + d8 * d49 + d48 * d58;
 d57 = d3 * d55 + d13 * d49 + d57 * d58;
 d58 = d54 * d55 + d59 * d49 + d56 * d58;
 HEAPF32[i1 + 408 >> 2] = d48;
 HEAPF32[i1 + 412 >> 2] = d57;
 HEAPF32[i1 + 416 >> 2] = d58;
 HEAPF32[i1 + 420 >> 2] = 0.0;
 d52 = d52 * +HEAPF32[i44 + 388 >> 2];
 d60 = d60 * +HEAPF32[i44 + 392 >> 2];
 d61 = d61 * +HEAPF32[i44 + 396 >> 2];
 HEAPF32[i1 + 424 >> 2] = d52;
 HEAPF32[i1 + 428 >> 2] = d60;
 HEAPF32[i1 + 432 >> 2] = d61;
 HEAPF32[i1 + 436 >> 2] = 0.0;
 d56 = d48 * +HEAPF32[i43 + 388 >> 2];
 d49 = d57 * +HEAPF32[i43 + 392 >> 2];
 d59 = d58 * +HEAPF32[i43 + 396 >> 2];
 HEAPF32[i1 + 440 >> 2] = d56;
 HEAPF32[i1 + 444 >> 2] = d49;
 HEAPF32[i1 + 448 >> 2] = d59;
 HEAPF32[i1 + 452 >> 2] = 0.0;
 HEAPF32[i1 + 456 >> 2] = d48 * d56 + d57 * d49 + d58 * d59 + (d52 * +HEAPF32[i41 >> 2] + d60 * +HEAPF32[i40 >> 2] + d61 * +HEAPF32[i42 >> 2]);
 i42 = i1 + 460 | 0;
 i40 = HEAP32[i45 >> 2] | 0;
 d61 = +HEAPF32[i40 + 4 >> 2];
 d60 = +HEAPF32[i40 + 20 >> 2];
 d52 = +HEAPF32[i40 + 36 >> 2];
 d59 = +HEAPF32[i40 + 8 >> 2];
 d58 = +HEAPF32[i40 + 24 >> 2];
 d49 = +HEAPF32[i40 + 40 >> 2];
 d57 = +HEAPF32[i40 + 12 >> 2];
 d56 = +HEAPF32[i40 + 28 >> 2];
 d48 = +HEAPF32[i40 + 44 >> 2];
 i41 = HEAP32[i53 >> 2] | 0;
 d55 = +HEAPF32[i41 + 4 >> 2];
 d54 = +HEAPF32[i41 + 20 >> 2];
 d13 = +HEAPF32[i41 + 36 >> 2];
 d3 = +HEAPF32[i41 + 8 >> 2];
 d8 = +HEAPF32[i41 + 24 >> 2];
 d46 = +HEAPF32[i41 + 40 >> 2];
 d11 = +HEAPF32[i41 + 12 >> 2];
 d50 = +HEAPF32[i41 + 28 >> 2];
 d15 = +HEAPF32[i41 + 44 >> 2];
 HEAP32[i42 + 0 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 HEAP32[i42 + 12 >> 2] = 0;
 d52 = d12 * d61 + d47 * d60 + d51 * d52;
 d49 = d12 * d59 + d47 * d58 + d51 * d49;
 d48 = d12 * d57 + d47 * d56 + d51 * d48;
 i42 = i1 + 476 | 0;
 HEAPF32[i42 >> 2] = d52;
 i43 = i1 + 480 | 0;
 HEAPF32[i43 >> 2] = d49;
 i44 = i1 + 484 | 0;
 HEAPF32[i44 >> 2] = d48;
 HEAPF32[i1 + 488 >> 2] = 0.0;
 d12 = -d12;
 d47 = -d47;
 d51 = -d51;
 d13 = d55 * d12 + d54 * d47 + d13 * d51;
 d46 = d3 * d12 + d8 * d47 + d46 * d51;
 d51 = d11 * d12 + d50 * d47 + d15 * d51;
 HEAPF32[i1 + 492 >> 2] = d13;
 HEAPF32[i1 + 496 >> 2] = d46;
 HEAPF32[i1 + 500 >> 2] = d51;
 HEAPF32[i1 + 504 >> 2] = 0.0;
 d52 = d52 * +HEAPF32[i40 + 388 >> 2];
 d49 = d49 * +HEAPF32[i40 + 392 >> 2];
 d48 = d48 * +HEAPF32[i40 + 396 >> 2];
 HEAPF32[i1 + 508 >> 2] = d52;
 HEAPF32[i1 + 512 >> 2] = d49;
 HEAPF32[i1 + 516 >> 2] = d48;
 HEAPF32[i1 + 520 >> 2] = 0.0;
 d15 = d13 * +HEAPF32[i41 + 388 >> 2];
 d47 = d46 * +HEAPF32[i41 + 392 >> 2];
 d50 = d51 * +HEAPF32[i41 + 396 >> 2];
 HEAPF32[i1 + 524 >> 2] = d15;
 HEAPF32[i1 + 528 >> 2] = d47;
 HEAPF32[i1 + 532 >> 2] = d50;
 HEAPF32[i1 + 536 >> 2] = 0.0;
 HEAPF32[i1 + 540 >> 2] = d13 * d15 + d46 * d47 + d51 * d50 + (d52 * +HEAPF32[i42 >> 2] + d49 * +HEAPF32[i43 >> 2] + d48 * +HEAPF32[i44 >> 2]);
 HEAPF32[i1 + 716 >> 2] = 0.0;
 d48 = +__ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_(i1, (HEAP32[i45 >> 2] | 0) + 4 | 0, (HEAP32[i53 >> 2] | 0) + 4 | 0);
 HEAPF32[i1 + 720 >> 2] = d48;
 __ZN14btAngularLimit4testEf(i1 + 680 | 0, d48);
 i45 = HEAP32[i45 >> 2] | 0;
 d48 = +HEAPF32[i4 >> 2];
 d49 = +HEAPF32[i5 >> 2];
 d52 = +HEAPF32[i6 >> 2];
 d50 = d48 * +HEAPF32[i45 + 4 >> 2] + d49 * +HEAPF32[i45 + 8 >> 2] + d52 * +HEAPF32[i45 + 12 >> 2];
 d51 = d48 * +HEAPF32[i45 + 20 >> 2] + d49 * +HEAPF32[i45 + 24 >> 2] + d52 * +HEAPF32[i45 + 28 >> 2];
 d52 = d48 * +HEAPF32[i45 + 36 >> 2] + d49 * +HEAPF32[i45 + 40 >> 2] + d52 * +HEAPF32[i45 + 44 >> 2];
 i53 = HEAP32[i53 >> 2] | 0;
 HEAPF32[i1 + 712 >> 2] = 1.0 / (d50 * (d50 * +HEAPF32[i45 + 256 >> 2] + d51 * +HEAPF32[i45 + 272 >> 2] + d52 * +HEAPF32[i45 + 288 >> 2]) + d51 * (d50 * +HEAPF32[i45 + 260 >> 2] + d51 * +HEAPF32[i45 + 276 >> 2] + d52 * +HEAPF32[i45 + 292 >> 2]) + d52 * (d50 * +HEAPF32[i45 + 264 >> 2] + d51 * +HEAPF32[i45 + 280 >> 2] + d52 * +HEAPF32[i45 + 296 >> 2]) + (d50 * (d50 * +HEAPF32[i53 + 256 >> 2] + d51 * +HEAPF32[i53 + 272 >> 2] + d52 * +HEAPF32[i53 + 288 >> 2]) + d51 * (d50 * +HEAPF32[i53 + 260 >> 2] + d51 * +HEAPF32[i53 + 276 >> 2] + d52 * +HEAPF32[i53 + 292 >> 2]) + d52 * (d50 * +HEAPF32[i53 + 264 >> 2] + d51 * +HEAPF32[i53 + 280 >> 2] + d52 * +HEAPF32[i53 + 296 >> 2])));
 STACKTOP = i2;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAlloc(i7, i9, i4, i6, i8, i11, i1, i3, i2, i10, i5) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, d26 = 0.0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, d33 = 0.0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 4272 | 0;
 i20 = i7 + 3272 | 0;
 i17 = i7 + 2280 | 0;
 i36 = i7 + 1288 | 0;
 i35 = i7 + 296 | 0;
 i34 = i7 + 280 | 0;
 i37 = i7 + 264 | 0;
 i13 = i7 + 184 | 0;
 i12 = i7 + 48 | 0;
 i5 = i7;
 if (((HEAP32[i4 + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2) {
  i39 = ((HEAP32[i6 + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2;
 } else {
  i39 = 0;
 }
 i19 = i8 + 16 | 0;
 i29 = i8 + 32 | 0;
 i23 = i8 + 4 | 0;
 i18 = i8 + 20 | 0;
 i28 = i8 + 36 | 0;
 i22 = i8 + 8 | 0;
 i16 = i8 + 24 | 0;
 i27 = i8 + 40 | 0;
 i21 = i11 + 16 | 0;
 i31 = i11 + 32 | 0;
 i24 = i11 + 4 | 0;
 i15 = i11 + 20 | 0;
 i32 = i11 + 36 | 0;
 i25 = i11 + 8 | 0;
 i14 = i11 + 24 | 0;
 i30 = i11 + 40 | 0;
 i38 = 0;
 do {
  __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() | 0;
  d45 = +HEAPF32[453568 + (i38 << 4) >> 2];
  d46 = +HEAPF32[453572 + (i38 << 4) >> 2];
  d47 = +HEAPF32[453576 + (i38 << 4) >> 2];
  d42 = -d45;
  d43 = -d46;
  d44 = -d47;
  d49 = +HEAPF32[i23 >> 2] * d42 + +HEAPF32[i18 >> 2] * d43 + +HEAPF32[i28 >> 2] * d44;
  d48 = +HEAPF32[i22 >> 2] * d42 + +HEAPF32[i16 >> 2] * d43 + +HEAPF32[i27 >> 2] * d44;
  HEAPF32[i36 + (i38 << 4) >> 2] = +HEAPF32[i8 >> 2] * d42 + +HEAPF32[i19 >> 2] * d43 + +HEAPF32[i29 >> 2] * d44;
  HEAPF32[i36 + (i38 << 4) + 4 >> 2] = d49;
  HEAPF32[i36 + (i38 << 4) + 8 >> 2] = d48;
  HEAPF32[i36 + (i38 << 4) + 12 >> 2] = 0.0;
  d48 = d45 * +HEAPF32[i24 >> 2] + d46 * +HEAPF32[i15 >> 2] + d47 * +HEAPF32[i32 >> 2];
  d49 = d45 * +HEAPF32[i25 >> 2] + d46 * +HEAPF32[i14 >> 2] + d47 * +HEAPF32[i30 >> 2];
  HEAPF32[i35 + (i38 << 4) >> 2] = d45 * +HEAPF32[i11 >> 2] + d46 * +HEAPF32[i21 >> 2] + d47 * +HEAPF32[i31 >> 2];
  HEAPF32[i35 + (i38 << 4) + 4 >> 2] = d48;
  HEAPF32[i35 + (i38 << 4) + 8 >> 2] = d49;
  HEAPF32[i35 + (i38 << 4) + 12 >> 2] = 0.0;
  i38 = i38 + 1 | 0;
 } while ((i38 | 0) != 42);
 i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] & 127](i4) | 0;
 if ((i38 | 0) > 0) {
  i40 = i34 + 4 | 0;
  i41 = i34 + 8 | 0;
  i50 = i34 + 12 | 0;
  i52 = 0;
  i51 = 42;
  while (1) {
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] & 63](i4, i52, i34);
   d47 = +HEAPF32[i34 >> 2];
   d43 = +HEAPF32[i40 >> 2];
   d46 = +HEAPF32[i41 >> 2];
   d42 = d47 * +HEAPF32[i19 >> 2] + d43 * +HEAPF32[i18 >> 2] + d46 * +HEAPF32[i16 >> 2];
   d45 = d47 * +HEAPF32[i29 >> 2] + d43 * +HEAPF32[i28 >> 2] + d46 * +HEAPF32[i27 >> 2];
   HEAPF32[i34 >> 2] = +HEAPF32[i8 >> 2] * d47 + +HEAPF32[i23 >> 2] * d43 + +HEAPF32[i22 >> 2] * d46;
   HEAPF32[i40 >> 2] = d42;
   HEAPF32[i41 >> 2] = d45;
   HEAPF32[i50 >> 2] = 0.0;
   __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() | 0;
   i53 = 453568 + (i51 << 4) | 0;
   HEAP32[i53 + 0 >> 2] = HEAP32[i34 + 0 >> 2];
   HEAP32[i53 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
   HEAP32[i53 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
   HEAP32[i53 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
   d45 = +HEAPF32[i34 >> 2];
   d42 = -d45;
   d46 = +HEAPF32[i40 >> 2];
   d43 = -d46;
   d47 = +HEAPF32[i41 >> 2];
   d44 = -d47;
   d49 = +HEAPF32[i23 >> 2] * d42 + +HEAPF32[i18 >> 2] * d43 + +HEAPF32[i28 >> 2] * d44;
   d48 = +HEAPF32[i22 >> 2] * d42 + +HEAPF32[i16 >> 2] * d43 + +HEAPF32[i27 >> 2] * d44;
   HEAPF32[i36 + (i51 << 4) >> 2] = +HEAPF32[i8 >> 2] * d42 + +HEAPF32[i19 >> 2] * d43 + +HEAPF32[i29 >> 2] * d44;
   HEAPF32[i36 + (i51 << 4) + 4 >> 2] = d49;
   HEAPF32[i36 + (i51 << 4) + 8 >> 2] = d48;
   HEAPF32[i36 + (i51 << 4) + 12 >> 2] = 0.0;
   d48 = d45 * +HEAPF32[i24 >> 2] + d46 * +HEAPF32[i15 >> 2] + d47 * +HEAPF32[i32 >> 2];
   d49 = d45 * +HEAPF32[i25 >> 2] + d46 * +HEAPF32[i14 >> 2] + d47 * +HEAPF32[i30 >> 2];
   HEAPF32[i35 + (i51 << 4) >> 2] = +HEAPF32[i11 >> 2] * d45 + +HEAPF32[i21 >> 2] * d46 + +HEAPF32[i31 >> 2] * d47;
   HEAPF32[i35 + (i51 << 4) + 4 >> 2] = d48;
   HEAPF32[i35 + (i51 << 4) + 8 >> 2] = d49;
   HEAPF32[i35 + (i51 << 4) + 12 >> 2] = 0.0;
   i52 = i52 + 1 | 0;
   if ((i52 | 0) == (i38 | 0)) {
    break;
   } else {
    i51 = i51 + 1 | 0;
   }
  }
  i34 = i38 + 42 | 0;
 } else {
  i34 = 42;
 }
 i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 76 >> 2] & 127](i6) | 0;
 if ((i38 | 0) > 0) {
  i40 = i37 + 4 | 0;
  i41 = i37 + 8 | 0;
  i50 = i37 + 12 | 0;
  i52 = 0;
  i51 = i34;
  while (1) {
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 80 >> 2] & 63](i6, i52, i37);
   d47 = +HEAPF32[i37 >> 2];
   d43 = +HEAPF32[i40 >> 2];
   d46 = +HEAPF32[i41 >> 2];
   d42 = d47 * +HEAPF32[i21 >> 2] + d43 * +HEAPF32[i15 >> 2] + d46 * +HEAPF32[i14 >> 2];
   d45 = d47 * +HEAPF32[i31 >> 2] + d43 * +HEAPF32[i32 >> 2] + d46 * +HEAPF32[i30 >> 2];
   HEAPF32[i37 >> 2] = +HEAPF32[i11 >> 2] * d47 + +HEAPF32[i24 >> 2] * d43 + +HEAPF32[i25 >> 2] * d46;
   HEAPF32[i40 >> 2] = d42;
   HEAPF32[i41 >> 2] = d45;
   HEAPF32[i50 >> 2] = 0.0;
   __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() | 0;
   i53 = 453568 + (i51 << 4) | 0;
   HEAP32[i53 + 0 >> 2] = HEAP32[i37 + 0 >> 2];
   HEAP32[i53 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
   HEAP32[i53 + 8 >> 2] = HEAP32[i37 + 8 >> 2];
   HEAP32[i53 + 12 >> 2] = HEAP32[i37 + 12 >> 2];
   d45 = +HEAPF32[i37 >> 2];
   d42 = -d45;
   d46 = +HEAPF32[i40 >> 2];
   d43 = -d46;
   d47 = +HEAPF32[i41 >> 2];
   d44 = -d47;
   d49 = +HEAPF32[i23 >> 2] * d42 + +HEAPF32[i18 >> 2] * d43 + +HEAPF32[i28 >> 2] * d44;
   d48 = +HEAPF32[i22 >> 2] * d42 + +HEAPF32[i16 >> 2] * d43 + +HEAPF32[i27 >> 2] * d44;
   HEAPF32[i36 + (i51 << 4) >> 2] = +HEAPF32[i8 >> 2] * d42 + +HEAPF32[i19 >> 2] * d43 + +HEAPF32[i29 >> 2] * d44;
   HEAPF32[i36 + (i51 << 4) + 4 >> 2] = d49;
   HEAPF32[i36 + (i51 << 4) + 8 >> 2] = d48;
   HEAPF32[i36 + (i51 << 4) + 12 >> 2] = 0.0;
   d48 = d45 * +HEAPF32[i24 >> 2] + d46 * +HEAPF32[i15 >> 2] + d47 * +HEAPF32[i32 >> 2];
   d49 = d45 * +HEAPF32[i25 >> 2] + d46 * +HEAPF32[i14 >> 2] + d47 * +HEAPF32[i30 >> 2];
   HEAPF32[i35 + (i51 << 4) >> 2] = +HEAPF32[i11 >> 2] * d45 + +HEAPF32[i21 >> 2] * d46 + +HEAPF32[i31 >> 2] * d47;
   HEAPF32[i35 + (i51 << 4) + 4 >> 2] = d48;
   HEAPF32[i35 + (i51 << 4) + 8 >> 2] = d49;
   HEAPF32[i35 + (i51 << 4) + 12 >> 2] = 0.0;
   i52 = i52 + 1 | 0;
   if ((i52 | 0) == (i38 | 0)) {
    break;
   } else {
    i51 = i51 + 1 | 0;
   }
  }
  i34 = i38 + i34 | 0;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] & 63](i4, i36, i20, i34);
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] & 63](i6, i35, i17, i34);
 if ((i34 | 0) > 0) {
  i38 = i8 + 48 | 0;
  i35 = i8 + 52 | 0;
  i41 = i8 + 56 | 0;
  i36 = i11 + 48 | 0;
  i37 = i11 + 52 | 0;
  i40 = i11 + 56 | 0;
  if (i39) {
   d45 = 0.0;
   d46 = 0.0;
   d47 = 0.0;
   i27 = 0;
   d26 = 999999984306749400.0;
   while (1) {
    __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() | 0;
    d42 = +HEAPF32[453568 + (i27 << 4) >> 2];
    d44 = +HEAPF32[453572 + (i27 << 4) >> 2];
    d43 = +HEAPF32[453580 + (i27 << 4) >> 2];
    if (d42 * d42 + d44 * d44 + 0.0 > .01 ? (d48 = +HEAPF32[i20 + (i27 << 4) >> 2], d49 = +HEAPF32[i20 + (i27 << 4) + 4 >> 2], d33 = +HEAPF32[i20 + (i27 << 4) + 8 >> 2], d56 = +HEAPF32[i17 + (i27 << 4) >> 2], d55 = +HEAPF32[i17 + (i27 << 4) + 4 >> 2], d54 = +HEAPF32[i17 + (i27 << 4) + 8 >> 2], d33 = d42 * (+HEAPF32[i36 >> 2] + (d56 * +HEAPF32[i11 >> 2] + d55 * +HEAPF32[i24 >> 2] + d54 * +HEAPF32[i25 >> 2]) - (+HEAPF32[i38 >> 2] + (d48 * +HEAPF32[i8 >> 2] + d49 * +HEAPF32[i23 >> 2] + d33 * +HEAPF32[i22 >> 2]))) + d44 * (+HEAPF32[i37 >> 2] + (d56 * +HEAPF32[i21 >> 2] + d55 * +HEAPF32[i15 >> 2] + d54 * +HEAPF32[i14 >> 2]) - (+HEAPF32[i35 >> 2] + (d48 * +HEAPF32[i19 >> 2] + d49 * +HEAPF32[i18 >> 2] + d33 * +HEAPF32[i16 >> 2]))) + 0.0, d33 < d26) : 0) {
     d26 = d33;
    } else {
     d43 = d47;
     d44 = d46;
     d42 = d45;
    }
    i27 = i27 + 1 | 0;
    if ((i27 | 0) == (i34 | 0)) {
     d45 = 0.0;
     d33 = d26;
     break;
    } else {
     d45 = d42;
     d46 = d44;
     d47 = d43;
    }
   }
  } else {
   d42 = 0.0;
   d44 = 0.0;
   d47 = 0.0;
   d49 = 0.0;
   i39 = 0;
   d33 = 999999984306749400.0;
   while (1) {
    __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() | 0;
    d46 = +HEAPF32[453568 + (i39 << 4) >> 2];
    d48 = +HEAPF32[453572 + (i39 << 4) >> 2];
    d45 = +HEAPF32[453576 + (i39 << 4) >> 2];
    d43 = +HEAPF32[453580 + (i39 << 4) >> 2];
    if (d46 * d46 + d48 * d48 + d45 * d45 > .01 ? (d55 = +HEAPF32[i20 + (i39 << 4) >> 2], d56 = +HEAPF32[i20 + (i39 << 4) + 4 >> 2], d26 = +HEAPF32[i20 + (i39 << 4) + 8 >> 2], d58 = +HEAPF32[i17 + (i39 << 4) >> 2], d57 = +HEAPF32[i17 + (i39 << 4) + 4 >> 2], d54 = +HEAPF32[i17 + (i39 << 4) + 8 >> 2], d26 = d46 * (+HEAPF32[i36 >> 2] + (d58 * +HEAPF32[i11 >> 2] + d57 * +HEAPF32[i24 >> 2] + d54 * +HEAPF32[i25 >> 2]) - (+HEAPF32[i38 >> 2] + (d55 * +HEAPF32[i8 >> 2] + d56 * +HEAPF32[i23 >> 2] + d26 * +HEAPF32[i22 >> 2]))) + d48 * (+HEAPF32[i37 >> 2] + (d58 * +HEAPF32[i21 >> 2] + d57 * +HEAPF32[i15 >> 2] + d54 * +HEAPF32[i14 >> 2]) - (+HEAPF32[i35 >> 2] + (d55 * +HEAPF32[i19 >> 2] + d56 * +HEAPF32[i18 >> 2] + d26 * +HEAPF32[i16 >> 2]))) + d45 * (+HEAPF32[i40 >> 2] + (d58 * +HEAPF32[i31 >> 2] + d57 * +HEAPF32[i32 >> 2] + d54 * +HEAPF32[i30 >> 2]) - (+HEAPF32[i41 >> 2] + (d55 * +HEAPF32[i29 >> 2] + d56 * +HEAPF32[i28 >> 2] + d26 * +HEAPF32[i27 >> 2]))), d26 < d33) : 0) {
     d44 = d48;
     d42 = d46;
     d33 = d26;
    } else {
     d43 = d49;
     d45 = d47;
    }
    i39 = i39 + 1 | 0;
    if ((i39 | 0) == (i34 | 0)) {
     break;
    } else {
     d47 = d45;
     d49 = d43;
    }
   }
  }
 } else {
  d43 = 0.0;
  d45 = 0.0;
  d44 = 0.0;
  d42 = 0.0;
  d33 = 999999984306749400.0;
 }
 +__ZNK13btConvexShape19getMarginNonVirtualEv(i4);
 +__ZNK13btConvexShape19getMarginNonVirtualEv(i6);
 if (d33 < 0.0) {
  i53 = 0;
  STACKTOP = i7;
  return i53 | 0;
 }
 d26 = +__ZNK13btConvexShape19getMarginNonVirtualEv(i4);
 d26 = d33 + (d26 + +__ZNK13btConvexShape19getMarginNonVirtualEv(i6) + .5);
 __ZN17btGjkPairDetectorC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i13, i4, i6, i9, 0);
 i4 = i12 + 128 | 0;
 HEAP32[i12 + 132 >> 2] = 0;
 d56 = +HEAPF32[i8 + 48 >> 2] + d42 * d26;
 d57 = d44 * d26 + +HEAPF32[i8 + 52 >> 2];
 d58 = d45 * d26 + +HEAPF32[i8 + 56 >> 2];
 i51 = i8 + 16 | 0;
 i52 = i8 + 32 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 i53 = i12 + 16 | 0;
 HEAP32[i53 + 0 >> 2] = HEAP32[i51 + 0 >> 2];
 HEAP32[i53 + 4 >> 2] = HEAP32[i51 + 4 >> 2];
 HEAP32[i53 + 8 >> 2] = HEAP32[i51 + 8 >> 2];
 HEAP32[i53 + 12 >> 2] = HEAP32[i51 + 12 >> 2];
 i53 = i12 + 32 | 0;
 HEAP32[i53 + 0 >> 2] = HEAP32[i52 + 0 >> 2];
 HEAP32[i53 + 4 >> 2] = HEAP32[i52 + 4 >> 2];
 HEAP32[i53 + 8 >> 2] = HEAP32[i52 + 8 >> 2];
 HEAP32[i53 + 12 >> 2] = HEAP32[i52 + 12 >> 2];
 HEAPF32[i12 + 48 >> 2] = d56;
 HEAPF32[i12 + 52 >> 2] = d57;
 HEAPF32[i12 + 56 >> 2] = d58;
 HEAPF32[i12 + 60 >> 2] = 0.0;
 i53 = i12 + 64 | 0;
 HEAP32[i53 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i53 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i53 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i53 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i53 = i12 + 80 | 0;
 i52 = i11 + 16 | 0;
 HEAP32[i53 + 0 >> 2] = HEAP32[i52 + 0 >> 2];
 HEAP32[i53 + 4 >> 2] = HEAP32[i52 + 4 >> 2];
 HEAP32[i53 + 8 >> 2] = HEAP32[i52 + 8 >> 2];
 HEAP32[i53 + 12 >> 2] = HEAP32[i52 + 12 >> 2];
 i53 = i12 + 96 | 0;
 i52 = i11 + 32 | 0;
 HEAP32[i53 + 0 >> 2] = HEAP32[i52 + 0 >> 2];
 HEAP32[i53 + 4 >> 2] = HEAP32[i52 + 4 >> 2];
 HEAP32[i53 + 8 >> 2] = HEAP32[i52 + 8 >> 2];
 HEAP32[i53 + 12 >> 2] = HEAP32[i52 + 12 >> 2];
 i53 = i12 + 112 | 0;
 i52 = i11 + 48 | 0;
 HEAP32[i53 + 0 >> 2] = HEAP32[i52 + 0 >> 2];
 HEAP32[i53 + 4 >> 2] = HEAP32[i52 + 4 >> 2];
 HEAP32[i53 + 8 >> 2] = HEAP32[i52 + 8 >> 2];
 HEAP32[i53 + 12 >> 2] = HEAP32[i52 + 12 >> 2];
 HEAPF32[i4 >> 2] = 999999984306749400.0;
 HEAP32[i5 >> 2] = 454656;
 i4 = i5 + 40 | 0;
 HEAP8[i4] = 0;
 HEAPF32[i13 + 4 >> 2] = -d42;
 HEAPF32[i13 + 8 >> 2] = -d44;
 HEAPF32[i13 + 12 >> 2] = -d45;
 HEAPF32[i13 + 16 >> 2] = 0.0;
 __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i13, i12, i5, i10, 0);
 d26 = d26 - +HEAPF32[i5 + 36 >> 2];
 i4 = HEAP8[i4] | 0;
 if (!(i4 << 24 >> 24 == 0)) {
  i53 = i5 + 20 | 0;
  d57 = +HEAPF32[i5 + 24 >> 2] - d44 * d26;
  d58 = +HEAPF32[i5 + 28 >> 2] - d45 * d26;
  HEAPF32[i3 >> 2] = +HEAPF32[i53 >> 2] - d42 * d26;
  HEAPF32[i3 + 4 >> 2] = d57;
  HEAPF32[i3 + 8 >> 2] = d58;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  HEAP32[i2 + 0 >> 2] = HEAP32[i53 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i53 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i53 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i53 + 12 >> 2];
  HEAPF32[i1 >> 2] = d42;
  HEAPF32[i1 + 4 >> 2] = d44;
  HEAPF32[i1 + 8 >> 2] = d45;
  HEAPF32[i1 + 12 >> 2] = d43;
 }
 i53 = i4 << 24 >> 24 != 0;
 STACKTOP = i7;
 return i53 | 0;
}
function __ZN23btPolyhedralConvexShape28initializePolyhedralFeaturesEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i14 = i2 + 232 | 0;
 i1 = i2 + 168 | 0;
 i21 = i2 + 152 | 0;
 i20 = i2 + 96 | 0;
 i19 = i2 + 80 | 0;
 i12 = i2 + 32 | 0;
 i4 = i2 + 16 | 0;
 i7 = i2;
 i5 = i3 + 52 | 0;
 i10 = HEAP32[i5 >> 2] | 0;
 if ((i10 | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i10);
 }
 i10 = __Z22btAlignedAllocInternalji(80, 16) | 0;
 if ((i10 | 0) == 0) {
  i10 = 0;
 } else {
  __ZN18btConvexPolyhedronC2Ev(i10);
 }
 HEAP32[i5 >> 2] = i10;
 i13 = 0;
 i16 = 0;
 i10 = 0;
 while (1) {
  if ((i13 | 0) >= (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] & 127](i3) | 0)) {
   break;
  }
  if ((i13 | 0) == (i16 | 0) ? (i15 = (i16 | 0) == 0 ? 1 : i16 << 1, (i16 | 0) < (i15 | 0)) : 0) {
   if ((i15 | 0) == 0) {
    i17 = 0;
   } else {
    i17 = __Z22btAlignedAllocInternalji(i15 << 4, 16) | 0;
   }
   if ((i16 | 0) > 0) {
    i22 = 0;
    do {
     i18 = i17 + (i22 << 4) | 0;
     if ((i18 | 0) != 0) {
      i40 = i10 + (i22 << 4) | 0;
      HEAP32[i18 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
      HEAP32[i18 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
      HEAP32[i18 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
      HEAP32[i18 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
     }
     i22 = i22 + 1 | 0;
    } while ((i22 | 0) != (i16 | 0));
   }
   if ((i10 | 0) == 0) {
    i10 = i17;
    i16 = i15;
   } else {
    __Z21btAlignedFreeInternalPv(i10);
    i10 = i17;
    i16 = i15;
   }
  }
  i17 = i10 + (i13 << 4) | 0;
  if ((i17 | 0) != 0) {
   HEAP32[i17 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i17 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
  }
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] & 63](i3, i13, i17);
  i13 = i13 + 1 | 0;
 }
 HEAP8[i1 + 16 | 0] = 1;
 i17 = i1 + 12 | 0;
 HEAP32[i17 >> 2] = 0;
 i14 = i1 + 4 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 36 | 0] = 1;
 i16 = i1 + 32 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP8[i1 + 56 | 0] = 1;
 i15 = i1 + 52 | 0;
 HEAP32[i15 >> 2] = 0;
 i18 = i1 + 44 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 +__ZN20btConvexHullComputer7computeEPKvbiiff(i1, i10, 0, 16, i13, 0.0, 0.0);
 i18 = HEAP32[i18 >> 2] | 0;
 if ((i18 | 0) > 0) {
  i13 = __Z22btAlignedAllocInternalji(i18 << 4, 16) | 0;
  i23 = 0;
  do {
   i22 = i13 + (i23 << 4) | 0;
   if ((i22 | 0) != 0) {
    HEAP32[i22 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
    HEAP32[i22 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
    HEAP32[i22 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
    HEAP32[i22 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
   }
   i23 = i23 + 1 | 0;
  } while ((i23 | 0) != (i18 | 0));
 } else {
  i13 = 0;
 }
 i22 = HEAP32[i5 >> 2] | 0;
 i21 = i20 + 0 | 0;
 i23 = i21 + 56 | 0;
 do {
  HEAP32[i21 >> 2] = 0;
  i21 = i21 + 4 | 0;
 } while ((i21 | 0) < (i23 | 0));
 i25 = i20 + 16 | 0;
 HEAP8[i25] = 1;
 i24 = i20 + 12 | 0;
 HEAP32[i24 >> 2] = 0;
 i23 = i20 + 4 | 0;
 HEAP32[i23 >> 2] = 0;
 i21 = i20 + 8 | 0;
 HEAP32[i21 >> 2] = 0;
 i26 = i20 + 36 | 0;
 HEAP8[i26] = 1;
 i27 = i20 + 32 | 0;
 HEAP32[i27 >> 2] = 0;
 i28 = i20 + 24 | 0;
 HEAP32[i28 >> 2] = 0;
 i29 = i20 + 28 | 0;
 HEAP32[i29 >> 2] = 0;
 __ZN20btAlignedObjectArrayI6btFaceE6resizeEiRKS0_(i22 + 24 | 0, i18, i20);
 i20 = HEAP32[i27 >> 2] | 0;
 if ((i20 | 0) != 0) {
  if ((HEAP8[i26] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i20);
  }
  HEAP32[i27 >> 2] = 0;
 }
 HEAP8[i26] = 1;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 i20 = HEAP32[i24 >> 2] | 0;
 if ((i20 | 0) != 0) {
  if ((HEAP8[i25] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i20);
  }
  HEAP32[i24 >> 2] = 0;
 }
 HEAP8[i25] = 1;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 i20 = HEAP32[i14 >> 2] | 0;
 i26 = HEAP32[i5 >> 2] | 0;
 i21 = i26 + 8 | 0;
 i22 = HEAP32[i21 >> 2] | 0;
 if ((i22 | 0) < (i20 | 0)) {
  i24 = i26 + 12 | 0;
  if ((HEAP32[i24 >> 2] | 0) < (i20 | 0)) {
   if ((i20 | 0) == 0) {
    i25 = 0;
    i27 = i22;
   } else {
    i25 = __Z22btAlignedAllocInternalji(i20 << 4, 16) | 0;
    i27 = HEAP32[i21 >> 2] | 0;
   }
   i23 = i26 + 16 | 0;
   if ((i27 | 0) > 0) {
    i29 = 0;
    do {
     i28 = i25 + (i29 << 4) | 0;
     if ((i28 | 0) != 0) {
      i40 = (HEAP32[i23 >> 2] | 0) + (i29 << 4) | 0;
      HEAP32[i28 + 0 >> 2] = HEAP32[i40 + 0 >> 2];
      HEAP32[i28 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
      HEAP32[i28 + 8 >> 2] = HEAP32[i40 + 8 >> 2];
      HEAP32[i28 + 12 >> 2] = HEAP32[i40 + 12 >> 2];
     }
     i29 = i29 + 1 | 0;
    } while ((i29 | 0) != (i27 | 0));
   }
   i27 = HEAP32[i23 >> 2] | 0;
   i26 = i26 + 20 | 0;
   if ((i27 | 0) != 0) {
    if ((HEAP8[i26] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i27);
    }
    HEAP32[i23 >> 2] = 0;
   }
   HEAP8[i26] = 1;
   HEAP32[i23 >> 2] = i25;
   HEAP32[i24 >> 2] = i20;
  } else {
   i23 = i26 + 16 | 0;
  }
  do {
   i24 = (HEAP32[i23 >> 2] | 0) + (i22 << 4) | 0;
   if ((i24 | 0) != 0) {
    HEAP32[i24 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    HEAP32[i24 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
    HEAP32[i24 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
    HEAP32[i24 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
   }
   i22 = i22 + 1 | 0;
  } while ((i22 | 0) != (i20 | 0));
 }
 HEAP32[i21 >> 2] = i20;
 if ((i20 | 0) > 0) {
  i19 = 0;
  do {
   i40 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + (i19 << 4) | 0;
   i39 = (HEAP32[i17 >> 2] | 0) + (i19 << 4) | 0;
   HEAP32[i40 + 0 >> 2] = HEAP32[i39 + 0 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i39 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i39 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i39 + 12 >> 2];
   i19 = i19 + 1 | 0;
  } while ((i19 | 0) != (i20 | 0));
 }
 if ((i18 | 0) > 0) {
  i21 = i12 + 4 | 0;
  i20 = i12 + 24 | 0;
  i22 = i12 + 8 | 0;
  i19 = i12 + 20 | 0;
  i23 = i12 + 16 | 0;
  i24 = 0;
  do {
   i26 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[(HEAP32[i15 >> 2] | 0) + (i24 << 2) >> 2] | 0) * 12 | 0) | 0;
   i27 = i26;
   i28 = 0;
   do {
    i25 = i27 + 4 | 0;
    i29 = HEAP32[i27 + ((HEAP32[i25 >> 2] | 0) * 12 | 0) + 8 >> 2] | 0;
    i31 = HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0;
    i30 = i31 + (i24 * 56 | 0) + 4 | 0;
    i38 = HEAP32[i30 >> 2] | 0;
    i32 = i31 + (i24 * 56 | 0) + 8 | 0;
    if ((i38 | 0) == (HEAP32[i32 >> 2] | 0) ? (i11 = (i38 | 0) == 0 ? 1 : i38 << 1, (i38 | 0) < (i11 | 0)) : 0) {
     if ((i11 | 0) == 0) {
      i33 = 0;
     } else {
      i33 = __Z22btAlignedAllocInternalji(i11 << 2, 16) | 0;
      i38 = HEAP32[i30 >> 2] | 0;
     }
     i34 = i31 + (i24 * 56 | 0) + 12 | 0;
     if ((i38 | 0) > 0) {
      i39 = 0;
      do {
       i40 = i33 + (i39 << 2) | 0;
       if ((i40 | 0) != 0) {
        HEAP32[i40 >> 2] = HEAP32[(HEAP32[i34 >> 2] | 0) + (i39 << 2) >> 2];
       }
       i39 = i39 + 1 | 0;
      } while ((i39 | 0) != (i38 | 0));
     }
     i39 = HEAP32[i34 >> 2] | 0;
     i38 = i31 + (i24 * 56 | 0) + 16 | 0;
     if ((i39 | 0) != 0) {
      if ((HEAP8[i38] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i39);
      }
      HEAP32[i34 >> 2] = 0;
     }
     HEAP8[i38] = 1;
     HEAP32[i34 >> 2] = i33;
     HEAP32[i32 >> 2] = i11;
     i38 = HEAP32[i30 >> 2] | 0;
    }
    i31 = (HEAP32[i31 + (i24 * 56 | 0) + 12 >> 2] | 0) + (i38 << 2) | 0;
    if ((i31 | 0) != 0) {
     HEAP32[i31 >> 2] = i29;
     i38 = HEAP32[i30 >> 2] | 0;
    }
    HEAP32[i30 >> 2] = i38 + 1;
    i39 = HEAP32[i27 + 8 >> 2] | 0;
    i40 = HEAP32[i17 >> 2] | 0;
    d35 = +HEAPF32[i40 + (i39 << 4) >> 2] - +HEAPF32[i40 + (i29 << 4) >> 2];
    d36 = +HEAPF32[i40 + (i39 << 4) + 4 >> 2] - +HEAPF32[i40 + (i29 << 4) + 4 >> 2];
    d37 = +HEAPF32[i40 + (i39 << 4) + 8 >> 2] - +HEAPF32[i40 + (i29 << 4) + 8 >> 2];
    d41 = 1.0 / +Math_sqrt(+(d35 * d35 + d36 * d36 + d37 * d37));
    if ((i28 | 0) < 2) {
     HEAPF32[i12 + (i28 << 4) >> 2] = d35 * d41;
     HEAPF32[i12 + (i28 << 4) + 4 >> 2] = d36 * d41;
     HEAPF32[i12 + (i28 << 4) + 8 >> 2] = d37 * d41;
     HEAPF32[i12 + (i28 << 4) + 12 >> 2] = 0.0;
     i28 = i28 + 1 | 0;
    }
    i40 = HEAP32[i25 >> 2] | 0;
    i27 = i27 + (((HEAP32[i27 + (i40 * 12 | 0) >> 2] | 0) + i40 | 0) * 12 | 0) | 0;
   } while ((i27 | 0) != (i26 | 0));
   i29 = i13 + (i24 << 4) | 0;
   if ((i28 | 0) == 2) {
    d41 = +HEAPF32[i21 >> 2];
    d36 = +HEAPF32[i20 >> 2];
    d44 = +HEAPF32[i22 >> 2];
    d43 = +HEAPF32[i19 >> 2];
    d42 = d41 * d36 - d44 * d43;
    d37 = +HEAPF32[i23 >> 2];
    d35 = +HEAPF32[i12 >> 2];
    d36 = d44 * d37 - d36 * d35;
    d37 = d43 * d35 - d41 * d37;
    i39 = i13 + (i24 << 4) + 4 | 0;
    i40 = i13 + (i24 << 4) + 8 | 0;
    HEAPF32[i13 + (i24 << 4) + 12 >> 2] = 0.0;
    d41 = 1.0 / +Math_sqrt(+(d42 * d42 + d36 * d36 + d37 * d37));
    d42 = d42 * d41;
    HEAPF32[i29 >> 2] = d42;
    HEAPF32[i39 >> 2] = d36 * d41;
    HEAPF32[i40 >> 2] = d37 * d41;
    i25 = HEAP32[i5 >> 2] | 0;
    i26 = HEAP32[i25 + 36 >> 2] | 0;
    HEAPF32[i26 + (i24 * 56 | 0) + 40 >> 2] = -d42;
    HEAPF32[i26 + (i24 * 56 | 0) + 44 >> 2] = -+HEAPF32[i39 >> 2];
    HEAPF32[i26 + (i24 * 56 | 0) + 48 >> 2] = -+HEAPF32[i40 >> 2];
    HEAPF32[i26 + (i24 * 56 | 0) + 52 >> 2] = 1.0000000150474662e+30;
   } else {
    HEAP32[i29 + 0 >> 2] = 0;
    HEAP32[i29 + 4 >> 2] = 0;
    HEAP32[i29 + 8 >> 2] = 0;
    HEAP32[i29 + 12 >> 2] = 0;
    i25 = HEAP32[i5 >> 2] | 0;
    i26 = HEAP32[i25 + 36 >> 2] | 0;
   }
   i27 = HEAP32[i26 + (i24 * 56 | 0) + 4 >> 2] | 0;
   if ((i27 | 0) > 0) {
    d35 = +HEAPF32[i29 >> 2];
    d36 = +HEAPF32[i13 + (i24 << 4) + 4 >> 2];
    d37 = +HEAPF32[i13 + (i24 << 4) + 8 >> 2];
    i28 = HEAP32[i26 + (i24 * 56 | 0) + 12 >> 2] | 0;
    i29 = HEAP32[i25 + 16 >> 2] | 0;
    d41 = 1.0000000150474662e+30;
    i30 = 0;
    do {
     i40 = HEAP32[i28 + (i30 << 2) >> 2] | 0;
     d42 = +HEAPF32[i29 + (i40 << 4) >> 2] * d35 + +HEAPF32[i29 + (i40 << 4) + 4 >> 2] * d36 + +HEAPF32[i29 + (i40 << 4) + 8 >> 2] * d37;
     d41 = d41 > d42 ? d42 : d41;
     i30 = i30 + 1 | 0;
    } while ((i30 | 0) < (i27 | 0));
   } else {
    d41 = 1.0000000150474662e+30;
   }
   HEAPF32[i26 + (i24 * 56 | 0) + 52 >> 2] = d41;
   i24 = i24 + 1 | 0;
  } while ((i24 | 0) < (i18 | 0));
 } else {
  i25 = HEAP32[i5 >> 2] | 0;
 }
 i11 = HEAP32[i25 + 28 >> 2] | 0;
 if ((i11 | 0) != 0 ? (HEAP32[i14 >> 2] | 0) != 0 & (i11 | 0) > 0 : 0) {
  i11 = i7 + 4 | 0;
  i16 = i7 + 8 | 0;
  i15 = i7 + 12 | 0;
  i14 = i4 + 4 | 0;
  i12 = i4 + 8 | 0;
  i17 = 0;
  do {
   i25 = HEAP32[i25 + 36 >> 2] | 0;
   d41 = +HEAPF32[i25 + (i17 * 56 | 0) + 40 >> 2];
   d42 = +HEAPF32[i25 + (i17 * 56 | 0) + 44 >> 2];
   d43 = +HEAPF32[i25 + (i17 * 56 | 0) + 48 >> 2];
   d44 = +HEAPF32[i25 + (i17 * 56 | 0) + 52 >> 2];
   i25 = HEAP32[(HEAP32[i3 >> 2] | 0) + 60 >> 2] | 0;
   HEAPF32[i7 >> 2] = -d41;
   HEAPF32[i11 >> 2] = -d42;
   HEAPF32[i16 >> 2] = -d43;
   HEAPF32[i15 >> 2] = 0.0;
   FUNCTION_TABLE_viii[i25 & 63](i4, i3, i7);
   i25 = HEAP32[i5 >> 2] | 0;
   if (d41 * +HEAPF32[i4 >> 2] + d42 * +HEAPF32[i14 >> 2] + d43 * +HEAPF32[i12 >> 2] < d44 ? (i8 = HEAP32[i25 + 36 >> 2] | 0, i9 = i8 + (i17 * 56 | 0) + 40 | 0, HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] * -1.0, i9 = i8 + (i17 * 56 | 0) + 44 | 0, HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] * -1.0, i9 = i8 + (i17 * 56 | 0) + 48 | 0, HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] * -1.0, i9 = i8 + (i17 * 56 | 0) + 52 | 0, HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] * -1.0, i9 = HEAP32[i8 + (i17 * 56 | 0) + 4 >> 2] | 0, i6 = (i9 | 0) / 2 | 0, (i9 | 0) > 1) : 0) {
    i18 = HEAP32[i8 + (i17 * 56 | 0) + 12 >> 2] | 0;
    i19 = i9 + -1 | 0;
    i20 = 0;
    do {
     i38 = i18 + (i20 << 2) | 0;
     i40 = i18 + (i19 - i20 << 2) | 0;
     i39 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = HEAP32[i40 >> 2];
     HEAP32[i40 >> 2] = i39;
     i20 = i20 + 1 | 0;
    } while ((i20 | 0) < (i6 | 0));
   }
   i17 = i17 + 1 | 0;
  } while ((i17 | 0) < (HEAP32[i25 + 28 >> 2] | 0));
 }
 __ZN18btConvexPolyhedron10initializeEv(i25);
 if ((i13 | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i13);
 }
 __ZN20btConvexHullComputerD2Ev(i1);
 if ((i10 | 0) == 0) {
  STACKTOP = i2;
  return 1;
 }
 __Z21btAlignedFreeInternalPv(i10);
 STACKTOP = i2;
 return 1;
}
function _free(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = STACKTOP;
 if ((i7 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i15 = i7 + -8 | 0;
 i16 = HEAP32[460264 >> 2] | 0;
 if (i15 >>> 0 < i16 >>> 0) {
  _abort();
 }
 i13 = HEAP32[i7 + -4 >> 2] | 0;
 i12 = i13 & 3;
 if ((i12 | 0) == 1) {
  _abort();
 }
 i8 = i13 & -8;
 i6 = i7 + (i8 + -8) | 0;
 do {
  if ((i13 & 1 | 0) == 0) {
   i19 = HEAP32[i15 >> 2] | 0;
   if ((i12 | 0) == 0) {
    STACKTOP = i1;
    return;
   }
   i15 = -8 - i19 | 0;
   i13 = i7 + i15 | 0;
   i12 = i19 + i8 | 0;
   if (i13 >>> 0 < i16 >>> 0) {
    _abort();
   }
   if ((i13 | 0) == (HEAP32[460268 >> 2] | 0)) {
    i2 = i7 + (i8 + -4) | 0;
    if ((HEAP32[i2 >> 2] & 3 | 0) != 3) {
     i2 = i13;
     i11 = i12;
     break;
    }
    HEAP32[460256 >> 2] = i12;
    HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
    HEAP32[i7 + (i15 + 4) >> 2] = i12 | 1;
    HEAP32[i6 >> 2] = i12;
    STACKTOP = i1;
    return;
   }
   i18 = i19 >>> 3;
   if (i19 >>> 0 < 256) {
    i2 = HEAP32[i7 + (i15 + 8) >> 2] | 0;
    i11 = HEAP32[i7 + (i15 + 12) >> 2] | 0;
    i14 = 460288 + (i18 << 1 << 2) | 0;
    if ((i2 | 0) != (i14 | 0)) {
     if (i2 >>> 0 < i16 >>> 0) {
      _abort();
     }
     if ((HEAP32[i2 + 12 >> 2] | 0) != (i13 | 0)) {
      _abort();
     }
    }
    if ((i11 | 0) == (i2 | 0)) {
     HEAP32[115062] = HEAP32[115062] & ~(1 << i18);
     i2 = i13;
     i11 = i12;
     break;
    }
    if ((i11 | 0) != (i14 | 0)) {
     if (i11 >>> 0 < i16 >>> 0) {
      _abort();
     }
     i14 = i11 + 8 | 0;
     if ((HEAP32[i14 >> 2] | 0) == (i13 | 0)) {
      i17 = i14;
     } else {
      _abort();
     }
    } else {
     i17 = i11 + 8 | 0;
    }
    HEAP32[i2 + 12 >> 2] = i11;
    HEAP32[i17 >> 2] = i2;
    i2 = i13;
    i11 = i12;
    break;
   }
   i17 = HEAP32[i7 + (i15 + 24) >> 2] | 0;
   i18 = HEAP32[i7 + (i15 + 12) >> 2] | 0;
   do {
    if ((i18 | 0) == (i13 | 0)) {
     i19 = i7 + (i15 + 20) | 0;
     i18 = HEAP32[i19 >> 2] | 0;
     if ((i18 | 0) == 0) {
      i19 = i7 + (i15 + 16) | 0;
      i18 = HEAP32[i19 >> 2] | 0;
      if ((i18 | 0) == 0) {
       i14 = 0;
       break;
      }
     }
     while (1) {
      i21 = i18 + 20 | 0;
      i20 = HEAP32[i21 >> 2] | 0;
      if ((i20 | 0) != 0) {
       i18 = i20;
       i19 = i21;
       continue;
      }
      i20 = i18 + 16 | 0;
      i21 = HEAP32[i20 >> 2] | 0;
      if ((i21 | 0) == 0) {
       break;
      } else {
       i18 = i21;
       i19 = i20;
      }
     }
     if (i19 >>> 0 < i16 >>> 0) {
      _abort();
     } else {
      HEAP32[i19 >> 2] = 0;
      i14 = i18;
      break;
     }
    } else {
     i19 = HEAP32[i7 + (i15 + 8) >> 2] | 0;
     if (i19 >>> 0 < i16 >>> 0) {
      _abort();
     }
     i16 = i19 + 12 | 0;
     if ((HEAP32[i16 >> 2] | 0) != (i13 | 0)) {
      _abort();
     }
     i20 = i18 + 8 | 0;
     if ((HEAP32[i20 >> 2] | 0) == (i13 | 0)) {
      HEAP32[i16 >> 2] = i18;
      HEAP32[i20 >> 2] = i19;
      i14 = i18;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if ((i17 | 0) != 0) {
    i18 = HEAP32[i7 + (i15 + 28) >> 2] | 0;
    i16 = 460552 + (i18 << 2) | 0;
    if ((i13 | 0) == (HEAP32[i16 >> 2] | 0)) {
     HEAP32[i16 >> 2] = i14;
     if ((i14 | 0) == 0) {
      HEAP32[460252 >> 2] = HEAP32[460252 >> 2] & ~(1 << i18);
      i2 = i13;
      i11 = i12;
      break;
     }
    } else {
     if (i17 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
      _abort();
     }
     i16 = i17 + 16 | 0;
     if ((HEAP32[i16 >> 2] | 0) == (i13 | 0)) {
      HEAP32[i16 >> 2] = i14;
     } else {
      HEAP32[i17 + 20 >> 2] = i14;
     }
     if ((i14 | 0) == 0) {
      i2 = i13;
      i11 = i12;
      break;
     }
    }
    if (i14 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[i14 + 24 >> 2] = i17;
    i16 = HEAP32[i7 + (i15 + 16) >> 2] | 0;
    do {
     if ((i16 | 0) != 0) {
      if (i16 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i14 + 16 >> 2] = i16;
       HEAP32[i16 + 24 >> 2] = i14;
       break;
      }
     }
    } while (0);
    i15 = HEAP32[i7 + (i15 + 20) >> 2] | 0;
    if ((i15 | 0) != 0) {
     if (i15 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i14 + 20 >> 2] = i15;
      HEAP32[i15 + 24 >> 2] = i14;
      i2 = i13;
      i11 = i12;
      break;
     }
    } else {
     i2 = i13;
     i11 = i12;
    }
   } else {
    i2 = i13;
    i11 = i12;
   }
  } else {
   i2 = i15;
   i11 = i8;
  }
 } while (0);
 if (!(i2 >>> 0 < i6 >>> 0)) {
  _abort();
 }
 i12 = i7 + (i8 + -4) | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 if ((i13 & 1 | 0) == 0) {
  _abort();
 }
 if ((i13 & 2 | 0) == 0) {
  if ((i6 | 0) == (HEAP32[460272 >> 2] | 0)) {
   i21 = (HEAP32[460260 >> 2] | 0) + i11 | 0;
   HEAP32[460260 >> 2] = i21;
   HEAP32[460272 >> 2] = i2;
   HEAP32[i2 + 4 >> 2] = i21 | 1;
   if ((i2 | 0) != (HEAP32[460268 >> 2] | 0)) {
    STACKTOP = i1;
    return;
   }
   HEAP32[460268 >> 2] = 0;
   HEAP32[460256 >> 2] = 0;
   STACKTOP = i1;
   return;
  }
  if ((i6 | 0) == (HEAP32[460268 >> 2] | 0)) {
   i21 = (HEAP32[460256 >> 2] | 0) + i11 | 0;
   HEAP32[460256 >> 2] = i21;
   HEAP32[460268 >> 2] = i2;
   HEAP32[i2 + 4 >> 2] = i21 | 1;
   HEAP32[i2 + i21 >> 2] = i21;
   STACKTOP = i1;
   return;
  }
  i11 = (i13 & -8) + i11 | 0;
  i12 = i13 >>> 3;
  do {
   if (!(i13 >>> 0 < 256)) {
    i10 = HEAP32[i7 + (i8 + 16) >> 2] | 0;
    i15 = HEAP32[i7 + (i8 | 4) >> 2] | 0;
    do {
     if ((i15 | 0) == (i6 | 0)) {
      i13 = i7 + (i8 + 12) | 0;
      i12 = HEAP32[i13 >> 2] | 0;
      if ((i12 | 0) == 0) {
       i13 = i7 + (i8 + 8) | 0;
       i12 = HEAP32[i13 >> 2] | 0;
       if ((i12 | 0) == 0) {
        i9 = 0;
        break;
       }
      }
      while (1) {
       i14 = i12 + 20 | 0;
       i15 = HEAP32[i14 >> 2] | 0;
       if ((i15 | 0) != 0) {
        i12 = i15;
        i13 = i14;
        continue;
       }
       i14 = i12 + 16 | 0;
       i15 = HEAP32[i14 >> 2] | 0;
       if ((i15 | 0) == 0) {
        break;
       } else {
        i12 = i15;
        i13 = i14;
       }
      }
      if (i13 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i13 >> 2] = 0;
       i9 = i12;
       break;
      }
     } else {
      i13 = HEAP32[i7 + i8 >> 2] | 0;
      if (i13 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
       _abort();
      }
      i14 = i13 + 12 | 0;
      if ((HEAP32[i14 >> 2] | 0) != (i6 | 0)) {
       _abort();
      }
      i12 = i15 + 8 | 0;
      if ((HEAP32[i12 >> 2] | 0) == (i6 | 0)) {
       HEAP32[i14 >> 2] = i15;
       HEAP32[i12 >> 2] = i13;
       i9 = i15;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    if ((i10 | 0) != 0) {
     i12 = HEAP32[i7 + (i8 + 20) >> 2] | 0;
     i13 = 460552 + (i12 << 2) | 0;
     if ((i6 | 0) == (HEAP32[i13 >> 2] | 0)) {
      HEAP32[i13 >> 2] = i9;
      if ((i9 | 0) == 0) {
       HEAP32[460252 >> 2] = HEAP32[460252 >> 2] & ~(1 << i12);
       break;
      }
     } else {
      if (i10 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
       _abort();
      }
      i12 = i10 + 16 | 0;
      if ((HEAP32[i12 >> 2] | 0) == (i6 | 0)) {
       HEAP32[i12 >> 2] = i9;
      } else {
       HEAP32[i10 + 20 >> 2] = i9;
      }
      if ((i9 | 0) == 0) {
       break;
      }
     }
     if (i9 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
      _abort();
     }
     HEAP32[i9 + 24 >> 2] = i10;
     i6 = HEAP32[i7 + (i8 + 8) >> 2] | 0;
     do {
      if ((i6 | 0) != 0) {
       if (i6 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i9 + 16 >> 2] = i6;
        HEAP32[i6 + 24 >> 2] = i9;
        break;
       }
      }
     } while (0);
     i6 = HEAP32[i7 + (i8 + 12) >> 2] | 0;
     if ((i6 | 0) != 0) {
      if (i6 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i9 + 20 >> 2] = i6;
       HEAP32[i6 + 24 >> 2] = i9;
       break;
      }
     }
    }
   } else {
    i9 = HEAP32[i7 + i8 >> 2] | 0;
    i7 = HEAP32[i7 + (i8 | 4) >> 2] | 0;
    i8 = 460288 + (i12 << 1 << 2) | 0;
    if ((i9 | 0) != (i8 | 0)) {
     if (i9 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
      _abort();
     }
     if ((HEAP32[i9 + 12 >> 2] | 0) != (i6 | 0)) {
      _abort();
     }
    }
    if ((i7 | 0) == (i9 | 0)) {
     HEAP32[115062] = HEAP32[115062] & ~(1 << i12);
     break;
    }
    if ((i7 | 0) != (i8 | 0)) {
     if (i7 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
      _abort();
     }
     i8 = i7 + 8 | 0;
     if ((HEAP32[i8 >> 2] | 0) == (i6 | 0)) {
      i10 = i8;
     } else {
      _abort();
     }
    } else {
     i10 = i7 + 8 | 0;
    }
    HEAP32[i9 + 12 >> 2] = i7;
    HEAP32[i10 >> 2] = i9;
   }
  } while (0);
  HEAP32[i2 + 4 >> 2] = i11 | 1;
  HEAP32[i2 + i11 >> 2] = i11;
  if ((i2 | 0) == (HEAP32[460268 >> 2] | 0)) {
   HEAP32[460256 >> 2] = i11;
   STACKTOP = i1;
   return;
  }
 } else {
  HEAP32[i12 >> 2] = i13 & -2;
  HEAP32[i2 + 4 >> 2] = i11 | 1;
  HEAP32[i2 + i11 >> 2] = i11;
 }
 i6 = i11 >>> 3;
 if (i11 >>> 0 < 256) {
  i7 = i6 << 1;
  i3 = 460288 + (i7 << 2) | 0;
  i8 = HEAP32[115062] | 0;
  i6 = 1 << i6;
  if ((i8 & i6 | 0) != 0) {
   i6 = 460288 + (i7 + 2 << 2) | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
    _abort();
   } else {
    i4 = i6;
    i5 = i7;
   }
  } else {
   HEAP32[115062] = i8 | i6;
   i4 = 460288 + (i7 + 2 << 2) | 0;
   i5 = i3;
  }
  HEAP32[i4 >> 2] = i2;
  HEAP32[i5 + 12 >> 2] = i2;
  HEAP32[i2 + 8 >> 2] = i5;
  HEAP32[i2 + 12 >> 2] = i3;
  STACKTOP = i1;
  return;
 }
 i4 = i11 >>> 8;
 if ((i4 | 0) != 0) {
  if (i11 >>> 0 > 16777215) {
   i4 = 31;
  } else {
   i20 = (i4 + 1048320 | 0) >>> 16 & 8;
   i21 = i4 << i20;
   i19 = (i21 + 520192 | 0) >>> 16 & 4;
   i21 = i21 << i19;
   i4 = (i21 + 245760 | 0) >>> 16 & 2;
   i4 = 14 - (i19 | i20 | i4) + (i21 << i4 >>> 15) | 0;
   i4 = i11 >>> (i4 + 7 | 0) & 1 | i4 << 1;
  }
 } else {
  i4 = 0;
 }
 i5 = 460552 + (i4 << 2) | 0;
 HEAP32[i2 + 28 >> 2] = i4;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 i7 = HEAP32[460252 >> 2] | 0;
 i6 = 1 << i4;
 L199 : do {
  if ((i7 & i6 | 0) != 0) {
   i5 = HEAP32[i5 >> 2] | 0;
   if ((i4 | 0) == 31) {
    i4 = 0;
   } else {
    i4 = 25 - (i4 >>> 1) | 0;
   }
   L204 : do {
    if ((HEAP32[i5 + 4 >> 2] & -8 | 0) != (i11 | 0)) {
     i4 = i11 << i4;
     i7 = i5;
     while (1) {
      i6 = i7 + (i4 >>> 31 << 2) + 16 | 0;
      i5 = HEAP32[i6 >> 2] | 0;
      if ((i5 | 0) == 0) {
       break;
      }
      if ((HEAP32[i5 + 4 >> 2] & -8 | 0) == (i11 | 0)) {
       i3 = i5;
       break L204;
      } else {
       i4 = i4 << 1;
       i7 = i5;
      }
     }
     if (i6 >>> 0 < (HEAP32[460264 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i6 >> 2] = i2;
      HEAP32[i2 + 24 >> 2] = i7;
      HEAP32[i2 + 12 >> 2] = i2;
      HEAP32[i2 + 8 >> 2] = i2;
      break L199;
     }
    } else {
     i3 = i5;
    }
   } while (0);
   i5 = i3 + 8 | 0;
   i4 = HEAP32[i5 >> 2] | 0;
   i6 = HEAP32[460264 >> 2] | 0;
   if (i3 >>> 0 < i6 >>> 0) {
    _abort();
   }
   if (i4 >>> 0 < i6 >>> 0) {
    _abort();
   } else {
    HEAP32[i4 + 12 >> 2] = i2;
    HEAP32[i5 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i4;
    HEAP32[i2 + 12 >> 2] = i3;
    HEAP32[i2 + 24 >> 2] = 0;
    break;
   }
  } else {
   HEAP32[460252 >> 2] = i7 | i6;
   HEAP32[i5 >> 2] = i2;
   HEAP32[i2 + 24 >> 2] = i5;
   HEAP32[i2 + 12 >> 2] = i2;
   HEAP32[i2 + 8 >> 2] = i2;
  }
 } while (0);
 i21 = (HEAP32[460280 >> 2] | 0) + -1 | 0;
 HEAP32[460280 >> 2] = i21;
 if ((i21 | 0) == 0) {
  i2 = 460704 | 0;
 } else {
  STACKTOP = i1;
  return;
 }
 while (1) {
  i2 = HEAP32[i2 >> 2] | 0;
  if ((i2 | 0) == 0) {
   break;
  } else {
   i2 = i2 + 8 | 0;
  }
 }
 HEAP32[460280 >> 2] = -1;
 STACKTOP = i1;
 return;
}
function __ZN18btConvexPolyhedron10initializeEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, i41 = 0, i42 = 0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i1 = i4;
 i13 = i4 + 84 | 0;
 i25 = i4 + 80 | 0;
 HEAP8[i1 + 16 | 0] = 1;
 i11 = i1 + 12 | 0;
 HEAP32[i11 >> 2] = 0;
 i14 = i1 + 4 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 36 | 0] = 1;
 i9 = i1 + 32 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP8[i1 + 56 | 0] = 1;
 i8 = i1 + 52 | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 i12 = i1 + 48 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP8[i1 + 76 | 0] = 1;
 i10 = i1 + 72 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 i3 = i6 + 64 | 0;
 i2 = i6 + 68 | 0;
 i5 = i6 + 72 | 0;
 i7 = i6 + 28 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 i29 = HEAP32[i7 >> 2] | 0;
 if ((i29 | 0) <= 0) {
  d39 = 0.0;
  d39 = 1.0 / d39;
  d40 = +HEAPF32[i3 >> 2];
  d40 = d39 * d40;
  HEAPF32[i3 >> 2] = d40;
  d40 = +HEAPF32[i2 >> 2];
  d40 = d39 * d40;
  HEAPF32[i2 >> 2] = d40;
  d40 = +HEAPF32[i5 >> 2];
  d40 = d39 * d40;
  HEAPF32[i5 >> 2] = d40;
  __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeED2Ev(i1);
  STACKTOP = i4;
  return;
 }
 i24 = i6 + 36 | 0;
 i23 = i13 + 2 | 0;
 i21 = i6 + 16 | 0;
 i22 = i6 + 48 | 0;
 i19 = i25 + 2 | 0;
 i15 = i6 + 52 | 0;
 i20 = i6 + 56 | 0;
 i26 = i6 + 60 | 0;
 i27 = 0;
 do {
  i31 = HEAP32[i24 >> 2] | 0;
  i28 = HEAP32[i31 + (i27 * 56 | 0) + 4 >> 2] | 0;
  if ((i28 | 0) > 0) {
   i29 = i27 & 65535;
   i35 = 0;
   while (1) {
    i30 = i35 + 1 | 0;
    i42 = HEAP32[i31 + (i27 * 56 | 0) + 12 >> 2] | 0;
    i35 = HEAP32[i42 + (i35 << 2) >> 2] & 65535;
    i36 = HEAP32[i42 + (((i30 | 0) == (i28 | 0) ? 0 : i30) << 2) >> 2] & 65535;
    HEAP16[i13 >> 1] = i35;
    HEAP16[i23 >> 1] = i36;
    if (i35 << 16 >> 16 < i36 << 16 >> 16) {
     HEAP16[i13 >> 1] = i36;
     HEAP16[i23 >> 1] = i35;
     i31 = i36;
    } else {
     i31 = i35;
     i35 = i36;
    }
    i36 = i31 << 16 >> 16;
    i37 = ((i35 & 65535) << 16) + i36 & (HEAP32[i12 >> 2] | 0) + -1;
    L13 : do {
     if (i37 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0 ? (i18 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i37 << 2) >> 2] | 0, !((i18 | 0) == -1)) : 0) {
      i37 = HEAP32[i10 >> 2] | 0;
      i41 = HEAP32[i9 >> 2] | 0;
      i42 = i18;
      while (1) {
       if (i31 << 16 >> 16 == (HEAP16[i37 + (i42 << 2) >> 1] | 0) ? i35 << 16 >> 16 == (HEAP16[i37 + (i42 << 2) + 2 >> 1] | 0) : 0) {
        break;
       }
       i42 = HEAP32[i41 + (i42 << 2) >> 2] | 0;
       if ((i42 | 0) == -1) {
        i31 = 0;
        break L13;
       }
      }
      if (!((i42 | 0) == -1)) {
       i31 = (HEAP32[i8 >> 2] | 0) + (i42 << 2) | 0;
      } else {
       i31 = 0;
      }
     } else {
      i31 = 0;
     }
    } while (0);
    i42 = i35 << 16 >> 16;
    i35 = HEAP32[i21 >> 2] | 0;
    d32 = +HEAPF32[i35 + (i42 << 4) >> 2] - +HEAPF32[i35 + (i36 << 4) >> 2];
    d34 = +HEAPF32[i35 + (i42 << 4) + 4 >> 2] - +HEAPF32[i35 + (i36 << 4) + 4 >> 2];
    d40 = +HEAPF32[i35 + (i42 << 4) + 8 >> 2] - +HEAPF32[i35 + (i36 << 4) + 8 >> 2];
    d33 = 1.0 / +Math_sqrt(+(d32 * d32 + d34 * d34 + d40 * d40));
    d32 = d32 * d33;
    d34 = d34 * d33;
    d33 = d40 * d33;
    i35 = HEAP32[i22 >> 2] | 0;
    L24 : do {
     if ((i35 | 0) > 0) {
      i36 = HEAP32[i20 >> 2] | 0;
      i37 = 0;
      while (1) {
       d38 = +HEAPF32[i36 + (i37 << 4) >> 2];
       d39 = +HEAPF32[i36 + (i37 << 4) + 8 >> 2];
       d40 = d39 - d33;
       if ((!(+Math_abs(+(d38 - d32)) > 1.0e-6) ? !(+Math_abs(+(+HEAPF32[i36 + (i37 << 4) + 4 >> 2] - d34)) > 1.0e-6) : 0) ? !(+Math_abs(+d40) > 1.0e-6) : 0) {
        break L24;
       }
       d39 = d33 + d39;
       if ((!(+Math_abs(+(d32 + d38)) > 1.0e-6) ? !(+Math_abs(+(d34 + +HEAPF32[i36 + (i37 << 4) + 4 >> 2])) > 1.0e-6) : 0) ? !(+Math_abs(+d39) > 1.0e-6) : 0) {
        break L24;
       }
       i37 = i37 + 1 | 0;
       if ((i37 | 0) >= (i35 | 0)) {
        i16 = 26;
        break;
       }
      }
     } else {
      i16 = 26;
     }
    } while (0);
    if ((i16 | 0) == 26) {
     i16 = 0;
     if ((i35 | 0) == (HEAP32[i15 >> 2] | 0) ? (i17 = (i35 | 0) == 0 ? 1 : i35 << 1, (i35 | 0) < (i17 | 0)) : 0) {
      if ((i17 | 0) == 0) {
       i36 = 0;
      } else {
       i36 = __Z22btAlignedAllocInternalji(i17 << 4, 16) | 0;
       i35 = HEAP32[i22 >> 2] | 0;
      }
      if ((i35 | 0) > 0) {
       i37 = 0;
       do {
        i41 = i36 + (i37 << 4) | 0;
        if ((i41 | 0) != 0) {
         i42 = (HEAP32[i20 >> 2] | 0) + (i37 << 4) | 0;
         HEAP32[i41 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
         HEAP32[i41 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
         HEAP32[i41 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
         HEAP32[i41 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
        }
        i37 = i37 + 1 | 0;
       } while ((i37 | 0) != (i35 | 0));
      }
      i35 = HEAP32[i20 >> 2] | 0;
      if ((i35 | 0) != 0) {
       if ((HEAP8[i26] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i35);
       }
       HEAP32[i20 >> 2] = 0;
      }
      HEAP8[i26] = 1;
      HEAP32[i20 >> 2] = i36;
      HEAP32[i15 >> 2] = i17;
      i35 = HEAP32[i22 >> 2] | 0;
     }
     i36 = HEAP32[i20 >> 2] | 0;
     i37 = i36 + (i35 << 4) | 0;
     if ((i37 | 0) != 0) {
      HEAPF32[i37 >> 2] = d32;
      HEAPF32[i36 + (i35 << 4) + 4 >> 2] = d34;
      HEAPF32[i36 + (i35 << 4) + 8 >> 2] = d33;
      HEAPF32[i36 + (i35 << 4) + 12 >> 2] = 0.0;
      i35 = HEAP32[i22 >> 2] | 0;
     }
     HEAP32[i22 >> 2] = i35 + 1;
    }
    if ((i31 | 0) == 0) {
     HEAP16[i19 >> 1] = -1;
     HEAP16[i25 >> 1] = i29;
     __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeE6insertERKS0_RKS1_(i1, i13, i25);
    } else {
     HEAP16[i31 + 2 >> 1] = i29;
    }
    if ((i30 | 0) >= (i28 | 0)) {
     break;
    }
    i31 = HEAP32[i24 >> 2] | 0;
    i35 = i30;
   }
   i29 = HEAP32[i7 >> 2] | 0;
  }
  i27 = i27 + 1 | 0;
 } while ((i27 | 0) < (i29 | 0));
 if ((i29 | 0) <= 0) {
  d39 = 0.0;
  d39 = 1.0 / d39;
  d40 = +HEAPF32[i3 >> 2];
  d40 = d39 * d40;
  HEAPF32[i3 >> 2] = d40;
  d40 = +HEAPF32[i2 >> 2];
  d40 = d39 * d40;
  HEAPF32[i2 >> 2] = d40;
  d40 = +HEAPF32[i5 >> 2];
  d40 = d39 * d40;
  HEAPF32[i5 >> 2] = d40;
  __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeED2Ev(i1);
  STACKTOP = i4;
  return;
 }
 i13 = i6 + 36 | 0;
 i12 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 i10 = HEAP32[i10 >> 2] | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[i8 >> 2] | 0;
 i14 = 0;
 do {
  i21 = HEAP32[i13 >> 2] | 0;
  i15 = HEAP32[i21 + (i14 * 56 | 0) + 4 >> 2] | 0;
  i16 = i21 + (i14 * 56 | 0) + 24 | 0;
  i17 = HEAP32[i16 >> 2] | 0;
  if ((i17 | 0) < (i15 | 0)) {
   i19 = i21 + (i14 * 56 | 0) + 28 | 0;
   if ((HEAP32[i19 >> 2] | 0) < (i15 | 0)) {
    if ((i15 | 0) == 0) {
     i20 = 0;
     i23 = i17;
    } else {
     i20 = __Z22btAlignedAllocInternalji(i15 << 2, 16) | 0;
     i23 = HEAP32[i16 >> 2] | 0;
    }
    i18 = i21 + (i14 * 56 | 0) + 32 | 0;
    if ((i23 | 0) > 0) {
     i22 = 0;
     do {
      i24 = i20 + (i22 << 2) | 0;
      if ((i24 | 0) != 0) {
       HEAP32[i24 >> 2] = HEAP32[(HEAP32[i18 >> 2] | 0) + (i22 << 2) >> 2];
      }
      i22 = i22 + 1 | 0;
     } while ((i22 | 0) != (i23 | 0));
    }
    i22 = HEAP32[i18 >> 2] | 0;
    i21 = i21 + (i14 * 56 | 0) + 36 | 0;
    if ((i22 | 0) != 0) {
     if ((HEAP8[i21] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i22);
     }
     HEAP32[i18 >> 2] = 0;
    }
    HEAP8[i21] = 1;
    HEAP32[i18 >> 2] = i20;
    HEAP32[i19 >> 2] = i15;
   } else {
    i20 = HEAP32[i21 + (i14 * 56 | 0) + 32 >> 2] | 0;
   }
   do {
    i18 = i20 + (i17 << 2) | 0;
    if ((i18 | 0) != 0) {
     HEAP32[i18 >> 2] = 0;
    }
    i17 = i17 + 1 | 0;
   } while ((i17 | 0) != (i15 | 0));
  }
  HEAP32[i16 >> 2] = i15;
  if ((i15 | 0) > 0) {
   i16 = HEAP32[i13 >> 2] | 0;
   i18 = HEAP32[i16 + (i14 * 56 | 0) + 12 >> 2] | 0;
   i17 = 0;
   while (1) {
    i19 = i17 + 1 | 0;
    i21 = HEAP32[i18 + (i17 << 2) >> 2] & 65535;
    i22 = HEAP32[i18 + (((i19 | 0) == (i15 | 0) ? 0 : i19) << 2) >> 2] & 65535;
    i23 = i21 << 16 >> 16 < i22 << 16 >> 16;
    i20 = i23 ? i21 : i22;
    i22 = i23 ? i22 : i21;
    i21 = i11 + ((((i20 & 65535) << 16) + (i22 << 16 >> 16) & i12) << 2) | 0;
    while (1) {
     i21 = HEAP32[i21 >> 2] | 0;
     if (i22 << 16 >> 16 == (HEAP16[i10 + (i21 << 2) >> 1] | 0) ? i20 << 16 >> 16 == (HEAP16[i10 + (i21 << 2) + 2 >> 1] | 0) : 0) {
      break;
     }
     i21 = i9 + (i21 << 2) | 0;
    }
    i20 = HEAP16[i8 + (i21 << 2) >> 1] | 0;
    if ((i20 << 16 >> 16 | 0) == (i14 | 0)) {
     i20 = HEAP16[i8 + (i21 << 2) + 2 >> 1] | 0;
    }
    HEAP32[(HEAP32[i16 + (i14 * 56 | 0) + 32 >> 2] | 0) + (i17 << 2) >> 2] = i20 << 16 >> 16;
    if ((i19 | 0) == (i15 | 0)) {
     break;
    } else {
     i17 = i19;
    }
   }
  }
  i14 = i14 + 1 | 0;
  i15 = HEAP32[i7 >> 2] | 0;
 } while ((i14 | 0) < (i15 | 0));
 if ((i15 | 0) <= 0) {
  d39 = 0.0;
  d39 = 1.0 / d39;
  d40 = +HEAPF32[i3 >> 2];
  d40 = d39 * d40;
  HEAPF32[i3 >> 2] = d40;
  d40 = +HEAPF32[i2 >> 2];
  d40 = d39 * d40;
  HEAPF32[i2 >> 2] = d40;
  d40 = +HEAPF32[i5 >> 2];
  d40 = d39 * d40;
  HEAPF32[i5 >> 2] = d40;
  __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeED2Ev(i1);
  STACKTOP = i4;
  return;
 }
 i8 = i6 + 36 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i6 = i6 + 16 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 d32 = 0.0;
 i10 = 0;
 do {
  i16 = HEAP32[i7 + (i10 * 56 | 0) + 4 >> 2] | 0;
  i17 = HEAP32[HEAP32[i7 + (i10 * 56 | 0) + 12 >> 2] >> 2] | 0;
  if ((i16 + -2 | 0) >= 1) {
   i14 = HEAP32[(HEAP32[i8 >> 2] | 0) + (i10 * 56 | 0) + 12 >> 2] | 0;
   i13 = HEAP32[i6 >> 2] | 0;
   i11 = i9 + (i17 << 4) | 0;
   i12 = i9 + (i17 << 4) + 4 | 0;
   i18 = i9 + (i17 << 4) + 8 | 0;
   i17 = i16 + -1 | 0;
   i20 = 1;
   while (1) {
    i19 = i20 + 1 | 0;
    i41 = HEAP32[i14 + (i20 << 2) >> 2] | 0;
    i42 = HEAP32[i14 + (((i19 | 0) % (i16 | 0) | 0) << 2) >> 2] | 0;
    d47 = +HEAPF32[i11 >> 2];
    d46 = +HEAPF32[i13 + (i41 << 4) >> 2];
    d52 = d47 - d46;
    d44 = +HEAPF32[i12 >> 2];
    d43 = +HEAPF32[i13 + (i41 << 4) + 4 >> 2];
    d50 = d44 - d43;
    d34 = +HEAPF32[i18 >> 2];
    d38 = +HEAPF32[i13 + (i41 << 4) + 8 >> 2];
    d53 = d34 - d38;
    d45 = +HEAPF32[i13 + (i42 << 4) >> 2];
    d49 = d47 - d45;
    d33 = +HEAPF32[i13 + (i42 << 4) + 4 >> 2];
    d51 = d44 - d33;
    d39 = +HEAPF32[i13 + (i42 << 4) + 8 >> 2];
    d40 = d34 - d39;
    d48 = d50 * d40 - d53 * d51;
    d40 = d53 * d49 - d52 * d40;
    d49 = d52 * d51 - d50 * d49;
    d40 = +Math_sqrt(+(d49 * d49 + (d48 * d48 + d40 * d40))) * .5;
    HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + (d47 + d46 + d45) * .3333333432674408 * d40;
    HEAPF32[i2 >> 2] = (d44 + d43 + d33) * .3333333432674408 * d40 + +HEAPF32[i2 >> 2];
    HEAPF32[i5 >> 2] = d40 * (d34 + d38 + d39) * .3333333432674408 + +HEAPF32[i5 >> 2];
    d32 = d32 + d40;
    if ((i19 | 0) == (i17 | 0)) {
     break;
    } else {
     i20 = i19;
    }
   }
  }
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) < (i15 | 0));
 d52 = 1.0 / d32;
 d53 = +HEAPF32[i3 >> 2];
 d53 = d52 * d53;
 HEAPF32[i3 >> 2] = d53;
 d53 = +HEAPF32[i2 >> 2];
 d53 = d52 * d53;
 HEAPF32[i2 >> 2] = d53;
 d53 = +HEAPF32[i5 >> 2];
 d53 = d52 * d53;
 HEAPF32[i5 >> 2] = d53;
 __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeED2Ev(i1);
 STACKTOP = i4;
 return;
}
function __ZN17btHingeConstraint32getInfo2InternalUsingFrameOffsetEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_(i1, i5, i25, i49, i3, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i25 = i25 | 0;
 i49 = i49 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, i50 = 0, i51 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i24 = i2 + 128 | 0;
 i8 = i2 + 64 | 0;
 i6 = i2 + 48 | 0;
 i22 = i2 + 32 | 0;
 i18 = i2 + 16 | 0;
 i19 = i2;
 i7 = i5 + 24 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 __ZNK11btTransformmlERKS_(i24, i25, i1 + 544 | 0);
 __ZNK11btTransformmlERKS_(i8, i49, i1 + 608 | 0);
 i41 = i8 + 48 | 0;
 i42 = i24 + 48 | 0;
 d20 = +HEAPF32[i41 >> 2] - +HEAPF32[i42 >> 2];
 i29 = i8 + 52 | 0;
 i30 = i24 + 52 | 0;
 d21 = +HEAPF32[i29 >> 2] - +HEAPF32[i30 >> 2];
 i50 = i8 + 56 | 0;
 i40 = i24 + 56 | 0;
 d17 = +HEAPF32[i50 >> 2] - +HEAPF32[i40 >> 2];
 d12 = +HEAPF32[(HEAP32[i1 + 24 >> 2] | 0) + 336 >> 2];
 d11 = +HEAPF32[(HEAP32[i1 + 28 >> 2] | 0) + 336 >> 2];
 if (d12 < 1.1920928955078125e-7) {
  i26 = 1;
 } else {
  i26 = d11 < 1.1920928955078125e-7;
 }
 d12 = d12 + d11;
 if (d12 > 0.0) {
  d28 = d11 / d12;
 } else {
  d28 = .5;
 }
 d27 = 1.0 - d28;
 d14 = +HEAPF32[i24 + 8 >> 2];
 d13 = +HEAPF32[i24 + 24 >> 2];
 d11 = +HEAPF32[i24 + 40 >> 2];
 d12 = +HEAPF32[i8 + 8 >> 2];
 d15 = +HEAPF32[i8 + 24 >> 2];
 d16 = +HEAPF32[i8 + 40 >> 2];
 d39 = d28 * d14 + d27 * d12;
 d37 = d28 * d13 + d27 * d15;
 d47 = d28 * d11 + d27 * d16;
 i9 = i6 + 4 | 0;
 i8 = i6 + 8 | 0;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 d46 = 1.0 / +Math_sqrt(+(d39 * d39 + d37 * d37 + d47 * d47));
 d39 = d39 * d46;
 HEAPF32[i6 >> 2] = d39;
 d37 = d37 * d46;
 HEAPF32[i9 >> 2] = d37;
 d46 = d47 * d46;
 HEAPF32[i8 >> 2] = d46;
 i23 = i10 << 1;
 d47 = +HEAPF32[i41 >> 2] - +HEAPF32[i49 + 48 >> 2];
 d48 = +HEAPF32[i29 >> 2] - +HEAPF32[i49 + 52 >> 2];
 d32 = +HEAPF32[i50 >> 2] - +HEAPF32[i49 + 56 >> 2];
 d36 = d47 * d39 + d48 * d37 + d32 * d46;
 d35 = d39 * d36;
 d34 = d37 * d36;
 d36 = d46 * d36;
 d47 = d47 - d35;
 d48 = d48 - d34;
 d32 = d32 - d36;
 d33 = +HEAPF32[i42 >> 2] - +HEAPF32[i25 + 48 >> 2];
 d31 = +HEAPF32[i30 >> 2] - +HEAPF32[i25 + 52 >> 2];
 d43 = +HEAPF32[i40 >> 2] - +HEAPF32[i25 + 56 >> 2];
 d38 = d39 * d33 + d37 * d31 + d46 * d43;
 d39 = d39 * d38;
 d37 = d37 * d38;
 d38 = d46 * d38;
 d33 = d33 - d39;
 d31 = d31 - d37;
 d43 = d43 - d38;
 d35 = d39 - d35;
 d34 = d37 - d34;
 d36 = d38 - d36;
 d38 = d33 + d28 * d35;
 d37 = d31 + d28 * d34;
 d39 = d43 + d28 * d36;
 d35 = d47 - d27 * d35;
 d34 = d48 - d27 * d34;
 d36 = d32 - d27 * d36;
 d33 = d28 * d47 + d27 * d33;
 d31 = d28 * d48 + d27 * d31;
 d43 = d28 * d32 + d27 * d43;
 HEAPF32[i18 >> 2] = d33;
 i30 = i18 + 4 | 0;
 HEAPF32[i30 >> 2] = d31;
 i29 = i18 + 8 | 0;
 HEAPF32[i29 >> 2] = d43;
 i25 = i18 + 12 | 0;
 HEAPF32[i25 >> 2] = 0.0;
 d32 = d33 * d33 + d31 * d31 + d43 * d43;
 if (d32 > 1.1920928955078125e-7) {
  d48 = 1.0 / +Math_sqrt(+d32);
  d33 = d33 * d48;
  HEAPF32[i18 >> 2] = d33;
  d32 = d48 * d31;
  HEAPF32[i30 >> 2] = d32;
  d31 = d48 * d43;
  HEAPF32[i29 >> 2] = d31;
 } else {
  d33 = +HEAPF32[i24 + 4 >> 2];
  d32 = +HEAPF32[i24 + 20 >> 2];
  d31 = +HEAPF32[i24 + 36 >> 2];
  HEAPF32[i18 >> 2] = d33;
  HEAPF32[i30 >> 2] = d32;
  HEAPF32[i29 >> 2] = d31;
  HEAPF32[i25 >> 2] = 0.0;
 }
 d47 = +HEAPF32[i9 >> 2];
 d45 = +HEAPF32[i8 >> 2];
 d46 = d47 * d31 - d45 * d32;
 d44 = +HEAPF32[i6 >> 2];
 d45 = d45 * d33 - d31 * d44;
 d47 = d32 * d44 - d47 * d33;
 HEAPF32[i19 >> 2] = d46;
 i50 = i19 + 4 | 0;
 HEAPF32[i50 >> 2] = d45;
 i49 = i19 + 8 | 0;
 HEAPF32[i49 >> 2] = d47;
 HEAPF32[i19 + 12 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = d37 * d31 - d39 * d32;
 i41 = i22 + 4 | 0;
 HEAPF32[i41 >> 2] = d39 * d33 - d38 * d31;
 i40 = i22 + 8 | 0;
 HEAPF32[i40 >> 2] = d38 * d32 - d37 * d33;
 i42 = i22 + 12 | 0;
 d44 = d34 * d31 - d36 * d32;
 d31 = d36 * d33 - d35 * d31;
 d48 = d35 * d32 - d34 * d33;
 i25 = i5 + 12 | 0;
 i24 = HEAP32[i25 >> 2] | 0;
 HEAP32[i24 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i24 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i24 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 i24 = i5 + 20 | 0;
 i51 = HEAP32[i24 >> 2] | 0;
 HEAPF32[i51 >> 2] = -d44;
 HEAPF32[i51 + 4 >> 2] = -d31;
 HEAPF32[i51 + 8 >> 2] = -d48;
 d48 = d37 * d47 - d39 * d45;
 d47 = d39 * d46 - d38 * d47;
 d46 = d38 * d45 - d37 * d46;
 HEAPF32[i22 >> 2] = d48;
 HEAPF32[i41 >> 2] = d47;
 HEAPF32[i40 >> 2] = d46;
 HEAPF32[i42 >> 2] = 0.0;
 d33 = +HEAPF32[i49 >> 2];
 d31 = +HEAPF32[i50 >> 2];
 d45 = d34 * d33 - d36 * d31;
 d32 = +HEAPF32[i19 >> 2];
 d44 = d36 * d32 - d35 * d33;
 d43 = d35 * d31 - d34 * d32;
 if (i26 ? (HEAP8[i1 + 708 | 0] | 0) != 0 : 0) {
  HEAPF32[i22 >> 2] = d28 * d48;
  HEAPF32[i41 >> 2] = d28 * d47;
  HEAPF32[i40 >> 2] = d28 * d46;
  d45 = d27 * d45;
  d44 = d27 * d44;
  d43 = d27 * d43;
 }
 i51 = (HEAP32[i25 >> 2] | 0) + (i10 << 2) | 0;
 HEAP32[i51 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i51 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i51 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 i51 = HEAP32[i24 >> 2] | 0;
 HEAPF32[i51 + (i10 << 2) >> 2] = -d45;
 HEAPF32[i51 + (i10 + 1 << 2) >> 2] = -d44;
 HEAPF32[i51 + (i10 + 2 << 2) >> 2] = -d43;
 d43 = +HEAPF32[i8 >> 2];
 d45 = +HEAPF32[i9 >> 2];
 d46 = d37 * d43 - d39 * d45;
 d44 = +HEAPF32[i6 >> 2];
 d39 = d39 * d44 - d38 * d43;
 d37 = d38 * d45 - d37 * d44;
 HEAPF32[i22 >> 2] = d46;
 HEAPF32[i41 >> 2] = d39;
 HEAPF32[i40 >> 2] = d37;
 HEAPF32[i42 >> 2] = 0.0;
 d38 = d34 * d43 - d36 * d45;
 d36 = d36 * d44 - d35 * d43;
 d34 = d35 * d45 - d34 * d44;
 if (i26) {
  HEAPF32[i22 >> 2] = d28 * d46;
  HEAPF32[i41 >> 2] = d28 * d39;
  HEAPF32[i40 >> 2] = d28 * d37;
  d38 = d27 * d38;
  d36 = d27 * d36;
  d34 = d27 * d34;
 }
 i40 = i10 << 1;
 i26 = (HEAP32[i25 >> 2] | 0) + (i40 << 2) | 0;
 HEAP32[i26 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 i26 = HEAP32[i24 >> 2] | 0;
 HEAPF32[i26 + (i23 << 2) >> 2] = -d38;
 HEAPF32[i26 + ((i23 | 1) << 2) >> 2] = -d36;
 HEAPF32[i26 + (i23 + 2 << 2) >> 2] = -d34;
 i22 = i5 + 4 | 0;
 d27 = +HEAPF32[i5 >> 2] * +HEAPF32[i22 >> 2];
 if ((HEAP8[i1 + 728 | 0] | 0) == 0) {
  i26 = i5 + 8 | 0;
  i51 = HEAP32[i26 >> 2] | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  i51 = (HEAP32[i26 >> 2] | 0) + (i10 << 2) | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
  i26 = (HEAP32[i26 >> 2] | 0) + (i40 << 2) | 0;
  HEAP32[i26 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
  HEAP32[i26 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i26 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  d46 = +HEAPF32[i18 >> 2];
  d47 = +HEAPF32[i30 >> 2];
  d48 = +HEAPF32[i29 >> 2];
  i18 = HEAP32[i5 + 28 >> 2] | 0;
  HEAPF32[i18 >> 2] = d27 * (d20 * d46 + d21 * d47 + d17 * d48);
  HEAPF32[i18 + (i10 << 2) >> 2] = d27 * (d20 * d32 + d21 * d31 + d17 * d33);
  HEAPF32[i18 + (i23 << 2) >> 2] = d27 * (d20 * d44 + d21 * d45 + d17 * d43);
  d17 = d46;
  d20 = d47;
  d21 = d48;
  i26 = HEAP32[i24 >> 2] | 0;
 } else {
  d17 = +HEAPF32[i18 >> 2];
  d20 = +HEAPF32[i30 >> 2];
  d21 = +HEAPF32[i29 >> 2];
  i18 = HEAP32[i5 + 28 >> 2] | 0;
 }
 i50 = i10 * 3 | 0;
 i51 = i10 << 2;
 i40 = HEAP32[i25 >> 2] | 0;
 HEAPF32[i40 + (i50 << 2) >> 2] = d17;
 i41 = i50 + 1 | 0;
 HEAPF32[i40 + (i41 << 2) >> 2] = d20;
 i42 = i50 + 2 | 0;
 HEAPF32[i40 + (i42 << 2) >> 2] = d21;
 HEAPF32[i40 + (i51 << 2) >> 2] = d32;
 i49 = i51 | 1;
 HEAPF32[i40 + (i49 << 2) >> 2] = d31;
 i10 = i51 | 2;
 HEAPF32[i40 + (i10 << 2) >> 2] = d33;
 HEAPF32[i26 + (i50 << 2) >> 2] = -d17;
 HEAPF32[i26 + (i41 << 2) >> 2] = -d20;
 HEAPF32[i26 + (i42 << 2) >> 2] = -d21;
 HEAPF32[i26 + (i51 << 2) >> 2] = -d32;
 HEAPF32[i26 + (i49 << 2) >> 2] = -d31;
 HEAPF32[i26 + (i10 << 2) >> 2] = -d33;
 d45 = +HEAPF32[i5 >> 2] * +HEAPF32[i22 >> 2];
 d46 = d13 * d16 - d11 * d15;
 d47 = d11 * d12 - d14 * d16;
 d48 = d14 * d15 - d13 * d12;
 i10 = i5 + 28 | 0;
 HEAPF32[i18 + (i50 << 2) >> 2] = d45 * (d46 * d17 + d47 * d20 + d48 * d21);
 HEAPF32[i18 + (i51 << 2) >> 2] = d45 * (d46 * d32 + d47 * d31 + d48 * d33);
 if ((HEAP8[i1 + 708 | 0] | 0) == 0) {
  i23 = (HEAP8[i1 + 729 | 0] | 0) == 0;
  if (i23) {
   STACKTOP = i2;
   return;
  } else {
   i19 = 0;
   i18 = 0;
   d11 = 0.0;
  }
 } else {
  d11 = +HEAPF32[i1 + 700 >> 2] * +HEAPF32[i1 + 724 >> 2];
  i19 = 1;
  i23 = (HEAP8[i1 + 729 | 0] | 0) == 0;
  i18 = d11 > 0.0 ? 1 : 2;
 }
 i7 = (HEAP32[i7 >> 2] | 0) * 5 | 0;
 d12 = +HEAPF32[i6 >> 2];
 i51 = HEAP32[i25 >> 2] | 0;
 HEAPF32[i51 + (i7 << 2) >> 2] = d12;
 d13 = +HEAPF32[i9 >> 2];
 i9 = i7 + 1 | 0;
 HEAPF32[i51 + (i9 << 2) >> 2] = d13;
 d14 = +HEAPF32[i8 >> 2];
 i6 = i7 + 2 | 0;
 HEAPF32[i51 + (i6 << 2) >> 2] = d14;
 i24 = HEAP32[i24 >> 2] | 0;
 HEAPF32[i24 + (i7 << 2) >> 2] = -d12;
 HEAPF32[i24 + (i9 << 2) >> 2] = -d13;
 HEAPF32[i24 + (i6 << 2) >> 2] = -d14;
 i6 = i1 + 680 | 0;
 d16 = +__ZNK14btAngularLimit6getLowEv(i6);
 d17 = +__ZNK14btAngularLimit7getHighEv(i6);
 i6 = d16 == d17;
 i24 = HEAP32[i10 >> 2] | 0;
 HEAPF32[i24 + (i7 << 2) >> 2] = 0.0;
 i8 = i1 + 740 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 d15 = +HEAPF32[((i9 & 2 | 0) == 0 ? i22 : i1 + 752 | 0) >> 2];
 if (!(i19 & i6 | i23)) {
  if ((i9 & 4 | 0) != 0) {
   HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i7 << 2) >> 2] = +HEAPF32[i1 + 744 >> 2];
  }
  i50 = i1 + 672 | 0;
  d48 = +__ZN17btTypedConstraint14getMotorFactorEfffff(i1, +HEAPF32[i1 + 720 >> 2], d16, d17, +HEAPF32[i50 >> 2], d15 * +HEAPF32[i5 >> 2]);
  i24 = HEAP32[i10 >> 2] | 0;
  i51 = i24 + (i7 << 2) | 0;
  HEAPF32[i51 >> 2] = d48 * +HEAPF32[i50 >> 2] * +HEAPF32[i1 + 724 >> 2] + +HEAPF32[i51 >> 2];
  i51 = i1 + 676 | 0;
  HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i7 << 2) >> 2] = -+HEAPF32[i51 >> 2];
  HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i7 << 2) >> 2] = +HEAPF32[i51 >> 2];
 }
 if (!i19) {
  STACKTOP = i2;
  return;
 }
 i9 = i24 + (i7 << 2) | 0;
 HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] + d11 * d15 * +HEAPF32[i5 >> 2];
 if ((HEAP32[i8 >> 2] & 1 | 0) != 0) {
  HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i7 << 2) >> 2] = +HEAPF32[i1 + 748 >> 2];
 }
 do {
  if (!i6) {
   i6 = (HEAP32[i5 + 36 >> 2] | 0) + (i7 << 2) | 0;
   if ((i18 | 0) == 1) {
    HEAPF32[i6 >> 2] = 0.0;
    HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i7 << 2) >> 2] = 3.4028234663852886e+38;
    break;
   } else {
    HEAPF32[i6 >> 2] = -3.4028234663852886e+38;
    HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i7 << 2) >> 2] = 0.0;
    break;
   }
  } else {
   HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i7 << 2) >> 2] = -3.4028234663852886e+38;
   HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i7 << 2) >> 2] = 3.4028234663852886e+38;
  }
 } while (0);
 d11 = +HEAPF32[i1 + 696 >> 2];
 do {
  if (d11 > 0.0) {
   d12 = +HEAPF32[i3 >> 2] * d12 + +HEAPF32[i3 + 4 >> 2] * d13 + +HEAPF32[i3 + 8 >> 2] * d14 - (d12 * +HEAPF32[i4 >> 2] + d13 * +HEAPF32[i4 + 4 >> 2] + d14 * +HEAPF32[i4 + 8 >> 2]);
   if ((i18 | 0) == 1) {
    if (!(d12 < 0.0)) {
     break;
    }
    d11 = -(d11 * d12);
    if (!(+HEAPF32[i9 >> 2] < d11)) {
     break;
    }
    HEAPF32[i9 >> 2] = d11;
    break;
   } else {
    if (!(d12 > 0.0)) {
     break;
    }
    d11 = -(d11 * d12);
    if (!(+HEAPF32[i9 >> 2] > d11)) {
     break;
    }
    HEAPF32[i9 >> 2] = d11;
    break;
   }
  }
 } while (0);
 HEAPF32[i9 >> 2] = +HEAPF32[i1 + 692 >> 2] * +HEAPF32[i9 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN28btCompoundCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i20, i7, i8, i21, i27) {
 i20 = i20 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i21 = i21 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0, d73 = 0.0, i74 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i3 + 280 | 0;
 i18 = i3 + 256 | 0;
 i15 = i3 + 240 | 0;
 i17 = i3 + 224 | 0;
 i16 = i3 + 160 | 0;
 i14 = i3 + 128 | 0;
 i2 = i3 + 64 | 0;
 i4 = i3 + 48 | 0;
 i6 = i3 + 32 | 0;
 i1 = i3 + 16 | 0;
 i5 = i3;
 i9 = (HEAP8[i20 + 28 | 0] | 0) != 0;
 i10 = i9 ? i8 : i7;
 i9 = i9 ? i7 : i8;
 i12 = HEAP32[i10 + 192 >> 2] | 0;
 i13 = i20 + 12 | 0;
 if ((HEAP32[i12 + 68 >> 2] | 0) != (HEAP32[i20 + 40 >> 2] | 0)) {
  i19 = HEAP32[i13 >> 2] | 0;
  if ((i19 | 0) > 0) {
   i23 = i20 + 20 | 0;
   i25 = i20 + 4 | 0;
   i24 = 0;
   do {
    i22 = HEAP32[(HEAP32[i23 >> 2] | 0) + (i24 << 2) >> 2] | 0;
    if ((i22 | 0) != 0) {
     FUNCTION_TABLE_vi[HEAP32[HEAP32[i22 >> 2] >> 2] & 255](i22);
     i49 = HEAP32[i25 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i49 >> 2] | 0) + 60 >> 2] & 127](i49, HEAP32[(HEAP32[i23 >> 2] | 0) + (i24 << 2) >> 2] | 0);
    }
    i24 = i24 + 1 | 0;
   } while ((i24 | 0) != (i19 | 0));
  }
  __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEP17btCollisionObjectS1_(i20, i7, i8);
 }
 i19 = HEAP32[i12 + 64 >> 2] | 0;
 i8 = i20 + 4 | 0;
 i22 = HEAP32[i8 >> 2] | 0;
 i7 = i20 + 20 | 0;
 i28 = HEAP32[i7 >> 2] | 0;
 i23 = HEAP32[i20 + 32 >> 2] | 0;
 HEAP32[i11 >> 2] = 458392;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP32[i11 + 8 >> 2] = i9;
 HEAP32[i11 + 12 >> 2] = i22;
 HEAP32[i11 + 16 >> 2] = i21;
 HEAP32[i11 + 20 >> 2] = i27;
 HEAP32[i11 + 24 >> 2] = i28;
 HEAP32[i11 + 28 >> 2] = i23;
 i23 = i18 + 16 | 0;
 HEAP8[i23] = 1;
 i22 = i18 + 12 | 0;
 HEAP32[i22 >> 2] = 0;
 i21 = i18 + 4 | 0;
 HEAP32[i21 >> 2] = 0;
 i20 = i18 + 8 | 0;
 HEAP32[i20 >> 2] = 0;
 i29 = HEAP32[i13 >> 2] | 0;
 if ((i29 | 0) > 0) {
  i26 = i27 + 4 | 0;
  i24 = i27 + 136 | 0;
  i25 = i27 + 8 | 0;
  i27 = i27 + 72 | 0;
  i30 = i28;
  i28 = 0;
  while (1) {
   i30 = HEAP32[i30 + (i28 << 2) >> 2] | 0;
   if ((i30 | 0) != 0) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i30 >> 2] | 0) + 16 >> 2] & 127](i30, i18);
    i29 = HEAP32[i21 >> 2] | 0;
    if ((i29 | 0) > 0) {
     i30 = 0;
     do {
      i31 = HEAP32[(HEAP32[i22 >> 2] | 0) + (i30 << 2) >> 2] | 0;
      if ((HEAP32[i31 + 1116 >> 2] | 0) != 0) {
       HEAP32[i26 >> 2] = i31;
       if ((HEAP32[i31 + 1108 >> 2] | 0) == (HEAP32[i24 >> 2] | 0)) {
        __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i31, i25, i27);
       } else {
        __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i31, i27, i25);
       }
       HEAP32[i26 >> 2] = 0;
       i29 = HEAP32[i21 >> 2] | 0;
      }
      i30 = i30 + 1 | 0;
     } while ((i30 | 0) < (i29 | 0));
    }
    if ((i29 | 0) < 0) {
     if ((HEAP32[i20 >> 2] | 0) < 0) {
      i30 = HEAP32[i22 >> 2] | 0;
      if ((i29 | 0) > 0) {
       i31 = 0;
       do {
        if ((i31 | 0) != 0) {
         HEAP32[0 + (i31 << 2) >> 2] = HEAP32[i30 + (i31 << 2) >> 2];
        }
        i31 = i31 + 1 | 0;
       } while ((i31 | 0) != (i29 | 0));
      }
      if ((i30 | 0) != 0) {
       if ((HEAP8[i23] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i30);
       }
       HEAP32[i22 >> 2] = 0;
      }
      HEAP8[i23] = 1;
      HEAP32[i22 >> 2] = 0;
      HEAP32[i20 >> 2] = 0;
     }
     do {
      i30 = (HEAP32[i22 >> 2] | 0) + (i29 << 2) | 0;
      if ((i30 | 0) != 0) {
       HEAP32[i30 >> 2] = 0;
      }
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) != 0);
    }
    HEAP32[i21 >> 2] = 0;
    i29 = HEAP32[i13 >> 2] | 0;
   }
   i28 = i28 + 1 | 0;
   if ((i28 | 0) >= (i29 | 0)) {
    break;
   }
   i30 = HEAP32[i7 >> 2] | 0;
  }
  i18 = HEAP32[i22 >> 2] | 0;
  if ((i18 | 0) != 0) {
   if ((HEAP8[i23] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i18);
   }
   HEAP32[i22 >> 2] = 0;
  }
 }
 HEAP8[i23] = 1;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 if ((i19 | 0) == 0) {
  i15 = HEAP32[i13 >> 2] | 0;
  if ((i15 | 0) > 0) {
   i14 = i12 + 24 | 0;
   i16 = 0;
   do {
    __ZN22btCompoundLeafCallback17ProcessChildShapeEP16btCollisionShapei(i11, HEAP32[(HEAP32[i14 >> 2] | 0) + (i16 * 80 | 0) + 64 >> 2] | 0, i16);
    i16 = i16 + 1 | 0;
   } while ((i16 | 0) < (i15 | 0));
  } else {
   STACKTOP = i3;
   return;
  }
 } else {
  d64 = +HEAPF32[i10 + 4 >> 2];
  d63 = +HEAPF32[i10 + 20 >> 2];
  d62 = +HEAPF32[i10 + 36 >> 2];
  d61 = +HEAPF32[i10 + 8 >> 2];
  d60 = +HEAPF32[i10 + 24 >> 2];
  d59 = +HEAPF32[i10 + 40 >> 2];
  d55 = +HEAPF32[i10 + 12 >> 2];
  d53 = +HEAPF32[i10 + 28 >> 2];
  d51 = +HEAPF32[i10 + 44 >> 2];
  d58 = -+HEAPF32[i10 + 52 >> 2];
  d57 = -+HEAPF32[i10 + 56 >> 2];
  d56 = -+HEAPF32[i10 + 60 >> 2];
  d73 = +HEAPF32[i9 + 4 >> 2];
  d72 = +HEAPF32[i9 + 20 >> 2];
  d71 = +HEAPF32[i9 + 36 >> 2];
  d70 = +HEAPF32[i9 + 8 >> 2];
  d69 = +HEAPF32[i9 + 24 >> 2];
  d68 = +HEAPF32[i9 + 40 >> 2];
  d67 = +HEAPF32[i9 + 12 >> 2];
  d66 = +HEAPF32[i9 + 28 >> 2];
  d65 = +HEAPF32[i9 + 44 >> 2];
  d54 = +HEAPF32[i9 + 52 >> 2];
  d52 = +HEAPF32[i9 + 56 >> 2];
  d50 = +HEAPF32[i9 + 60 >> 2];
  HEAPF32[i16 >> 2] = d64 * d73 + d63 * d72 + d62 * d71;
  HEAPF32[i16 + 4 >> 2] = d64 * d70 + d63 * d69 + d62 * d68;
  HEAPF32[i16 + 8 >> 2] = d64 * d67 + d63 * d66 + d62 * d65;
  HEAPF32[i16 + 12 >> 2] = 0.0;
  HEAPF32[i16 + 16 >> 2] = d61 * d73 + d60 * d72 + d59 * d71;
  HEAPF32[i16 + 20 >> 2] = d61 * d70 + d60 * d69 + d59 * d68;
  HEAPF32[i16 + 24 >> 2] = d61 * d67 + d60 * d66 + d59 * d65;
  HEAPF32[i16 + 28 >> 2] = 0.0;
  HEAPF32[i16 + 32 >> 2] = d55 * d73 + d53 * d72 + d51 * d71;
  HEAPF32[i16 + 36 >> 2] = d55 * d70 + d53 * d69 + d51 * d68;
  HEAPF32[i16 + 40 >> 2] = d55 * d67 + d53 * d66 + d51 * d65;
  HEAPF32[i16 + 44 >> 2] = 0.0;
  HEAPF32[i16 + 48 >> 2] = d64 * d58 + d63 * d57 + d62 * d56 + (d64 * d54 + d63 * d52 + d62 * d50);
  HEAPF32[i16 + 52 >> 2] = d61 * d58 + d60 * d57 + d59 * d56 + (d61 * d54 + d60 * d52 + d59 * d50);
  HEAPF32[i16 + 56 >> 2] = d55 * d58 + d53 * d57 + d51 * d56 + (d55 * d54 + d53 * d52 + d51 * d50);
  HEAPF32[i16 + 60 >> 2] = 0.0;
  i49 = HEAP32[i9 + 192 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i49 >> 2] | 0) + 8 >> 2] & 63](i49, i16, i15, i17);
  HEAP32[i14 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i14 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
  i49 = i14 + 16 | 0;
  HEAP32[i49 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i49 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i49 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i49 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
  __ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(0, HEAP32[i19 >> 2] | 0, i14, i11);
 }
 i11 = HEAP32[i13 >> 2] | 0;
 if ((i11 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i13 = i12 + 24 | 0;
 i12 = i10 + 4 | 0;
 i19 = i10 + 8 | 0;
 i18 = i10 + 12 | 0;
 i22 = i10 + 20 | 0;
 i23 = i10 + 24 | 0;
 i14 = i10 + 28 | 0;
 i15 = i10 + 36 | 0;
 i16 = i10 + 40 | 0;
 i17 = i10 + 44 | 0;
 i20 = i10 + 52 | 0;
 i21 = i10 + 56 | 0;
 i38 = i10 + 60 | 0;
 i10 = i2 + 4 | 0;
 i36 = i2 + 8 | 0;
 i35 = i2 + 12 | 0;
 i34 = i2 + 16 | 0;
 i33 = i2 + 20 | 0;
 i32 = i2 + 24 | 0;
 i31 = i2 + 28 | 0;
 i30 = i2 + 32 | 0;
 i37 = i2 + 36 | 0;
 i24 = i2 + 40 | 0;
 i25 = i2 + 44 | 0;
 i39 = i2 + 48 | 0;
 i29 = i2 + 52 | 0;
 i28 = i2 + 56 | 0;
 i27 = i2 + 60 | 0;
 i26 = i9 + 192 | 0;
 i47 = i9 + 4 | 0;
 i42 = i4 + 8 | 0;
 i43 = i5 + 8 | 0;
 i45 = i4 + 4 | 0;
 i46 = i5 + 4 | 0;
 i9 = i6 + 4 | 0;
 i44 = i1 + 4 | 0;
 i40 = i6 + 8 | 0;
 i41 = i1 + 8 | 0;
 i48 = 0;
 do {
  do {
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + (i48 << 2) >> 2] | 0) != 0) {
    i74 = HEAP32[i13 >> 2] | 0;
    i49 = HEAP32[i74 + (i48 * 80 | 0) + 64 >> 2] | 0;
    d53 = +HEAPF32[i12 >> 2];
    d54 = +HEAPF32[i19 >> 2];
    d55 = +HEAPF32[i18 >> 2];
    d56 = +HEAPF32[i22 >> 2];
    d57 = +HEAPF32[i23 >> 2];
    d58 = +HEAPF32[i14 >> 2];
    d65 = +HEAPF32[i15 >> 2];
    d67 = +HEAPF32[i16 >> 2];
    d69 = +HEAPF32[i17 >> 2];
    d59 = +HEAPF32[i74 + (i48 * 80 | 0) >> 2];
    d60 = +HEAPF32[i74 + (i48 * 80 | 0) + 16 >> 2];
    d61 = +HEAPF32[i74 + (i48 * 80 | 0) + 32 >> 2];
    d62 = +HEAPF32[i74 + (i48 * 80 | 0) + 4 >> 2];
    d63 = +HEAPF32[i74 + (i48 * 80 | 0) + 20 >> 2];
    d64 = +HEAPF32[i74 + (i48 * 80 | 0) + 36 >> 2];
    d66 = +HEAPF32[i74 + (i48 * 80 | 0) + 8 >> 2];
    d68 = +HEAPF32[i74 + (i48 * 80 | 0) + 24 >> 2];
    d70 = +HEAPF32[i74 + (i48 * 80 | 0) + 40 >> 2];
    d51 = +HEAPF32[i74 + (i48 * 80 | 0) + 48 >> 2];
    d52 = +HEAPF32[i74 + (i48 * 80 | 0) + 52 >> 2];
    d73 = +HEAPF32[i74 + (i48 * 80 | 0) + 56 >> 2];
    d71 = +HEAPF32[i20 >> 2] + (d53 * d51 + d54 * d52 + d55 * d73);
    d72 = +HEAPF32[i21 >> 2] + (d56 * d51 + d57 * d52 + d58 * d73);
    d73 = +HEAPF32[i38 >> 2] + (d65 * d51 + d67 * d52 + d69 * d73);
    HEAPF32[i2 >> 2] = d53 * d59 + d54 * d60 + d55 * d61;
    HEAPF32[i10 >> 2] = d53 * d62 + d54 * d63 + d55 * d64;
    HEAPF32[i36 >> 2] = d53 * d66 + d54 * d68 + d55 * d70;
    HEAPF32[i35 >> 2] = 0.0;
    HEAPF32[i34 >> 2] = d56 * d59 + d57 * d60 + d58 * d61;
    HEAPF32[i33 >> 2] = d56 * d62 + d57 * d63 + d58 * d64;
    HEAPF32[i32 >> 2] = d56 * d66 + d57 * d68 + d58 * d70;
    HEAPF32[i31 >> 2] = 0.0;
    HEAPF32[i30 >> 2] = d65 * d59 + d67 * d60 + d69 * d61;
    HEAPF32[i37 >> 2] = d65 * d62 + d67 * d63 + d69 * d64;
    HEAPF32[i24 >> 2] = d65 * d66 + d67 * d68 + d69 * d70;
    HEAPF32[i25 >> 2] = 0.0;
    HEAPF32[i39 >> 2] = d71;
    HEAPF32[i29 >> 2] = d72;
    HEAPF32[i28 >> 2] = d73;
    HEAPF32[i27 >> 2] = 0.0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i49 >> 2] | 0) + 8 >> 2] & 63](i49, i2, i4, i6);
    i49 = HEAP32[i26 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i49 >> 2] | 0) + 8 >> 2] & 63](i49, i47, i1, i5);
    if (!(+HEAPF32[i4 >> 2] > +HEAPF32[i5 >> 2]) ? !(+HEAPF32[i6 >> 2] < +HEAPF32[i1 >> 2]) : 0) {
     i49 = 1;
    } else {
     i49 = 0;
    }
    if (!(!(+HEAPF32[i42 >> 2] > +HEAPF32[i43 >> 2]) ? !(+HEAPF32[i40 >> 2] < +HEAPF32[i41 >> 2]) : 0)) {
     i49 = 0;
    }
    if (!(+HEAPF32[i45 >> 2] > +HEAPF32[i46 >> 2]) ? !(+HEAPF32[i9 >> 2] < +HEAPF32[i44 >> 2] | i49 ^ 1) : 0) {
     break;
    }
    i74 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i48 << 2) >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i74 >> 2] >> 2] & 255](i74);
    i74 = HEAP32[i8 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i74 >> 2] | 0) + 60 >> 2] & 127](i74, HEAP32[(HEAP32[i7 >> 2] | 0) + (i48 << 2) >> 2] | 0);
    HEAP32[(HEAP32[i7 >> 2] | 0) + (i48 << 2) >> 2] = 0;
   }
  } while (0);
  i48 = i48 + 1 | 0;
 } while ((i48 | 0) < (i11 | 0));
 STACKTOP = i3;
 return;
}
function __ZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackE(i11, i12, i17, i2, i4, i9) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, i22 = 0, d23 = 0.0, d24 = 0.0, i25 = 0, d26 = 0.0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1168 | 0;
 i3 = i1 + 992 | 0;
 i5 = i1 + 632 | 0;
 i22 = i1 + 576 | 0;
 i20 = i1 + 560 | 0;
 i25 = i1 + 528 | 0;
 i31 = i1 + 512 | 0;
 i33 = i1 + 496 | 0;
 i30 = i1 + 376 | 0;
 i10 = i1 + 360 | 0;
 i19 = i1 + 344 | 0;
 i6 = i1 + 224 | 0;
 i7 = i1 + 208 | 0;
 i8 = i1 + 192 | 0;
 i13 = i1 + 160 | 0;
 i16 = i1 + 144 | 0;
 i18 = i1 + 80 | 0;
 i14 = i1 + 64 | 0;
 i15 = i1;
 __ZN21btConvexInternalShapeC2Ev(i22);
 HEAP32[i22 >> 2] = 456848;
 HEAP32[i22 + 4 >> 2] = 8;
 HEAPF32[i22 + 28 >> 2] = 0.0;
 HEAPF32[i22 + 44 >> 2] = 0.0;
 i32 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i32 | 0) < 20) {
  HEAP32[i3 >> 2] = 450968;
  i6 = i3 + 164 | 0;
  HEAP32[i3 + 168 >> 2] = 0;
  HEAPF32[i3 + 172 >> 2] = 0.0;
  i7 = i9 + 4 | 0;
  HEAPF32[i6 >> 2] = +HEAPF32[i7 >> 2];
  HEAPF32[i5 + 308 >> 2] = 9999999747378752.0e-20;
  i33 = i5 + 332 | 0;
  HEAP8[i33] = HEAP8[i33] & -16;
  __ZN22btSubsimplexConvexCastC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolver(i20, i22, i2, i5);
  if ((__ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i20, i11, i12, i4, i4, i3) | 0 ? (i27 = i3 + 132 | 0, d24 = +HEAPF32[i27 >> 2], i28 = i3 + 136 | 0, d21 = +HEAPF32[i28 >> 2], i29 = i3 + 140 | 0, d26 = +HEAPF32[i29 >> 2], d24 * d24 + d21 * d21 + d26 * d26 > 9999999747378752.0e-20) : 0) ? (d23 = +HEAPF32[i6 >> 2], d23 < +HEAPF32[i7 >> 2]) : 0) {
   d35 = d24 * +HEAPF32[i11 >> 2] + d21 * +HEAPF32[i11 + 4 >> 2] + d26 * +HEAPF32[i11 + 8 >> 2];
   d34 = d24 * +HEAPF32[i11 + 16 >> 2] + d21 * +HEAPF32[i11 + 20 >> 2] + d26 * +HEAPF32[i11 + 24 >> 2];
   d24 = d24 * +HEAPF32[i11 + 32 >> 2] + d21 * +HEAPF32[i11 + 36 >> 2] + d26 * +HEAPF32[i11 + 40 >> 2];
   HEAPF32[i3 + 144 >> 2] = 0.0;
   d26 = 1.0 / +Math_sqrt(+(d35 * d35 + d34 * d34 + d24 * d24));
   HEAPF32[i27 >> 2] = d35 * d26;
   HEAPF32[i28 >> 2] = d34 * d26;
   HEAPF32[i29 >> 2] = d24 * d26;
   HEAP32[i25 >> 2] = i17;
   HEAP32[i25 + 4 >> 2] = 0;
   i33 = i25 + 8 | 0;
   HEAP32[i33 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
   HEAP32[i33 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
   HEAP32[i33 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
   HEAP32[i33 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
   HEAPF32[i25 + 24 >> 2] = d23;
   +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 7](i9, i25, 1);
  }
  STACKTOP = i1;
  return;
 }
 if (!((i32 + -21 | 0) >>> 0 < 9)) {
  if ((i32 | 0) != 31) {
   STACKTOP = i1;
   return;
  }
  i20 = HEAP32[i2 + 64 >> 2] | 0;
  HEAP32[i13 >> 2] = 450344;
  i6 = i13 + 4 | 0;
  HEAP32[i6 >> 2] = i17;
  i17 = i13 + 8 | 0;
  HEAP32[i17 >> 2] = i2;
  i19 = i13 + 12 | 0;
  HEAP32[i19 >> 2] = i4;
  i8 = i13 + 16 | 0;
  HEAP32[i8 >> 2] = i11;
  i10 = i13 + 20 | 0;
  HEAP32[i10 >> 2] = i12;
  i7 = i13 + 24 | 0;
  HEAP32[i7 >> 2] = i9;
  if ((i20 | 0) != 0) {
   __ZNK11btTransform12inverseTimesERKS_(i18, i4, i11);
   i33 = i18 + 48 | 0;
   HEAP32[i16 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i33 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i33 + 12 >> 2];
   __ZNK11btTransform12inverseTimesERKS_(i15, i4, i12);
   i33 = i15 + 48 | 0;
   HEAP32[i14 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
   HEAP32[i14 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
   HEAP32[i14 + 8 >> 2] = HEAP32[i33 + 8 >> 2];
   HEAP32[i14 + 12 >> 2] = HEAP32[i33 + 12 >> 2];
   __ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE(HEAP32[i20 >> 2] | 0, i16, i14, i13);
   STACKTOP = i1;
   return;
  }
  i9 = HEAP32[i2 + 16 >> 2] | 0;
  if ((i9 | 0) <= 0) {
   STACKTOP = i1;
   return;
  }
  i11 = i5 + 4 | 0;
  i12 = i5 + 8 | 0;
  i13 = i5 + 12 | 0;
  i14 = i5 + 14 | 0;
  i15 = i5 + 16 | 0;
  i16 = i5 + 20 | 0;
  i18 = i5 + 24 | 0;
  i20 = 0;
  while (1) {
   i31 = HEAP32[i2 + 24 >> 2] | 0;
   i32 = HEAP32[i31 + (i20 * 80 | 0) + 64 >> 2] | 0;
   __ZNK11btTransformmlERKS_(i3, i4, i31 + (i20 * 80 | 0) | 0);
   i31 = (HEAP32[i6 >> 2] | 0) + 192 | 0;
   i33 = HEAP32[i31 >> 2] | 0;
   HEAP32[i31 >> 2] = i32;
   i31 = HEAP32[i7 >> 2] | 0;
   HEAPF32[i11 >> 2] = 1.0;
   HEAP32[i12 >> 2] = 0;
   HEAP16[i13 >> 1] = 1;
   HEAP16[i14 >> 1] = -1;
   HEAP32[i15 >> 2] = 0;
   HEAP32[i5 >> 2] = 450160;
   HEAP32[i16 >> 2] = i31;
   HEAP32[i18 >> 2] = i20;
   HEAPF32[i11 >> 2] = +HEAPF32[i31 + 4 >> 2];
   __ZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackE(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, i32, i3, i5);
   HEAP32[(HEAP32[i6 >> 2] | 0) + 192 >> 2] = i33;
   i20 = i20 + 1 | 0;
   if ((i20 | 0) >= (i9 | 0)) {
    break;
   }
   i2 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
  }
  STACKTOP = i1;
  return;
 }
 if ((i32 | 0) == 21) {
  d43 = +HEAPF32[i4 >> 2];
  d42 = +HEAPF32[i4 + 16 >> 2];
  d41 = +HEAPF32[i4 + 32 >> 2];
  d39 = +HEAPF32[i4 + 4 >> 2];
  d38 = +HEAPF32[i4 + 20 >> 2];
  d37 = +HEAPF32[i4 + 36 >> 2];
  d21 = +HEAPF32[i4 + 8 >> 2];
  d24 = +HEAPF32[i4 + 24 >> 2];
  d34 = +HEAPF32[i4 + 40 >> 2];
  d26 = -+HEAPF32[i4 + 48 >> 2];
  d35 = -+HEAPF32[i4 + 52 >> 2];
  d36 = -+HEAPF32[i4 + 56 >> 2];
  d44 = d43 * d26 + d42 * d35 + d41 * d36;
  d40 = d39 * d26 + d38 * d35 + d37 * d36;
  d36 = d21 * d26 + d24 * d35 + d34 * d36;
  d35 = +HEAPF32[i11 + 48 >> 2];
  d26 = +HEAPF32[i11 + 52 >> 2];
  d23 = +HEAPF32[i11 + 56 >> 2];
  HEAPF32[i31 >> 2] = d44 + (d43 * d35 + d42 * d26 + d41 * d23);
  HEAPF32[i31 + 4 >> 2] = d40 + (d39 * d35 + d38 * d26 + d37 * d23);
  HEAPF32[i31 + 8 >> 2] = d36 + (d21 * d35 + d24 * d26 + d34 * d23);
  HEAPF32[i31 + 12 >> 2] = 0.0;
  d23 = +HEAPF32[i12 + 48 >> 2];
  d26 = +HEAPF32[i12 + 52 >> 2];
  d35 = +HEAPF32[i12 + 56 >> 2];
  HEAPF32[i33 >> 2] = d44 + (d43 * d23 + d42 * d26 + d41 * d35);
  HEAPF32[i33 + 4 >> 2] = d40 + (d39 * d23 + d38 * d26 + d37 * d35);
  HEAPF32[i33 + 8 >> 2] = d36 + (d21 * d23 + d24 * d26 + d34 * d35);
  HEAPF32[i33 + 12 >> 2] = 0.0;
  __ZN25btTriangleRaycastCallbackC2ERK9btVector3S2_j(i30, i31, i33, HEAP32[i9 + 16 >> 2] | 0);
  HEAP32[i30 >> 2] = 450768;
  HEAP32[i30 + 44 >> 2] = i9;
  HEAP32[i30 + 48 >> 2] = i17;
  HEAP32[i30 + 52 >> 2] = i2;
  i32 = i30 + 56 | 0;
  HEAP32[i32 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i32 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i32 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  i32 = i30 + 72 | 0;
  i29 = i4 + 16 | 0;
  HEAP32[i32 + 0 >> 2] = HEAP32[i29 + 0 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
  HEAP32[i32 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
  HEAP32[i32 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
  i32 = i30 + 88 | 0;
  i29 = i4 + 32 | 0;
  HEAP32[i32 + 0 >> 2] = HEAP32[i29 + 0 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
  HEAP32[i32 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
  HEAP32[i32 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
  i32 = i30 + 104 | 0;
  i29 = i4 + 48 | 0;
  HEAP32[i32 + 0 >> 2] = HEAP32[i29 + 0 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
  HEAP32[i32 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
  HEAP32[i32 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
  HEAPF32[i30 + 40 >> 2] = +HEAPF32[i9 + 4 >> 2];
  __ZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_(i2, i30, i31, i33);
  STACKTOP = i1;
  return;
 }
 d24 = +HEAPF32[i4 >> 2];
 d26 = +HEAPF32[i4 + 16 >> 2];
 d34 = +HEAPF32[i4 + 32 >> 2];
 d36 = +HEAPF32[i4 + 4 >> 2];
 d37 = +HEAPF32[i4 + 20 >> 2];
 d38 = +HEAPF32[i4 + 36 >> 2];
 d40 = +HEAPF32[i4 + 8 >> 2];
 d42 = +HEAPF32[i4 + 24 >> 2];
 d44 = +HEAPF32[i4 + 40 >> 2];
 d43 = -+HEAPF32[i4 + 48 >> 2];
 d21 = -+HEAPF32[i4 + 52 >> 2];
 d39 = -+HEAPF32[i4 + 56 >> 2];
 d23 = d24 * d43 + d26 * d21 + d34 * d39;
 d35 = d36 * d43 + d37 * d21 + d38 * d39;
 d39 = d40 * d43 + d42 * d21 + d44 * d39;
 d21 = +HEAPF32[i11 + 48 >> 2];
 d43 = +HEAPF32[i11 + 52 >> 2];
 d41 = +HEAPF32[i11 + 56 >> 2];
 HEAPF32[i10 >> 2] = d23 + (d24 * d21 + d26 * d43 + d34 * d41);
 HEAPF32[i10 + 4 >> 2] = d35 + (d36 * d21 + d37 * d43 + d38 * d41);
 HEAPF32[i10 + 8 >> 2] = d39 + (d40 * d21 + d42 * d43 + d44 * d41);
 HEAPF32[i10 + 12 >> 2] = 0.0;
 d41 = +HEAPF32[i12 + 48 >> 2];
 d43 = +HEAPF32[i12 + 52 >> 2];
 d21 = +HEAPF32[i12 + 56 >> 2];
 HEAPF32[i19 >> 2] = d23 + (d24 * d41 + d26 * d43 + d34 * d21);
 i11 = i19 + 4 | 0;
 HEAPF32[i11 >> 2] = d35 + (d36 * d41 + d37 * d43 + d38 * d21);
 i5 = i19 + 8 | 0;
 HEAPF32[i5 >> 2] = d39 + (d40 * d41 + d42 * d43 + d44 * d21);
 i3 = i19 + 12 | 0;
 HEAPF32[i3 >> 2] = 0.0;
 __ZN25btTriangleRaycastCallbackC2ERK9btVector3S2_j(i6, i10, i19, HEAP32[i9 + 16 >> 2] | 0);
 HEAP32[i6 >> 2] = 450568;
 HEAP32[i6 + 44 >> 2] = i9;
 HEAP32[i6 + 48 >> 2] = i17;
 HEAP32[i6 + 52 >> 2] = i2;
 i33 = i6 + 56 | 0;
 HEAP32[i33 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i33 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i33 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i33 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i33 = i6 + 72 | 0;
 i32 = i4 + 16 | 0;
 HEAP32[i33 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
 HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i33 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i33 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
 i33 = i6 + 88 | 0;
 i32 = i4 + 32 | 0;
 HEAP32[i33 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
 HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i33 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i33 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
 i33 = i6 + 104 | 0;
 i32 = i4 + 48 | 0;
 HEAP32[i33 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
 HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i33 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i33 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
 HEAPF32[i6 + 40 >> 2] = +HEAPF32[i9 + 4 >> 2];
 HEAP32[i7 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 d21 = +HEAPF32[i19 >> 2];
 if (d21 < +HEAPF32[i7 >> 2]) {
  HEAPF32[i7 >> 2] = d21;
 }
 i4 = i7 + 4 | 0;
 d23 = +HEAPF32[i11 >> 2];
 if (d23 < +HEAPF32[i4 >> 2]) {
  HEAPF32[i4 >> 2] = d23;
 }
 i4 = i7 + 8 | 0;
 d24 = +HEAPF32[i5 >> 2];
 if (d24 < +HEAPF32[i4 >> 2]) {
  HEAPF32[i4 >> 2] = d24;
 }
 i4 = i7 + 12 | 0;
 d26 = +HEAPF32[i3 >> 2];
 if (d26 < +HEAPF32[i4 >> 2]) {
  HEAPF32[i4 >> 2] = d26;
 }
 HEAP32[i8 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 if (+HEAPF32[i8 >> 2] < d21) {
  HEAPF32[i8 >> 2] = d21;
 }
 i3 = i8 + 4 | 0;
 if (+HEAPF32[i3 >> 2] < d23) {
  HEAPF32[i3 >> 2] = d23;
 }
 i3 = i8 + 8 | 0;
 if (+HEAPF32[i3 >> 2] < d24) {
  HEAPF32[i3 >> 2] = d24;
 }
 i3 = i8 + 12 | 0;
 if (+HEAPF32[i3 >> 2] < d26) {
  HEAPF32[i3 >> 2] = d26;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] & 63](i2, i6, i7, i8);
 STACKTOP = i1;
 return;
}
function __ZN12gjkepa2_impl3GJK8EvaluateERKNS_13MinkowskiDiffERK9btVector3(i12, i4, i13) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, i30 = 0, d31 = 0.0, d32 = 0.0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i9 = i1 + 56 | 0;
 i16 = i1 + 40 | 0;
 i10 = i1 + 24 | 0;
 i3 = i1 + 8 | 0;
 i2 = i1;
 HEAP32[i12 + 348 >> 2] = i12 + 220;
 HEAP32[i12 + 352 >> 2] = i12 + 252;
 HEAP32[i12 + 356 >> 2] = i12 + 284;
 i15 = i12 + 316 | 0;
 HEAP32[i12 + 360 >> 2] = i15;
 i8 = i12 + 364 | 0;
 HEAP32[i8 >> 2] = 4;
 i7 = i12 + 368 | 0;
 HEAP32[i7 >> 2] = 0;
 i5 = i12 + 376 | 0;
 HEAP32[i5 >> 2] = 0;
 i14 = i4;
 i11 = HEAP32[i14 + 4 >> 2] | 0;
 i17 = i12;
 HEAP32[i17 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i17 + 4 >> 2] = i11;
 i17 = i12 + 8 | 0;
 i11 = i4 + 8 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i12 + 24 | 0;
 i11 = i4 + 24 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i12 + 40 | 0;
 i11 = i4 + 40 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i12 + 56 | 0;
 i11 = i4 + 56 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i12 + 72 | 0;
 i11 = i4 + 72 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i12 + 88 | 0;
 i11 = i4 + 88 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i12 + 104 | 0;
 i11 = i4 + 104 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i17 = i4 + 120 | 0;
 i4 = HEAPU8[i17] | HEAPU8[i17 + 1 | 0] << 8 | HEAPU8[i17 + 2 | 0] << 16 | HEAPU8[i17 + 3 | 0] << 24;
 i17 = i17 + 4 | 0;
 i17 = HEAPU8[i17] | HEAPU8[i17 + 1 | 0] << 8 | HEAPU8[i17 + 2 | 0] << 16 | HEAPU8[i17 + 3 | 0] << 24;
 i11 = i12 + 120 | 0;
 HEAP8[i11] = i4;
 HEAP8[i11 + 1 | 0] = i4 >> 8;
 HEAP8[i11 + 2 | 0] = i4 >> 16;
 HEAP8[i11 + 3 | 0] = i4 >> 24;
 i11 = i11 + 4 | 0;
 HEAP8[i11] = i17;
 HEAP8[i11 + 1 | 0] = i17 >> 8;
 HEAP8[i11 + 2 | 0] = i17 >> 16;
 HEAP8[i11 + 3 | 0] = i17 >> 24;
 i11 = i12 + 144 | 0;
 HEAPF32[i11 >> 2] = 0.0;
 i17 = i12 + 180 | 0;
 HEAP32[i17 >> 2] = 0;
 i4 = i12 + 128 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 d23 = +HEAPF32[i4 >> 2];
 i14 = i12 + 132 | 0;
 d24 = +HEAPF32[i14 >> 2];
 i13 = i12 + 136 | 0;
 d29 = +HEAPF32[i13 >> 2];
 d25 = d23 * d23 + d24 * d24 + d29 * d29;
 if (d25 > 0.0) {
  HEAPF32[i16 >> 2] = -d23;
  HEAPF32[i16 + 4 >> 2] = -d24;
  HEAPF32[i16 + 8 >> 2] = -d29;
  HEAPF32[i16 + 12 >> 2] = 0.0;
 } else {
  HEAPF32[i16 >> 2] = 1.0;
  HEAPF32[i16 + 4 >> 2] = 0.0;
  HEAPF32[i16 + 8 >> 2] = 0.0;
  HEAPF32[i16 + 12 >> 2] = 0.0;
 }
 i19 = i12 + 164 | 0;
 HEAPF32[i19 >> 2] = 0.0;
 HEAP32[i8 >> 2] = 3;
 i18 = i12 + 148 | 0;
 HEAP32[i18 >> 2] = i15;
 HEAP32[i17 >> 2] = 1;
 __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i12, i16, i15);
 HEAPF32[i19 >> 2] = 1.0;
 i18 = (HEAP32[i18 >> 2] | 0) + 16 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 i17 = i9 + 16 | 0;
 i16 = i9 + 32 | 0;
 i19 = i9 + 48 | 0;
 HEAP32[i19 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i19 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i19 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 HEAP32[i16 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 HEAP32[i17 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 i18 = i10 + 4 | 0;
 i17 = i10 + 8 | 0;
 i16 = i10 + 12 | 0;
 i19 = i12 + 128 | 0;
 d23 = 0.0;
 i15 = 1;
 i20 = 1;
 L5 : while (1) {
  i22 = HEAP32[i7 >> 2] | 0;
  i21 = 1 - i22 | 0;
  i26 = i12 + (i22 * 36 | 0) + 148 | 0;
  d31 = +HEAPF32[i4 >> 2];
  d29 = +HEAPF32[i14 >> 2];
  d32 = +HEAPF32[i13 >> 2];
  d24 = +Math_sqrt(+(d31 * d31 + d29 * d29 + d32 * d32));
  if (d24 < 9999999747378752.0e-20) {
   i6 = 6;
   break;
  }
  HEAPF32[i10 >> 2] = -d31;
  HEAPF32[i18 >> 2] = -d29;
  HEAPF32[i17 >> 2] = -d32;
  HEAPF32[i16 >> 2] = 0.0;
  i27 = i12 + (i22 * 36 | 0) + 180 | 0;
  HEAPF32[i12 + (i22 * 36 | 0) + (HEAP32[i27 >> 2] << 2) + 164 >> 2] = 0.0;
  i28 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
  HEAP32[i8 >> 2] = i28;
  HEAP32[i12 + (i22 * 36 | 0) + (HEAP32[i27 >> 2] << 2) + 148 >> 2] = HEAP32[i12 + (i28 << 2) + 348 >> 2];
  i28 = HEAP32[i27 >> 2] | 0;
  HEAP32[i27 >> 2] = i28 + 1;
  __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i12, i10, HEAP32[i12 + (i22 * 36 | 0) + (i28 << 2) + 148 >> 2] | 0);
  i28 = HEAP32[i27 >> 2] | 0;
  i30 = HEAP32[i12 + (i22 * 36 | 0) + (i28 + -1 << 2) + 148 >> 2] | 0;
  i33 = i30 + 16 | 0;
  d32 = +HEAPF32[i33 >> 2];
  d29 = +HEAPF32[i30 + 20 >> 2];
  d31 = +HEAPF32[i30 + 24 >> 2];
  i30 = 0;
  do {
   d37 = d32 - +HEAPF32[i9 + (i30 << 4) >> 2];
   d36 = d29 - +HEAPF32[i9 + (i30 << 4) + 4 >> 2];
   d35 = d31 - +HEAPF32[i9 + (i30 << 4) + 8 >> 2];
   i30 = i30 + 1 | 0;
   if (d37 * d37 + d36 * d36 + d35 * d35 < 9999999747378752.0e-20) {
    i6 = 10;
    break L5;
   }
  } while (i30 >>> 0 < 4);
  i34 = i9 + (i15 << 4) | 0;
  HEAP32[i34 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
  HEAP32[i34 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
  HEAP32[i34 + 8 >> 2] = HEAP32[i33 + 8 >> 2];
  HEAP32[i34 + 12 >> 2] = HEAP32[i33 + 12 >> 2];
  d29 = (+HEAPF32[i4 >> 2] * d32 + +HEAPF32[i14 >> 2] * d29 + +HEAPF32[i13 >> 2] * d31) / d24;
  d23 = d29 > d23 ? d29 : d23;
  if (d24 - d23 - d24 * 9999999747378752.0e-20 <= 0.0) {
   i6 = 12;
   break;
  }
  HEAP32[i2 >> 2] = 0;
  if ((i28 | 0) == 2) {
   d25 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_PfRj((HEAP32[i26 >> 2] | 0) + 16 | 0, (HEAP32[i12 + (i22 * 36 | 0) + 152 >> 2] | 0) + 16 | 0, i3, i2);
  } else if ((i28 | 0) == 4) {
   d25 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_S3_PfRj((HEAP32[i26 >> 2] | 0) + 16 | 0, (HEAP32[i12 + (i22 * 36 | 0) + 152 >> 2] | 0) + 16 | 0, (HEAP32[i12 + (i22 * 36 | 0) + 156 >> 2] | 0) + 16 | 0, (HEAP32[i12 + (i22 * 36 | 0) + 160 >> 2] | 0) + 16 | 0, i3, i2);
  } else if ((i28 | 0) == 3) {
   d25 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_PfRj((HEAP32[i26 >> 2] | 0) + 16 | 0, (HEAP32[i12 + (i22 * 36 | 0) + 152 >> 2] | 0) + 16 | 0, (HEAP32[i12 + (i22 * 36 | 0) + 156 >> 2] | 0) + 16 | 0, i3, i2);
  }
  if (!(d25 >= 0.0)) {
   i6 = 25;
   break;
  }
  i26 = i12 + (i21 * 36 | 0) + 180 | 0;
  HEAP32[i26 >> 2] = 0;
  HEAP32[i19 + 0 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = 0;
  HEAP32[i19 + 12 >> 2] = 0;
  HEAP32[i7 >> 2] = i21;
  i34 = HEAP32[i27 >> 2] | 0;
  i28 = HEAP32[i2 >> 2] | 0;
  if ((i34 | 0) != 0) {
   i33 = 0;
   do {
    i30 = i12 + (i22 * 36 | 0) + (i33 << 2) + 148 | 0;
    i27 = HEAP32[i30 >> 2] | 0;
    if ((i28 & 1 << i33 | 0) == 0) {
     i30 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i30 + 1;
     HEAP32[i12 + (i30 << 2) + 348 >> 2] = i27;
    } else {
     HEAP32[i12 + (i21 * 36 | 0) + (HEAP32[i26 >> 2] << 2) + 148 >> 2] = i27;
     d35 = +HEAPF32[i3 + (i33 << 2) >> 2];
     i27 = HEAP32[i26 >> 2] | 0;
     HEAP32[i26 >> 2] = i27 + 1;
     HEAPF32[i12 + (i21 * 36 | 0) + (i27 << 2) + 164 >> 2] = d35;
     i30 = HEAP32[i30 >> 2] | 0;
     d36 = d35 * +HEAPF32[i30 + 20 >> 2];
     d37 = d35 * +HEAPF32[i30 + 24 >> 2];
     HEAPF32[i4 >> 2] = +HEAPF32[i30 + 16 >> 2] * d35 + +HEAPF32[i4 >> 2];
     HEAPF32[i14 >> 2] = d36 + +HEAPF32[i14 >> 2];
     HEAPF32[i13 >> 2] = d37 + +HEAPF32[i13 >> 2];
    }
    i33 = i33 + 1 | 0;
   } while ((i33 | 0) != (i34 | 0));
  }
  if ((i28 | 0) == 15) {
   HEAP32[i5 >> 2] = 1;
  }
  if (!(i20 >>> 0 < 128)) {
   i6 = 27;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) != 0) {
   break;
  }
  i15 = i15 + 1 & 3;
  i20 = i20 + 1 | 0;
 }
 if ((i6 | 0) == 6) {
  HEAP32[i5 >> 2] = 1;
 } else if ((i6 | 0) == 10) {
  i34 = HEAP32[i7 >> 2] | 0;
  i30 = i12 + (i34 * 36 | 0) + 180 | 0;
  i33 = (HEAP32[i30 >> 2] | 0) + -1 | 0;
  HEAP32[i30 >> 2] = i33;
  i33 = HEAP32[i12 + (i34 * 36 | 0) + (i33 << 2) + 148 >> 2] | 0;
  i34 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = i34 + 1;
  HEAP32[i12 + (i34 << 2) + 348 >> 2] = i33;
 } else if ((i6 | 0) == 12) {
  i34 = HEAP32[i7 >> 2] | 0;
  i30 = i12 + (i34 * 36 | 0) + 180 | 0;
  i33 = (HEAP32[i30 >> 2] | 0) + -1 | 0;
  HEAP32[i30 >> 2] = i33;
  i33 = HEAP32[i12 + (i34 * 36 | 0) + (i33 << 2) + 148 >> 2] | 0;
  i34 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = i34 + 1;
  HEAP32[i12 + (i34 << 2) + 348 >> 2] = i33;
 } else if ((i6 | 0) == 25) {
  i34 = HEAP32[i7 >> 2] | 0;
  i30 = i12 + (i34 * 36 | 0) + 180 | 0;
  i33 = (HEAP32[i30 >> 2] | 0) + -1 | 0;
  HEAP32[i30 >> 2] = i33;
  i33 = HEAP32[i12 + (i34 * 36 | 0) + (i33 << 2) + 148 >> 2] | 0;
  i34 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = i34 + 1;
  HEAP32[i12 + (i34 << 2) + 348 >> 2] = i33;
 } else if ((i6 | 0) == 27) {
  HEAP32[i5 >> 2] = 2;
 }
 HEAP32[i12 + 372 >> 2] = i12 + ((HEAP32[i7 >> 2] | 0) * 36 | 0) + 148;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == 1) {
  HEAPF32[i11 >> 2] = 0.0;
  STACKTOP = i1;
  return i2 | 0;
 } else if ((i2 | 0) == 0) {
  d35 = +HEAPF32[i4 >> 2];
  d36 = +HEAPF32[i14 >> 2];
  d37 = +HEAPF32[i13 >> 2];
  HEAPF32[i11 >> 2] = +Math_sqrt(+(d35 * d35 + d36 * d36 + d37 * d37));
  STACKTOP = i1;
  return i2 | 0;
 } else {
  STACKTOP = i1;
  return i2 | 0;
 }
 return 0;
}
function __ZN12gjkepa2_impl3EPA8EvaluateERNS_3GJKERK9btVector3(i2, i4, i11) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, d25 = 0.0, d26 = 0.0, i27 = 0, d28 = 0.0, d29 = 0.0, i30 = 0, i31 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i1;
 i10 = HEAP32[i4 + 372 >> 2] | 0;
 if ((HEAP32[i10 + 32 >> 2] | 0) >>> 0 > 1 ? __ZN12gjkepa2_impl3GJK13EncloseOriginEv(i4) | 0 : 0) {
  i5 = i2 + 9792 | 0;
  i18 = HEAP32[i5 >> 2] | 0;
  if ((i18 | 0) != 0) {
   i8 = i2 + 9796 | 0;
   i13 = i2 + 9800 | 0;
   i7 = i2 + 9804 | 0;
   i15 = HEAP32[i8 >> 2] | 0;
   i19 = HEAP32[i7 >> 2] | 0;
   do {
    i21 = i18 + 52 | 0;
    i22 = HEAP32[i21 >> 2] | 0;
    i20 = i18 + 48 | 0;
    if ((i22 | 0) != 0) {
     HEAP32[i22 + 48 >> 2] = HEAP32[i20 >> 2];
    }
    i22 = HEAP32[i20 >> 2] | 0;
    if ((i22 | 0) != 0) {
     HEAP32[i22 + 52 >> 2] = HEAP32[i21 >> 2];
    }
    if ((HEAP32[i5 >> 2] | 0) == (i18 | 0)) {
     HEAP32[i5 >> 2] = HEAP32[i21 >> 2];
    }
    i15 = i15 + -1 | 0;
    HEAP32[i20 >> 2] = 0;
    HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
    i20 = HEAP32[i13 >> 2] | 0;
    if ((i20 | 0) != 0) {
     HEAP32[i20 + 48 >> 2] = i18;
    }
    HEAP32[i13 >> 2] = i18;
    i19 = i19 + 1 | 0;
    i18 = HEAP32[i5 >> 2] | 0;
   } while ((i18 | 0) != 0);
   HEAP32[i8 >> 2] = i15;
   HEAP32[i7 >> 2] = i19;
  }
  HEAP32[i2 >> 2] = 0;
  i7 = i2 + 9788 | 0;
  HEAP32[i7 >> 2] = 0;
  i20 = HEAP32[i10 >> 2] | 0;
  i19 = i10 + 12 | 0;
  i18 = HEAP32[i19 >> 2] | 0;
  d29 = +HEAPF32[i18 + 16 >> 2];
  d12 = +HEAPF32[i20 + 16 >> 2] - d29;
  d16 = +HEAPF32[i18 + 20 >> 2];
  d17 = +HEAPF32[i20 + 20 >> 2] - d16;
  d25 = +HEAPF32[i18 + 24 >> 2];
  d26 = +HEAPF32[i20 + 24 >> 2] - d25;
  i18 = i10 + 4 | 0;
  i21 = HEAP32[i18 >> 2] | 0;
  d23 = +HEAPF32[i21 + 16 >> 2] - d29;
  d28 = +HEAPF32[i21 + 20 >> 2] - d16;
  d14 = +HEAPF32[i21 + 24 >> 2] - d25;
  i8 = i10 + 8 | 0;
  i13 = HEAP32[i8 >> 2] | 0;
  d29 = +HEAPF32[i13 + 16 >> 2] - d29;
  d16 = +HEAPF32[i13 + 20 >> 2] - d16;
  d25 = +HEAPF32[i13 + 24 >> 2] - d25;
  if (d12 * d28 * d25 + (d17 * d14 * d29 + d26 * d23 * d16 - d12 * d14 * d16 - d17 * d23 * d25) - d26 * d28 * d29 < 0.0) {
   HEAP32[i10 >> 2] = i21;
   HEAP32[i18 >> 2] = i20;
   i31 = i10 + 16 | 0;
   i15 = i10 + 20 | 0;
   d29 = +HEAPF32[i31 >> 2];
   HEAPF32[i31 >> 2] = +HEAPF32[i15 >> 2];
   HEAPF32[i15 >> 2] = d29;
   i15 = i21;
  } else {
   i15 = HEAP32[i10 >> 2] | 0;
   i20 = i21;
  }
  i13 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i2, i15, i20, i13, 1) | 0;
  i15 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i2, HEAP32[i18 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i19 >> 2] | 0, 1) | 0;
  i18 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i2, HEAP32[i8 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i19 >> 2] | 0, 1) | 0;
  i19 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i2, HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i19 >> 2] | 0, 1) | 0;
  i8 = i2 + 9796 | 0;
  if ((HEAP32[i8 >> 2] | 0) == 4) {
   i24 = HEAP32[i5 >> 2] | 0;
   d23 = +HEAPF32[i24 + 16 >> 2];
   i10 = HEAP32[i24 + 52 >> 2] | 0;
   if ((i10 | 0) != 0) {
    d9 = +HEAPF32[i24 + 20 >> 2];
    d12 = d23 * d23;
    while (1) {
     d14 = +HEAPF32[i10 + 16 >> 2];
     d14 = d14 * d14;
     d16 = +HEAPF32[i10 + 20 >> 2];
     i11 = d16 >= d9 & d14 < d12;
     i24 = i11 ? i10 : i24;
     i10 = HEAP32[i10 + 52 >> 2] | 0;
     if ((i10 | 0) == 0) {
      break;
     } else {
      d9 = i11 ? d16 : d9;
      d12 = i11 ? d14 : d12;
     }
    }
    d23 = +HEAPF32[i24 + 16 >> 2];
   }
   d16 = +HEAPF32[i24 >> 2];
   d12 = +HEAPF32[i24 + 4 >> 2];
   d14 = +HEAPF32[i24 + 8 >> 2];
   d9 = +HEAPF32[i24 + 12 >> 2];
   d17 = +HEAPF32[i24 + 20 >> 2];
   i20 = HEAP32[i24 + 24 >> 2] | 0;
   i21 = HEAP32[i24 + 28 >> 2] | 0;
   i22 = HEAP32[i24 + 32 >> 2] | 0;
   HEAP8[i13 + 56 | 0] = 0;
   HEAP32[i13 + 36 >> 2] = i15;
   HEAP8[i15 + 56 | 0] = 0;
   HEAP32[i15 + 36 >> 2] = i13;
   HEAP8[i13 + 57 | 0] = 0;
   HEAP32[i13 + 40 >> 2] = i18;
   HEAP8[i18 + 56 | 0] = 1;
   HEAP32[i18 + 36 >> 2] = i13;
   HEAP8[i13 + 58 | 0] = 0;
   HEAP32[i13 + 44 >> 2] = i19;
   HEAP8[i19 + 56 | 0] = 2;
   HEAP32[i19 + 36 >> 2] = i13;
   HEAP8[i15 + 57 | 0] = 2;
   HEAP32[i15 + 40 >> 2] = i19;
   HEAP8[i19 + 58 | 0] = 1;
   HEAP32[i19 + 44 >> 2] = i15;
   HEAP8[i15 + 58 | 0] = 1;
   HEAP32[i15 + 44 >> 2] = i18;
   HEAP8[i18 + 57 | 0] = 2;
   HEAP32[i18 + 40 >> 2] = i15;
   HEAP8[i18 + 58 | 0] = 1;
   HEAP32[i18 + 44 >> 2] = i19;
   HEAP8[i19 + 57 | 0] = 2;
   HEAP32[i19 + 40 >> 2] = i18;
   HEAP32[i2 >> 2] = 0;
   i13 = i6 + 4 | 0;
   i10 = i6 + 8 | 0;
   i11 = i2 + 9800 | 0;
   i15 = i2 + 9804 | 0;
   i19 = i21;
   i21 = 0;
   i18 = 1;
   while (1) {
    i30 = HEAP32[i7 >> 2] | 0;
    if (!(i30 >>> 0 < 64)) {
     i3 = 44;
     break;
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i13 >> 2] = 0;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i7 >> 2] = i30 + 1;
    i27 = i2 + (i30 << 5) + 60 | 0;
    HEAP8[i24 + 59 | 0] = i18;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i4, i24, i27);
    if (+HEAPF32[i24 >> 2] * +HEAPF32[i2 + (i30 << 5) + 76 >> 2] + +HEAPF32[i24 + 4 >> 2] * +HEAPF32[i2 + (i30 << 5) + 80 >> 2] + +HEAPF32[i24 + 8 >> 2] * +HEAPF32[i2 + (i30 << 5) + 84 >> 2] - +HEAPF32[i24 + 16 >> 2] > 9999999747378752.0e-20) {
     i30 = 0;
     i31 = 1;
    } else {
     i3 = 43;
     break;
    }
    do {
     i31 = i31 & (__ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i2, i18, i27, HEAP32[i24 + (i30 << 2) + 36 >> 2] | 0, HEAPU8[i24 + i30 + 56 | 0] | 0, i6) | 0);
     i30 = i30 + 1 | 0;
    } while (!(i30 >>> 0 > 2 | i31 ^ 1));
    if (!i31) {
     i3 = 42;
     break;
    }
    if (!((HEAP32[i10 >> 2] | 0) >>> 0 > 2)) {
     i3 = 42;
     break;
    }
    i31 = HEAP32[i6 >> 2] | 0;
    i27 = HEAP32[i13 >> 2] | 0;
    HEAP8[i31 + 57 | 0] = 2;
    HEAP32[i31 + 40 >> 2] = i27;
    HEAP8[i27 + 58 | 0] = 1;
    HEAP32[i27 + 44 >> 2] = i31;
    i27 = i24 + 52 | 0;
    i31 = HEAP32[i27 >> 2] | 0;
    i30 = i24 + 48 | 0;
    if ((i31 | 0) != 0) {
     HEAP32[i31 + 48 >> 2] = HEAP32[i30 >> 2];
    }
    i31 = HEAP32[i30 >> 2] | 0;
    if ((i31 | 0) != 0) {
     HEAP32[i31 + 52 >> 2] = HEAP32[i27 >> 2];
    }
    if ((HEAP32[i5 >> 2] | 0) == (i24 | 0)) {
     HEAP32[i5 >> 2] = HEAP32[i27 >> 2];
    }
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
    HEAP32[i30 >> 2] = 0;
    HEAP32[i27 >> 2] = HEAP32[i11 >> 2];
    i27 = HEAP32[i11 >> 2] | 0;
    if ((i27 | 0) != 0) {
     HEAP32[i27 + 48 >> 2] = i24;
    }
    HEAP32[i11 >> 2] = i24;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    i24 = HEAP32[i5 >> 2] | 0;
    d26 = +HEAPF32[i24 + 16 >> 2];
    i27 = HEAP32[i24 + 52 >> 2] | 0;
    if ((i27 | 0) != 0) {
     d25 = +HEAPF32[i24 + 20 >> 2];
     d26 = d26 * d26;
     while (1) {
      d29 = +HEAPF32[i27 + 16 >> 2];
      d29 = d29 * d29;
      d28 = +HEAPF32[i27 + 20 >> 2];
      i30 = d28 >= d25 & d29 < d26;
      i24 = i30 ? i27 : i24;
      i27 = HEAP32[i27 + 52 >> 2] | 0;
      if ((i27 | 0) == 0) {
       break;
      } else {
       d25 = i30 ? d28 : d25;
       d26 = i30 ? d29 : d26;
      }
     }
    }
    d25 = +HEAPF32[i24 + 20 >> 2];
    if (d25 >= d17) {
     i22 = HEAP32[i24 + 32 >> 2] | 0;
     i19 = HEAP32[i24 + 28 >> 2] | 0;
     i20 = HEAP32[i24 + 24 >> 2] | 0;
     d17 = d25;
     d23 = +HEAPF32[i24 + 16 >> 2];
     d9 = +HEAPF32[i24 + 12 >> 2];
     d14 = +HEAPF32[i24 + 8 >> 2];
     d12 = +HEAPF32[i24 + 4 >> 2];
     d16 = +HEAPF32[i24 >> 2];
    }
    i21 = i21 + 1 | 0;
    if (i21 >>> 0 < 255) {
     i18 = i18 + 1 | 0;
    } else {
     break;
    }
   }
   if ((i3 | 0) == 42) {
    HEAP32[i2 >> 2] = 4;
   } else if ((i3 | 0) == 43) {
    HEAP32[i2 >> 2] = 7;
   } else if ((i3 | 0) == 44) {
    HEAP32[i2 >> 2] = 6;
   }
   d29 = d23 * d16;
   d17 = d23 * d12;
   d28 = d23 * d14;
   HEAPF32[i2 + 40 >> 2] = d16;
   HEAPF32[i2 + 44 >> 2] = d12;
   HEAPF32[i2 + 48 >> 2] = d14;
   HEAPF32[i2 + 52 >> 2] = d9;
   HEAPF32[i2 + 56 >> 2] = d23;
   HEAP32[i2 + 36 >> 2] = 3;
   HEAP32[i2 + 4 >> 2] = i20;
   HEAP32[i2 + 8 >> 2] = i19;
   HEAP32[i2 + 12 >> 2] = i22;
   i21 = i19 + 16 | 0;
   d26 = +HEAPF32[i21 >> 2] - d29;
   i24 = i19 + 20 | 0;
   d23 = +HEAPF32[i24 >> 2] - d17;
   i27 = i19 + 24 | 0;
   d16 = +HEAPF32[i27 >> 2] - d28;
   i31 = i22 + 16 | 0;
   d9 = +HEAPF32[i31 >> 2] - d29;
   i19 = i22 + 20 | 0;
   d25 = +HEAPF32[i19 >> 2] - d17;
   i18 = i22 + 24 | 0;
   d12 = +HEAPF32[i18 >> 2] - d28;
   d14 = d23 * d12 - d16 * d25;
   d12 = d16 * d9 - d26 * d12;
   d9 = d26 * d25 - d23 * d9;
   i30 = i2 + 20 | 0;
   HEAPF32[i30 >> 2] = +Math_sqrt(+(d9 * d9 + (d14 * d14 + d12 * d12)));
   d12 = +HEAPF32[i31 >> 2] - d29;
   d14 = +HEAPF32[i19 >> 2] - d17;
   d9 = +HEAPF32[i18 >> 2] - d28;
   i18 = i20 + 16 | 0;
   d23 = +HEAPF32[i18 >> 2] - d29;
   i19 = i20 + 20 | 0;
   d25 = +HEAPF32[i19 >> 2] - d17;
   i22 = i20 + 24 | 0;
   d26 = +HEAPF32[i22 >> 2] - d28;
   d16 = d14 * d26 - d9 * d25;
   d26 = d9 * d23 - d12 * d26;
   d23 = d12 * d25 - d14 * d23;
   d26 = +Math_sqrt(+(d23 * d23 + (d16 * d16 + d26 * d26)));
   i31 = i2 + 24 | 0;
   HEAPF32[i31 >> 2] = d26;
   d16 = +HEAPF32[i18 >> 2] - d29;
   d23 = +HEAPF32[i19 >> 2] - d17;
   d14 = +HEAPF32[i22 >> 2] - d28;
   d29 = +HEAPF32[i21 >> 2] - d29;
   d17 = +HEAPF32[i24 >> 2] - d17;
   d28 = +HEAPF32[i27 >> 2] - d28;
   d25 = d23 * d28 - d14 * d17;
   d28 = d14 * d29 - d16 * d28;
   d29 = d16 * d17 - d23 * d29;
   d28 = +Math_sqrt(+(d29 * d29 + (d25 * d25 + d28 * d28)));
   d25 = +HEAPF32[i30 >> 2];
   d29 = d28 + (d25 + d26);
   HEAPF32[i30 >> 2] = d25 / d29;
   HEAPF32[i31 >> 2] = d26 / d29;
   HEAPF32[i2 + 28 >> 2] = d28 / d29;
   i31 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i1;
   return i31 | 0;
  }
 }
 HEAP32[i2 >> 2] = 8;
 d28 = +HEAPF32[i11 >> 2];
 d9 = -d28;
 d29 = +HEAPF32[i11 + 4 >> 2];
 d12 = -d29;
 d16 = +HEAPF32[i11 + 8 >> 2];
 d14 = -d16;
 i3 = i2 + 40 | 0;
 HEAPF32[i3 >> 2] = d9;
 i4 = i2 + 44 | 0;
 HEAPF32[i4 >> 2] = d12;
 i5 = i2 + 48 | 0;
 HEAPF32[i5 >> 2] = d14;
 i6 = i2 + 52 | 0;
 HEAPF32[i6 >> 2] = 0.0;
 d16 = +Math_sqrt(+(d28 * d28 + d29 * d29 + d16 * d16));
 if (d16 > 0.0) {
  d29 = 1.0 / d16;
  d14 = d29 * d14;
  d12 = d29 * d12;
  d9 = d29 * d9;
 } else {
  d14 = 0.0;
  d12 = 0.0;
  d9 = 1.0;
 }
 HEAPF32[i3 >> 2] = d9;
 HEAPF32[i4 >> 2] = d12;
 HEAPF32[i5 >> 2] = d14;
 HEAPF32[i6 >> 2] = 0.0;
 HEAPF32[i2 + 56 >> 2] = 0.0;
 HEAP32[i2 + 36 >> 2] = 1;
 HEAP32[i2 + 4 >> 2] = HEAP32[i10 >> 2];
 HEAPF32[i2 + 20 >> 2] = 1.0;
 i31 = 8;
 STACKTOP = i1;
 return i31 | 0;
}
function __ZN20btConvexHullInternal15mergeProjectionERNS_16IntermediateHullES1_RPNS_6VertexES4_(i2, i5, i4, i3, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i2 = STACKTOP;
 i6 = i5 + 12 | 0;
 i16 = HEAP32[i6 >> 2] | 0;
 i17 = HEAP32[i4 + 8 >> 2] | 0;
 L1 : do {
  if ((HEAP32[i16 + 88 >> 2] | 0) == (HEAP32[i17 + 88 >> 2] | 0) ? (HEAP32[i16 + 92 >> 2] | 0) == (HEAP32[i17 + 92 >> 2] | 0) : 0) {
   i15 = HEAP32[i17 + 4 >> 2] | 0;
   if ((i15 | 0) == (i17 | 0)) {
    HEAP32[i3 >> 2] = i16;
    i3 = HEAP32[i17 + 8 >> 2] | 0;
    if ((i3 | 0) == 0) {
     i35 = 0;
     i34 = i17;
     HEAP32[i1 >> 2] = i34;
     STACKTOP = i2;
     return i35 | 0;
    }
    i35 = 0;
    i34 = HEAP32[i3 + 12 >> 2] | 0;
    HEAP32[i1 >> 2] = i34;
    STACKTOP = i2;
    return i35 | 0;
   }
   i16 = HEAP32[i17 >> 2] | 0;
   HEAP32[i15 >> 2] = i16;
   HEAP32[i16 + 4 >> 2] = i15;
   L11 : do {
    if ((i17 | 0) == (HEAP32[i4 >> 2] | 0)) {
     i19 = HEAP32[i16 + 88 >> 2] | 0;
     i18 = HEAP32[i15 + 88 >> 2] | 0;
     do {
      if ((i19 | 0) >= (i18 | 0)) {
       if ((i19 | 0) == (i18 | 0) ? (HEAP32[i16 + 92 >> 2] | 0) < (HEAP32[i15 + 92 >> 2] | 0) : 0) {
        break;
       }
       HEAP32[i4 >> 2] = i15;
       break L11;
      }
     } while (0);
     HEAP32[i4 >> 2] = i16;
    }
   } while (0);
   i18 = i4 + 4 | 0;
   if ((i17 | 0) == (HEAP32[i18 >> 2] | 0)) {
    i19 = HEAP32[i16 + 88 >> 2] | 0;
    i17 = HEAP32[i15 + 88 >> 2] | 0;
    do {
     if ((i19 | 0) <= (i17 | 0)) {
      if ((i19 | 0) == (i17 | 0) ? (HEAP32[i16 + 92 >> 2] | 0) > (HEAP32[i15 + 92 >> 2] | 0) : 0) {
       break;
      }
      HEAP32[i18 >> 2] = i15;
      break L1;
     }
    } while (0);
    HEAP32[i18 >> 2] = i16;
   }
  }
 } while (0);
 i16 = i5 + 4 | 0;
 i18 = i4 + 4 | 0;
 i20 = 0;
 i19 = 1;
 i24 = HEAP32[i16 >> 2] | 0;
 i15 = 0;
 i21 = HEAP32[i18 >> 2] | 0;
 i17 = 0;
 while (1) {
  i22 = HEAP32[i24 + 88 >> 2] | 0;
  i27 = Math_imul((HEAP32[i21 + 88 >> 2] | 0) - i22 | 0, i19) | 0;
  L30 : do {
   if ((i27 | 0) <= 0) {
    if ((i27 | 0) >= 0) {
     i26 = HEAP32[i24 + 92 >> 2] | 0;
     i23 = (i20 | 0) != 0;
     L51 : do {
      if (i23) {
       i25 = i24;
       while (1) {
        i27 = HEAP32[i25 >> 2] | 0;
        if ((i27 | 0) == (i24 | 0)) {
         break L51;
        }
        if ((HEAP32[i27 + 88 >> 2] | 0) != (i22 | 0)) {
         break L51;
        }
        i28 = HEAP32[i27 + 92 >> 2] | 0;
        if ((i28 | 0) > (i26 | 0)) {
         break;
        } else {
         i25 = i27;
         i26 = i28;
        }
       }
      } else {
       i25 = i24;
       while (1) {
        i28 = HEAP32[i25 + 4 >> 2] | 0;
        if ((i28 | 0) == (i24 | 0)) {
         break L51;
        }
        if ((HEAP32[i28 + 88 >> 2] | 0) != (i22 | 0)) {
         break L51;
        }
        i27 = HEAP32[i28 + 92 >> 2] | 0;
        if ((i27 | 0) > (i26 | 0)) {
         break;
        } else {
         i25 = i28;
         i26 = i27;
        }
       }
      }
     } while (0);
     i24 = HEAP32[i21 + 92 >> 2] | 0;
     if (i23) {
      i23 = i21;
      while (1) {
       i26 = HEAP32[i23 + 4 >> 2] | 0;
       if ((i26 | 0) == (i21 | 0)) {
        break L30;
       }
       if ((HEAP32[i26 + 88 >> 2] | 0) != (i22 | 0)) {
        break L30;
       }
       i27 = HEAP32[i26 + 92 >> 2] | 0;
       if ((i27 | 0) < (i24 | 0)) {
        break L30;
       } else {
        i23 = i26;
        i24 = i27;
       }
      }
     } else {
      i23 = i21;
      while (1) {
       i27 = HEAP32[i23 >> 2] | 0;
       if ((i27 | 0) == (i21 | 0)) {
        break L30;
       }
       if ((HEAP32[i27 + 88 >> 2] | 0) != (i22 | 0)) {
        break L30;
       }
       i26 = HEAP32[i27 + 92 >> 2] | 0;
       if ((i26 | 0) < (i24 | 0)) {
        break L30;
       } else {
        i23 = i27;
        i24 = i26;
       }
      }
     }
    }
    i22 = HEAP32[i21 + 92 >> 2] | 0;
    i30 = HEAP32[i24 + 92 >> 2] | 0;
    if ((i20 | 0) == 0) {
     i29 = i27;
     while (1) {
      i23 = HEAP32[i21 >> 2] | 0;
      i25 = (i23 | 0) == (i21 | 0);
      i27 = i21 + 88 | 0;
      i28 = i23 + 88 | 0;
      i26 = i23 + 92 | 0;
      while (1) {
       i33 = i24 + 88 | 0;
       i31 = i22 - i30 | 0;
       if (!i25 ? (i8 = HEAP32[i28 >> 2] | 0, i10 = Math_imul(i8 - (HEAP32[i27 >> 2] | 0) | 0, i19) | 0, i14 = HEAP32[i26 >> 2] | 0, i7 = i14 - i22 | 0, (i7 | 0) > -1) : 0) {
        if ((i10 | 0) == 0) {
         break;
        }
        if ((i10 | 0) < 0 ? (Math_imul(i7, i29) | 0) <= (Math_imul(i10, i31) | 0) : 0) {
         break;
        }
       }
       i32 = HEAP32[i24 >> 2] | 0;
       if ((i32 | 0) == (i24 | 0)) {
        i25 = i24;
        i23 = i21;
        break L30;
       }
       i36 = HEAP32[i32 + 88 >> 2] | 0;
       i34 = Math_imul(i36 - (HEAP32[i33 >> 2] | 0) | 0, i19) | 0;
       i35 = HEAP32[i32 + 92 >> 2] | 0;
       i30 = i35 - i30 | 0;
       i33 = Math_imul((HEAP32[i27 >> 2] | 0) - i36 | 0, i19) | 0;
       if (!((i33 | 0) < 0 & (i30 | 0) > 0)) {
        i25 = i24;
        i23 = i21;
        break L30;
       }
       if ((i34 | 0) == 0) {
        i30 = i35;
        i29 = i33;
        i24 = i32;
        continue;
       }
       if ((i34 | 0) >= 0) {
        i25 = i24;
        i23 = i21;
        break L30;
       }
       if ((Math_imul(i30, i29) | 0) < (Math_imul(i34, i31) | 0)) {
        i30 = i35;
        i29 = i33;
        i24 = i32;
       } else {
        i25 = i24;
        i23 = i21;
        break L30;
       }
      }
      i22 = i14;
      i29 = Math_imul(i8 - (HEAP32[i33 >> 2] | 0) | 0, i19) | 0;
      i21 = i23;
     }
    } else {
     while (1) {
      i23 = HEAP32[i21 + 4 >> 2] | 0;
      i25 = (i23 | 0) == (i21 | 0);
      i28 = i21 + 88 | 0;
      i29 = i23 + 88 | 0;
      i26 = i23 + 92 | 0;
      while (1) {
       i33 = i24 + 88 | 0;
       i31 = i22 - i30 | 0;
       if (!i25 ? (i13 = HEAP32[i29 >> 2] | 0, i12 = Math_imul(i13 - (HEAP32[i28 >> 2] | 0) | 0, i19) | 0, i9 = HEAP32[i26 >> 2] | 0, i11 = i9 - i22 | 0, (i11 | 0) > -1) : 0) {
        if ((i12 | 0) == 0) {
         break;
        }
        if ((i12 | 0) < 0 ? (Math_imul(i11, i27) | 0) <= (Math_imul(i12, i31) | 0) : 0) {
         break;
        }
       }
       i32 = HEAP32[i24 + 4 >> 2] | 0;
       if ((i32 | 0) == (i24 | 0)) {
        i25 = i24;
        i23 = i21;
        break L30;
       }
       i34 = HEAP32[i32 + 88 >> 2] | 0;
       i33 = Math_imul(i34 - (HEAP32[i33 >> 2] | 0) | 0, i19) | 0;
       i35 = HEAP32[i32 + 92 >> 2] | 0;
       i30 = i35 - i30 | 0;
       i34 = Math_imul((HEAP32[i28 >> 2] | 0) - i34 | 0, i19) | 0;
       if (!((i34 | 0) < 0 & (i30 | 0) > 0)) {
        i25 = i24;
        i23 = i21;
        break L30;
       }
       if ((i33 | 0) == 0) {
        i30 = i35;
        i27 = i34;
        i24 = i32;
        continue;
       }
       if ((i33 | 0) >= 0) {
        i25 = i24;
        i23 = i21;
        break L30;
       }
       if ((Math_imul(i30, i27) | 0) < (Math_imul(i33, i31) | 0)) {
        i30 = i35;
        i27 = i34;
        i24 = i32;
       } else {
        i25 = i24;
        i23 = i21;
        break L30;
       }
      }
      i22 = i9;
      i27 = Math_imul(i13 - (HEAP32[i33 >> 2] | 0) | 0, i19) | 0;
      i21 = i23;
     }
    }
   } else {
    i22 = (i20 | 0) != 0;
    i23 = HEAP32[i21 + 92 >> 2] | 0;
    i28 = i24;
    while (1) {
     i24 = i21 + 88 | 0;
     i26 = i28 + 88 | 0;
     i31 = HEAP32[i28 + 92 >> 2] | 0;
     i29 = i23 - i31 | 0;
     i25 = HEAP32[(i22 ? i28 : i28 + 4 | 0) >> 2] | 0;
     L34 : do {
      if ((i25 | 0) == (i28 | 0)) {
       i25 = i28;
      } else {
       while (1) {
        i32 = HEAP32[i25 + 88 >> 2] | 0;
        i33 = Math_imul(i32 - (HEAP32[i26 >> 2] | 0) | 0, i19) | 0;
        i30 = HEAP32[i25 + 92 >> 2] | 0;
        i31 = i30 - i31 | 0;
        if ((i31 | 0) >= 1) {
         i25 = i28;
         break L34;
        }
        if ((i33 | 0) != 0) {
         if ((i33 | 0) >= 0) {
          i25 = i28;
          break L34;
         }
         if ((Math_imul(i31, i27) | 0) > (Math_imul(i33, i29) | 0)) {
          i25 = i28;
          break L34;
         }
        }
        i27 = Math_imul((HEAP32[i24 >> 2] | 0) - i32 | 0, i19) | 0;
        i26 = i25 + 88 | 0;
        i29 = i23 - i30 | 0;
        i28 = HEAP32[(i22 ? i25 : i25 + 4 | 0) >> 2] | 0;
        if ((i28 | 0) == (i25 | 0)) {
         break;
        } else {
         i36 = i25;
         i25 = i28;
         i31 = i30;
         i28 = i36;
        }
       }
      }
     } while (0);
     i30 = HEAP32[(i22 ? i21 : i21 + 4 | 0) >> 2] | 0;
     if ((i30 | 0) == (i21 | 0)) {
      i23 = i21;
      break L30;
     }
     i36 = HEAP32[i30 + 88 >> 2] | 0;
     i28 = Math_imul(i36 - (HEAP32[i24 >> 2] | 0) | 0, i19) | 0;
     i24 = HEAP32[i30 + 92 >> 2] | 0;
     i23 = i24 - i23 | 0;
     i26 = Math_imul(i36 - (HEAP32[i26 >> 2] | 0) | 0, i19) | 0;
     if (!((i26 | 0) > 0 & (i23 | 0) < 0)) {
      i23 = i21;
      break L30;
     }
     if ((i28 | 0) == 0) {
      i23 = i24;
      i27 = i26;
      i28 = i25;
      i21 = i30;
      continue;
     }
     if ((i28 | 0) >= 0) {
      i23 = i21;
      break L30;
     }
     if ((Math_imul(i23, i27) | 0) < (Math_imul(i28, i29) | 0)) {
      i23 = i24;
      i27 = i26;
      i28 = i25;
      i21 = i30;
     } else {
      i23 = i21;
      break;
     }
    }
   }
  } while (0);
  if ((i20 | 0) != 0) {
   i20 = i20 + 1 | 0;
   if ((i20 | 0) == 2) {
    break;
   } else {
    i24 = i25;
    i21 = i23;
    continue;
   }
  } else {
   i20 = i20 + 1 | 0;
   i19 = -1;
   i24 = HEAP32[i5 >> 2] | 0;
   i15 = i25;
   i21 = HEAP32[i4 >> 2] | 0;
   i17 = i23;
   continue;
  }
 }
 HEAP32[i25 + 4 >> 2] = i23;
 HEAP32[i23 >> 2] = i25;
 HEAP32[i15 >> 2] = i17;
 HEAP32[i17 + 4 >> 2] = i15;
 i7 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i7 + 88 >> 2] | 0) < (HEAP32[(HEAP32[i5 >> 2] | 0) + 88 >> 2] | 0)) {
  HEAP32[i5 >> 2] = i7;
 }
 i5 = HEAP32[i18 >> 2] | 0;
 if ((HEAP32[i5 + 88 >> 2] | 0) >= (HEAP32[(HEAP32[i16 >> 2] | 0) + 88 >> 2] | 0)) {
  HEAP32[i16 >> 2] = i5;
 }
 HEAP32[i6 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i3 >> 2] = i15;
 i36 = 1;
 i35 = i17;
 HEAP32[i1 >> 2] = i35;
 STACKTOP = i2;
 return i36 | 0;
}
function __ZN35btSequentialImpulseConstraintSolver22setupContactConstraintER18btSolverConstraintP17btCollisionObjectS3_R15btManifoldPointRK19btContactSolverInfoR9btVector3RfSB_SA_SA_(i3, i2, i7, i6, i12, i1, i15, i13, i22, i29, i20) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 i13 = i13 | 0;
 i22 = i22 | 0;
 i29 = i29 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d14 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0;
 i3 = STACKTOP;
 if ((HEAP32[i7 + 232 >> 2] & 2 | 0) == 0) {
  i5 = 0;
 } else {
  i5 = i7;
 }
 if ((HEAP32[i6 + 232 >> 2] & 2 | 0) == 0) {
  i4 = 0;
 } else {
  i4 = i6;
 }
 d45 = +HEAPF32[i12 + 52 >> 2] - +HEAPF32[i7 + 56 >> 2];
 d38 = +HEAPF32[i12 + 56 >> 2] - +HEAPF32[i7 + 60 >> 2];
 HEAPF32[i29 >> 2] = +HEAPF32[i12 + 48 >> 2] - +HEAPF32[i7 + 52 >> 2];
 i31 = i29 + 4 | 0;
 HEAPF32[i31 >> 2] = d45;
 i32 = i29 + 8 | 0;
 HEAPF32[i32 >> 2] = d38;
 HEAPF32[i29 + 12 >> 2] = 0.0;
 d38 = +HEAPF32[i12 + 36 >> 2] - +HEAPF32[i6 + 56 >> 2];
 d45 = +HEAPF32[i12 + 40 >> 2] - +HEAPF32[i6 + 60 >> 2];
 HEAPF32[i20 >> 2] = +HEAPF32[i12 + 32 >> 2] - +HEAPF32[i6 + 52 >> 2];
 i27 = i20 + 4 | 0;
 HEAPF32[i27 >> 2] = d38;
 i28 = i20 + 8 | 0;
 HEAPF32[i28 >> 2] = d45;
 HEAPF32[i20 + 12 >> 2] = 0.0;
 HEAPF32[i22 >> 2] = 1.0;
 i21 = i12 + 64 | 0;
 d45 = +HEAPF32[i31 >> 2];
 i19 = i12 + 72 | 0;
 d38 = +HEAPF32[i19 >> 2];
 d42 = +HEAPF32[i32 >> 2];
 i18 = i12 + 68 | 0;
 d43 = +HEAPF32[i18 >> 2];
 d39 = d45 * d38 - d42 * d43;
 d37 = +HEAPF32[i21 >> 2];
 d44 = +HEAPF32[i29 >> 2];
 d38 = d42 * d37 - d38 * d44;
 d37 = d43 * d44 - d45 * d37;
 i7 = (i5 | 0) != 0;
 if (i7) {
  d36 = (d39 * +HEAPF32[i5 + 256 >> 2] + d38 * +HEAPF32[i5 + 260 >> 2] + d37 * +HEAPF32[i5 + 264 >> 2]) * +HEAPF32[i5 + 536 >> 2];
  d35 = (d39 * +HEAPF32[i5 + 272 >> 2] + d38 * +HEAPF32[i5 + 276 >> 2] + d37 * +HEAPF32[i5 + 280 >> 2]) * +HEAPF32[i5 + 540 >> 2];
  d37 = (d39 * +HEAPF32[i5 + 288 >> 2] + d38 * +HEAPF32[i5 + 292 >> 2] + d37 * +HEAPF32[i5 + 296 >> 2]) * +HEAPF32[i5 + 544 >> 2];
 } else {
  d36 = 0.0;
  d35 = 0.0;
  d37 = 0.0;
 }
 HEAPF32[i2 + 48 >> 2] = d36;
 i17 = i2 + 52 | 0;
 HEAPF32[i17 >> 2] = d35;
 i16 = i2 + 56 | 0;
 HEAPF32[i16 >> 2] = d37;
 HEAPF32[i2 + 60 >> 2] = 0.0;
 d39 = +HEAPF32[i27 >> 2];
 d42 = +HEAPF32[i19 >> 2];
 d43 = +HEAPF32[i28 >> 2];
 d41 = +HEAPF32[i18 >> 2];
 d38 = +HEAPF32[i21 >> 2];
 d40 = +HEAPF32[i20 >> 2];
 i6 = (i4 | 0) != 0;
 if (i6) {
  d44 = -(d39 * d42 - d43 * d41);
  d45 = -(d43 * d38 - d42 * d40);
  d38 = -(d41 * d40 - d39 * d38);
  d39 = (+HEAPF32[i4 + 256 >> 2] * d44 + +HEAPF32[i4 + 260 >> 2] * d45 + +HEAPF32[i4 + 264 >> 2] * d38) * +HEAPF32[i4 + 536 >> 2];
  d40 = (+HEAPF32[i4 + 272 >> 2] * d44 + +HEAPF32[i4 + 276 >> 2] * d45 + +HEAPF32[i4 + 280 >> 2] * d38) * +HEAPF32[i4 + 540 >> 2];
  d38 = (+HEAPF32[i4 + 288 >> 2] * d44 + +HEAPF32[i4 + 292 >> 2] * d45 + +HEAPF32[i4 + 296 >> 2] * d38) * +HEAPF32[i4 + 544 >> 2];
 } else {
  d39 = 0.0;
  d40 = 0.0;
  d38 = 0.0;
 }
 HEAPF32[i2 + 64 >> 2] = d39;
 i30 = i2 + 68 | 0;
 HEAPF32[i30 >> 2] = d40;
 i33 = i2 + 72 | 0;
 HEAPF32[i33 >> 2] = d38;
 HEAPF32[i2 + 76 >> 2] = 0.0;
 if (i7) {
  d43 = +HEAPF32[i32 >> 2];
  d44 = +HEAPF32[i31 >> 2];
  d45 = +HEAPF32[i29 >> 2];
  d35 = +HEAPF32[i5 + 336 >> 2] + ((d35 * d43 - d37 * d44) * +HEAPF32[i21 >> 2] + (d37 * d45 - d43 * d36) * +HEAPF32[i18 >> 2] + (d44 * d36 - d35 * d45) * +HEAPF32[i19 >> 2]);
 } else {
  d35 = 0.0;
 }
 if (i6) {
  d44 = -d39;
  d36 = -d40;
  d41 = -d38;
  d42 = +HEAPF32[i28 >> 2];
  d43 = +HEAPF32[i27 >> 2];
  d45 = +HEAPF32[i20 >> 2];
  d36 = +HEAPF32[i4 + 336 >> 2] + ((d42 * d36 - d43 * d41) * +HEAPF32[i21 >> 2] + (d45 * d41 - d42 * d44) * +HEAPF32[i18 >> 2] + (d43 * d44 - d45 * d36) * +HEAPF32[i19 >> 2]);
 } else {
  d36 = 0.0;
 }
 i11 = i2 + 92 | 0;
 HEAPF32[i11 >> 2] = +HEAPF32[i22 >> 2] / (d35 + d36);
 i34 = i2 + 16 | 0;
 HEAP32[i34 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
 HEAP32[i34 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i34 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i34 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 d43 = +HEAPF32[i31 >> 2];
 d40 = +HEAPF32[i19 >> 2];
 d42 = +HEAPF32[i32 >> 2];
 d44 = +HEAPF32[i18 >> 2];
 d45 = +HEAPF32[i21 >> 2];
 d41 = +HEAPF32[i29 >> 2];
 HEAPF32[i2 >> 2] = d43 * d40 - d42 * d44;
 i22 = i2 + 4 | 0;
 HEAPF32[i22 >> 2] = d42 * d45 - d40 * d41;
 i26 = i2 + 8 | 0;
 HEAPF32[i26 >> 2] = d44 * d41 - d43 * d45;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 d45 = -+HEAPF32[i21 >> 2];
 d43 = -+HEAPF32[i18 >> 2];
 d41 = -+HEAPF32[i19 >> 2];
 d44 = +HEAPF32[i27 >> 2];
 d40 = +HEAPF32[i28 >> 2];
 d42 = +HEAPF32[i20 >> 2];
 i23 = i2 + 32 | 0;
 HEAPF32[i23 >> 2] = d44 * d41 - d40 * d43;
 i24 = i2 + 36 | 0;
 HEAPF32[i24 >> 2] = d40 * d45 - d42 * d41;
 i25 = i2 + 40 | 0;
 HEAPF32[i25 >> 2] = d42 * d43 - d44 * d45;
 HEAPF32[i2 + 44 >> 2] = 0.0;
 if (i7) {
  d45 = +HEAPF32[i5 + 324 >> 2];
  d36 = +HEAPF32[i32 >> 2];
  d42 = +HEAPF32[i5 + 328 >> 2];
  d43 = +HEAPF32[i31 >> 2];
  d35 = +HEAPF32[i29 >> 2];
  d44 = +HEAPF32[i5 + 320 >> 2];
  d37 = d45 * d36 - d42 * d43 + +HEAPF32[i5 + 304 >> 2];
  d36 = +HEAPF32[i5 + 308 >> 2] + (d42 * d35 - d36 * d44);
  d35 = d43 * d44 - d45 * d35 + +HEAPF32[i5 + 312 >> 2];
 } else {
  d37 = 0.0;
  d36 = 0.0;
  d35 = 0.0;
 }
 if (i6) {
  d45 = +HEAPF32[i4 + 324 >> 2];
  d40 = +HEAPF32[i28 >> 2];
  d42 = +HEAPF32[i4 + 328 >> 2];
  d43 = +HEAPF32[i27 >> 2];
  d39 = +HEAPF32[i20 >> 2];
  d44 = +HEAPF32[i4 + 320 >> 2];
  d38 = d45 * d40 - d42 * d43 + +HEAPF32[i4 + 304 >> 2];
  d40 = +HEAPF32[i4 + 308 >> 2] + (d42 * d39 - d40 * d44);
  d39 = d43 * d44 - d45 * d39 + +HEAPF32[i4 + 312 >> 2];
 } else {
  d38 = 0.0;
  d40 = 0.0;
  d39 = 0.0;
 }
 d44 = d37 - d38;
 d45 = d36 - d40;
 d35 = d35 - d39;
 HEAPF32[i15 >> 2] = d44;
 HEAPF32[i15 + 4 >> 2] = d45;
 HEAPF32[i15 + 8 >> 2] = d35;
 HEAPF32[i15 + 12 >> 2] = 0.0;
 HEAPF32[i13 >> 2] = +HEAPF32[i21 >> 2] * d44 + +HEAPF32[i18 >> 2] * d45 + +HEAPF32[i19 >> 2] * d35;
 d35 = +HEAPF32[i12 + 80 >> 2] + +HEAPF32[i1 + 52 >> 2];
 HEAPF32[i2 + 88 >> 2] = +HEAPF32[i12 + 84 >> 2];
 if ((HEAP32[i12 + 144 >> 2] | 0) <= (HEAP32[i1 + 64 >> 2] | 0) ? (d14 = +HEAPF32[i13 >> 2] * +HEAPF32[i12 + 88 >> 2], !(d14 >= -0.0)) : 0) {
  d14 = -d14;
 } else {
  d14 = 0.0;
 }
 if ((HEAP32[i1 + 60 >> 2] & 4 | 0) != 0) {
  d36 = +HEAPF32[i12 + 112 >> 2] * +HEAPF32[i1 + 56 >> 2];
  i12 = i2 + 84 | 0;
  HEAPF32[i12 >> 2] = d36;
  if (i7 ? (d9 = +HEAPF32[i5 + 336 >> 2], d9 != 0.0) : 0) {
   d45 = d36 * d9 * +HEAPF32[i2 + 20 >> 2] * +HEAPF32[i5 + 344 >> 2];
   d44 = d36 * d9 * +HEAPF32[i2 + 24 >> 2] * +HEAPF32[i5 + 348 >> 2];
   i32 = i5 + 504 | 0;
   HEAPF32[i32 >> 2] = +HEAPF32[i32 >> 2] + d36 * d9 * +HEAPF32[i34 >> 2] * +HEAPF32[i5 + 340 >> 2];
   i32 = i5 + 508 | 0;
   HEAPF32[i32 >> 2] = d45 + +HEAPF32[i32 >> 2];
   i32 = i5 + 512 | 0;
   HEAPF32[i32 >> 2] = d44 + +HEAPF32[i32 >> 2];
   d44 = d36 * +HEAPF32[i5 + 540 >> 2] * +HEAPF32[i17 >> 2];
   d45 = d36 * +HEAPF32[i5 + 544 >> 2] * +HEAPF32[i16 >> 2];
   i32 = i5 + 520 | 0;
   HEAPF32[i32 >> 2] = d36 * +HEAPF32[i5 + 536 >> 2] * +HEAPF32[i2 + 48 >> 2] + +HEAPF32[i32 >> 2];
   i32 = i5 + 524 | 0;
   HEAPF32[i32 >> 2] = d44 + +HEAPF32[i32 >> 2];
   i32 = i5 + 528 | 0;
   HEAPF32[i32 >> 2] = d45 + +HEAPF32[i32 >> 2];
  }
  if (i6 ? (d10 = +HEAPF32[i4 + 336 >> 2], d8 = -+HEAPF32[i12 >> 2], d10 != 0.0) : 0) {
   d45 = +HEAPF32[i33 >> 2];
   d44 = +HEAPF32[i30 >> 2];
   d43 = +HEAPF32[i2 + 64 >> 2];
   d41 = d10 * +HEAPF32[i2 + 20 >> 2] * +HEAPF32[i4 + 344 >> 2] * d8;
   d42 = d10 * +HEAPF32[i2 + 24 >> 2] * +HEAPF32[i4 + 348 >> 2] * d8;
   i33 = i4 + 504 | 0;
   HEAPF32[i33 >> 2] = d10 * +HEAPF32[i34 >> 2] * +HEAPF32[i4 + 340 >> 2] * d8 + +HEAPF32[i33 >> 2];
   i33 = i4 + 508 | 0;
   HEAPF32[i33 >> 2] = d41 + +HEAPF32[i33 >> 2];
   i33 = i4 + 512 | 0;
   HEAPF32[i33 >> 2] = d42 + +HEAPF32[i33 >> 2];
   d44 = d44 * +HEAPF32[i4 + 540 >> 2] * d8;
   d45 = d45 * +HEAPF32[i4 + 544 >> 2] * d8;
   i33 = i4 + 520 | 0;
   HEAPF32[i33 >> 2] = +HEAPF32[i33 >> 2] - d43 * +HEAPF32[i4 + 536 >> 2] * d8;
   i33 = i4 + 524 | 0;
   HEAPF32[i33 >> 2] = +HEAPF32[i33 >> 2] - d44;
   i33 = i4 + 528 | 0;
   HEAPF32[i33 >> 2] = +HEAPF32[i33 >> 2] - d45;
  }
 } else {
  HEAPF32[i2 + 84 >> 2] = 0.0;
 }
 HEAPF32[i2 + 80 >> 2] = 0.0;
 if (i7) {
  d10 = +HEAPF32[i5 + 304 >> 2];
  d9 = +HEAPF32[i5 + 308 >> 2];
  d8 = +HEAPF32[i5 + 312 >> 2];
 } else {
  d10 = 0.0;
  d9 = 0.0;
  d8 = 0.0;
 }
 d38 = +HEAPF32[i34 >> 2];
 d36 = +HEAPF32[i2 + 20 >> 2];
 d37 = +HEAPF32[i2 + 24 >> 2];
 if (i7) {
  d40 = +HEAPF32[i5 + 320 >> 2];
  d39 = +HEAPF32[i5 + 324 >> 2];
  d41 = +HEAPF32[i5 + 328 >> 2];
 } else {
  d40 = 0.0;
  d39 = 0.0;
  d41 = 0.0;
 }
 if (i6) {
  d44 = +HEAPF32[i4 + 320 >> 2];
  d43 = +HEAPF32[i4 + 324 >> 2];
  d42 = +HEAPF32[i4 + 328 >> 2];
  d45 = +HEAPF32[i4 + 304 >> 2] * d38 + +HEAPF32[i4 + 308 >> 2] * d36 + +HEAPF32[i4 + 312 >> 2] * d37;
 } else {
  d44 = 0.0;
  d43 = 0.0;
  d42 = 0.0;
  d45 = d38 * 0.0 + d36 * 0.0 + d37 * 0.0;
 }
 d8 = d14 - (d10 * d38 + d9 * d36 + d8 * d37 + (d40 * +HEAPF32[i2 >> 2] + d39 * +HEAPF32[i22 >> 2] + d41 * +HEAPF32[i26 >> 2]) + (d44 * +HEAPF32[i23 >> 2] + d43 * +HEAPF32[i24 >> 2] + d42 * +HEAPF32[i25 >> 2] - d45));
 if (d35 > 0.0) {
  d9 = 0.0;
  d8 = d8 - d35 / +HEAPF32[i1 + 12 >> 2];
 } else {
  d9 = -(d35 * +HEAPF32[i1 + 32 >> 2]) / +HEAPF32[i1 + 12 >> 2];
 }
 d45 = +HEAPF32[i11 >> 2];
 d9 = d9 * d45;
 d8 = d8 * d45;
 if ((HEAP32[i1 + 44 >> 2] | 0) != 0 ? !(d35 > +HEAPF32[i1 + 48 >> 2]) : 0) {
  HEAPF32[i2 + 116 >> 2] = d8;
  HEAPF32[i2 + 132 >> 2] = d9;
  i34 = i2 + 120 | 0;
  HEAPF32[i34 >> 2] = 0.0;
  i34 = i2 + 124 | 0;
  HEAPF32[i34 >> 2] = 0.0;
  i34 = i2 + 128 | 0;
  HEAPF32[i34 >> 2] = 1.0e10;
  STACKTOP = i3;
  return;
 }
 HEAPF32[i2 + 116 >> 2] = d9 + d8;
 HEAPF32[i2 + 132 >> 2] = 0.0;
 i34 = i2 + 120 | 0;
 HEAPF32[i34 >> 2] = 0.0;
 i34 = i2 + 124 | 0;
 HEAPF32[i34 >> 2] = 0.0;
 i34 = i2 + 128 | 0;
 HEAPF32[i34 >> 2] = 1.0e10;
 STACKTOP = i3;
 return;
}
function __ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i51, i48, i21, i52, i37, i2) {
 i51 = i51 | 0;
 i48 = i48 | 0;
 i21 = i21 | 0;
 i52 = i52 | 0;
 i37 = i37 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, i38 = 0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, i45 = 0, d46 = 0.0, d47 = 0.0, i49 = 0, i50 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, d70 = 0.0, d71 = 0.0, d72 = 0.0, d73 = 0.0, i74 = 0, d75 = 0.0, d76 = 0.0, d77 = 0.0, d78 = 0.0, d79 = 0.0, d80 = 0.0, d81 = 0.0, d82 = 0.0, d83 = 0.0, d84 = 0.0, d85 = 0.0, d86 = 0.0, d87 = 0.0, i88 = 0, i89 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i14 = i1 + 208 | 0;
 i11 = i1 + 192 | 0;
 i58 = i1 + 176 | 0;
 i56 = i1 + 160 | 0;
 i12 = i1 + 144 | 0;
 i66 = i1 + 128 | 0;
 i65 = i1 + 112 | 0;
 i10 = i1 + 96 | 0;
 i18 = i1 + 80 | 0;
 i19 = i1 + 64 | 0;
 i9 = i1 + 48 | 0;
 i17 = i1 + 32 | 0;
 i4 = i1 + 16 | 0;
 i3 = i1;
 i5 = i51 + 4 | 0;
 __ZN22btVoronoiSimplexSolver5resetEv(HEAP32[i5 >> 2] | 0);
 i20 = i21 + 48 | 0;
 i13 = i48 + 48 | 0;
 d70 = +HEAPF32[i13 >> 2];
 i16 = i21 + 52 | 0;
 i15 = i48 + 52 | 0;
 d72 = +HEAPF32[i15 >> 2];
 i25 = i21 + 56 | 0;
 i26 = i48 + 56 | 0;
 d76 = +HEAPF32[i26 >> 2];
 i21 = i37 + 48 | 0;
 i24 = i52 + 48 | 0;
 d73 = +HEAPF32[i24 >> 2];
 i23 = i37 + 52 | 0;
 i22 = i52 + 52 | 0;
 d78 = +HEAPF32[i22 >> 2];
 i38 = i37 + 56 | 0;
 i37 = i52 + 56 | 0;
 d82 = +HEAPF32[i37 >> 2];
 d27 = +HEAPF32[i48 >> 2];
 i50 = i48 + 4 | 0;
 d31 = +HEAPF32[i50 >> 2];
 i49 = i48 + 8 | 0;
 d34 = +HEAPF32[i49 >> 2];
 i59 = i48 + 16 | 0;
 d28 = +HEAPF32[i59 >> 2];
 i60 = i48 + 20 | 0;
 d32 = +HEAPF32[i60 >> 2];
 i61 = i48 + 24 | 0;
 d35 = +HEAPF32[i61 >> 2];
 i62 = i48 + 32 | 0;
 d29 = +HEAPF32[i62 >> 2];
 i63 = i48 + 36 | 0;
 d33 = +HEAPF32[i63 >> 2];
 i64 = i48 + 40 | 0;
 d36 = +HEAPF32[i64 >> 2];
 d42 = +HEAPF32[i52 >> 2];
 i67 = i52 + 4 | 0;
 d46 = +HEAPF32[i67 >> 2];
 i69 = i52 + 8 | 0;
 d40 = +HEAPF32[i69 >> 2];
 i74 = i52 + 16 | 0;
 d43 = +HEAPF32[i74 >> 2];
 i88 = i52 + 20 | 0;
 d47 = +HEAPF32[i88 >> 2];
 i68 = i52 + 24 | 0;
 d39 = +HEAPF32[i68 >> 2];
 i57 = i52 + 32 | 0;
 d44 = +HEAPF32[i57 >> 2];
 i54 = i52 + 36 | 0;
 d41 = +HEAPF32[i54 >> 2];
 i53 = i52 + 40 | 0;
 d30 = +HEAPF32[i53 >> 2];
 d6 = +HEAPF32[i20 >> 2] - d70 - (+HEAPF32[i21 >> 2] - d73);
 d7 = +HEAPF32[i16 >> 2] - d72 - (+HEAPF32[i23 >> 2] - d78);
 d8 = +HEAPF32[i25 >> 2] - d76 - (+HEAPF32[i38 >> 2] - d82);
 i45 = i51 + 8 | 0;
 i55 = HEAP32[i45 >> 2] | 0;
 i89 = HEAP32[(HEAP32[i55 >> 2] | 0) + 60 >> 2] | 0;
 d87 = -d6;
 d85 = -d7;
 d86 = -d8;
 HEAPF32[i56 >> 2] = d27 * d87 + d28 * d85 + d29 * d86;
 HEAPF32[i56 + 4 >> 2] = d31 * d87 + d32 * d85 + d33 * d86;
 HEAPF32[i56 + 8 >> 2] = d34 * d87 + d35 * d85 + d36 * d86;
 HEAPF32[i56 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i89 & 63](i58, i55, i56);
 d86 = +HEAPF32[i58 >> 2];
 d85 = +HEAPF32[i58 + 4 >> 2];
 d87 = +HEAPF32[i58 + 8 >> 2];
 d83 = +HEAPF32[i15 >> 2] + (d86 * +HEAPF32[i59 >> 2] + d85 * +HEAPF32[i60 >> 2] + d87 * +HEAPF32[i61 >> 2]);
 d84 = +HEAPF32[i26 >> 2] + (d86 * +HEAPF32[i62 >> 2] + d85 * +HEAPF32[i63 >> 2] + d87 * +HEAPF32[i64 >> 2]);
 HEAPF32[i11 >> 2] = +HEAPF32[i13 >> 2] + (+HEAPF32[i48 >> 2] * d86 + +HEAPF32[i50 >> 2] * d85 + +HEAPF32[i49 >> 2] * d87);
 i48 = i11 + 4 | 0;
 HEAPF32[i48 >> 2] = d83;
 i49 = i11 + 8 | 0;
 HEAPF32[i49 >> 2] = d84;
 i50 = i11 + 12 | 0;
 HEAPF32[i50 >> 2] = 0.0;
 i51 = i51 + 12 | 0;
 i64 = HEAP32[i51 >> 2] | 0;
 i63 = HEAP32[(HEAP32[i64 >> 2] | 0) + 60 >> 2] | 0;
 d84 = d6 * +HEAPF32[i67 >> 2] + d7 * +HEAPF32[i88 >> 2] + d8 * +HEAPF32[i54 >> 2];
 d83 = d6 * +HEAPF32[i69 >> 2] + d7 * +HEAPF32[i68 >> 2] + d8 * +HEAPF32[i53 >> 2];
 HEAPF32[i65 >> 2] = d6 * +HEAPF32[i52 >> 2] + d7 * +HEAPF32[i74 >> 2] + d8 * +HEAPF32[i57 >> 2];
 HEAPF32[i65 + 4 >> 2] = d84;
 HEAPF32[i65 + 8 >> 2] = d83;
 HEAPF32[i65 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i63 & 63](i66, i64, i65);
 d83 = +HEAPF32[i66 >> 2];
 d84 = +HEAPF32[i66 + 4 >> 2];
 d87 = +HEAPF32[i66 + 8 >> 2];
 d85 = +HEAPF32[i24 >> 2] + (+HEAPF32[i52 >> 2] * d83 + +HEAPF32[i67 >> 2] * d84 + +HEAPF32[i69 >> 2] * d87);
 d86 = +HEAPF32[i22 >> 2] + (d83 * +HEAPF32[i74 >> 2] + d84 * +HEAPF32[i88 >> 2] + d87 * +HEAPF32[i68 >> 2]);
 d87 = +HEAPF32[i37 >> 2] + (d83 * +HEAPF32[i57 >> 2] + d84 * +HEAPF32[i54 >> 2] + d87 * +HEAPF32[i53 >> 2]);
 HEAPF32[i12 >> 2] = d85;
 i52 = i12 + 4 | 0;
 HEAPF32[i52 >> 2] = d86;
 i53 = i12 + 8 | 0;
 HEAPF32[i53 >> 2] = d87;
 i54 = i12 + 12 | 0;
 HEAPF32[i54 >> 2] = 0.0;
 d85 = +HEAPF32[i11 >> 2] - d85;
 d86 = +HEAPF32[i48 >> 2] - d86;
 d87 = +HEAPF32[i49 >> 2] - d87;
 HEAPF32[i14 >> 2] = d85;
 i57 = i14 + 4 | 0;
 HEAPF32[i57 >> 2] = d86;
 i68 = i14 + 8 | 0;
 HEAPF32[i68 >> 2] = d87;
 HEAPF32[i14 + 12 >> 2] = 0.0;
 L1 : do {
  if (d85 * d85 + d86 * d86 + d87 * d87 > 9999999747378752.0e-20) {
   i59 = i19 + 4 | 0;
   i58 = i19 + 8 | 0;
   i56 = i19 + 12 | 0;
   i55 = i18 + 4 | 0;
   i64 = i18 + 8 | 0;
   i66 = i17 + 4 | 0;
   i65 = i17 + 8 | 0;
   i69 = i17 + 12 | 0;
   i63 = i9 + 4 | 0;
   i62 = i9 + 8 | 0;
   i67 = i10 + 4 | 0;
   i61 = i10 + 8 | 0;
   i60 = i10 + 12 | 0;
   d75 = 0.0;
   d77 = 0.0;
   d80 = 0.0;
   d71 = 0.0;
   i88 = 32;
   while (1) {
    i74 = i88 + -1 | 0;
    if ((i88 | 0) == 0) {
     break L1;
    }
    i89 = HEAP32[i45 >> 2] | 0;
    i88 = HEAP32[(HEAP32[i89 >> 2] | 0) + 60 >> 2] | 0;
    d87 = -+HEAPF32[i14 >> 2];
    d79 = -+HEAPF32[i57 >> 2];
    d81 = -+HEAPF32[i68 >> 2];
    HEAPF32[i19 >> 2] = d27 * d87 + d28 * d79 + d29 * d81;
    HEAPF32[i59 >> 2] = d31 * d87 + d32 * d79 + d33 * d81;
    HEAPF32[i58 >> 2] = d34 * d87 + d35 * d79 + d36 * d81;
    HEAPF32[i56 >> 2] = 0.0;
    FUNCTION_TABLE_viii[i88 & 63](i18, i89, i19);
    d81 = +HEAPF32[i18 >> 2];
    d79 = +HEAPF32[i55 >> 2];
    d87 = +HEAPF32[i64 >> 2];
    HEAPF32[i11 >> 2] = d70 + (d27 * d81 + d31 * d79 + d34 * d87);
    HEAPF32[i48 >> 2] = d72 + (d28 * d81 + d32 * d79 + d35 * d87);
    HEAPF32[i49 >> 2] = d76 + (d29 * d81 + d33 * d79 + d36 * d87);
    HEAPF32[i50 >> 2] = 0.0;
    i89 = HEAP32[i51 >> 2] | 0;
    i88 = HEAP32[(HEAP32[i89 >> 2] | 0) + 60 >> 2] | 0;
    d87 = +HEAPF32[i14 >> 2];
    d79 = +HEAPF32[i57 >> 2];
    d81 = +HEAPF32[i68 >> 2];
    HEAPF32[i17 >> 2] = d42 * d87 + d43 * d79 + d44 * d81;
    HEAPF32[i66 >> 2] = d46 * d87 + d47 * d79 + d41 * d81;
    HEAPF32[i65 >> 2] = d40 * d87 + d39 * d79 + d30 * d81;
    HEAPF32[i69 >> 2] = 0.0;
    FUNCTION_TABLE_viii[i88 & 63](i9, i89, i17);
    d81 = +HEAPF32[i9 >> 2];
    d79 = +HEAPF32[i63 >> 2];
    d87 = +HEAPF32[i62 >> 2];
    d85 = d73 + (d42 * d81 + d46 * d79 + d40 * d87);
    d86 = d78 + (d43 * d81 + d47 * d79 + d39 * d87);
    d87 = d82 + (d44 * d81 + d41 * d79 + d30 * d87);
    HEAPF32[i12 >> 2] = d85;
    HEAPF32[i52 >> 2] = d86;
    HEAPF32[i53 >> 2] = d87;
    HEAPF32[i54 >> 2] = 0.0;
    d85 = +HEAPF32[i11 >> 2] - d85;
    d86 = +HEAPF32[i48 >> 2] - d86;
    d87 = +HEAPF32[i49 >> 2] - d87;
    HEAPF32[i10 >> 2] = d85;
    HEAPF32[i67 >> 2] = d86;
    HEAPF32[i61 >> 2] = d87;
    HEAPF32[i60 >> 2] = 0.0;
    d79 = +HEAPF32[i14 >> 2];
    d81 = +HEAPF32[i57 >> 2];
    d83 = +HEAPF32[i68 >> 2];
    d84 = d79 * d85 + d81 * d86 + d83 * d87;
    if (d71 > 1.0) {
     i2 = 0;
     i9 = 17;
     break;
    }
    if (d84 > 0.0) {
     d70 = d6 * d79 + d7 * d81 + d8 * d83;
     if (d70 >= -1.4210854715202004e-14) {
      i2 = 0;
      i9 = 17;
      break;
     }
     d71 = d71 - d84 / d70;
     d82 = 1.0 - d71;
     d70 = +HEAPF32[i13 >> 2] * d82 + d71 * +HEAPF32[i20 >> 2];
     d72 = d82 * +HEAPF32[i15 >> 2] + d71 * +HEAPF32[i16 >> 2];
     d76 = d82 * +HEAPF32[i26 >> 2] + d71 * +HEAPF32[i25 >> 2];
     d73 = d82 * +HEAPF32[i24 >> 2] + d71 * +HEAPF32[i21 >> 2];
     d78 = d82 * +HEAPF32[i22 >> 2] + d71 * +HEAPF32[i23 >> 2];
     d82 = d82 * +HEAPF32[i37 >> 2] + d71 * +HEAPF32[i38 >> 2];
     HEAPF32[i10 >> 2] = d85;
     HEAPF32[i67 >> 2] = d86;
     HEAPF32[i61 >> 2] = d87;
     HEAPF32[i60 >> 2] = 0.0;
     d80 = d83;
     d77 = d81;
     d75 = d79;
    }
    if (!(__ZN22btVoronoiSimplexSolver9inSimplexERK9btVector3(HEAP32[i5 >> 2] | 0, i10) | 0)) {
     __ZN22btVoronoiSimplexSolver9addVertexERK9btVector3S2_S2_(HEAP32[i5 >> 2] | 0, i10, i11, i12);
    }
    if (!(__ZN22btVoronoiSimplexSolver7closestER9btVector3(HEAP32[i5 >> 2] | 0, i14) | 0)) {
     break L1;
    }
    d85 = +HEAPF32[i14 >> 2];
    d86 = +HEAPF32[i57 >> 2];
    d87 = +HEAPF32[i68 >> 2];
    if (d85 * d85 + d86 * d86 + d87 * d87 > 9999999747378752.0e-20) {
     i88 = i74;
    } else {
     break L1;
    }
   }
   if ((i9 | 0) == 17) {
    STACKTOP = i1;
    return i2 | 0;
   }
  } else {
   d80 = 0.0;
   d77 = 0.0;
   d75 = 0.0;
   d71 = 0.0;
  }
 } while (0);
 HEAPF32[i2 + 164 >> 2] = d71;
 d27 = d80 * d80 + (d77 * d77 + d75 * d75);
 if (!(d27 >= 1.4210854715202004e-14)) {
  i89 = i2 + 132 | 0;
  HEAP32[i89 + 0 >> 2] = 0;
  HEAP32[i89 + 4 >> 2] = 0;
  HEAP32[i89 + 8 >> 2] = 0;
  HEAP32[i89 + 12 >> 2] = 0;
  d29 = 0.0;
  d28 = 0.0;
  d27 = 0.0;
 } else {
  d27 = 1.0 / +Math_sqrt(+d27);
  d29 = d75 * d27;
  d28 = d77 * d27;
  d27 = d80 * d27;
  HEAPF32[i2 + 132 >> 2] = d29;
  HEAPF32[i2 + 136 >> 2] = d28;
  HEAPF32[i2 + 140 >> 2] = d27;
  HEAPF32[i2 + 144 >> 2] = 0.0;
 }
 if (d6 * d29 + d7 * d28 + d8 * d27 >= -+HEAPF32[i2 + 172 >> 2]) {
  i89 = 0;
  STACKTOP = i1;
  return i89 | 0;
 }
 __ZN22btVoronoiSimplexSolver14compute_pointsER9btVector3S1_(HEAP32[i5 >> 2] | 0, i4, i3);
 i89 = i2 + 148 | 0;
 HEAP32[i89 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i89 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i89 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i89 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i89 = 1;
 STACKTOP = i1;
 return i89 | 0;
}
function __ZN13BenchmarkDemo11initPhysicsEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 40288 | 0;
 i1 = i3 + 232 | 0;
 i5 = i3 + 200 | 0;
 i13 = i3 + 184 | 0;
 i8 = i3 + 168 | 0;
 i6 = i3 + 152 | 0;
 i7 = i3;
 i4 = i3 + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 4096;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 1;
 HEAP32[i5 + 12 >> 2] = 32768;
 i14 = __Znwj(88) | 0;
 __ZN31btDefaultCollisionConfigurationC2ERK34btDefaultCollisionConstructionInfo(i14, i5);
 i5 = i2 + 64 | 0;
 HEAP32[i5 >> 2] = i14;
 i15 = __Znwj(5388) | 0;
 __ZN21btCollisionDispatcherC2EP24btCollisionConfiguration(i15, i14);
 i14 = i2 + 56 | 0;
 HEAP32[i14 >> 2] = i15;
 HEAP32[i15 + 4 >> 2] = 4;
 HEAPF32[i13 >> 2] = -1.0e3;
 HEAPF32[i13 + 4 >> 2] = -1.0e3;
 HEAPF32[i13 + 8 >> 2] = -1.0e3;
 HEAPF32[i13 + 12 >> 2] = 0.0;
 HEAPF32[i8 >> 2] = 1.0e3;
 HEAPF32[i8 + 4 >> 2] = 1.0e3;
 HEAPF32[i8 + 8 >> 2] = 1.0e3;
 HEAPF32[i8 + 12 >> 2] = 0.0;
 i15 = __Znwj(76) | 0;
 __ZN28btHashedOverlappingPairCacheC2Ev(i15);
 i16 = __Z22btAlignedAllocInternalji(116, 16) | 0;
 __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i16, i13, i8, 3500, i15, 0);
 i15 = i2 + 52 | 0;
 HEAP32[i15 >> 2] = i16;
 i16 = __Znwj(128) | 0;
 __ZN35btSequentialImpulseConstraintSolverC2Ev(i16);
 HEAP32[i2 + 60 >> 2] = i16;
 i8 = __Znwj(268) | 0;
 __ZN23btDiscreteDynamicsWorldC2EP12btDispatcherP21btBroadphaseInterfaceP18btConstraintSolverP24btCollisionConfiguration(i8, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, i16, HEAP32[i5 >> 2] | 0);
 i5 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = i8;
 i16 = i8 + 160 | 0;
 HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 32;
 HEAP32[i8 + 120 >> 2] = 5;
 HEAPF32[i2 + 8 >> 2] = 0.0;
 i16 = HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] | 0;
 HEAPF32[i6 >> 2] = 0.0;
 HEAPF32[i6 + 4 >> 2] = -10.0;
 HEAPF32[i6 + 8 >> 2] = 0.0;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_vii[i16 & 127](i8, i6);
 i6 = i2 + 68 | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 if ((i8 | 0) < 5) {
  i8 = __Z22btAlignedAllocInternalji(56, 16) | 0;
  __ZN23btPolyhedralConvexShapeC2Ev(i8);
  HEAP32[i8 >> 2] = 447328;
  HEAP32[i8 + 4 >> 2] = 0;
  d19 = +HEAPF32[i8 + 44 >> 2];
  d18 = +HEAPF32[i8 + 16 >> 2] * 50.0 - d19;
  d17 = +HEAPF32[i8 + 20 >> 2] * 250.0 - d19;
  HEAPF32[i8 + 28 >> 2] = +HEAPF32[i8 + 12 >> 2] * 250.0 - d19;
  HEAPF32[i8 + 32 >> 2] = d18;
  HEAPF32[i8 + 36 >> 2] = d17;
  HEAPF32[i8 + 40 >> 2] = 0.0;
  i9 = i2 + 16 | 0;
  i14 = HEAP32[i9 >> 2] | 0;
  i11 = i2 + 20 | 0;
  if ((i14 | 0) == (HEAP32[i11 >> 2] | 0) ? (i10 = (i14 | 0) == 0 ? 1 : i14 << 1, (i14 | 0) < (i10 | 0)) : 0) {
   if ((i10 | 0) == 0) {
    i12 = 0;
   } else {
    i12 = __Z22btAlignedAllocInternalji(i10 << 2, 16) | 0;
    i14 = HEAP32[i9 >> 2] | 0;
   }
   i13 = i2 + 24 | 0;
   if ((i14 | 0) > 0) {
    i15 = 0;
    do {
     i16 = i12 + (i15 << 2) | 0;
     if ((i16 | 0) != 0) {
      HEAP32[i16 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + (i15 << 2) >> 2];
     }
     i15 = i15 + 1 | 0;
    } while ((i15 | 0) != (i14 | 0));
   }
   i16 = HEAP32[i13 >> 2] | 0;
   i15 = i2 + 28 | 0;
   if ((i16 | 0) != 0) {
    if ((HEAP8[i15] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i16);
     i14 = HEAP32[i9 >> 2] | 0;
    }
    HEAP32[i13 >> 2] = 0;
   }
   HEAP8[i15] = 1;
   HEAP32[i13 >> 2] = i12;
   HEAP32[i11 >> 2] = i10;
  }
  i10 = (HEAP32[i2 + 24 >> 2] | 0) + (i14 << 2) | 0;
  if ((i10 | 0) != 0) {
   HEAP32[i10 >> 2] = i8;
  }
  HEAP32[i9 >> 2] = i14 + 1;
  HEAP32[i1 + 0 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i7 + 0 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  i9 = __Znwj(200) | 0;
  if ((HEAP8[444280] | 0) == 0 ? (___cxa_guard_acquire(444280) | 0) != 0 : 0) {
   if ((HEAP8[444336] | 0) == 0 ? (___cxa_guard_acquire(444336) | 0) != 0 : 0) {
    HEAPF32[111072] = 1.0;
    HEAP32[444292 >> 2] = 0;
    HEAP32[444296 >> 2] = 0;
    HEAP32[444300 >> 2] = 0;
    HEAP32[444304 >> 2] = 0;
    HEAPF32[444308 >> 2] = 1.0;
    HEAP32[444312 >> 2] = 0;
    HEAP32[444316 >> 2] = 0;
    HEAP32[444320 >> 2] = 0;
    HEAP32[444324 >> 2] = 0;
    HEAPF32[444328 >> 2] = 1.0;
    HEAPF32[444332 >> 2] = 0.0;
    ___cxa_guard_release(444336);
   }
   HEAP32[444216 >> 2] = HEAP32[444288 >> 2];
   HEAP32[444220 >> 2] = HEAP32[444292 >> 2];
   HEAP32[444224 >> 2] = HEAP32[444296 >> 2];
   HEAP32[444228 >> 2] = HEAP32[444300 >> 2];
   HEAP32[444232 >> 2] = HEAP32[444304 >> 2];
   HEAP32[444236 >> 2] = HEAP32[444308 >> 2];
   HEAP32[444240 >> 2] = HEAP32[444312 >> 2];
   HEAP32[444244 >> 2] = HEAP32[444316 >> 2];
   HEAP32[444248 >> 2] = HEAP32[444320 >> 2];
   HEAP32[444252 >> 2] = HEAP32[444324 >> 2];
   HEAP32[444256 >> 2] = HEAP32[444328 >> 2];
   HEAP32[444260 >> 2] = HEAP32[444332 >> 2];
   HEAP32[444264 >> 2] = 0;
   HEAP32[444268 >> 2] = 0;
   HEAP32[444272 >> 2] = 0;
   HEAP32[444276 >> 2] = 0;
   ___cxa_guard_release(444280);
  }
  HEAP32[i9 >> 2] = 444352;
  HEAPF32[i9 + 4 >> 2] = 1.0;
  i16 = i9 + 8 | 0;
  HEAP32[i16 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  i16 = HEAP32[i1 + 12 >> 2] | 0;
  HEAP32[i9 + 20 >> 2] = i16;
  HEAPF32[i9 + 24 >> 2] = 1.0;
  i13 = i7;
  i12 = HEAP32[i13 >> 2] | 0;
  i13 = HEAP32[i13 + 4 >> 2] | 0;
  i15 = i9 + 28 | 0;
  HEAP32[i15 >> 2] = i12;
  HEAP32[i15 + 4 >> 2] = i13;
  i15 = i7 + 8 | 0;
  i14 = HEAP32[i15 >> 2] | 0;
  i15 = HEAP32[i15 + 4 >> 2] | 0;
  i11 = i9 + 36 | 0;
  HEAP32[i11 >> 2] = i14;
  HEAP32[i11 + 4 >> 2] = i15;
  HEAPF32[i9 + 44 >> 2] = 1.0;
  HEAPF32[i9 + 48 >> 2] = 0.0;
  HEAPF32[i9 + 52 >> 2] = 0.0;
  HEAPF32[i9 + 56 >> 2] = -50.0;
  HEAPF32[i9 + 60 >> 2] = 0.0;
  HEAPF32[i9 + 64 >> 2] = 0.0;
  i11 = i9 + 68 | 0;
  HEAP32[i11 + 0 >> 2] = HEAP32[444216 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[444220 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[444224 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[444228 >> 2];
  i11 = i9 + 84 | 0;
  HEAP32[i11 + 0 >> 2] = HEAP32[444232 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[444236 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[444240 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[444244 >> 2];
  i11 = i9 + 100 | 0;
  HEAP32[i11 + 0 >> 2] = HEAP32[444248 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[444252 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[444256 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[444260 >> 2];
  i11 = i9 + 116 | 0;
  HEAP32[i11 + 0 >> 2] = HEAP32[444264 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[444268 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[444272 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[444276 >> 2];
  HEAPF32[i9 + 132 >> 2] = 1.0;
  i11 = i9 + 136 | 0;
  HEAP32[i11 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i9 + 148 >> 2] = i16;
  HEAPF32[i9 + 152 >> 2] = 1.0;
  i16 = i9 + 156 | 0;
  HEAP32[i16 >> 2] = i12;
  HEAP32[i16 + 4 >> 2] = i13;
  i16 = i9 + 164 | 0;
  HEAP32[i16 >> 2] = i14;
  HEAP32[i16 + 4 >> 2] = i15;
  HEAPF32[i9 + 172 >> 2] = 1.0;
  HEAPF32[i9 + 176 >> 2] = 0.0;
  HEAPF32[i9 + 180 >> 2] = 0.0;
  HEAPF32[i9 + 184 >> 2] = -50.0;
  HEAPF32[i9 + 188 >> 2] = 0.0;
  HEAPF32[i9 + 192 >> 2] = 0.0;
  HEAP32[i9 + 196 >> 2] = 0;
  HEAPF32[i4 >> 2] = 0.0;
  HEAP32[i4 + 4 >> 2] = i9;
  HEAP32[i4 + 72 >> 2] = i8;
  i16 = i4 + 76 | 0;
  i8 = i4 + 100 | 0;
  HEAP32[i16 + 0 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  HEAP32[i16 + 12 >> 2] = 0;
  HEAP32[i16 + 16 >> 2] = 0;
  HEAP32[i16 + 20 >> 2] = 0;
  HEAPF32[i8 >> 2] = .5;
  HEAPF32[i4 + 104 >> 2] = 0.0;
  HEAPF32[i4 + 108 >> 2] = .800000011920929;
  HEAPF32[i4 + 112 >> 2] = 1.0;
  HEAP8[i4 + 116 | 0] = 0;
  HEAPF32[i4 + 120 >> 2] = .004999999888241291;
  HEAPF32[i4 + 124 >> 2] = .009999999776482582;
  HEAPF32[i4 + 128 >> 2] = .009999999776482582;
  HEAPF32[i4 + 132 >> 2] = .009999999776482582;
  HEAPF32[i4 + 8 >> 2] = 1.0;
  i8 = i4 + 12 | 0;
  i16 = i4 + 28 | 0;
  HEAP32[i8 + 0 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  HEAPF32[i16 >> 2] = 1.0;
  i16 = i4 + 32 | 0;
  i8 = i4 + 48 | 0;
  HEAP32[i16 + 0 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  HEAP32[i16 + 12 >> 2] = 0;
  HEAPF32[i8 >> 2] = 1.0;
  i8 = i4 + 52 | 0;
  HEAP32[i8 + 0 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  HEAP32[i8 + 16 >> 2] = 0;
  i8 = __Z22btAlignedAllocInternalji(608, 16) | 0;
  __ZN11btRigidBodyC2ERKNS_27btRigidBodyConstructionInfoE(i8, i4);
  i16 = HEAP32[i5 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i16 >> 2] | 0) + 80 >> 2] & 127](i16, i8);
  i8 = HEAP32[i6 >> 2] | 0;
 }
 switch (i8 | 0) {
 case 1:
  {
   __ZN13BenchmarkDemo11createTest1Ev(i2);
   STACKTOP = i3;
   return;
  }
 case 2:
  {
   __ZN13BenchmarkDemo11createTest2Ev(i2);
   STACKTOP = i3;
   return;
  }
 case 3:
  {
   __ZN13BenchmarkDemo11createTest3Ev(i2);
   STACKTOP = i3;
   return;
  }
 case 4:
  {
   __ZN13BenchmarkDemo11createTest4Ev(i2);
   STACKTOP = i3;
   return;
  }
 case 5:
  {
   __ZN13BenchmarkDemo11createTest5Ev(i2);
   STACKTOP = i3;
   return;
  }
 case 6:
  {
   __ZN13BenchmarkDemo11createTest6Ev(i2);
   STACKTOP = i3;
   return;
  }
 case 7:
  {
   __ZN13BenchmarkDemo11createTest6Ev(i2);
   __ZN13btRaycastBar2C2Efff(i1, 2500.0, 0.0, 50.0);
   _memcpy(402552, i1 | 0, 40024) | 0;
   i16 = i1 + 40024 | 0;
   __ZN7btClockaSERKS_(442576 | 0, i16) | 0;
   i15 = i1 + 40028 | 0;
   HEAP32[442580 >> 2] = HEAP32[i15 + 0 >> 2];
   HEAP32[442584 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[442588 >> 2] = HEAP32[i15 + 8 >> 2];
   HEAP32[442592 >> 2] = HEAP32[i15 + 12 >> 2];
   HEAP32[442596 >> 2] = HEAP32[i15 + 16 >> 2];
   __ZN7btClockD2Ev(i16);
   STACKTOP = i3;
   return;
  }
 default:
  {
   STACKTOP = i3;
   return;
  }
 }
}
function __ZNK23btStridingMeshInterface27InternalProcessAllTrianglesEP31btInternalTriangleIndexCallbackRK9btVector3S4_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i20 + 76 | 0;
 i4 = i20 + 72 | 0;
 i5 = i20 + 68 | 0;
 i15 = i20 + 64 | 0;
 i13 = i20 + 60 | 0;
 i7 = i20 + 56 | 0;
 i14 = i20 + 52 | 0;
 i12 = i20 + 48 | 0;
 i11 = i20;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0;
 d10 = +HEAPF32[i1 + 4 >> 2];
 d8 = +HEAPF32[i1 + 8 >> 2];
 d9 = +HEAPF32[i1 + 12 >> 2];
 if ((i3 | 0) <= 0) {
  STACKTOP = i20;
  return;
 }
 i16 = i11 + 4 | 0;
 i21 = i11 + 8 | 0;
 i22 = i11 + 12 | 0;
 i23 = i11 + 16 | 0;
 i24 = i11 + 20 | 0;
 i25 = i11 + 24 | 0;
 i26 = i11 + 28 | 0;
 i27 = i11 + 32 | 0;
 i28 = i11 + 36 | 0;
 i18 = i11 + 40 | 0;
 i17 = i11 + 44 | 0;
 i19 = 0;
 do {
  FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 3](i1, i6, i14, i15, i7, i4, i5, i12, i13, i19);
  i29 = HEAP32[i15 >> 2] | 0;
  do {
   if ((i29 | 0) == 0) {
    i29 = HEAP32[i13 >> 2] | 0;
    if ((i29 | 0) == 3) {
     if ((HEAP32[i12 >> 2] | 0) > 0) {
      i29 = 0;
     } else {
      break;
     }
     do {
      i35 = HEAP32[i4 >> 2] | 0;
      i34 = Math_imul(HEAP32[i5 >> 2] | 0, i29) | 0;
      i33 = HEAP32[i6 >> 2] | 0;
      i32 = HEAP32[i7 >> 2] | 0;
      i36 = Math_imul(HEAPU16[i35 + i34 >> 1] | 0, i32) | 0;
      d31 = d8 * +HEAPF32[i33 + (i36 + 4) >> 2];
      d30 = d9 * +HEAPF32[i33 + (i36 + 8) >> 2];
      HEAPF32[i11 >> 2] = d10 * +HEAPF32[i33 + i36 >> 2];
      HEAPF32[i16 >> 2] = d31;
      HEAPF32[i21 >> 2] = d30;
      HEAPF32[i22 >> 2] = 0.0;
      i36 = Math_imul(HEAPU16[i35 + (i34 + 2) >> 1] | 0, i32) | 0;
      d30 = d8 * +HEAPF32[i33 + (i36 + 4) >> 2];
      d31 = d9 * +HEAPF32[i33 + (i36 + 8) >> 2];
      HEAPF32[i23 >> 2] = d10 * +HEAPF32[i33 + i36 >> 2];
      HEAPF32[i24 >> 2] = d30;
      HEAPF32[i25 >> 2] = d31;
      HEAPF32[i26 >> 2] = 0.0;
      i32 = Math_imul(HEAPU16[i35 + (i34 + 4) >> 1] | 0, i32) | 0;
      d31 = d8 * +HEAPF32[i33 + (i32 + 4) >> 2];
      d30 = d9 * +HEAPF32[i33 + (i32 + 8) >> 2];
      HEAPF32[i27 >> 2] = d10 * +HEAPF32[i33 + i32 >> 2];
      HEAPF32[i28 >> 2] = d31;
      HEAPF32[i18 >> 2] = d30;
      HEAPF32[i17 >> 2] = 0.0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i11, i19, i29);
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) < (HEAP32[i12 >> 2] | 0));
    } else if ((i29 | 0) == 2) {
     if ((HEAP32[i12 >> 2] | 0) > 0) {
      i29 = 0;
     } else {
      break;
     }
     do {
      i34 = HEAP32[i4 >> 2] | 0;
      i36 = Math_imul(HEAP32[i5 >> 2] | 0, i29) | 0;
      i35 = HEAP32[i6 >> 2] | 0;
      i33 = HEAP32[i7 >> 2] | 0;
      i32 = Math_imul(i33, HEAP32[i34 + i36 >> 2] | 0) | 0;
      d30 = d8 * +HEAPF32[i35 + (i32 + 4) >> 2];
      d31 = d9 * +HEAPF32[i35 + (i32 + 8) >> 2];
      HEAPF32[i11 >> 2] = d10 * +HEAPF32[i35 + i32 >> 2];
      HEAPF32[i16 >> 2] = d30;
      HEAPF32[i21 >> 2] = d31;
      HEAPF32[i22 >> 2] = 0.0;
      i32 = Math_imul(i33, HEAP32[i34 + (i36 + 4) >> 2] | 0) | 0;
      d31 = d8 * +HEAPF32[i35 + (i32 + 4) >> 2];
      d30 = d9 * +HEAPF32[i35 + (i32 + 8) >> 2];
      HEAPF32[i23 >> 2] = d10 * +HEAPF32[i35 + i32 >> 2];
      HEAPF32[i24 >> 2] = d31;
      HEAPF32[i25 >> 2] = d30;
      HEAPF32[i26 >> 2] = 0.0;
      i36 = Math_imul(i33, HEAP32[i34 + (i36 + 8) >> 2] | 0) | 0;
      d30 = d8 * +HEAPF32[i35 + (i36 + 4) >> 2];
      d31 = d9 * +HEAPF32[i35 + (i36 + 8) >> 2];
      HEAPF32[i27 >> 2] = d10 * +HEAPF32[i35 + i36 >> 2];
      HEAPF32[i28 >> 2] = d30;
      HEAPF32[i18 >> 2] = d31;
      HEAPF32[i17 >> 2] = 0.0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i11, i19, i29);
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) < (HEAP32[i12 >> 2] | 0));
    } else if ((i29 | 0) == 5) {
     if ((HEAP32[i12 >> 2] | 0) > 0) {
      i29 = 0;
     } else {
      break;
     }
     do {
      i33 = HEAP32[i4 >> 2] | 0;
      i34 = Math_imul(HEAP32[i5 >> 2] | 0, i29) | 0;
      i35 = HEAP32[i6 >> 2] | 0;
      i36 = HEAP32[i7 >> 2] | 0;
      i32 = Math_imul(HEAPU8[i33 + i34 | 0] | 0, i36) | 0;
      d30 = d8 * +HEAPF32[i35 + (i32 + 4) >> 2];
      d31 = d9 * +HEAPF32[i35 + (i32 + 8) >> 2];
      HEAPF32[i11 >> 2] = d10 * +HEAPF32[i35 + i32 >> 2];
      HEAPF32[i16 >> 2] = d30;
      HEAPF32[i21 >> 2] = d31;
      HEAPF32[i22 >> 2] = 0.0;
      i32 = Math_imul(HEAPU8[i33 + (i34 + 1) | 0] | 0, i36) | 0;
      d31 = d8 * +HEAPF32[i35 + (i32 + 4) >> 2];
      d30 = d9 * +HEAPF32[i35 + (i32 + 8) >> 2];
      HEAPF32[i23 >> 2] = d10 * +HEAPF32[i35 + i32 >> 2];
      HEAPF32[i24 >> 2] = d31;
      HEAPF32[i25 >> 2] = d30;
      HEAPF32[i26 >> 2] = 0.0;
      i36 = Math_imul(HEAPU8[i33 + (i34 + 2) | 0] | 0, i36) | 0;
      d30 = d8 * +HEAPF32[i35 + (i36 + 4) >> 2];
      d31 = d9 * +HEAPF32[i35 + (i36 + 8) >> 2];
      HEAPF32[i27 >> 2] = d10 * +HEAPF32[i35 + i36 >> 2];
      HEAPF32[i28 >> 2] = d30;
      HEAPF32[i18 >> 2] = d31;
      HEAPF32[i17 >> 2] = 0.0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i11, i19, i29);
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) < (HEAP32[i12 >> 2] | 0));
    } else {
     break;
    }
   } else if ((i29 | 0) == 1) {
    i29 = HEAP32[i13 >> 2] | 0;
    if ((i29 | 0) == 2) {
     if ((HEAP32[i12 >> 2] | 0) > 0) {
      i29 = 0;
     } else {
      break;
     }
     do {
      i34 = HEAP32[i4 >> 2] | 0;
      i36 = Math_imul(HEAP32[i5 >> 2] | 0, i29) | 0;
      i35 = HEAP32[i6 >> 2] | 0;
      i33 = HEAP32[i7 >> 2] | 0;
      i32 = Math_imul(i33, HEAP32[i34 + i36 >> 2] | 0) | 0;
      d30 = d8 * +HEAPF64[i35 + (i32 + 8) >> 3];
      d31 = d9 * +HEAPF64[i35 + (i32 + 16) >> 3];
      HEAPF32[i11 >> 2] = d10 * +HEAPF64[i35 + i32 >> 3];
      HEAPF32[i16 >> 2] = d30;
      HEAPF32[i21 >> 2] = d31;
      HEAPF32[i22 >> 2] = 0.0;
      i32 = Math_imul(i33, HEAP32[i34 + (i36 + 4) >> 2] | 0) | 0;
      d31 = d8 * +HEAPF64[i35 + (i32 + 8) >> 3];
      d30 = d9 * +HEAPF64[i35 + (i32 + 16) >> 3];
      HEAPF32[i23 >> 2] = d10 * +HEAPF64[i35 + i32 >> 3];
      HEAPF32[i24 >> 2] = d31;
      HEAPF32[i25 >> 2] = d30;
      HEAPF32[i26 >> 2] = 0.0;
      i36 = Math_imul(i33, HEAP32[i34 + (i36 + 8) >> 2] | 0) | 0;
      d30 = d8 * +HEAPF64[i35 + (i36 + 8) >> 3];
      d31 = d9 * +HEAPF64[i35 + (i36 + 16) >> 3];
      HEAPF32[i27 >> 2] = d10 * +HEAPF64[i35 + i36 >> 3];
      HEAPF32[i28 >> 2] = d30;
      HEAPF32[i18 >> 2] = d31;
      HEAPF32[i17 >> 2] = 0.0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i11, i19, i29);
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) < (HEAP32[i12 >> 2] | 0));
    } else if ((i29 | 0) == 5) {
     if ((HEAP32[i12 >> 2] | 0) > 0) {
      i29 = 0;
     } else {
      break;
     }
     do {
      i33 = HEAP32[i4 >> 2] | 0;
      i34 = Math_imul(HEAP32[i5 >> 2] | 0, i29) | 0;
      i35 = HEAP32[i6 >> 2] | 0;
      i36 = HEAP32[i7 >> 2] | 0;
      i32 = Math_imul(HEAPU8[i33 + i34 | 0] | 0, i36) | 0;
      d30 = d8 * +HEAPF64[i35 + (i32 + 8) >> 3];
      d31 = d9 * +HEAPF64[i35 + (i32 + 16) >> 3];
      HEAPF32[i11 >> 2] = d10 * +HEAPF64[i35 + i32 >> 3];
      HEAPF32[i16 >> 2] = d30;
      HEAPF32[i21 >> 2] = d31;
      HEAPF32[i22 >> 2] = 0.0;
      i32 = Math_imul(HEAPU8[i33 + (i34 + 1) | 0] | 0, i36) | 0;
      d31 = d8 * +HEAPF64[i35 + (i32 + 8) >> 3];
      d30 = d9 * +HEAPF64[i35 + (i32 + 16) >> 3];
      HEAPF32[i23 >> 2] = d10 * +HEAPF64[i35 + i32 >> 3];
      HEAPF32[i24 >> 2] = d31;
      HEAPF32[i25 >> 2] = d30;
      HEAPF32[i26 >> 2] = 0.0;
      i36 = Math_imul(HEAPU8[i33 + (i34 + 2) | 0] | 0, i36) | 0;
      d30 = d8 * +HEAPF64[i35 + (i36 + 8) >> 3];
      d31 = d9 * +HEAPF64[i35 + (i36 + 16) >> 3];
      HEAPF32[i27 >> 2] = d10 * +HEAPF64[i35 + i36 >> 3];
      HEAPF32[i28 >> 2] = d30;
      HEAPF32[i18 >> 2] = d31;
      HEAPF32[i17 >> 2] = 0.0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i11, i19, i29);
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) < (HEAP32[i12 >> 2] | 0));
    } else if ((i29 | 0) == 3) {
     if ((HEAP32[i12 >> 2] | 0) > 0) {
      i29 = 0;
     } else {
      break;
     }
     do {
      i33 = HEAP32[i4 >> 2] | 0;
      i34 = Math_imul(HEAP32[i5 >> 2] | 0, i29) | 0;
      i35 = HEAP32[i6 >> 2] | 0;
      i36 = HEAP32[i7 >> 2] | 0;
      i32 = Math_imul(HEAPU16[i33 + i34 >> 1] | 0, i36) | 0;
      d30 = d8 * +HEAPF64[i35 + (i32 + 8) >> 3];
      d31 = d9 * +HEAPF64[i35 + (i32 + 16) >> 3];
      HEAPF32[i11 >> 2] = d10 * +HEAPF64[i35 + i32 >> 3];
      HEAPF32[i16 >> 2] = d30;
      HEAPF32[i21 >> 2] = d31;
      HEAPF32[i22 >> 2] = 0.0;
      i32 = Math_imul(HEAPU16[i33 + (i34 + 2) >> 1] | 0, i36) | 0;
      d31 = d8 * +HEAPF64[i35 + (i32 + 8) >> 3];
      d30 = d9 * +HEAPF64[i35 + (i32 + 16) >> 3];
      HEAPF32[i23 >> 2] = d10 * +HEAPF64[i35 + i32 >> 3];
      HEAPF32[i24 >> 2] = d31;
      HEAPF32[i25 >> 2] = d30;
      HEAPF32[i26 >> 2] = 0.0;
      i36 = Math_imul(HEAPU16[i33 + (i34 + 4) >> 1] | 0, i36) | 0;
      d30 = d8 * +HEAPF64[i35 + (i36 + 8) >> 3];
      d31 = d9 * +HEAPF64[i35 + (i36 + 16) >> 3];
      HEAPF32[i27 >> 2] = d10 * +HEAPF64[i35 + i36 >> 3];
      HEAPF32[i28 >> 2] = d30;
      HEAPF32[i18 >> 2] = d31;
      HEAPF32[i17 >> 2] = 0.0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i11, i19, i29);
      i29 = i29 + 1 | 0;
     } while ((i29 | 0) < (HEAP32[i12 >> 2] | 0));
    } else {
     break;
    }
   }
  } while (0);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1, i19);
  i19 = i19 + 1 | 0;
 } while ((i19 | 0) != (i3 | 0));
 STACKTOP = i20;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver14convertContactEP20btPersistentManifoldRK19btContactSolverInfo(i13, i12, i2) {
 i13 = i13 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, i45 = 0, d46 = 0.0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i16 + 72 | 0;
 i15 = i16 + 56 | 0;
 i10 = i16 + 40 | 0;
 i11 = i16 + 24 | 0;
 i9 = i16 + 20 | 0;
 i8 = i16 + 16 | 0;
 i7 = i16;
 i5 = HEAP32[i12 + 1108 >> 2] | 0;
 i4 = HEAP32[i12 + 1112 >> 2] | 0;
 i6 = i5 + 232 | 0;
 if ((HEAP32[i6 >> 2] & 2 | 0) == 0) {
  i19 = 0;
 } else {
  i19 = i5;
 }
 i17 = i4 + 232 | 0;
 if ((HEAP32[i17 >> 2] & 2 | 0) == 0) {
  i18 = 0;
 } else {
  i18 = i4;
 }
 if (!((i19 | 0) != 0 ? +HEAPF32[i19 + 336 >> 2] != 0.0 : 0)) {
  if ((i18 | 0) == 0) {
   STACKTOP = i16;
   return;
  }
  if (!(+HEAPF32[i18 + 336 >> 2] != 0.0)) {
   STACKTOP = i16;
   return;
  }
 }
 i23 = i12 + 1116 | 0;
 i30 = HEAP32[i23 >> 2] | 0;
 if ((i30 | 0) <= 0) {
  STACKTOP = i16;
  return;
 }
 i27 = i12 + 1124 | 0;
 i18 = i13 + 8 | 0;
 i26 = i13 + 12 | 0;
 i24 = i13 + 16 | 0;
 i25 = i13 + 20 | 0;
 i21 = i13 + 48 | 0;
 i22 = i2 + 60 | 0;
 i19 = i7 + 4 | 0;
 i20 = i7 + 8 | 0;
 i28 = 0;
 do {
  i29 = i12 + (i28 * 276 | 0) + 4 | 0;
  if (+HEAPF32[i12 + (i28 * 276 | 0) + 84 >> 2] <= +HEAPF32[i27 >> 2]) {
   i30 = HEAP32[i18 >> 2] | 0;
   if ((i30 | 0) == (HEAP32[i26 >> 2] | 0) ? (i14 = (i30 | 0) == 0 ? 1 : i30 << 1, (i30 | 0) < (i14 | 0)) : 0) {
    if ((i14 | 0) == 0) {
     i31 = 0;
     i33 = i30;
    } else {
     i31 = __Z22btAlignedAllocInternalji(i14 * 136 | 0, 16) | 0;
     i33 = HEAP32[i18 >> 2] | 0;
    }
    if ((i33 | 0) > 0) {
     i32 = 0;
     do {
      _memcpy(i31 + (i32 * 136 | 0) | 0, (HEAP32[i24 >> 2] | 0) + (i32 * 136 | 0) | 0, 136) | 0;
      i32 = i32 + 1 | 0;
     } while ((i32 | 0) != (i33 | 0));
    }
    i32 = HEAP32[i24 >> 2] | 0;
    if ((i32 | 0) != 0) {
     if ((HEAP8[i25] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i32);
     }
     HEAP32[i24 >> 2] = 0;
    }
    HEAP8[i25] = 1;
    HEAP32[i24 >> 2] = i31;
    HEAP32[i26 >> 2] = i14;
    i31 = HEAP32[i18 >> 2] | 0;
   } else {
    i31 = i30;
   }
   HEAP32[i18 >> 2] = i31 + 1;
   i34 = HEAP32[i24 >> 2] | 0;
   i32 = i34 + (i30 * 136 | 0) | 0;
   i33 = (HEAP32[i6 >> 2] & 2 | 0) == 0 ? 0 : i5;
   i31 = (HEAP32[i17 >> 2] & 2 | 0) == 0 ? 0 : i4;
   if ((i33 | 0) == 0) {
    if ((HEAP8[446696] | 0) == 0 ? (___cxa_guard_acquire(446696) | 0) != 0 : 0) {
     HEAP32[i3 + 0 >> 2] = 0;
     HEAP32[i3 + 4 >> 2] = 0;
     HEAP32[i3 + 8 >> 2] = 0;
     HEAP32[i3 + 12 >> 2] = 0;
     __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(446088, 0.0, 0, 0, i3);
     _atexit(47, 446088, ___dso_handle | 0) | 0;
     ___cxa_guard_release(446696);
    }
    HEAP32[i15 + 0 >> 2] = 0;
    HEAP32[i15 + 4 >> 2] = 0;
    HEAP32[i15 + 8 >> 2] = 0;
    HEAP32[i15 + 12 >> 2] = 0;
    __ZN11btRigidBody12setMassPropsEfRK9btVector3(446088, 0.0, i15);
    i38 = 446088;
   } else {
    i38 = i33;
   }
   HEAP32[i34 + (i30 * 136 | 0) + 104 >> 2] = i38;
   if ((i31 | 0) == 0) {
    if ((HEAP8[446696] | 0) == 0 ? (___cxa_guard_acquire(446696) | 0) != 0 : 0) {
     HEAP32[i3 + 0 >> 2] = 0;
     HEAP32[i3 + 4 >> 2] = 0;
     HEAP32[i3 + 8 >> 2] = 0;
     HEAP32[i3 + 12 >> 2] = 0;
     __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(446088, 0.0, 0, 0, i3);
     _atexit(47, 446088, ___dso_handle | 0) | 0;
     ___cxa_guard_release(446696);
    }
    HEAP32[i15 + 0 >> 2] = 0;
    HEAP32[i15 + 4 >> 2] = 0;
    HEAP32[i15 + 8 >> 2] = 0;
    HEAP32[i15 + 12 >> 2] = 0;
    __ZN11btRigidBody12setMassPropsEfRK9btVector3(446088, 0.0, i15);
    i38 = 446088;
   } else {
    i38 = i31;
   }
   HEAP32[i34 + (i30 * 136 | 0) + 108 >> 2] = i38;
   HEAP32[i34 + (i30 * 136 | 0) + 112 >> 2] = i29;
   __ZN35btSequentialImpulseConstraintSolver22setupContactConstraintER18btSolverConstraintP17btCollisionObjectS3_R15btManifoldPointRK19btContactSolverInfoR9btVector3RfSB_SA_SA_(0, i32, i5, i4, i29, i2, i7, i8, i9, i10, i11);
   HEAP32[i34 + (i30 * 136 | 0) + 100 >> 2] = HEAP32[i21 >> 2];
   if ((HEAP32[i22 >> 2] & 32 | 0) != 0 ? (HEAP8[i12 + (i28 * 276 | 0) + 120 | 0] | 0) != 0 : 0) {
    d35 = +HEAPF32[i9 >> 2];
    __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i13, i12 + (i28 * 276 | 0) + 152 | 0, 0, 0, i30, i29, i10, i11, i5, i4, d35, +HEAPF32[i12 + (i28 * 276 | 0) + 132 >> 2], +HEAPF32[i12 + (i28 * 276 | 0) + 140 >> 2]) | 0;
    if ((HEAP32[i22 >> 2] & 16 | 0) != 0) {
     __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i13, i12 + (i28 * 276 | 0) + 168 | 0, 0, 0, i30, i29, i10, i11, i5, i4, d35, +HEAPF32[i12 + (i28 * 276 | 0) + 136 >> 2], +HEAPF32[i12 + (i28 * 276 | 0) + 144 >> 2]) | 0;
    }
   } else {
    i1 = 35;
   }
   do {
    if ((i1 | 0) == 35) {
     i1 = 0;
     i34 = i12 + (i28 * 276 | 0) + 152 | 0;
     d36 = +HEAPF32[i12 + (i28 * 276 | 0) + 68 >> 2];
     d41 = +HEAPF32[i8 >> 2];
     d37 = +HEAPF32[i12 + (i28 * 276 | 0) + 72 >> 2];
     d35 = +HEAPF32[i12 + (i28 * 276 | 0) + 76 >> 2];
     d42 = +HEAPF32[i7 >> 2] - d36 * d41;
     d43 = +HEAPF32[i19 >> 2] - d41 * d37;
     d41 = +HEAPF32[i20 >> 2] - d41 * d35;
     HEAPF32[i12 + (i28 * 276 | 0) + 152 >> 2] = d42;
     i40 = i12 + (i28 * 276 | 0) + 156 | 0;
     HEAPF32[i40 >> 2] = d43;
     i38 = i12 + (i28 * 276 | 0) + 160 | 0;
     HEAPF32[i38 >> 2] = d41;
     HEAPF32[i12 + (i28 * 276 | 0) + 164 >> 2] = 0.0;
     d44 = d42 * d42 + d43 * d43 + d41 * d41;
     i39 = HEAP32[i22 >> 2] | 0;
     if ((i39 & 64 | 0) == 0 & d44 > 1.1920928955078125e-7) {
      d44 = 1.0 / +Math_sqrt(+d44);
      d42 = d42 * d44;
      HEAPF32[i34 >> 2] = d42;
      d43 = d44 * d43;
      HEAPF32[i40 >> 2] = d43;
      d41 = d44 * d41;
      HEAPF32[i38 >> 2] = d41;
      if ((i39 & 16 | 0) == 0) {
       d35 = +HEAPF32[i9 >> 2];
      } else {
       i45 = i12 + (i28 * 276 | 0) + 168 | 0;
       d46 = d43 * d35 - d41 * d37;
       d41 = d41 * d36 - d35 * d42;
       d44 = d37 * d42 - d43 * d36;
       HEAPF32[i12 + (i28 * 276 | 0) + 168 >> 2] = d46;
       HEAPF32[i12 + (i28 * 276 | 0) + 180 >> 2] = 0.0;
       d35 = 1.0 / +Math_sqrt(+(d46 * d46 + d41 * d41 + d44 * d44));
       HEAPF32[i45 >> 2] = d46 * d35;
       HEAPF32[i12 + (i28 * 276 | 0) + 172 >> 2] = d41 * d35;
       HEAPF32[i12 + (i28 * 276 | 0) + 176 >> 2] = d44 * d35;
       __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i5, i45);
       __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i4, i45);
       d35 = +HEAPF32[i9 >> 2];
       __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i13, i45, 0, 0, i30, i29, i10, i11, i5, i4, d35, 0.0, 0.0) | 0;
      }
      __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i5, i34);
      __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i4, i34);
      __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i13, i34, 0, 0, i30, i29, i10, i11, i5, i4, d35, 0.0, 0.0) | 0;
      HEAP8[i12 + (i28 * 276 | 0) + 120 | 0] = 1;
      break;
     }
     i45 = i12 + (i28 * 276 | 0) + 168 | 0;
     if (+Math_abs(+d35) > .7071067690849304) {
      d42 = d35 * d35 + d37 * d37;
      d43 = 1.0 / +Math_sqrt(+d42);
      HEAPF32[i34 >> 2] = 0.0;
      d46 = -(d43 * d35);
      HEAPF32[i40 >> 2] = d46;
      d44 = d43 * d37;
      HEAPF32[i38 >> 2] = d44;
      HEAPF32[i45 >> 2] = d42 * d43;
      HEAPF32[i12 + (i28 * 276 | 0) + 172 >> 2] = -(d36 * d44);
      HEAPF32[i12 + (i28 * 276 | 0) + 176 >> 2] = d36 * d46;
     } else {
      d44 = d36 * d36 + d37 * d37;
      d46 = 1.0 / +Math_sqrt(+d44);
      d43 = -(d37 * d46);
      HEAPF32[i34 >> 2] = d43;
      d42 = d46 * d36;
      HEAPF32[i40 >> 2] = d42;
      HEAPF32[i38 >> 2] = 0.0;
      HEAPF32[i45 >> 2] = -(d35 * d42);
      HEAPF32[i12 + (i28 * 276 | 0) + 172 >> 2] = d35 * d43;
      HEAPF32[i12 + (i28 * 276 | 0) + 176 >> 2] = d44 * d46;
     }
     if ((i39 & 16 | 0) == 0) {
      d35 = +HEAPF32[i9 >> 2];
     } else {
      __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i5, i45);
      __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i4, i45);
      d35 = +HEAPF32[i9 >> 2];
      __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i13, i45, 0, 0, i30, i29, i10, i11, i5, i4, d35, 0.0, 0.0) | 0;
     }
     __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i5, i34);
     __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i4, i34);
     __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i13, i34, 0, 0, i30, i29, i10, i11, i5, i4, d35, 0.0, 0.0) | 0;
     HEAP8[i12 + (i28 * 276 | 0) + 120 | 0] = 1;
    }
   } while (0);
   __ZN35btSequentialImpulseConstraintSolver28setFrictionConstraintImpulseER18btSolverConstraintP11btRigidBodyS3_R15btManifoldPointRK19btContactSolverInfo(i13, i32, i33, i31, i29, i2);
   i30 = HEAP32[i23 >> 2] | 0;
  }
  i28 = i28 + 1 | 0;
 } while ((i28 | 0) < (i30 | 0));
 STACKTOP = i16;
 return;
}
function __ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, i27 = 0, i28 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i7 = i1 + 96 | 0;
 i8 = i1 + 80 | 0;
 i5 = i1 + 64 | 0;
 i4 = i1 + 48 | 0;
 i6 = i1 + 32 | 0;
 i12 = i1 + 16 | 0;
 i13 = i1;
 i3 = i2 + 372 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i14 = i9 + 32 | 0;
 i15 = HEAP32[i14 >> 2] | 0;
 L1 : do {
  if ((i15 | 0) == 3) {
   i6 = HEAP32[i9 + 4 >> 2] | 0;
   i5 = HEAP32[i9 >> 2] | 0;
   d18 = +HEAPF32[i5 + 16 >> 2];
   d22 = +HEAPF32[i6 + 16 >> 2] - d18;
   d21 = +HEAPF32[i5 + 20 >> 2];
   d20 = +HEAPF32[i6 + 20 >> 2] - d21;
   d11 = +HEAPF32[i5 + 24 >> 2];
   d23 = +HEAPF32[i6 + 24 >> 2] - d11;
   i6 = HEAP32[i9 + 8 >> 2] | 0;
   d18 = +HEAPF32[i6 + 16 >> 2] - d18;
   d21 = +HEAPF32[i6 + 20 >> 2] - d21;
   d11 = +HEAPF32[i6 + 24 >> 2] - d11;
   d10 = d20 * d11 - d23 * d21;
   d11 = d23 * d18 - d22 * d11;
   d18 = d22 * d21 - d20 * d18;
   HEAPF32[i12 >> 2] = d10;
   i6 = i12 + 4 | 0;
   HEAPF32[i6 >> 2] = d11;
   i5 = i12 + 8 | 0;
   HEAPF32[i5 >> 2] = d18;
   HEAPF32[i12 + 12 >> 2] = 0.0;
   if (d10 * d10 + d11 * d11 + d18 * d18 > 0.0) {
    HEAPF32[i9 + 28 >> 2] = 0.0;
    i4 = i2 + 364 | 0;
    i19 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
    HEAP32[i4 >> 2] = i19;
    HEAP32[i9 + (HEAP32[i14 >> 2] << 2) >> 2] = HEAP32[i2 + (i19 << 2) + 348 >> 2];
    i19 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i19 + 1;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, i12, HEAP32[i9 + (i19 << 2) >> 2] | 0);
    if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
     i19 = 1;
     STACKTOP = i1;
     return i19 | 0;
    }
    i17 = HEAP32[i3 >> 2] | 0;
    i19 = i17 + 32 | 0;
    i16 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
    HEAP32[i19 >> 2] = i16;
    i16 = HEAP32[i17 + (i16 << 2) >> 2] | 0;
    i17 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 + 1;
    HEAP32[i2 + (i17 << 2) + 348 >> 2] = i16;
    i17 = HEAP32[i3 >> 2] | 0;
    d22 = -+HEAPF32[i6 >> 2];
    d23 = -+HEAPF32[i5 >> 2];
    HEAPF32[i13 >> 2] = -+HEAPF32[i12 >> 2];
    HEAPF32[i13 + 4 >> 2] = d22;
    HEAPF32[i13 + 8 >> 2] = d23;
    HEAPF32[i13 + 12 >> 2] = 0.0;
    i16 = i17 + 32 | 0;
    HEAPF32[i17 + (HEAP32[i16 >> 2] << 2) + 16 >> 2] = 0.0;
    i19 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
    HEAP32[i4 >> 2] = i19;
    HEAP32[i17 + (HEAP32[i16 >> 2] << 2) >> 2] = HEAP32[i2 + (i19 << 2) + 348 >> 2];
    i19 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i19 + 1;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, i13, HEAP32[i17 + (i19 << 2) >> 2] | 0);
    if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
     i19 = 1;
     STACKTOP = i1;
     return i19 | 0;
    } else {
     i19 = HEAP32[i3 >> 2] | 0;
     i16 = i19 + 32 | 0;
     i17 = (HEAP32[i16 >> 2] | 0) + -1 | 0;
     HEAP32[i16 >> 2] = i17;
     i17 = HEAP32[i19 + (i17 << 2) >> 2] | 0;
     i19 = HEAP32[i4 >> 2] | 0;
     HEAP32[i4 >> 2] = i19 + 1;
     HEAP32[i2 + (i19 << 2) + 348 >> 2] = i17;
     break;
    }
   }
  } else if ((i15 | 0) == 1) {
   i4 = i7 + 4 | 0;
   i14 = i7 + 8 | 0;
   i6 = i2 + 364 | 0;
   i13 = i8 + 4 | 0;
   i5 = i8 + 8 | 0;
   i12 = i8 + 12 | 0;
   i15 = 1;
   i16 = 0;
   while (1) {
    i17 = i7 + (i16 << 2) | 0;
    HEAP32[i7 + 0 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = 0;
    HEAP32[i7 + 8 >> 2] = 0;
    HEAP32[i7 + 12 >> 2] = 0;
    HEAPF32[i17 >> 2] = 1.0;
    i17 = i9 + 32 | 0;
    HEAPF32[i9 + (i15 << 2) + 16 >> 2] = 0.0;
    i19 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
    HEAP32[i6 >> 2] = i19;
    HEAP32[i9 + (HEAP32[i17 >> 2] << 2) >> 2] = HEAP32[i2 + (i19 << 2) + 348 >> 2];
    i19 = HEAP32[i17 >> 2] | 0;
    HEAP32[i17 >> 2] = i19 + 1;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, i7, HEAP32[i9 + (i19 << 2) >> 2] | 0);
    if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
     i3 = 1;
     i2 = 19;
     break;
    }
    i17 = HEAP32[i3 >> 2] | 0;
    i19 = i17 + 32 | 0;
    i15 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
    HEAP32[i19 >> 2] = i15;
    i15 = HEAP32[i17 + (i15 << 2) >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i17 + 1;
    HEAP32[i2 + (i17 << 2) + 348 >> 2] = i15;
    i17 = HEAP32[i3 >> 2] | 0;
    d22 = -+HEAPF32[i4 >> 2];
    d23 = -+HEAPF32[i14 >> 2];
    HEAPF32[i8 >> 2] = -+HEAPF32[i7 >> 2];
    HEAPF32[i13 >> 2] = d22;
    HEAPF32[i5 >> 2] = d23;
    HEAPF32[i12 >> 2] = 0.0;
    i15 = i17 + 32 | 0;
    HEAPF32[i17 + (HEAP32[i15 >> 2] << 2) + 16 >> 2] = 0.0;
    i19 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
    HEAP32[i6 >> 2] = i19;
    HEAP32[i17 + (HEAP32[i15 >> 2] << 2) >> 2] = HEAP32[i2 + (i19 << 2) + 348 >> 2];
    i19 = HEAP32[i15 >> 2] | 0;
    HEAP32[i15 >> 2] = i19 + 1;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, i8, HEAP32[i17 + (i19 << 2) >> 2] | 0);
    if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
     i3 = 1;
     i2 = 19;
     break;
    }
    i19 = HEAP32[i3 >> 2] | 0;
    i15 = i19 + 32 | 0;
    i17 = (HEAP32[i15 >> 2] | 0) + -1 | 0;
    HEAP32[i15 >> 2] = i17;
    i17 = HEAP32[i19 + (i17 << 2) >> 2] | 0;
    i19 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i19 + 1;
    HEAP32[i2 + (i19 << 2) + 348 >> 2] = i17;
    i16 = i16 + 1 | 0;
    if (!(i16 >>> 0 < 3)) {
     break L1;
    }
    i15 = HEAP32[i3 >> 2] | 0;
    i9 = i15;
    i15 = HEAP32[i15 + 32 >> 2] | 0;
   }
   if ((i2 | 0) == 19) {
    STACKTOP = i1;
    return i3 | 0;
   }
  } else if ((i15 | 0) == 4) {
   i19 = HEAP32[i9 >> 2] | 0;
   i17 = HEAP32[i9 + 12 >> 2] | 0;
   d23 = +HEAPF32[i17 + 16 >> 2];
   d25 = +HEAPF32[i19 + 16 >> 2] - d23;
   d10 = +HEAPF32[i17 + 20 >> 2];
   d11 = +HEAPF32[i19 + 20 >> 2] - d10;
   d20 = +HEAPF32[i17 + 24 >> 2];
   d21 = +HEAPF32[i19 + 24 >> 2] - d20;
   i19 = HEAP32[i9 + 4 >> 2] | 0;
   d18 = +HEAPF32[i19 + 16 >> 2] - d23;
   d22 = +HEAPF32[i19 + 20 >> 2] - d10;
   d24 = +HEAPF32[i19 + 24 >> 2] - d20;
   i19 = HEAP32[i9 + 8 >> 2] | 0;
   d23 = +HEAPF32[i19 + 16 >> 2] - d23;
   d10 = +HEAPF32[i19 + 20 >> 2] - d10;
   d20 = +HEAPF32[i19 + 24 >> 2] - d20;
   d23 = d25 * d22 * d20 + (d11 * d24 * d23 + d21 * d18 * d10 - d25 * d24 * d10 - d11 * d18 * d20) - d21 * d22 * d23;
   if (!(d23 != d23 | 0.0 != 0.0 | d23 == 0.0)) {
    i19 = 1;
    STACKTOP = i1;
    return i19 | 0;
   }
  } else if ((i15 | 0) == 2) {
   i12 = HEAP32[i9 + 4 >> 2] | 0;
   i9 = HEAP32[i9 >> 2] | 0;
   d18 = +HEAPF32[i12 + 16 >> 2] - +HEAPF32[i9 + 16 >> 2];
   d11 = +HEAPF32[i12 + 20 >> 2] - +HEAPF32[i9 + 20 >> 2];
   d10 = +HEAPF32[i12 + 24 >> 2] - +HEAPF32[i9 + 24 >> 2];
   i9 = i5 + 4 | 0;
   i12 = i5 + 8 | 0;
   i17 = i4 + 4 | 0;
   i16 = i4 + 8 | 0;
   i8 = i4 + 12 | 0;
   i19 = i2 + 364 | 0;
   i15 = i6 + 4 | 0;
   i14 = i6 + 8 | 0;
   i13 = i6 + 12 | 0;
   i7 = 0;
   while (1) {
    i26 = i5 + (i7 << 2) | 0;
    HEAP32[i5 + 0 >> 2] = 0;
    HEAP32[i5 + 4 >> 2] = 0;
    HEAP32[i5 + 8 >> 2] = 0;
    HEAP32[i5 + 12 >> 2] = 0;
    HEAPF32[i26 >> 2] = 1.0;
    d24 = +HEAPF32[i12 >> 2];
    d22 = +HEAPF32[i9 >> 2];
    d23 = d11 * d24 - d10 * d22;
    d25 = +HEAPF32[i5 >> 2];
    d24 = d10 * d25 - d18 * d24;
    d25 = d18 * d22 - d11 * d25;
    HEAPF32[i4 >> 2] = d23;
    HEAPF32[i17 >> 2] = d24;
    HEAPF32[i16 >> 2] = d25;
    HEAPF32[i8 >> 2] = 0.0;
    if (d23 * d23 + d24 * d24 + d25 * d25 > 0.0) {
     i27 = HEAP32[i3 >> 2] | 0;
     i28 = i27 + 32 | 0;
     HEAPF32[i27 + (HEAP32[i28 >> 2] << 2) + 16 >> 2] = 0.0;
     i26 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
     HEAP32[i19 >> 2] = i26;
     HEAP32[i27 + (HEAP32[i28 >> 2] << 2) >> 2] = HEAP32[i2 + (i26 << 2) + 348 >> 2];
     i26 = HEAP32[i28 >> 2] | 0;
     HEAP32[i28 >> 2] = i26 + 1;
     __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, i4, HEAP32[i27 + (i26 << 2) >> 2] | 0);
     if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
      i3 = 1;
      i2 = 19;
      break;
     }
     i27 = HEAP32[i3 >> 2] | 0;
     i28 = i27 + 32 | 0;
     i26 = (HEAP32[i28 >> 2] | 0) + -1 | 0;
     HEAP32[i28 >> 2] = i26;
     i26 = HEAP32[i27 + (i26 << 2) >> 2] | 0;
     i27 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i27 + 1;
     HEAP32[i2 + (i27 << 2) + 348 >> 2] = i26;
     i27 = HEAP32[i3 >> 2] | 0;
     d24 = -+HEAPF32[i17 >> 2];
     d25 = -+HEAPF32[i16 >> 2];
     HEAPF32[i6 >> 2] = -+HEAPF32[i4 >> 2];
     HEAPF32[i15 >> 2] = d24;
     HEAPF32[i14 >> 2] = d25;
     HEAPF32[i13 >> 2] = 0.0;
     i26 = i27 + 32 | 0;
     HEAPF32[i27 + (HEAP32[i26 >> 2] << 2) + 16 >> 2] = 0.0;
     i28 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
     HEAP32[i19 >> 2] = i28;
     HEAP32[i27 + (HEAP32[i26 >> 2] << 2) >> 2] = HEAP32[i2 + (i28 << 2) + 348 >> 2];
     i28 = HEAP32[i26 >> 2] | 0;
     HEAP32[i26 >> 2] = i28 + 1;
     __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, i6, HEAP32[i27 + (i28 << 2) >> 2] | 0);
     if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
      i3 = 1;
      i2 = 19;
      break;
     }
     i28 = HEAP32[i3 >> 2] | 0;
     i26 = i28 + 32 | 0;
     i27 = (HEAP32[i26 >> 2] | 0) + -1 | 0;
     HEAP32[i26 >> 2] = i27;
     i27 = HEAP32[i28 + (i27 << 2) >> 2] | 0;
     i28 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i28 + 1;
     HEAP32[i2 + (i28 << 2) + 348 >> 2] = i27;
    }
    i7 = i7 + 1 | 0;
    if (!(i7 >>> 0 < 3)) {
     break L1;
    }
   }
   if ((i2 | 0) == 19) {
    STACKTOP = i1;
    return i3 | 0;
   }
  }
 } while (0);
 i28 = 0;
 STACKTOP = i1;
 return i28 | 0;
}
function __ZN20btConvexHullInternal7computeEPKvbii(i4, i7, i11, i6, i2) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i1 + 64 | 0;
 i10 = i1 + 48 | 0;
 i9 = i1 + 32 | 0;
 i8 = i1 + 16 | 0;
 i3 = i1;
 i12 = (i2 | 0) > 0;
 if (i11) {
  if (i12) {
   d26 = 1.0000000150474662e+30;
   d28 = 1.0000000150474662e+30;
   d30 = 1.0000000150474662e+30;
   d27 = -1.0000000150474662e+30;
   d29 = -1.0000000150474662e+30;
   d31 = -1.0000000150474662e+30;
   i13 = 0;
   i12 = i7;
   while (1) {
    d22 = +HEAPF64[i12 >> 3];
    d21 = +HEAPF64[i12 + 8 >> 3];
    d20 = +HEAPF64[i12 + 16 >> 3];
    d26 = d22 < d26 ? d22 : d26;
    d28 = d21 < d28 ? d21 : d28;
    d30 = d20 < d30 ? d20 : d30;
    d27 = d27 < d22 ? d22 : d27;
    d29 = d29 < d21 ? d21 : d29;
    d31 = d31 < d20 ? d20 : d31;
    i13 = i13 + 1 | 0;
    if ((i13 | 0) == (i2 | 0)) {
     break;
    } else {
     i12 = i12 + i6 | 0;
    }
   }
  } else {
   d26 = 1.0000000150474662e+30;
   d27 = -1.0000000150474662e+30;
   d28 = 1.0000000150474662e+30;
   d29 = -1.0000000150474662e+30;
   d30 = 1.0000000150474662e+30;
   d31 = -1.0000000150474662e+30;
  }
 } else {
  if (i12) {
   d26 = 1.0000000150474662e+30;
   d28 = 1.0000000150474662e+30;
   d30 = 1.0000000150474662e+30;
   d27 = -1.0000000150474662e+30;
   d29 = -1.0000000150474662e+30;
   d31 = -1.0000000150474662e+30;
   i13 = 0;
   i12 = i7;
   while (1) {
    d22 = +HEAPF32[i12 >> 2];
    d21 = +HEAPF32[i12 + 4 >> 2];
    d20 = +HEAPF32[i12 + 8 >> 2];
    d26 = d22 < d26 ? d22 : d26;
    d28 = d21 < d28 ? d21 : d28;
    d30 = d20 < d30 ? d20 : d30;
    d27 = d27 < d22 ? d22 : d27;
    d29 = d29 < d21 ? d21 : d29;
    d31 = d31 < d20 ? d20 : d31;
    i13 = i13 + 1 | 0;
    if ((i13 | 0) == (i2 | 0)) {
     break;
    } else {
     i12 = i12 + i6 | 0;
    }
   }
  } else {
   d26 = 1.0000000150474662e+30;
   d27 = -1.0000000150474662e+30;
   d28 = 1.0000000150474662e+30;
   d29 = -1.0000000150474662e+30;
   d30 = 1.0000000150474662e+30;
   d31 = -1.0000000150474662e+30;
  }
 }
 d20 = d27 - d26;
 d21 = d29 - d28;
 d22 = d31 - d30;
 if (d20 < d21) {
  i17 = i4 + 112 | 0;
  HEAP32[i17 >> 2] = d21 < d22 ? 2 : 1;
  i12 = d20 < d22 ? 0 : 2;
 } else {
  i17 = i4 + 112 | 0;
  HEAP32[i17 >> 2] = d20 < d22 ? 2 : 0;
  i12 = d21 < d22 ? 1 : 2;
 }
 i16 = i4 + 104 | 0;
 HEAP32[i16 >> 2] = i12;
 i13 = HEAP32[i17 >> 2] | 0;
 if ((i12 | 0) == (i13 | 0)) {
  i12 = ((i12 + 1 | 0) >>> 0) % 3 | 0;
  HEAP32[i16 >> 2] = i12;
  i13 = HEAP32[i17 >> 2] | 0;
 }
 i19 = i4 + 108 | 0;
 HEAP32[i19 >> 2] = 3 - i13 - i12;
 d20 = d20 * 9788566967472434.0e-20;
 d21 = d21 * 9788566967472434.0e-20;
 d22 = d22 * 9788566967472434.0e-20;
 HEAPF32[i4 >> 2] = d20;
 HEAPF32[i4 + 4 >> 2] = d21;
 HEAPF32[i4 + 8 >> 2] = d22;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 if (d20 > 0.0) {
  d20 = 1.0 / d20;
 }
 if (d21 > 0.0) {
  d21 = 1.0 / d21;
 }
 if (d22 > 0.0) {
  d22 = 1.0 / d22;
 }
 i24 = i4 + 16 | 0;
 HEAPF32[i4 + 16 >> 2] = (d26 + d27) * .5;
 i23 = i4 + 20 | 0;
 HEAPF32[i23 >> 2] = (d28 + d29) * .5;
 i25 = i4 + 24 | 0;
 HEAPF32[i25 >> 2] = (d30 + d31) * .5;
 HEAPF32[i4 + 28 >> 2] = 0.0;
 i12 = i5 + 16 | 0;
 HEAP8[i12] = 1;
 i13 = i5 + 12 | 0;
 HEAP32[i13 >> 2] = 0;
 i14 = i5 + 4 | 0;
 HEAP32[i14 >> 2] = 0;
 i15 = i5 + 8 | 0;
 HEAP32[i15 >> 2] = 0;
 i18 = (i2 | 0) > 0;
 L25 : do {
  if (i18) {
   i32 = __Z22btAlignedAllocInternalji(i2 << 4, 16) | 0;
   i33 = HEAP32[i14 >> 2] | 0;
   if ((i33 | 0) > 0) {
    i34 = 0;
    do {
     i35 = i32 + (i34 << 4) | 0;
     if ((i35 | 0) != 0) {
      i36 = (HEAP32[i13 >> 2] | 0) + (i34 << 4) | 0;
      HEAP32[i35 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
      HEAP32[i35 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
      HEAP32[i35 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
      HEAP32[i35 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
     }
     i34 = i34 + 1 | 0;
    } while ((i34 | 0) != (i33 | 0));
   }
   i33 = HEAP32[i13 >> 2] | 0;
   if ((i33 | 0) != 0) {
    if ((HEAP8[i12] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i33);
    }
    HEAP32[i13 >> 2] = 0;
   }
   HEAP8[i12] = 1;
   HEAP32[i13 >> 2] = i32;
   HEAP32[i15 >> 2] = i2;
   i33 = 0;
   while (1) {
    i32 = i32 + (i33 << 4) | 0;
    if ((i32 | 0) != 0) {
     HEAP32[i32 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
     HEAP32[i32 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i32 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i32 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
    }
    i33 = i33 + 1 | 0;
    if ((i33 | 0) == (i2 | 0)) {
     break L25;
    }
    i32 = HEAP32[i13 >> 2] | 0;
   }
  }
 } while (0);
 HEAP32[i14 >> 2] = i2;
 L47 : do {
  if (i11) {
   if (i18) {
    i11 = i9 + 4 | 0;
    i10 = i9 + 8 | 0;
    i8 = i9 + 12 | 0;
    i32 = HEAP32[i13 >> 2] | 0;
    d26 = +HEAPF32[i24 >> 2];
    d27 = +HEAPF32[i23 >> 2];
    d28 = +HEAPF32[i25 >> 2];
    i23 = 0;
    while (1) {
     d30 = d21 * (+HEAPF64[i7 + 8 >> 3] - d27);
     d31 = d22 * (+HEAPF64[i7 + 16 >> 3] - d28);
     HEAPF32[i9 >> 2] = d20 * (+HEAPF64[i7 >> 3] - d26);
     HEAPF32[i11 >> 2] = d30;
     HEAPF32[i10 >> 2] = d31;
     HEAPF32[i8 >> 2] = 0.0;
     HEAP32[i32 + (i23 << 4) >> 2] = ~~+HEAPF32[i9 + (HEAP32[i19 >> 2] << 2) >> 2];
     HEAP32[i32 + (i23 << 4) + 4 >> 2] = ~~+HEAPF32[i9 + (HEAP32[i17 >> 2] << 2) >> 2];
     HEAP32[i32 + (i23 << 4) + 8 >> 2] = ~~+HEAPF32[i9 + (HEAP32[i16 >> 2] << 2) >> 2];
     HEAP32[i32 + (i23 << 4) + 12 >> 2] = i23;
     i23 = i23 + 1 | 0;
     if ((i23 | 0) == (i2 | 0)) {
      break L47;
     }
     i7 = i7 + i6 | 0;
    }
   }
  } else {
   if (i18) {
    i11 = i8 + 4 | 0;
    i9 = i8 + 8 | 0;
    i10 = i8 + 12 | 0;
    i32 = HEAP32[i13 >> 2] | 0;
    d26 = +HEAPF32[i24 >> 2];
    d27 = +HEAPF32[i23 >> 2];
    d28 = +HEAPF32[i25 >> 2];
    i23 = 0;
    while (1) {
     d29 = +HEAPF32[i7 >> 2];
     HEAPF32[i8 >> 2] = d29;
     d30 = +HEAPF32[i7 + 4 >> 2];
     HEAPF32[i11 >> 2] = d30;
     d31 = d22 * (+HEAPF32[i7 + 8 >> 2] - d28);
     HEAPF32[i8 >> 2] = d20 * (d29 - d26);
     HEAPF32[i11 >> 2] = d21 * (d30 - d27);
     HEAPF32[i9 >> 2] = d31;
     HEAPF32[i10 >> 2] = 0.0;
     HEAP32[i32 + (i23 << 4) >> 2] = ~~+HEAPF32[i8 + (HEAP32[i19 >> 2] << 2) >> 2];
     HEAP32[i32 + (i23 << 4) + 4 >> 2] = ~~+HEAPF32[i8 + (HEAP32[i17 >> 2] << 2) >> 2];
     HEAP32[i32 + (i23 << 4) + 8 >> 2] = ~~+HEAPF32[i8 + (HEAP32[i16 >> 2] << 2) >> 2];
     HEAP32[i32 + (i23 << 4) + 12 >> 2] = i23;
     i23 = i23 + 1 | 0;
     if ((i23 | 0) == (i2 | 0)) {
      break L47;
     }
     i7 = i7 + i6 | 0;
    }
   }
  }
 } while (0);
 i6 = HEAP32[i14 >> 2] | 0;
 if ((i6 | 0) > 1) {
  __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalIPFbRKS1_S5_EEEvT_ii(i5, 20, 0, i6 + -1 | 0);
 }
 i5 = i4 + 32 | 0;
 HEAP32[i4 + 36 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 44 >> 2] = i2;
 i6 = i4 + 84 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i2 | 0)) {
  i10 = i4 + 88 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i2 | 0)) {
   if ((i2 | 0) == 0) {
    i9 = 0;
    i11 = i7;
   } else {
    i9 = __Z22btAlignedAllocInternalji(i2 << 2, 16) | 0;
    i11 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i4 + 92 | 0;
   if ((i11 | 0) > 0) {
    i16 = 0;
    do {
     i17 = i9 + (i16 << 2) | 0;
     if ((i17 | 0) != 0) {
      HEAP32[i17 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i16 << 2) >> 2];
     }
     i16 = i16 + 1 | 0;
    } while ((i16 | 0) != (i11 | 0));
   }
   i16 = HEAP32[i8 >> 2] | 0;
   i11 = i4 + 96 | 0;
   if ((i16 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i16);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i8 >> 2] = i9;
   HEAP32[i10 >> 2] = i2;
  } else {
   i8 = i4 + 92 | 0;
  }
  do {
   i9 = (HEAP32[i8 >> 2] | 0) + (i7 << 2) | 0;
   if ((i9 | 0) != 0) {
    HEAP32[i9 >> 2] = 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i2 | 0));
 }
 HEAP32[i6 >> 2] = i2;
 if (i18) {
  i6 = i4 + 92 | 0;
  i7 = 0;
  do {
   i36 = __ZN20btConvexHullInternal4PoolINS_6VertexEE9newObjectEv(i5) | 0;
   HEAP32[i36 + 8 >> 2] = 0;
   i35 = i36 + 88 | 0;
   i34 = (HEAP32[i13 >> 2] | 0) + (i7 << 4) | 0;
   HEAP32[i35 + 0 >> 2] = HEAP32[i34 + 0 >> 2];
   HEAP32[i35 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
   HEAP32[i35 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
   HEAP32[i35 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
   HEAP32[i36 + 104 >> 2] = -1;
   HEAP32[(HEAP32[i6 >> 2] | 0) + (i7 << 2) >> 2] = i36;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < (i2 | 0));
 }
 i5 = HEAP32[i13 >> 2] | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i12] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i13 >> 2] = 0;
 }
 HEAP8[i12] = 1;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i4 + 52 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i4 + 56 >> 2] = 0;
 HEAP32[i4 + 60 >> 2] = i2 * 6;
 HEAP32[i4 + 116 >> 2] = 0;
 HEAP32[i4 + 120 >> 2] = 0;
 HEAP32[i4 + 100 >> 2] = -3;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i4, 0, i2, i3);
 HEAP32[i4 + 124 >> 2] = HEAP32[i3 >> 2];
 i2 = HEAP32[i13 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP8[i12] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i2);
 }
 HEAP32[i13 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZN22btCompoundLeafCallback17ProcessChildShapeEP16btCollisionShapei(i31, i33, i30) {
 i31 = i31 | 0;
 i33 = i33 | 0;
 i30 = i30 | 0;
 var d1 = 0.0, i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i32 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, i49 = 0, i50 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i19 = i21 + 160 | 0;
 i32 = i21 + 96 | 0;
 i24 = i21 + 80 | 0;
 i25 = i21 + 64 | 0;
 i27 = i21 + 48 | 0;
 i28 = i21 + 32 | 0;
 i23 = i21 + 16 | 0;
 i26 = i21;
 i15 = i31 + 4 | 0;
 i36 = HEAP32[i15 >> 2] | 0;
 i29 = HEAP32[i36 + 192 >> 2] | 0;
 d3 = +HEAPF32[i36 + 4 >> 2];
 d4 = +HEAPF32[i36 + 8 >> 2];
 d5 = +HEAPF32[i36 + 12 >> 2];
 d6 = +HEAPF32[i36 + 16 >> 2];
 d7 = +HEAPF32[i36 + 20 >> 2];
 d8 = +HEAPF32[i36 + 24 >> 2];
 d9 = +HEAPF32[i36 + 28 >> 2];
 d10 = +HEAPF32[i36 + 32 >> 2];
 d11 = +HEAPF32[i36 + 36 >> 2];
 d12 = +HEAPF32[i36 + 40 >> 2];
 d13 = +HEAPF32[i36 + 44 >> 2];
 d14 = +HEAPF32[i36 + 48 >> 2];
 d1 = +HEAPF32[i36 + 52 >> 2];
 d16 = +HEAPF32[i36 + 56 >> 2];
 d17 = +HEAPF32[i36 + 60 >> 2];
 d18 = +HEAPF32[i36 + 64 >> 2];
 i20 = i36 + 68 | 0;
 HEAP32[i19 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i19 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i19 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 i20 = i19 + 16 | 0;
 i2 = i36 + 84 | 0;
 HEAP32[i20 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i20 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i20 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i20 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i2 = i19 + 32 | 0;
 i22 = i36 + 100 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 i22 = i19 + 48 | 0;
 i36 = i36 + 116 | 0;
 HEAP32[i22 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
 HEAP32[i22 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
 HEAP32[i22 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
 HEAP32[i22 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
 i29 = HEAP32[i29 + 24 >> 2] | 0;
 d48 = +HEAPF32[i29 + (i30 * 80 | 0) >> 2];
 d47 = +HEAPF32[i29 + (i30 * 80 | 0) + 16 >> 2];
 d46 = +HEAPF32[i29 + (i30 * 80 | 0) + 32 >> 2];
 d45 = +HEAPF32[i29 + (i30 * 80 | 0) + 4 >> 2];
 d44 = +HEAPF32[i29 + (i30 * 80 | 0) + 20 >> 2];
 d43 = +HEAPF32[i29 + (i30 * 80 | 0) + 36 >> 2];
 d42 = +HEAPF32[i29 + (i30 * 80 | 0) + 8 >> 2];
 d41 = +HEAPF32[i29 + (i30 * 80 | 0) + 24 >> 2];
 d40 = +HEAPF32[i29 + (i30 * 80 | 0) + 40 >> 2];
 d39 = +HEAPF32[i29 + (i30 * 80 | 0) + 48 >> 2];
 d38 = +HEAPF32[i29 + (i30 * 80 | 0) + 52 >> 2];
 d37 = +HEAPF32[i29 + (i30 * 80 | 0) + 56 >> 2];
 HEAPF32[i32 >> 2] = d3 * d48 + d4 * d47 + d5 * d46;
 HEAPF32[i32 + 4 >> 2] = d3 * d45 + d4 * d44 + d5 * d43;
 HEAPF32[i32 + 8 >> 2] = d3 * d42 + d4 * d41 + d5 * d40;
 HEAPF32[i32 + 12 >> 2] = 0.0;
 HEAPF32[i32 + 16 >> 2] = d7 * d48 + d8 * d47 + d9 * d46;
 HEAPF32[i32 + 20 >> 2] = d7 * d45 + d8 * d44 + d9 * d43;
 HEAPF32[i32 + 24 >> 2] = d7 * d42 + d8 * d41 + d9 * d40;
 HEAPF32[i32 + 28 >> 2] = 0.0;
 HEAPF32[i32 + 32 >> 2] = d11 * d48 + d12 * d47 + d13 * d46;
 HEAPF32[i32 + 36 >> 2] = d11 * d45 + d12 * d44 + d13 * d43;
 HEAPF32[i32 + 40 >> 2] = d11 * d42 + d12 * d41 + d13 * d40;
 HEAPF32[i32 + 44 >> 2] = 0.0;
 HEAPF32[i32 + 48 >> 2] = d1 + (d3 * d39 + d4 * d38 + d5 * d37);
 HEAPF32[i32 + 52 >> 2] = d16 + (d7 * d39 + d8 * d38 + d9 * d37);
 HEAPF32[i32 + 56 >> 2] = d17 + (d11 * d39 + d12 * d38 + d13 * d37);
 HEAPF32[i32 + 60 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i33 >> 2] | 0) + 8 >> 2] & 63](i33, i32, i24, i25);
 i29 = i31 + 8 | 0;
 i36 = HEAP32[i29 >> 2] | 0;
 i35 = HEAP32[i36 + 192 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i35 >> 2] | 0) + 8 >> 2] & 63](i35, i36 + 4 | 0, i27, i28);
 if (!(+HEAPF32[i24 >> 2] > +HEAPF32[i28 >> 2]) ? !(+HEAPF32[i25 >> 2] < +HEAPF32[i27 >> 2]) : 0) {
  i34 = 1;
 } else {
  i34 = 0;
 }
 if (!(!(+HEAPF32[i24 + 8 >> 2] > +HEAPF32[i28 + 8 >> 2]) ? !(+HEAPF32[i25 + 8 >> 2] < +HEAPF32[i27 + 8 >> 2]) : 0)) {
  i34 = 0;
 }
 if (+HEAPF32[i24 + 4 >> 2] > +HEAPF32[i28 + 4 >> 2]) {
  STACKTOP = i21;
  return;
 }
 if (+HEAPF32[i25 + 4 >> 2] < +HEAPF32[i27 + 4 >> 2] | i34 ^ 1) {
  STACKTOP = i21;
  return;
 }
 i34 = HEAP32[i15 >> 2] | 0;
 i36 = i34 + 4 | 0;
 HEAP32[i36 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
 HEAP32[i36 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i36 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i36 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
 i36 = i34 + 20 | 0;
 i49 = i32 + 16 | 0;
 HEAP32[i36 + 0 >> 2] = HEAP32[i49 + 0 >> 2];
 HEAP32[i36 + 4 >> 2] = HEAP32[i49 + 4 >> 2];
 HEAP32[i36 + 8 >> 2] = HEAP32[i49 + 8 >> 2];
 HEAP32[i36 + 12 >> 2] = HEAP32[i49 + 12 >> 2];
 i36 = i34 + 36 | 0;
 i35 = i32 + 32 | 0;
 HEAP32[i36 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
 HEAP32[i36 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
 HEAP32[i36 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
 HEAP32[i36 + 12 >> 2] = HEAP32[i35 + 12 >> 2];
 i34 = i34 + 52 | 0;
 i36 = i32 + 48 | 0;
 HEAP32[i34 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
 HEAP32[i34 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
 HEAP32[i34 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
 HEAP32[i34 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
 i34 = HEAP32[i15 >> 2] | 0;
 i50 = i34 + 68 | 0;
 HEAP32[i50 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
 HEAP32[i50 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i50 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i50 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
 i32 = i34 + 84 | 0;
 HEAP32[i32 + 0 >> 2] = HEAP32[i49 + 0 >> 2];
 HEAP32[i32 + 4 >> 2] = HEAP32[i49 + 4 >> 2];
 HEAP32[i32 + 8 >> 2] = HEAP32[i49 + 8 >> 2];
 HEAP32[i32 + 12 >> 2] = HEAP32[i49 + 12 >> 2];
 i32 = i34 + 100 | 0;
 HEAP32[i32 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
 HEAP32[i32 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
 HEAP32[i32 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
 HEAP32[i32 + 12 >> 2] = HEAP32[i35 + 12 >> 2];
 i34 = i34 + 116 | 0;
 HEAP32[i34 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
 HEAP32[i34 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
 HEAP32[i34 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
 HEAP32[i34 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
 i34 = (HEAP32[i15 >> 2] | 0) + 192 | 0;
 i32 = HEAP32[i34 >> 2] | 0;
 HEAP32[i34 >> 2] = i33;
 i34 = i31 + 24 | 0;
 if ((HEAP32[(HEAP32[i34 >> 2] | 0) + (i30 << 2) >> 2] | 0) == 0) {
  i50 = HEAP32[i31 + 12 >> 2] | 0;
  i50 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i50 >> 2] | 0) + 8 >> 2] & 15](i50, HEAP32[i15 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[i31 + 28 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i34 >> 2] | 0) + (i30 << 2) >> 2] = i50;
 }
 i33 = i31 + 20 | 0;
 i36 = HEAP32[i33 >> 2] | 0;
 i35 = HEAP32[i36 >> 2] | 0;
 if ((HEAP32[i36 + 136 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) {
  FUNCTION_TABLE_viii[HEAP32[i35 + 8 >> 2] & 63](i36, -1, i30);
 } else {
  FUNCTION_TABLE_viii[HEAP32[i35 + 12 >> 2] & 63](i36, -1, i30);
 }
 i50 = HEAP32[(HEAP32[i34 >> 2] | 0) + (i30 << 2) >> 2] | 0;
 i30 = i31 + 16 | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i50 >> 2] | 0) + 8 >> 2] & 31](i50, HEAP32[i15 >> 2] | 0, HEAP32[i29 >> 2] | 0, HEAP32[i30 >> 2] | 0, HEAP32[i33 >> 2] | 0);
 i29 = HEAP32[(HEAP32[i30 >> 2] | 0) + 20 >> 2] | 0;
 if ((i29 | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 48 >> 2] & 127](i29) | 0) & 2 | 0) != 0 : 0) {
  i50 = HEAP32[(HEAP32[i30 >> 2] | 0) + 20 >> 2] | 0;
  i49 = HEAP32[(HEAP32[i50 >> 2] | 0) + 52 >> 2] | 0;
  HEAPF32[i23 >> 2] = 1.0;
  HEAPF32[i23 + 4 >> 2] = 1.0;
  HEAPF32[i23 + 8 >> 2] = 1.0;
  HEAPF32[i23 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiii[i49 & 63](i50, i24, i25, i23);
  i50 = HEAP32[(HEAP32[i30 >> 2] | 0) + 20 >> 2] | 0;
  i49 = HEAP32[(HEAP32[i50 >> 2] | 0) + 52 >> 2] | 0;
  HEAPF32[i26 >> 2] = 1.0;
  HEAPF32[i26 + 4 >> 2] = 1.0;
  HEAPF32[i26 + 8 >> 2] = 1.0;
  HEAPF32[i26 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiii[i49 & 63](i50, i27, i28, i26);
 }
 HEAP32[(HEAP32[i15 >> 2] | 0) + 192 >> 2] = i32;
 i50 = HEAP32[i15 >> 2] | 0;
 HEAPF32[i50 + 4 >> 2] = d3;
 HEAPF32[i50 + 8 >> 2] = d4;
 HEAPF32[i50 + 12 >> 2] = d5;
 HEAPF32[i50 + 16 >> 2] = d6;
 HEAPF32[i50 + 20 >> 2] = d7;
 HEAPF32[i50 + 24 >> 2] = d8;
 HEAPF32[i50 + 28 >> 2] = d9;
 HEAPF32[i50 + 32 >> 2] = d10;
 HEAPF32[i50 + 36 >> 2] = d11;
 HEAPF32[i50 + 40 >> 2] = d12;
 HEAPF32[i50 + 44 >> 2] = d13;
 HEAPF32[i50 + 48 >> 2] = d14;
 HEAPF32[i50 + 52 >> 2] = d1;
 HEAPF32[i50 + 56 >> 2] = d16;
 HEAPF32[i50 + 60 >> 2] = d17;
 HEAPF32[i50 + 64 >> 2] = d18;
 i50 = HEAP32[i15 >> 2] | 0;
 i49 = i50 + 68 | 0;
 HEAP32[i49 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
 HEAP32[i49 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i49 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
 HEAP32[i49 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
 i49 = i50 + 84 | 0;
 HEAP32[i49 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 HEAP32[i49 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i49 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i49 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 i49 = i50 + 100 | 0;
 HEAP32[i49 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i49 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i49 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i49 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i50 = i50 + 116 | 0;
 HEAP32[i50 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i50 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i50 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 HEAP32[i50 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 STACKTOP = i21;
 return;
}
function __ZN15btGjkEpaSolver28DistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE(i6, i3, i5, i30, i45, i1) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i30 = i30 | 0;
 i45 = i45 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, d52 = 0.0, d53 = 0.0, d54 = 0.0, i55 = 0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, i60 = 0, d61 = 0.0, d62 = 0.0, d63 = 0.0, i64 = 0, i65 = 0, d66 = 0.0, d67 = 0.0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0, d73 = 0.0, d74 = 0.0, d75 = 0.0, d76 = 0.0, d77 = 0.0, i78 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i16 = i2 + 544 | 0;
 i18 = i2 + 528 | 0;
 i19 = i2 + 400 | 0;
 i44 = i2 + 16 | 0;
 i17 = i2;
 i20 = i1 + 4 | 0;
 i36 = i1 + 20 | 0;
 i4 = i1 + 20 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i20 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
 HEAP32[i20 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
 HEAP32[i20 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
 HEAP32[i20 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
 HEAP32[i1 >> 2] = 0;
 HEAP32[i19 >> 2] = i6;
 i20 = i19 + 4 | 0;
 HEAP32[i20 >> 2] = i5;
 d56 = +HEAPF32[i30 >> 2];
 d69 = +HEAPF32[i3 >> 2];
 i36 = i30 + 16 | 0;
 d54 = +HEAPF32[i36 >> 2];
 i15 = i3 + 16 | 0;
 d70 = +HEAPF32[i15 >> 2];
 i35 = i30 + 32 | 0;
 d53 = +HEAPF32[i35 >> 2];
 i13 = i3 + 32 | 0;
 d71 = +HEAPF32[i13 >> 2];
 i10 = i3 + 4 | 0;
 d72 = +HEAPF32[i10 >> 2];
 i12 = i3 + 20 | 0;
 d75 = +HEAPF32[i12 >> 2];
 i7 = i3 + 36 | 0;
 d73 = +HEAPF32[i7 >> 2];
 i11 = i3 + 8 | 0;
 d76 = +HEAPF32[i11 >> 2];
 i6 = i3 + 24 | 0;
 d77 = +HEAPF32[i6 >> 2];
 i8 = i3 + 40 | 0;
 d59 = +HEAPF32[i8 >> 2];
 i33 = i30 + 4 | 0;
 d66 = +HEAPF32[i33 >> 2];
 i32 = i30 + 20 | 0;
 d67 = +HEAPF32[i32 >> 2];
 i31 = i30 + 36 | 0;
 d68 = +HEAPF32[i31 >> 2];
 i43 = i30 + 8 | 0;
 d74 = +HEAPF32[i43 >> 2];
 i42 = i30 + 24 | 0;
 d62 = +HEAPF32[i42 >> 2];
 i41 = i30 + 40 | 0;
 d57 = +HEAPF32[i41 >> 2];
 i28 = i19 + 8 | 0;
 HEAPF32[i28 >> 2] = d56 * d69 + d54 * d70 + d53 * d71;
 i21 = i19 + 12 | 0;
 HEAPF32[i21 >> 2] = d56 * d72 + d54 * d75 + d53 * d73;
 i22 = i19 + 16 | 0;
 HEAPF32[i22 >> 2] = d56 * d76 + d54 * d77 + d53 * d59;
 HEAPF32[i19 + 20 >> 2] = 0.0;
 i25 = i19 + 24 | 0;
 HEAPF32[i25 >> 2] = d69 * d66 + d70 * d67 + d71 * d68;
 i23 = i19 + 28 | 0;
 HEAPF32[i23 >> 2] = d72 * d66 + d75 * d67 + d73 * d68;
 i24 = i19 + 32 | 0;
 HEAPF32[i24 >> 2] = d76 * d66 + d77 * d67 + d59 * d68;
 HEAPF32[i19 + 36 >> 2] = 0.0;
 i29 = i19 + 40 | 0;
 HEAPF32[i29 >> 2] = d69 * d74 + d70 * d62 + d71 * d57;
 i26 = i19 + 44 | 0;
 HEAPF32[i26 >> 2] = d72 * d74 + d75 * d62 + d73 * d57;
 i27 = i19 + 48 | 0;
 HEAPF32[i27 >> 2] = d76 * d74 + d77 * d62 + d59 * d57;
 HEAPF32[i19 + 52 >> 2] = 0.0;
 i9 = i3 + 48 | 0;
 d57 = +HEAPF32[i30 + 48 >> 2] - +HEAPF32[i9 >> 2];
 i5 = i3 + 52 | 0;
 d59 = +HEAPF32[i30 + 52 >> 2] - +HEAPF32[i5 >> 2];
 i14 = i3 + 56 | 0;
 d62 = +HEAPF32[i30 + 56 >> 2] - +HEAPF32[i14 >> 2];
 d77 = +HEAPF32[i3 >> 2];
 d74 = +HEAPF32[i30 >> 2];
 d76 = +HEAPF32[i15 >> 2];
 d73 = +HEAPF32[i36 >> 2];
 d75 = +HEAPF32[i13 >> 2];
 d72 = +HEAPF32[i35 >> 2];
 d71 = +HEAPF32[i33 >> 2];
 d70 = +HEAPF32[i32 >> 2];
 d69 = +HEAPF32[i31 >> 2];
 d68 = +HEAPF32[i43 >> 2];
 d67 = +HEAPF32[i42 >> 2];
 d66 = +HEAPF32[i41 >> 2];
 d53 = +HEAPF32[i10 >> 2];
 d54 = +HEAPF32[i12 >> 2];
 d56 = +HEAPF32[i7 >> 2];
 d58 = +HEAPF32[i11 >> 2];
 d61 = +HEAPF32[i6 >> 2];
 d63 = +HEAPF32[i8 >> 2];
 d52 = d57 * +HEAPF32[i3 >> 2] + d59 * +HEAPF32[i15 >> 2] + d62 * +HEAPF32[i13 >> 2];
 i41 = i19 + 56 | 0;
 HEAPF32[i41 >> 2] = d77 * d74 + d76 * d73 + d75 * d72;
 i42 = i19 + 60 | 0;
 HEAPF32[i42 >> 2] = d77 * d71 + d76 * d70 + d75 * d69;
 i43 = i19 + 64 | 0;
 HEAPF32[i43 >> 2] = d77 * d68 + d76 * d67 + d75 * d66;
 HEAPF32[i19 + 68 >> 2] = 0.0;
 i31 = i19 + 72 | 0;
 HEAPF32[i31 >> 2] = d74 * d53 + d73 * d54 + d72 * d56;
 i32 = i19 + 76 | 0;
 HEAPF32[i32 >> 2] = d71 * d53 + d70 * d54 + d69 * d56;
 i33 = i19 + 80 | 0;
 HEAPF32[i33 >> 2] = d68 * d53 + d67 * d54 + d66 * d56;
 HEAPF32[i19 + 84 >> 2] = 0.0;
 i35 = i19 + 88 | 0;
 HEAPF32[i35 >> 2] = d74 * d58 + d73 * d61 + d72 * d63;
 i36 = i19 + 92 | 0;
 HEAPF32[i36 >> 2] = d71 * d58 + d70 * d61 + d69 * d63;
 i37 = i19 + 96 | 0;
 HEAPF32[i37 >> 2] = d68 * d58 + d67 * d61 + d66 * d63;
 HEAPF32[i19 + 100 >> 2] = 0.0;
 i39 = i19 + 104 | 0;
 HEAPF32[i39 >> 2] = d52;
 i30 = i19 + 108 | 0;
 HEAPF32[i30 >> 2] = d57 * d53 + d59 * d54 + d62 * d56;
 i34 = i19 + 112 | 0;
 HEAPF32[i34 >> 2] = d57 * d58 + d59 * d61 + d62 * d63;
 HEAPF32[i19 + 116 >> 2] = 0.0;
 i38 = i19 + 120 | 0;
 HEAP32[i38 >> 2] = 54;
 i40 = i19 + 124 | 0;
 HEAP32[i40 >> 2] = 0;
 i64 = i44 + 128 | 0;
 HEAP32[i44 + 364 >> 2] = 0;
 i65 = i44 + 376 | 0;
 HEAP32[i64 + 0 >> 2] = 0;
 HEAP32[i64 + 4 >> 2] = 0;
 HEAP32[i64 + 8 >> 2] = 0;
 HEAP32[i64 + 12 >> 2] = 0;
 HEAP32[i65 >> 2] = 2;
 HEAP32[i44 + 368 >> 2] = 0;
 HEAPF32[i44 + 144 >> 2] = 0.0;
 i45 = __ZN12gjkepa2_impl3GJK8EvaluateERKNS_13MinkowskiDiffERK9btVector3(i44, i19, i45) | 0;
 if ((i45 | 0) != 0) {
  HEAP32[i1 >> 2] = (i45 | 0) == 1 ? 1 : 2;
  i65 = 0;
  STACKTOP = i2;
  return i65 | 0;
 }
 i48 = i44 + 372 | 0;
 i60 = HEAP32[i48 >> 2] | 0;
 if ((HEAP32[i60 + 32 >> 2] | 0) == 0) {
  d59 = 0.0;
  d58 = 0.0;
  d52 = 0.0;
  d54 = 0.0;
  d53 = 0.0;
  d56 = 0.0;
 } else {
  i50 = i17 + 4 | 0;
  i51 = i17 + 8 | 0;
  i46 = i18 + 4 | 0;
  i45 = i18 + 8 | 0;
  i47 = i18 + 12 | 0;
  i44 = i16 + 4 | 0;
  i49 = i16 + 8 | 0;
  d52 = 0.0;
  d58 = 0.0;
  d59 = 0.0;
  d56 = 0.0;
  d53 = 0.0;
  d54 = 0.0;
  i55 = 0;
  do {
   d57 = +HEAPF32[i60 + (i55 << 2) + 16 >> 2];
   i65 = HEAP32[i38 >> 2] | 0;
   i78 = HEAP32[i40 >> 2] | 0;
   i64 = (HEAP32[i19 >> 2] | 0) + (i78 >> 1) | 0;
   if ((i78 & 1 | 0) != 0) {
    i65 = HEAP32[(HEAP32[i64 >> 2] | 0) + i65 >> 2] | 0;
   }
   FUNCTION_TABLE_viii[i65 & 63](i17, i64, HEAP32[i60 + (i55 << 2) >> 2] | 0);
   d52 = d52 + d57 * +HEAPF32[i17 >> 2];
   d58 = d58 + d57 * +HEAPF32[i50 >> 2];
   d59 = d59 + d57 * +HEAPF32[i51 >> 2];
   i64 = HEAP32[(HEAP32[i48 >> 2] | 0) + (i55 << 2) >> 2] | 0;
   d61 = -+HEAPF32[i64 >> 2];
   d63 = -+HEAPF32[i64 + 4 >> 2];
   d62 = -+HEAPF32[i64 + 8 >> 2];
   i64 = HEAP32[i38 >> 2] | 0;
   i78 = HEAP32[i40 >> 2] | 0;
   i60 = (HEAP32[i20 >> 2] | 0) + (i78 >> 1) | 0;
   if ((i78 & 1 | 0) != 0) {
    i64 = HEAP32[(HEAP32[i60 >> 2] | 0) + i64 >> 2] | 0;
   }
   d76 = +HEAPF32[i25 >> 2] * d61 + +HEAPF32[i23 >> 2] * d63 + +HEAPF32[i24 >> 2] * d62;
   d75 = +HEAPF32[i29 >> 2] * d61 + +HEAPF32[i26 >> 2] * d63 + +HEAPF32[i27 >> 2] * d62;
   HEAPF32[i18 >> 2] = +HEAPF32[i28 >> 2] * d61 + +HEAPF32[i21 >> 2] * d63 + +HEAPF32[i22 >> 2] * d62;
   HEAPF32[i46 >> 2] = d76;
   HEAPF32[i45 >> 2] = d75;
   HEAPF32[i47 >> 2] = 0.0;
   FUNCTION_TABLE_viii[i64 & 63](i16, i60, i18);
   d75 = +HEAPF32[i16 >> 2];
   d76 = +HEAPF32[i44 >> 2];
   d77 = +HEAPF32[i49 >> 2];
   d56 = d56 + d57 * (+HEAPF32[i39 >> 2] + (+HEAPF32[i41 >> 2] * d75 + +HEAPF32[i42 >> 2] * d76 + +HEAPF32[i43 >> 2] * d77));
   d53 = d53 + d57 * (+HEAPF32[i30 >> 2] + (d75 * +HEAPF32[i31 >> 2] + d76 * +HEAPF32[i32 >> 2] + d77 * +HEAPF32[i33 >> 2]));
   d54 = d54 + d57 * (+HEAPF32[i34 >> 2] + (d75 * +HEAPF32[i35 >> 2] + d76 * +HEAPF32[i36 >> 2] + d77 * +HEAPF32[i37 >> 2]));
   i55 = i55 + 1 | 0;
   i60 = HEAP32[i48 >> 2] | 0;
  } while (i55 >>> 0 < (HEAP32[i60 + 32 >> 2] | 0) >>> 0);
 }
 d77 = +HEAPF32[i5 >> 2] + (d52 * +HEAPF32[i15 >> 2] + d58 * +HEAPF32[i12 >> 2] + d59 * +HEAPF32[i6 >> 2]);
 d76 = +HEAPF32[i14 >> 2] + (d52 * +HEAPF32[i13 >> 2] + d58 * +HEAPF32[i7 >> 2] + d59 * +HEAPF32[i8 >> 2]);
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[i9 >> 2] + (d52 * +HEAPF32[i3 >> 2] + d58 * +HEAPF32[i10 >> 2] + d59 * +HEAPF32[i11 >> 2]);
 HEAPF32[i1 + 8 >> 2] = d77;
 HEAPF32[i1 + 12 >> 2] = d76;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 d76 = +HEAPF32[i5 >> 2] + (d56 * +HEAPF32[i15 >> 2] + d53 * +HEAPF32[i12 >> 2] + d54 * +HEAPF32[i6 >> 2]);
 d77 = +HEAPF32[i14 >> 2] + (d56 * +HEAPF32[i13 >> 2] + d53 * +HEAPF32[i7 >> 2] + d54 * +HEAPF32[i8 >> 2]);
 HEAPF32[i4 >> 2] = +HEAPF32[i9 >> 2] + (d56 * +HEAPF32[i3 >> 2] + d53 * +HEAPF32[i10 >> 2] + d54 * +HEAPF32[i11 >> 2]);
 HEAPF32[i1 + 24 >> 2] = d76;
 HEAPF32[i1 + 28 >> 2] = d77;
 HEAPF32[i1 + 32 >> 2] = 0.0;
 d52 = d52 - d56;
 d53 = d58 - d53;
 d54 = d59 - d54;
 HEAPF32[i1 + 48 >> 2] = 0.0;
 d56 = +Math_sqrt(+(d52 * d52 + d53 * d53 + d54 * d54));
 HEAPF32[i1 + 52 >> 2] = d56;
 d77 = 1.0 / (d56 > 9999999747378752.0e-20 ? d56 : 1.0);
 HEAPF32[i1 + 36 >> 2] = d77 * d52;
 HEAPF32[i1 + 40 >> 2] = d77 * d53;
 HEAPF32[i1 + 44 >> 2] = d77 * d54;
 i78 = 1;
 STACKTOP = i2;
 return i78 | 0;
}
function __ZNK20btConvexHullInternal6Vertex3dotERKNS_7Point64E(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i3 + 100 >> 2] | 0) > -1) {
  i14 = HEAP32[i3 + 88 >> 2] | 0;
  i15 = i4;
  i15 = ___muldi3(i14 | 0, ((i14 | 0) < 0) << 31 >> 31 | 0, HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0) | 0;
  i14 = tempRet0;
  i12 = HEAP32[i3 + 92 >> 2] | 0;
  i13 = i4 + 8 | 0;
  i13 = ___muldi3(i12 | 0, ((i12 | 0) < 0) << 31 >> 31 | 0, HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0) | 0;
  i14 = _i64Add(i13 | 0, tempRet0 | 0, i15 | 0, i14 | 0) | 0;
  i15 = tempRet0;
  i3 = HEAP32[i3 + 96 >> 2] | 0;
  i4 = i4 + 16 | 0;
  i4 = ___muldi3(i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0;
  i4 = _i64Add(i14 | 0, i15 | 0, i4 | 0, tempRet0 | 0) | 0;
  i3 = tempRet0;
  do {
   if (!((i3 | 0) > 0 | (i3 | 0) == 0 & i4 >>> 0 > 0)) {
    i5 = i1 + 32 | 0;
    if ((i3 | 0) < 0) {
     HEAP32[i5 >> 2] = -1;
     i12 = _i64Subtract(0, 0, i4 | 0, i3 | 0) | 0;
     i13 = tempRet0;
     i14 = _bitshift64Ashr(i12 | 0, i13 | 0, 63) | 0;
     i15 = i1;
     HEAP32[i15 >> 2] = i12;
     HEAP32[i15 + 4 >> 2] = i13;
     i15 = i1 + 8 | 0;
     HEAP32[i15 >> 2] = i14;
     HEAP32[i15 + 4 >> 2] = tempRet0;
     break;
    } else {
     HEAP32[i5 >> 2] = 0;
     HEAP32[i1 + 0 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 8 >> 2] = 0;
     HEAP32[i1 + 12 >> 2] = 0;
     break;
    }
   } else {
    HEAP32[i1 + 32 >> 2] = 1;
    i14 = _bitshift64Ashr(i4 | 0, i3 | 0, 63) | 0;
    i15 = i1;
    HEAP32[i15 >> 2] = i4;
    HEAP32[i15 + 4 >> 2] = i3;
    i15 = i1 + 8 | 0;
    HEAP32[i15 >> 2] = i14;
    HEAP32[i15 + 4 >> 2] = tempRet0;
   }
  } while (0);
  i15 = i1 + 16 | 0;
  HEAP32[i15 >> 2] = 1;
  HEAP32[i15 + 4 >> 2] = 0;
  i15 = i1 + 24 | 0;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP8[i1 + 36 | 0] = 1;
  STACKTOP = i2;
  return;
 }
 i8 = i4;
 i11 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i8 + 4 >> 2] | 0;
 i9 = i3 + 32 | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i9 + 4 >> 2] | 0;
 i6 = (i9 | 0) < 0;
 i10 = i3 + 24 | 0;
 i7 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i10 + 4 >> 2] | 0;
 if (i6) {
  i14 = _i64Subtract(0, 0, i7 | 0, i10 | 0) | 0;
  i15 = tempRet0;
  i5 = _i64Add((i7 | 0) == 0 & (i10 | 0) == 0 & 1 | 0, 0, ~i5 | 0, ~i9 | 0) | 0;
  i7 = i14;
  i10 = i15;
  i9 = tempRet0;
 }
 if ((i8 | 0) < 0) {
  i11 = _i64Subtract(0, 0, i11 | 0, i8 | 0) | 0;
  i12 = tempRet0;
  i6 = i6 ^ 1;
 } else {
  i12 = i8;
 }
 i18 = ___muldi3(i11 | 0, 0, i7 | 0, 0) | 0;
 i8 = tempRet0;
 i7 = ___muldi3(i12 | 0, 0, i7 | 0, 0) | 0;
 i13 = tempRet0;
 i15 = ___muldi3(i11 | 0, 0, i10 | 0, 0) | 0;
 i14 = tempRet0;
 i17 = ___muldi3(i12 | 0, 0, i10 | 0, 0) | 0;
 i16 = tempRet0;
 i10 = _i64Add(i7 | 0, 0, i15 | 0, 0) | 0;
 i15 = tempRet0;
 i7 = _i64Add(0, i10 | 0, i18 | 0, i8 | 0) | 0;
 i8 = tempRet0;
 i9 = ___muldi3(i11 | 0, i12 | 0, i5 | 0, i9 | 0) | 0;
 i9 = _i64Add(i17 | 0, i16 | 0, i9 | 0, tempRet0 | 0) | 0;
 i9 = _i64Add(i9 | 0, tempRet0 | 0, i13 | 0, 0) | 0;
 i9 = _i64Add(i9 | 0, tempRet0 | 0, i14 | 0, 0) | 0;
 i9 = _i64Add(i9 | 0, tempRet0 | 0, i15 | 0, 0) | 0;
 i9 = _i64Add(i9 | 0, tempRet0 | 0, (i8 >>> 0 < i10 >>> 0 | (i8 | 0) == (i10 | 0) & i7 >>> 0 < 0) & 1 | 0, 0) | 0;
 i10 = tempRet0;
 if (i6) {
  i17 = _i64Subtract(0, 0, i7 | 0, i8 | 0) | 0;
  i18 = tempRet0;
  i9 = _i64Add((i7 | 0) == 0 & (i8 | 0) == 0 & 1 | 0, 0, ~i9 | 0, ~i10 | 0) | 0;
  i7 = i17;
  i8 = i18;
  i10 = tempRet0;
 }
 i12 = i4 + 8 | 0;
 i15 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i12 + 4 >> 2] | 0;
 i13 = i3 + 48 | 0;
 i5 = HEAP32[i13 >> 2] | 0;
 i13 = HEAP32[i13 + 4 >> 2] | 0;
 i11 = (i13 | 0) < 0;
 i14 = i3 + 40 | 0;
 i6 = HEAP32[i14 >> 2] | 0;
 i14 = HEAP32[i14 + 4 >> 2] | 0;
 if (i11) {
  i17 = _i64Subtract(0, 0, i6 | 0, i14 | 0) | 0;
  i18 = tempRet0;
  i5 = _i64Add((i6 | 0) == 0 & (i14 | 0) == 0 & 1 | 0, 0, ~i5 | 0, ~i13 | 0) | 0;
  i6 = i17;
  i14 = i18;
  i13 = tempRet0;
 }
 if ((i12 | 0) < 0) {
  i15 = _i64Subtract(0, 0, i15 | 0, i12 | 0) | 0;
  i12 = tempRet0;
  i11 = i11 ^ 1;
 }
 i23 = ___muldi3(i15 | 0, 0, i6 | 0, 0) | 0;
 i22 = tempRet0;
 i17 = ___muldi3(i12 | 0, 0, i6 | 0, 0) | 0;
 i19 = tempRet0;
 i18 = ___muldi3(i15 | 0, 0, i14 | 0, 0) | 0;
 i16 = tempRet0;
 i21 = ___muldi3(i12 | 0, 0, i14 | 0, 0) | 0;
 i20 = tempRet0;
 i18 = _i64Add(i17 | 0, 0, i18 | 0, 0) | 0;
 i17 = tempRet0;
 i14 = _i64Add(0, i18 | 0, i23 | 0, i22 | 0) | 0;
 i6 = tempRet0;
 i12 = ___muldi3(i15 | 0, i12 | 0, i5 | 0, i13 | 0) | 0;
 i12 = _i64Add(i21 | 0, i20 | 0, i12 | 0, tempRet0 | 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, i19 | 0, 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, i16 | 0, 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, i17 | 0, 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, (i6 >>> 0 < i18 >>> 0 | (i6 | 0) == (i18 | 0) & i14 >>> 0 < 0) & 1 | 0, 0) | 0;
 i5 = tempRet0;
 if (i11) {
  i22 = _i64Subtract(0, 0, i14 | 0, i6 | 0) | 0;
  i23 = tempRet0;
  i11 = _i64Add((i14 | 0) == 0 & (i6 | 0) == 0 & 1 | 0, 0, ~i12 | 0, ~i5 | 0) | 0;
  i14 = i22;
  i6 = i23;
  i12 = tempRet0;
 } else {
  i11 = i12;
  i12 = i5;
 }
 i5 = _i64Add(i14 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
 i6 = tempRet0;
 i12 = _i64Add(i11 | 0, i12 | 0, i9 | 0, i10 | 0) | 0;
 i7 = _i64Add(i12 | 0, tempRet0 | 0, (i6 >>> 0 < i8 >>> 0 | (i6 | 0) == (i8 | 0) & i5 >>> 0 < i7 >>> 0) & 1 | 0, 0) | 0;
 i8 = tempRet0;
 i12 = i4 + 16 | 0;
 i14 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i12 + 4 >> 2] | 0;
 i13 = i3 + 64 | 0;
 i10 = HEAP32[i13 >> 2] | 0;
 i13 = HEAP32[i13 + 4 >> 2] | 0;
 i9 = (i13 | 0) < 0;
 i11 = i3 + 56 | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i11 + 4 >> 2] | 0;
 if (i9) {
  i22 = _i64Subtract(0, 0, i4 | 0, i11 | 0) | 0;
  i23 = tempRet0;
  i10 = _i64Add((i4 | 0) == 0 & (i11 | 0) == 0 & 1 | 0, 0, ~i10 | 0, ~i13 | 0) | 0;
  i4 = i22;
  i11 = i23;
  i13 = tempRet0;
 }
 if ((i12 | 0) < 0) {
  i14 = _i64Subtract(0, 0, i14 | 0, i12 | 0) | 0;
  i12 = tempRet0;
  i9 = i9 ^ 1;
 }
 i16 = ___muldi3(i14 | 0, 0, i4 | 0, 0) | 0;
 i17 = tempRet0;
 i22 = ___muldi3(i12 | 0, 0, i4 | 0, 0) | 0;
 i20 = tempRet0;
 i23 = ___muldi3(i14 | 0, 0, i11 | 0, 0) | 0;
 i21 = tempRet0;
 i18 = ___muldi3(i12 | 0, 0, i11 | 0, 0) | 0;
 i19 = tempRet0;
 i23 = _i64Add(i22 | 0, 0, i23 | 0, 0) | 0;
 i22 = tempRet0;
 i11 = _i64Add(0, i23 | 0, i16 | 0, i17 | 0) | 0;
 i4 = tempRet0;
 i12 = ___muldi3(i14 | 0, i12 | 0, i10 | 0, i13 | 0) | 0;
 i12 = _i64Add(i18 | 0, i19 | 0, i12 | 0, tempRet0 | 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, i20 | 0, 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, i21 | 0, 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, i22 | 0, 0) | 0;
 i12 = _i64Add(i12 | 0, tempRet0 | 0, (i4 >>> 0 < i23 >>> 0 | (i4 | 0) == (i23 | 0) & i11 >>> 0 < 0) & 1 | 0, 0) | 0;
 i10 = tempRet0;
 if (i9) {
  i22 = _i64Subtract(0, 0, i11 | 0, i4 | 0) | 0;
  i23 = tempRet0;
  i12 = _i64Add((i11 | 0) == 0 & (i4 | 0) == 0 & 1 | 0, 0, ~i12 | 0, ~i10 | 0) | 0;
  i11 = i22;
  i4 = i23;
  i10 = tempRet0;
 }
 i9 = _i64Add(i11 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
 i4 = tempRet0;
 i7 = _i64Add(i7 | 0, i8 | 0, i12 | 0, i10 | 0) | 0;
 i7 = _i64Add(i7 | 0, tempRet0 | 0, (i4 >>> 0 < i6 >>> 0 | (i4 | 0) == (i6 | 0) & i9 >>> 0 < i5 >>> 0) & 1 | 0, 0) | 0;
 i8 = tempRet0;
 i5 = i3 + 72 | 0;
 i6 = i1 + 16 | 0;
 if ((i8 | 0) < 0) {
  i23 = i1 + 32 | 0;
  HEAP32[i23 >> 2] = -1;
  i21 = _i64Subtract(0, 0, i9 | 0, i4 | 0) | 0;
  i22 = tempRet0;
  i4 = _i64Add((i9 | 0) == 0 & (i4 | 0) == 0 & 1 | 0, 0, ~i7 | 0, ~i8 | 0) | 0;
  i7 = i1;
  HEAP32[i7 >> 2] = i21;
  HEAP32[i7 + 4 >> 2] = i22;
  i7 = i1 + 8 | 0;
  HEAP32[i7 >> 2] = i4;
  HEAP32[i7 + 4 >> 2] = tempRet0;
  i7 = -1;
  i4 = i23;
 } else {
  i22 = ((i7 | i9 | 0) != 0 | (i8 | i4 | 0) != 0) & 1;
  i23 = i1 + 32 | 0;
  HEAP32[i23 >> 2] = i22;
  i21 = i1;
  HEAP32[i21 >> 2] = i9;
  HEAP32[i21 + 4 >> 2] = i4;
  i4 = i1 + 8 | 0;
  HEAP32[i4 >> 2] = i7;
  HEAP32[i4 + 4 >> 2] = i8;
  i7 = i22;
  i4 = i23;
 }
 i3 = i3 + 80 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i3 | 0) < 0) {
  HEAP32[i4 >> 2] = 0 - i7;
  i22 = i5;
  i23 = HEAP32[i22 >> 2] | 0;
  i22 = HEAP32[i22 + 4 >> 2] | 0;
  i20 = _i64Subtract(0, 0, i23 | 0, i22 | 0) | 0;
  i21 = tempRet0;
  i22 = _i64Add((i23 | 0) == 0 & (i22 | 0) == 0 & 1 | 0, 0, ~i8 | 0, ~i3 | 0) | 0;
  i23 = i1 + 16 | 0;
  HEAP32[i23 >> 2] = i20;
  HEAP32[i23 + 4 >> 2] = i21;
  i23 = i1 + 24 | 0;
  HEAP32[i23 >> 2] = i22;
  HEAP32[i23 + 4 >> 2] = tempRet0;
 } else {
  HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 }
 HEAP8[i1 + 36 | 0] = 0;
 STACKTOP = i2;
 return;
}
function __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i2 + 16 | 0;
 i13 = i2;
 i7 = i1 + 356 | 0;
 if ((HEAP8[i7] | 0) == 0) {
  i13 = HEAP8[i1 + 312 | 0] | 0;
  i13 = i13 << 24 >> 24 != 0;
  STACKTOP = i2;
  return i13 | 0;
 }
 i8 = i1 + 316 | 0;
 i3 = i1 + 336 | 0;
 i4 = i1 + 332 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP8[i3 + 16 | 0] = 0;
 i5 = HEAP8[i4] & -16;
 HEAP8[i4] = i5;
 HEAP8[i7] = 0;
 switch (HEAP32[i1 >> 2] | 0) {
 case 2:
  {
   d15 = +HEAPF32[i1 + 4 >> 2];
   d14 = +HEAPF32[i1 + 8 >> 2];
   d6 = +HEAPF32[i1 + 12 >> 2];
   d12 = +HEAPF32[i1 + 20 >> 2] - d15;
   d9 = +HEAPF32[i1 + 24 >> 2] - d14;
   d10 = +HEAPF32[i1 + 28 >> 2] - d6;
   d6 = (0.0 - d15) * d12 + (0.0 - d14) * d9 + (0.0 - d6) * d10;
   do {
    if (d6 > 0.0) {
     d9 = d12 * d12 + d9 * d9 + d10 * d10;
     if (d6 < d9) {
      HEAP8[i4] = i5 | 3;
      d6 = d6 / d9;
      break;
     } else {
      HEAP8[i4] = i5 | 2;
      d6 = 1.0;
      break;
     }
    } else {
     HEAP8[i4] = i5 | 1;
     d6 = 0.0;
    }
   } while (0);
   HEAPF32[i3 >> 2] = 1.0 - d6;
   i7 = i1 + 340 | 0;
   HEAPF32[i7 >> 2] = d6;
   i5 = i1 + 344 | 0;
   HEAPF32[i5 >> 2] = 0.0;
   i4 = i1 + 348 | 0;
   HEAPF32[i4 >> 2] = 0.0;
   d16 = +HEAPF32[i1 + 84 >> 2];
   d10 = +HEAPF32[i1 + 88 >> 2];
   d14 = +HEAPF32[i1 + 92 >> 2];
   d16 = d16 + d6 * (+HEAPF32[i1 + 100 >> 2] - d16);
   d10 = d10 + d6 * (+HEAPF32[i1 + 104 >> 2] - d10);
   d14 = d14 + d6 * (+HEAPF32[i1 + 108 >> 2] - d14);
   HEAPF32[i1 + 244 >> 2] = d16;
   HEAPF32[i1 + 248 >> 2] = d10;
   HEAPF32[i1 + 252 >> 2] = d14;
   HEAPF32[i1 + 256 >> 2] = 0.0;
   d9 = +HEAPF32[i1 + 164 >> 2];
   d12 = +HEAPF32[i1 + 168 >> 2];
   d15 = +HEAPF32[i1 + 172 >> 2];
   d9 = d9 + d6 * (+HEAPF32[i1 + 180 >> 2] - d9);
   d12 = d12 + d6 * (+HEAPF32[i1 + 184 >> 2] - d12);
   d15 = d15 + d6 * (+HEAPF32[i1 + 188 >> 2] - d15);
   HEAPF32[i1 + 260 >> 2] = d9;
   HEAPF32[i1 + 264 >> 2] = d12;
   HEAPF32[i1 + 268 >> 2] = d15;
   HEAPF32[i1 + 272 >> 2] = 0.0;
   HEAPF32[i1 + 276 >> 2] = d16 - d9;
   HEAPF32[i1 + 280 >> 2] = d10 - d12;
   HEAPF32[i1 + 284 >> 2] = d14 - d15;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i1 + 332 | 0);
   if ((+HEAPF32[i3 >> 2] >= 0.0 ? +HEAPF32[i7 >> 2] >= 0.0 : 0) ? +HEAPF32[i5 >> 2] >= 0.0 : 0) {
    i3 = +HEAPF32[i4 >> 2] >= 0.0 | 0;
   } else {
    i3 = 0;
   }
   HEAP8[i1 + 312 | 0] = i3;
   i13 = i3;
   i13 = i13 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i13 | 0;
  }
 case 0:
  {
   HEAP8[i1 + 312 | 0] = 0;
   i13 = 0;
   i13 = i13 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i13 | 0;
  }
 case 1:
  {
   i11 = i1 + 244 | 0;
   i13 = i1 + 84 | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i13 = i1 + 260 | 0;
   i8 = i1 + 164 | 0;
   HEAP32[i13 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
   d15 = +HEAPF32[i1 + 248 >> 2] - +HEAPF32[i1 + 264 >> 2];
   d16 = +HEAPF32[i1 + 252 >> 2] - +HEAPF32[i1 + 268 >> 2];
   HEAPF32[i1 + 276 >> 2] = +HEAPF32[i11 >> 2] - +HEAPF32[i13 >> 2];
   HEAPF32[i1 + 280 >> 2] = d15;
   HEAPF32[i1 + 284 >> 2] = d16;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   HEAP32[i3 + 0 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   HEAP8[i3 + 16 | 0] = 0;
   HEAP8[i4] = i5;
   HEAPF32[i3 >> 2] = 1.0;
   HEAPF32[i1 + 340 >> 2] = 0.0;
   HEAPF32[i1 + 344 >> 2] = 0.0;
   HEAPF32[i1 + 348 >> 2] = 0.0;
   HEAP8[i1 + 312 | 0] = 1;
   i13 = 1;
   i13 = i13 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i13 | 0;
  }
 case 3:
  {
   HEAP32[i11 + 0 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   HEAP32[i11 + 8 >> 2] = 0;
   HEAP32[i11 + 12 >> 2] = 0;
   __ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(0, i11, i1 + 4 | 0, i1 + 20 | 0, i1 + 36 | 0, i8) | 0;
   d17 = +HEAPF32[i3 >> 2];
   i5 = i1 + 340 | 0;
   d6 = +HEAPF32[i5 >> 2];
   i4 = i1 + 344 | 0;
   d16 = +HEAPF32[i4 >> 2];
   d9 = +HEAPF32[i1 + 84 >> 2] * d17 + +HEAPF32[i1 + 100 >> 2] * d6 + +HEAPF32[i1 + 116 >> 2] * d16;
   d12 = d17 * +HEAPF32[i1 + 88 >> 2] + d6 * +HEAPF32[i1 + 104 >> 2] + d16 * +HEAPF32[i1 + 120 >> 2];
   d15 = d17 * +HEAPF32[i1 + 92 >> 2] + d6 * +HEAPF32[i1 + 108 >> 2] + d16 * +HEAPF32[i1 + 124 >> 2];
   HEAPF32[i1 + 244 >> 2] = d9;
   HEAPF32[i1 + 248 >> 2] = d12;
   HEAPF32[i1 + 252 >> 2] = d15;
   HEAPF32[i1 + 256 >> 2] = 0.0;
   d10 = +HEAPF32[i1 + 164 >> 2] * d17 + +HEAPF32[i1 + 180 >> 2] * d6 + +HEAPF32[i1 + 196 >> 2] * d16;
   d14 = d17 * +HEAPF32[i1 + 168 >> 2] + d6 * +HEAPF32[i1 + 184 >> 2] + d16 * +HEAPF32[i1 + 200 >> 2];
   d16 = d17 * +HEAPF32[i1 + 172 >> 2] + d6 * +HEAPF32[i1 + 188 >> 2] + d16 * +HEAPF32[i1 + 204 >> 2];
   HEAPF32[i1 + 260 >> 2] = d10;
   HEAPF32[i1 + 264 >> 2] = d14;
   HEAPF32[i1 + 268 >> 2] = d16;
   HEAPF32[i1 + 272 >> 2] = 0.0;
   HEAPF32[i1 + 276 >> 2] = d9 - d10;
   HEAPF32[i1 + 280 >> 2] = d12 - d14;
   HEAPF32[i1 + 284 >> 2] = d15 - d16;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i1 + 332 | 0);
   if ((+HEAPF32[i3 >> 2] >= 0.0 ? +HEAPF32[i5 >> 2] >= 0.0 : 0) ? +HEAPF32[i4 >> 2] >= 0.0 : 0) {
    i3 = +HEAPF32[i1 + 348 >> 2] >= 0.0 | 0;
   } else {
    i3 = 0;
   }
   HEAP8[i1 + 312 | 0] = i3;
   i13 = i3;
   i13 = i13 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i13 | 0;
  }
 case 4:
  {
   HEAP32[i13 + 0 >> 2] = 0;
   HEAP32[i13 + 4 >> 2] = 0;
   HEAP32[i13 + 8 >> 2] = 0;
   HEAP32[i13 + 12 >> 2] = 0;
   if (!(__ZN22btVoronoiSimplexSolver25closestPtPointTetrahedronERK9btVector3S2_S2_S2_S2_R25btSubSimplexClosestResult(i1, i13, i1 + 4 | 0, i1 + 20 | 0, i1 + 36 | 0, i1 + 52 | 0, i8) | 0)) {
    i3 = i1 + 312 | 0;
    if ((HEAP8[i1 + 352 | 0] | 0) == 0) {
     HEAP8[i3] = 1;
     i13 = i1 + 276 | 0;
     HEAP32[i13 + 0 >> 2] = 0;
     HEAP32[i13 + 4 >> 2] = 0;
     HEAP32[i13 + 8 >> 2] = 0;
     HEAP32[i13 + 12 >> 2] = 0;
     i13 = 1;
     i13 = i13 << 24 >> 24 != 0;
     STACKTOP = i2;
     return i13 | 0;
    } else {
     HEAP8[i3] = 0;
     i13 = 0;
     i13 = i13 << 24 >> 24 != 0;
     STACKTOP = i2;
     return i13 | 0;
    }
   }
   d16 = +HEAPF32[i3 >> 2];
   i4 = i1 + 340 | 0;
   d15 = +HEAPF32[i4 >> 2];
   i5 = i1 + 344 | 0;
   d17 = +HEAPF32[i5 >> 2];
   i7 = i1 + 348 | 0;
   d14 = +HEAPF32[i7 >> 2];
   d12 = d16 * +HEAPF32[i1 + 88 >> 2] + d15 * +HEAPF32[i1 + 104 >> 2] + d17 * +HEAPF32[i1 + 120 >> 2] + d14 * +HEAPF32[i1 + 136 >> 2];
   d10 = d16 * +HEAPF32[i1 + 92 >> 2] + d15 * +HEAPF32[i1 + 108 >> 2] + d17 * +HEAPF32[i1 + 124 >> 2] + d14 * +HEAPF32[i1 + 140 >> 2];
   i13 = i1 + 244 | 0;
   HEAPF32[i13 >> 2] = +HEAPF32[i1 + 84 >> 2] * d16 + +HEAPF32[i1 + 100 >> 2] * d15 + +HEAPF32[i1 + 116 >> 2] * d17 + +HEAPF32[i1 + 132 >> 2] * d14;
   i8 = i1 + 248 | 0;
   HEAPF32[i8 >> 2] = d12;
   i11 = i1 + 252 | 0;
   HEAPF32[i11 >> 2] = d10;
   HEAPF32[i1 + 256 >> 2] = 0.0;
   d10 = +HEAPF32[i3 >> 2];
   d12 = +HEAPF32[i4 >> 2];
   d14 = +HEAPF32[i5 >> 2];
   d17 = +HEAPF32[i7 >> 2];
   d15 = +HEAPF32[i1 + 164 >> 2] * d10 + +HEAPF32[i1 + 180 >> 2] * d12 + +HEAPF32[i1 + 196 >> 2] * d14 + +HEAPF32[i1 + 212 >> 2] * d17;
   d16 = d10 * +HEAPF32[i1 + 168 >> 2] + d12 * +HEAPF32[i1 + 184 >> 2] + d14 * +HEAPF32[i1 + 200 >> 2] + d17 * +HEAPF32[i1 + 216 >> 2];
   d17 = d10 * +HEAPF32[i1 + 172 >> 2] + d12 * +HEAPF32[i1 + 188 >> 2] + d14 * +HEAPF32[i1 + 204 >> 2] + d17 * +HEAPF32[i1 + 220 >> 2];
   HEAPF32[i1 + 260 >> 2] = d15;
   HEAPF32[i1 + 264 >> 2] = d16;
   HEAPF32[i1 + 268 >> 2] = d17;
   HEAPF32[i1 + 272 >> 2] = 0.0;
   d16 = +HEAPF32[i8 >> 2] - d16;
   d17 = +HEAPF32[i11 >> 2] - d17;
   HEAPF32[i1 + 276 >> 2] = +HEAPF32[i13 >> 2] - d15;
   HEAPF32[i1 + 280 >> 2] = d16;
   HEAPF32[i1 + 284 >> 2] = d17;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i1 + 332 | 0);
   if ((+HEAPF32[i3 >> 2] >= 0.0 ? +HEAPF32[i4 >> 2] >= 0.0 : 0) ? +HEAPF32[i5 >> 2] >= 0.0 : 0) {
    i3 = +HEAPF32[i7 >> 2] >= 0.0 | 0;
   } else {
    i3 = 0;
   }
   HEAP8[i1 + 312 | 0] = i3;
   i13 = i3;
   i13 = i13 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i13 | 0;
  }
 default:
  {
   HEAP8[i1 + 312 | 0] = 0;
   i13 = 0;
   i13 = i13 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i13 | 0;
  }
 }
 return 0;
}
function __ZN21btConeTwistConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK11btMatrix3x3S8_(i2, i3, i11, i21, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 i21 = i21 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, i25 = 0, d26 = 0.0, d27 = 0.0, i28 = 0, i29 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i22 = i1 + 64 | 0;
 i9 = i1;
 __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i2, i11, i21, i4, i5);
 i18 = HEAP32[i3 + 8 >> 2] | 0;
 HEAPF32[i18 >> 2] = 1.0;
 i17 = i3 + 24 | 0;
 i4 = HEAP32[i17 >> 2] | 0;
 i15 = i4 + 1 | 0;
 HEAPF32[i18 + (i15 << 2) >> 2] = 1.0;
 i7 = i4 << 1;
 i8 = i7 + 2 | 0;
 HEAPF32[i18 + (i8 << 2) >> 2] = 1.0;
 i18 = i2 + 292 | 0;
 d26 = +HEAPF32[i2 + 340 >> 2];
 d23 = +HEAPF32[i2 + 344 >> 2];
 d24 = +HEAPF32[i2 + 348 >> 2];
 d30 = +HEAPF32[i11 >> 2] * d26 + +HEAPF32[i11 + 4 >> 2] * d23 + +HEAPF32[i11 + 8 >> 2] * d24;
 d27 = d26 * +HEAPF32[i11 + 16 >> 2] + d23 * +HEAPF32[i11 + 20 >> 2] + d24 * +HEAPF32[i11 + 24 >> 2];
 d24 = d26 * +HEAPF32[i11 + 32 >> 2] + d23 * +HEAPF32[i11 + 36 >> 2] + d24 * +HEAPF32[i11 + 40 >> 2];
 HEAPF32[i22 >> 2] = d30;
 i25 = i22 + 4 | 0;
 HEAPF32[i25 >> 2] = d27;
 i29 = i22 + 8 | 0;
 HEAPF32[i29 >> 2] = d24;
 HEAPF32[i22 + 12 >> 2] = 0.0;
 i6 = i3 + 12 | 0;
 i16 = HEAP32[i6 >> 2] | 0;
 HEAPF32[i16 >> 2] = 0.0;
 HEAPF32[i16 + 4 >> 2] = d24;
 HEAPF32[i16 + 8 >> 2] = -d27;
 HEAPF32[i16 + 12 >> 2] = 0.0;
 HEAPF32[i16 + (i4 << 2) >> 2] = -d24;
 HEAPF32[i16 + (i15 << 2) >> 2] = 0.0;
 HEAPF32[i16 + (i4 + 2 << 2) >> 2] = d30;
 HEAPF32[i16 + (i4 + 3 << 2) >> 2] = 0.0;
 HEAPF32[i16 + (i7 << 2) >> 2] = d27;
 HEAPF32[i16 + ((i7 | 1) << 2) >> 2] = -d30;
 HEAPF32[i16 + (i8 << 2) >> 2] = 0.0;
 HEAPF32[i16 + (i7 + 3 << 2) >> 2] = 0.0;
 d30 = +HEAPF32[i2 + 404 >> 2];
 d27 = +HEAPF32[i2 + 408 >> 2];
 d24 = +HEAPF32[i2 + 412 >> 2];
 d23 = +HEAPF32[i21 >> 2] * d30 + +HEAPF32[i21 + 4 >> 2] * d27 + +HEAPF32[i21 + 8 >> 2] * d24;
 d26 = d30 * +HEAPF32[i21 + 16 >> 2] + d27 * +HEAPF32[i21 + 20 >> 2] + d24 * +HEAPF32[i21 + 24 >> 2];
 d24 = d30 * +HEAPF32[i21 + 32 >> 2] + d27 * +HEAPF32[i21 + 36 >> 2] + d24 * +HEAPF32[i21 + 40 >> 2];
 i7 = i3 + 20 | 0;
 i16 = HEAP32[i7 >> 2] | 0;
 i8 = HEAP32[i17 >> 2] | 0;
 i4 = i8 << 1;
 HEAPF32[i16 >> 2] = 0.0;
 HEAPF32[i16 + 4 >> 2] = -d24;
 HEAPF32[i16 + 8 >> 2] = d26;
 HEAPF32[i16 + 12 >> 2] = 0.0;
 HEAPF32[i16 + (i8 << 2) >> 2] = d24;
 HEAPF32[i16 + (i8 + 1 << 2) >> 2] = 0.0;
 HEAPF32[i16 + (i8 + 2 << 2) >> 2] = -d23;
 HEAPF32[i16 + (i8 + 3 << 2) >> 2] = 0.0;
 HEAPF32[i16 + (i4 << 2) >> 2] = -d26;
 HEAPF32[i16 + ((i4 | 1) << 2) >> 2] = d23;
 HEAPF32[i16 + (i4 + 2 << 2) >> 2] = 0.0;
 HEAPF32[i16 + (i4 + 3 << 2) >> 2] = 0.0;
 i4 = i2 + 584 | 0;
 i15 = HEAP32[i4 >> 2] | 0;
 d27 = +HEAPF32[((i15 & 2 | 0) == 0 ? i3 + 4 | 0 : i2 + 592 | 0) >> 2] * +HEAPF32[i3 >> 2];
 i13 = i3 + 28 | 0;
 i19 = HEAP32[i13 >> 2] | 0;
 i14 = i3 + 36 | 0;
 i12 = HEAP32[i14 >> 2] | 0;
 i20 = i3 + 40 | 0;
 i10 = HEAP32[i20 >> 2] | 0;
 i28 = i2 + 588 | 0;
 i5 = i3 + 32 | 0;
 HEAPF32[i19 >> 2] = d27 * (d23 + +HEAPF32[i21 + 48 >> 2] - +HEAPF32[i22 >> 2] - +HEAPF32[i11 + 48 >> 2]);
 HEAPF32[i12 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i10 >> 2] = 3.4028234663852886e+38;
 if ((i15 & 1 | 0) == 0) {
  HEAPF32[i19 + (i8 << 2) >> 2] = d27 * (d26 + +HEAPF32[i21 + 52 >> 2] - +HEAPF32[i25 >> 2] - +HEAPF32[i11 + 52 >> 2]);
  HEAPF32[i12 + (i8 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i10 + (i8 << 2) >> 2] = 3.4028234663852886e+38;
  i28 = i8 << 1;
  HEAPF32[i19 + (i28 << 2) >> 2] = d27 * (d24 + +HEAPF32[i21 + 56 >> 2] - +HEAPF32[i29 >> 2] - +HEAPF32[i11 + 56 >> 2]);
  HEAPF32[i12 + (i28 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i10 + (i28 << 2) >> 2] = 3.4028234663852886e+38;
 } else {
  HEAPF32[HEAP32[i5 >> 2] >> 2] = +HEAPF32[i28 >> 2];
  HEAPF32[i19 + (i8 << 2) >> 2] = d27 * (d26 + +HEAPF32[i21 + 52 >> 2] - +HEAPF32[i25 >> 2] - +HEAPF32[i11 + 52 >> 2]);
  HEAPF32[i12 + (i8 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i10 + (i8 << 2) >> 2] = 3.4028234663852886e+38;
  HEAPF32[(HEAP32[i5 >> 2] | 0) + (i8 << 2) >> 2] = +HEAPF32[i28 >> 2];
  i25 = i8 << 1;
  HEAPF32[i19 + (i25 << 2) >> 2] = d27 * (d24 + +HEAPF32[i21 + 56 >> 2] - +HEAPF32[i29 >> 2] - +HEAPF32[i11 + 56 >> 2]);
  HEAPF32[i12 + (i25 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i10 + (i25 << 2) >> 2] = 3.4028234663852886e+38;
  HEAPF32[(HEAP32[i5 >> 2] | 0) + (i25 << 2) >> 2] = +HEAPF32[i28 >> 2];
 }
 i21 = i8 * 3 | 0;
 do {
  if ((HEAP8[i2 + 518 | 0] | 0) != 0) {
   i22 = HEAP32[i6 >> 2] | 0;
   d23 = +HEAPF32[i2 + 448 >> 2];
   if (+HEAPF32[i2 + 436 >> 2] < d23 ? +HEAPF32[i2 + 440 >> 2] < d23 : 0) {
    __ZNK11btTransformmlERKS_(i9, i11, i18);
    d32 = +HEAPF32[i9 + 4 >> 2];
    d31 = +HEAPF32[i9 + 20 >> 2];
    d23 = +HEAPF32[i9 + 36 >> 2];
    d26 = +HEAPF32[i9 + 8 >> 2];
    d27 = +HEAPF32[i9 + 24 >> 2];
    d30 = +HEAPF32[i9 + 40 >> 2];
    i28 = HEAP32[i17 >> 2] | 0;
    i29 = i28 + i21 | 0;
    HEAPF32[i22 + (i21 << 2) >> 2] = d32;
    i19 = i21 + 1 | 0;
    HEAPF32[i22 + (i19 << 2) >> 2] = d31;
    i12 = i21 + 2 | 0;
    HEAPF32[i22 + (i12 << 2) >> 2] = d23;
    HEAPF32[i22 + (i29 << 2) >> 2] = d26;
    i10 = i29 + 1 | 0;
    HEAPF32[i22 + (i10 << 2) >> 2] = d27;
    i25 = i29 + 2 | 0;
    HEAPF32[i22 + (i25 << 2) >> 2] = d30;
    HEAPF32[i16 + (i21 << 2) >> 2] = -d32;
    HEAPF32[i16 + (i19 << 2) >> 2] = -d31;
    HEAPF32[i16 + (i12 << 2) >> 2] = -d23;
    HEAPF32[i16 + (i29 << 2) >> 2] = -d26;
    HEAPF32[i16 + (i10 << 2) >> 2] = -d27;
    HEAPF32[i16 + (i25 << 2) >> 2] = -d30;
    d24 = +HEAPF32[i3 >> 2] * +HEAPF32[i2 + 428 >> 2];
    i25 = i2 + 452 | 0;
    i10 = i2 + 456 | 0;
    i12 = i2 + 460 | 0;
    i19 = HEAP32[i13 >> 2] | 0;
    HEAPF32[i19 + (i21 << 2) >> 2] = d24 * (d32 * +HEAPF32[i25 >> 2] + d31 * +HEAPF32[i10 >> 2] + d23 * +HEAPF32[i12 >> 2]);
    HEAPF32[i19 + (i29 << 2) >> 2] = d24 * (d26 * +HEAPF32[i25 >> 2] + d27 * +HEAPF32[i10 >> 2] + d30 * +HEAPF32[i12 >> 2]);
    i12 = HEAP32[i14 >> 2] | 0;
    HEAPF32[i12 + (i21 << 2) >> 2] = -3.4028234663852886e+38;
    i10 = HEAP32[i20 >> 2] | 0;
    HEAPF32[i10 + (i21 << 2) >> 2] = 3.4028234663852886e+38;
    HEAPF32[i12 + (i29 << 2) >> 2] = -3.4028234663852886e+38;
    HEAPF32[i10 + (i29 << 2) >> 2] = 3.4028234663852886e+38;
    i21 = i28 + i29 | 0;
    break;
   }
   d32 = +HEAPF32[i2 + 428 >> 2];
   d30 = d32 * +HEAPF32[i2 + 452 >> 2] * d32;
   d31 = d32 * d32 * +HEAPF32[i2 + 456 >> 2];
   d32 = d32 * d32 * +HEAPF32[i2 + 460 >> 2];
   HEAPF32[i22 + (i21 << 2) >> 2] = d30;
   i28 = i21 + 1 | 0;
   HEAPF32[i22 + (i28 << 2) >> 2] = d31;
   i29 = i21 + 2 | 0;
   HEAPF32[i22 + (i29 << 2) >> 2] = d32;
   HEAPF32[i16 + (i21 << 2) >> 2] = -d30;
   HEAPF32[i16 + (i28 << 2) >> 2] = -d31;
   HEAPF32[i16 + (i29 << 2) >> 2] = -d32;
   HEAPF32[i19 + (i21 << 2) >> 2] = +HEAPF32[i3 >> 2] * +HEAPF32[i2 + 424 >> 2] * +HEAPF32[i2 + 496 >> 2];
   if ((i15 & 4 | 0) != 0) {
    HEAPF32[(HEAP32[i5 >> 2] | 0) + (i21 << 2) >> 2] = +HEAPF32[i2 + 596 >> 2];
   }
   HEAPF32[i12 + (i21 << 2) >> 2] = 0.0;
   HEAPF32[i10 + (i21 << 2) >> 2] = 3.4028234663852886e+38;
   i21 = i8 + i21 | 0;
  }
 } while (0);
 if ((HEAP8[i2 + 517 | 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 d32 = +HEAPF32[i2 + 428 >> 2];
 d30 = d32 * +HEAPF32[i2 + 468 >> 2] * d32;
 d31 = d32 * d32 * +HEAPF32[i2 + 472 >> 2];
 d32 = d32 * d32 * +HEAPF32[i2 + 476 >> 2];
 i25 = HEAP32[i6 >> 2] | 0;
 i29 = HEAP32[i7 >> 2] | 0;
 HEAPF32[i25 + (i21 << 2) >> 2] = d30;
 i28 = i21 + 1 | 0;
 HEAPF32[i25 + (i28 << 2) >> 2] = d31;
 i6 = i21 + 2 | 0;
 HEAPF32[i25 + (i6 << 2) >> 2] = d32;
 HEAPF32[i29 + (i21 << 2) >> 2] = -d30;
 HEAPF32[i29 + (i28 << 2) >> 2] = -d31;
 HEAPF32[i29 + (i6 << 2) >> 2] = -d32;
 i6 = i2 + 500 | 0;
 HEAPF32[i19 + (i21 << 2) >> 2] = +HEAPF32[i3 >> 2] * +HEAPF32[i2 + 424 >> 2] * +HEAPF32[i6 >> 2];
 if ((HEAP32[i4 >> 2] & 4 | 0) != 0) {
  HEAPF32[(HEAP32[i5 >> 2] | 0) + (i21 << 2) >> 2] = +HEAPF32[i2 + 596 >> 2];
 }
 if (!(+HEAPF32[i2 + 444 >> 2] > 0.0)) {
  HEAPF32[i12 + (i21 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i10 + (i21 << 2) >> 2] = 3.4028234663852886e+38;
  STACKTOP = i1;
  return;
 }
 i2 = i12 + (i21 << 2) | 0;
 if (+HEAPF32[i6 >> 2] > 0.0) {
  HEAPF32[i2 >> 2] = 0.0;
  HEAPF32[i10 + (i21 << 2) >> 2] = 3.4028234663852886e+38;
  STACKTOP = i1;
  return;
 } else {
  HEAPF32[i2 >> 2] = -3.4028234663852886e+38;
  HEAPF32[i10 + (i21 << 2) >> 2] = 0.0;
  STACKTOP = i1;
  return;
 }
}
function __ZN15btGjkEpaSolver211PenetrationEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsEb(i6, i4, i7, i20, i24, i1, i28) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i20 = i20 | 0;
 i24 = i24 | 0;
 i1 = i1 | 0;
 i28 = i28 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, i54 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 10368 | 0;
 i18 = i5 + 10240 | 0;
 i22 = i5 + 9856 | 0;
 i19 = i5 + 9840 | 0;
 i2 = i5 + 32 | 0;
 i23 = i5 + 16 | 0;
 i17 = i5;
 i54 = i1 + 4 | 0;
 i14 = i1 + 20 | 0;
 i3 = i1 + 20 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i54 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 HEAP32[i54 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i54 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i54 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 HEAP32[i1 >> 2] = 0;
 HEAP32[i18 >> 2] = i6;
 HEAP32[i18 + 4 >> 2] = i7;
 d38 = +HEAPF32[i20 >> 2];
 d45 = +HEAPF32[i4 >> 2];
 i54 = i20 + 16 | 0;
 d39 = +HEAPF32[i54 >> 2];
 i14 = i4 + 16 | 0;
 d46 = +HEAPF32[i14 >> 2];
 i29 = i20 + 32 | 0;
 d40 = +HEAPF32[i29 >> 2];
 i7 = i4 + 32 | 0;
 d47 = +HEAPF32[i7 >> 2];
 i11 = i4 + 4 | 0;
 d48 = +HEAPF32[i11 >> 2];
 i15 = i4 + 20 | 0;
 d51 = +HEAPF32[i15 >> 2];
 i8 = i4 + 36 | 0;
 d49 = +HEAPF32[i8 >> 2];
 i12 = i4 + 8 | 0;
 d52 = +HEAPF32[i12 >> 2];
 i16 = i4 + 24 | 0;
 d53 = +HEAPF32[i16 >> 2];
 i9 = i4 + 40 | 0;
 d35 = +HEAPF32[i9 >> 2];
 i30 = i20 + 4 | 0;
 d42 = +HEAPF32[i30 >> 2];
 i31 = i20 + 20 | 0;
 d43 = +HEAPF32[i31 >> 2];
 i32 = i20 + 36 | 0;
 d44 = +HEAPF32[i32 >> 2];
 i33 = i20 + 8 | 0;
 d50 = +HEAPF32[i33 >> 2];
 i34 = i20 + 24 | 0;
 d26 = +HEAPF32[i34 >> 2];
 i21 = i20 + 40 | 0;
 d37 = +HEAPF32[i21 >> 2];
 HEAPF32[i18 + 8 >> 2] = d38 * d45 + d39 * d46 + d40 * d47;
 HEAPF32[i18 + 12 >> 2] = d38 * d48 + d39 * d51 + d40 * d49;
 HEAPF32[i18 + 16 >> 2] = d38 * d52 + d39 * d53 + d40 * d35;
 HEAPF32[i18 + 20 >> 2] = 0.0;
 HEAPF32[i18 + 24 >> 2] = d45 * d42 + d46 * d43 + d47 * d44;
 HEAPF32[i18 + 28 >> 2] = d48 * d42 + d51 * d43 + d49 * d44;
 HEAPF32[i18 + 32 >> 2] = d52 * d42 + d53 * d43 + d35 * d44;
 HEAPF32[i18 + 36 >> 2] = 0.0;
 HEAPF32[i18 + 40 >> 2] = d45 * d50 + d46 * d26 + d47 * d37;
 HEAPF32[i18 + 44 >> 2] = d48 * d50 + d51 * d26 + d49 * d37;
 HEAPF32[i18 + 48 >> 2] = d52 * d50 + d53 * d26 + d35 * d37;
 HEAPF32[i18 + 52 >> 2] = 0.0;
 i13 = i4 + 48 | 0;
 d37 = +HEAPF32[i20 + 48 >> 2] - +HEAPF32[i13 >> 2];
 i10 = i4 + 52 | 0;
 d35 = +HEAPF32[i20 + 52 >> 2] - +HEAPF32[i10 >> 2];
 i6 = i4 + 56 | 0;
 d26 = +HEAPF32[i20 + 56 >> 2] - +HEAPF32[i6 >> 2];
 d53 = +HEAPF32[i4 >> 2];
 d50 = +HEAPF32[i20 >> 2];
 d52 = +HEAPF32[i14 >> 2];
 d49 = +HEAPF32[i54 >> 2];
 d51 = +HEAPF32[i7 >> 2];
 d48 = +HEAPF32[i29 >> 2];
 d47 = +HEAPF32[i30 >> 2];
 d46 = +HEAPF32[i31 >> 2];
 d45 = +HEAPF32[i32 >> 2];
 d44 = +HEAPF32[i33 >> 2];
 d43 = +HEAPF32[i34 >> 2];
 d42 = +HEAPF32[i21 >> 2];
 d40 = +HEAPF32[i11 >> 2];
 d39 = +HEAPF32[i15 >> 2];
 d38 = +HEAPF32[i8 >> 2];
 d36 = +HEAPF32[i12 >> 2];
 d25 = +HEAPF32[i16 >> 2];
 d27 = +HEAPF32[i9 >> 2];
 d41 = d37 * +HEAPF32[i4 >> 2] + d35 * +HEAPF32[i14 >> 2] + d26 * +HEAPF32[i7 >> 2];
 HEAPF32[i18 + 56 >> 2] = d53 * d50 + d52 * d49 + d51 * d48;
 HEAPF32[i18 + 60 >> 2] = d53 * d47 + d52 * d46 + d51 * d45;
 HEAPF32[i18 + 64 >> 2] = d53 * d44 + d52 * d43 + d51 * d42;
 HEAPF32[i18 + 68 >> 2] = 0.0;
 HEAPF32[i18 + 72 >> 2] = d50 * d40 + d49 * d39 + d48 * d38;
 HEAPF32[i18 + 76 >> 2] = d47 * d40 + d46 * d39 + d45 * d38;
 HEAPF32[i18 + 80 >> 2] = d44 * d40 + d43 * d39 + d42 * d38;
 HEAPF32[i18 + 84 >> 2] = 0.0;
 HEAPF32[i18 + 88 >> 2] = d50 * d36 + d49 * d25 + d48 * d27;
 HEAPF32[i18 + 92 >> 2] = d47 * d36 + d46 * d25 + d45 * d27;
 HEAPF32[i18 + 96 >> 2] = d44 * d36 + d43 * d25 + d42 * d27;
 HEAPF32[i18 + 100 >> 2] = 0.0;
 HEAPF32[i18 + 104 >> 2] = d41;
 HEAPF32[i18 + 108 >> 2] = d37 * d40 + d35 * d39 + d26 * d38;
 HEAPF32[i18 + 112 >> 2] = d37 * d36 + d35 * d25 + d26 * d27;
 HEAPF32[i18 + 116 >> 2] = 0.0;
 i21 = i18 + 120 | 0;
 HEAP32[i21 >> 2] = i28 ? 55 : 54;
 i20 = i18 + 124 | 0;
 HEAP32[i20 >> 2] = i28 ? 0 : 0;
 i29 = i22 + 128 | 0;
 HEAP32[i22 + 364 >> 2] = 0;
 i28 = i22 + 376 | 0;
 HEAP32[i29 + 0 >> 2] = 0;
 HEAP32[i29 + 4 >> 2] = 0;
 HEAP32[i29 + 8 >> 2] = 0;
 HEAP32[i29 + 12 >> 2] = 0;
 HEAP32[i28 >> 2] = 2;
 HEAP32[i22 + 368 >> 2] = 0;
 HEAPF32[i22 + 144 >> 2] = 0.0;
 i28 = i24 + 4 | 0;
 d52 = -+HEAPF32[i28 >> 2];
 i29 = i24 + 8 | 0;
 d53 = -+HEAPF32[i29 >> 2];
 HEAPF32[i19 >> 2] = -+HEAPF32[i24 >> 2];
 HEAPF32[i19 + 4 >> 2] = d52;
 HEAPF32[i19 + 8 >> 2] = d53;
 HEAPF32[i19 + 12 >> 2] = 0.0;
 i19 = __ZN12gjkepa2_impl3GJK8EvaluateERKNS_13MinkowskiDiffERK9btVector3(i22, i18, i19) | 0;
 if ((i19 | 0) == 1) {
  i19 = i2 + 9792 | 0;
  i33 = i2 + 9800 | 0;
  i32 = i2 + 9804 | 0;
  HEAP32[i19 + 0 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = 0;
  HEAP32[i19 + 12 >> 2] = 0;
  HEAP32[i2 >> 2] = 9;
  i19 = i2 + 40 | 0;
  HEAP32[i2 + 9788 >> 2] = 0;
  HEAP32[i19 + 0 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = 0;
  HEAP32[i19 + 12 >> 2] = 0;
  HEAP32[i19 + 16 >> 2] = 0;
  i30 = 0;
  do {
   i31 = 128 - i30 + -1 | 0;
   i34 = i2 + (i31 * 60 | 0) + 2108 | 0;
   HEAP32[i2 + (i31 * 60 | 0) + 2156 >> 2] = 0;
   HEAP32[i2 + (i31 * 60 | 0) + 2160 >> 2] = HEAP32[i33 >> 2];
   i31 = HEAP32[i33 >> 2] | 0;
   if ((i31 | 0) != 0) {
    HEAP32[i31 + 48 >> 2] = i34;
   }
   HEAP32[i33 >> 2] = i34;
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
   i30 = i30 + 1 | 0;
  } while ((i30 | 0) != 128);
  d52 = -+HEAPF32[i28 >> 2];
  d53 = -+HEAPF32[i29 >> 2];
  HEAPF32[i23 >> 2] = -+HEAPF32[i24 >> 2];
  HEAPF32[i23 + 4 >> 2] = d52;
  HEAPF32[i23 + 8 >> 2] = d53;
  HEAPF32[i23 + 12 >> 2] = 0.0;
  if ((__ZN12gjkepa2_impl3EPA8EvaluateERNS_3GJKERK9btVector3(i2, i22, i23) | 0) == 9) {
   HEAP32[i1 >> 2] = 3;
   i54 = 0;
   STACKTOP = i5;
   return i54 | 0;
  }
  i22 = i2 + 36 | 0;
  if ((HEAP32[i22 >> 2] | 0) == 0) {
   d25 = 0.0;
   d26 = 0.0;
   d27 = 0.0;
  } else {
   i24 = i17 + 4 | 0;
   i23 = i17 + 8 | 0;
   d27 = 0.0;
   d26 = 0.0;
   d25 = 0.0;
   i28 = 0;
   do {
    i30 = HEAP32[i21 >> 2] | 0;
    i54 = HEAP32[i20 >> 2] | 0;
    i29 = (HEAP32[i18 >> 2] | 0) + (i54 >> 1) | 0;
    if ((i54 & 1 | 0) != 0) {
     i30 = HEAP32[(HEAP32[i29 >> 2] | 0) + i30 >> 2] | 0;
    }
    FUNCTION_TABLE_viii[i30 & 63](i17, i29, HEAP32[i2 + (i28 << 2) + 4 >> 2] | 0);
    d53 = +HEAPF32[i2 + (i28 << 2) + 20 >> 2];
    d27 = d27 + +HEAPF32[i17 >> 2] * d53;
    d26 = d26 + d53 * +HEAPF32[i24 >> 2];
    d25 = d25 + d53 * +HEAPF32[i23 >> 2];
    i28 = i28 + 1 | 0;
   } while (i28 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0);
  }
  HEAP32[i1 >> 2] = 1;
  d48 = +HEAPF32[i10 >> 2] + (d27 * +HEAPF32[i14 >> 2] + d26 * +HEAPF32[i15 >> 2] + d25 * +HEAPF32[i16 >> 2]);
  d51 = +HEAPF32[i6 >> 2] + (d27 * +HEAPF32[i7 >> 2] + d26 * +HEAPF32[i8 >> 2] + d25 * +HEAPF32[i9 >> 2]);
  HEAPF32[i1 + 4 >> 2] = +HEAPF32[i13 >> 2] + (d27 * +HEAPF32[i4 >> 2] + d26 * +HEAPF32[i11 >> 2] + d25 * +HEAPF32[i12 >> 2]);
  HEAPF32[i1 + 8 >> 2] = d48;
  HEAPF32[i1 + 12 >> 2] = d51;
  HEAPF32[i1 + 16 >> 2] = 0.0;
  i54 = i2 + 56 | 0;
  d51 = +HEAPF32[i19 >> 2];
  d48 = +HEAPF32[i54 >> 2];
  d52 = +HEAPF32[i2 + 44 >> 2];
  d53 = +HEAPF32[i2 + 48 >> 2];
  d46 = d27 - d51 * d48;
  d47 = d26 - d48 * d52;
  d48 = d25 - d48 * d53;
  d49 = +HEAPF32[i10 >> 2] + (d46 * +HEAPF32[i14 >> 2] + d47 * +HEAPF32[i15 >> 2] + d48 * +HEAPF32[i16 >> 2]);
  d50 = +HEAPF32[i6 >> 2] + (d46 * +HEAPF32[i7 >> 2] + d47 * +HEAPF32[i8 >> 2] + d48 * +HEAPF32[i9 >> 2]);
  HEAPF32[i3 >> 2] = +HEAPF32[i13 >> 2] + (d46 * +HEAPF32[i4 >> 2] + d47 * +HEAPF32[i11 >> 2] + d48 * +HEAPF32[i12 >> 2]);
  HEAPF32[i1 + 24 >> 2] = d49;
  HEAPF32[i1 + 28 >> 2] = d50;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  HEAPF32[i1 + 36 >> 2] = -d51;
  HEAPF32[i1 + 40 >> 2] = -d52;
  HEAPF32[i1 + 44 >> 2] = -d53;
  HEAPF32[i1 + 48 >> 2] = 0.0;
  HEAPF32[i1 + 52 >> 2] = -+HEAPF32[i54 >> 2];
  i54 = 1;
  STACKTOP = i5;
  return i54 | 0;
 } else if ((i19 | 0) == 2) {
  HEAP32[i1 >> 2] = 2;
  i54 = 0;
  STACKTOP = i5;
  return i54 | 0;
 } else {
  i54 = 0;
  STACKTOP = i5;
  return i54 | 0;
 }
 return 0;
}
function __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i2, i19, i18, i17, i16, d8) {
 i2 = i2 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 d8 = +d8;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0, i34 = 0, d35 = 0.0, i36 = 0, i37 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i5 = i3 + 212 | 0;
 i34 = i3 + 208 | 0;
 i37 = i3 + 144 | 0;
 i31 = i3 + 80 | 0;
 i1 = i3 + 64 | 0;
 i4 = i3 + 48 | 0;
 i26 = i3 + 32 | 0;
 i27 = i3 + 16 | 0;
 i36 = i3;
 __ZN15CProfileManager13Start_ProfileEPKc(449128);
 HEAP32[i37 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i37 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i37 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i37 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 i7 = i37 + 16 | 0;
 i25 = i18 + 16 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
 i7 = i37 + 32 | 0;
 i24 = i18 + 32 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
 i7 = i37 + 48 | 0;
 i23 = i18 + 48 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
 HEAP32[i31 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
 i6 = i31 + 16 | 0;
 i22 = i17 + 16 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 i6 = i31 + 32 | 0;
 i21 = i17 + 32 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 i6 = i31 + 48 | 0;
 i20 = i17 + 48 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i37, i31, i5, i34);
 d35 = +HEAPF32[i34 >> 2];
 d12 = d35 * +HEAPF32[i5 + 4 >> 2];
 d15 = d35 * +HEAPF32[i5 + 8 >> 2];
 HEAPF32[i26 >> 2] = +HEAPF32[i5 >> 2] * d35;
 HEAPF32[i26 + 4 >> 2] = d12;
 HEAPF32[i26 + 8 >> 2] = d15;
 HEAPF32[i26 + 12 >> 2] = 0.0;
 HEAP32[i27 + 0 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i27 + 12 >> 2] = 0;
 HEAPF32[i5 >> 2] = 1.0;
 i34 = i5 + 4 | 0;
 i31 = i5 + 20 | 0;
 HEAP32[i34 + 0 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = 0;
 HEAP32[i34 + 12 >> 2] = 0;
 HEAPF32[i31 >> 2] = 1.0;
 i30 = i5 + 24 | 0;
 i29 = i5 + 40 | 0;
 HEAP32[i30 + 0 >> 2] = 0;
 HEAP32[i30 + 4 >> 2] = 0;
 HEAP32[i30 + 8 >> 2] = 0;
 HEAP32[i30 + 12 >> 2] = 0;
 HEAPF32[i29 >> 2] = 1.0;
 i28 = i5 + 44 | 0;
 HEAP32[i28 + 0 >> 2] = 0;
 HEAP32[i28 + 4 >> 2] = 0;
 HEAP32[i28 + 8 >> 2] = 0;
 HEAP32[i28 + 12 >> 2] = 0;
 HEAP32[i28 + 16 >> 2] = 0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i37, i36);
 d15 = +HEAPF32[i36 >> 2];
 d12 = +HEAPF32[i36 + 4 >> 2];
 d35 = +HEAPF32[i36 + 8 >> 2];
 d32 = +HEAPF32[i36 + 12 >> 2];
 d9 = 2.0 / (d15 * d15 + d12 * d12 + d35 * d35 + d32 * d32);
 d11 = d15 * d9;
 d13 = d12 * d9;
 d9 = d35 * d9;
 d14 = d32 * d11;
 d10 = d32 * d13;
 d32 = d32 * d9;
 d11 = d15 * d11;
 d33 = d15 * d13;
 d15 = d15 * d9;
 d13 = d12 * d13;
 d12 = d12 * d9;
 d9 = d35 * d9;
 HEAPF32[i5 >> 2] = 1.0 - (d13 + d9);
 HEAPF32[i34 >> 2] = d33 - d32;
 HEAPF32[i5 + 8 >> 2] = d15 + d10;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 HEAPF32[i5 + 16 >> 2] = d33 + d32;
 HEAPF32[i31 >> 2] = 1.0 - (d11 + d9);
 HEAPF32[i30 >> 2] = d12 - d14;
 HEAPF32[i5 + 28 >> 2] = 0.0;
 HEAPF32[i5 + 32 >> 2] = d15 - d10;
 HEAPF32[i5 + 36 >> 2] = d12 + d14;
 HEAPF32[i29 >> 2] = 1.0 - (d11 + d13);
 HEAPF32[i28 >> 2] = 0.0;
 __ZNK16btCollisionShape21calculateTemporalAabbERK11btTransformRK9btVector3S5_fRS3_S6_(i19, i5, i27, i26, 1.0, i1, i4);
 HEAP32[i5 >> 2] = 449328;
 i26 = i5 + 36 | 0;
 HEAP32[i26 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i26 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 i18 = i5 + 52 | 0;
 HEAP32[i18 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
 i18 = i5 + 68 | 0;
 HEAP32[i18 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
 i18 = i5 + 84 | 0;
 HEAP32[i18 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
 i23 = i5 + 100 | 0;
 HEAP32[i23 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i23 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 HEAP32[i23 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
 i17 = i5 + 116 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 i17 = i5 + 132 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 i17 = i5 + 148 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
 HEAP32[i5 + 180 >> 2] = i2;
 HEAP32[i5 + 184 >> 2] = i16;
 HEAPF32[i5 + 188 >> 2] = d8;
 HEAP32[i5 + 192 >> 2] = i19;
 d13 = +HEAPF32[i17 >> 2] - +HEAPF32[i18 >> 2];
 d11 = +HEAPF32[i5 + 152 >> 2] - +HEAPF32[i5 + 88 >> 2];
 d14 = +HEAPF32[i5 + 156 >> 2] - +HEAPF32[i5 + 92 >> 2];
 d8 = 1.0 / +Math_sqrt(+(d13 * d13 + d11 * d11 + d14 * d14));
 d12 = d13 * d8;
 d10 = d11 * d8;
 d8 = d14 * d8;
 if (d12 == 0.0) {
  d15 = 999999984306749400.0;
 } else {
  d15 = 1.0 / d12;
 }
 HEAPF32[i5 + 4 >> 2] = d15;
 if (d10 == 0.0) {
  d9 = 999999984306749400.0;
 } else {
  d9 = 1.0 / d10;
 }
 HEAPF32[i5 + 8 >> 2] = d9;
 if (d8 == 0.0) {
  d33 = 999999984306749400.0;
  i36 = i5 + 12 | 0;
  HEAPF32[i36 >> 2] = d33;
  i36 = d15 < 0.0;
  i36 = i36 & 1;
  i37 = i5 + 20 | 0;
  HEAP32[i37 >> 2] = i36;
  i37 = d9 < 0.0;
  i37 = i37 & 1;
  i36 = i5 + 24 | 0;
  HEAP32[i36 >> 2] = i37;
  i36 = d33 < 0.0;
  i36 = i36 & 1;
  i37 = i5 + 28 | 0;
  HEAP32[i37 >> 2] = i36;
  d33 = d13 * d12;
  d35 = d11 * d10;
  d35 = d33 + d35;
  d33 = d14 * d8;
  d35 = d33 + d35;
  i37 = i5 + 32 | 0;
  HEAPF32[i37 >> 2] = d35;
  i37 = i2 + 76 | 0;
  i37 = HEAP32[i37 >> 2] | 0;
  i36 = HEAP32[i37 >> 2] | 0;
  i36 = i36 + 24 | 0;
  i36 = HEAP32[i36 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[i36 & 7](i37, i7, i6, i5, i1, i4);
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i3;
  return;
 }
 d33 = 1.0 / d8;
 i36 = i5 + 12 | 0;
 HEAPF32[i36 >> 2] = d33;
 i36 = d15 < 0.0;
 i36 = i36 & 1;
 i37 = i5 + 20 | 0;
 HEAP32[i37 >> 2] = i36;
 i37 = d9 < 0.0;
 i37 = i37 & 1;
 i36 = i5 + 24 | 0;
 HEAP32[i36 >> 2] = i37;
 i36 = d33 < 0.0;
 i36 = i36 & 1;
 i37 = i5 + 28 | 0;
 HEAP32[i37 >> 2] = i36;
 d33 = d13 * d12;
 d35 = d11 * d10;
 d35 = d33 + d35;
 d33 = d14 * d8;
 d35 = d33 + d35;
 i37 = i5 + 32 | 0;
 HEAPF32[i37 >> 2] = d35;
 i37 = i2 + 76 | 0;
 i37 = HEAP32[i37 >> 2] | 0;
 i36 = HEAP32[i37 >> 2] | 0;
 i36 = i36 + 24 | 0;
 i36 = HEAP32[i36 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[i36 & 7](i37, i7, i6, i5, i1, i4);
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i3;
 return;
}
function __ZN14btQuantizedBvh17deSerializeDoubleER24btQuantizedBvhDoubleData(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i8 = i1 + 48 | 0;
 i5 = i1 + 32 | 0;
 i4 = i1;
 HEAPF32[i3 + 20 >> 2] = +HEAPF64[i2 + 32 >> 3];
 HEAPF32[i3 + 24 >> 2] = +HEAPF64[i2 + 40 >> 3];
 HEAPF32[i3 + 28 >> 2] = +HEAPF64[i2 + 48 >> 3];
 HEAPF32[i3 + 32 >> 2] = +HEAPF64[i2 + 56 >> 3];
 HEAPF32[i3 + 4 >> 2] = +HEAPF64[i2 >> 3];
 HEAPF32[i3 + 8 >> 2] = +HEAPF64[i2 + 8 >> 3];
 HEAPF32[i3 + 12 >> 2] = +HEAPF64[i2 + 16 >> 3];
 HEAPF32[i3 + 16 >> 2] = +HEAPF64[i2 + 24 >> 3];
 HEAPF32[i3 + 36 >> 2] = +HEAPF64[i2 + 64 >> 3];
 HEAPF32[i3 + 40 >> 2] = +HEAPF64[i2 + 72 >> 3];
 HEAPF32[i3 + 44 >> 2] = +HEAPF64[i2 + 80 >> 3];
 HEAPF32[i3 + 48 >> 2] = +HEAPF64[i2 + 88 >> 3];
 HEAP32[i3 + 56 >> 2] = HEAP32[i2 + 96 >> 2];
 HEAP8[i3 + 60 | 0] = (HEAP32[i2 + 100 >> 2] | 0) != 0 | 0;
 i6 = HEAP32[i2 + 104 >> 2] | 0;
 i11 = i8 + 0 | 0;
 i15 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = 0;
  i11 = i11 + 4 | 0;
 } while ((i11 | 0) < (i15 | 0));
 i7 = i3 + 88 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 if ((i9 | 0) < (i6 | 0)) {
  i10 = i3 + 92 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) {
    i12 = 0;
    i16 = i9;
   } else {
    i12 = __Z22btAlignedAllocInternalji(i6 << 6, 16) | 0;
    i16 = HEAP32[i7 >> 2] | 0;
   }
   i13 = i3 + 96 | 0;
   if ((i16 | 0) > 0) {
    i17 = 0;
    do {
     i11 = i12 + (i17 << 6) + 0 | 0;
     i14 = (HEAP32[i13 >> 2] | 0) + (i17 << 6) + 0 | 0;
     i15 = i11 + 64 | 0;
     do {
      HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
      i11 = i11 + 4 | 0;
      i14 = i14 + 4 | 0;
     } while ((i11 | 0) < (i15 | 0));
     i17 = i17 + 1 | 0;
    } while ((i17 | 0) != (i16 | 0));
   }
   i11 = HEAP32[i13 >> 2] | 0;
   i14 = i3 + 100 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i14] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i13 >> 2] = 0;
   }
   HEAP8[i14] = 1;
   HEAP32[i13 >> 2] = i12;
   HEAP32[i10 >> 2] = i6;
  } else {
   i13 = i3 + 96 | 0;
  }
  do {
   i11 = (HEAP32[i13 >> 2] | 0) + (i9 << 6) + 0 | 0;
   i14 = i8 + 0 | 0;
   i15 = i11 + 64 | 0;
   do {
    HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
    i11 = i11 + 4 | 0;
    i14 = i14 + 4 | 0;
   } while ((i11 | 0) < (i15 | 0));
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i6 | 0));
 }
 HEAP32[i7 >> 2] = i6;
 if ((i6 | 0) > 0) {
  i7 = HEAP32[i3 + 96 >> 2] | 0;
  i9 = 0;
  i8 = HEAP32[i2 + 112 >> 2] | 0;
  while (1) {
   HEAPF32[i7 + (i9 << 6) + 16 >> 2] = +HEAPF64[i8 + 32 >> 3];
   HEAPF32[i7 + (i9 << 6) + 20 >> 2] = +HEAPF64[i8 + 40 >> 3];
   HEAPF32[i7 + (i9 << 6) + 24 >> 2] = +HEAPF64[i8 + 48 >> 3];
   HEAPF32[i7 + (i9 << 6) + 28 >> 2] = +HEAPF64[i8 + 56 >> 3];
   HEAPF32[i7 + (i9 << 6) >> 2] = +HEAPF64[i8 >> 3];
   HEAPF32[i7 + (i9 << 6) + 4 >> 2] = +HEAPF64[i8 + 8 >> 3];
   HEAPF32[i7 + (i9 << 6) + 8 >> 2] = +HEAPF64[i8 + 16 >> 3];
   HEAPF32[i7 + (i9 << 6) + 12 >> 2] = +HEAPF64[i8 + 24 >> 3];
   HEAP32[i7 + (i9 << 6) + 32 >> 2] = HEAP32[i8 + 64 >> 2];
   HEAP32[i7 + (i9 << 6) + 36 >> 2] = HEAP32[i8 + 68 >> 2];
   HEAP32[i7 + (i9 << 6) + 40 >> 2] = HEAP32[i8 + 72 >> 2];
   i9 = i9 + 1 | 0;
   if ((i9 | 0) == (i6 | 0)) {
    break;
   } else {
    i8 = i8 + 80 | 0;
   }
  }
 }
 i6 = HEAP32[i2 + 108 >> 2] | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 i7 = i3 + 128 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) < (i6 | 0)) {
  i10 = i3 + 132 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) {
    i11 = 0;
    i13 = i8;
   } else {
    i11 = __Z22btAlignedAllocInternalji(i6 << 4, 16) | 0;
    i13 = HEAP32[i7 >> 2] | 0;
   }
   i9 = i3 + 136 | 0;
   if ((i13 | 0) > 0) {
    i12 = 0;
    do {
     i17 = i11 + (i12 << 4) | 0;
     i16 = (HEAP32[i9 >> 2] | 0) + (i12 << 4) | 0;
     HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i13 | 0));
   }
   i13 = HEAP32[i9 >> 2] | 0;
   i12 = i3 + 140 | 0;
   if ((i13 | 0) != 0) {
    if ((HEAP8[i12] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i13);
    }
    HEAP32[i9 >> 2] = 0;
   }
   HEAP8[i12] = 1;
   HEAP32[i9 >> 2] = i11;
   HEAP32[i10 >> 2] = i6;
  } else {
   i9 = i3 + 136 | 0;
  }
  do {
   i17 = (HEAP32[i9 >> 2] | 0) + (i8 << 4) | 0;
   HEAP32[i17 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i17 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i6 | 0));
 }
 HEAP32[i7 >> 2] = i6;
 if ((i6 | 0) > 0) {
  i8 = HEAP32[i3 + 136 >> 2] | 0;
  i5 = 0;
  i7 = HEAP32[i2 + 116 >> 2] | 0;
  while (1) {
   HEAP32[i8 + (i5 << 4) + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP16[i8 + (i5 << 4) + 6 >> 1] = HEAP16[i7 + 6 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 8 >> 1] = HEAP16[i7 + 8 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 10 >> 1] = HEAP16[i7 + 10 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) >> 1] = HEAP16[i7 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 2 >> 1] = HEAP16[i7 + 2 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 4 >> 1] = HEAP16[i7 + 4 >> 1] | 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i6 | 0)) {
    break;
   } else {
    i7 = i7 + 16 | 0;
   }
  }
 }
 HEAP32[i3 + 144 >> 2] = HEAP32[i2 + 120 >> 2];
 i5 = HEAP32[i2 + 124 >> 2] | 0;
 i6 = i3 + 152 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i5 | 0)) {
  i10 = i3 + 156 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i9 = 0;
    i11 = i7;
   } else {
    i9 = __Z22btAlignedAllocInternalji(i5 << 5, 16) | 0;
    i11 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i3 + 160 | 0;
   if ((i11 | 0) > 0) {
    i12 = 0;
    do {
     i17 = i9 + (i12 << 5) | 0;
     i16 = (HEAP32[i8 >> 2] | 0) + (i12 << 5) | 0;
     HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
     HEAP32[i17 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
     HEAP32[i17 + 20 >> 2] = HEAP32[i16 + 20 >> 2];
     HEAP32[i17 + 24 >> 2] = HEAP32[i16 + 24 >> 2];
     HEAP32[i17 + 28 >> 2] = HEAP32[i16 + 28 >> 2];
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i11 | 0));
   }
   i11 = HEAP32[i8 >> 2] | 0;
   i12 = i3 + 164 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i12] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i12] = 1;
   HEAP32[i8 >> 2] = i9;
   HEAP32[i10 >> 2] = i5;
  } else {
   i8 = i3 + 160 | 0;
  }
  do {
   i17 = (HEAP32[i8 >> 2] | 0) + (i7 << 5) | 0;
   HEAP32[i17 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i17 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i17 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
   HEAP32[i17 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
   HEAP32[i17 + 24 >> 2] = HEAP32[i4 + 24 >> 2];
   HEAP32[i17 + 28 >> 2] = HEAP32[i4 + 28 >> 2];
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 if ((i5 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i3 + 160 >> 2] | 0;
 i4 = 0;
 i2 = HEAP32[i2 + 128 >> 2] | 0;
 while (1) {
  HEAP16[i3 + (i4 << 5) + 6 >> 1] = HEAP16[i2 + 14 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 8 >> 1] = HEAP16[i2 + 16 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 10 >> 1] = HEAP16[i2 + 18 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) >> 1] = HEAP16[i2 + 8 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 2 >> 1] = HEAP16[i2 + 10 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 4 >> 1] = HEAP16[i2 + 12 >> 1] | 0;
  HEAP32[i3 + (i4 << 5) + 12 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + (i4 << 5) + 16 >> 2] = HEAP32[i2 + 4 >> 2];
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == (i5 | 0)) {
   break;
  } else {
   i2 = i2 + 20 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function __ZN14btQuantizedBvh16deSerializeFloatER23btQuantizedBvhFloatData(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i8 = i1 + 48 | 0;
 i5 = i1 + 32 | 0;
 i4 = i1;
 HEAPF32[i3 + 20 >> 2] = +HEAPF32[i2 + 16 >> 2];
 HEAPF32[i3 + 24 >> 2] = +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i3 + 28 >> 2] = +HEAPF32[i2 + 24 >> 2];
 HEAPF32[i3 + 32 >> 2] = +HEAPF32[i2 + 28 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 12 >> 2] = +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i3 + 16 >> 2] = +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i3 + 36 >> 2] = +HEAPF32[i2 + 32 >> 2];
 HEAPF32[i3 + 40 >> 2] = +HEAPF32[i2 + 36 >> 2];
 HEAPF32[i3 + 44 >> 2] = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i3 + 48 >> 2] = +HEAPF32[i2 + 44 >> 2];
 HEAP32[i3 + 56 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP8[i3 + 60 | 0] = (HEAP32[i2 + 52 >> 2] | 0) != 0 | 0;
 i6 = HEAP32[i2 + 56 >> 2] | 0;
 i11 = i8 + 0 | 0;
 i15 = i11 + 64 | 0;
 do {
  HEAP32[i11 >> 2] = 0;
  i11 = i11 + 4 | 0;
 } while ((i11 | 0) < (i15 | 0));
 i7 = i3 + 88 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 if ((i9 | 0) < (i6 | 0)) {
  i10 = i3 + 92 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) {
    i12 = 0;
    i16 = i9;
   } else {
    i12 = __Z22btAlignedAllocInternalji(i6 << 6, 16) | 0;
    i16 = HEAP32[i7 >> 2] | 0;
   }
   i13 = i3 + 96 | 0;
   if ((i16 | 0) > 0) {
    i17 = 0;
    do {
     i11 = i12 + (i17 << 6) + 0 | 0;
     i14 = (HEAP32[i13 >> 2] | 0) + (i17 << 6) + 0 | 0;
     i15 = i11 + 64 | 0;
     do {
      HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
      i11 = i11 + 4 | 0;
      i14 = i14 + 4 | 0;
     } while ((i11 | 0) < (i15 | 0));
     i17 = i17 + 1 | 0;
    } while ((i17 | 0) != (i16 | 0));
   }
   i11 = HEAP32[i13 >> 2] | 0;
   i14 = i3 + 100 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i14] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i13 >> 2] = 0;
   }
   HEAP8[i14] = 1;
   HEAP32[i13 >> 2] = i12;
   HEAP32[i10 >> 2] = i6;
  } else {
   i13 = i3 + 96 | 0;
  }
  do {
   i11 = (HEAP32[i13 >> 2] | 0) + (i9 << 6) + 0 | 0;
   i14 = i8 + 0 | 0;
   i15 = i11 + 64 | 0;
   do {
    HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
    i11 = i11 + 4 | 0;
    i14 = i14 + 4 | 0;
   } while ((i11 | 0) < (i15 | 0));
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i6 | 0));
 }
 HEAP32[i7 >> 2] = i6;
 if ((i6 | 0) > 0) {
  i7 = HEAP32[i3 + 96 >> 2] | 0;
  i9 = 0;
  i8 = HEAP32[i2 + 64 >> 2] | 0;
  while (1) {
   HEAPF32[i7 + (i9 << 6) + 16 >> 2] = +HEAPF32[i8 + 16 >> 2];
   HEAPF32[i7 + (i9 << 6) + 20 >> 2] = +HEAPF32[i8 + 20 >> 2];
   HEAPF32[i7 + (i9 << 6) + 24 >> 2] = +HEAPF32[i8 + 24 >> 2];
   HEAPF32[i7 + (i9 << 6) + 28 >> 2] = +HEAPF32[i8 + 28 >> 2];
   HEAPF32[i7 + (i9 << 6) >> 2] = +HEAPF32[i8 >> 2];
   HEAPF32[i7 + (i9 << 6) + 4 >> 2] = +HEAPF32[i8 + 4 >> 2];
   HEAPF32[i7 + (i9 << 6) + 8 >> 2] = +HEAPF32[i8 + 8 >> 2];
   HEAPF32[i7 + (i9 << 6) + 12 >> 2] = +HEAPF32[i8 + 12 >> 2];
   HEAP32[i7 + (i9 << 6) + 32 >> 2] = HEAP32[i8 + 32 >> 2];
   HEAP32[i7 + (i9 << 6) + 36 >> 2] = HEAP32[i8 + 36 >> 2];
   HEAP32[i7 + (i9 << 6) + 40 >> 2] = HEAP32[i8 + 40 >> 2];
   i9 = i9 + 1 | 0;
   if ((i9 | 0) == (i6 | 0)) {
    break;
   } else {
    i8 = i8 + 48 | 0;
   }
  }
 }
 i6 = HEAP32[i2 + 60 >> 2] | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 i7 = i3 + 128 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) < (i6 | 0)) {
  i10 = i3 + 132 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) {
    i11 = 0;
    i13 = i8;
   } else {
    i11 = __Z22btAlignedAllocInternalji(i6 << 4, 16) | 0;
    i13 = HEAP32[i7 >> 2] | 0;
   }
   i9 = i3 + 136 | 0;
   if ((i13 | 0) > 0) {
    i12 = 0;
    do {
     i17 = i11 + (i12 << 4) | 0;
     i16 = (HEAP32[i9 >> 2] | 0) + (i12 << 4) | 0;
     HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i13 | 0));
   }
   i13 = HEAP32[i9 >> 2] | 0;
   i12 = i3 + 140 | 0;
   if ((i13 | 0) != 0) {
    if ((HEAP8[i12] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i13);
    }
    HEAP32[i9 >> 2] = 0;
   }
   HEAP8[i12] = 1;
   HEAP32[i9 >> 2] = i11;
   HEAP32[i10 >> 2] = i6;
  } else {
   i9 = i3 + 136 | 0;
  }
  do {
   i17 = (HEAP32[i9 >> 2] | 0) + (i8 << 4) | 0;
   HEAP32[i17 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i17 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i6 | 0));
 }
 HEAP32[i7 >> 2] = i6;
 if ((i6 | 0) > 0) {
  i8 = HEAP32[i3 + 136 >> 2] | 0;
  i5 = 0;
  i7 = HEAP32[i2 + 68 >> 2] | 0;
  while (1) {
   HEAP32[i8 + (i5 << 4) + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP16[i8 + (i5 << 4) + 6 >> 1] = HEAP16[i7 + 6 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 8 >> 1] = HEAP16[i7 + 8 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 10 >> 1] = HEAP16[i7 + 10 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) >> 1] = HEAP16[i7 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 2 >> 1] = HEAP16[i7 + 2 >> 1] | 0;
   HEAP16[i8 + (i5 << 4) + 4 >> 1] = HEAP16[i7 + 4 >> 1] | 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i6 | 0)) {
    break;
   } else {
    i7 = i7 + 16 | 0;
   }
  }
 }
 HEAP32[i3 + 144 >> 2] = HEAP32[i2 + 76 >> 2];
 i5 = HEAP32[i2 + 80 >> 2] | 0;
 i6 = i3 + 152 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i5 | 0)) {
  i10 = i3 + 156 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i9 = 0;
    i11 = i7;
   } else {
    i9 = __Z22btAlignedAllocInternalji(i5 << 5, 16) | 0;
    i11 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i3 + 160 | 0;
   if ((i11 | 0) > 0) {
    i12 = 0;
    do {
     i17 = i9 + (i12 << 5) | 0;
     i16 = (HEAP32[i8 >> 2] | 0) + (i12 << 5) | 0;
     HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
     HEAP32[i17 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
     HEAP32[i17 + 20 >> 2] = HEAP32[i16 + 20 >> 2];
     HEAP32[i17 + 24 >> 2] = HEAP32[i16 + 24 >> 2];
     HEAP32[i17 + 28 >> 2] = HEAP32[i16 + 28 >> 2];
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i11 | 0));
   }
   i11 = HEAP32[i8 >> 2] | 0;
   i12 = i3 + 164 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i12] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i12] = 1;
   HEAP32[i8 >> 2] = i9;
   HEAP32[i10 >> 2] = i5;
  } else {
   i8 = i3 + 160 | 0;
  }
  do {
   i17 = (HEAP32[i8 >> 2] | 0) + (i7 << 5) | 0;
   HEAP32[i17 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i17 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i17 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
   HEAP32[i17 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
   HEAP32[i17 + 24 >> 2] = HEAP32[i4 + 24 >> 2];
   HEAP32[i17 + 28 >> 2] = HEAP32[i4 + 28 >> 2];
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 if ((i5 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i3 + 160 >> 2] | 0;
 i4 = 0;
 i2 = HEAP32[i2 + 72 >> 2] | 0;
 while (1) {
  HEAP16[i3 + (i4 << 5) + 6 >> 1] = HEAP16[i2 + 14 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 8 >> 1] = HEAP16[i2 + 16 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 10 >> 1] = HEAP16[i2 + 18 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) >> 1] = HEAP16[i2 + 8 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 2 >> 1] = HEAP16[i2 + 10 >> 1] | 0;
  HEAP16[i3 + (i4 << 5) + 4 >> 1] = HEAP16[i2 + 12 >> 1] | 0;
  HEAP32[i3 + (i4 << 5) + 12 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + (i4 << 5) + 16 >> 2] = HEAP32[i2 + 4 >> 2];
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == (i5 | 0)) {
   break;
  } else {
   i2 = i2 + 20 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function __ZN27btPolyhedralContactClipping8clipFaceERK20btAlignedObjectArrayI9btVector3ERS2_RKS1_f(i7, i14, i5, d3) {
 i7 = i7 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 d3 = +d3;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i7 + 4 >> 2] | 0;
 if ((i4 | 0) < 2) {
  STACKTOP = i2;
  return;
 }
 i10 = i4 + -1 | 0;
 i9 = i7 + 12 | 0;
 i23 = HEAP32[i9 >> 2] | 0;
 d13 = +HEAPF32[i23 + (i10 << 4) >> 2];
 d16 = +HEAPF32[i23 + (i10 << 4) + 4 >> 2];
 d19 = +HEAPF32[i23 + (i10 << 4) + 8 >> 2];
 i10 = i5 + 4 | 0;
 i11 = i5 + 8 | 0;
 d17 = +HEAPF32[i10 >> 2];
 d15 = +HEAPF32[i5 >> 2];
 d25 = +HEAPF32[i11 >> 2];
 i8 = i14 + 4 | 0;
 i12 = i14 + 8 | 0;
 i7 = i14 + 12 | 0;
 i14 = i14 + 16 | 0;
 d28 = d15;
 d26 = d17;
 d27 = d25;
 d20 = d13;
 d21 = d16;
 d22 = d19;
 d25 = d13 * d15 + d16 * d17 + d19 * d25 + d3;
 i18 = 0;
 while (1) {
  d15 = +HEAPF32[i23 + (i18 << 4) >> 2];
  d13 = +HEAPF32[i23 + (i18 << 4) + 4 >> 2];
  d16 = +HEAPF32[i23 + (i18 << 4) + 8 >> 2];
  d19 = +HEAPF32[i23 + (i18 << 4) + 12 >> 2];
  d17 = d15 * d28 + d13 * d26 + d16 * d27 + d3;
  i23 = d17 < 0.0;
  do {
   if (d25 < 0.0) {
    if (i23) {
     i29 = HEAP32[i8 >> 2] | 0;
     if ((i29 | 0) == (HEAP32[i12 >> 2] | 0) ? (i1 = (i29 | 0) == 0 ? 1 : i29 << 1, (i29 | 0) < (i1 | 0)) : 0) {
      if ((i1 | 0) == 0) {
       i23 = 0;
      } else {
       i23 = __Z22btAlignedAllocInternalji(i1 << 4, 16) | 0;
       i29 = HEAP32[i8 >> 2] | 0;
      }
      if ((i29 | 0) > 0) {
       i30 = 0;
       do {
        i24 = i23 + (i30 << 4) | 0;
        if ((i24 | 0) != 0) {
         i31 = (HEAP32[i7 >> 2] | 0) + (i30 << 4) | 0;
         HEAP32[i24 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
         HEAP32[i24 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
         HEAP32[i24 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
         HEAP32[i24 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
        }
        i30 = i30 + 1 | 0;
       } while ((i30 | 0) != (i29 | 0));
      }
      i24 = HEAP32[i7 >> 2] | 0;
      if ((i24 | 0) != 0) {
       if ((HEAP8[i14] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i24);
       }
       HEAP32[i7 >> 2] = 0;
      }
      HEAP8[i14] = 1;
      HEAP32[i7 >> 2] = i23;
      HEAP32[i12 >> 2] = i1;
      i29 = HEAP32[i8 >> 2] | 0;
     }
     i24 = HEAP32[i7 >> 2] | 0;
     i23 = i24 + (i29 << 4) | 0;
     if ((i23 | 0) != 0) {
      HEAPF32[i23 >> 2] = d15;
      HEAPF32[i24 + (i29 << 4) + 4 >> 2] = d13;
      HEAPF32[i24 + (i29 << 4) + 8 >> 2] = d16;
      HEAPF32[i24 + (i29 << 4) + 12 >> 2] = d19;
      i29 = HEAP32[i8 >> 2] | 0;
     }
     HEAP32[i8 >> 2] = i29 + 1;
     break;
    } else {
     d28 = d25 / (d25 - d17);
     d19 = d20 + (d15 - d20) * d28;
     d20 = d21 + (d13 - d21) * d28;
     d21 = d22 + (d16 - d22) * d28;
     i24 = HEAP32[i8 >> 2] | 0;
     if ((i24 | 0) == (HEAP32[i12 >> 2] | 0) ? (i6 = (i24 | 0) == 0 ? 1 : i24 << 1, (i24 | 0) < (i6 | 0)) : 0) {
      if ((i6 | 0) == 0) {
       i23 = 0;
      } else {
       i23 = __Z22btAlignedAllocInternalji(i6 << 4, 16) | 0;
       i24 = HEAP32[i8 >> 2] | 0;
      }
      if ((i24 | 0) > 0) {
       i30 = 0;
       do {
        i29 = i23 + (i30 << 4) | 0;
        if ((i29 | 0) != 0) {
         i31 = (HEAP32[i7 >> 2] | 0) + (i30 << 4) | 0;
         HEAP32[i29 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
         HEAP32[i29 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
         HEAP32[i29 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
         HEAP32[i29 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
        }
        i30 = i30 + 1 | 0;
       } while ((i30 | 0) != (i24 | 0));
      }
      i24 = HEAP32[i7 >> 2] | 0;
      if ((i24 | 0) != 0) {
       if ((HEAP8[i14] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i24);
       }
       HEAP32[i7 >> 2] = 0;
      }
      HEAP8[i14] = 1;
      HEAP32[i7 >> 2] = i23;
      HEAP32[i12 >> 2] = i6;
      i24 = HEAP32[i8 >> 2] | 0;
     }
     i23 = HEAP32[i7 >> 2] | 0;
     i29 = i23 + (i24 << 4) | 0;
     if ((i29 | 0) != 0) {
      HEAPF32[i29 >> 2] = d19;
      HEAPF32[i23 + (i24 << 4) + 4 >> 2] = d20;
      HEAPF32[i23 + (i24 << 4) + 8 >> 2] = d21;
      HEAPF32[i23 + (i24 << 4) + 12 >> 2] = 0.0;
      i24 = HEAP32[i8 >> 2] | 0;
     }
     HEAP32[i8 >> 2] = i24 + 1;
     break;
    }
   } else {
    if (i23) {
     d28 = d25 / (d25 - d17);
     d20 = d20 + (d15 - d20) * d28;
     d21 = d21 + (d13 - d21) * d28;
     d22 = d22 + (d16 - d22) * d28;
     i29 = HEAP32[i8 >> 2] | 0;
     i23 = HEAP32[i12 >> 2] | 0;
     if ((i29 | 0) == (i23 | 0)) {
      i23 = (i29 | 0) == 0 ? 1 : i29 << 1;
      if ((i29 | 0) < (i23 | 0)) {
       if ((i23 | 0) == 0) {
        i24 = 0;
       } else {
        i24 = __Z22btAlignedAllocInternalji(i23 << 4, 16) | 0;
        i29 = HEAP32[i8 >> 2] | 0;
       }
       if ((i29 | 0) > 0) {
        i31 = 0;
        do {
         i30 = i24 + (i31 << 4) | 0;
         if ((i30 | 0) != 0) {
          i32 = (HEAP32[i7 >> 2] | 0) + (i31 << 4) | 0;
          HEAP32[i30 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
          HEAP32[i30 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
          HEAP32[i30 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
          HEAP32[i30 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
         }
         i31 = i31 + 1 | 0;
        } while ((i31 | 0) != (i29 | 0));
       }
       i29 = HEAP32[i7 >> 2] | 0;
       if ((i29 | 0) != 0) {
        if ((HEAP8[i14] | 0) != 0) {
         __Z21btAlignedFreeInternalPv(i29);
        }
        HEAP32[i7 >> 2] = 0;
       }
       HEAP8[i14] = 1;
       HEAP32[i7 >> 2] = i24;
       HEAP32[i12 >> 2] = i23;
       i24 = HEAP32[i8 >> 2] | 0;
      } else {
       i24 = i29;
       i23 = i29;
      }
     } else {
      i24 = i29;
     }
     i30 = HEAP32[i7 >> 2] | 0;
     i29 = i30 + (i24 << 4) | 0;
     if ((i29 | 0) != 0) {
      HEAPF32[i29 >> 2] = d20;
      HEAPF32[i30 + (i24 << 4) + 4 >> 2] = d21;
      HEAPF32[i30 + (i24 << 4) + 8 >> 2] = d22;
      HEAPF32[i30 + (i24 << 4) + 12 >> 2] = 0.0;
      i24 = HEAP32[i8 >> 2] | 0;
      i23 = HEAP32[i12 >> 2] | 0;
     }
     i24 = i24 + 1 | 0;
     HEAP32[i8 >> 2] = i24;
     if ((i24 | 0) == (i23 | 0)) {
      i24 = (i23 | 0) == 0 ? 1 : i23 << 1;
      if ((i23 | 0) < (i24 | 0)) {
       if ((i24 | 0) == 0) {
        i29 = 0;
       } else {
        i29 = __Z22btAlignedAllocInternalji(i24 << 4, 16) | 0;
        i23 = HEAP32[i8 >> 2] | 0;
       }
       if ((i23 | 0) > 0) {
        i30 = 0;
        do {
         i31 = i29 + (i30 << 4) | 0;
         if ((i31 | 0) != 0) {
          i32 = (HEAP32[i7 >> 2] | 0) + (i30 << 4) | 0;
          HEAP32[i31 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
          HEAP32[i31 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
          HEAP32[i31 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
          HEAP32[i31 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
         }
         i30 = i30 + 1 | 0;
        } while ((i30 | 0) != (i23 | 0));
       }
       i23 = HEAP32[i7 >> 2] | 0;
       if ((i23 | 0) != 0) {
        if ((HEAP8[i14] | 0) != 0) {
         __Z21btAlignedFreeInternalPv(i23);
        }
        HEAP32[i7 >> 2] = 0;
       }
       HEAP8[i14] = 1;
       HEAP32[i7 >> 2] = i29;
       HEAP32[i12 >> 2] = i24;
       i23 = HEAP32[i8 >> 2] | 0;
      }
     } else {
      i23 = i24;
     }
     i29 = HEAP32[i7 >> 2] | 0;
     i24 = i29 + (i23 << 4) | 0;
     if ((i24 | 0) != 0) {
      HEAPF32[i24 >> 2] = d15;
      HEAPF32[i29 + (i23 << 4) + 4 >> 2] = d13;
      HEAPF32[i29 + (i23 << 4) + 8 >> 2] = d16;
      HEAPF32[i29 + (i23 << 4) + 12 >> 2] = d19;
      i23 = HEAP32[i8 >> 2] | 0;
     }
     HEAP32[i8 >> 2] = i23 + 1;
    }
   }
  } while (0);
  i18 = i18 + 1 | 0;
  if ((i18 | 0) == (i4 | 0)) {
   break;
  }
  i23 = HEAP32[i9 >> 2] | 0;
  d28 = +HEAPF32[i5 >> 2];
  d26 = +HEAPF32[i10 >> 2];
  d27 = +HEAPF32[i11 >> 2];
  d20 = d15;
  d21 = d13;
  d22 = d16;
  d25 = d17;
 }
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItE9addHandleERK9btVector3S3_PvssP12btDispatcherS4_(i1, i5, i4, i7, i9, i8, i2, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i20 = i3 + 6 | 0;
 i14 = i3;
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i1, i20, i5, 0);
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i1, i14, i4, 1);
 i13 = i1 + 64 | 0;
 i5 = HEAP16[i13 >> 1] | 0;
 i4 = i1 + 60 | 0;
 i15 = HEAP32[i4 >> 2] | 0;
 i17 = i5 & 65535;
 i18 = i15 + (i17 << 6) + 48 | 0;
 HEAP16[i13 >> 1] = HEAP16[i18 >> 1] | 0;
 i13 = i1 + 56 | 0;
 HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + 1 << 16 >> 16;
 HEAP32[i15 + (i17 << 6) + 12 >> 2] = i17;
 HEAP32[i15 + (i17 << 6) >> 2] = i7;
 HEAP16[i15 + (i17 << 6) + 4 >> 1] = i9;
 HEAP16[i15 + (i17 << 6) + 6 >> 1] = i8;
 HEAP32[i15 + (i17 << 6) + 8 >> 2] = i6;
 i6 = (HEAPU16[i13 >> 1] | 0) << 1;
 i13 = i6 & 65535;
 i6 = i6 & 65534;
 i21 = i6 | 1;
 i19 = i6 + -1 | 0;
 i7 = i19 & 65535;
 i12 = (HEAP32[i4 >> 2] | 0) + 54 | 0;
 HEAP16[i12 >> 1] = (HEAPU16[i12 >> 1] | 0) + 2;
 i12 = i1 + 68 | 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i11 = i9 + (i21 << 2) | 0;
 i9 = i9 + (i19 << 2) | 0;
 i9 = HEAPU16[i9 >> 1] | HEAPU16[i9 + 2 >> 1] << 16;
 HEAP16[i11 >> 1] = i9;
 HEAP16[i11 + 2 >> 1] = i9 >>> 16;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP16[i11 + (i19 << 2) >> 1] = HEAP16[i20 >> 1] | 0;
 HEAP16[i11 + (i19 << 2) + 2 >> 1] = i5;
 HEAP16[i11 + (i6 << 2) >> 1] = HEAP16[i14 >> 1] | 0;
 HEAP16[i11 + (i6 << 2) + 2 >> 1] = i5;
 HEAP16[i18 >> 1] = i7;
 i11 = i15 + (i17 << 6) + 54 | 0;
 HEAP16[i11 >> 1] = i13;
 i9 = (HEAP32[i4 >> 2] | 0) + 56 | 0;
 HEAP16[i9 >> 1] = (HEAPU16[i9 >> 1] | 0) + 2;
 i9 = i1 + 72 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 i10 = i8 + (i21 << 2) | 0;
 i8 = i8 + (i19 << 2) | 0;
 i8 = HEAPU16[i8 >> 1] | HEAPU16[i8 + 2 >> 1] << 16;
 HEAP16[i10 >> 1] = i8;
 HEAP16[i10 + 2 >> 1] = i8 >>> 16;
 i10 = HEAP32[i9 >> 2] | 0;
 HEAP16[i10 + (i19 << 2) >> 1] = HEAP16[i20 + 2 >> 1] | 0;
 HEAP16[i10 + (i19 << 2) + 2 >> 1] = i5;
 HEAP16[i10 + (i6 << 2) >> 1] = HEAP16[i14 + 2 >> 1] | 0;
 HEAP16[i10 + (i6 << 2) + 2 >> 1] = i5;
 i10 = i15 + (i17 << 6) + 50 | 0;
 HEAP16[i10 >> 1] = i7;
 i8 = i15 + (i17 << 6) + 56 | 0;
 HEAP16[i8 >> 1] = i13;
 i16 = (HEAP32[i4 >> 2] | 0) + 58 | 0;
 HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) + 2;
 i16 = i1 + 76 | 0;
 i22 = HEAP32[i16 >> 2] | 0;
 i21 = i22 + (i21 << 2) | 0;
 i22 = i22 + (i19 << 2) | 0;
 i22 = HEAPU16[i22 >> 1] | HEAPU16[i22 + 2 >> 1] << 16;
 HEAP16[i21 >> 1] = i22;
 HEAP16[i21 + 2 >> 1] = i22 >>> 16;
 i16 = HEAP32[i16 >> 2] | 0;
 HEAP16[i16 + (i19 << 2) >> 1] = HEAP16[i20 + 4 >> 1] | 0;
 HEAP16[i16 + (i19 << 2) + 2 >> 1] = i5;
 HEAP16[i16 + (i6 << 2) >> 1] = HEAP16[i14 + 4 >> 1] | 0;
 HEAP16[i16 + (i6 << 2) + 2 >> 1] = i5;
 i6 = i15 + (i17 << 6) + 52 | 0;
 HEAP16[i6 >> 1] = i7;
 i7 = i15 + (i17 << 6) + 58 | 0;
 HEAP16[i7 >> 1] = i13;
 i13 = HEAP32[i12 >> 2] | 0;
 i18 = HEAPU16[i18 >> 1] | 0;
 i17 = i13 + (i18 << 2) | 0;
 i15 = i13 + (i18 + -1 << 2) | 0;
 i16 = HEAP32[i4 >> 2] | 0;
 i14 = HEAP16[i15 >> 1] | 0;
 if ((HEAPU16[i17 >> 1] | 0) < (i14 & 65535)) {
  i13 = i16 + ((HEAPU16[i13 + (i18 << 2) + 2 >> 1] | 0) << 6) + 48 | 0;
  while (1) {
   i18 = HEAPU16[i15 + 2 >> 1] | 0;
   if ((i14 & 1) == 0) {
    i22 = i16 + (i18 << 6) + 48 | 0;
    HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i22 = i16 + (i18 << 6) + 54 | 0;
    HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + -1 << 16 >> 16;
   i14 = HEAPU16[i17 >> 1] | HEAPU16[i17 + 2 >> 1] << 16;
   i22 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
   HEAP16[i17 >> 1] = i22;
   HEAP16[i17 + 2 >> 1] = i22 >>> 16;
   HEAP16[i15 >> 1] = i14;
   HEAP16[i15 + 2 >> 1] = i14 >>> 16;
   i17 = i17 + -4 | 0;
   i15 = i15 + -4 | 0;
   i14 = HEAP16[i15 >> 1] | 0;
   if (!((HEAPU16[i17 >> 1] | 0) < (i14 & 65535))) {
    break;
   }
   i16 = HEAP32[i4 >> 2] | 0;
  }
  i13 = HEAP32[i12 >> 2] | 0;
 }
 i11 = HEAPU16[i11 >> 1] | 0;
 i15 = i13 + (i11 << 2) | 0;
 i14 = i13 + (i11 + -1 << 2) | 0;
 i12 = HEAP16[i14 >> 1] | 0;
 L12 : do {
  if ((HEAPU16[i15 >> 1] | 0) < (i12 & 65535)) {
   i22 = HEAP32[i4 >> 2] | 0;
   i11 = i22 + ((HEAPU16[i13 + (i11 << 2) + 2 >> 1] | 0) << 6) + 54 | 0;
   i13 = i22;
   while (1) {
    i16 = HEAPU16[i14 + 2 >> 1] | 0;
    if ((i12 & 1) == 0) {
     i22 = i13 + (i16 << 6) + 48 | 0;
     HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
    } else {
     i22 = i13 + (i16 << 6) + 54 | 0;
     HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
    }
    HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + -1 << 16 >> 16;
    i12 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
    i22 = HEAPU16[i14 >> 1] | HEAPU16[i14 + 2 >> 1] << 16;
    HEAP16[i15 >> 1] = i22;
    HEAP16[i15 + 2 >> 1] = i22 >>> 16;
    HEAP16[i14 >> 1] = i12;
    HEAP16[i14 + 2 >> 1] = i12 >>> 16;
    i15 = i15 + -4 | 0;
    i14 = i14 + -4 | 0;
    i12 = HEAP16[i14 >> 1] | 0;
    if (!((HEAPU16[i15 >> 1] | 0) < (i12 & 65535))) {
     break L12;
    }
    i13 = HEAP32[i4 >> 2] | 0;
   }
  }
 } while (0);
 i15 = HEAP32[i9 >> 2] | 0;
 i10 = HEAPU16[i10 >> 1] | 0;
 i14 = i15 + (i10 << 2) | 0;
 i12 = i15 + (i10 + -1 << 2) | 0;
 i13 = HEAP32[i4 >> 2] | 0;
 i11 = HEAP16[i12 >> 1] | 0;
 if ((HEAPU16[i14 >> 1] | 0) < (i11 & 65535)) {
  i10 = i13 + ((HEAPU16[i15 + (i10 << 2) + 2 >> 1] | 0) << 6) + 50 | 0;
  while (1) {
   i15 = HEAPU16[i12 + 2 >> 1] | 0;
   if ((i11 & 1) == 0) {
    i22 = i13 + (i15 << 6) + 50 | 0;
    HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i22 = i13 + (i15 << 6) + 56 | 0;
    HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i10 >> 1] = (HEAP16[i10 >> 1] | 0) + -1 << 16 >> 16;
   i11 = HEAPU16[i14 >> 1] | HEAPU16[i14 + 2 >> 1] << 16;
   i22 = HEAPU16[i12 >> 1] | HEAPU16[i12 + 2 >> 1] << 16;
   HEAP16[i14 >> 1] = i22;
   HEAP16[i14 + 2 >> 1] = i22 >>> 16;
   HEAP16[i12 >> 1] = i11;
   HEAP16[i12 + 2 >> 1] = i11 >>> 16;
   i14 = i14 + -4 | 0;
   i12 = i12 + -4 | 0;
   i11 = HEAP16[i12 >> 1] | 0;
   if (!((HEAPU16[i14 >> 1] | 0) < (i11 & 65535))) {
    break;
   }
   i13 = HEAP32[i4 >> 2] | 0;
  }
  i15 = HEAP32[i9 >> 2] | 0;
 }
 i8 = HEAPU16[i8 >> 1] | 0;
 i12 = i15 + (i8 << 2) | 0;
 i11 = i15 + (i8 + -1 << 2) | 0;
 i9 = HEAP16[i11 >> 1] | 0;
 if (!((HEAPU16[i12 >> 1] | 0) < (i9 & 65535))) {
  i22 = HEAP16[i6 >> 1] | 0;
  __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i1, 2, i22, 0, 1);
  i22 = HEAP16[i7 >> 1] | 0;
  __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i1, 2, i22, i2, 1);
  STACKTOP = i3;
  return i5 | 0;
 }
 i10 = HEAP32[i4 >> 2] | 0;
 i8 = i10 + ((HEAPU16[i15 + (i8 << 2) + 2 >> 1] | 0) << 6) + 56 | 0;
 while (1) {
  i13 = HEAPU16[i11 + 2 >> 1] | 0;
  if ((i9 & 1) == 0) {
   i22 = i10 + (i13 << 6) + 50 | 0;
   HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
  } else {
   i22 = i10 + (i13 << 6) + 56 | 0;
   HEAP16[i22 >> 1] = (HEAP16[i22 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i8 >> 1] = (HEAP16[i8 >> 1] | 0) + -1 << 16 >> 16;
  i9 = HEAPU16[i12 >> 1] | HEAPU16[i12 + 2 >> 1] << 16;
  i22 = HEAPU16[i11 >> 1] | HEAPU16[i11 + 2 >> 1] << 16;
  HEAP16[i12 >> 1] = i22;
  HEAP16[i12 + 2 >> 1] = i22 >>> 16;
  HEAP16[i11 >> 1] = i9;
  HEAP16[i11 + 2 >> 1] = i9 >>> 16;
  i12 = i12 + -4 | 0;
  i11 = i11 + -4 | 0;
  i9 = HEAP16[i11 >> 1] | 0;
  if (!((HEAPU16[i12 >> 1] | 0) < (i9 & 65535))) {
   break;
  }
  i10 = HEAP32[i4 >> 2] | 0;
 }
 i22 = HEAP16[i6 >> 1] | 0;
 __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i1, 2, i22, 0, 1);
 i22 = HEAP16[i7 >> 1] | 0;
 __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i1, 2, i22, i2, 1);
 STACKTOP = i3;
 return i5 | 0;
}
function __ZN23btDiscreteDynamicsWorld22addSpeculativeContactsEf(i13, d14) {
 i13 = i13 | 0;
 d14 = +d14;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, i66 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 i10 = i35 + 432 | 0;
 i8 = i35 + 336 | 0;
 i9 = i35 + 280 | 0;
 i11 = i35 + 216 | 0;
 i6 = i35 + 192 | 0;
 i3 = i35 + 32 | 0;
 i4 = i35 + 16 | 0;
 i5 = i35;
 __ZN15CProfileManager13Start_ProfileEPKc(445088);
 i7 = i13 + 204 | 0;
 if ((HEAP32[i7 >> 2] | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i35;
  return;
 }
 i59 = i13 + 212 | 0;
 i45 = i10 + 48 | 0;
 i57 = i10 + 52 | 0;
 i58 = i10 + 56 | 0;
 i40 = i13 + 76 | 0;
 i41 = i13 + 24 | 0;
 i34 = i8 + 4 | 0;
 i42 = i8 + 8 | 0;
 i43 = i8 + 10 | 0;
 i44 = i8 + 12 | 0;
 i46 = i8 + 28 | 0;
 i32 = i8 + 76 | 0;
 i47 = i8 + 80 | 0;
 i48 = i8 + 84 | 0;
 i39 = i8 + 88 | 0;
 i49 = i8 + 92 | 0;
 i50 = i9 + 4 | 0;
 i51 = i9 + 28 | 0;
 i52 = i9 + 44 | 0;
 i54 = i11 + 16 | 0;
 i53 = i10 + 16 | 0;
 i56 = i11 + 32 | 0;
 i55 = i10 + 32 | 0;
 i1 = i11 + 48 | 0;
 i19 = i6 + 16 | 0;
 i21 = i6 + 12 | 0;
 i22 = i6 + 4 | 0;
 i23 = i6 + 8 | 0;
 i33 = i3 + 4 | 0;
 i36 = i11 + 52 | 0;
 i37 = i11 + 56 | 0;
 i38 = i8 + 60 | 0;
 i30 = i4 + 4 | 0;
 i31 = i4 + 8 | 0;
 i24 = i8 + 44 | 0;
 i25 = i8 + 48 | 0;
 i26 = i8 + 52 | 0;
 i27 = i5 + 4 | 0;
 i28 = i5 + 8 | 0;
 i29 = i5 + 12 | 0;
 i20 = 0;
 do {
  i60 = HEAP32[(HEAP32[i59 >> 2] | 0) + (i20 << 2) >> 2] | 0;
  HEAPF32[i60 + 240 >> 2] = 1.0;
  i61 = HEAP32[i60 + 216 >> 2] | 0;
  if ((!((i61 | 0) == 2 | (i61 | 0) == 5) ? (HEAP32[i60 + 204 >> 2] & 3 | 0) == 0 : 0) ? (__ZN11btRigidBody26predictIntegratedTransformEfR11btTransform(i60, d14, i10), i18 = i60 + 4 | 0, i15 = i60 + 52 | 0, d63 = +HEAPF32[i45 >> 2] - +HEAPF32[i15 >> 2], i16 = i60 + 56 | 0, d64 = +HEAPF32[i57 >> 2] - +HEAPF32[i16 >> 2], i17 = i60 + 60 | 0, d65 = +HEAPF32[i58 >> 2] - +HEAPF32[i17 >> 2], d62 = +HEAPF32[i60 + 248 >> 2], d62 = d62 * d62, d62 != 0.0 & d62 < d63 * d63 + d64 * d64 + d65 * d65) : 0) {
   __ZN15CProfileManager13Start_ProfileEPKc(445112);
   if ((HEAP32[(HEAP32[i60 + 192 >> 2] | 0) + 4 >> 2] | 0) < 20) {
    HEAP32[111258] = (HEAP32[111258] | 0) + 1;
    i66 = HEAP32[i40 >> 2] | 0;
    i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i66 >> 2] | 0) + 36 >> 2] & 127](i66) | 0;
    i61 = HEAP32[i41 >> 2] | 0;
    HEAPF32[i34 >> 2] = 1.0;
    HEAP16[i42 >> 1] = 1;
    HEAP16[i43 >> 1] = -1;
    HEAP32[i8 >> 2] = 445480;
    HEAP32[i44 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    HEAP32[i44 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i44 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i44 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    HEAP32[i46 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
    HEAP32[i46 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
    HEAP32[i46 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
    HEAP32[i46 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
    HEAP32[i32 >> 2] = 0;
    HEAP32[i8 >> 2] = 445272;
    HEAP32[i47 >> 2] = i60;
    HEAPF32[i48 >> 2] = 0.0;
    HEAP32[i39 >> 2] = i66;
    HEAP32[i49 >> 2] = i61;
    d65 = +HEAPF32[i60 + 244 >> 2];
    __ZN21btConvexInternalShapeC2Ev(i9);
    HEAP32[i9 >> 2] = 456848;
    HEAP32[i50 >> 2] = 8;
    HEAPF32[i51 >> 2] = d65;
    HEAPF32[i52 >> 2] = d65;
    i61 = i60 + 188 | 0;
    i66 = HEAP32[i61 >> 2] | 0;
    HEAP16[i42 >> 1] = HEAP16[i66 + 4 >> 1] | 0;
    HEAP16[i43 >> 1] = HEAP16[i66 + 6 >> 1] | 0;
    HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
    HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
    HEAP32[i54 + 0 >> 2] = HEAP32[i53 + 0 >> 2];
    HEAP32[i54 + 4 >> 2] = HEAP32[i53 + 4 >> 2];
    HEAP32[i54 + 8 >> 2] = HEAP32[i53 + 8 >> 2];
    HEAP32[i54 + 12 >> 2] = HEAP32[i53 + 12 >> 2];
    HEAP32[i56 + 0 >> 2] = HEAP32[i55 + 0 >> 2];
    HEAP32[i56 + 4 >> 2] = HEAP32[i55 + 4 >> 2];
    HEAP32[i56 + 8 >> 2] = HEAP32[i55 + 8 >> 2];
    HEAP32[i56 + 12 >> 2] = HEAP32[i55 + 12 >> 2];
    HEAP32[i1 + 0 >> 2] = HEAP32[i45 + 0 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i45 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i45 + 12 >> 2];
    HEAP32[i11 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
    HEAP32[i11 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
    i66 = i60 + 20 | 0;
    HEAP32[i54 + 0 >> 2] = HEAP32[i66 + 0 >> 2];
    HEAP32[i54 + 4 >> 2] = HEAP32[i66 + 4 >> 2];
    HEAP32[i54 + 8 >> 2] = HEAP32[i66 + 8 >> 2];
    HEAP32[i54 + 12 >> 2] = HEAP32[i66 + 12 >> 2];
    i66 = i60 + 36 | 0;
    HEAP32[i56 + 0 >> 2] = HEAP32[i66 + 0 >> 2];
    HEAP32[i56 + 4 >> 2] = HEAP32[i66 + 4 >> 2];
    HEAP32[i56 + 8 >> 2] = HEAP32[i66 + 8 >> 2];
    HEAP32[i56 + 12 >> 2] = HEAP32[i66 + 12 >> 2];
    __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i13, i9, i18, i11, i8, 0.0);
    if ((+HEAPF32[i34 >> 2] < 1.0 ? (i12 = HEAP32[i39 >> 2] | 0, i12 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 31](i12, HEAP32[i61 >> 2] | 0, HEAP32[(HEAP32[i32 >> 2] | 0) + 188 >> 2] | 0) | 0, (i12 | 0) != 0) : 0) ? (i2 = i12 + 8 | 0, (HEAP32[i2 >> 2] | 0) != 0) : 0) {
     HEAP8[i19] = 1;
     HEAP32[i21 >> 2] = 0;
     HEAP32[i22 >> 2] = 0;
     HEAP32[i23 >> 2] = 0;
     i66 = HEAP32[i2 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i66 >> 2] | 0) + 16 >> 2] & 127](i66, i6);
     do {
      if ((HEAP32[i22 >> 2] | 0) != 0) {
       __ZN16btManifoldResultC2EP17btCollisionObjectS1_(i3, i60, HEAP32[i32 >> 2] | 0);
       i61 = HEAP32[i21 >> 2] | 0;
       HEAP32[i33 >> 2] = HEAP32[i61 >> 2];
       d62 = +HEAPF32[i34 >> 2];
       d64 = (+HEAPF32[i1 >> 2] - +HEAPF32[i15 >> 2]) * d62;
       d63 = (+HEAPF32[i36 >> 2] - +HEAPF32[i16 >> 2]) * d62;
       d62 = d62 * (+HEAPF32[i37 >> 2] - +HEAPF32[i17 >> 2]);
       d65 = d62 * d62 + (d64 * d64 + d63 * d63);
       HEAP32[i4 + 0 >> 2] = HEAP32[i38 + 0 >> 2];
       HEAP32[i4 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
       HEAP32[i4 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
       HEAP32[i4 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
       if (d65 > 1.1920928955078125e-7) {
        d65 = +Math_sqrt(+d65);
        HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] - d64;
        HEAPF32[i30 >> 2] = +HEAPF32[i30 >> 2] - d63;
        HEAPF32[i31 >> 2] = +HEAPF32[i31 >> 2] - d62;
        d62 = d65;
       } else {
        d62 = 0.0;
       }
       if ((HEAP32[(HEAP32[i61 >> 2] | 0) + 1108 >> 2] | 0) == (i60 | 0)) {
        __ZN16btManifoldResult15addContactPointERK9btVector3S2_f(i3, i24, i4, d62);
        break;
       } else {
        d64 = -+HEAPF32[i25 >> 2];
        d65 = -+HEAPF32[i26 >> 2];
        HEAPF32[i5 >> 2] = -+HEAPF32[i24 >> 2];
        HEAPF32[i27 >> 2] = d64;
        HEAPF32[i28 >> 2] = d65;
        HEAPF32[i29 >> 2] = 0.0;
        __ZN16btManifoldResult15addContactPointERK9btVector3S2_f(i3, i5, i4, d62);
        break;
       }
      }
     } while (0);
     i60 = HEAP32[i21 >> 2] | 0;
     if ((i60 | 0) != 0) {
      if ((HEAP8[i19] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i60);
      }
      HEAP32[i21 >> 2] = 0;
     }
     HEAP8[i19] = 1;
     HEAP32[i21 >> 2] = 0;
     HEAP32[i22 >> 2] = 0;
     HEAP32[i23 >> 2] = 0;
    }
   }
   __ZN15CProfileManager12Stop_ProfileEv();
  }
  i20 = i20 + 1 | 0;
 } while ((i20 | 0) < (HEAP32[i7 >> 2] | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i35;
 return;
}
function __ZN17btHingeConstraint16getInfo2InternalEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_(i2, i5, i9, i17, i4, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i17 = i17 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i14 = i1 + 96 | 0;
 i13 = i1 + 32 | 0;
 i16 = i1 + 16 | 0;
 i18 = i1;
 i8 = i5 + 24 | 0;
 i15 = HEAP32[i8 >> 2] | 0;
 __ZNK11btTransformmlERKS_(i14, i9, i2 + 544 | 0);
 __ZNK11btTransformmlERKS_(i13, i17, i2 + 608 | 0);
 i19 = i14 + 48 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
 i19 = i13 + 48 | 0;
 HEAP32[i18 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
 i19 = i2 + 728 | 0;
 if ((HEAP8[i19] | 0) == 0) {
  i21 = HEAP32[i5 + 8 >> 2] | 0;
  HEAPF32[i21 >> 2] = 1.0;
  i6 = i15 + 1 | 0;
  HEAPF32[i21 + (i6 << 2) >> 2] = 1.0;
  i7 = i15 << 1;
  i23 = i7 + 2 | 0;
  HEAPF32[i21 + (i23 << 2) >> 2] = 1.0;
 } else {
  i23 = i15 << 1;
  i7 = i23;
  i6 = i15 + 1 | 0;
  i23 = i23 + 2 | 0;
 }
 d10 = +HEAPF32[i16 >> 2] - +HEAPF32[i9 + 48 >> 2];
 i21 = i16 + 4 | 0;
 d22 = +HEAPF32[i21 >> 2] - +HEAPF32[i9 + 52 >> 2];
 i20 = i16 + 8 | 0;
 d11 = +HEAPF32[i20 >> 2] - +HEAPF32[i9 + 56 >> 2];
 i9 = i5 + 12 | 0;
 i31 = HEAP32[i9 >> 2] | 0;
 HEAPF32[i31 >> 2] = 0.0;
 HEAPF32[i31 + 4 >> 2] = d11;
 HEAPF32[i31 + 8 >> 2] = -d22;
 HEAPF32[i31 + 12 >> 2] = 0.0;
 HEAPF32[i31 + (i15 << 2) >> 2] = -d11;
 HEAPF32[i31 + (i6 << 2) >> 2] = 0.0;
 i30 = i15 + 2 | 0;
 HEAPF32[i31 + (i30 << 2) >> 2] = d10;
 i29 = i15 + 3 | 0;
 HEAPF32[i31 + (i29 << 2) >> 2] = 0.0;
 HEAPF32[i31 + (i7 << 2) >> 2] = d22;
 i28 = i7 | 1;
 HEAPF32[i31 + (i28 << 2) >> 2] = -d10;
 HEAPF32[i31 + (i23 << 2) >> 2] = 0.0;
 i27 = i7 + 3 | 0;
 HEAPF32[i31 + (i27 << 2) >> 2] = 0.0;
 d10 = +HEAPF32[i18 >> 2];
 d22 = d10 - +HEAPF32[i17 + 48 >> 2];
 d11 = +HEAPF32[i18 + 4 >> 2];
 d26 = d11 - +HEAPF32[i17 + 52 >> 2];
 d12 = +HEAPF32[i18 + 8 >> 2];
 d25 = d12 - +HEAPF32[i17 + 56 >> 2];
 i18 = i5 + 20 | 0;
 i17 = HEAP32[i18 >> 2] | 0;
 HEAPF32[i17 >> 2] = 0.0;
 HEAPF32[i17 + 4 >> 2] = -d25;
 HEAPF32[i17 + 8 >> 2] = d26;
 HEAPF32[i17 + 12 >> 2] = 0.0;
 HEAPF32[i17 + (i15 << 2) >> 2] = d25;
 HEAPF32[i17 + (i6 << 2) >> 2] = 0.0;
 HEAPF32[i17 + (i30 << 2) >> 2] = -d22;
 HEAPF32[i17 + (i29 << 2) >> 2] = 0.0;
 HEAPF32[i17 + (i7 << 2) >> 2] = -d26;
 HEAPF32[i17 + (i28 << 2) >> 2] = d22;
 HEAPF32[i17 + (i23 << 2) >> 2] = 0.0;
 HEAPF32[i17 + (i27 << 2) >> 2] = 0.0;
 i7 = i5 + 4 | 0;
 d22 = +HEAPF32[i5 >> 2] * +HEAPF32[i7 >> 2];
 i6 = i5 + 28 | 0;
 if ((HEAP8[i19] | 0) == 0) {
  i31 = HEAP32[i6 >> 2] | 0;
  HEAPF32[i31 >> 2] = d22 * (d10 - +HEAPF32[i16 >> 2]);
  HEAPF32[i31 + (i15 << 2) >> 2] = d22 * (d11 - +HEAPF32[i21 >> 2]);
  HEAPF32[i31 + (i15 << 1 << 2) >> 2] = d22 * (d12 - +HEAPF32[i20 >> 2]);
 }
 d12 = +HEAPF32[i14 + 8 >> 2];
 d11 = +HEAPF32[i14 + 24 >> 2];
 d10 = +HEAPF32[i14 + 40 >> 2];
 d36 = +HEAPF32[i14 >> 2];
 d35 = +HEAPF32[i14 + 16 >> 2];
 d37 = +HEAPF32[i14 + 32 >> 2];
 d32 = +HEAPF32[i14 + 4 >> 2];
 d25 = +HEAPF32[i14 + 20 >> 2];
 d34 = +HEAPF32[i14 + 36 >> 2];
 i31 = HEAP32[i8 >> 2] | 0;
 i29 = i31 * 3 | 0;
 i31 = i31 << 2;
 i23 = HEAP32[i9 >> 2] | 0;
 HEAPF32[i23 + (i29 << 2) >> 2] = d36;
 i27 = i29 + 1 | 0;
 HEAPF32[i23 + (i27 << 2) >> 2] = d35;
 i28 = i29 + 2 | 0;
 HEAPF32[i23 + (i28 << 2) >> 2] = d37;
 HEAPF32[i23 + (i31 << 2) >> 2] = d32;
 i16 = i31 | 1;
 HEAPF32[i23 + (i16 << 2) >> 2] = d25;
 i30 = i31 | 2;
 HEAPF32[i23 + (i30 << 2) >> 2] = d34;
 HEAPF32[i17 + (i29 << 2) >> 2] = -d36;
 HEAPF32[i17 + (i27 << 2) >> 2] = -d35;
 HEAPF32[i17 + (i28 << 2) >> 2] = -d37;
 HEAPF32[i17 + (i31 << 2) >> 2] = -d32;
 HEAPF32[i17 + (i16 << 2) >> 2] = -d25;
 i16 = HEAP32[i18 >> 2] | 0;
 HEAPF32[i16 + (i30 << 2) >> 2] = -d34;
 d33 = +HEAPF32[i13 + 8 >> 2];
 d38 = +HEAPF32[i13 + 24 >> 2];
 d26 = +HEAPF32[i13 + 40 >> 2];
 d24 = d11 * d26 - d10 * d38;
 d26 = d10 * d33 - d12 * d26;
 d33 = d12 * d38 - d11 * d33;
 i30 = HEAP32[i6 >> 2] | 0;
 HEAPF32[i30 + (i29 << 2) >> 2] = d22 * (d37 * d33 + (d36 * d24 + d35 * d26));
 HEAPF32[i30 + (i31 << 2) >> 2] = d22 * (d34 * d33 + (d32 * d24 + d25 * d26));
 if ((HEAP8[i2 + 708 | 0] | 0) == 0) {
  i15 = (HEAP8[i2 + 729 | 0] | 0) == 0;
  if (i15) {
   STACKTOP = i1;
   return;
  } else {
   i14 = 0;
   i13 = 0;
   d22 = 0.0;
  }
 } else {
  d22 = +HEAPF32[i2 + 700 >> 2] * +HEAPF32[i2 + 724 >> 2];
  i14 = 1;
  i15 = (HEAP8[i2 + 729 | 0] | 0) == 0;
  i13 = d22 > 0.0 ? 1 : 2;
 }
 i8 = (HEAP32[i8 >> 2] | 0) * 5 | 0;
 i18 = HEAP32[i9 >> 2] | 0;
 HEAPF32[i18 + (i8 << 2) >> 2] = d12;
 i17 = i8 + 1 | 0;
 HEAPF32[i18 + (i17 << 2) >> 2] = d11;
 i9 = i8 + 2 | 0;
 HEAPF32[i18 + (i9 << 2) >> 2] = d10;
 HEAPF32[i16 + (i8 << 2) >> 2] = -d12;
 HEAPF32[i16 + (i17 << 2) >> 2] = -d11;
 HEAPF32[i16 + (i9 << 2) >> 2] = -d10;
 i9 = i2 + 680 | 0;
 d25 = +__ZNK14btAngularLimit6getLowEv(i9);
 d26 = +__ZNK14btAngularLimit7getHighEv(i9);
 i9 = d25 == d26;
 i17 = HEAP32[i6 >> 2] | 0;
 HEAPF32[i17 + (i8 << 2) >> 2] = 0.0;
 i16 = i2 + 740 | 0;
 i18 = HEAP32[i16 >> 2] | 0;
 d24 = +HEAPF32[((i18 & 2 | 0) == 0 ? i7 : i2 + 752 | 0) >> 2];
 if (!(i14 & i9 | i15)) {
  if ((i18 & 4 | 0) != 0) {
   HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i8 << 2) >> 2] = +HEAPF32[i2 + 744 >> 2];
  }
  i30 = i2 + 672 | 0;
  d38 = +__ZN17btTypedConstraint14getMotorFactorEfffff(i2, +HEAPF32[i2 + 720 >> 2], d25, d26, +HEAPF32[i30 >> 2], d24 * +HEAPF32[i5 >> 2]);
  i17 = HEAP32[i6 >> 2] | 0;
  i31 = i17 + (i8 << 2) | 0;
  HEAPF32[i31 >> 2] = d38 * +HEAPF32[i30 >> 2] * +HEAPF32[i2 + 724 >> 2] + +HEAPF32[i31 >> 2];
  i31 = i2 + 676 | 0;
  HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i8 << 2) >> 2] = -+HEAPF32[i31 >> 2];
  HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i8 << 2) >> 2] = +HEAPF32[i31 >> 2];
 }
 if (!i14) {
  STACKTOP = i1;
  return;
 }
 i6 = i17 + (i8 << 2) | 0;
 HEAPF32[i6 >> 2] = +HEAPF32[i6 >> 2] + d22 * d24 * +HEAPF32[i5 >> 2];
 if ((HEAP32[i16 >> 2] & 1 | 0) != 0) {
  HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i8 << 2) >> 2] = +HEAPF32[i2 + 748 >> 2];
 }
 do {
  if (!i9) {
   i7 = (HEAP32[i5 + 36 >> 2] | 0) + (i8 << 2) | 0;
   if ((i13 | 0) == 1) {
    HEAPF32[i7 >> 2] = 0.0;
    HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i8 << 2) >> 2] = 3.4028234663852886e+38;
    break;
   } else {
    HEAPF32[i7 >> 2] = -3.4028234663852886e+38;
    HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i8 << 2) >> 2] = 0.0;
    break;
   }
  } else {
   HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i8 << 2) >> 2] = -3.4028234663852886e+38;
   HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i8 << 2) >> 2] = 3.4028234663852886e+38;
  }
 } while (0);
 d22 = +HEAPF32[i2 + 696 >> 2];
 do {
  if (d22 > 0.0) {
   d10 = d12 * +HEAPF32[i4 >> 2] + d11 * +HEAPF32[i4 + 4 >> 2] + d10 * +HEAPF32[i4 + 8 >> 2] - (d12 * +HEAPF32[i3 >> 2] + d11 * +HEAPF32[i3 + 4 >> 2] + d10 * +HEAPF32[i3 + 8 >> 2]);
   if ((i13 | 0) == 1) {
    if (!(d10 < 0.0)) {
     break;
    }
    d10 = -(d22 * d10);
    if (!(+HEAPF32[i6 >> 2] < d10)) {
     break;
    }
    HEAPF32[i6 >> 2] = d10;
    break;
   } else {
    if (!(d10 > 0.0)) {
     break;
    }
    d10 = -(d22 * d10);
    if (!(+HEAPF32[i6 >> 2] > d10)) {
     break;
    }
    HEAPF32[i6 >> 2] = d10;
    break;
   }
  }
 } while (0);
 HEAPF32[i6 >> 2] = +HEAPF32[i2 + 692 >> 2] * +HEAPF32[i6 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0;
 i1 = STACKTOP;
 HEAP32[i2 + 232 >> 2] = 2;
 i5 = i2 + 304 | 0;
 i3 = i2 + 536 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 0;
 HEAPF32[i3 >> 2] = 1.0;
 HEAPF32[i2 + 540 >> 2] = 1.0;
 HEAPF32[i2 + 544 >> 2] = 1.0;
 HEAPF32[i2 + 548 >> 2] = 0.0;
 i3 = i2 + 340 | 0;
 HEAPF32[i3 >> 2] = 1.0;
 i5 = i2 + 344 | 0;
 HEAPF32[i5 >> 2] = 1.0;
 i4 = i2 + 348 | 0;
 HEAPF32[i4 >> 2] = 1.0;
 i7 = i2 + 356 | 0;
 i13 = i2 + 360 | 0;
 i12 = i2 + 364 | 0;
 i8 = i2 + 368 | 0;
 i9 = i2 + 372 | 0;
 i11 = i2 + 376 | 0;
 i10 = i2 + 380 | 0;
 i16 = i2 + 404 | 0;
 i19 = i6 + 92 | 0;
 i18 = i2 + 352 | 0;
 i17 = i18 + 36 | 0;
 do {
  HEAP32[i18 >> 2] = 0;
  i18 = i18 + 4 | 0;
 } while ((i18 | 0) < (i17 | 0));
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 0;
 HEAP32[i16 + 20 >> 2] = 0;
 HEAP32[i16 + 24 >> 2] = 0;
 HEAP32[i16 + 28 >> 2] = 0;
 d15 = +HEAPF32[i19 >> 2];
 d14 = +HEAPF32[i6 + 96 >> 2];
 if (d15 < 0.0) {
  d15 = 0.0;
 } else {
  d15 = d15 > 1.0 ? 1.0 : d15;
 }
 HEAPF32[i2 + 436 >> 2] = d15;
 if (d14 < 0.0) {
  d14 = 0.0;
 } else {
  d14 = d14 > 1.0 ? 1.0 : d14;
 }
 HEAPF32[i2 + 440 >> 2] = d14;
 HEAPF32[i2 + 464 >> 2] = +HEAPF32[i6 + 108 >> 2];
 HEAPF32[i2 + 468 >> 2] = +HEAPF32[i6 + 112 >> 2];
 i16 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i2 + 472 >> 2] = i16;
 HEAP32[i2 + 600 >> 2] = 0;
 HEAP32[i2 + 604 >> 2] = 0;
 HEAP8[i2 + 444 | 0] = HEAP8[i6 + 116 | 0] | 0;
 HEAPF32[i2 + 448 >> 2] = +HEAPF32[i6 + 120 >> 2];
 HEAPF32[i2 + 452 >> 2] = +HEAPF32[i6 + 124 >> 2];
 HEAPF32[i2 + 456 >> 2] = +HEAPF32[i6 + 128 >> 2];
 HEAPF32[i2 + 460 >> 2] = +HEAPF32[i6 + 132 >> 2];
 if ((i16 | 0) == 0) {
  i19 = i2 + 4 | 0;
  i18 = i6 + 8 | 0;
  HEAP32[i19 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i19 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
  i18 = i2 + 20 | 0;
  i17 = i6 + 24 | 0;
  HEAP32[i18 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i18 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
  i17 = i2 + 36 | 0;
  i16 = i6 + 40 | 0;
  HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
  i16 = i2 + 52 | 0;
  i22 = i6 + 56 | 0;
  HEAP32[i16 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
 } else {
  i19 = i2 + 4 | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] & 127](i16, i19);
  i16 = i2 + 52 | 0;
  i18 = i2 + 20 | 0;
  i17 = i2 + 36 | 0;
 }
 i22 = i2 + 68 | 0;
 HEAP32[i22 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
 HEAP32[i22 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i22 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
 HEAP32[i22 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
 i22 = i2 + 84 | 0;
 HEAP32[i22 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i22 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i22 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i22 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 i22 = i2 + 100 | 0;
 HEAP32[i22 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
 HEAP32[i22 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i22 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 HEAP32[i22 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
 i17 = i2 + 116 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
 i16 = i2 + 132 | 0;
 i17 = i6 + 100 | 0;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 0;
 HEAP32[i16 + 20 >> 2] = 0;
 HEAP32[i16 + 24 >> 2] = 0;
 HEAP32[i16 + 28 >> 2] = 0;
 HEAPF32[i2 + 224 >> 2] = +HEAPF32[i17 >> 2];
 HEAPF32[i2 + 228 >> 2] = +HEAPF32[i6 + 104 >> 2];
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, HEAP32[i6 + 72 >> 2] | 0);
 i17 = HEAP32[111470] | 0;
 HEAP32[111470] = i17 + 1;
 HEAP32[i2 + 500 >> 2] = i17;
 d15 = +HEAPF32[i6 >> 2];
 i17 = i2 + 204 | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 if (d15 == 0.0) {
  HEAP32[i17 >> 2] = i16 | 1;
  HEAPF32[i2 + 336 >> 2] = 0.0;
  d14 = 0.0;
 } else {
  HEAP32[i17 >> 2] = i16 & -2;
  d14 = 1.0 / d15;
  HEAPF32[i2 + 336 >> 2] = d14;
 }
 d20 = d15 * +HEAPF32[i11 >> 2];
 d21 = d15 * +HEAPF32[i10 >> 2];
 HEAPF32[i7 >> 2] = d15 * +HEAPF32[i9 >> 2];
 HEAPF32[i13 >> 2] = d20;
 HEAPF32[i12 >> 2] = d21;
 HEAPF32[i8 >> 2] = 0.0;
 d15 = +HEAPF32[i6 + 76 >> 2];
 if (d15 != 0.0) {
  d15 = 1.0 / d15;
 } else {
  d15 = 0.0;
 }
 d20 = +HEAPF32[i6 + 80 >> 2];
 if (d20 != 0.0) {
  d20 = 1.0 / d20;
 } else {
  d20 = 0.0;
 }
 d21 = +HEAPF32[i6 + 84 >> 2];
 if (d21 != 0.0) {
  d21 = 1.0 / d21;
 } else {
  d21 = 0.0;
 }
 HEAPF32[i2 + 388 >> 2] = d15;
 HEAPF32[i2 + 392 >> 2] = d20;
 HEAPF32[i2 + 396 >> 2] = d21;
 HEAPF32[i2 + 400 >> 2] = 0.0;
 d37 = d14 * +HEAPF32[i5 >> 2];
 d31 = d14 * +HEAPF32[i4 >> 2];
 i19 = i2 + 552 | 0;
 HEAPF32[i19 >> 2] = d14 * +HEAPF32[i3 >> 2];
 i22 = i2 + 556 | 0;
 HEAPF32[i22 >> 2] = d37;
 i17 = i2 + 560 | 0;
 HEAPF32[i17 >> 2] = d31;
 i18 = i2 + 564 | 0;
 HEAPF32[i18 >> 2] = 0.0;
 d31 = +HEAPF32[i2 + 4 >> 2];
 d37 = d31 * d15;
 d30 = +HEAPF32[i2 + 8 >> 2];
 d36 = d30 * d20;
 d29 = +HEAPF32[i2 + 12 >> 2];
 d35 = d29 * d21;
 d28 = +HEAPF32[i2 + 20 >> 2];
 d34 = d15 * d28;
 d27 = +HEAPF32[i2 + 24 >> 2];
 d33 = d20 * d27;
 d26 = +HEAPF32[i2 + 28 >> 2];
 d32 = d21 * d26;
 d25 = +HEAPF32[i2 + 36 >> 2];
 d24 = d15 * d25;
 d23 = +HEAPF32[i2 + 40 >> 2];
 d14 = d20 * d23;
 d20 = +HEAPF32[i2 + 44 >> 2];
 d15 = d21 * d20;
 HEAPF32[i2 + 256 >> 2] = d31 * d37 + d30 * d36 + d29 * d35;
 HEAPF32[i2 + 260 >> 2] = d37 * d28 + d36 * d27 + d35 * d26;
 HEAPF32[i2 + 264 >> 2] = d37 * d25 + d36 * d23 + d35 * d20;
 HEAPF32[i2 + 268 >> 2] = 0.0;
 HEAPF32[i2 + 272 >> 2] = d31 * d34 + d30 * d33 + d29 * d32;
 HEAPF32[i2 + 276 >> 2] = d28 * d34 + d27 * d33 + d26 * d32;
 HEAPF32[i2 + 280 >> 2] = d34 * d25 + d33 * d23 + d32 * d20;
 HEAPF32[i2 + 284 >> 2] = 0.0;
 HEAPF32[i2 + 288 >> 2] = d31 * d24 + d30 * d14 + d29 * d15;
 HEAPF32[i2 + 292 >> 2] = d28 * d24 + d27 * d14 + d26 * d15;
 HEAPF32[i2 + 296 >> 2] = d25 * d24 + d23 * d14 + d20 * d15;
 HEAPF32[i2 + 300 >> 2] = 0.0;
 HEAP32[i2 + 496 >> 2] = 0;
 i13 = i2 + 504 | 0;
 i16 = i2 + 336 | 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i13 + 12 >> 2] = 0;
 HEAP32[i13 + 16 >> 2] = 0;
 HEAP32[i13 + 20 >> 2] = 0;
 HEAP32[i13 + 24 >> 2] = 0;
 HEAP32[i13 + 28 >> 2] = 0;
 d15 = +HEAPF32[i16 >> 2];
 d20 = d15 * +HEAPF32[i5 >> 2];
 d21 = d15 * +HEAPF32[i4 >> 2];
 HEAPF32[i19 >> 2] = +HEAPF32[i3 >> 2] * d15;
 HEAPF32[i22 >> 2] = d20;
 HEAPF32[i17 >> 2] = d21;
 i18 = i18 + 0 | 0;
 i17 = i18 + 36 | 0;
 do {
  HEAP32[i18 >> 2] = 0;
  i18 = i18 + 4 | 0;
 } while ((i18 | 0) < (i17 | 0));
 STACKTOP = i1;
 return;
}
function __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, d20 = 0.0, d21 = 0.0, i22 = 0, i23 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i23 = i2 + 64 | 0;
 i22 = i2 + 48 | 0;
 i19 = i2 + 32 | 0;
 i14 = i2 + 16 | 0;
 i3 = i2;
 switch (HEAP32[i4 + 4 >> 2] | 0) {
 case 8:
  {
   HEAP32[i1 + 0 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   STACKTOP = i2;
   return;
  }
 case 5:
  {
   i3 = HEAP32[i4 + 92 >> 2] | 0;
   i14 = HEAP32[i4 + 96 >> 2] | 0;
   d7 = +HEAPF32[i4 + 12 >> 2];
   d6 = +HEAPF32[i4 + 16 >> 2];
   d8 = +HEAPF32[i4 + 20 >> 2];
   d9 = +HEAPF32[i5 >> 2] * d7;
   d10 = +HEAPF32[i5 + 4 >> 2] * d6;
   d13 = +HEAPF32[i5 + 8 >> 2] * d8;
   if ((i14 | 0) > 0) {
    i5 = 0;
    d11 = -999999984306749400.0;
    i19 = -1;
    while (1) {
     d12 = d9 * +HEAPF32[i3 + (i5 << 4) >> 2] + d10 * +HEAPF32[i3 + (i5 << 4) + 4 >> 2] + d13 * +HEAPF32[i3 + (i5 << 4) + 8 >> 2];
     i4 = d12 > d11;
     i19 = i4 ? i5 : i19;
     i5 = i5 + 1 | 0;
     if ((i5 | 0) == (i14 | 0)) {
      break;
     } else {
      d11 = i4 ? d12 : d11;
     }
    }
   } else {
    i19 = -1;
   }
   d20 = d6 * +HEAPF32[i3 + (i19 << 4) + 4 >> 2];
   d21 = d8 * +HEAPF32[i3 + (i19 << 4) + 8 >> 2];
   HEAPF32[i1 >> 2] = d7 * +HEAPF32[i3 + (i19 << 4) >> 2];
   HEAPF32[i1 + 4 >> 2] = d20;
   HEAPF32[i1 + 8 >> 2] = d21;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 10:
  {
   d6 = +HEAPF32[i5 >> 2];
   d7 = +HEAPF32[i5 + 4 >> 2];
   d9 = +HEAPF32[i5 + 8 >> 2];
   i5 = HEAP32[i4 + 52 >> 2] | 0;
   d8 = +HEAPF32[i4 + (i5 << 2) + 28 >> 2];
   d10 = +HEAPF32[i4 + (((i5 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
   d11 = d6 * d6 + d7 * d7 + d9 * d9;
   if (d11 < 9999999747378752.0e-20) {
    d6 = 1.0;
    d7 = 0.0;
    d9 = 0.0;
   } else {
    d21 = 1.0 / +Math_sqrt(+d11);
    d6 = d6 * d21;
    d7 = d7 * d21;
    d9 = d9 * d21;
   }
   i22 = i14 + 4 | 0;
   i23 = i14 + 8 | 0;
   i19 = i14 + (i5 << 2) | 0;
   HEAP32[i14 + 0 >> 2] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
   HEAP32[i14 + 8 >> 2] = 0;
   HEAP32[i14 + 12 >> 2] = 0;
   HEAPF32[i19 >> 2] = d8;
   d13 = d10 * d6 * +HEAPF32[i4 + 12 >> 2];
   d11 = d10 * d7 * +HEAPF32[i4 + 16 >> 2];
   d10 = d10 * d9 * +HEAPF32[i4 + 20 >> 2];
   d15 = +HEAPF32[i4 + 44 >> 2];
   d18 = d6 * d15;
   d17 = d7 * d15;
   d15 = d9 * d15;
   d20 = d13 + +HEAPF32[i14 >> 2] - d18;
   d16 = d11 + +HEAPF32[i22 >> 2] - d17;
   d12 = d10 + +HEAPF32[i23 >> 2] - d15;
   d21 = d9 * d12 + (d6 * d20 + d7 * d16);
   if (!(d21 > -999999984306749400.0)) {
    d12 = 0.0;
    d16 = 0.0;
    d20 = 0.0;
    d21 = -999999984306749400.0;
   }
   i22 = i3 + 4 | 0;
   i23 = i3 + 8 | 0;
   d8 = -d8;
   i19 = i3 + (i5 << 2) | 0;
   HEAP32[i3 + 0 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   HEAPF32[i19 >> 2] = d8;
   d8 = d13 + +HEAPF32[i3 >> 2] - d18;
   d11 = d11 + +HEAPF32[i22 >> 2] - d17;
   d10 = d10 + +HEAPF32[i23 >> 2] - d15;
   i3 = d9 * d10 + (d6 * d8 + d7 * d11) > d21;
   HEAPF32[i1 >> 2] = i3 ? d8 : d20;
   HEAPF32[i1 + 4 >> 2] = i3 ? d11 : d16;
   HEAPF32[i1 + 8 >> 2] = i3 ? d10 : d12;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 4:
  {
   i3 = HEAP32[i4 + 104 >> 2] | 0;
   i14 = HEAP32[i4 + 96 >> 2] | 0;
   d6 = +HEAPF32[i4 + 12 >> 2];
   d7 = +HEAPF32[i4 + 16 >> 2];
   d8 = +HEAPF32[i4 + 20 >> 2];
   d10 = +HEAPF32[i5 >> 2] * d6;
   d9 = +HEAPF32[i5 + 4 >> 2] * d7;
   d11 = +HEAPF32[i5 + 8 >> 2] * d8;
   if ((i14 | 0) > 0) {
    i5 = 0;
    d12 = -999999984306749400.0;
    i19 = -1;
    while (1) {
     d13 = d10 * +HEAPF32[i3 + (i5 << 4) >> 2] + d9 * +HEAPF32[i3 + (i5 << 4) + 4 >> 2] + d11 * +HEAPF32[i3 + (i5 << 4) + 8 >> 2];
     i4 = d13 > d12;
     i19 = i4 ? i5 : i19;
     i5 = i5 + 1 | 0;
     if ((i5 | 0) == (i14 | 0)) {
      break;
     } else {
      d12 = i4 ? d13 : d12;
     }
    }
   } else {
    i19 = -1;
   }
   d20 = d7 * +HEAPF32[i3 + (i19 << 4) + 4 >> 2];
   d21 = d8 * +HEAPF32[i3 + (i19 << 4) + 8 >> 2];
   HEAPF32[i1 >> 2] = d6 * +HEAPF32[i3 + (i19 << 4) >> 2];
   HEAPF32[i1 + 4 >> 2] = d20;
   HEAPF32[i1 + 8 >> 2] = d21;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 1:
  {
   d20 = +HEAPF32[i5 >> 2];
   d21 = +HEAPF32[i5 + 4 >> 2];
   d6 = +HEAPF32[i5 + 8 >> 2];
   i3 = i4 + 56 | 0;
   d8 = d20 * +HEAPF32[i3 >> 2] + d21 * +HEAPF32[i3 + 4 >> 2] + d6 * +HEAPF32[i3 + 8 >> 2];
   d7 = d20 * +HEAPF32[i3 + 16 >> 2] + d21 * +HEAPF32[i3 + 20 >> 2] + d6 * +HEAPF32[i3 + 24 >> 2];
   d6 = d20 * +HEAPF32[i3 + 32 >> 2] + d21 * +HEAPF32[i3 + 36 >> 2] + d6 * +HEAPF32[i3 + 40 >> 2];
   if (d8 < d7) {
    i4 = d7 < d6 ? 2 : 1;
   } else {
    i4 = d8 < d6 ? 2 : 0;
   }
   d20 = +HEAPF32[i3 + (i4 << 4) + 4 >> 2];
   d21 = +HEAPF32[i3 + (i4 << 4) + 8 >> 2];
   HEAPF32[i1 >> 2] = +HEAPF32[i3 + (i4 << 4) >> 2];
   HEAPF32[i1 + 4 >> 2] = d20;
   HEAPF32[i1 + 8 >> 2] = d21;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 0:
  {
   i3 = i4 + 28 | 0;
   d6 = +HEAPF32[i3 >> 2];
   d7 = +HEAPF32[i3 + 4 >> 2];
   d7 = +HEAPF32[i5 + 4 >> 2] >= 0.0 ? d7 : -d7;
   d8 = +HEAPF32[i3 + 8 >> 2];
   d8 = +HEAPF32[i5 + 8 >> 2] >= 0.0 ? d8 : -d8;
   HEAPF32[i1 >> 2] = +HEAPF32[i5 >> 2] >= 0.0 ? d6 : -d6;
   HEAPF32[i1 + 4 >> 2] = d7;
   HEAPF32[i1 + 8 >> 2] = d8;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 13:
  {
   i14 = i4 + 28 | 0;
   HEAP32[i23 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
   HEAP32[i23 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i23 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i23 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
   HEAPF32[i22 >> 2] = +HEAPF32[i5 >> 2];
   d7 = +HEAPF32[i5 + 4 >> 2];
   HEAPF32[i22 + 4 >> 2] = d7;
   d6 = +HEAPF32[i5 + 8 >> 2];
   HEAPF32[i22 + 8 >> 2] = d6;
   HEAPF32[i22 + 12 >> 2] = 0.0;
   i14 = HEAP32[i4 + 52 >> 2] | 0;
   if ((i14 | 0) == 1) {
    i5 = 0;
    i4 = i14;
    i3 = 2;
   } else if ((i14 | 0) == 2) {
    d6 = d7;
    i5 = 0;
    i4 = i14;
    i3 = 1;
   } else {
    i5 = 1;
    i4 = 0;
    i3 = 2;
   }
   d7 = +HEAPF32[i23 + (i5 << 2) >> 2];
   d9 = +HEAPF32[i23 + (i14 << 2) >> 2];
   d8 = +HEAPF32[i22 + (i5 << 2) >> 2];
   d10 = +Math_sqrt(+(d8 * d8 + d6 * d6));
   if (d10 != 0.0) {
    d7 = d7 / d10;
    HEAPF32[i19 + (i5 << 2) >> 2] = d8 * d7;
    if (+HEAPF32[i22 + (i4 << 2) >> 2] < 0.0) {
     d9 = -d9;
    }
    HEAPF32[i19 + (i4 << 2) >> 2] = d9;
    HEAPF32[i19 + (i3 << 2) >> 2] = d7 * d6;
    HEAPF32[i1 >> 2] = +HEAPF32[i19 >> 2];
    HEAPF32[i1 + 4 >> 2] = +HEAPF32[i19 + 4 >> 2];
    HEAPF32[i1 + 8 >> 2] = +HEAPF32[i19 + 8 >> 2];
    HEAPF32[i1 + 12 >> 2] = 0.0;
    STACKTOP = i2;
    return;
   } else {
    HEAPF32[i19 + (i5 << 2) >> 2] = d7;
    if (+HEAPF32[i22 + (i4 << 2) >> 2] < 0.0) {
     d9 = -d9;
    }
    HEAPF32[i19 + (i4 << 2) >> 2] = d9;
    HEAPF32[i19 + (i3 << 2) >> 2] = 0.0;
    HEAPF32[i1 >> 2] = +HEAPF32[i19 >> 2];
    HEAPF32[i1 + 4 >> 2] = +HEAPF32[i19 + 4 >> 2];
    HEAPF32[i1 + 8 >> 2] = +HEAPF32[i19 + 8 >> 2];
    HEAPF32[i1 + 12 >> 2] = 0.0;
    STACKTOP = i2;
    return;
   }
  }
 default:
  {
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + 64 >> 2] & 63](i1, i4, i5);
   STACKTOP = i2;
   return;
  }
 }
}
function __ZNK23btStridingMeshInterface9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0, i29 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i4 + 28 | 0;
 i14 = i4 + 24 | 0;
 i5 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i16 = i4 + 4 | 0;
 i6 = i4;
 i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2) | 0;
 HEAP32[i1 + 20 >> 2] = i10;
 HEAP32[i1 >> 2] = 0;
 if ((i10 | 0) == 0) {
  i27 = i1 + 4 | 0;
  i26 = i2 + 4 | 0;
  d28 = +HEAPF32[i26 >> 2];
  HEAPF32[i27 >> 2] = d28;
  i27 = i2 + 8 | 0;
  d28 = +HEAPF32[i27 >> 2];
  i27 = i1 + 8 | 0;
  HEAPF32[i27 >> 2] = d28;
  i27 = i2 + 12 | 0;
  d28 = +HEAPF32[i27 >> 2];
  i27 = i1 + 12 | 0;
  HEAPF32[i27 >> 2] = d28;
  i27 = i2 + 16 | 0;
  d28 = +HEAPF32[i27 >> 2];
  i27 = i1 + 16 | 0;
  HEAPF32[i27 >> 2] = d28;
  STACKTOP = i4;
  return 457280;
 }
 i15 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, 32, i10) | 0;
 i10 = i15 + 8 | 0;
 i18 = HEAP32[i10 >> 2] | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, i18) | 0;
 i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2) | 0;
 if ((i17 | 0) > 0) {
  i19 = 0;
  while (1) {
   FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 3](i2, i7, i16, i11, i8, i14, i5, i6, i9, i19);
   HEAP32[i18 + 24 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i18 + 28 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i18 + 20 >> 2] = 0;
   i21 = i18 + 8 | 0;
   i24 = i18 + 12 | 0;
   i20 = i18 + 4 | 0;
   HEAP32[i18 + 0 >> 2] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
   HEAP32[i18 + 8 >> 2] = 0;
   HEAP32[i18 + 12 >> 2] = 0;
   i22 = HEAP32[i9 >> 2] | 0;
   if ((i22 | 0) == 5) {
    i21 = HEAP32[i6 >> 2] | 0;
    if ((i21 | 0) != 0) {
     i21 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, 4, i21) | 0;
     i23 = i21 + 8 | 0;
     i22 = HEAP32[i23 >> 2] | 0;
     HEAP32[i18 + 16 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, i22) | 0;
     if ((HEAP32[i6 >> 2] | 0) > 0) {
      i24 = 0;
      do {
       i26 = HEAP32[i14 >> 2] | 0;
       i27 = Math_imul(HEAP32[i5 >> 2] | 0, i24) | 0;
       HEAP8[i22 + (i24 << 2) | 0] = HEAP8[i26 + i27 | 0] | 0;
       HEAP8[i22 + (i24 << 2) + 1 | 0] = HEAP8[i26 + (i27 + 1) | 0] | 0;
       HEAP8[i22 + (i24 << 2) + 2 | 0] = HEAP8[i26 + (i27 + 2) | 0] | 0;
       i24 = i24 + 1 | 0;
      } while ((i24 | 0) < (HEAP32[i6 >> 2] | 0));
     }
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 31](i3, i21, 457192, 1497453121, HEAP32[i23 >> 2] | 0);
    }
   } else if ((i22 | 0) == 2) {
    i22 = HEAP32[i6 >> 2] | 0;
    if ((i22 | 0) != 0) {
     i22 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, 4, i22 * 3 | 0) | 0;
     i23 = i22 + 8 | 0;
     i24 = HEAP32[i23 >> 2] | 0;
     HEAP32[i21 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, i24) | 0;
     if ((HEAP32[i6 >> 2] | 0) > 0) {
      i25 = HEAP32[i14 >> 2] | 0;
      i21 = 0;
      do {
       i26 = Math_imul(HEAP32[i5 >> 2] | 0, i21) | 0;
       i27 = i21 * 3 | 0;
       HEAP32[i24 + (i27 << 2) >> 2] = HEAP32[i25 + i26 >> 2];
       HEAP32[i24 + (i27 + 1 << 2) >> 2] = HEAP32[i25 + (i26 + 4) >> 2];
       HEAP32[i24 + (i27 + 2 << 2) >> 2] = HEAP32[i25 + (i26 + 8) >> 2];
       i21 = i21 + 1 | 0;
      } while ((i21 | 0) < (HEAP32[i6 >> 2] | 0));
     }
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 31](i3, i22, 457144, 1497453121, HEAP32[i23 >> 2] | 0);
    }
   } else if ((i22 | 0) == 3 ? (i13 = HEAP32[i6 >> 2] | 0, (i13 | 0) != 0) : 0) {
    i22 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, 8, i13) | 0;
    i21 = i22 + 8 | 0;
    i23 = HEAP32[i21 >> 2] | 0;
    HEAP32[i24 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, i23) | 0;
    i24 = HEAP32[i6 >> 2] | 0;
    if ((i24 | 0) > 0) {
     i26 = HEAP32[i14 >> 2] | 0;
     i25 = HEAP32[i5 >> 2] | 0;
     i27 = 0;
     do {
      i29 = Math_imul(i25, i27) | 0;
      HEAP16[i23 + (i27 << 3) >> 1] = HEAP16[i26 + i29 >> 1] | 0;
      HEAP16[i23 + (i27 << 3) + 2 >> 1] = HEAP16[i26 + (i29 + 2) >> 1] | 0;
      HEAP16[i23 + (i27 << 3) + 4 >> 1] = HEAP16[i26 + (i29 + 4) >> 1] | 0;
      i27 = i27 + 1 | 0;
     } while ((i27 | 0) < (i24 | 0));
    }
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 31](i3, i22, 457160, 1497453121, HEAP32[i21 >> 2] | 0);
   }
   i21 = HEAP32[i11 >> 2] | 0;
   if ((i21 | 0) == 0) {
    i20 = HEAP32[i16 >> 2] | 0;
    if ((i20 | 0) != 0) {
     i26 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, 16, i20) | 0;
     i23 = i26 + 8 | 0;
     i22 = HEAP32[i23 >> 2] | 0;
     HEAP32[i18 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, i22) | 0;
     i21 = HEAP32[i16 >> 2] | 0;
     if ((i21 | 0) > 0) {
      i25 = HEAP32[i7 >> 2] | 0;
      i20 = HEAP32[i8 >> 2] | 0;
      i24 = 0;
      do {
       i29 = Math_imul(i20, i24) | 0;
       HEAPF32[i22 + (i24 << 4) >> 2] = +HEAPF32[i25 + i29 >> 2];
       HEAPF32[i22 + (i24 << 4) + 4 >> 2] = +HEAPF32[i25 + (i29 + 4) >> 2];
       HEAPF32[i22 + (i24 << 4) + 8 >> 2] = +HEAPF32[i25 + (i29 + 8) >> 2];
       i24 = i24 + 1 | 0;
      } while ((i24 | 0) < (i21 | 0));
     }
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 31](i3, i26, 457216, 1497453121, HEAP32[i23 >> 2] | 0);
    }
   } else if ((i21 | 0) == 1 ? (i12 = HEAP32[i16 >> 2] | 0, (i12 | 0) != 0) : 0) {
    i23 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, 32, i12) | 0;
    i21 = i23 + 8 | 0;
    i22 = HEAP32[i21 >> 2] | 0;
    HEAP32[i20 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, i22) | 0;
    i24 = HEAP32[i16 >> 2] | 0;
    if ((i24 | 0) > 0) {
     i26 = HEAP32[i7 >> 2] | 0;
     i25 = HEAP32[i8 >> 2] | 0;
     i20 = 0;
     do {
      i29 = Math_imul(i25, i20) | 0;
      HEAPF64[i22 + (i20 << 5) >> 3] = +HEAPF64[i26 + i29 >> 3];
      HEAPF64[i22 + (i20 << 5) + 8 >> 3] = +HEAPF64[i26 + (i29 + 8) >> 3];
      HEAPF64[i22 + (i20 << 5) + 16 >> 3] = +HEAPF64[i26 + (i29 + 16) >> 3];
      i20 = i20 + 1 | 0;
     } while ((i20 | 0) < (i24 | 0));
    }
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 31](i3, i23, 457240, 1497453121, HEAP32[i21 >> 2] | 0);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i19);
   i19 = i19 + 1 | 0;
   if ((i19 | 0) == (i17 | 0)) {
    i5 = i3;
    break;
   } else {
    i18 = i18 + 32 | 0;
   }
  }
 } else {
  i5 = i3;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 31](i3, i15, 457264, 1497453121, HEAP32[i10 >> 2] | 0);
 i29 = i1 + 4 | 0;
 i27 = i2 + 4 | 0;
 d28 = +HEAPF32[i27 >> 2];
 HEAPF32[i29 >> 2] = d28;
 i29 = i2 + 8 | 0;
 d28 = +HEAPF32[i29 >> 2];
 i29 = i1 + 8 | 0;
 HEAPF32[i29 >> 2] = d28;
 i29 = i2 + 12 | 0;
 d28 = +HEAPF32[i29 >> 2];
 i29 = i1 + 12 | 0;
 HEAPF32[i29 >> 2] = d28;
 i29 = i2 + 16 | 0;
 d28 = +HEAPF32[i29 >> 2];
 i29 = i1 + 16 | 0;
 HEAPF32[i29 >> 2] = d28;
 STACKTOP = i4;
 return 457280;
}
function __ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_(i1, i12, i13, i10, i11) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i14 = i2 + 152 | 0;
 i6 = i2 + 136 | 0;
 i9 = i2 + 128 | 0;
 i8 = i2 + 112 | 0;
 i7 = i2 + 96 | 0;
 i5 = i2 + 32 | 0;
 i3 = i2;
 i4 = i1 + 60 | 0;
 HEAP8[i4] = i13 & 1;
 if (i13) {
  __ZN14btQuantizedBvh21setQuantizationValuesERK9btVector3S2_f(i1, i10, i11, 1.0);
  HEAP32[i14 >> 2] = 455112;
  HEAP32[i14 + 4 >> 2] = i1 + 104;
  HEAP32[i14 + 8 >> 2] = i1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] & 63](i12, i14, i1 + 4 | 0, i1 + 20 | 0);
  i8 = HEAP32[i1 + 108 >> 2] | 0;
  i5 = i8 << 1;
  HEAP32[i6 + 0 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
  i7 = i1 + 128 | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  if ((i9 | 0) < (i5 | 0)) {
   i11 = i1 + 132 | 0;
   if ((HEAP32[i11 >> 2] | 0) < (i5 | 0)) {
    if ((i8 | 0) == 0) {
     i12 = 0;
     i13 = i9;
    } else {
     i12 = __Z22btAlignedAllocInternalji(i8 << 5, 16) | 0;
     i13 = HEAP32[i7 >> 2] | 0;
    }
    i10 = i1 + 136 | 0;
    if ((i13 | 0) > 0) {
     i14 = 0;
     do {
      i17 = i12 + (i14 << 4) | 0;
      i16 = (HEAP32[i10 >> 2] | 0) + (i14 << 4) | 0;
      HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
      i14 = i14 + 1 | 0;
     } while ((i14 | 0) != (i13 | 0));
    }
    i13 = HEAP32[i10 >> 2] | 0;
    i14 = i1 + 140 | 0;
    if ((i13 | 0) != 0) {
     if ((HEAP8[i14] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i13);
     }
     HEAP32[i10 >> 2] = 0;
    }
    HEAP8[i14] = 1;
    HEAP32[i10 >> 2] = i12;
    HEAP32[i11 >> 2] = i5;
   } else {
    i10 = i1 + 136 | 0;
   }
   do {
    i17 = (HEAP32[i10 >> 2] | 0) + (i9 << 4) | 0;
    HEAP32[i17 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
    HEAP32[i17 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i17 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAP32[i17 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i5 | 0));
  }
  HEAP32[i7 >> 2] = i5;
 } else {
  HEAP32[i9 >> 2] = 454976;
  HEAP32[i9 + 4 >> 2] = i1 + 64;
  HEAPF32[i8 >> 2] = -999999984306749400.0;
  HEAPF32[i8 + 4 >> 2] = -999999984306749400.0;
  HEAPF32[i8 + 8 >> 2] = -999999984306749400.0;
  HEAPF32[i8 + 12 >> 2] = 0.0;
  HEAPF32[i7 >> 2] = 999999984306749400.0;
  HEAPF32[i7 + 4 >> 2] = 999999984306749400.0;
  HEAPF32[i7 + 8 >> 2] = 999999984306749400.0;
  HEAPF32[i7 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] & 63](i12, i9, i8, i7);
  i8 = HEAP32[i1 + 68 >> 2] | 0;
  i11 = i5 + 0 | 0;
  i14 = i11 + 64 | 0;
  do {
   HEAP32[i11 >> 2] = 0;
   i11 = i11 + 4 | 0;
  } while ((i11 | 0) < (i14 | 0));
  i7 = i8 << 1;
  i6 = i1 + 88 | 0;
  i9 = HEAP32[i6 >> 2] | 0;
  if ((i9 | 0) < (i7 | 0)) {
   i10 = i1 + 92 | 0;
   if ((HEAP32[i10 >> 2] | 0) < (i7 | 0)) {
    if ((i8 | 0) == 0) {
     i13 = 0;
     i17 = i9;
    } else {
     i13 = __Z22btAlignedAllocInternalji(i8 << 7, 16) | 0;
     i17 = HEAP32[i6 >> 2] | 0;
    }
    i12 = i1 + 96 | 0;
    if ((i17 | 0) > 0) {
     i16 = 0;
     do {
      i11 = i13 + (i16 << 6) + 0 | 0;
      i15 = (HEAP32[i12 >> 2] | 0) + (i16 << 6) + 0 | 0;
      i14 = i11 + 64 | 0;
      do {
       HEAP32[i11 >> 2] = HEAP32[i15 >> 2];
       i11 = i11 + 4 | 0;
       i15 = i15 + 4 | 0;
      } while ((i11 | 0) < (i14 | 0));
      i16 = i16 + 1 | 0;
     } while ((i16 | 0) != (i17 | 0));
    }
    i11 = HEAP32[i12 >> 2] | 0;
    i14 = i1 + 100 | 0;
    if ((i11 | 0) != 0) {
     if ((HEAP8[i14] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i11);
     }
     HEAP32[i12 >> 2] = 0;
    }
    HEAP8[i14] = 1;
    HEAP32[i12 >> 2] = i13;
    HEAP32[i10 >> 2] = i7;
   } else {
    i12 = i1 + 96 | 0;
   }
   do {
    i11 = (HEAP32[i12 >> 2] | 0) + (i9 << 6) + 0 | 0;
    i15 = i5 + 0 | 0;
    i14 = i11 + 64 | 0;
    do {
     HEAP32[i11 >> 2] = HEAP32[i15 >> 2];
     i11 = i11 + 4 | 0;
     i15 = i15 + 4 | 0;
    } while ((i11 | 0) < (i14 | 0));
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i7 | 0));
  }
  HEAP32[i6 >> 2] = i7;
 }
 HEAP32[i1 + 56 >> 2] = 0;
 __ZN14btQuantizedBvh9buildTreeEii(i1, 0, i8);
 i5 = i1 + 152 | 0;
 if ((HEAP8[i4] | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == 0 : 0) {
  i4 = i1 + 156 | 0;
  if ((HEAP32[i4 >> 2] | 0) == 0) {
   i7 = __Z22btAlignedAllocInternalji(32, 16) | 0;
   i9 = HEAP32[i5 >> 2] | 0;
   i6 = i1 + 160 | 0;
   if ((i9 | 0) > 0) {
    i8 = 0;
    do {
     i17 = i7 + (i8 << 5) | 0;
     i16 = (HEAP32[i6 >> 2] | 0) + (i8 << 5) | 0;
     HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
     HEAP32[i17 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
     HEAP32[i17 + 20 >> 2] = HEAP32[i16 + 20 >> 2];
     HEAP32[i17 + 24 >> 2] = HEAP32[i16 + 24 >> 2];
     HEAP32[i17 + 28 >> 2] = HEAP32[i16 + 28 >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i9 | 0));
   }
   i8 = HEAP32[i6 >> 2] | 0;
   i9 = i1 + 164 | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i9] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i8);
    }
    HEAP32[i6 >> 2] = 0;
   }
   HEAP8[i9] = 1;
   HEAP32[i6 >> 2] = i7;
   HEAP32[i4 >> 2] = 1;
   i4 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
  } else {
   i4 = 1;
  }
  HEAP32[i5 >> 2] = i4;
  i4 = i1 + 160 | 0;
  i17 = HEAP32[i4 >> 2] | 0;
  HEAP32[i17 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i17 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i17 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i17 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
  HEAP32[i17 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
  HEAP32[i17 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
  i4 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i1 + 136 >> 2] | 0;
  HEAP16[i4 >> 1] = HEAP16[i3 >> 1] | 0;
  HEAP16[i4 + 2 >> 1] = HEAP16[i3 + 2 >> 1] | 0;
  HEAP16[i4 + 4 >> 1] = HEAP16[i3 + 4 >> 1] | 0;
  HEAP16[i4 + 6 >> 1] = HEAP16[i3 + 6 >> 1] | 0;
  HEAP16[i4 + 8 >> 1] = HEAP16[i3 + 8 >> 1] | 0;
  HEAP16[i4 + 10 >> 1] = HEAP16[i3 + 10 >> 1] | 0;
  HEAP32[i4 + 12 >> 2] = 0;
  i3 = HEAP32[i3 + 12 >> 2] | 0;
  HEAP32[i4 + 16 >> 2] = (i3 | 0) > -1 ? 1 : 0 - i3 | 0;
 }
 HEAP32[i1 + 168 >> 2] = HEAP32[i5 >> 2];
 i6 = i1 + 108 | 0;
 i5 = i1 + 116 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = i1 + 120 | 0;
 if ((i4 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i4);
  }
  HEAP32[i5 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i5 = i1 + 68 | 0;
 i4 = i1 + 76 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 80 | 0;
 if ((i6 | 0) == 0) {
  HEAP8[i3] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i17 = i1 + 72 | 0;
  HEAP32[i17 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i3] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i6);
 }
 HEAP32[i4 >> 2] = 0;
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 i17 = i1 + 72 | 0;
 HEAP32[i17 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN27btPolyhedralContactClipping18findSeparatingAxisERK18btConvexPolyhedronS2_RK11btTransformS5_R9btVector3(i6, i5, i3, i2, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, d33 = 0.0, d34 = 0.0, d35 = 0.0, i36 = 0, d37 = 0.0, i38 = 0, d39 = 0.0, d40 = 0.0, d41 = 0.0, i42 = 0, d43 = 0.0, d44 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i16 = i1 + 56 | 0;
 i12 = i1 + 48 | 0;
 i9 = i1 + 32 | 0;
 i10 = i1 + 24 | 0;
 i7 = i1 + 8 | 0;
 i8 = i1;
 HEAP32[114908] = (HEAP32[114908] | 0) + 1;
 i13 = HEAP32[i6 + 28 >> 2] | 0;
 L1 : do {
  if ((i13 | 0) > 0) {
   i15 = i6 + 36 | 0;
   i24 = i3 + 4 | 0;
   i23 = i3 + 8 | 0;
   i17 = i3 + 16 | 0;
   i19 = i3 + 20 | 0;
   i14 = i3 + 24 | 0;
   i11 = i3 + 32 | 0;
   i18 = i3 + 36 | 0;
   i25 = i3 + 40 | 0;
   i22 = i16 + 4 | 0;
   i21 = i16 + 8 | 0;
   i20 = i16 + 12 | 0;
   d33 = 3.4028234663852886e+38;
   i26 = 0;
   while (1) {
    i42 = HEAP32[i15 >> 2] | 0;
    d35 = +HEAPF32[i42 + (i26 * 56 | 0) + 40 >> 2];
    d37 = +HEAPF32[i42 + (i26 * 56 | 0) + 44 >> 2];
    d39 = +HEAPF32[i42 + (i26 * 56 | 0) + 48 >> 2];
    d40 = d35 * +HEAPF32[i17 >> 2] + d37 * +HEAPF32[i19 >> 2] + d39 * +HEAPF32[i14 >> 2];
    d41 = d35 * +HEAPF32[i11 >> 2] + d37 * +HEAPF32[i18 >> 2] + d39 * +HEAPF32[i25 >> 2];
    HEAPF32[i16 >> 2] = d35 * +HEAPF32[i3 >> 2] + d37 * +HEAPF32[i24 >> 2] + d39 * +HEAPF32[i23 >> 2];
    HEAPF32[i22 >> 2] = d40;
    HEAPF32[i21 >> 2] = d41;
    HEAPF32[i20 >> 2] = 0.0;
    if (!(__ZL11TestSepAxisRK18btConvexPolyhedronS1_RK11btTransformS4_RK9btVector3Rf(i6, i5, i3, i2, i16, i12) | 0)) {
     i2 = 0;
     break;
    }
    d37 = +HEAPF32[i12 >> 2];
    if (d37 < d33) {
     HEAP32[i4 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
    } else {
     d37 = d33;
    }
    i26 = i26 + 1 | 0;
    if ((i26 | 0) < (i13 | 0)) {
     d33 = d37;
    } else {
     break L1;
    }
   }
   STACKTOP = i1;
   return i2 | 0;
  } else {
   d37 = 3.4028234663852886e+38;
  }
 } while (0);
 i23 = HEAP32[i5 + 28 >> 2] | 0;
 L11 : do {
  if ((i23 | 0) > 0) {
   i11 = i5 + 36 | 0;
   i17 = i2 + 4 | 0;
   i16 = i2 + 8 | 0;
   i12 = i2 + 16 | 0;
   i22 = i2 + 20 | 0;
   i21 = i2 + 24 | 0;
   i20 = i2 + 32 | 0;
   i19 = i2 + 36 | 0;
   i18 = i2 + 40 | 0;
   i15 = i9 + 4 | 0;
   i14 = i9 + 8 | 0;
   i13 = i9 + 12 | 0;
   i24 = 0;
   while (1) {
    i42 = HEAP32[i11 >> 2] | 0;
    d34 = +HEAPF32[i42 + (i24 * 56 | 0) + 40 >> 2];
    d35 = +HEAPF32[i42 + (i24 * 56 | 0) + 44 >> 2];
    d39 = +HEAPF32[i42 + (i24 * 56 | 0) + 48 >> 2];
    d40 = d34 * +HEAPF32[i12 >> 2] + d35 * +HEAPF32[i22 >> 2] + d39 * +HEAPF32[i21 >> 2];
    d41 = d34 * +HEAPF32[i20 >> 2] + d35 * +HEAPF32[i19 >> 2] + d39 * +HEAPF32[i18 >> 2];
    HEAPF32[i9 >> 2] = d34 * +HEAPF32[i2 >> 2] + d35 * +HEAPF32[i17 >> 2] + d39 * +HEAPF32[i16 >> 2];
    HEAPF32[i15 >> 2] = d40;
    HEAPF32[i14 >> 2] = d41;
    HEAPF32[i13 >> 2] = 0.0;
    if (!(__ZL11TestSepAxisRK18btConvexPolyhedronS1_RK11btTransformS4_RK9btVector3Rf(i6, i5, i3, i2, i9, i10) | 0)) {
     i2 = 0;
     break;
    }
    d33 = +HEAPF32[i10 >> 2];
    if (d33 < d37) {
     HEAP32[i4 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
     d37 = d33;
    }
    i24 = i24 + 1 | 0;
    if ((i24 | 0) >= (i23 | 0)) {
     break L11;
    }
   }
   STACKTOP = i1;
   return i2 | 0;
  }
 } while (0);
 i25 = i6 + 48 | 0;
 i38 = HEAP32[i25 >> 2] | 0;
 L21 : do {
  if ((i38 | 0) > 0) {
   i24 = i6 + 56 | 0;
   i29 = i3 + 4 | 0;
   i31 = i3 + 8 | 0;
   i30 = i3 + 16 | 0;
   i9 = i3 + 20 | 0;
   i28 = i3 + 24 | 0;
   i27 = i3 + 32 | 0;
   i26 = i3 + 36 | 0;
   i10 = i3 + 40 | 0;
   i11 = i5 + 48 | 0;
   i14 = i5 + 56 | 0;
   i15 = i2 + 4 | 0;
   i16 = i2 + 8 | 0;
   i17 = i2 + 16 | 0;
   i18 = i2 + 20 | 0;
   i19 = i2 + 24 | 0;
   i20 = i2 + 32 | 0;
   i21 = i2 + 36 | 0;
   i22 = i2 + 40 | 0;
   i12 = i7 + 4 | 0;
   i13 = i7 + 8 | 0;
   i23 = i7 + 12 | 0;
   i36 = HEAP32[i11 >> 2] | 0;
   i32 = 0;
   L23 : while (1) {
    i42 = HEAP32[i24 >> 2] | 0;
    d40 = +HEAPF32[i42 + (i32 << 4) >> 2];
    d41 = +HEAPF32[i42 + (i32 << 4) + 4 >> 2];
    d35 = +HEAPF32[i42 + (i32 << 4) + 8 >> 2];
    d33 = d40 * +HEAPF32[i3 >> 2] + d41 * +HEAPF32[i29 >> 2] + d35 * +HEAPF32[i31 >> 2];
    d34 = d40 * +HEAPF32[i30 >> 2] + d41 * +HEAPF32[i9 >> 2] + d35 * +HEAPF32[i28 >> 2];
    d35 = d40 * +HEAPF32[i27 >> 2] + d41 * +HEAPF32[i26 >> 2] + d35 * +HEAPF32[i10 >> 2];
    if ((i36 | 0) > 0) {
     i36 = 0;
     do {
      i42 = HEAP32[i14 >> 2] | 0;
      d44 = +HEAPF32[i42 + (i36 << 4) >> 2];
      d39 = +HEAPF32[i42 + (i36 << 4) + 4 >> 2];
      d40 = +HEAPF32[i42 + (i36 << 4) + 8 >> 2];
      d41 = d44 * +HEAPF32[i2 >> 2] + d39 * +HEAPF32[i15 >> 2] + d40 * +HEAPF32[i16 >> 2];
      d43 = d44 * +HEAPF32[i17 >> 2] + d39 * +HEAPF32[i18 >> 2] + d40 * +HEAPF32[i19 >> 2];
      d40 = d44 * +HEAPF32[i20 >> 2] + d39 * +HEAPF32[i21 >> 2] + d40 * +HEAPF32[i22 >> 2];
      d39 = d34 * d40 - d35 * d43;
      d40 = d35 * d41 - d33 * d40;
      d41 = d33 * d43 - d34 * d41;
      HEAPF32[i7 >> 2] = d39;
      HEAPF32[i12 >> 2] = d40;
      HEAPF32[i13 >> 2] = d41;
      HEAPF32[i23 >> 2] = 0.0;
      if (!((!(+Math_abs(+d39) > 1.0e-6) ? !(+Math_abs(+d40) > 1.0e-6) : 0) ? !(+Math_abs(+d41) > 1.0e-6) : 0)) {
       d44 = 1.0 / +Math_sqrt(+(d39 * d39 + d40 * d40 + d41 * d41));
       HEAPF32[i7 >> 2] = d39 * d44;
       HEAPF32[i12 >> 2] = d40 * d44;
       HEAPF32[i13 >> 2] = d41 * d44;
       if (!(__ZL11TestSepAxisRK18btConvexPolyhedronS1_RK11btTransformS4_RK9btVector3Rf(i6, i5, i3, i2, i7, i8) | 0)) {
        i2 = 0;
        break L23;
       }
       d39 = +HEAPF32[i8 >> 2];
       if (d39 < d37) {
        HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
        HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
        d37 = d39;
       }
      }
      i36 = i36 + 1 | 0;
      i42 = HEAP32[i11 >> 2] | 0;
     } while ((i36 | 0) < (i42 | 0));
     i38 = HEAP32[i25 >> 2] | 0;
     i36 = i42;
    }
    i32 = i32 + 1 | 0;
    if ((i32 | 0) >= (i38 | 0)) {
     break L21;
    }
   }
   STACKTOP = i1;
   return i2 | 0;
  }
 } while (0);
 d34 = +HEAPF32[i4 >> 2];
 i5 = i4 + 4 | 0;
 d33 = +HEAPF32[i5 >> 2];
 i6 = i4 + 8 | 0;
 d35 = +HEAPF32[i6 >> 2];
 if (!((+HEAPF32[i2 + 48 >> 2] - +HEAPF32[i3 + 48 >> 2]) * d34 + (+HEAPF32[i2 + 52 >> 2] - +HEAPF32[i3 + 52 >> 2]) * d33 + (+HEAPF32[i2 + 56 >> 2] - +HEAPF32[i3 + 56 >> 2]) * d35 > 0.0)) {
  i42 = 1;
  STACKTOP = i1;
  return i42 | 0;
 }
 HEAPF32[i4 >> 2] = -d34;
 HEAPF32[i5 >> 2] = -d33;
 HEAPF32[i6 >> 2] = -d35;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 i42 = 1;
 STACKTOP = i1;
 return i42 | 0;
}
function __ZN27btContinuousConvexCollision20computeClosestPointsERK11btTransformS2_R16btPointCollector(i12, i11, i10, i2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, i50 = 0, i51 = 0, d52 = 0.0, d53 = 0.0, d54 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i8 = i7 + 200 | 0;
 i1 = i7 + 64 | 0;
 i5 = i7 + 48 | 0;
 i6 = i7 + 32 | 0;
 i3 = i7 + 16 | 0;
 i4 = i7;
 i9 = i12 + 16 | 0;
 if ((HEAP32[i9 >> 2] | 0) == 0) {
  i50 = HEAP32[i12 + 12 >> 2] | 0;
  i37 = HEAP32[i12 + 20 >> 2] | 0;
  d54 = +HEAPF32[i11 >> 2];
  d52 = +HEAPF32[i11 + 4 >> 2];
  d15 = +HEAPF32[i11 + 8 >> 2];
  d53 = +HEAPF32[i11 + 16 >> 2];
  d13 = +HEAPF32[i11 + 20 >> 2];
  d25 = +HEAPF32[i11 + 24 >> 2];
  d22 = +HEAPF32[i11 + 32 >> 2];
  d27 = +HEAPF32[i11 + 36 >> 2];
  d26 = +HEAPF32[i11 + 40 >> 2];
  d39 = +HEAPF32[i11 + 48 >> 2];
  d38 = +HEAPF32[i11 + 52 >> 2];
  d19 = +HEAPF32[i11 + 56 >> 2];
  i34 = i10 + 16 | 0;
  i30 = i10 + 32 | 0;
  i36 = i10 + 4 | 0;
  i33 = i10 + 20 | 0;
  i29 = i10 + 36 | 0;
  i35 = i10 + 8 | 0;
  i32 = i10 + 24 | 0;
  i28 = i10 + 40 | 0;
  d49 = +HEAPF32[i10 >> 2];
  d48 = +HEAPF32[i34 >> 2];
  d47 = +HEAPF32[i30 >> 2];
  d44 = +HEAPF32[i36 >> 2];
  d43 = +HEAPF32[i33 >> 2];
  d42 = +HEAPF32[i29 >> 2];
  d14 = +HEAPF32[i35 >> 2];
  d18 = +HEAPF32[i32 >> 2];
  d20 = +HEAPF32[i28 >> 2];
  i8 = i10 + 48 | 0;
  d16 = -+HEAPF32[i8 >> 2];
  i31 = i10 + 52 | 0;
  d17 = -+HEAPF32[i31 >> 2];
  i1 = i10 + 56 | 0;
  d21 = -+HEAPF32[i1 >> 2];
  d46 = d54 * d49 + d53 * d48 + d22 * d47;
  d45 = d52 * d49 + d13 * d48 + d27 * d47;
  d23 = d15 * d49 + d25 * d48 + d26 * d47;
  d41 = d54 * d44 + d53 * d43 + d22 * d42;
  d40 = d52 * d44 + d13 * d43 + d27 * d42;
  d24 = d15 * d44 + d25 * d43 + d26 * d42;
  d22 = d54 * d14 + d53 * d18 + d22 * d20;
  d27 = d52 * d14 + d13 * d18 + d27 * d20;
  d26 = d15 * d14 + d25 * d18 + d26 * d20;
  i51 = HEAP32[(HEAP32[i50 >> 2] | 0) + 60 >> 2] | 0;
  i9 = i37 + 48 | 0;
  d25 = -+HEAPF32[i9 >> 2];
  i11 = i37 + 52 | 0;
  d15 = -+HEAPF32[i11 >> 2];
  i12 = i37 + 56 | 0;
  d13 = -+HEAPF32[i12 >> 2];
  HEAPF32[i6 >> 2] = d46 * d25 + d41 * d15 + d22 * d13;
  HEAPF32[i6 + 4 >> 2] = d45 * d25 + d40 * d15 + d27 * d13;
  HEAPF32[i6 + 8 >> 2] = d23 * d25 + d24 * d15 + d26 * d13;
  HEAPF32[i6 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viii[i51 & 63](i5, i50, i6);
  d13 = +HEAPF32[i5 >> 2];
  d15 = +HEAPF32[i5 + 4 >> 2];
  d25 = +HEAPF32[i5 + 8 >> 2];
  d23 = d39 * d49 + d38 * d48 + d19 * d47 + (d49 * d16 + d48 * d17 + d47 * d21) + (d46 * d13 + d45 * d15 + d23 * d25);
  d24 = d39 * d44 + d38 * d43 + d19 * d42 + (d44 * d16 + d43 * d17 + d42 * d21) + (d41 * d13 + d40 * d15 + d24 * d25);
  d25 = d39 * d14 + d38 * d18 + d19 * d20 + (d14 * d16 + d18 * d17 + d20 * d21) + (d22 * d13 + d27 * d15 + d26 * d25);
  d26 = +HEAPF32[i9 >> 2];
  d15 = +HEAPF32[i11 >> 2];
  d27 = +HEAPF32[i12 >> 2];
  d13 = d27 * d25 + (d26 * d23 + d15 * d24) - +HEAPF32[i37 + 64 >> 2];
  d26 = d23 - d26 * d13;
  d15 = d24 - d15 * d13;
  d27 = d25 - d27 * d13;
  d25 = +HEAPF32[i10 >> 2];
  d24 = +HEAPF32[i36 >> 2];
  d23 = +HEAPF32[i35 >> 2];
  d22 = +HEAPF32[i34 >> 2];
  d21 = +HEAPF32[i33 >> 2];
  d20 = +HEAPF32[i32 >> 2];
  d17 = +HEAPF32[i31 >> 2] + (d26 * d22 + d15 * d21 + d27 * d20);
  d18 = +HEAPF32[i30 >> 2];
  d16 = +HEAPF32[i29 >> 2];
  d14 = +HEAPF32[i28 >> 2];
  d19 = +HEAPF32[i1 >> 2] + (d26 * d18 + d15 * d16 + d27 * d14);
  HEAPF32[i3 >> 2] = +HEAPF32[i8 >> 2] + (d23 * d27 + (d25 * d26 + d24 * d15));
  HEAPF32[i3 + 4 >> 2] = d17;
  HEAPF32[i3 + 8 >> 2] = d19;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  d19 = +HEAPF32[i9 >> 2];
  d17 = +HEAPF32[i11 >> 2];
  d15 = +HEAPF32[i12 >> 2];
  HEAPF32[i4 >> 2] = d25 * d19 + d24 * d17 + d23 * d15;
  HEAPF32[i4 + 4 >> 2] = d19 * d22 + d17 * d21 + d15 * d20;
  HEAPF32[i4 + 8 >> 2] = d19 * d18 + d17 * d16 + d15 * d14;
  HEAPF32[i4 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 7](i2, i4, i3, d13);
  STACKTOP = i7;
  return;
 } else {
  i51 = i12 + 4 | 0;
  __ZN22btVoronoiSimplexSolver5resetEv(HEAP32[i51 >> 2] | 0);
  i35 = HEAP32[i12 + 12 >> 2] | 0;
  i36 = HEAP32[i9 >> 2] | 0;
  i37 = HEAP32[i35 + 4 >> 2] | 0;
  i50 = HEAP32[i36 + 4 >> 2] | 0;
  d53 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i35 >> 2] | 0) + 44 >> 2] & 7](i35);
  i34 = HEAP32[i9 >> 2] | 0;
  d54 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i34 >> 2] | 0) + 44 >> 2] & 7](i34);
  __ZN17btGjkPairDetectorC2EPK13btConvexShapeS2_iiffP22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i8, i35, i36, i37, i50, d53, d54, HEAP32[i51 >> 2] | 0, HEAP32[i12 + 8 >> 2] | 0);
  HEAPF32[i1 + 128 >> 2] = 999999984306749400.0;
  HEAP32[i1 + 132 >> 2] = 0;
  HEAP32[i1 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i51 = i1 + 16 | 0;
  i50 = i11 + 16 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
  i51 = i1 + 32 | 0;
  i50 = i11 + 32 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
  i51 = i1 + 48 | 0;
  i50 = i11 + 48 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
  i51 = i1 + 64 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  i51 = i1 + 80 | 0;
  i50 = i10 + 16 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
  i51 = i1 + 96 | 0;
  i50 = i10 + 32 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
  i51 = i1 + 112 | 0;
  i50 = i10 + 48 | 0;
  HEAP32[i51 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
  HEAP32[i51 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
  __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i8, i1, i2, 0, 0);
  STACKTOP = i7;
  return;
 }
}
function __ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i25, i26, i14, i24, i20, i2) {
 i25 = i25 | 0;
 i26 = i26 | 0;
 i14 = i14 | 0;
 i24 = i24 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i27 = 0, i28 = 0, i29 = 0, d30 = 0.0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, i38 = 0, d39 = 0.0, d40 = 0.0, d41 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i3 = i1 + 256 | 0;
 i13 = i1 + 212 | 0;
 i11 = i1 + 136 | 0;
 i12 = i1;
 i31 = i25 + 4 | 0;
 __ZN22btVoronoiSimplexSolver5resetEv(HEAP32[i31 >> 2] | 0);
 i7 = i26 + 48 | 0;
 i10 = i14 + 48 | 0;
 i9 = i14 + 52 | 0;
 i8 = i26 + 52 | 0;
 i15 = i14 + 56 | 0;
 i14 = i26 + 56 | 0;
 i16 = i24 + 48 | 0;
 i17 = i20 + 48 | 0;
 i19 = i20 + 52 | 0;
 i18 = i24 + 52 | 0;
 i21 = i20 + 56 | 0;
 i23 = i24 + 56 | 0;
 d4 = +HEAPF32[i10 >> 2] - +HEAPF32[i7 >> 2] - (+HEAPF32[i17 >> 2] - +HEAPF32[i16 >> 2]);
 d5 = +HEAPF32[i9 >> 2] - +HEAPF32[i8 >> 2] - (+HEAPF32[i19 >> 2] - +HEAPF32[i18 >> 2]);
 d6 = +HEAPF32[i15 >> 2] - +HEAPF32[i14 >> 2] - (+HEAPF32[i21 >> 2] - +HEAPF32[i23 >> 2]);
 HEAP32[i13 >> 2] = 451112;
 i22 = i13 + 36 | 0;
 HEAPF32[i22 >> 2] = 999999984306749400.0;
 i20 = i13 + 40 | 0;
 HEAP8[i20] = 0;
 __ZN17btGjkPairDetectorC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i11, HEAP32[i25 + 8 >> 2] | 0, HEAP32[i25 + 12 >> 2] | 0, HEAP32[i31 >> 2] | 0, 0);
 HEAPF32[i12 + 128 >> 2] = 999999984306749400.0;
 HEAP32[i12 + 132 >> 2] = 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
 i31 = i12 + 16 | 0;
 i38 = i26 + 16 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i38 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
 i31 = i12 + 32 | 0;
 i26 = i26 + 32 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
 i26 = i12 + 48 | 0;
 HEAP32[i26 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i26 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i31 = i12 + 64 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
 i31 = i12 + 80 | 0;
 i38 = i24 + 16 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i38 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
 i31 = i12 + 96 | 0;
 i38 = i24 + 32 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i38 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
 i31 = i12 + 112 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
 __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i11, i12, i13, 0, 0);
 i38 = (HEAP8[i20] | 0) == 0;
 i25 = i13 + 20 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
 if (i38) {
  i38 = 0;
  STACKTOP = i1;
  return i38 | 0;
 }
 d40 = +HEAPF32[i22 >> 2];
 i29 = i13 + 4 | 0;
 d36 = +HEAPF32[i29 >> 2];
 i24 = i13 + 8 | 0;
 d37 = +HEAPF32[i24 >> 2];
 i28 = i13 + 12 | 0;
 d39 = +HEAPF32[i28 >> 2];
 i27 = i13 + 16 | 0;
 d30 = +HEAPF32[i27 >> 2];
 do {
  if (d40 > .0010000000474974513) {
   i32 = i12 + 52 | 0;
   i35 = i12 + 56 | 0;
   i34 = i12 + 116 | 0;
   i33 = i12 + 120 | 0;
   d41 = 0.0;
   i38 = 1;
   while (1) {
    if ((i38 | 0) > 32) {
     i2 = 0;
     i7 = 13;
     break;
    }
    d30 = d41 - d40 / (d6 * d39 + (d5 * d37 + d4 * d36));
    if (!(!(d30 < 0.0) & !(d30 > 1.0) & !(d30 <= d41))) {
     i2 = 0;
     i7 = 13;
     break;
    }
    FUNCTION_TABLE_vid[HEAP32[HEAP32[i2 >> 2] >> 2] & 15](i2, d30);
    d41 = 1.0 - d30;
    HEAPF32[i26 >> 2] = d41 * +HEAPF32[i7 >> 2] + d30 * +HEAPF32[i10 >> 2];
    HEAPF32[i32 >> 2] = d41 * +HEAPF32[i8 >> 2] + d30 * +HEAPF32[i9 >> 2];
    HEAPF32[i35 >> 2] = d41 * +HEAPF32[i14 >> 2] + d30 * +HEAPF32[i15 >> 2];
    HEAPF32[i31 >> 2] = d41 * +HEAPF32[i16 >> 2] + d30 * +HEAPF32[i17 >> 2];
    HEAPF32[i34 >> 2] = d41 * +HEAPF32[i18 >> 2] + d30 * +HEAPF32[i19 >> 2];
    HEAPF32[i33 >> 2] = d41 * +HEAPF32[i23 >> 2] + d30 * +HEAPF32[i21 >> 2];
    __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i11, i12, i13, 0, 0);
    if ((HEAP8[i20] | 0) == 0) {
     i2 = 0;
     i7 = 13;
     break;
    }
    d40 = +HEAPF32[i22 >> 2];
    if (d40 < 0.0) {
     i7 = 8;
     break;
    }
    HEAP32[i3 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
    d36 = +HEAPF32[i29 >> 2];
    d37 = +HEAPF32[i24 >> 2];
    d39 = +HEAPF32[i28 >> 2];
    if (d40 > .0010000000474974513) {
     d41 = d30;
     i38 = i38 + 1 | 0;
    } else {
     i7 = 10;
     break;
    }
   }
   if ((i7 | 0) == 8) {
    HEAPF32[i2 + 164 >> 2] = d30;
    d39 = +HEAPF32[i24 >> 2];
    d40 = +HEAPF32[i28 >> 2];
    d41 = +HEAPF32[i27 >> 2];
    HEAPF32[i2 + 132 >> 2] = +HEAPF32[i29 >> 2];
    HEAPF32[i2 + 136 >> 2] = d39;
    HEAPF32[i2 + 140 >> 2] = d40;
    HEAPF32[i2 + 144 >> 2] = d41;
    i38 = i2 + 148 | 0;
    HEAP32[i38 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
    HEAP32[i38 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
    HEAP32[i38 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
    HEAP32[i38 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
    i38 = 1;
    STACKTOP = i1;
    return i38 | 0;
   } else if ((i7 | 0) == 10) {
    d40 = +HEAPF32[i27 >> 2];
    break;
   } else if ((i7 | 0) == 13) {
    STACKTOP = i1;
    return i2 | 0;
   }
  } else {
   d40 = d30;
   d30 = 0.0;
  }
 } while (0);
 if (d6 * d39 + (d5 * d37 + d4 * d36) >= -+HEAPF32[i2 + 172 >> 2]) {
  i38 = 0;
  STACKTOP = i1;
  return i38 | 0;
 }
 HEAPF32[i2 + 164 >> 2] = d30;
 HEAPF32[i2 + 132 >> 2] = d36;
 HEAPF32[i2 + 136 >> 2] = d37;
 HEAPF32[i2 + 140 >> 2] = d39;
 HEAPF32[i2 + 144 >> 2] = d40;
 i38 = i2 + 148 | 0;
 HEAP32[i38 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i38 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i38 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i38 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i38 = 1;
 STACKTOP = i1;
 return i38 | 0;
}
function __ZN22btVoronoiSimplexSolver25closestPtPointTetrahedronERK9btVector3S2_S2_S2_S2_R25btSubSimplexClosestResult(i3, i2, i13, i8, i7, i9, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, i50 = 0, i51 = 0, i52 = 0, i53 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i6;
 i4 = i3 + 16 | 0;
 HEAP8[i4] = 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i5 = i1 + 16 | 0;
 HEAP8[i5] = HEAP8[i5] | 15;
 d24 = +HEAPF32[i8 >> 2];
 d27 = +HEAPF32[i13 >> 2];
 d43 = d24 - d27;
 d23 = +HEAPF32[i8 + 4 >> 2];
 d26 = +HEAPF32[i13 + 4 >> 2];
 d40 = d23 - d26;
 d25 = +HEAPF32[i8 + 8 >> 2];
 d28 = +HEAPF32[i13 + 8 >> 2];
 d45 = d25 - d28;
 d30 = +HEAPF32[i7 >> 2];
 d36 = d30 - d27;
 d34 = +HEAPF32[i7 + 4 >> 2];
 d39 = d34 - d26;
 d35 = +HEAPF32[i7 + 8 >> 2];
 d38 = d35 - d28;
 d49 = d40 * d38 - d45 * d39;
 d48 = d45 * d36 - d43 * d38;
 d46 = d43 * d39 - d40 * d36;
 d33 = +HEAPF32[i9 >> 2];
 d42 = d33 - d27;
 d32 = +HEAPF32[i9 + 4 >> 2];
 d41 = d32 - d26;
 d31 = +HEAPF32[i9 + 8 >> 2];
 d44 = d31 - d28;
 d47 = d42 * d49 + d41 * d48 + d46 * d44;
 if (d47 * d47 < 9.99999905104687e-9) {
  i29 = -1;
 } else {
  i29 = d47 * (d48 * (+HEAPF32[i2 + 4 >> 2] - d26) + d49 * (+HEAPF32[i2 >> 2] - d27) + d46 * (+HEAPF32[i2 + 8 >> 2] - d28)) < 0.0 | 0;
 }
 d46 = d39 * d44 - d38 * d41;
 d49 = d38 * d42 - d36 * d44;
 d48 = d36 * d41 - d39 * d42;
 d47 = d43 * d46 + d40 * d49 + d48 * d45;
 if (d47 * d47 < 9.99999905104687e-9) {
  i37 = -1;
 } else {
  i37 = d47 * (d49 * (+HEAPF32[i2 + 4 >> 2] - d26) + d46 * (+HEAPF32[i2 >> 2] - d27) + d48 * (+HEAPF32[i2 + 8 >> 2] - d28)) < 0.0 | 0;
 }
 d46 = d41 * d45 - d44 * d40;
 d44 = d44 * d43 - d42 * d45;
 d40 = d42 * d40 - d41 * d43;
 d36 = d36 * d46 + d39 * d44 + d40 * d38;
 if (d36 * d36 < 9.99999905104687e-9) {
  i50 = -1;
 } else {
  i50 = d36 * (d44 * (+HEAPF32[i2 + 4 >> 2] - d26) + d46 * (+HEAPF32[i2 >> 2] - d27) + d40 * (+HEAPF32[i2 + 8 >> 2] - d28)) < 0.0 | 0;
 }
 d47 = d33 - d24;
 d49 = d32 - d23;
 d46 = d31 - d25;
 d30 = d30 - d24;
 d48 = d34 - d23;
 d32 = d35 - d25;
 d31 = d49 * d32 - d46 * d48;
 d32 = d46 * d30 - d47 * d32;
 d30 = d47 * d48 - d49 * d30;
 d26 = (d27 - d24) * d31 + (d26 - d23) * d32 + d30 * (d28 - d25);
 if (d26 * d26 < 9.99999905104687e-9) {
  i51 = -1;
 } else {
  i51 = d26 * (d32 * (+HEAPF32[i2 + 4 >> 2] - d23) + d31 * (+HEAPF32[i2 >> 2] - d24) + d30 * (+HEAPF32[i2 + 8 >> 2] - d25)) < 0.0 | 0;
 }
 if ((i37 | i29 | i50 | i51 | 0) < 0) {
  HEAP8[i1 + 36 | 0] = 1;
  i53 = 0;
  STACKTOP = i6;
  return i53 | 0;
 }
 i52 = (i29 | 0) != 0;
 i53 = (i37 | 0) == 0;
 i37 = (i50 | 0) == 0;
 i29 = (i51 | 0) == 0;
 if (i53 & (i52 ^ 1) & i37 & i29) {
  i53 = 0;
  STACKTOP = i6;
  return i53 | 0;
 }
 if (i52 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(0, i2, i13, i8, i7, i3) | 0, d22 = +HEAPF32[i3 >> 2], d19 = +HEAPF32[i3 + 4 >> 2], d21 = +HEAPF32[i3 + 8 >> 2], d48 = d22 - +HEAPF32[i2 >> 2], d49 = d19 - +HEAPF32[i2 + 4 >> 2], d20 = d21 - +HEAPF32[i2 + 8 >> 2], d20 = d48 * d48 + d49 * d49 + d20 * d20, d20 < 3.4028234663852886e+38) : 0) {
  d48 = +HEAPF32[i3 + 12 >> 2];
  HEAPF32[i1 >> 2] = d22;
  HEAPF32[i1 + 4 >> 2] = d19;
  HEAPF32[i1 + 8 >> 2] = d21;
  HEAPF32[i1 + 12 >> 2] = d48;
  i52 = HEAP8[i4] | 0;
  HEAP8[i5] = i52 & 1 | HEAP8[i5] & -16 | i52 & 2 | i52 & 4;
  d48 = +HEAPF32[i3 + 24 >> 2];
  d49 = +HEAPF32[i3 + 28 >> 2];
  HEAPF32[i1 + 20 >> 2] = +HEAPF32[i3 + 20 >> 2];
  HEAPF32[i1 + 24 >> 2] = d48;
  HEAPF32[i1 + 28 >> 2] = d49;
  HEAPF32[i1 + 32 >> 2] = 0.0;
 } else {
  d20 = 3.4028234663852886e+38;
 }
 if (!i53 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(0, i2, i13, i7, i9, i3) | 0, d18 = +HEAPF32[i3 >> 2], d17 = +HEAPF32[i3 + 4 >> 2], d15 = +HEAPF32[i3 + 8 >> 2], d48 = d18 - +HEAPF32[i2 >> 2], d49 = d17 - +HEAPF32[i2 + 4 >> 2], d16 = d15 - +HEAPF32[i2 + 8 >> 2], d16 = d48 * d48 + d49 * d49 + d16 * d16, d16 < d20) : 0) {
  d48 = +HEAPF32[i3 + 12 >> 2];
  HEAPF32[i1 >> 2] = d18;
  HEAPF32[i1 + 4 >> 2] = d17;
  HEAPF32[i1 + 8 >> 2] = d15;
  HEAPF32[i1 + 12 >> 2] = d48;
  i52 = HEAP8[i4] | 0;
  i53 = i52 << 1 & 255;
  HEAP8[i5] = i53 & 4 | (i52 & 1 | HEAP8[i5] & -16) | i53 & 8;
  d48 = +HEAPF32[i3 + 24 >> 2];
  d49 = +HEAPF32[i3 + 28 >> 2];
  HEAPF32[i1 + 20 >> 2] = +HEAPF32[i3 + 20 >> 2];
  HEAPF32[i1 + 24 >> 2] = 0.0;
  HEAPF32[i1 + 28 >> 2] = d48;
  HEAPF32[i1 + 32 >> 2] = d49;
 } else {
  d16 = d20;
 }
 if (!i37 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(0, i2, i13, i9, i8, i3) | 0, d10 = +HEAPF32[i3 >> 2], d14 = +HEAPF32[i3 + 4 >> 2], d12 = +HEAPF32[i3 + 8 >> 2], d48 = d10 - +HEAPF32[i2 >> 2], d49 = d14 - +HEAPF32[i2 + 4 >> 2], d11 = d12 - +HEAPF32[i2 + 8 >> 2], d11 = d48 * d48 + d49 * d49 + d11 * d11, d11 < d16) : 0) {
  d48 = +HEAPF32[i3 + 12 >> 2];
  HEAPF32[i1 >> 2] = d10;
  HEAPF32[i1 + 4 >> 2] = d14;
  HEAPF32[i1 + 8 >> 2] = d12;
  HEAPF32[i1 + 12 >> 2] = d48;
  i53 = HEAP8[i4] | 0;
  HEAP8[i5] = (i53 & 255) >>> 1 & 2 | (i53 & 1 | HEAP8[i5] & -16) | i53 << 2 & 8;
  d48 = +HEAPF32[i3 + 28 >> 2];
  d49 = +HEAPF32[i3 + 24 >> 2];
  HEAPF32[i1 + 20 >> 2] = +HEAPF32[i3 + 20 >> 2];
  HEAPF32[i1 + 24 >> 2] = d48;
  HEAPF32[i1 + 28 >> 2] = 0.0;
  HEAPF32[i1 + 32 >> 2] = d49;
 } else {
  d11 = d16;
 }
 if (i29) {
  i53 = 1;
  STACKTOP = i6;
  return i53 | 0;
 }
 __ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(0, i2, i8, i9, i7, i3) | 0;
 d10 = +HEAPF32[i3 >> 2];
 d12 = +HEAPF32[i3 + 4 >> 2];
 d14 = +HEAPF32[i3 + 8 >> 2];
 d47 = d10 - +HEAPF32[i2 >> 2];
 d48 = d12 - +HEAPF32[i2 + 4 >> 2];
 d49 = d14 - +HEAPF32[i2 + 8 >> 2];
 if (!(d47 * d47 + d48 * d48 + d49 * d49 < d11)) {
  i53 = 1;
  STACKTOP = i6;
  return i53 | 0;
 }
 d47 = +HEAPF32[i3 + 12 >> 2];
 HEAPF32[i1 >> 2] = d10;
 HEAPF32[i1 + 4 >> 2] = d12;
 HEAPF32[i1 + 8 >> 2] = d14;
 HEAPF32[i1 + 12 >> 2] = d47;
 i53 = HEAP8[i4] | 0;
 HEAP8[i5] = i53 << 1 & 2 | HEAP8[i5] & -16 | i53 & 4 | i53 << 2 & 8;
 d47 = +HEAPF32[i3 + 20 >> 2];
 d48 = +HEAPF32[i3 + 28 >> 2];
 d49 = +HEAPF32[i3 + 24 >> 2];
 HEAPF32[i1 + 20 >> 2] = 0.0;
 HEAPF32[i1 + 24 >> 2] = d47;
 HEAPF32[i1 + 28 >> 2] = d48;
 HEAPF32[i1 + 32 >> 2] = d49;
 i53 = 1;
 STACKTOP = i6;
 return i53 | 0;
}
function _main(i21, i11) {
 i21 = i21 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i22 = 0, i23 = 0, d24 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 i1 = i7;
 i6 = i7 + 552 | 0;
 i5 = i7 + 472 | 0;
 i4 = i7 + 392 | 0;
 i3 = i7 + 312 | 0;
 i2 = i7 + 232 | 0;
 i9 = i7 + 152 | 0;
 i8 = i7 + 72 | 0;
 i12 = i7 + 40 | 0;
 i10 = i7 + 12 | 0;
 L1 : do {
  if ((i21 | 0) > 1) {
   i11 = HEAP8[HEAP32[i11 + 4 >> 2] | 0] | 0;
   switch (i11 | 0) {
   case 49:
    {
     i11 = 0;
     break L1;
    }
   case 51:
    {
     i20 = 4;
     break L1;
    }
   case 50:
    {
     i11 = 7;
     break L1;
    }
   case 48:
    {
     i23 = 0;
     STACKTOP = i7;
     return i23 | 0;
    }
   case 52:
    {
     i11 = 165;
     break L1;
    }
   case 53:
    {
     i11 = 245;
     break L1;
    }
   default:
    {
     HEAP32[i1 >> 2] = i11 + -48;
     _printf(443248, i1 | 0) | 0;
     i23 = -1;
     STACKTOP = i7;
     return i23 | 0;
    }
   }
  } else {
   i20 = 4;
  }
 } while (0);
 if ((i20 | 0) == 4) {
  i11 = 33;
 }
 HEAP8[445832] = 1;
 HEAPF32[i6 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i6 + 28 | 0] = 1;
 HEAP32[i6 + 24 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP8[i6 + 48 | 0] = 1;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 + 36 >> 2] = 0;
 HEAP32[i6 + 40 >> 2] = 0;
 HEAP32[i6 + 68 >> 2] = 1;
 HEAP32[i6 >> 2] = 443936;
 HEAPF32[i5 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i5 + 28 | 0] = 1;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP8[i5 + 48 | 0] = 1;
 HEAP32[i5 + 44 >> 2] = 0;
 HEAP32[i5 + 36 >> 2] = 0;
 HEAP32[i5 + 40 >> 2] = 0;
 HEAP32[i5 + 68 >> 2] = 2;
 HEAP32[i5 >> 2] = 443864;
 HEAPF32[i4 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i4 + 28 | 0] = 1;
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP8[i4 + 48 | 0] = 1;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 3;
 HEAP32[i4 >> 2] = 443792;
 HEAPF32[i3 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i3 + 28 | 0] = 1;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP8[i3 + 48 | 0] = 1;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 68 >> 2] = 4;
 HEAP32[i3 >> 2] = 443720;
 HEAPF32[i2 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i2 + 28 | 0] = 1;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP8[i2 + 48 | 0] = 1;
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 40 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 5;
 HEAP32[i2 >> 2] = 443648;
 HEAPF32[i9 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i9 + 28 | 0] = 1;
 HEAP32[i9 + 24 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP8[i9 + 48 | 0] = 1;
 HEAP32[i9 + 44 >> 2] = 0;
 HEAP32[i9 + 36 >> 2] = 0;
 HEAP32[i9 + 40 >> 2] = 0;
 HEAP32[i9 + 68 >> 2] = 6;
 HEAP32[i9 >> 2] = 443576;
 HEAPF32[i8 + 8 >> 2] = 999999984306749400.0;
 HEAP8[i8 + 28 | 0] = 1;
 HEAP32[i8 + 24 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP8[i8 + 48 | 0] = 1;
 HEAP32[i8 + 44 >> 2] = 0;
 HEAP32[i8 + 36 >> 2] = 0;
 HEAP32[i8 + 40 >> 2] = 0;
 HEAP32[i8 + 68 >> 2] = 7;
 HEAP32[i8 >> 2] = 443504;
 HEAP32[i12 >> 2] = i6;
 HEAP32[i12 + 4 >> 2] = i5;
 HEAP32[i12 + 8 >> 2] = i4;
 HEAP32[i12 + 12 >> 2] = i3;
 HEAP32[i12 + 16 >> 2] = i2;
 HEAP32[i12 + 20 >> 2] = i9;
 HEAP32[i12 + 24 >> 2] = i8;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 L13 : do {
  if ((i11 | 0) == 0) {
   i10 = i6;
   i20 = 1;
   while (1) {
    __ZN13BenchmarkDemo11initPhysicsEv(i10);
    __ZN13BenchmarkDemo11exitPhysicsEv(i10);
    if ((i20 | 0) >= 7) {
     d18 = 0.0;
     d17 = 0.0;
     d16 = 0.0;
     d15 = 0.0;
     d14 = 0.0;
     d13 = 0.0;
     d19 = 0.0;
     break L13;
    }
    i10 = HEAP32[i12 + (i20 << 2) >> 2] | 0;
    i20 = i20 + 1 | 0;
   }
  } else {
   i20 = i6;
   i23 = 0;
   while (1) {
    __ZN13BenchmarkDemo11initPhysicsEv(i20);
    i22 = i10 + (i23 << 2) | 0;
    i21 = 0;
    do {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i20 >> 2] | 0) + 16 >> 2] & 255](i20);
     d19 = +__ZN15CProfileManager20Get_Time_Since_ResetEv();
     HEAPF32[i22 >> 2] = d19 + +HEAPF32[i22 >> 2];
     i21 = i21 + 1 | 0;
    } while ((i21 | 0) < (i11 | 0));
    __ZN13BenchmarkDemo11exitPhysicsEv(i20);
    i23 = i23 + 1 | 0;
    if ((i23 | 0) >= 7) {
     break;
    }
    i20 = HEAP32[i12 + (i23 << 2) >> 2] | 0;
   }
   d18 = +HEAPF32[i10 + 4 >> 2];
   d17 = +HEAPF32[i10 + 8 >> 2];
   d16 = +HEAPF32[i10 + 12 >> 2];
   d15 = +HEAPF32[i10 + 16 >> 2];
   d14 = +HEAPF32[i10 + 20 >> 2];
   d13 = +HEAPF32[i10 + 24 >> 2];
   d19 = +HEAPF32[i10 >> 2];
  }
 } while (0);
 d24 = 1.0 / +(i11 | 0);
 HEAP32[i1 >> 2] = 443264;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d19 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 HEAP32[i1 >> 2] = 443280;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d18 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 HEAP32[i1 >> 2] = 443296;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d17 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 HEAP32[i1 >> 2] = 443312;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d16 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 HEAP32[i1 >> 2] = 443328;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d15 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 HEAP32[i1 >> 2] = 443344;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d14 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 HEAP32[i1 >> 2] = 443360;
 i23 = i1 + 4 | 0;
 HEAPF64[tempDoublePtr >> 3] = d13 * d24;
 HEAP32[i23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _printf(443376, i1 | 0) | 0;
 _puts(444440) | 0;
 __ZN13BenchmarkDemoD2Ev(i8);
 __ZN13BenchmarkDemoD2Ev(i9);
 __ZN13BenchmarkDemoD2Ev(i2);
 __ZN13BenchmarkDemoD2Ev(i3);
 __ZN13BenchmarkDemoD2Ev(i4);
 __ZN13BenchmarkDemoD2Ev(i5);
 __ZN13BenchmarkDemoD2Ev(i6);
 i23 = 0;
 STACKTOP = i7;
 return i23 | 0;
}
function __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallback13ProcessIslandEPP17btCollisionObjectiPP20btPersistentManifoldii(i1, i8, i9, i7, i6, i10) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i10 | 0) < 0) {
  if ((i4 | 0) == (0 - i6 | 0)) {
   STACKTOP = i2;
   return;
  }
  i20 = HEAP32[i1 + 8 >> 2] | 0;
  +FUNCTION_TABLE_diiiiiiiiiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] & 1](i20, i8, i9, i7, i6, HEAP32[i1 + 12 >> 2] | 0, i4, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 L8 : do {
  if ((i4 | 0) > 0) {
   i5 = HEAP32[i1 + 12 >> 2] | 0;
   i12 = 0;
   while (1) {
    i3 = i5 + (i12 << 2) | 0;
    i11 = HEAP32[i3 >> 2] | 0;
    i13 = HEAP32[(HEAP32[i11 + 24 >> 2] | 0) + 208 >> 2] | 0;
    if ((i13 | 0) > -1) {
     i11 = i13;
    } else {
     i11 = HEAP32[(HEAP32[i11 + 28 >> 2] | 0) + 208 >> 2] | 0;
    }
    i13 = i12 + 1 | 0;
    if ((i11 | 0) == (i10 | 0)) {
     break L8;
    }
    if ((i13 | 0) < (i4 | 0)) {
     i12 = i13;
    } else {
     i12 = i13;
     i3 = 0;
     break;
    }
   }
  } else {
   i12 = 0;
   i3 = 0;
  }
 } while (0);
 if ((i12 | 0) < (i4 | 0)) {
  i11 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = 0;
  do {
   i14 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
   i13 = HEAP32[(HEAP32[i14 + 24 >> 2] | 0) + 208 >> 2] | 0;
   if (!((i13 | 0) > -1)) {
    i13 = HEAP32[(HEAP32[i14 + 28 >> 2] | 0) + 208 >> 2] | 0;
   }
   i5 = ((i13 | 0) == (i10 | 0)) + i5 | 0;
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) < (i4 | 0));
 } else {
  i5 = 0;
 }
 i4 = i1 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i10 + 68 >> 2] | 0) < 2) {
  if ((i5 | 0) == (0 - i6 | 0)) {
   STACKTOP = i2;
   return;
  }
  i20 = HEAP32[i1 + 8 >> 2] | 0;
  +FUNCTION_TABLE_diiiiiiiiiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] & 1](i20, i8, i9, i7, i6, i3, i5, i10, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if ((i9 | 0) > 0) {
  i14 = i1 + 36 | 0;
  i15 = i1 + 40 | 0;
  i12 = i1 + 44 | 0;
  i11 = i1 + 48 | 0;
  i17 = HEAP32[i14 >> 2] | 0;
  i18 = HEAP32[i15 >> 2] | 0;
  i13 = 0;
  while (1) {
   i10 = i8 + (i13 << 2) | 0;
   if ((i17 | 0) == (i18 | 0)) {
    i16 = (i18 | 0) == 0 ? 1 : i18 << 1;
    if ((i18 | 0) < (i16 | 0)) {
     if ((i16 | 0) == 0) {
      i17 = 0;
     } else {
      i17 = __Z22btAlignedAllocInternalji(i16 << 2, 16) | 0;
      i18 = HEAP32[i14 >> 2] | 0;
     }
     if ((i18 | 0) > 0) {
      i20 = 0;
      do {
       i19 = i17 + (i20 << 2) | 0;
       if ((i19 | 0) != 0) {
        HEAP32[i19 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i20 << 2) >> 2];
       }
       i20 = i20 + 1 | 0;
      } while ((i20 | 0) != (i18 | 0));
     }
     i19 = HEAP32[i12 >> 2] | 0;
     if ((i19 | 0) != 0) {
      if ((HEAP8[i11] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i19);
       i18 = HEAP32[i14 >> 2] | 0;
      }
      HEAP32[i12 >> 2] = 0;
     }
     HEAP8[i11] = 1;
     HEAP32[i12 >> 2] = i17;
     HEAP32[i15 >> 2] = i16;
     i17 = i18;
    } else {
     i17 = i18;
     i16 = i18;
    }
   } else {
    i16 = i18;
   }
   i18 = (HEAP32[i12 >> 2] | 0) + (i17 << 2) | 0;
   if ((i18 | 0) != 0) {
    HEAP32[i18 >> 2] = HEAP32[i10 >> 2];
   }
   i17 = i17 + 1 | 0;
   HEAP32[i14 >> 2] = i17;
   i13 = i13 + 1 | 0;
   if ((i13 | 0) == (i9 | 0)) {
    break;
   } else {
    i18 = i16;
   }
  }
 }
 if ((i6 | 0) > 0) {
  i10 = i1 + 56 | 0;
  i11 = i1 + 60 | 0;
  i13 = i1 + 64 | 0;
  i12 = i1 + 68 | 0;
  i15 = HEAP32[i10 >> 2] | 0;
  i16 = HEAP32[i11 >> 2] | 0;
  i9 = 0;
  while (1) {
   i8 = i7 + (i9 << 2) | 0;
   if ((i15 | 0) == (i16 | 0)) {
    i14 = (i16 | 0) == 0 ? 1 : i16 << 1;
    if ((i16 | 0) < (i14 | 0)) {
     if ((i14 | 0) == 0) {
      i15 = 0;
     } else {
      i15 = __Z22btAlignedAllocInternalji(i14 << 2, 16) | 0;
      i16 = HEAP32[i10 >> 2] | 0;
     }
     if ((i16 | 0) > 0) {
      i18 = 0;
      do {
       i17 = i15 + (i18 << 2) | 0;
       if ((i17 | 0) != 0) {
        HEAP32[i17 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + (i18 << 2) >> 2];
       }
       i18 = i18 + 1 | 0;
      } while ((i18 | 0) != (i16 | 0));
     }
     i17 = HEAP32[i13 >> 2] | 0;
     if ((i17 | 0) != 0) {
      if ((HEAP8[i12] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i17);
       i16 = HEAP32[i10 >> 2] | 0;
      }
      HEAP32[i13 >> 2] = 0;
     }
     HEAP8[i12] = 1;
     HEAP32[i13 >> 2] = i15;
     HEAP32[i11 >> 2] = i14;
     i15 = i16;
    } else {
     i15 = i16;
     i14 = i16;
    }
   } else {
    i14 = i16;
   }
   i16 = (HEAP32[i13 >> 2] | 0) + (i15 << 2) | 0;
   if ((i16 | 0) != 0) {
    HEAP32[i16 >> 2] = HEAP32[i8 >> 2];
   }
   i15 = i15 + 1 | 0;
   HEAP32[i10 >> 2] = i15;
   i9 = i9 + 1 | 0;
   if ((i9 | 0) == (i6 | 0)) {
    break;
   } else {
    i16 = i14;
   }
  }
 }
 i8 = i1 + 76 | 0;
 if ((i5 | 0) > 0) {
  i9 = i1 + 80 | 0;
  i7 = i1 + 84 | 0;
  i6 = i1 + 88 | 0;
  i13 = HEAP32[i8 >> 2] | 0;
  i14 = HEAP32[i9 >> 2] | 0;
  i10 = 0;
  while (1) {
   i11 = i3 + (i10 << 2) | 0;
   if ((i13 | 0) == (i14 | 0)) {
    i12 = (i14 | 0) == 0 ? 1 : i14 << 1;
    if ((i14 | 0) < (i12 | 0)) {
     if ((i12 | 0) == 0) {
      i13 = 0;
     } else {
      i13 = __Z22btAlignedAllocInternalji(i12 << 2, 16) | 0;
      i14 = HEAP32[i8 >> 2] | 0;
     }
     if ((i14 | 0) > 0) {
      i15 = 0;
      do {
       i16 = i13 + (i15 << 2) | 0;
       if ((i16 | 0) != 0) {
        HEAP32[i16 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + (i15 << 2) >> 2];
       }
       i15 = i15 + 1 | 0;
      } while ((i15 | 0) != (i14 | 0));
     }
     i15 = HEAP32[i7 >> 2] | 0;
     if ((i15 | 0) != 0) {
      if ((HEAP8[i6] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i15);
       i14 = HEAP32[i8 >> 2] | 0;
      }
      HEAP32[i7 >> 2] = 0;
     }
     HEAP8[i6] = 1;
     HEAP32[i7 >> 2] = i13;
     HEAP32[i9 >> 2] = i12;
     i13 = i14;
    } else {
     i13 = i14;
     i12 = i14;
    }
   } else {
    i12 = i14;
   }
   i14 = (HEAP32[i7 >> 2] | 0) + (i13 << 2) | 0;
   if ((i14 | 0) != 0) {
    HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
   }
   i13 = i13 + 1 | 0;
   HEAP32[i8 >> 2] = i13;
   i10 = i10 + 1 | 0;
   if ((i10 | 0) == (i5 | 0)) {
    break;
   } else {
    i14 = i12;
   }
  }
 } else {
  i13 = HEAP32[i8 >> 2] | 0;
 }
 if (((HEAP32[i1 + 56 >> 2] | 0) + i13 | 0) <= (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallback18processConstraintsEv(i1);
 STACKTOP = i2;
 return;
}
function __ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i11, i8, i22, i13, i24, i3) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i22 = i22 | 0;
 i13 = i13 | 0;
 i24 = i24 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, i44 = 0, i45 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i16 = i1 + 292 | 0;
 i44 = i1 + 288 | 0;
 i12 = i1 + 272 | 0;
 i10 = i1 + 256 | 0;
 i4 = i1 + 240 | 0;
 i5 = i1 + 224 | 0;
 i2 = i1 + 208 | 0;
 i7 = i1 + 192 | 0;
 i14 = i1 + 128 | 0;
 i6 = i1 + 64 | 0;
 i15 = i1 + 48 | 0;
 i9 = i1;
 d19 = +HEAPF32[i22 + 52 >> 2] - +HEAPF32[i8 + 52 >> 2];
 d32 = +HEAPF32[i22 + 56 >> 2] - +HEAPF32[i8 + 56 >> 2];
 HEAPF32[i12 >> 2] = +HEAPF32[i22 + 48 >> 2] - +HEAPF32[i8 + 48 >> 2];
 i21 = i12 + 4 | 0;
 HEAPF32[i21 >> 2] = d19;
 i20 = i12 + 8 | 0;
 HEAPF32[i20 >> 2] = d32;
 HEAPF32[i12 + 12 >> 2] = 0.0;
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i8, i22, i16, i44);
 d32 = +HEAPF32[i44 >> 2];
 d19 = d32 * +HEAPF32[i16 + 4 >> 2];
 d18 = d32 * +HEAPF32[i16 + 8 >> 2];
 HEAPF32[i10 >> 2] = +HEAPF32[i16 >> 2] * d32;
 i23 = i10 + 4 | 0;
 HEAPF32[i23 >> 2] = d19;
 i22 = i10 + 8 | 0;
 HEAPF32[i22 >> 2] = d18;
 HEAPF32[i10 + 12 >> 2] = 0.0;
 d18 = +HEAPF32[i24 + 48 >> 2] - +HEAPF32[i13 + 48 >> 2];
 d19 = +HEAPF32[i24 + 52 >> 2] - +HEAPF32[i13 + 52 >> 2];
 d32 = +HEAPF32[i24 + 56 >> 2] - +HEAPF32[i13 + 56 >> 2];
 HEAPF32[i4 >> 2] = d18;
 HEAPF32[i4 + 4 >> 2] = d19;
 HEAPF32[i4 + 8 >> 2] = d32;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i13, i24, i16, i44);
 d38 = +HEAPF32[i44 >> 2];
 d39 = +HEAPF32[i16 >> 2] * d38;
 d17 = d38 * +HEAPF32[i16 + 4 >> 2];
 d38 = d38 * +HEAPF32[i16 + 8 >> 2];
 HEAPF32[i5 >> 2] = d39;
 HEAPF32[i5 + 4 >> 2] = d17;
 HEAPF32[i5 + 8 >> 2] = d38;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 i24 = HEAP32[i11 + 12 >> 2] | 0;
 d37 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i24 >> 2] | 0) + 16 >> 2] & 7](i24);
 i24 = HEAP32[i11 + 16 >> 2] | 0;
 if ((i24 | 0) == 0) {
  d40 = 0.0;
 } else {
  d40 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i24 >> 2] | 0) + 16 >> 2] & 7](i24);
 }
 d41 = +HEAPF32[i10 >> 2];
 d42 = +HEAPF32[i23 >> 2];
 d43 = +HEAPF32[i22 >> 2];
 d17 = d37 * +Math_sqrt(+(d41 * d41 + d42 * d42 + d43 * d43)) + d40 * +Math_sqrt(+(d39 * d39 + d17 * d17 + d38 * d38));
 d18 = d18 - +HEAPF32[i12 >> 2];
 d19 = d19 - +HEAPF32[i21 >> 2];
 d32 = d32 - +HEAPF32[i20 >> 2];
 if (d17 + +Math_sqrt(+(d18 * d18 + d19 * d19 + d32 * d32)) == 0.0) {
  i44 = 0;
  STACKTOP = i1;
  return i44 | 0;
 }
 HEAP32[i16 >> 2] = 451112;
 i44 = i16 + 36 | 0;
 HEAPF32[i44 >> 2] = 999999984306749400.0;
 i36 = i16 + 40 | 0;
 HEAP8[i36] = 0;
 __ZN27btContinuousConvexCollision20computeClosestPointsERK11btTransformS2_R16btPointCollector(i11, i8, i13, i16);
 i36 = (HEAP8[i36] | 0) == 0;
 i35 = i16 + 20 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i35 + 12 >> 2];
 if (i36) {
  i44 = 0;
  STACKTOP = i1;
  return i44 | 0;
 }
 i36 = i3 + 172 | 0;
 d37 = +HEAPF32[i16 + 4 >> 2];
 d38 = +HEAPF32[i16 + 8 >> 2];
 d39 = +HEAPF32[i16 + 12 >> 2];
 if (d17 + (d18 * d37 + d19 * d38 + d32 * d39) <= 1.1920928955078125e-7) {
  i44 = 0;
  STACKTOP = i1;
  return i44 | 0;
 }
 i35 = i3 + 168 | 0;
 i29 = i9 + 36 | 0;
 i24 = i9 + 40 | 0;
 i28 = i9 + 20 | 0;
 i25 = i9 + 4 | 0;
 i26 = i9 + 8 | 0;
 i27 = i9 + 12 | 0;
 i30 = i9 + 16 | 0;
 i20 = i14 + 48 | 0;
 i23 = i15 + 4 | 0;
 i22 = i15 + 8 | 0;
 i21 = i15 + 12 | 0;
 i34 = i7 + 4 | 0;
 i33 = i7 + 8 | 0;
 i31 = i7 + 12 | 0;
 d41 = +HEAPF32[i16 + 16 >> 2];
 d42 = +HEAPF32[i44 >> 2] + +HEAPF32[i36 >> 2];
 d40 = 0.0;
 i16 = 0;
 while (1) {
  if (!(d42 > .0010000000474974513)) {
   i4 = 18;
   break;
  }
  i44 = HEAP32[i35 >> 2] | 0;
  if ((i44 | 0) != 0) {
   i45 = HEAP32[(HEAP32[i44 >> 2] | 0) + 20 >> 2] | 0;
   HEAPF32[i7 >> 2] = 1.0;
   HEAPF32[i34 >> 2] = 1.0;
   HEAPF32[i33 >> 2] = 1.0;
   HEAPF32[i31 >> 2] = 0.0;
   FUNCTION_TABLE_viidi[i45 & 3](i44, i2, .20000000298023224, i7);
  }
  d37 = d17 + (d32 * d39 + (d19 * d38 + d18 * d37));
  if (d37 <= 1.1920928955078125e-7) {
   i2 = 0;
   i4 = 19;
   break;
  }
  d43 = d40 + d42 / d37;
  if (!(!(d43 < 0.0) & !(d43 > 1.0) & !(d43 <= d40))) {
   i2 = 0;
   i4 = 19;
   break;
  }
  __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i8, i12, i10, d43, i14);
  __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i13, i4, i5, d43, i6);
  i44 = HEAP32[i35 >> 2] | 0;
  if ((i44 | 0) != 0) {
   i45 = HEAP32[(HEAP32[i44 >> 2] | 0) + 20 >> 2] | 0;
   HEAPF32[i15 >> 2] = 1.0;
   HEAPF32[i23 >> 2] = 0.0;
   HEAPF32[i22 >> 2] = 0.0;
   HEAPF32[i21 >> 2] = 0.0;
   FUNCTION_TABLE_viidi[i45 & 3](i44, i20, .20000000298023224, i15);
  }
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i3 >> 2] >> 2] & 15](i3, d43);
  HEAP32[i9 >> 2] = 451112;
  HEAPF32[i29 >> 2] = 999999984306749400.0;
  HEAP8[i24] = 0;
  __ZN27btContinuousConvexCollision20computeClosestPointsERK11btTransformS2_R16btPointCollector(i11, i14, i6, i9);
  if ((HEAP8[i24] | 0) == 0) {
   i4 = 16;
   break;
  }
  d42 = +HEAPF32[i29 >> 2] + +HEAPF32[i36 >> 2];
  HEAP32[i2 + 0 >> 2] = HEAP32[i28 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
  i44 = i16 + 1 | 0;
  if ((i16 | 0) > 63) {
   i4 = 17;
   break;
  } else {
   d37 = +HEAPF32[i25 >> 2];
   d38 = +HEAPF32[i26 >> 2];
   d39 = +HEAPF32[i27 >> 2];
   d41 = +HEAPF32[i30 >> 2];
   d40 = d43;
   i16 = i44;
  }
 }
 if ((i4 | 0) == 16) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, -1, i16);
  i45 = 0;
  STACKTOP = i1;
  return i45 | 0;
 } else if ((i4 | 0) == 17) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, -2, i44);
  i45 = 0;
  STACKTOP = i1;
  return i45 | 0;
 } else if ((i4 | 0) == 18) {
  HEAPF32[i3 + 164 >> 2] = d40;
  HEAPF32[i3 + 132 >> 2] = d37;
  HEAPF32[i3 + 136 >> 2] = d38;
  HEAPF32[i3 + 140 >> 2] = d39;
  HEAPF32[i3 + 144 >> 2] = d41;
  i45 = i3 + 148 | 0;
  HEAP32[i45 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i45 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i45 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i45 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i45 = 1;
  STACKTOP = i1;
  return i45 | 0;
 } else if ((i4 | 0) == 19) {
  STACKTOP = i1;
  return i2 | 0;
 }
 return 0;
}
function __ZN35btSequentialImpulseConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i2, i11, i1, i3, i10, i8, i4, i5, i6, i9, i7) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0;
 i1 = STACKTOP;
 i7 = i2 + 8 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i3 = i2 + 48 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i8 = i6 + 60 | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 if ((i12 & 1 | 0) != 0 ? (i11 & 7 | 0) == 0 : 0) {
  if ((i10 | 0) > 0) {
   i15 = HEAP32[i2 + 76 >> 2] | 0;
   i16 = i2 + 124 | 0;
   i14 = HEAP32[i16 >> 2] | 0;
   i13 = 0;
   do {
    i12 = i15 + (i13 << 2) | 0;
    i11 = HEAP32[i12 >> 2] | 0;
    i13 = i13 + 1 | 0;
    i14 = (Math_imul(i14, 1664525) | 0) + 1013904223 | 0;
    if (i13 >>> 0 < 65537) {
     i17 = i14 >>> 16 ^ i14;
     if (i13 >>> 0 < 257) {
      i17 = i17 >>> 8 ^ i17;
      if (i13 >>> 0 < 17) {
       i17 = i17 >>> 4 ^ i17;
       if (i13 >>> 0 < 5) {
        i17 = i17 >>> 2 ^ i17;
        if (i13 >>> 0 < 3) {
         i17 = i17 >>> 1 ^ i17;
        }
       }
      }
     }
    } else {
     i17 = i14;
    }
    i17 = i15 + (((i17 >>> 0) % (i13 >>> 0) | 0) << 2) | 0;
    HEAP32[i12 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i17 >> 2] = i11;
   } while ((i13 | 0) != (i10 | 0));
   HEAP32[i16 >> 2] = i14;
  }
  if ((i9 | 0) > 0) {
   i14 = HEAP32[i2 + 96 >> 2] | 0;
   i15 = i2 + 124 | 0;
   i13 = HEAP32[i15 >> 2] | 0;
   i12 = 0;
   do {
    i11 = i14 + (i12 << 2) | 0;
    i10 = HEAP32[i11 >> 2] | 0;
    i12 = i12 + 1 | 0;
    i13 = (Math_imul(i13, 1664525) | 0) + 1013904223 | 0;
    if (i12 >>> 0 < 65537) {
     i16 = i13 >>> 16 ^ i13;
     if (i12 >>> 0 < 257) {
      i16 = i16 >>> 8 ^ i16;
      if (i12 >>> 0 < 17) {
       i16 = i16 >>> 4 ^ i16;
       if (i12 >>> 0 < 5) {
        i16 = i16 >>> 2 ^ i16;
        if (i12 >>> 0 < 3) {
         i16 = i16 >>> 1 ^ i16;
        }
       }
      }
     }
    } else {
     i16 = i13;
    }
    i17 = i14 + (((i16 >>> 0) % (i12 >>> 0) | 0) << 2) | 0;
    HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i17 >> 2] = i10;
   } while ((i12 | 0) != (i9 | 0));
   HEAP32[i15 >> 2] = i13;
  }
  i12 = HEAP32[i8 >> 2] | 0;
 }
 i8 = i2 + 28 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) > 0;
 if ((i12 & 256 | 0) == 0) {
  if (i9) {
   i9 = i2 + 36 | 0;
   i10 = 0;
   do {
    i17 = HEAP32[i9 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i17 + (i10 * 136 | 0) + 104 >> 2] | 0, HEAP32[i17 + (i10 * 136 | 0) + 108 >> 2] | 0, i17 + (i10 * 136 | 0) | 0);
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) < (HEAP32[i8 >> 2] | 0));
  }
  if ((i5 | 0) > 0) {
   i8 = i6 + 12 | 0;
   i6 = 0;
   do {
    i17 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
    FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] & 7](i17, HEAP32[i17 + 24 >> 2] | 0, HEAP32[i17 + 28 >> 2] | 0, +HEAPF32[i8 >> 2]);
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i5 | 0));
  }
  i6 = HEAP32[i7 >> 2] | 0;
  if ((i6 | 0) > 0) {
   i7 = i2 + 76 | 0;
   i5 = i2 + 16 | 0;
   i4 = 0;
   do {
    i17 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i16 = HEAP32[i5 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i16 + (i17 * 136 | 0) + 104 >> 2] | 0, HEAP32[i16 + (i17 * 136 | 0) + 108 >> 2] | 0, i16 + (i17 * 136 | 0) | 0);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i6 | 0));
  }
  i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) <= 0) {
   STACKTOP = i1;
   return 0.0;
  }
  i4 = i2 + 96 | 0;
  i5 = i2 + 56 | 0;
  i2 = i2 + 16 | 0;
  i6 = 0;
  do {
   i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i6 << 2) >> 2] | 0;
   i8 = HEAP32[i5 >> 2] | 0;
   d18 = +HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i8 + (i7 * 136 | 0) + 100 >> 2] | 0) * 136 | 0) + 84 >> 2];
   if (d18 > 0.0) {
    d18 = d18 * +HEAPF32[i8 + (i7 * 136 | 0) + 88 >> 2];
    HEAPF32[i8 + (i7 * 136 | 0) + 124 >> 2] = -d18;
    HEAPF32[i8 + (i7 * 136 | 0) + 128 >> 2] = d18;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i8 + (i7 * 136 | 0) + 104 >> 2] | 0, HEAP32[i8 + (i7 * 136 | 0) + 108 >> 2] | 0, i8 + (i7 * 136 | 0) | 0);
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i3 | 0));
  STACKTOP = i1;
  return 0.0;
 } else {
  if (i9) {
   i9 = i2 + 36 | 0;
   i10 = 0;
   do {
    i17 = HEAP32[i9 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i17 + (i10 * 136 | 0) + 104 >> 2] | 0, HEAP32[i17 + (i10 * 136 | 0) + 108 >> 2] | 0, i17 + (i10 * 136 | 0) | 0);
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) < (HEAP32[i8 >> 2] | 0));
  }
  if ((i5 | 0) > 0) {
   i8 = i6 + 12 | 0;
   i6 = 0;
   do {
    i17 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
    FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] & 7](i17, HEAP32[i17 + 24 >> 2] | 0, HEAP32[i17 + 28 >> 2] | 0, +HEAPF32[i8 >> 2]);
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i5 | 0));
  }
  i7 = HEAP32[i7 >> 2] | 0;
  if ((i7 | 0) > 0) {
   i5 = i2 + 76 | 0;
   i4 = i2 + 16 | 0;
   i6 = 0;
   do {
    i17 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i16 = HEAP32[i4 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i16 + (i17 * 136 | 0) + 104 >> 2] | 0, HEAP32[i16 + (i17 * 136 | 0) + 108 >> 2] | 0, i16 + (i17 * 136 | 0) | 0);
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i7 | 0));
  }
  i5 = HEAP32[i3 >> 2] | 0;
  if ((i5 | 0) <= 0) {
   STACKTOP = i1;
   return 0.0;
  }
  i4 = i2 + 96 | 0;
  i3 = i2 + 56 | 0;
  i2 = i2 + 16 | 0;
  i8 = 0;
  do {
   i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i8 << 2) >> 2] | 0;
   i6 = HEAP32[i3 >> 2] | 0;
   d18 = +HEAPF32[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i6 + (i7 * 136 | 0) + 100 >> 2] | 0) * 136 | 0) + 84 >> 2];
   if (d18 > 0.0) {
    d18 = d18 * +HEAPF32[i6 + (i7 * 136 | 0) + 88 >> 2];
    HEAPF32[i6 + (i7 * 136 | 0) + 124 >> 2] = -d18;
    HEAPF32[i6 + (i7 * 136 | 0) + 128 >> 2] = d18;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i6 + (i7 * 136 | 0) + 104 >> 2] | 0, HEAP32[i6 + (i7 * 136 | 0) + 108 >> 2] | 0, i6 + (i7 * 136 | 0) | 0);
   }
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i5 | 0));
  STACKTOP = i1;
  return 0.0;
 }
 return 0.0;
}
function __ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_EffRN36btDiscreteCollisionDetectorInterface6ResultE(i8, i13, i10, i18, d6, d4, i7) {
 i8 = i8 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i18 = i18 | 0;
 d6 = +d6;
 d4 = +d4;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i15 = i2 + 48 | 0;
 i11 = i2 + 32 | 0;
 i12 = i2 + 16 | 0;
 i5 = i2;
 i3 = i15 + 16 | 0;
 HEAP8[i3] = 1;
 i1 = i15 + 12 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 i14 = i15 + 8 | 0;
 HEAP32[i14 >> 2] = 0;
 i9 = HEAP32[i18 + 4 >> 2] | 0;
 if ((i9 | 0) > 0) {
  i16 = __Z22btAlignedAllocInternalji(i9 << 4, 16) | 0;
  HEAP8[i3] = 1;
  HEAP32[i1 >> 2] = i16;
  HEAP32[i14 >> 2] = i9;
 } else {
  i16 = 0;
 }
 i17 = HEAP32[i13 + 28 >> 2] | 0;
 if ((i17 | 0) > 0) {
  i19 = HEAP32[i13 + 36 >> 2] | 0;
  d41 = +HEAPF32[i10 >> 2];
  d42 = +HEAPF32[i10 + 4 >> 2];
  d43 = +HEAPF32[i10 + 8 >> 2];
  d45 = +HEAPF32[i10 + 16 >> 2];
  d46 = +HEAPF32[i10 + 20 >> 2];
  d53 = +HEAPF32[i10 + 24 >> 2];
  d51 = +HEAPF32[i10 + 32 >> 2];
  d50 = +HEAPF32[i10 + 36 >> 2];
  d49 = +HEAPF32[i10 + 40 >> 2];
  d44 = +HEAPF32[i8 >> 2];
  d40 = +HEAPF32[i8 + 4 >> 2];
  d48 = +HEAPF32[i8 + 8 >> 2];
  i9 = -1;
  d47 = 3.4028234663852886e+38;
  i20 = 0;
  while (1) {
   d55 = +HEAPF32[i19 + (i20 * 56 | 0) + 40 >> 2];
   d54 = +HEAPF32[i19 + (i20 * 56 | 0) + 44 >> 2];
   d52 = +HEAPF32[i19 + (i20 * 56 | 0) + 48 >> 2];
   d52 = (d55 * d41 + d54 * d42 + d52 * d43) * d44 + (d55 * d45 + d54 * d46 + d52 * d53) * d40 + (d55 * d51 + d54 * d50 + d52 * d49) * d48;
   i14 = d52 < d47;
   i9 = i14 ? i20 : i9;
   i20 = i20 + 1 | 0;
   if ((i20 | 0) >= (i17 | 0)) {
    break;
   } else {
    d47 = i14 ? d52 : d47;
   }
  }
  if ((i9 | 0) >= 0) {
   i30 = i13 + 36 | 0;
   i13 = HEAP32[i30 >> 2] | 0;
   i27 = HEAP32[i13 + (i9 * 56 | 0) + 4 >> 2] | 0;
   L10 : do {
    if ((i27 | 0) > 0) {
     i28 = i13 + (i9 * 56 | 0) + 32 | 0;
     i26 = i10 + 4 | 0;
     i25 = i10 + 8 | 0;
     i24 = i10 + 16 | 0;
     i23 = i10 + 20 | 0;
     i22 = i10 + 24 | 0;
     i21 = i10 + 32 | 0;
     i20 = i10 + 36 | 0;
     i19 = i10 + 40 | 0;
     i32 = i11 + 4 | 0;
     i29 = i11 + 8 | 0;
     i31 = i11 + 12 | 0;
     i17 = i10 + 48 | 0;
     i16 = i10 + 52 | 0;
     i14 = i10 + 56 | 0;
     i34 = i13;
     i33 = 0;
     while (1) {
      i35 = HEAP32[(HEAP32[i28 >> 2] | 0) + (i33 << 2) >> 2] | 0;
      d50 = +HEAPF32[i34 + (i35 * 56 | 0) + 40 >> 2];
      d51 = +HEAPF32[i34 + (i35 * 56 | 0) + 44 >> 2];
      d55 = +HEAPF32[i34 + (i35 * 56 | 0) + 48 >> 2];
      d52 = +HEAPF32[i34 + (i35 * 56 | 0) + 52 >> 2];
      d53 = d50 * +HEAPF32[i10 >> 2] + d51 * +HEAPF32[i26 >> 2] + d55 * +HEAPF32[i25 >> 2];
      d54 = d50 * +HEAPF32[i24 >> 2] + d51 * +HEAPF32[i23 >> 2] + d55 * +HEAPF32[i22 >> 2];
      d55 = d50 * +HEAPF32[i21 >> 2] + d51 * +HEAPF32[i20 >> 2] + d55 * +HEAPF32[i19 >> 2];
      HEAPF32[i11 >> 2] = d53;
      HEAPF32[i32 >> 2] = d54;
      HEAPF32[i29 >> 2] = d55;
      HEAPF32[i31 >> 2] = 0.0;
      __ZN27btPolyhedralContactClipping8clipFaceERK20btAlignedObjectArrayI9btVector3ERS2_RKS1_f(i18, i15, i11, d52 - (d53 * +HEAPF32[i17 >> 2] + d54 * +HEAPF32[i16 >> 2] + d55 * +HEAPF32[i14 >> 2]));
      i35 = i18 + 4 | 0;
      i39 = HEAP32[i35 >> 2] | 0;
      if ((i39 | 0) < 0) {
       i38 = i18 + 8 | 0;
       i34 = i18 + 12 | 0;
       if ((HEAP32[i38 >> 2] | 0) < 0) {
        i36 = HEAP32[i34 >> 2] | 0;
        i37 = i18 + 16 | 0;
        if ((i36 | 0) != 0) {
         if ((HEAP8[i37] | 0) != 0) {
          __Z21btAlignedFreeInternalPv(i36);
         }
         HEAP32[i34 >> 2] = 0;
        }
        HEAP8[i37] = 1;
        HEAP32[i34 >> 2] = 0;
        HEAP32[i38 >> 2] = 0;
       }
       do {
        i36 = (HEAP32[i34 >> 2] | 0) + (i39 << 4) | 0;
        if ((i36 | 0) != 0) {
         HEAP32[i36 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
         HEAP32[i36 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
         HEAP32[i36 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
         HEAP32[i36 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
        }
        i39 = i39 + 1 | 0;
       } while ((i39 | 0) != 0);
      }
      HEAP32[i35 >> 2] = 0;
      i33 = i33 + 1 | 0;
      if ((i33 | 0) >= (i27 | 0)) {
       break L10;
      }
      i39 = i15;
      i34 = HEAP32[i30 >> 2] | 0;
      i15 = i18;
      i18 = i39;
     }
    } else {
     i15 = i18;
     i26 = i10 + 4 | 0;
     i25 = i10 + 8 | 0;
     i24 = i10 + 16 | 0;
     i23 = i10 + 20 | 0;
     i22 = i10 + 24 | 0;
     i21 = i10 + 32 | 0;
     i20 = i10 + 36 | 0;
     i19 = i10 + 40 | 0;
     i17 = i10 + 48 | 0;
     i16 = i10 + 52 | 0;
     i14 = i10 + 56 | 0;
    }
   } while (0);
   d55 = +HEAPF32[i13 + (i9 * 56 | 0) + 40 >> 2];
   d43 = +HEAPF32[i13 + (i9 * 56 | 0) + 44 >> 2];
   d42 = +HEAPF32[i13 + (i9 * 56 | 0) + 48 >> 2];
   d40 = d55 * +HEAPF32[i10 >> 2] + d43 * +HEAPF32[i26 >> 2] + d42 * +HEAPF32[i25 >> 2];
   d41 = d55 * +HEAPF32[i24 >> 2] + d43 * +HEAPF32[i23 >> 2] + d42 * +HEAPF32[i22 >> 2];
   d42 = d55 * +HEAPF32[i21 >> 2] + d43 * +HEAPF32[i20 >> 2] + d42 * +HEAPF32[i19 >> 2];
   d43 = +HEAPF32[i13 + (i9 * 56 | 0) + 52 >> 2] - (d40 * +HEAPF32[i17 >> 2] + d41 * +HEAPF32[i16 >> 2] + d42 * +HEAPF32[i14 >> 2]);
   i9 = i15 + 4 | 0;
   i12 = HEAP32[i9 >> 2] | 0;
   if ((i12 | 0) > 0) {
    i10 = i15 + 12 | 0;
    i11 = 0;
    do {
     i39 = HEAP32[i10 >> 2] | 0;
     i13 = i39 + (i11 << 4) | 0;
     d44 = d43 + (d40 * +HEAPF32[i13 >> 2] + d41 * +HEAPF32[i39 + (i11 << 4) + 4 >> 2] + d42 * +HEAPF32[i39 + (i11 << 4) + 8 >> 2]);
     if (!(!(d44 <= d4) | !(d44 >= d6))) {
      HEAP32[i5 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
      HEAP32[i5 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
      HEAP32[i5 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
      HEAP32[i5 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
      FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 7](i7, i8, i5, d44);
      i12 = HEAP32[i9 >> 2] | 0;
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) < (i12 | 0));
   }
   i16 = HEAP32[i1 >> 2] | 0;
  }
 }
 if ((i16 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i3] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i16);
 }
 HEAP32[i1 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() {
 var i1 = 0;
 i1 = STACKTOP;
 if ((HEAP8[454560] | 0) != 0) {
  STACKTOP = i1;
  return 453568;
 }
 if ((___cxa_guard_acquire(454560) | 0) == 0) {
  STACKTOP = i1;
  return 453568;
 }
 HEAPF32[113392] = 0.0;
 HEAPF32[453572 >> 2] = -0.0;
 HEAPF32[453576 >> 2] = -1.0;
 HEAPF32[453580 >> 2] = 0.0;
 HEAPF32[453584 >> 2] = .7236080169677734;
 HEAPF32[453588 >> 2] = -.5257250070571899;
 HEAPF32[453592 >> 2] = -.44721901416778564;
 HEAPF32[453596 >> 2] = 0.0;
 HEAPF32[453600 >> 2] = -.2763879895210266;
 HEAPF32[453604 >> 2] = -.8506489992141724;
 HEAPF32[453608 >> 2] = -.44721901416778564;
 HEAPF32[453612 >> 2] = 0.0;
 HEAPF32[453616 >> 2] = -.8944259881973267;
 HEAPF32[453620 >> 2] = -0.0;
 HEAPF32[453624 >> 2] = -.4472160041332245;
 HEAPF32[453628 >> 2] = 0.0;
 HEAPF32[453632 >> 2] = -.2763879895210266;
 HEAPF32[453636 >> 2] = .8506489992141724;
 HEAPF32[453640 >> 2] = -.44721999764442444;
 HEAPF32[453644 >> 2] = 0.0;
 HEAPF32[453648 >> 2] = .7236080169677734;
 HEAPF32[453652 >> 2] = .5257250070571899;
 HEAPF32[453656 >> 2] = -.44721901416778564;
 HEAPF32[453660 >> 2] = 0.0;
 HEAPF32[453664 >> 2] = .2763879895210266;
 HEAPF32[453668 >> 2] = -.8506489992141724;
 HEAPF32[453672 >> 2] = .44721999764442444;
 HEAPF32[453676 >> 2] = 0.0;
 HEAPF32[453680 >> 2] = -.7236080169677734;
 HEAPF32[453684 >> 2] = -.5257250070571899;
 HEAPF32[453688 >> 2] = .44721901416778564;
 HEAPF32[453692 >> 2] = 0.0;
 HEAPF32[453696 >> 2] = -.7236080169677734;
 HEAPF32[453700 >> 2] = .5257250070571899;
 HEAPF32[453704 >> 2] = .44721901416778564;
 HEAPF32[453708 >> 2] = 0.0;
 HEAPF32[453712 >> 2] = .2763879895210266;
 HEAPF32[453716 >> 2] = .8506489992141724;
 HEAPF32[453720 >> 2] = .44721901416778564;
 HEAPF32[453724 >> 2] = 0.0;
 HEAPF32[453728 >> 2] = .8944259881973267;
 HEAPF32[453732 >> 2] = 0.0;
 HEAPF32[453736 >> 2] = .4472160041332245;
 HEAPF32[453740 >> 2] = 0.0;
 HEAPF32[453744 >> 2] = -0.0;
 HEAPF32[453748 >> 2] = 0.0;
 HEAPF32[453752 >> 2] = 1.0;
 HEAPF32[453756 >> 2] = 0.0;
 HEAPF32[453760 >> 2] = .4253230094909668;
 HEAPF32[453764 >> 2] = -.3090110123157501;
 HEAPF32[453768 >> 2] = -.8506540060043335;
 HEAPF32[453772 >> 2] = 0.0;
 HEAPF32[453776 >> 2] = -.16245600581169128;
 HEAPF32[453780 >> 2] = -.49999499320983887;
 HEAPF32[453784 >> 2] = -.8506540060043335;
 HEAPF32[453788 >> 2] = 0.0;
 HEAPF32[453792 >> 2] = .2628690004348755;
 HEAPF32[453796 >> 2] = -.8090119957923889;
 HEAPF32[453800 >> 2] = -.525738000869751;
 HEAPF32[453804 >> 2] = 0.0;
 HEAPF32[453808 >> 2] = .4253230094909668;
 HEAPF32[453812 >> 2] = .3090110123157501;
 HEAPF32[453816 >> 2] = -.8506540060043335;
 HEAPF32[453820 >> 2] = 0.0;
 HEAPF32[453824 >> 2] = .8506479859352112;
 HEAPF32[453828 >> 2] = -0.0;
 HEAPF32[453832 >> 2] = -.5257359743118286;
 HEAPF32[453836 >> 2] = 0.0;
 HEAPF32[453840 >> 2] = -.5257300138473511;
 HEAPF32[453844 >> 2] = -0.0;
 HEAPF32[453848 >> 2] = -.8506519794464111;
 HEAPF32[453852 >> 2] = 0.0;
 HEAPF32[453856 >> 2] = -.6881899833679199;
 HEAPF32[453860 >> 2] = -.49999698996543884;
 HEAPF32[453864 >> 2] = -.5257359743118286;
 HEAPF32[453868 >> 2] = 0.0;
 HEAPF32[453872 >> 2] = -.16245600581169128;
 HEAPF32[453876 >> 2] = .49999499320983887;
 HEAPF32[453880 >> 2] = -.8506540060043335;
 HEAPF32[453884 >> 2] = 0.0;
 HEAPF32[453888 >> 2] = -.6881899833679199;
 HEAPF32[453892 >> 2] = .49999698996543884;
 HEAPF32[453896 >> 2] = -.5257359743118286;
 HEAPF32[453900 >> 2] = 0.0;
 HEAPF32[453904 >> 2] = .2628690004348755;
 HEAPF32[453908 >> 2] = .8090119957923889;
 HEAPF32[453912 >> 2] = -.525738000869751;
 HEAPF32[453916 >> 2] = 0.0;
 HEAPF32[453920 >> 2] = .9510579705238342;
 HEAPF32[453924 >> 2] = .3090130090713501;
 HEAPF32[453928 >> 2] = 0.0;
 HEAPF32[453932 >> 2] = 0.0;
 HEAPF32[453936 >> 2] = .9510579705238342;
 HEAPF32[453940 >> 2] = -.3090130090713501;
 HEAPF32[453944 >> 2] = 0.0;
 HEAPF32[453948 >> 2] = 0.0;
 HEAPF32[453952 >> 2] = .5877860188484192;
 HEAPF32[453956 >> 2] = -.80901700258255;
 HEAPF32[453960 >> 2] = 0.0;
 HEAPF32[453964 >> 2] = 0.0;
 HEAPF32[453968 >> 2] = 0.0;
 HEAPF32[453972 >> 2] = -1.0;
 HEAPF32[453976 >> 2] = 0.0;
 HEAPF32[453980 >> 2] = 0.0;
 HEAPF32[453984 >> 2] = -.5877860188484192;
 HEAPF32[453988 >> 2] = -.80901700258255;
 HEAPF32[453992 >> 2] = 0.0;
 HEAPF32[453996 >> 2] = 0.0;
 HEAPF32[454e3 >> 2] = -.9510579705238342;
 HEAPF32[454004 >> 2] = -.3090130090713501;
 HEAPF32[454008 >> 2] = -0.0;
 HEAPF32[454012 >> 2] = 0.0;
 HEAPF32[454016 >> 2] = -.9510579705238342;
 HEAPF32[454020 >> 2] = .3090130090713501;
 HEAPF32[454024 >> 2] = -0.0;
 HEAPF32[454028 >> 2] = 0.0;
 HEAPF32[454032 >> 2] = -.5877860188484192;
 HEAPF32[454036 >> 2] = .80901700258255;
 HEAPF32[454040 >> 2] = -0.0;
 HEAPF32[454044 >> 2] = 0.0;
 HEAPF32[454048 >> 2] = -0.0;
 HEAPF32[454052 >> 2] = 1.0;
 HEAPF32[454056 >> 2] = -0.0;
 HEAPF32[454060 >> 2] = 0.0;
 HEAPF32[454064 >> 2] = .5877860188484192;
 HEAPF32[454068 >> 2] = .80901700258255;
 HEAPF32[454072 >> 2] = -0.0;
 HEAPF32[454076 >> 2] = 0.0;
 HEAPF32[454080 >> 2] = .6881899833679199;
 HEAPF32[454084 >> 2] = -.49999698996543884;
 HEAPF32[454088 >> 2] = .5257359743118286;
 HEAPF32[454092 >> 2] = 0.0;
 HEAPF32[454096 >> 2] = -.2628690004348755;
 HEAPF32[454100 >> 2] = -.8090119957923889;
 HEAPF32[454104 >> 2] = .525738000869751;
 HEAPF32[454108 >> 2] = 0.0;
 HEAPF32[454112 >> 2] = -.8506479859352112;
 HEAPF32[454116 >> 2] = 0.0;
 HEAPF32[454120 >> 2] = .5257359743118286;
 HEAPF32[454124 >> 2] = 0.0;
 HEAPF32[454128 >> 2] = -.2628690004348755;
 HEAPF32[454132 >> 2] = .8090119957923889;
 HEAPF32[454136 >> 2] = .525738000869751;
 HEAPF32[454140 >> 2] = 0.0;
 HEAPF32[454144 >> 2] = .6881899833679199;
 HEAPF32[454148 >> 2] = .49999698996543884;
 HEAPF32[454152 >> 2] = .5257359743118286;
 HEAPF32[454156 >> 2] = 0.0;
 HEAPF32[454160 >> 2] = .5257300138473511;
 HEAPF32[454164 >> 2] = 0.0;
 HEAPF32[454168 >> 2] = .8506519794464111;
 HEAPF32[454172 >> 2] = 0.0;
 HEAPF32[454176 >> 2] = .16245600581169128;
 HEAPF32[454180 >> 2] = -.49999499320983887;
 HEAPF32[454184 >> 2] = .8506540060043335;
 HEAPF32[454188 >> 2] = 0.0;
 HEAPF32[454192 >> 2] = -.4253230094909668;
 HEAPF32[454196 >> 2] = -.3090110123157501;
 HEAPF32[454200 >> 2] = .8506540060043335;
 HEAPF32[454204 >> 2] = 0.0;
 HEAPF32[454208 >> 2] = -.4253230094909668;
 HEAPF32[454212 >> 2] = .3090110123157501;
 HEAPF32[454216 >> 2] = .8506540060043335;
 HEAPF32[454220 >> 2] = 0.0;
 HEAPF32[454224 >> 2] = .16245600581169128;
 HEAPF32[454228 >> 2] = .49999499320983887;
 HEAPF32[454232 >> 2] = .8506540060043335;
 HEAPF32[454236 >> 2] = 0.0;
 ___cxa_guard_release(454560);
 STACKTOP = i1;
 return 453568;
}
function __ZN35btSequentialImpulseConstraintSolver23setupFrictionConstraintER18btSolverConstraintRK9btVector3P11btRigidBodyS6_R15btManifoldPointS4_S4_P17btCollisionObjectSA_fff(i8, i2, i9, i12, i4, i26, i11, i10, i6, i5, d7, d1, d3) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i4 = i4 | 0;
 i26 = i26 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 d7 = +d7;
 d1 = +d1;
 d3 = +d3;
 var d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, i25 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i27 = i4 + 16 | 0;
 i28 = i4;
 if ((HEAP32[i6 + 232 >> 2] & 2 | 0) == 0) {
  i6 = 0;
 }
 if ((HEAP32[i5 + 232 >> 2] & 2 | 0) == 0) {
  i5 = 0;
 }
 i25 = i2 + 16 | 0;
 HEAP32[i25 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i25 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i25 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i25 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i12 = (i6 | 0) != 0;
 if (i12) {
  i8 = i6;
 } else {
  if ((HEAP8[446696] | 0) == 0 ? (___cxa_guard_acquire(446696) | 0) != 0 : 0) {
   HEAP32[i27 + 0 >> 2] = 0;
   HEAP32[i27 + 4 >> 2] = 0;
   HEAP32[i27 + 8 >> 2] = 0;
   HEAP32[i27 + 12 >> 2] = 0;
   __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(446088, 0.0, 0, 0, i27);
   _atexit(47, 446088, ___dso_handle | 0) | 0;
   ___cxa_guard_release(446696);
  }
  HEAP32[i28 + 0 >> 2] = 0;
  HEAP32[i28 + 4 >> 2] = 0;
  HEAP32[i28 + 8 >> 2] = 0;
  HEAP32[i28 + 12 >> 2] = 0;
  __ZN11btRigidBody12setMassPropsEfRK9btVector3(446088, 0.0, i28);
  i8 = 446088;
 }
 HEAP32[i2 + 104 >> 2] = i8;
 i8 = (i5 | 0) != 0;
 if (i8) {
  i27 = i5;
 } else {
  if ((HEAP8[446696] | 0) == 0 ? (___cxa_guard_acquire(446696) | 0) != 0 : 0) {
   HEAP32[i27 + 0 >> 2] = 0;
   HEAP32[i27 + 4 >> 2] = 0;
   HEAP32[i27 + 8 >> 2] = 0;
   HEAP32[i27 + 12 >> 2] = 0;
   __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(446088, 0.0, 0, 0, i27);
   _atexit(47, 446088, ___dso_handle | 0) | 0;
   ___cxa_guard_release(446696);
  }
  HEAP32[i28 + 0 >> 2] = 0;
  HEAP32[i28 + 4 >> 2] = 0;
  HEAP32[i28 + 8 >> 2] = 0;
  HEAP32[i28 + 12 >> 2] = 0;
  __ZN11btRigidBody12setMassPropsEfRK9btVector3(446088, 0.0, i28);
  i27 = 446088;
 }
 HEAP32[i2 + 108 >> 2] = i27;
 HEAPF32[i2 + 88 >> 2] = +HEAPF32[i26 + 84 >> 2];
 HEAP32[i2 + 112 >> 2] = 0;
 HEAPF32[i2 + 84 >> 2] = 0.0;
 HEAPF32[i2 + 80 >> 2] = 0.0;
 i27 = i11 + 4 | 0;
 d21 = +HEAPF32[i27 >> 2];
 d14 = +HEAPF32[i2 + 24 >> 2];
 i28 = i11 + 8 | 0;
 d20 = +HEAPF32[i28 >> 2];
 d13 = +HEAPF32[i2 + 20 >> 2];
 d19 = d21 * d14 - d20 * d13;
 d15 = +HEAPF32[i25 >> 2];
 d31 = +HEAPF32[i11 >> 2];
 d20 = d20 * d15 - d14 * d31;
 d21 = d13 * d31 - d21 * d15;
 HEAPF32[i2 >> 2] = d19;
 HEAPF32[i2 + 4 >> 2] = d20;
 HEAPF32[i2 + 8 >> 2] = d21;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 if (i12) {
  d30 = (d19 * +HEAPF32[i6 + 288 >> 2] + d20 * +HEAPF32[i6 + 292 >> 2] + d21 * +HEAPF32[i6 + 296 >> 2]) * +HEAPF32[i6 + 544 >> 2];
  d31 = (d19 * +HEAPF32[i6 + 256 >> 2] + d20 * +HEAPF32[i6 + 260 >> 2] + d21 * +HEAPF32[i6 + 264 >> 2]) * +HEAPF32[i6 + 536 >> 2];
  d29 = (d19 * +HEAPF32[i6 + 272 >> 2] + d20 * +HEAPF32[i6 + 276 >> 2] + d21 * +HEAPF32[i6 + 280 >> 2]) * +HEAPF32[i6 + 540 >> 2];
 } else {
  d30 = 0.0;
  d31 = 0.0;
  d29 = 0.0;
 }
 HEAPF32[i2 + 48 >> 2] = d31;
 HEAPF32[i2 + 52 >> 2] = d29;
 HEAPF32[i2 + 56 >> 2] = d30;
 HEAPF32[i2 + 60 >> 2] = 0.0;
 d16 = -d15;
 d23 = -d13;
 d17 = -d14;
 i25 = i10 + 4 | 0;
 d24 = +HEAPF32[i25 >> 2];
 i26 = i10 + 8 | 0;
 d32 = +HEAPF32[i26 >> 2];
 d18 = d24 * d17 - d32 * d23;
 d22 = +HEAPF32[i10 >> 2];
 d17 = d32 * d16 - d22 * d17;
 d16 = d22 * d23 - d24 * d16;
 HEAPF32[i2 + 32 >> 2] = d18;
 HEAPF32[i2 + 36 >> 2] = d17;
 HEAPF32[i2 + 40 >> 2] = d16;
 HEAPF32[i2 + 44 >> 2] = 0.0;
 if (i8) {
  d24 = (d18 * +HEAPF32[i5 + 256 >> 2] + d17 * +HEAPF32[i5 + 260 >> 2] + d16 * +HEAPF32[i5 + 264 >> 2]) * +HEAPF32[i5 + 536 >> 2];
  d23 = (d18 * +HEAPF32[i5 + 272 >> 2] + d17 * +HEAPF32[i5 + 276 >> 2] + d16 * +HEAPF32[i5 + 280 >> 2]) * +HEAPF32[i5 + 540 >> 2];
  d22 = (d18 * +HEAPF32[i5 + 288 >> 2] + d17 * +HEAPF32[i5 + 292 >> 2] + d16 * +HEAPF32[i5 + 296 >> 2]) * +HEAPF32[i5 + 544 >> 2];
 } else {
  d24 = 0.0;
  d23 = 0.0;
  d22 = 0.0;
 }
 HEAPF32[i2 + 64 >> 2] = d24;
 HEAPF32[i2 + 68 >> 2] = d23;
 HEAPF32[i2 + 72 >> 2] = d22;
 HEAPF32[i2 + 76 >> 2] = 0.0;
 if (i12) {
  d34 = +HEAPF32[i28 >> 2];
  d33 = +HEAPF32[i27 >> 2];
  d32 = +HEAPF32[i11 >> 2];
  d29 = +HEAPF32[i6 + 336 >> 2] + ((d29 * d34 - d30 * d33) * +HEAPF32[i9 >> 2] + (d30 * d32 - d34 * d31) * +HEAPF32[i9 + 4 >> 2] + (d33 * d31 - d29 * d32) * +HEAPF32[i9 + 8 >> 2]);
 } else {
  d29 = 0.0;
 }
 if (i8) {
  d33 = -d24;
  d34 = -d23;
  d30 = -d22;
  d31 = +HEAPF32[i26 >> 2];
  d32 = +HEAPF32[i25 >> 2];
  d22 = +HEAPF32[i10 >> 2];
  d22 = +HEAPF32[i5 + 336 >> 2] + ((d31 * d34 - d32 * d30) * +HEAPF32[i9 >> 2] + (d22 * d30 - d31 * d33) * +HEAPF32[i9 + 4 >> 2] + (d32 * d33 - d22 * d34) * +HEAPF32[i9 + 8 >> 2]);
 } else {
  d22 = 0.0;
 }
 d7 = d7 / (d29 + d22);
 HEAPF32[i2 + 92 >> 2] = d7;
 if (i12) {
  d23 = +HEAPF32[i6 + 320 >> 2];
  d24 = +HEAPF32[i6 + 324 >> 2];
  d22 = +HEAPF32[i6 + 328 >> 2];
  d29 = +HEAPF32[i6 + 304 >> 2] * d15 + +HEAPF32[i6 + 308 >> 2] * d13 + +HEAPF32[i6 + 312 >> 2] * d14;
 } else {
  d23 = 0.0;
  d24 = 0.0;
  d22 = 0.0;
  d29 = d15 * 0.0 + d13 * 0.0 + d14 * 0.0;
 }
 d19 = d29 + (d23 * d19 + d24 * d20 + d22 * d21);
 if (i8) {
  d31 = +HEAPF32[i5 + 320 >> 2];
  d32 = +HEAPF32[i5 + 324 >> 2];
  d33 = +HEAPF32[i5 + 328 >> 2];
  d34 = +HEAPF32[i5 + 304 >> 2] * d15 + +HEAPF32[i5 + 308 >> 2] * d13 + +HEAPF32[i5 + 312 >> 2] * d14;
  d31 = d31 * d18;
  d32 = d32 * d17;
  d32 = d31 + d32;
  d33 = d33 * d16;
  d33 = d32 + d33;
  d34 = d33 - d34;
  d34 = d19 + d34;
  d34 = d1 - d34;
  d34 = d7 * d34;
  i28 = i2 + 116 | 0;
  HEAPF32[i28 >> 2] = d34;
  i28 = i2 + 120 | 0;
  HEAPF32[i28 >> 2] = d3;
  i28 = i2 + 124 | 0;
  HEAPF32[i28 >> 2] = 0.0;
  i28 = i2 + 128 | 0;
  HEAPF32[i28 >> 2] = 1.0e10;
  STACKTOP = i4;
  return;
 } else {
  d31 = 0.0;
  d32 = 0.0;
  d33 = 0.0;
  d34 = d15 * 0.0 + d13 * 0.0 + d14 * 0.0;
  d31 = d31 * d18;
  d32 = d32 * d17;
  d32 = d31 + d32;
  d33 = d33 * d16;
  d33 = d32 + d33;
  d34 = d33 - d34;
  d34 = d19 + d34;
  d34 = d1 - d34;
  d34 = d7 * d34;
  i28 = i2 + 116 | 0;
  HEAPF32[i28 >> 2] = d34;
  i28 = i2 + 120 | 0;
  HEAPF32[i28 >> 2] = d3;
  i28 = i2 + 124 | 0;
  HEAPF32[i28 >> 2] = 0.0;
  i28 = i2 + 128 | 0;
  HEAPF32[i28 >> 2] = 1.0e10;
  STACKTOP = i4;
  return;
 }
}
function __ZN16btCollisionWorld14debugDrawWorldEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, i37 = 0, i38 = 0, i39 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i15 = i2 + 96 | 0;
 i8 = i2 + 80 | 0;
 i4 = i2 + 64 | 0;
 i5 = i2 + 48 | 0;
 i3 = i2 + 32 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0) != 0 ? (i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 48 >> 2] & 127](i38) | 0) & 8 | 0) != 0) : 0) {
  i11 = i1 + 24 | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0;
  i38 = (i10 | 0) > 0;
  HEAP32[i15 + 0 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP32[i15 + 8 >> 2] = 0;
  HEAP32[i15 + 12 >> 2] = 0;
  if (i38) {
   i12 = 0;
   do {
    i13 = HEAP32[i11 >> 2] | 0;
    i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 40 >> 2] & 31](i13, i12) | 0;
    i14 = HEAP32[i13 + 1116 >> 2] | 0;
    if ((i14 | 0) > 0) {
     i9 = 0;
     do {
      i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
      FUNCTION_TABLE_viiidii[HEAP32[(HEAP32[i38 >> 2] | 0) + 32 >> 2] & 0](i38, i13 + (i9 * 276 | 0) + 36 | 0, i13 + (i9 * 276 | 0) + 68 | 0, +HEAPF32[i13 + (i9 * 276 | 0) + 84 >> 2], HEAP32[i13 + (i9 * 276 | 0) + 148 >> 2] | 0, i15);
      i9 = i9 + 1 | 0;
     } while ((i9 | 0) != (i14 | 0));
    }
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i10 | 0));
  }
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 48 >> 2] & 127](i38) | 0) & 3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i16 = i1 + 8 | 0;
 if ((HEAP32[i16 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i10 = i1 + 16 | 0;
 i17 = i1 + 80 | 0;
 i18 = i3 + 4 | 0;
 i19 = i3 + 8 | 0;
 i20 = i3 + 12 | 0;
 i21 = i4 + 4 | 0;
 i22 = i4 + 8 | 0;
 i23 = i5 + 4 | 0;
 i24 = i5 + 8 | 0;
 i26 = i6 + 4 | 0;
 i27 = i6 + 8 | 0;
 i28 = i7 + 4 | 0;
 i29 = i7 + 8 | 0;
 i25 = i4 + 12 | 0;
 i30 = i6 + 12 | 0;
 i14 = i5 + 12 | 0;
 i15 = i7 + 12 | 0;
 i13 = i8 + 4 | 0;
 i12 = i8 + 8 | 0;
 i11 = i8 + 12 | 0;
 i9 = 0;
 do {
  i37 = HEAP32[(HEAP32[i10 >> 2] | 0) + (i9 << 2) >> 2] | 0;
  if ((HEAP32[i37 + 204 >> 2] & 32 | 0) == 0) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0) != 0 ? (i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 48 >> 2] & 127](i38) | 0) & 1 | 0) != 0) : 0) {
    HEAPF32[i8 >> 2] = 1.0;
    HEAPF32[i13 >> 2] = 1.0;
    HEAPF32[i12 >> 2] = 1.0;
    HEAPF32[i11 >> 2] = 0.0;
    switch (HEAP32[i37 + 216 >> 2] | 0) {
    case 4:
     {
      HEAPF32[i8 >> 2] = 1.0;
      HEAPF32[i13 >> 2] = 0.0;
      HEAPF32[i12 >> 2] = 0.0;
      HEAPF32[i11 >> 2] = 0.0;
      break;
     }
    case 2:
     {
      HEAPF32[i8 >> 2] = 0.0;
      HEAPF32[i13 >> 2] = 1.0;
      HEAPF32[i12 >> 2] = 0.0;
      HEAPF32[i11 >> 2] = 0.0;
      break;
     }
    case 5:
     {
      HEAPF32[i8 >> 2] = 1.0;
      HEAPF32[i13 >> 2] = 1.0;
      HEAPF32[i12 >> 2] = 0.0;
      HEAPF32[i11 >> 2] = 0.0;
      break;
     }
    case 3:
     {
      HEAPF32[i8 >> 2] = 0.0;
      HEAPF32[i13 >> 2] = 1.0;
      HEAPF32[i12 >> 2] = 1.0;
      HEAPF32[i11 >> 2] = 0.0;
      break;
     }
    case 1:
     {
      HEAPF32[i8 >> 2] = 1.0;
      HEAPF32[i13 >> 2] = 1.0;
      HEAPF32[i12 >> 2] = 1.0;
      HEAPF32[i11 >> 2] = 0.0;
      break;
     }
    default:
     {
      HEAPF32[i8 >> 2] = 1.0;
      HEAPF32[i13 >> 2] = 0.0;
      HEAPF32[i12 >> 2] = 0.0;
      HEAPF32[i11 >> 2] = 0.0;
     }
    }
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1, i37 + 4 | 0, HEAP32[i37 + 192 >> 2] | 0, i8);
   }
   i38 = HEAP32[i17 >> 2] | 0;
   if ((i38 | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i38 >> 2] | 0) + 48 >> 2] & 127](i38) | 0) & 2 | 0) != 0 : 0) {
    HEAPF32[i3 >> 2] = 1.0;
    HEAPF32[i18 >> 2] = 0.0;
    HEAPF32[i19 >> 2] = 0.0;
    HEAPF32[i20 >> 2] = 0.0;
    i38 = i37 + 192 | 0;
    i39 = HEAP32[i38 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i39 >> 2] | 0) + 8 >> 2] & 63](i39, i37 + 4 | 0, i4, i5);
    d32 = +HEAPF32[113934];
    HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] - d32;
    HEAPF32[i21 >> 2] = +HEAPF32[i21 >> 2] - d32;
    HEAPF32[i22 >> 2] = +HEAPF32[i22 >> 2] - d32;
    HEAPF32[i5 >> 2] = d32 + +HEAPF32[i5 >> 2];
    HEAPF32[i23 >> 2] = d32 + +HEAPF32[i23 >> 2];
    HEAPF32[i24 >> 2] = d32 + +HEAPF32[i24 >> 2];
    if ((HEAP32[i37 + 232 >> 2] | 0) == 2) {
     i39 = HEAP32[i38 >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i39 >> 2] | 0) + 8 >> 2] & 63](i39, i37 + 68 | 0, i6, i7);
     d36 = +HEAPF32[i6 >> 2] - d32;
     HEAPF32[i6 >> 2] = d36;
     d34 = +HEAPF32[i26 >> 2] - d32;
     HEAPF32[i26 >> 2] = d34;
     d35 = +HEAPF32[i27 >> 2] - d32;
     HEAPF32[i27 >> 2] = d35;
     d31 = d32 + +HEAPF32[i7 >> 2];
     HEAPF32[i7 >> 2] = d31;
     d33 = d32 + +HEAPF32[i28 >> 2];
     HEAPF32[i28 >> 2] = d33;
     d32 = d32 + +HEAPF32[i29 >> 2];
     HEAPF32[i29 >> 2] = d32;
     if (d36 < +HEAPF32[i4 >> 2]) {
      HEAPF32[i4 >> 2] = d36;
     }
     if (d34 < +HEAPF32[i21 >> 2]) {
      HEAPF32[i21 >> 2] = d34;
     }
     if (d35 < +HEAPF32[i22 >> 2]) {
      HEAPF32[i22 >> 2] = d35;
     }
     d34 = +HEAPF32[i30 >> 2];
     if (d34 < +HEAPF32[i25 >> 2]) {
      HEAPF32[i25 >> 2] = d34;
     }
     if (+HEAPF32[i5 >> 2] < d31) {
      HEAPF32[i5 >> 2] = d31;
     }
     if (+HEAPF32[i23 >> 2] < d33) {
      HEAPF32[i23 >> 2] = d33;
     }
     if (+HEAPF32[i24 >> 2] < d32) {
      HEAPF32[i24 >> 2] = d32;
     }
     d31 = +HEAPF32[i15 >> 2];
     if (+HEAPF32[i14 >> 2] < d31) {
      HEAPF32[i14 >> 2] = d31;
     }
    }
    i39 = HEAP32[i17 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i39 >> 2] | 0) + 52 >> 2] & 63](i39, i4, i5, i3);
   }
  }
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) < (HEAP32[i16 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i5, i27, i32, i2, i1) {
 i5 = i5 | 0;
 i27 = i27 | 0;
 i32 = i32 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, i41 = 0, i42 = 0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i4 = i1 + 224 | 0;
 i3 = i1 + 208 | 0;
 i2 = i1;
 i33 = (HEAP8[i5 + 8 | 0] | 0) != 0;
 i5 = i33 ? i32 : i27;
 i27 = i33 ? i27 : i32;
 i33 = i5 + 116 | 0;
 i37 = i5 + 52 | 0;
 d36 = +HEAPF32[i33 >> 2] - +HEAPF32[i37 >> 2];
 i32 = i5 + 120 | 0;
 i41 = i5 + 56 | 0;
 d38 = +HEAPF32[i32 >> 2] - +HEAPF32[i41 >> 2];
 i34 = i5 + 124 | 0;
 i42 = i5 + 60 | 0;
 d39 = +HEAPF32[i34 >> 2] - +HEAPF32[i42 >> 2];
 d40 = +HEAPF32[i5 + 248 >> 2];
 if (d36 * d36 + d38 * d38 + d39 * d39 < d40 * d40) {
  d40 = 1.0;
  STACKTOP = i1;
  return +d40;
 }
 d47 = +HEAPF32[i27 + 4 >> 2];
 d46 = +HEAPF32[i27 + 20 >> 2];
 d28 = +HEAPF32[i27 + 36 >> 2];
 d44 = +HEAPF32[i27 + 8 >> 2];
 d43 = +HEAPF32[i27 + 24 >> 2];
 d29 = +HEAPF32[i27 + 40 >> 2];
 d35 = +HEAPF32[i27 + 12 >> 2];
 d38 = +HEAPF32[i27 + 28 >> 2];
 d40 = +HEAPF32[i27 + 44 >> 2];
 d16 = -+HEAPF32[i27 + 52 >> 2];
 d18 = -+HEAPF32[i27 + 56 >> 2];
 d31 = -+HEAPF32[i27 + 60 >> 2];
 d48 = d47 * d16 + d46 * d18 + d28 * d31;
 d45 = d44 * d16 + d43 * d18 + d29 * d31;
 d31 = d35 * d16 + d38 * d18 + d40 * d31;
 d18 = +HEAPF32[i5 + 4 >> 2];
 d16 = +HEAPF32[i5 + 20 >> 2];
 d12 = +HEAPF32[i5 + 36 >> 2];
 d13 = d47 * d18 + d46 * d16 + d28 * d12;
 d26 = +HEAPF32[i5 + 8 >> 2];
 d15 = +HEAPF32[i5 + 24 >> 2];
 d8 = +HEAPF32[i5 + 40 >> 2];
 d7 = d47 * d26 + d46 * d15 + d28 * d8;
 d51 = +HEAPF32[i5 + 12 >> 2];
 d50 = +HEAPF32[i5 + 28 >> 2];
 d14 = +HEAPF32[i5 + 44 >> 2];
 d6 = d47 * d51 + d46 * d50 + d28 * d14;
 d9 = d44 * d18 + d43 * d16 + d29 * d12;
 d10 = d44 * d26 + d43 * d15 + d29 * d8;
 d11 = d44 * d51 + d43 * d50 + d29 * d14;
 d12 = d35 * d18 + d38 * d16 + d40 * d12;
 d8 = d35 * d26 + d38 * d15 + d40 * d8;
 d14 = d35 * d51 + d38 * d50 + d40 * d14;
 d50 = +HEAPF32[i37 >> 2];
 d51 = +HEAPF32[i41 >> 2];
 d15 = +HEAPF32[i42 >> 2];
 d26 = d48 + (d47 * d50 + d46 * d51 + d28 * d15);
 d16 = d45 + (d44 * d50 + d43 * d51 + d29 * d15);
 d15 = d31 + (d35 * d50 + d38 * d51 + d40 * d15);
 d51 = +HEAPF32[i5 + 68 >> 2];
 d50 = +HEAPF32[i5 + 84 >> 2];
 d18 = +HEAPF32[i5 + 100 >> 2];
 d20 = d47 * d51 + d46 * d50 + d28 * d18;
 d49 = +HEAPF32[i5 + 72 >> 2];
 d30 = +HEAPF32[i5 + 88 >> 2];
 d17 = +HEAPF32[i5 + 104 >> 2];
 d24 = d47 * d49 + d46 * d30 + d28 * d17;
 d39 = +HEAPF32[i5 + 76 >> 2];
 d36 = +HEAPF32[i5 + 92 >> 2];
 d25 = +HEAPF32[i5 + 108 >> 2];
 d23 = d47 * d39 + d46 * d36 + d28 * d25;
 d22 = d44 * d51 + d43 * d50 + d29 * d18;
 d21 = d44 * d49 + d43 * d30 + d29 * d17;
 d19 = d44 * d39 + d43 * d36 + d29 * d25;
 d18 = d35 * d51 + d38 * d50 + d40 * d18;
 d17 = d35 * d49 + d38 * d30 + d40 * d17;
 d25 = d35 * d39 + d38 * d36 + d40 * d25;
 d36 = +HEAPF32[i33 >> 2];
 d39 = +HEAPF32[i32 >> 2];
 d30 = +HEAPF32[i34 >> 2];
 d28 = d48 + (d47 * d36 + d46 * d39 + d28 * d30);
 d29 = d45 + (d44 * d36 + d43 * d39 + d29 * d30);
 d30 = d31 + (d35 * d36 + d38 * d39 + d40 * d30);
 i27 = i27 + 192 | 0;
 if (((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) + -21 | 0) >>> 0 < 9) {
  HEAPF32[i4 >> 2] = d26;
  i33 = i4 + 4 | 0;
  HEAPF32[i33 >> 2] = d16;
  i32 = i4 + 8 | 0;
  HEAPF32[i32 >> 2] = d15;
  HEAPF32[i4 + 12 >> 2] = 0.0;
  if (d28 < d26) {
   HEAPF32[i4 >> 2] = d28;
   d40 = d28;
  } else {
   d40 = d26;
  }
  if (d29 < d16) {
   HEAPF32[i33 >> 2] = d29;
   d39 = d29;
  } else {
   d39 = d16;
  }
  if (d30 < d15) {
   HEAPF32[i32 >> 2] = d30;
   d38 = d30;
  } else {
   d38 = d15;
  }
  HEAPF32[i3 >> 2] = d26;
  i37 = i3 + 4 | 0;
  HEAPF32[i37 >> 2] = d16;
  i34 = i3 + 8 | 0;
  HEAPF32[i34 >> 2] = d15;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  if (d26 < d28) {
   HEAPF32[i3 >> 2] = d28;
   d35 = d28;
  } else {
   d35 = d26;
  }
  if (d16 < d29) {
   HEAPF32[i37 >> 2] = d29;
   d36 = d29;
  } else {
   d36 = d16;
  }
  if (d15 < d30) {
   HEAPF32[i34 >> 2] = d30;
   d31 = d30;
  } else {
   d31 = d15;
  }
  d51 = +HEAPF32[i5 + 244 >> 2];
  HEAPF32[i4 >> 2] = d40 - d51;
  HEAPF32[i33 >> 2] = d39 - d51;
  HEAPF32[i32 >> 2] = d38 - d51;
  HEAPF32[i3 >> 2] = d51 + d35;
  HEAPF32[i37 >> 2] = d51 + d36;
  HEAPF32[i34 >> 2] = d51 + d31;
  HEAP32[i2 >> 2] = 458752;
  HEAPF32[i2 + 4 >> 2] = d13;
  HEAPF32[i2 + 8 >> 2] = d7;
  HEAPF32[i2 + 12 >> 2] = d6;
  HEAPF32[i2 + 16 >> 2] = 0.0;
  HEAPF32[i2 + 20 >> 2] = d9;
  HEAPF32[i2 + 24 >> 2] = d10;
  HEAPF32[i2 + 28 >> 2] = d11;
  HEAPF32[i2 + 32 >> 2] = 0.0;
  HEAPF32[i2 + 36 >> 2] = d12;
  HEAPF32[i2 + 40 >> 2] = d8;
  HEAPF32[i2 + 44 >> 2] = d14;
  HEAPF32[i2 + 48 >> 2] = 0.0;
  HEAPF32[i2 + 52 >> 2] = d26;
  HEAPF32[i2 + 56 >> 2] = d16;
  HEAPF32[i2 + 60 >> 2] = d15;
  HEAPF32[i2 + 64 >> 2] = 0.0;
  HEAPF32[i2 + 68 >> 2] = d20;
  HEAPF32[i2 + 72 >> 2] = d24;
  HEAPF32[i2 + 76 >> 2] = d23;
  HEAPF32[i2 + 80 >> 2] = 0.0;
  HEAPF32[i2 + 84 >> 2] = d22;
  HEAPF32[i2 + 88 >> 2] = d21;
  HEAPF32[i2 + 92 >> 2] = d19;
  HEAPF32[i2 + 96 >> 2] = 0.0;
  HEAPF32[i2 + 100 >> 2] = d18;
  HEAPF32[i2 + 104 >> 2] = d17;
  HEAPF32[i2 + 108 >> 2] = d25;
  HEAPF32[i2 + 112 >> 2] = 0.0;
  HEAPF32[i2 + 116 >> 2] = d28;
  HEAPF32[i2 + 120 >> 2] = d29;
  HEAPF32[i2 + 124 >> 2] = d30;
  HEAPF32[i2 + 128 >> 2] = 0.0;
  HEAPF32[i2 + 196 >> 2] = d51;
  i32 = i2 + 200 | 0;
  i5 = i5 + 240 | 0;
  d6 = +HEAPF32[i5 >> 2];
  HEAPF32[i32 >> 2] = d6;
  i27 = HEAP32[i27 >> 2] | 0;
  if ((i27 | 0) != 0) {
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i27 >> 2] | 0) + 60 >> 2] & 63](i27, i2, i4, i3);
   d6 = +HEAPF32[i32 >> 2];
   if (d6 < +HEAPF32[i5 >> 2]) {
    HEAPF32[i5 >> 2] = d6;
    i2 = 0;
   } else {
    i2 = 1;
   }
  } else {
   i2 = 1;
  }
  if (!i2) {
   d51 = d6;
   STACKTOP = i1;
   return +d51;
  }
 }
 d51 = 1.0;
 STACKTOP = i1;
 return +d51;
}
function __ZN21btConeTwistConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, i53 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i6 = i2 + 128 | 0;
 i9 = i2 + 80 | 0;
 i7 = i2 + 32 | 0;
 i5 = i2 + 16 | 0;
 i10 = i2;
 if ((HEAP8[i1 + 519 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 + 32 >> 2] = 0.0;
 HEAPF32[i1 + 512 >> 2] = 0.0;
 HEAPF32[i1 + 508 >> 2] = 0.0;
 i3 = i1 + 568 | 0;
 i45 = i1 + 516 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 i3 = i1 + 24 | 0;
 L4 : do {
  if ((HEAP8[i45] | 0) == 0) {
   i45 = HEAP32[i3 >> 2] | 0;
   d50 = +HEAPF32[i1 + 340 >> 2];
   d48 = +HEAPF32[i1 + 344 >> 2];
   d4 = +HEAPF32[i1 + 348 >> 2];
   d15 = +HEAPF32[i45 + 56 >> 2] + (d50 * +HEAPF32[i45 + 20 >> 2] + d48 * +HEAPF32[i45 + 24 >> 2] + d4 * +HEAPF32[i45 + 28 >> 2]);
   i8 = i1 + 28 | 0;
   i16 = HEAP32[i8 >> 2] | 0;
   d46 = +HEAPF32[i1 + 404 >> 2];
   d49 = +HEAPF32[i1 + 408 >> 2];
   d14 = +HEAPF32[i1 + 412 >> 2];
   d12 = +HEAPF32[i16 + 56 >> 2] + (d46 * +HEAPF32[i16 + 20 >> 2] + d49 * +HEAPF32[i16 + 24 >> 2] + d14 * +HEAPF32[i16 + 28 >> 2]);
   d13 = +HEAPF32[i16 + 60 >> 2] + (d46 * +HEAPF32[i16 + 36 >> 2] + d49 * +HEAPF32[i16 + 40 >> 2] + d14 * +HEAPF32[i16 + 44 >> 2]);
   d47 = d12 - d15;
   d11 = +HEAPF32[i45 + 52 >> 2] + (+HEAPF32[i45 + 4 >> 2] * d50 + +HEAPF32[i45 + 8 >> 2] * d48 + +HEAPF32[i45 + 12 >> 2] * d4);
   d4 = +HEAPF32[i45 + 60 >> 2] + (d50 * +HEAPF32[i45 + 36 >> 2] + d48 * +HEAPF32[i45 + 40 >> 2] + d4 * +HEAPF32[i45 + 44 >> 2]);
   d14 = +HEAPF32[i16 + 52 >> 2] + (+HEAPF32[i16 + 4 >> 2] * d46 + +HEAPF32[i16 + 8 >> 2] * d49 + +HEAPF32[i16 + 12 >> 2] * d14);
   d49 = d14 - d11;
   d46 = d13 - d4;
   d48 = d49 * d49 + d47 * d47 + d46 * d46;
   if (d48 > 1.1920928955078125e-7) {
    d51 = 1.0 / +Math_sqrt(+d48);
    d48 = d49 * d51;
    d50 = d47 * d51;
    d47 = d46 * d51;
    HEAPF32[i6 >> 2] = d48;
    HEAPF32[i6 + 4 >> 2] = d50;
    HEAPF32[i6 + 8 >> 2] = d47;
    HEAPF32[i6 + 12 >> 2] = 0.0;
    d46 = d50;
   } else {
    HEAPF32[i6 >> 2] = 1.0;
    HEAPF32[i6 + 4 >> 2] = 0.0;
    HEAPF32[i6 + 8 >> 2] = 0.0;
    HEAPF32[i6 + 12 >> 2] = 0.0;
    d47 = 0.0;
    d46 = 0.0;
    d48 = 1.0;
   }
   i17 = i6 + 16 | 0;
   i18 = i6 + 32 | 0;
   if (+Math_abs(+d47) > .7071067690849304) {
    d52 = d47 * d47 + d46 * d46;
    d49 = 1.0 / +Math_sqrt(+d52);
    HEAPF32[i17 >> 2] = 0.0;
    d51 = -(d49 * d47);
    HEAPF32[i6 + 20 >> 2] = d51;
    d50 = d49 * d46;
    HEAPF32[i6 + 24 >> 2] = d50;
    HEAPF32[i18 >> 2] = d52 * d49;
    HEAPF32[i6 + 36 >> 2] = -(d48 * d50);
    HEAPF32[i6 + 40 >> 2] = d48 * d51;
   } else {
    d51 = d48 * d48 + d46 * d46;
    d52 = 1.0 / +Math_sqrt(+d51);
    d50 = -(d46 * d52);
    HEAPF32[i17 >> 2] = d50;
    d49 = d52 * d48;
    HEAPF32[i6 + 20 >> 2] = d49;
    HEAPF32[i6 + 24 >> 2] = 0.0;
    HEAPF32[i18 >> 2] = -(d47 * d49);
    HEAPF32[i6 + 36 >> 2] = d47 * d50;
    HEAPF32[i6 + 40 >> 2] = d51 * d52;
   }
   i27 = i9 + 4 | 0;
   i28 = i9 + 8 | 0;
   i29 = i9 + 12 | 0;
   i30 = i9 + 16 | 0;
   i31 = i9 + 20 | 0;
   i32 = i9 + 24 | 0;
   i33 = i9 + 28 | 0;
   i34 = i9 + 32 | 0;
   i35 = i9 + 36 | 0;
   i36 = i9 + 40 | 0;
   i37 = i9 + 44 | 0;
   i38 = i7 + 4 | 0;
   i39 = i7 + 8 | 0;
   i40 = i7 + 12 | 0;
   i41 = i7 + 16 | 0;
   i42 = i7 + 20 | 0;
   i43 = i7 + 24 | 0;
   i44 = i7 + 28 | 0;
   i26 = i7 + 32 | 0;
   i25 = i7 + 36 | 0;
   i24 = i7 + 40 | 0;
   i23 = i7 + 44 | 0;
   i22 = i5 + 4 | 0;
   i21 = i5 + 8 | 0;
   i20 = i5 + 12 | 0;
   i19 = i10 + 4 | 0;
   i18 = i10 + 8 | 0;
   i17 = i10 + 12 | 0;
   i45 = 0;
   while (1) {
    i53 = HEAP32[i3 >> 2] | 0;
    HEAPF32[i9 >> 2] = +HEAPF32[i53 + 4 >> 2];
    HEAPF32[i27 >> 2] = +HEAPF32[i53 + 20 >> 2];
    HEAPF32[i28 >> 2] = +HEAPF32[i53 + 36 >> 2];
    HEAPF32[i29 >> 2] = 0.0;
    HEAPF32[i30 >> 2] = +HEAPF32[i53 + 8 >> 2];
    HEAPF32[i31 >> 2] = +HEAPF32[i53 + 24 >> 2];
    HEAPF32[i32 >> 2] = +HEAPF32[i53 + 40 >> 2];
    HEAPF32[i33 >> 2] = 0.0;
    HEAPF32[i34 >> 2] = +HEAPF32[i53 + 12 >> 2];
    HEAPF32[i35 >> 2] = +HEAPF32[i53 + 28 >> 2];
    HEAPF32[i36 >> 2] = +HEAPF32[i53 + 44 >> 2];
    HEAPF32[i37 >> 2] = 0.0;
    HEAPF32[i7 >> 2] = +HEAPF32[i16 + 4 >> 2];
    HEAPF32[i38 >> 2] = +HEAPF32[i16 + 20 >> 2];
    HEAPF32[i39 >> 2] = +HEAPF32[i16 + 36 >> 2];
    HEAPF32[i40 >> 2] = 0.0;
    HEAPF32[i41 >> 2] = +HEAPF32[i16 + 8 >> 2];
    HEAPF32[i42 >> 2] = +HEAPF32[i16 + 24 >> 2];
    HEAPF32[i43 >> 2] = +HEAPF32[i16 + 40 >> 2];
    HEAPF32[i44 >> 2] = 0.0;
    HEAPF32[i26 >> 2] = +HEAPF32[i16 + 12 >> 2];
    HEAPF32[i25 >> 2] = +HEAPF32[i16 + 28 >> 2];
    HEAPF32[i24 >> 2] = +HEAPF32[i16 + 44 >> 2];
    HEAPF32[i23 >> 2] = 0.0;
    i53 = HEAP32[i3 >> 2] | 0;
    d52 = d15 - +HEAPF32[i53 + 56 >> 2];
    d51 = d4 - +HEAPF32[i53 + 60 >> 2];
    HEAPF32[i5 >> 2] = d11 - +HEAPF32[i53 + 52 >> 2];
    HEAPF32[i22 >> 2] = d52;
    HEAPF32[i21 >> 2] = d51;
    HEAPF32[i20 >> 2] = 0.0;
    d51 = d12 - +HEAPF32[i16 + 56 >> 2];
    d52 = d13 - +HEAPF32[i16 + 60 >> 2];
    HEAPF32[i10 >> 2] = d14 - +HEAPF32[i16 + 52 >> 2];
    HEAPF32[i19 >> 2] = d51;
    HEAPF32[i18 >> 2] = d52;
    HEAPF32[i17 >> 2] = 0.0;
    i16 = HEAP32[i8 >> 2] | 0;
    __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1 + (i45 * 84 | 0) + 40 | 0, i9, i7, i5, i10, i6 + (i45 << 4) | 0, i53 + 388 | 0, +HEAPF32[i53 + 336 >> 2], i16 + 388 | 0, +HEAPF32[i16 + 336 >> 2]);
    i45 = i45 + 1 | 0;
    if ((i45 | 0) == 3) {
     break L4;
    }
    i16 = HEAP32[i8 >> 2] | 0;
   }
  } else {
   i8 = i1 + 28 | 0;
  }
 } while (0);
 i45 = HEAP32[i3 >> 2] | 0;
 i53 = HEAP32[i8 >> 2] | 0;
 __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i1, i45 + 4 | 0, i53 + 4 | 0, i45 + 256 | 0, i53 + 256 | 0);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld19integrateTransformsEf(i9, d8) {
 i9 = i9 | 0;
 d8 = +d8;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, i48 = 0, i49 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i3 = i25 + 216 | 0;
 i4 = i25 + 120 | 0;
 i5 = i25 + 64 | 0;
 i6 = i25;
 __ZN15CProfileManager13Start_ProfileEPKc(445040);
 i7 = i9 + 204 | 0;
 if ((HEAP32[i7 >> 2] | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i25;
  return;
 }
 i39 = i9 + 212 | 0;
 i21 = i3 + 48 | 0;
 i36 = i3 + 52 | 0;
 i37 = i3 + 56 | 0;
 i38 = i9 + 44 | 0;
 i15 = i9 + 76 | 0;
 i16 = i9 + 24 | 0;
 i17 = i4 + 4 | 0;
 i18 = i4 + 8 | 0;
 i19 = i4 + 10 | 0;
 i20 = i4 + 12 | 0;
 i22 = i4 + 28 | 0;
 i11 = i4 + 76 | 0;
 i23 = i4 + 80 | 0;
 i24 = i4 + 84 | 0;
 i1 = i4 + 88 | 0;
 i26 = i4 + 92 | 0;
 i27 = i5 + 4 | 0;
 i28 = i5 + 28 | 0;
 i29 = i5 + 44 | 0;
 i30 = i9 + 56 | 0;
 i32 = i6 + 16 | 0;
 i31 = i3 + 16 | 0;
 i34 = i6 + 32 | 0;
 i33 = i3 + 32 | 0;
 i35 = i6 + 48 | 0;
 i12 = i4 + 60 | 0;
 i13 = i4 + 44 | 0;
 i14 = i9 + 100 | 0;
 i10 = 0;
 do {
  i40 = HEAP32[(HEAP32[i39 >> 2] | 0) + (i10 << 2) >> 2] | 0;
  i41 = i40 + 240 | 0;
  HEAPF32[i41 >> 2] = 1.0;
  i43 = HEAP32[i40 + 216 >> 2] | 0;
  do {
   if (!((i43 | 0) == 2 | (i43 | 0) == 5) ? (HEAP32[i40 + 204 >> 2] & 3 | 0) == 0 : 0) {
    __ZN11btRigidBody26predictIntegratedTransformEfR11btTransform(i40, d8, i3);
    i43 = i40 + 4 | 0;
    i42 = i40 + 52 | 0;
    d46 = +HEAPF32[i21 >> 2] - +HEAPF32[i42 >> 2];
    d45 = +HEAPF32[i36 >> 2] - +HEAPF32[i40 + 56 >> 2];
    d44 = +HEAPF32[i37 >> 2] - +HEAPF32[i40 + 60 >> 2];
    if ((HEAP8[i38] | 0) != 0 ? (d47 = +HEAPF32[i40 + 248 >> 2], d47 = d47 * d47, d47 != 0.0 & d47 < d46 * d46 + d45 * d45 + d44 * d44) : 0) {
     __ZN15CProfileManager13Start_ProfileEPKc(445064);
     if ((HEAP32[(HEAP32[i40 + 192 >> 2] | 0) + 4 >> 2] | 0) < 20) {
      HEAP32[111258] = (HEAP32[111258] | 0) + 1;
      i49 = HEAP32[i15 >> 2] | 0;
      i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i49 >> 2] | 0) + 36 >> 2] & 127](i49) | 0;
      i48 = HEAP32[i16 >> 2] | 0;
      HEAPF32[i17 >> 2] = 1.0;
      HEAP16[i18 >> 1] = 1;
      HEAP16[i19 >> 1] = -1;
      HEAP32[i4 >> 2] = 445480;
      HEAP32[i20 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
      HEAP32[i20 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
      HEAP32[i20 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
      HEAP32[i20 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
      HEAP32[i22 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
      HEAP32[i22 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
      HEAP32[i22 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
      HEAP32[i22 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
      HEAP32[i11 >> 2] = 0;
      HEAP32[i4 >> 2] = 445272;
      HEAP32[i23 >> 2] = i40;
      HEAPF32[i24 >> 2] = 0.0;
      HEAP32[i1 >> 2] = i49;
      HEAP32[i26 >> 2] = i48;
      d44 = +HEAPF32[i40 + 244 >> 2];
      __ZN21btConvexInternalShapeC2Ev(i5);
      HEAP32[i5 >> 2] = 456848;
      HEAP32[i27 >> 2] = 8;
      HEAPF32[i28 >> 2] = d44;
      HEAPF32[i29 >> 2] = d44;
      HEAPF32[i24 >> 2] = +HEAPF32[i30 >> 2];
      i42 = HEAP32[i40 + 188 >> 2] | 0;
      HEAP16[i18 >> 1] = HEAP16[i42 + 4 >> 1] | 0;
      HEAP16[i19 >> 1] = HEAP16[i42 + 6 >> 1] | 0;
      HEAP32[i6 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
      HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
      HEAP32[i32 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
      HEAP32[i32 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
      HEAP32[i32 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
      HEAP32[i32 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
      HEAP32[i34 + 0 >> 2] = HEAP32[i33 + 0 >> 2];
      HEAP32[i34 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
      HEAP32[i34 + 8 >> 2] = HEAP32[i33 + 8 >> 2];
      HEAP32[i34 + 12 >> 2] = HEAP32[i33 + 12 >> 2];
      HEAP32[i35 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
      HEAP32[i35 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
      HEAP32[i35 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
      HEAP32[i35 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
      HEAP32[i6 + 0 >> 2] = HEAP32[i43 + 0 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i43 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i43 + 8 >> 2];
      HEAP32[i6 + 12 >> 2] = HEAP32[i43 + 12 >> 2];
      i42 = i40 + 20 | 0;
      HEAP32[i32 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
      HEAP32[i32 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
      HEAP32[i32 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
      HEAP32[i32 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
      i42 = i40 + 36 | 0;
      HEAP32[i34 + 0 >> 2] = HEAP32[i42 + 0 >> 2];
      HEAP32[i34 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
      HEAP32[i34 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
      HEAP32[i34 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
      __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i9, i5, i43, i6, i4, 0.0);
      d44 = +HEAPF32[i17 >> 2];
      if (d44 < 1.0) {
       HEAPF32[i41 >> 2] = d44;
       __ZN11btRigidBody26predictIntegratedTransformEfR11btTransform(i40, d44 * d8, i3);
       HEAPF32[i41 >> 2] = 0.0;
       __ZN11btRigidBody18proceedToTransformERK11btTransform(i40, i3);
       +__Z22resolveSingleCollisionP11btRigidBodyP17btCollisionObjectRK9btVector3S5_RK19btContactSolverInfof(i40, HEAP32[i11 >> 2] | 0, i12, i13, i14, 0.0);
       i41 = 4;
      } else {
       i41 = 0;
      }
      if ((i41 | 0) == 0) {
       i2 = 11;
      }
     } else {
      i2 = 11;
     }
     if ((i2 | 0) == 11) {
      i2 = 0;
      i41 = 0;
     }
     __ZN15CProfileManager12Stop_ProfileEv();
     if ((i41 | 0) == 4) {
      break;
     }
    }
    __ZN11btRigidBody18proceedToTransformERK11btTransform(i40, i3);
   }
  } while (0);
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) < (HEAP32[i7 >> 2] | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i25;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm20collideSingleContactERK12btQuaternionP17btCollisionObjectS4_RK16btDispatcherInfoP16btManifoldResult(i2, i16, i6, i7, i3, i1) {
 i2 = i2 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, i51 = 0, i52 = 0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i35 = i5 + 48 | 0;
 i34 = i5 + 32 | 0;
 i3 = i5 + 16 | 0;
 i4 = i5;
 i9 = (HEAP8[i2 + 16 | 0] | 0) != 0;
 i8 = i9 ? i7 : i6;
 i36 = i9 ? i6 : i7;
 i51 = HEAP32[i8 + 192 >> 2] | 0;
 i39 = HEAP32[i36 + 192 >> 2] | 0;
 i6 = i39 + 48 | 0;
 d40 = +HEAPF32[i8 + 4 >> 2];
 d20 = +HEAPF32[i8 + 8 >> 2];
 d24 = +HEAPF32[i8 + 12 >> 2];
 d21 = +HEAPF32[i8 + 20 >> 2];
 d25 = +HEAPF32[i8 + 24 >> 2];
 d29 = +HEAPF32[i8 + 28 >> 2];
 d18 = +HEAPF32[i8 + 36 >> 2];
 d22 = +HEAPF32[i8 + 40 >> 2];
 d32 = +HEAPF32[i8 + 44 >> 2];
 d46 = +HEAPF32[i8 + 52 >> 2];
 d45 = +HEAPF32[i8 + 56 >> 2];
 d44 = +HEAPF32[i8 + 60 >> 2];
 i7 = i36 + 4 | 0;
 i15 = i36 + 20 | 0;
 i11 = i36 + 36 | 0;
 i14 = i36 + 8 | 0;
 i13 = i36 + 24 | 0;
 i9 = i36 + 40 | 0;
 i10 = i36 + 12 | 0;
 i12 = i36 + 28 | 0;
 i8 = i36 + 44 | 0;
 d50 = +HEAPF32[i7 >> 2];
 d49 = +HEAPF32[i15 >> 2];
 d27 = +HEAPF32[i11 >> 2];
 d48 = +HEAPF32[i14 >> 2];
 d47 = +HEAPF32[i13 >> 2];
 d31 = +HEAPF32[i9 >> 2];
 d26 = +HEAPF32[i10 >> 2];
 d28 = +HEAPF32[i12 >> 2];
 d30 = +HEAPF32[i8 >> 2];
 i38 = i36 + 52 | 0;
 d43 = -+HEAPF32[i38 >> 2];
 i37 = i36 + 56 | 0;
 d42 = -+HEAPF32[i37 >> 2];
 i36 = i36 + 60 | 0;
 d41 = -+HEAPF32[i36 >> 2];
 d33 = +HEAPF32[i16 >> 2];
 d57 = +HEAPF32[i16 + 4 >> 2];
 d61 = +HEAPF32[i16 + 8 >> 2];
 d63 = +HEAPF32[i16 + 12 >> 2];
 d58 = 2.0 / (d33 * d33 + d57 * d57 + d61 * d61 + d63 * d63);
 d60 = d33 * d58;
 d53 = d57 * d58;
 d58 = d61 * d58;
 d62 = d63 * d60;
 d64 = d63 * d53;
 d63 = d63 * d58;
 d60 = d33 * d60;
 d54 = d33 * d53;
 d33 = d33 * d58;
 d53 = d57 * d53;
 d57 = d57 * d58;
 d58 = d61 * d58;
 d61 = 1.0 - (d53 + d58);
 d55 = d54 - d63;
 d19 = d33 + d64;
 d63 = d54 + d63;
 d58 = 1.0 - (d60 + d58);
 d54 = d57 - d62;
 d64 = d33 - d64;
 d62 = d57 + d62;
 d53 = 1.0 - (d60 + d53);
 d60 = d24 * d64 + (d20 * d63 + d40 * d61);
 d57 = d24 * d62 + (d40 * d55 + d20 * d58);
 d33 = d40 * d19 + d20 * d54 + d24 * d53;
 d59 = d29 * d64 + (d25 * d63 + d21 * d61);
 d56 = d29 * d62 + (d21 * d55 + d25 * d58);
 d23 = d21 * d19 + d25 * d54 + d29 * d53;
 d61 = d32 * d64 + (d22 * d63 + d18 * d61);
 d58 = d32 * d62 + (d18 * d55 + d22 * d58);
 d53 = d18 * d19 + d22 * d54 + d32 * d53;
 i52 = HEAP32[(HEAP32[i51 >> 2] | 0) + 60 >> 2] | 0;
 d54 = -+HEAPF32[i6 >> 2];
 i17 = i39 + 52 | 0;
 d19 = -+HEAPF32[i17 >> 2];
 i16 = i39 + 56 | 0;
 d55 = -+HEAPF32[i16 >> 2];
 HEAPF32[i34 >> 2] = (d30 * d61 + (d26 * d60 + d28 * d59)) * d55 + ((d27 * d61 + (d50 * d60 + d49 * d59)) * d54 + (d31 * d61 + (d48 * d60 + d47 * d59)) * d19);
 HEAPF32[i34 + 4 >> 2] = (d30 * d58 + (d26 * d57 + d28 * d56)) * d55 + ((d27 * d58 + (d50 * d57 + d49 * d56)) * d54 + (d31 * d58 + (d48 * d57 + d47 * d56)) * d19);
 HEAPF32[i34 + 8 >> 2] = (d30 * d53 + (d26 * d33 + d28 * d23)) * d55 + ((d27 * d53 + (d50 * d33 + d49 * d23)) * d54 + (d31 * d53 + (d48 * d33 + d47 * d23)) * d19);
 HEAPF32[i34 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i52 & 63](i35, i51, i34);
 d19 = +HEAPF32[i35 >> 2];
 d23 = +HEAPF32[i35 + 4 >> 2];
 d33 = +HEAPF32[i35 + 8 >> 2];
 d27 = d46 * d50 + d45 * d49 + d44 * d27 + (d50 * d43 + d49 * d42 + d27 * d41) + ((d40 * d50 + d21 * d49 + d18 * d27) * d19 + (d20 * d50 + d25 * d49 + d22 * d27) * d23 + (d24 * d50 + d29 * d49 + d32 * d27) * d33);
 d31 = d46 * d48 + d45 * d47 + d44 * d31 + (d48 * d43 + d47 * d42 + d31 * d41) + ((d40 * d48 + d21 * d47 + d18 * d31) * d19 + (d20 * d48 + d25 * d47 + d22 * d31) * d23 + (d24 * d48 + d29 * d47 + d32 * d31) * d33);
 d33 = d46 * d26 + d45 * d28 + d44 * d30 + (d26 * d43 + d28 * d42 + d30 * d41) + ((d40 * d26 + d21 * d28 + d18 * d30) * d19 + (d20 * d26 + d25 * d28 + d22 * d30) * d23 + (d24 * d26 + d29 * d28 + d32 * d30) * d33);
 d30 = +HEAPF32[i6 >> 2];
 d32 = +HEAPF32[i17 >> 2];
 d28 = +HEAPF32[i16 >> 2];
 d29 = d28 * d33 + (d30 * d27 + d32 * d31) - +HEAPF32[i39 + 64 >> 2];
 d30 = d27 - d30 * d29;
 d32 = d31 - d32 * d29;
 d28 = d33 - d28 * d29;
 d33 = +HEAPF32[i7 >> 2];
 d31 = +HEAPF32[i14 >> 2];
 d27 = +HEAPF32[i10 >> 2];
 d26 = +HEAPF32[i38 >> 2];
 d24 = +HEAPF32[i15 >> 2];
 d23 = +HEAPF32[i13 >> 2];
 d22 = +HEAPF32[i12 >> 2];
 d25 = +HEAPF32[i37 >> 2];
 d20 = +HEAPF32[i11 >> 2];
 d19 = +HEAPF32[i9 >> 2];
 d18 = +HEAPF32[i8 >> 2];
 d21 = +HEAPF32[i36 >> 2];
 i34 = i2 + 12 | 0;
 i35 = d29 < +__ZNK20btPersistentManifold27getContactBreakingThresholdEv(HEAP32[i34 >> 2] | 0);
 HEAP32[i1 + 4 >> 2] = HEAP32[i34 >> 2];
 if (!i35) {
  STACKTOP = i5;
  return;
 }
 d60 = +HEAPF32[i6 >> 2];
 d61 = +HEAPF32[i17 >> 2];
 d62 = +HEAPF32[i16 >> 2];
 d63 = d60 * +HEAPF32[i15 >> 2] + d61 * +HEAPF32[i13 >> 2] + d62 * +HEAPF32[i12 >> 2];
 d64 = d60 * +HEAPF32[i11 >> 2] + d61 * +HEAPF32[i9 >> 2] + d62 * +HEAPF32[i8 >> 2];
 HEAPF32[i3 >> 2] = +HEAPF32[i7 >> 2] * d60 + +HEAPF32[i14 >> 2] * d61 + +HEAPF32[i10 >> 2] * d62;
 HEAPF32[i3 + 4 >> 2] = d63;
 HEAPF32[i3 + 8 >> 2] = d64;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i4 >> 2] = d26 + (d27 * d28 + (d33 * d30 + d31 * d32));
 HEAPF32[i4 + 4 >> 2] = d25 + (d30 * d24 + d32 * d23 + d28 * d22);
 HEAPF32[i4 + 8 >> 2] = d21 + (d30 * d20 + d32 * d19 + d28 * d18);
 HEAPF32[i4 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 7](i1, i3, i4, d29);
 STACKTOP = i5;
 return;
}
function __ZN13BenchmarkDemo11createTest5Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, d16 = 0.0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i8 + 16 | 0;
 i4 = i8;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 d9 = 20.0;
 i2 = 0;
 d7 = -25.0;
 d10 = 2.0;
 while (1) {
  d13 = d10 + 3.0;
  d12 = d9 + 25.0;
  i11 = 0;
  do {
   d14 = (d7 + d13 * +(i11 | 0)) * 5.0 + 0.0;
   i15 = 0;
   do {
    d16 = (d7 + d13 * +(i15 | 0)) * 5.0 + 0.0;
    i17 = (_rand() | 0) % 9 | 0;
    HEAP32[i4 + 0 >> 2] = 0;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = 0;
    HEAP32[i4 + 12 >> 2] = 0;
    switch (i17 | 0) {
    case 2:
    case 1:
    case 0:
     {
      d18 = +(i17 + 1 | 0) * .5;
      i17 = __Z22btAlignedAllocInternalji(56, 16) | 0;
      d22 = d18 * 1.5;
      __ZN23btPolyhedralConvexShapeC2Ev(i17);
      HEAP32[i17 >> 2] = 447328;
      HEAP32[i17 + 4 >> 2] = 0;
      d21 = +HEAPF32[i17 + 44 >> 2];
      d20 = d22 * +HEAPF32[i17 + 16 >> 2] - d21;
      d19 = d22 * +HEAPF32[i17 + 20 >> 2] - d21;
      HEAPF32[i17 + 28 >> 2] = d22 * +HEAPF32[i17 + 12 >> 2] - d21;
      HEAPF32[i17 + 32 >> 2] = d20;
      HEAPF32[i17 + 36 >> 2] = d19;
      HEAPF32[i17 + 40 >> 2] = 0.0;
      HEAP32[i3 + 0 >> 2] = 0;
      HEAP32[i3 + 4 >> 2] = 0;
      HEAP32[i3 + 8 >> 2] = 0;
      HEAP32[i3 + 12 >> 2] = 0;
      if (d18 != 0.0) {
       FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i17 >> 2] | 0) + 32 >> 2] & 7](i17, d18, i3);
      }
      i23 = __Z22btAlignedAllocInternalji(608, 16) | 0;
      __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i23, d18, 0, i17, i3);
      HEAPF32[i23 + 4 >> 2] = 1.0;
      i17 = i23 + 8 | 0;
      HEAP32[i17 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
      HEAP32[i23 + 20 >> 2] = 0;
      HEAPF32[i23 + 24 >> 2] = 1.0;
      i17 = i23 + 28 | 0;
      HEAP32[i17 + 0 >> 2] = 0;
      HEAP32[i17 + 4 >> 2] = 0;
      HEAP32[i17 + 8 >> 2] = 0;
      HEAP32[i17 + 12 >> 2] = 0;
      HEAPF32[i23 + 44 >> 2] = 1.0;
      HEAP32[i23 + 48 >> 2] = 0;
      HEAPF32[i23 + 52 >> 2] = d16;
      HEAPF32[i23 + 56 >> 2] = d12;
      HEAPF32[i23 + 60 >> 2] = d14;
      HEAPF32[i23 + 64 >> 2] = 0.0;
      HEAPF32[i23 + 184 >> 2] = +HEAPF32[i5 >> 2];
      i17 = HEAP32[i6 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 80 >> 2] & 127](i17, i23);
      break;
     }
    case 8:
    case 7:
    case 6:
     {
      d18 = +(i17 + -5 | 0) * .5;
      i17 = __Z22btAlignedAllocInternalji(56, 16) | 0;
      __ZN14btCapsuleShapeC2Eff(i17, d18, d18 * 2.0);
      HEAP32[i3 + 0 >> 2] = 0;
      HEAP32[i3 + 4 >> 2] = 0;
      HEAP32[i3 + 8 >> 2] = 0;
      HEAP32[i3 + 12 >> 2] = 0;
      if (d18 != 0.0) {
       FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i17 >> 2] | 0) + 32 >> 2] & 7](i17, d18, i3);
      }
      i23 = __Z22btAlignedAllocInternalji(608, 16) | 0;
      __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i23, d18, 0, i17, i3);
      HEAPF32[i23 + 4 >> 2] = 1.0;
      i17 = i23 + 8 | 0;
      HEAP32[i17 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
      HEAP32[i23 + 20 >> 2] = 0;
      HEAPF32[i23 + 24 >> 2] = 1.0;
      i17 = i23 + 28 | 0;
      HEAP32[i17 + 0 >> 2] = 0;
      HEAP32[i17 + 4 >> 2] = 0;
      HEAP32[i17 + 8 >> 2] = 0;
      HEAP32[i17 + 12 >> 2] = 0;
      HEAPF32[i23 + 44 >> 2] = 1.0;
      HEAP32[i23 + 48 >> 2] = 0;
      HEAPF32[i23 + 52 >> 2] = d16;
      HEAPF32[i23 + 56 >> 2] = d12;
      HEAPF32[i23 + 60 >> 2] = d14;
      HEAPF32[i23 + 64 >> 2] = 0.0;
      HEAPF32[i23 + 184 >> 2] = +HEAPF32[i5 >> 2];
      i17 = HEAP32[i6 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 80 >> 2] & 127](i17, i23);
      break;
     }
    case 5:
    case 4:
    case 3:
     {
      d18 = +(i17 + -2 | 0) * .5;
      i17 = __Z22btAlignedAllocInternalji(52, 16) | 0;
      d22 = d18 * 1.5;
      __ZN21btConvexInternalShapeC2Ev(i17);
      HEAP32[i17 >> 2] = 456848;
      HEAP32[i17 + 4 >> 2] = 8;
      HEAPF32[i17 + 28 >> 2] = d22;
      HEAPF32[i17 + 44 >> 2] = d22;
      HEAP32[i3 + 0 >> 2] = 0;
      HEAP32[i3 + 4 >> 2] = 0;
      HEAP32[i3 + 8 >> 2] = 0;
      HEAP32[i3 + 12 >> 2] = 0;
      if (d18 != 0.0) {
       FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i17 >> 2] | 0) + 32 >> 2] & 7](i17, d18, i3);
      }
      i23 = __Z22btAlignedAllocInternalji(608, 16) | 0;
      __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i23, d18, 0, i17, i3);
      HEAPF32[i23 + 4 >> 2] = 1.0;
      i17 = i23 + 8 | 0;
      HEAP32[i17 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
      HEAP32[i23 + 20 >> 2] = 0;
      HEAPF32[i23 + 24 >> 2] = 1.0;
      i17 = i23 + 28 | 0;
      HEAP32[i17 + 0 >> 2] = 0;
      HEAP32[i17 + 4 >> 2] = 0;
      HEAP32[i17 + 8 >> 2] = 0;
      HEAP32[i17 + 12 >> 2] = 0;
      HEAPF32[i23 + 44 >> 2] = 1.0;
      HEAP32[i23 + 48 >> 2] = 0;
      HEAPF32[i23 + 52 >> 2] = d16;
      HEAPF32[i23 + 56 >> 2] = d12;
      HEAPF32[i23 + 60 >> 2] = d14;
      HEAPF32[i23 + 64 >> 2] = 0.0;
      HEAPF32[i23 + 184 >> 2] = +HEAPF32[i5 >> 2];
      i17 = HEAP32[i6 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 80 >> 2] & 127](i17, i23);
      break;
     }
    default:
     {}
    }
    i15 = i15 + 1 | 0;
   } while ((i15 | 0) < 10);
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < 10);
  d12 = d10 * 1.100000023841858;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= 10) {
   break;
  } else {
   d9 = d9 + (d12 + 3.0);
   d7 = d7 - d10 * .05000000074505806 * 9.0;
   d10 = d12;
  }
 }
 __ZN13BenchmarkDemo19createLargeMeshBodyEv(i1);
 STACKTOP = i8;
 return;
}
function __ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i34, i13, i10, i18, i2, i12, i35, i5) {
 i34 = i34 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i35 = i35 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i11 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, i61 = 0, i62 = 0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0, d73 = 0.0, d74 = 0.0, d75 = 0.0, d76 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i1;
 d60 = +HEAPF32[i18 >> 2];
 d70 = +HEAPF32[i10 >> 2];
 d76 = d60 - d70;
 d69 = +HEAPF32[i18 + 4 >> 2];
 i3 = i10 + 4 | 0;
 d63 = +HEAPF32[i3 >> 2];
 d17 = d69 - d63;
 d68 = +HEAPF32[i18 + 8 >> 2];
 i18 = i10 + 8 | 0;
 d66 = +HEAPF32[i18 >> 2];
 d75 = d68 - d66;
 d23 = 1.0 / +Math_sqrt(+(d76 * d76 + d17 * d17 + d75 * d75));
 d19 = d76 * d23;
 d20 = d17 * d23;
 d23 = d75 * d23;
 d17 = d75 * d23 + (d76 * d19 + d17 * d20);
 if (d19 == 0.0) {
  d19 = 999999984306749400.0;
 } else {
  d19 = 1.0 / d19;
 }
 if (d20 == 0.0) {
  d20 = 999999984306749400.0;
 } else {
  d20 = 1.0 / d20;
 }
 if (d23 == 0.0) {
  d23 = 999999984306749400.0;
 } else {
  d23 = 1.0 / d23;
 }
 i40 = d19 < 0.0 | 0;
 i39 = d20 < 0.0 | 0;
 i37 = d23 < 0.0 | 0;
 d65 = (d60 < d70 ? d60 : d70) + +HEAPF32[i2 >> 2];
 i22 = i2 + 4 | 0;
 d64 = (d69 < d63 ? d69 : d63) + +HEAPF32[i22 >> 2];
 i21 = i2 + 8 | 0;
 d67 = (d68 < d66 ? d68 : d66) + +HEAPF32[i21 >> 2];
 d60 = (d70 < d60 ? d60 : d70) + +HEAPF32[i12 >> 2];
 i24 = i12 + 4 | 0;
 d63 = (d63 < d69 ? d69 : d63) + +HEAPF32[i24 >> 2];
 i25 = i12 + 8 | 0;
 d69 = (d66 < d68 ? d68 : d66) + +HEAPF32[i25 >> 2];
 i26 = i34 + 4 | 0;
 d66 = +HEAPF32[i26 >> 2];
 d76 = d65 < d66 ? d66 : d65;
 i27 = i34 + 8 | 0;
 d65 = +HEAPF32[i27 >> 2];
 d75 = d64 < d65 ? d65 : d64;
 i28 = i34 + 12 | 0;
 d64 = +HEAPF32[i28 >> 2];
 d74 = d67 < d64 ? d64 : d67;
 d72 = +HEAPF32[i34 + 20 >> 2];
 d70 = +HEAPF32[i34 + 24 >> 2];
 d68 = +HEAPF32[i34 + 28 >> 2];
 i31 = i34 + 36 | 0;
 d73 = +HEAPF32[i31 >> 2];
 i30 = i34 + 40 | 0;
 d71 = +HEAPF32[i30 >> 2];
 i29 = i34 + 44 | 0;
 d67 = +HEAPF32[i29 >> 2];
 i32 = ~~(((d72 < d76 ? d72 : d76) - d66) * d73) & 65535 & 65534;
 i33 = ~~(((d70 < d75 ? d70 : d75) - d65) * d71) & 65535 & 65534;
 i36 = ~~(((d68 < d74 ? d68 : d74) - d64) * d67) & 65535 & 65534;
 d74 = d60 < d66 ? d66 : d60;
 d63 = d63 < d65 ? d65 : d63;
 d60 = d69 < d64 ? d64 : d69;
 i38 = (~~(((d72 < d74 ? d72 : d74) - d66) * d73 + 1.0) & 65535 | 1) & 65535;
 i41 = (~~(((d70 < d63 ? d70 : d63) - d65) * d71 + 1.0) & 65535 | 1) & 65535;
 i46 = (~~(((d68 < d60 ? d68 : d60) - d64) * d67 + 1.0) & 65535 | 1) & 65535;
 if ((i35 | 0) < (i5 | 0)) {
  i47 = i11 + 4 | 0;
  i49 = i11 + 8 | 0;
  i44 = i11 + 12 | 0;
  i43 = i11 + 16 | 0;
  i42 = i11 + 20 | 0;
  i48 = i11 + 24 | 0;
  i50 = i11 + 28 | 0;
  i45 = i11 + (i40 << 4) | 0;
  i40 = i11 + ((i40 ^ 1) << 4) | 0;
  i51 = i11 + (i39 << 4) + 4 | 0;
  i39 = i11 + ((i39 ^ 1) << 4) + 4 | 0;
  i52 = i11 + (i37 << 4) + 8 | 0;
  i37 = i11 + ((i37 ^ 1) << 4) + 8 | 0;
  i53 = i35;
  i35 = (HEAP32[i34 + 136 >> 2] | 0) + (i35 << 4) | 0;
  i34 = 0;
  do {
   i34 = i34 + 1 | 0;
   i58 = i35 + 6 | 0;
   i62 = HEAP16[i35 >> 1] | 0;
   i56 = i35 + 10 | 0;
   i61 = HEAP16[i35 + 4 >> 1] | 0;
   i57 = i35 + 8 | 0;
   i59 = HEAP16[i35 + 2 >> 1] | 0;
   i54 = i35 + 12 | 0;
   i55 = (HEAP32[i54 >> 2] | 0) > -1;
   if ((((i32 & 65535) <= (HEAPU16[i58 >> 1] | 0) & (i38 & 65535) >= (i62 & 65535) & (i36 & 65535) <= (HEAPU16[i56 >> 1] | 0) & (i46 & 65535) >= (i61 & 65535) & (i33 & 65535) <= (HEAPU16[i57 >> 1] | 0) & (i41 & 65535) >= (i59 & 65535) ? (d72 = +HEAPF32[i31 >> 2], d74 = +HEAPF32[i30 >> 2], d76 = +HEAPF32[i29 >> 2], d73 = +HEAPF32[i26 >> 2], d75 = +HEAPF32[i27 >> 2], d7 = +HEAPF32[i28 >> 2], HEAPF32[i44 >> 2] = 0.0, d9 = +(HEAPU16[i58 >> 1] | 0) / d72 + d73, d6 = +(HEAPU16[i57 >> 1] | 0) / d74 + d75, d8 = +(HEAPU16[i56 >> 1] | 0) / d76 + d7, HEAPF32[i50 >> 2] = 0.0, HEAPF32[i11 >> 2] = +(i62 & 65535) / d72 + d73 - +HEAPF32[i12 >> 2], HEAPF32[i47 >> 2] = +(i59 & 65535) / d74 + d75 - +HEAPF32[i24 >> 2], HEAPF32[i49 >> 2] = +(i61 & 65535) / d76 + d7 - +HEAPF32[i25 >> 2], HEAPF32[i43 >> 2] = d9 - +HEAPF32[i2 >> 2], HEAPF32[i42 >> 2] = d6 - +HEAPF32[i22 >> 2], HEAPF32[i48 >> 2] = d8 - +HEAPF32[i21 >> 2], d8 = +HEAPF32[i10 >> 2], d6 = d19 * (+HEAPF32[i45 >> 2] - d8), d8 = d19 * (+HEAPF32[i40 >> 2] - d8), d9 = +HEAPF32[i3 >> 2], d7 = d20 * (+HEAPF32[i51 >> 2] - d9), d9 = d20 * (+HEAPF32[i39 >> 2] - d9), !(d6 > d9 | d7 > d8)) : 0) ? (d16 = d7 > d6 ? d7 : d6, d14 = d9 < d8 ? d9 : d8, d4 = +HEAPF32[i18 >> 2], d15 = d23 * (+HEAPF32[i52 >> 2] - d4), d4 = d23 * (+HEAPF32[i37 >> 2] - d4), !(d16 > d4 | d15 > d14)) : 0) ? (d15 > d16 ? d15 : d16) < d17 : 0) {
    i57 = !((d4 < d14 ? d4 : d14) > 0.0);
    if (i57 | i55 ^ 1) {
     i56 = 15;
    } else {
     i56 = HEAP32[i54 >> 2] | 0;
     FUNCTION_TABLE_viii[HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] & 63](i13, i56 >> 21, i56 & 2097151);
     i56 = 16;
    }
   } else {
    i57 = 1;
    i56 = 15;
   }
   if ((i56 | 0) == 15) {
    i56 = 0;
    if (i55 | i57 ^ 1) {
     i56 = 16;
    } else {
     i62 = HEAP32[i54 >> 2] | 0;
     i53 = i53 - i62 | 0;
     i35 = i35 + (0 - i62 << 4) | 0;
    }
   }
   if ((i56 | 0) == 16) {
    i53 = i53 + 1 | 0;
    i35 = i35 + 16 | 0;
   }
  } while ((i53 | 0) < (i5 | 0));
 } else {
  i34 = 0;
 }
 if ((HEAP32[114066] | 0) >= (i34 | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[114066] = i34;
 STACKTOP = i1;
 return;
}
function __ZN16btManifoldResult15addContactPointERK9btVector3S2_f(i6, i12, i7, d11) {
 i6 = i6 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 d11 = +d11;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, i25 = 0, i26 = 0, i27 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i4 = i2;
 i3 = i6 + 4 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 if (+HEAPF32[i5 + 1124 >> 2] < d11) {
  STACKTOP = i2;
  return;
 }
 i1 = i6 + 136 | 0;
 i5 = (HEAP32[i5 + 1108 >> 2] | 0) != (HEAP32[i1 >> 2] | 0);
 d14 = +HEAPF32[i7 >> 2];
 d8 = +HEAPF32[i12 >> 2] * d11 + d14;
 d16 = +HEAPF32[i7 + 4 >> 2];
 d9 = +HEAPF32[i12 + 4 >> 2] * d11 + d16;
 d15 = +HEAPF32[i7 + 8 >> 2];
 d10 = +HEAPF32[i12 + 8 >> 2] * d11 + d15;
 if (i5) {
  d17 = d8 - +HEAPF32[i6 + 120 >> 2];
  d18 = d9 - +HEAPF32[i6 + 124 >> 2];
  d19 = d10 - +HEAPF32[i6 + 128 >> 2];
  d24 = d14 - +HEAPF32[i6 + 56 >> 2];
  d23 = d16 - +HEAPF32[i6 + 60 >> 2];
  d16 = d15 - +HEAPF32[i6 + 64 >> 2];
  d14 = d17 * +HEAPF32[i6 + 72 >> 2] + d18 * +HEAPF32[i6 + 88 >> 2] + d19 * +HEAPF32[i6 + 104 >> 2];
  d15 = d17 * +HEAPF32[i6 + 76 >> 2] + d18 * +HEAPF32[i6 + 92 >> 2] + d19 * +HEAPF32[i6 + 108 >> 2];
  d19 = d17 * +HEAPF32[i6 + 80 >> 2] + d18 * +HEAPF32[i6 + 96 >> 2] + d19 * +HEAPF32[i6 + 112 >> 2];
  d18 = d24 * +HEAPF32[i6 + 8 >> 2] + d23 * +HEAPF32[i6 + 24 >> 2] + d16 * +HEAPF32[i6 + 40 >> 2];
  d17 = d24 * +HEAPF32[i6 + 12 >> 2] + d23 * +HEAPF32[i6 + 28 >> 2] + d16 * +HEAPF32[i6 + 44 >> 2];
  d16 = d24 * +HEAPF32[i6 + 16 >> 2] + d23 * +HEAPF32[i6 + 32 >> 2] + d16 * +HEAPF32[i6 + 48 >> 2];
 } else {
  d17 = d8 - +HEAPF32[i6 + 56 >> 2];
  d18 = d9 - +HEAPF32[i6 + 60 >> 2];
  d19 = d10 - +HEAPF32[i6 + 64 >> 2];
  d23 = d14 - +HEAPF32[i6 + 120 >> 2];
  d24 = d16 - +HEAPF32[i6 + 124 >> 2];
  d16 = d15 - +HEAPF32[i6 + 128 >> 2];
  d14 = d17 * +HEAPF32[i6 + 8 >> 2] + d18 * +HEAPF32[i6 + 24 >> 2] + d19 * +HEAPF32[i6 + 40 >> 2];
  d15 = d17 * +HEAPF32[i6 + 12 >> 2] + d18 * +HEAPF32[i6 + 28 >> 2] + d19 * +HEAPF32[i6 + 44 >> 2];
  d19 = d17 * +HEAPF32[i6 + 16 >> 2] + d18 * +HEAPF32[i6 + 32 >> 2] + d19 * +HEAPF32[i6 + 48 >> 2];
  d18 = d23 * +HEAPF32[i6 + 72 >> 2] + d24 * +HEAPF32[i6 + 88 >> 2] + d16 * +HEAPF32[i6 + 104 >> 2];
  d17 = d23 * +HEAPF32[i6 + 76 >> 2] + d24 * +HEAPF32[i6 + 92 >> 2] + d16 * +HEAPF32[i6 + 108 >> 2];
  d16 = d23 * +HEAPF32[i6 + 80 >> 2] + d24 * +HEAPF32[i6 + 96 >> 2] + d16 * +HEAPF32[i6 + 112 >> 2];
 }
 HEAPF32[i4 >> 2] = d14;
 HEAPF32[i4 + 4 >> 2] = d15;
 HEAPF32[i4 + 8 >> 2] = d19;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAPF32[i4 + 16 >> 2] = d18;
 HEAPF32[i4 + 20 >> 2] = d17;
 HEAPF32[i4 + 24 >> 2] = d16;
 HEAPF32[i4 + 28 >> 2] = 0.0;
 i13 = i4 + 64 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
 HEAPF32[i4 + 80 >> 2] = d11;
 i13 = i4 + 84 | 0;
 HEAPF32[i13 >> 2] = 0.0;
 i12 = i4 + 88 | 0;
 HEAPF32[i12 >> 2] = 0.0;
 HEAP32[i4 + 108 >> 2] = 0;
 HEAPF32[i4 + 112 >> 2] = 0.0;
 HEAP8[i4 + 116 | 0] = 0;
 i20 = i4 + 120 | 0;
 HEAPF32[i4 + 208 >> 2] = 0.0;
 HEAPF32[i4 + 240 >> 2] = 0.0;
 HEAPF32[i4 + 272 >> 2] = 0.0;
 HEAP32[i20 + 0 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 HEAP32[i20 + 12 >> 2] = 0;
 HEAP32[i20 + 16 >> 2] = 0;
 HEAP32[i20 + 20 >> 2] = 0;
 HEAP32[i20 + 24 >> 2] = 0;
 HEAPF32[i4 + 48 >> 2] = d8;
 HEAPF32[i4 + 52 >> 2] = d9;
 HEAPF32[i4 + 56 >> 2] = d10;
 HEAPF32[i4 + 60 >> 2] = 0.0;
 i20 = i4 + 32 | 0;
 HEAP32[i20 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i20 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i20 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i20 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i20 = __ZNK20btPersistentManifold13getCacheEntryERK15btManifoldPoint(HEAP32[i3 >> 2] | 0, i4) | 0;
 i21 = HEAP32[i1 >> 2] | 0;
 i7 = i6 + 140 | 0;
 i22 = HEAP32[i7 >> 2] | 0;
 d8 = +HEAPF32[i21 + 224 >> 2] * +HEAPF32[i22 + 224 >> 2];
 d8 = d8 < -10.0 ? -10.0 : d8;
 HEAPF32[i13 >> 2] = d8 > 10.0 ? 10.0 : d8;
 HEAPF32[i12 >> 2] = +HEAPF32[i21 + 228 >> 2] * +HEAPF32[i22 + 228 >> 2];
 if (i5) {
  HEAP32[i4 + 92 >> 2] = HEAP32[i6 + 148 >> 2];
  HEAP32[i4 + 96 >> 2] = HEAP32[i6 + 144 >> 2];
  HEAP32[i4 + 100 >> 2] = HEAP32[i6 + 156 >> 2];
  HEAP32[i4 + 104 >> 2] = HEAP32[i6 + 152 >> 2];
 } else {
  HEAP32[i4 + 92 >> 2] = HEAP32[i6 + 144 >> 2];
  HEAP32[i4 + 96 >> 2] = HEAP32[i6 + 148 >> 2];
  HEAP32[i4 + 100 >> 2] = HEAP32[i6 + 152 >> 2];
  HEAP32[i4 + 104 >> 2] = HEAP32[i6 + 156 >> 2];
 }
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i20 | 0) > -1) {
  i22 = i6 + (i20 * 276 | 0) + 148 | 0;
  i21 = HEAP32[i22 >> 2] | 0;
  i25 = i6 + (i20 * 276 | 0) + 212 | 0;
  d19 = +HEAPF32[i25 >> 2];
  i12 = i6 + (i20 * 276 | 0) + 244 | 0;
  d23 = +HEAPF32[i12 >> 2];
  i13 = i6 + (i20 * 276 | 0) + 276 | 0;
  d24 = +HEAPF32[i13 >> 2];
  i26 = i6 + (i20 * 276 | 0) + 112 | 0;
  i27 = HEAP32[i26 >> 2] | 0;
  _memcpy(i6 + (i20 * 276 | 0) + 4 | 0, i4 | 0, 276) | 0;
  HEAP32[i26 >> 2] = i27;
  HEAPF32[i6 + (i20 * 276 | 0) + 116 >> 2] = d19;
  HEAPF32[i6 + (i20 * 276 | 0) + 124 >> 2] = d23;
  HEAPF32[i6 + (i20 * 276 | 0) + 128 >> 2] = d24;
  HEAPF32[i25 >> 2] = d19;
  HEAPF32[i12 >> 2] = d23;
  HEAPF32[i13 >> 2] = d24;
  HEAP32[i22 >> 2] = i21;
 } else {
  i20 = __ZN20btPersistentManifold16addManifoldPointERK15btManifoldPoint(i6, i4) | 0;
 }
 i6 = HEAP32[113372] | 0;
 if ((i6 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i1 >> 2] | 0) + 204 >> 2] & 8 | 0) == 0 ? (HEAP32[(HEAP32[i7 >> 2] | 0) + 204 >> 2] & 8 | 0) == 0 : 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_iiiiiiii[i6 & 0]((HEAP32[i3 >> 2] | 0) + (i20 * 276 | 0) + 4 | 0, HEAP32[(i5 ? i7 : i1) >> 2] | 0, HEAP32[i4 + 92 >> 2] | 0, HEAP32[i4 + 100 >> 2] | 0, HEAP32[(i5 ? i1 : i7) >> 2] | 0, HEAP32[i4 + 96 >> 2] | 0, HEAP32[i4 + 104 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}
function __ZN14btQuantizedBvh25sortAndCalcSplittingIndexEiii(i8, i3, i1, i9) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, i31 = 0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i2 + 96 | 0;
 i7 = i2 + 32 | 0;
 i14 = i2 + 16 | 0;
 i5 = i2;
 i4 = i1 - i3 | 0;
 i13 = i14 + 4 | 0;
 i12 = i14 + 8 | 0;
 i11 = (i3 | 0) < (i1 | 0);
 HEAP32[i14 + 0 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 if (i11) {
  i18 = (HEAP8[i8 + 60 | 0] | 0) == 0;
  i19 = i8 + 76 | 0;
  i21 = i8 + 116 | 0;
  i22 = i8 + 36 | 0;
  i31 = i8 + 40 | 0;
  i16 = i8 + 44 | 0;
  i23 = i8 + 4 | 0;
  i15 = i8 + 8 | 0;
  i17 = i8 + 12 | 0;
  d29 = 0.0;
  d24 = 0.0;
  d10 = 0.0;
  i20 = i3;
  do {
   if (i18) {
    i36 = HEAP32[i19 >> 2] | 0;
    i35 = HEAP32[i19 >> 2] | 0;
    d27 = +HEAPF32[i35 + (i20 << 6) >> 2];
    d28 = +HEAPF32[i36 + (i20 << 6) + 16 >> 2];
    d26 = +HEAPF32[i35 + (i20 << 6) + 4 >> 2];
    d30 = +HEAPF32[i36 + (i20 << 6) + 20 >> 2];
    d32 = +HEAPF32[i35 + (i20 << 6) + 8 >> 2];
    d25 = +HEAPF32[i36 + (i20 << 6) + 24 >> 2];
   } else {
    i36 = HEAP32[i21 >> 2] | 0;
    i35 = HEAP32[i21 >> 2] | 0;
    d27 = +(HEAPU16[i35 + (i20 << 4) >> 1] | 0) / +HEAPF32[i22 >> 2] + +HEAPF32[i23 >> 2];
    d28 = +(HEAPU16[i36 + (i20 << 4) + 6 >> 1] | 0) / +HEAPF32[i22 >> 2] + +HEAPF32[i23 >> 2];
    d26 = +(HEAPU16[i35 + (i20 << 4) + 2 >> 1] | 0) / +HEAPF32[i31 >> 2] + +HEAPF32[i15 >> 2];
    d30 = +(HEAPU16[i36 + (i20 << 4) + 8 >> 1] | 0) / +HEAPF32[i31 >> 2] + +HEAPF32[i15 >> 2];
    d32 = +(HEAPU16[i35 + (i20 << 4) + 4 >> 1] | 0) / +HEAPF32[i16 >> 2] + +HEAPF32[i17 >> 2];
    d25 = +(HEAPU16[i36 + (i20 << 4) + 10 >> 1] | 0) / +HEAPF32[i16 >> 2] + +HEAPF32[i17 >> 2];
   }
   d29 = d29 + (d28 + d27) * .5;
   d24 = (d30 + d26) * .5 + d24;
   d10 = (d25 + d32) * .5 + d10;
   i20 = i20 + 1 | 0;
  } while ((i20 | 0) != (i1 | 0));
  HEAPF32[i14 >> 2] = d29;
  HEAPF32[i13 >> 2] = d24;
  HEAPF32[i12 >> 2] = d10;
 } else {
  d29 = 0.0;
  d24 = 0.0;
  d10 = 0.0;
 }
 d32 = 1.0 / +(i4 | 0);
 HEAPF32[i14 >> 2] = d32 * d29;
 HEAPF32[i13 >> 2] = d32 * d24;
 HEAPF32[i12 >> 2] = d32 * d10;
 d10 = +HEAPF32[i14 + (i9 << 2) >> 2];
 if (i11) {
  i13 = i8 + 60 | 0;
  i11 = i8 + 76 | 0;
  i14 = i5 + 4 | 0;
  i12 = i5 + 8 | 0;
  i15 = i5 + 12 | 0;
  i19 = i5 + (i9 << 2) | 0;
  i21 = i8 + 116 | 0;
  i18 = i8 + 36 | 0;
  i9 = i8 + 40 | 0;
  i16 = i8 + 44 | 0;
  i17 = i8 + 4 | 0;
  i20 = i8 + 8 | 0;
  i8 = i8 + 12 | 0;
  i22 = i3;
  i23 = i3;
  do {
   i31 = (HEAP8[i13] | 0) == 0;
   if (i31) {
    i36 = HEAP32[i11 >> 2] | 0;
    i35 = HEAP32[i11 >> 2] | 0;
    d28 = +HEAPF32[i35 + (i22 << 6) >> 2];
    d29 = +HEAPF32[i36 + (i22 << 6) + 16 >> 2];
    d27 = +HEAPF32[i35 + (i22 << 6) + 4 >> 2];
    d24 = +HEAPF32[i36 + (i22 << 6) + 20 >> 2];
    d25 = +HEAPF32[i35 + (i22 << 6) + 8 >> 2];
    d26 = +HEAPF32[i36 + (i22 << 6) + 24 >> 2];
   } else {
    i36 = HEAP32[i21 >> 2] | 0;
    i35 = HEAP32[i21 >> 2] | 0;
    d28 = +(HEAPU16[i35 + (i22 << 4) >> 1] | 0) / +HEAPF32[i18 >> 2] + +HEAPF32[i17 >> 2];
    d29 = +(HEAPU16[i36 + (i22 << 4) + 6 >> 1] | 0) / +HEAPF32[i18 >> 2] + +HEAPF32[i17 >> 2];
    d27 = +(HEAPU16[i35 + (i22 << 4) + 2 >> 1] | 0) / +HEAPF32[i9 >> 2] + +HEAPF32[i20 >> 2];
    d24 = +(HEAPU16[i36 + (i22 << 4) + 8 >> 1] | 0) / +HEAPF32[i9 >> 2] + +HEAPF32[i20 >> 2];
    d25 = +(HEAPU16[i35 + (i22 << 4) + 4 >> 1] | 0) / +HEAPF32[i16 >> 2] + +HEAPF32[i8 >> 2];
    d26 = +(HEAPU16[i36 + (i22 << 4) + 10 >> 1] | 0) / +HEAPF32[i16 >> 2] + +HEAPF32[i8 >> 2];
   }
   HEAPF32[i5 >> 2] = (d29 + d28) * .5;
   HEAPF32[i14 >> 2] = (d24 + d27) * .5;
   HEAPF32[i12 >> 2] = (d26 + d25) * .5;
   HEAPF32[i15 >> 2] = 0.0;
   if (+HEAPF32[i19 >> 2] > d10) {
    if (i31) {
     i31 = HEAP32[i11 >> 2] | 0;
     i33 = i31 + (i22 << 6) | 0;
     i35 = i7 + 0 | 0;
     i36 = i33 + 0 | 0;
     i34 = i35 + 64 | 0;
     do {
      HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
      i35 = i35 + 4 | 0;
      i36 = i36 + 4 | 0;
     } while ((i35 | 0) < (i34 | 0));
     i35 = i33 + 0 | 0;
     i36 = i31 + (i23 << 6) + 0 | 0;
     i34 = i35 + 64 | 0;
     do {
      HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
      i35 = i35 + 4 | 0;
      i36 = i36 + 4 | 0;
     } while ((i35 | 0) < (i34 | 0));
     i35 = (HEAP32[i11 >> 2] | 0) + (i23 << 6) + 0 | 0;
     i36 = i7 + 0 | 0;
     i34 = i35 + 64 | 0;
     do {
      HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
      i35 = i35 + 4 | 0;
      i36 = i36 + 4 | 0;
     } while ((i35 | 0) < (i34 | 0));
    } else {
     i35 = HEAP32[i21 >> 2] | 0;
     i36 = i35 + (i22 << 4) | 0;
     HEAP32[i6 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
     i35 = i35 + (i23 << 4) | 0;
     HEAP32[i36 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
     HEAP32[i36 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
     HEAP32[i36 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
     HEAP32[i36 + 12 >> 2] = HEAP32[i35 + 12 >> 2];
     i36 = (HEAP32[i21 >> 2] | 0) + (i23 << 4) | 0;
     HEAP32[i36 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
     HEAP32[i36 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i36 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i36 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
    }
    i23 = i23 + 1 | 0;
   }
   i22 = i22 + 1 | 0;
  } while ((i22 | 0) != (i1 | 0));
 } else {
  i23 = i3;
 }
 i5 = (i4 | 0) / 3 | 0;
 if ((i23 | 0) > (i5 + i3 | 0) ? (i23 | 0) < (i1 + -1 - i5 | 0) : 0) {
  i36 = i23;
  STACKTOP = i2;
  return i36 | 0;
 }
 i36 = (i4 >> 1) + i3 | 0;
 STACKTOP = i2;
 return i36 | 0;
}
function __ZN7RagDoll20localCreateRigidBodyEfRK11btTransformP16btCollisionShape(i7, d5, i1, i6) {
 i7 = i7 | 0;
 d5 = +d5;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i3 = i4 + 136 | 0;
 i2 = i4;
 i8 = d5 != 0.0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 if (i8) {
  FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 7](i6, d5, i3);
 }
 i8 = __Znwj(200) | 0;
 if ((HEAP8[444280] | 0) == 0 ? (___cxa_guard_acquire(444280) | 0) != 0 : 0) {
  if ((HEAP8[444336] | 0) == 0 ? (___cxa_guard_acquire(444336) | 0) != 0 : 0) {
   HEAPF32[111072] = 1.0;
   HEAP32[444292 >> 2] = 0;
   HEAP32[444296 >> 2] = 0;
   HEAP32[444300 >> 2] = 0;
   HEAP32[444304 >> 2] = 0;
   HEAPF32[444308 >> 2] = 1.0;
   HEAP32[444312 >> 2] = 0;
   HEAP32[444316 >> 2] = 0;
   HEAP32[444320 >> 2] = 0;
   HEAP32[444324 >> 2] = 0;
   HEAPF32[444328 >> 2] = 1.0;
   HEAPF32[444332 >> 2] = 0.0;
   ___cxa_guard_release(444336);
  }
  HEAP32[444216 >> 2] = HEAP32[444288 >> 2];
  HEAP32[444220 >> 2] = HEAP32[444292 >> 2];
  HEAP32[444224 >> 2] = HEAP32[444296 >> 2];
  HEAP32[444228 >> 2] = HEAP32[444300 >> 2];
  HEAP32[444232 >> 2] = HEAP32[444304 >> 2];
  HEAP32[444236 >> 2] = HEAP32[444308 >> 2];
  HEAP32[444240 >> 2] = HEAP32[444312 >> 2];
  HEAP32[444244 >> 2] = HEAP32[444316 >> 2];
  HEAP32[444248 >> 2] = HEAP32[444320 >> 2];
  HEAP32[444252 >> 2] = HEAP32[444324 >> 2];
  HEAP32[444256 >> 2] = HEAP32[444328 >> 2];
  HEAP32[444260 >> 2] = HEAP32[444332 >> 2];
  HEAP32[444264 >> 2] = 0;
  HEAP32[444268 >> 2] = 0;
  HEAP32[444272 >> 2] = 0;
  HEAP32[444276 >> 2] = 0;
  ___cxa_guard_release(444280);
 }
 HEAP32[i8 >> 2] = 444352;
 i12 = i8 + 4 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i12 = i8 + 20 | 0;
 i11 = i1 + 16 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i12 = i8 + 36 | 0;
 i10 = i1 + 32 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i12 = i8 + 52 | 0;
 i9 = i1 + 48 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i12 = i8 + 68 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[444216 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[444220 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[444224 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[444228 >> 2];
 i12 = i8 + 84 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[444232 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[444236 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[444240 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[444244 >> 2];
 i12 = i8 + 100 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[444248 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[444252 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[444256 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[444260 >> 2];
 i12 = i8 + 116 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[444264 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[444268 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[444272 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[444276 >> 2];
 i12 = i8 + 132 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = i8 + 148 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i1 = i8 + 164 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i1 = i8 + 180 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i8 + 196 >> 2] = 0;
 HEAPF32[i2 >> 2] = d5;
 HEAP32[i2 + 4 >> 2] = i8;
 HEAP32[i2 + 72 >> 2] = i6;
 i8 = i2 + 76 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i2 + 92 >> 2] = 0.0;
 HEAPF32[i2 + 96 >> 2] = 0.0;
 HEAPF32[i2 + 100 >> 2] = .5;
 HEAPF32[i2 + 104 >> 2] = 0.0;
 HEAPF32[i2 + 108 >> 2] = .800000011920929;
 HEAPF32[i2 + 112 >> 2] = 1.0;
 HEAP8[i2 + 116 | 0] = 0;
 HEAPF32[i2 + 120 >> 2] = .004999999888241291;
 HEAPF32[i2 + 124 >> 2] = .009999999776482582;
 HEAPF32[i2 + 128 >> 2] = .009999999776482582;
 HEAPF32[i2 + 132 >> 2] = .009999999776482582;
 HEAPF32[i2 + 8 >> 2] = 1.0;
 i8 = i2 + 12 | 0;
 i6 = i2 + 28 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAPF32[i6 >> 2] = 1.0;
 i6 = i2 + 32 | 0;
 i8 = i2 + 48 | 0;
 HEAP32[i6 + 0 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAPF32[i8 >> 2] = 1.0;
 i8 = i2 + 52 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i8 = __Z22btAlignedAllocInternalji(608, 16) | 0;
 __ZN11btRigidBodyC2ERKNS_27btRigidBodyConstructionInfoE(i8, i2);
 i7 = HEAP32[i7 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 80 >> 2] & 127](i7, i8);
 STACKTOP = i4;
 return i8 | 0;
}
function __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i1, i7, i8) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0, i32 = 0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0;
 i5 = STACKTOP;
 i2 = i1 + 1116 | 0;
 i30 = HEAP32[i2 >> 2] | 0;
 if ((i30 | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i10 = i7 + 4 | 0;
 i11 = i7 + 8 | 0;
 i9 = i7 + 48 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 20 | 0;
 i15 = i7 + 24 | 0;
 i12 = i7 + 52 | 0;
 i17 = i7 + 32 | 0;
 i18 = i7 + 36 | 0;
 i19 = i7 + 40 | 0;
 i16 = i7 + 56 | 0;
 i21 = i8 + 4 | 0;
 i22 = i8 + 8 | 0;
 i20 = i8 + 48 | 0;
 i24 = i8 + 16 | 0;
 i25 = i8 + 20 | 0;
 i26 = i8 + 24 | 0;
 i23 = i8 + 52 | 0;
 i28 = i8 + 32 | 0;
 i29 = i8 + 36 | 0;
 i6 = i8 + 40 | 0;
 i27 = i8 + 56 | 0;
 do {
  i30 = i30 + -1 | 0;
  d38 = +HEAPF32[i1 + (i30 * 276 | 0) + 4 >> 2];
  d39 = +HEAPF32[i1 + (i30 * 276 | 0) + 8 >> 2];
  d33 = +HEAPF32[i1 + (i30 * 276 | 0) + 12 >> 2];
  d37 = +HEAPF32[i9 >> 2] + (+HEAPF32[i7 >> 2] * d38 + +HEAPF32[i10 >> 2] * d39 + +HEAPF32[i11 >> 2] * d33);
  d35 = +HEAPF32[i12 >> 2] + (d38 * +HEAPF32[i13 >> 2] + d39 * +HEAPF32[i14 >> 2] + d33 * +HEAPF32[i15 >> 2]);
  d33 = +HEAPF32[i16 >> 2] + (d38 * +HEAPF32[i17 >> 2] + d39 * +HEAPF32[i18 >> 2] + d33 * +HEAPF32[i19 >> 2]);
  HEAPF32[i1 + (i30 * 276 | 0) + 52 >> 2] = d37;
  HEAPF32[i1 + (i30 * 276 | 0) + 56 >> 2] = d35;
  HEAPF32[i1 + (i30 * 276 | 0) + 60 >> 2] = d33;
  HEAPF32[i1 + (i30 * 276 | 0) + 64 >> 2] = 0.0;
  d39 = +HEAPF32[i1 + (i30 * 276 | 0) + 20 >> 2];
  d38 = +HEAPF32[i1 + (i30 * 276 | 0) + 24 >> 2];
  d31 = +HEAPF32[i1 + (i30 * 276 | 0) + 28 >> 2];
  d36 = +HEAPF32[i20 >> 2] + (+HEAPF32[i8 >> 2] * d39 + +HEAPF32[i21 >> 2] * d38 + +HEAPF32[i22 >> 2] * d31);
  d34 = +HEAPF32[i23 >> 2] + (d39 * +HEAPF32[i24 >> 2] + d38 * +HEAPF32[i25 >> 2] + d31 * +HEAPF32[i26 >> 2]);
  d31 = +HEAPF32[i27 >> 2] + (d39 * +HEAPF32[i28 >> 2] + d38 * +HEAPF32[i29 >> 2] + d31 * +HEAPF32[i6 >> 2]);
  HEAPF32[i1 + (i30 * 276 | 0) + 36 >> 2] = d36;
  HEAPF32[i1 + (i30 * 276 | 0) + 40 >> 2] = d34;
  HEAPF32[i1 + (i30 * 276 | 0) + 44 >> 2] = d31;
  HEAPF32[i1 + (i30 * 276 | 0) + 48 >> 2] = 0.0;
  HEAPF32[i1 + (i30 * 276 | 0) + 84 >> 2] = (d37 - d36) * +HEAPF32[i1 + (i30 * 276 | 0) + 68 >> 2] + (d35 - d34) * +HEAPF32[i1 + (i30 * 276 | 0) + 72 >> 2] + (d33 - d31) * +HEAPF32[i1 + (i30 * 276 | 0) + 76 >> 2];
  i32 = i1 + (i30 * 276 | 0) + 148 | 0;
  HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
 } while ((i30 | 0) > 0);
 i10 = HEAP32[i2 >> 2] | 0;
 if ((i10 | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i8 = i1 + 1120 | 0;
 i9 = i1 + 1124 | 0;
 i6 = i1 + 1108 | 0;
 i7 = i1 + 1112 | 0;
 do {
  i10 = i10 + -1 | 0;
  i11 = i1 + (i10 * 276 | 0) + 4 | 0;
  d31 = +HEAPF32[i1 + (i10 * 276 | 0) + 84 >> 2];
  do {
   if (!(d31 <= +HEAPF32[((HEAP32[i1 + (i10 * 276 | 0) + 148 >> 2] | 0) > 1 ? i8 : i9) >> 2])) {
    i13 = i1 + (i10 * 276 | 0) + 112 | 0;
    i12 = HEAP32[i13 >> 2] | 0;
    if ((i12 | 0) != 0 ? (i3 = HEAP32[113936] | 0, (i3 | 0) != 0) : 0) {
     FUNCTION_TABLE_ii[i3 & 127](i12) | 0;
     HEAP32[i13 >> 2] = 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i13 = i12 + -1 | 0;
    if ((i13 | 0) != (i10 | 0)) {
     _memcpy(i11 | 0, i1 + (i13 * 276 | 0) + 4 | 0, 276) | 0;
     HEAP32[i1 + (i13 * 276 | 0) + 112 >> 2] = 0;
     HEAPF32[i1 + (i13 * 276 | 0) + 212 >> 2] = 0.0;
     HEAPF32[i1 + (i13 * 276 | 0) + 244 >> 2] = 0.0;
     HEAPF32[i1 + (i13 * 276 | 0) + 276 >> 2] = 0.0;
     HEAPF32[i1 + (i13 * 276 | 0) + 116 >> 2] = 0.0;
     HEAP8[i1 + (i13 * 276 | 0) + 120 | 0] = 0;
     HEAPF32[i1 + (i13 * 276 | 0) + 124 >> 2] = 0.0;
     HEAPF32[i1 + (i13 * 276 | 0) + 128 >> 2] = 0.0;
     HEAP32[i1 + (i13 * 276 | 0) + 148 >> 2] = 0;
     i12 = HEAP32[i2 >> 2] | 0;
    }
    HEAP32[i2 >> 2] = i12 + -1;
   } else {
    d36 = +HEAPF32[i1 + (i10 * 276 | 0) + 36 >> 2] - (+HEAPF32[i1 + (i10 * 276 | 0) + 52 >> 2] - +HEAPF32[i1 + (i10 * 276 | 0) + 68 >> 2] * d31);
    d37 = +HEAPF32[i1 + (i10 * 276 | 0) + 40 >> 2] - (+HEAPF32[i1 + (i10 * 276 | 0) + 56 >> 2] - d31 * +HEAPF32[i1 + (i10 * 276 | 0) + 72 >> 2]);
    d38 = +HEAPF32[i1 + (i10 * 276 | 0) + 44 >> 2] - (+HEAPF32[i1 + (i10 * 276 | 0) + 60 >> 2] - d31 * +HEAPF32[i1 + (i10 * 276 | 0) + 76 >> 2]);
    d39 = +HEAPF32[i8 >> 2];
    if (!(d36 * d36 + d37 * d37 + d38 * d38 > d39 * d39)) {
     i12 = HEAP32[113938] | 0;
     if ((i12 | 0) == 0) {
      break;
     }
     FUNCTION_TABLE_iiii[i12 & 31](i11, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
     break;
    }
    i12 = i1 + (i10 * 276 | 0) + 112 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    if ((i13 | 0) != 0 ? (i4 = HEAP32[113936] | 0, (i4 | 0) != 0) : 0) {
     FUNCTION_TABLE_ii[i4 & 127](i13) | 0;
     HEAP32[i12 >> 2] = 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i12 = i13 + -1 | 0;
    if ((i12 | 0) != (i10 | 0)) {
     _memcpy(i11 | 0, i1 + (i12 * 276 | 0) + 4 | 0, 276) | 0;
     HEAP32[i1 + (i12 * 276 | 0) + 112 >> 2] = 0;
     HEAPF32[i1 + (i12 * 276 | 0) + 212 >> 2] = 0.0;
     HEAPF32[i1 + (i12 * 276 | 0) + 244 >> 2] = 0.0;
     HEAPF32[i1 + (i12 * 276 | 0) + 276 >> 2] = 0.0;
     HEAPF32[i1 + (i12 * 276 | 0) + 116 >> 2] = 0.0;
     HEAP8[i1 + (i12 * 276 | 0) + 120 | 0] = 0;
     HEAPF32[i1 + (i12 * 276 | 0) + 124 >> 2] = 0.0;
     HEAPF32[i1 + (i12 * 276 | 0) + 128 >> 2] = 0.0;
     HEAP32[i1 + (i12 * 276 | 0) + 148 >> 2] = 0;
     i13 = HEAP32[i2 >> 2] | 0;
    }
    HEAP32[i2 >> 2] = i13 + -1;
   }
  } while (0);
 } while ((i10 | 0) > 0);
 STACKTOP = i5;
 return;
}
function __ZN31btDefaultCollisionConfigurationC2ERK34btDefaultCollisionConstructionInfo(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 452096;
 i5 = __Z22btAlignedAllocInternalji(360, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
 } else {
  HEAPF32[i5 + 308 >> 2] = 9999999747378752.0e-20;
  i11 = i5 + 332 | 0;
  HEAP8[i11] = HEAP8[i11] & -16;
 }
 i4 = i1 + 32 | 0;
 HEAP32[i4 >> 2] = i5;
 i11 = (HEAP32[i3 + 28 >> 2] | 0) == 0;
 i6 = __Z22btAlignedAllocInternalji(4, 16) | 0;
 i5 = (i6 | 0) == 0;
 if (i11) {
  if (i5) {
   i6 = 0;
  } else {
   HEAP32[i6 >> 2] = 454576;
  }
  HEAP32[i1 + 36 >> 2] = i6;
 } else {
  if (i5) {
   i6 = 0;
  } else {
   HEAP32[i6 >> 2] = 453240;
  }
  HEAP32[i1 + 36 >> 2] = i6;
 }
 i5 = __Z22btAlignedAllocInternalji(24, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
 } else {
  __ZN23btConvexConvexAlgorithm10CreateFuncC2EP22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i5, HEAP32[i4 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0);
 }
 HEAP32[i1 + 40 >> 2] = i5;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 453016;
 }
 HEAP32[i1 + 44 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452912;
 }
 HEAP32[i1 + 48 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452824;
 }
 HEAP32[i1 + 52 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452728;
 }
 HEAP32[i1 + 56 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452648;
 }
 HEAP32[i1 + 60 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452552;
 }
 HEAP32[i1 + 64 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452456;
 }
 HEAP32[i1 + 72 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452456;
 }
 HEAP32[i1 + 76 >> 2] = i4;
 HEAP8[i4 + 4 | 0] = 1;
 i4 = __Z22btAlignedAllocInternalji(8, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452368;
 }
 HEAP32[i1 + 68 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(16, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452232;
  HEAP32[i4 + 8 >> 2] = 1;
  HEAP32[i4 + 12 >> 2] = 1;
 }
 HEAP32[i1 + 84 >> 2] = i4;
 i4 = __Z22btAlignedAllocInternalji(16, 16) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
 } else {
  HEAP8[i4 + 4 | 0] = 0;
  HEAP32[i4 >> 2] = 452232;
  HEAP32[i4 + 8 >> 2] = 1;
  HEAP32[i4 + 12 >> 2] = 1;
 }
 HEAP32[i1 + 80 >> 2] = i4;
 HEAP8[i4 + 4 | 0] = 1;
 i4 = HEAP32[i3 + 20 >> 2] | 0;
 i4 = (i4 | 0) < 36 ? 36 : i4;
 i4 = (i4 | 0) > 80 ? i4 : 80;
 i4 = (i4 | 0) > 44 ? i4 : 44;
 i5 = HEAP32[i3 >> 2] | 0;
 i6 = i1 + 12 | 0;
 if ((i5 | 0) == 0) {
  HEAP8[i6] = 1;
  i5 = __Z22btAlignedAllocInternalji(20, 16) | 0;
  if ((i5 | 0) == 0) {
   i5 = 0;
  } else {
   i11 = HEAP32[i3 + 24 >> 2] | 0;
   HEAP32[i5 + 0 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP8[i5 + 16 | 0] = 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 >> 2] = __Z22btAlignedAllocInternalji(i11, 16) | 0;
   HEAP32[i5 + 4 >> 2] = i11;
  }
  HEAP32[i1 + 8 >> 2] = i5;
 } else {
  HEAP8[i6] = 0;
  HEAP32[i1 + 8 >> 2] = i5;
 }
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 i5 = i1 + 20 | 0;
 if ((i6 | 0) == 0) {
  HEAP8[i5] = 1;
  i5 = __Z22btAlignedAllocInternalji(20, 16) | 0;
  if ((i5 | 0) == 0) {
   i5 = 0;
  } else {
   i6 = HEAP32[i3 + 12 >> 2] | 0;
   HEAP32[i5 >> 2] = 1140;
   i7 = i5 + 4 | 0;
   HEAP32[i7 >> 2] = i6;
   i6 = __Z22btAlignedAllocInternalji(i6 * 1140 | 0, 16) | 0;
   HEAP32[i5 + 16 >> 2] = i6;
   HEAP32[i5 + 12 >> 2] = i6;
   i7 = HEAP32[i7 >> 2] | 0;
   HEAP32[i5 + 8 >> 2] = i7;
   i7 = i7 + -1 | 0;
   if ((i7 | 0) != 0) {
    i8 = HEAP32[i5 >> 2] | 0;
    i11 = i7;
    i10 = i6;
    while (1) {
     i9 = i10 + i8 | 0;
     HEAP32[i10 >> 2] = i9;
     i11 = i11 + -1 | 0;
     if ((i11 | 0) == 0) {
      break;
     } else {
      i10 = i9;
     }
    }
    i6 = i6 + (Math_imul(i8, i7) | 0) | 0;
   }
   HEAP32[i6 >> 2] = 0;
  }
  HEAP32[i1 + 16 >> 2] = i5;
 } else {
  HEAP8[i5] = 0;
  HEAP32[i1 + 16 >> 2] = i6;
 }
 i5 = HEAP32[i3 + 8 >> 2] | 0;
 i6 = i1 + 28 | 0;
 if ((i5 | 0) != 0) {
  HEAP8[i6] = 0;
  HEAP32[i1 + 24 >> 2] = i5;
  STACKTOP = i2;
  return;
 }
 HEAP8[i6] = 1;
 i5 = __Z22btAlignedAllocInternalji(20, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
 } else {
  i11 = HEAP32[i3 + 16 >> 2] | 0;
  HEAP32[i5 >> 2] = i4;
  i6 = i5 + 4 | 0;
  HEAP32[i6 >> 2] = i11;
  i4 = __Z22btAlignedAllocInternalji(Math_imul(i11, i4) | 0, 16) | 0;
  HEAP32[i5 + 16 >> 2] = i4;
  HEAP32[i5 + 12 >> 2] = i4;
  i6 = HEAP32[i6 >> 2] | 0;
  HEAP32[i5 + 8 >> 2] = i6;
  i6 = i6 + -1 | 0;
  if ((i6 | 0) != 0) {
   i7 = HEAP32[i5 >> 2] | 0;
   i9 = i6;
   i8 = i4;
   while (1) {
    i3 = i8 + i7 | 0;
    HEAP32[i8 >> 2] = i3;
    i9 = i9 + -1 | 0;
    if ((i9 | 0) == 0) {
     break;
    } else {
     i8 = i3;
    }
   }
   i4 = i4 + (Math_imul(i7, i6) | 0) | 0;
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP32[i1 + 24 >> 2] = i5;
 STACKTOP = i2;
 return;
}
function __ZN14btQuantizedBvh9buildTreeEii(i3, i9, i7) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0, d29 = 0.0, d30 = 0.0, i31 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i1 + 16 | 0;
 i11 = i1;
 i2 = i3 + 56 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i7 - i9 | 0) == 1) {
  if ((HEAP8[i3 + 60 | 0] | 0) == 0) {
   i4 = (HEAP32[i3 + 96 >> 2] | 0) + (i6 << 6) + 0 | 0;
   i3 = (HEAP32[i3 + 76 >> 2] | 0) + (i9 << 6) + 0 | 0;
   i5 = i4 + 64 | 0;
   do {
    HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
    i4 = i4 + 4 | 0;
    i3 = i3 + 4 | 0;
   } while ((i4 | 0) < (i5 | 0));
  } else {
   i27 = (HEAP32[i3 + 136 >> 2] | 0) + (i6 << 4) | 0;
   i26 = (HEAP32[i3 + 116 >> 2] | 0) + (i9 << 4) | 0;
   HEAP32[i27 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
   HEAP32[i27 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
   HEAP32[i27 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
   HEAP32[i27 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
  }
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  STACKTOP = i1;
  return;
 }
 i8 = __ZN14btQuantizedBvh25sortAndCalcSplittingIndexEiii(i3, i9, i7, __ZN14btQuantizedBvh17calcSplittingAxisEii(i3, i9, i7) | 0) | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i13 = i3 + 20 | 0;
 i4 = i3 + 60 | 0;
 if ((HEAP8[i4] | 0) == 0) {
  i27 = (HEAP32[i3 + 96 >> 2] | 0) + (i5 << 6) | 0;
  HEAP32[i27 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
  HEAP32[i27 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i27 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i27 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
  i27 = HEAP32[i2 >> 2] | 0;
  i13 = i3 + 4 | 0;
  if ((HEAP8[i4] | 0) == 0) {
   i27 = (HEAP32[i3 + 96 >> 2] | 0) + (i27 << 6) + 16 | 0;
   HEAP32[i27 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
   HEAP32[i27 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i27 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i27 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i27 = HEAP32[i2 >> 2] | 0;
  } else {
   i12 = 9;
  }
 } else {
  i27 = HEAP32[i3 + 136 >> 2] | 0;
  d29 = (+HEAPF32[i3 + 24 >> 2] - +HEAPF32[i3 + 8 >> 2]) * +HEAPF32[i3 + 40 >> 2];
  d28 = (+HEAPF32[i3 + 28 >> 2] - +HEAPF32[i3 + 12 >> 2]) * +HEAPF32[i3 + 44 >> 2];
  HEAP16[i27 + (i5 << 4) >> 1] = ~~((+HEAPF32[i13 >> 2] - +HEAPF32[i3 + 4 >> 2]) * +HEAPF32[i3 + 36 >> 2]) & 65535 & 65534;
  HEAP16[i27 + (i5 << 4) + 2 >> 1] = ~~d29 & 65535 & 65534;
  HEAP16[i27 + (i5 << 4) + 4 >> 1] = ~~d28 & 65535 & 65534;
  i27 = i5;
  i13 = i3 + 4 | 0;
  i12 = 9;
 }
 if ((i12 | 0) == 9) {
  i26 = HEAP32[i3 + 136 >> 2] | 0;
  d30 = +HEAPF32[i13 >> 2];
  d28 = +HEAPF32[i3 + 8 >> 2];
  d29 = +HEAPF32[i3 + 12 >> 2];
  d28 = (d28 - d28) * +HEAPF32[i3 + 40 >> 2];
  d29 = (d29 - d29) * +HEAPF32[i3 + 44 >> 2];
  HEAP16[i26 + (i27 << 4) + 6 >> 1] = ~~((d30 - d30) * +HEAPF32[i3 + 36 >> 2] + 1.0) & 65535 | 1;
  HEAP16[i26 + (i27 << 4) + 8 >> 1] = ~~(d28 + 1.0) & 65535 | 1;
  HEAP16[i26 + (i27 << 4) + 10 >> 1] = ~~(d29 + 1.0) & 65535 | 1;
 }
 if ((i9 | 0) < (i7 | 0)) {
  i12 = i3 + 76 | 0;
  i23 = i3 + 116 | 0;
  i24 = i3 + 36 | 0;
  i25 = i3 + 40 | 0;
  i21 = i3 + 44 | 0;
  i13 = i11 + 4 | 0;
  i22 = i11 + 8 | 0;
  i14 = i11 + 12 | 0;
  i19 = i3 + 4 | 0;
  i18 = i3 + 8 | 0;
  i16 = i3 + 12 | 0;
  i17 = i10 + 4 | 0;
  i15 = i10 + 8 | 0;
  i20 = i10 + 12 | 0;
  i26 = i9;
  do {
   if ((HEAP8[i4] | 0) == 0) {
    i31 = (HEAP32[i12 >> 2] | 0) + (i26 << 6) | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
    i31 = (HEAP32[i12 >> 2] | 0) + (i26 << 6) + 16 | 0;
    HEAP32[i11 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
    HEAP32[i11 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
   } else {
    i31 = HEAP32[i23 >> 2] | 0;
    d30 = +(HEAPU16[i31 + (i26 << 4) >> 1] | 0) / +HEAPF32[i24 >> 2];
    d29 = +(HEAPU16[i31 + (i26 << 4) + 2 >> 1] | 0) / +HEAPF32[i25 >> 2];
    d28 = +(HEAPU16[i31 + (i26 << 4) + 4 >> 1] | 0) / +HEAPF32[i21 >> 2];
    HEAPF32[i20 >> 2] = 0.0;
    HEAPF32[i10 >> 2] = d30 + +HEAPF32[i19 >> 2];
    HEAPF32[i17 >> 2] = d29 + +HEAPF32[i18 >> 2];
    HEAPF32[i15 >> 2] = d28 + +HEAPF32[i16 >> 2];
    i31 = HEAP32[i23 >> 2] | 0;
    d28 = +(HEAPU16[i31 + (i26 << 4) + 6 >> 1] | 0) / +HEAPF32[i24 >> 2];
    d29 = +(HEAPU16[i31 + (i26 << 4) + 8 >> 1] | 0) / +HEAPF32[i25 >> 2];
    d30 = +(HEAPU16[i31 + (i26 << 4) + 10 >> 1] | 0) / +HEAPF32[i21 >> 2];
    HEAPF32[i14 >> 2] = 0.0;
    HEAPF32[i11 >> 2] = d28 + +HEAPF32[i19 >> 2];
    HEAPF32[i13 >> 2] = d29 + +HEAPF32[i18 >> 2];
    HEAPF32[i22 >> 2] = d30 + +HEAPF32[i16 >> 2];
   }
   __ZN14btQuantizedBvh21mergeInternalNodeAabbEiRK9btVector3S2_(i3, i27, i10, i11);
   i26 = i26 + 1 | 0;
   i27 = HEAP32[i2 >> 2] | 0;
  } while ((i26 | 0) != (i7 | 0));
 }
 i10 = i27 + 1 | 0;
 HEAP32[i2 >> 2] = i10;
 __ZN14btQuantizedBvh9buildTreeEii(i3, i9, i8);
 i9 = HEAP32[i2 >> 2] | 0;
 __ZN14btQuantizedBvh9buildTreeEii(i3, i8, i7);
 i2 = (HEAP32[i2 >> 2] | 0) - i6 | 0;
 do {
  if ((HEAP8[i4] | 0) != 0) {
   if ((i2 << 4 | 0) > 2048 ? (__ZN14btQuantizedBvh20updateSubtreeHeadersEii(i3, i10, i9), (HEAP8[i4] | 0) == 0) : 0) {
    break;
   }
   HEAP32[(HEAP32[i3 + 136 >> 2] | 0) + (i5 << 4) + 12 >> 2] = 0 - i2;
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[(HEAP32[i3 + 96 >> 2] | 0) + (i5 << 6) + 32 >> 2] = i2;
 STACKTOP = i1;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i11, i3, i4, i1, i5) {
 i11 = i11 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 if ((i11 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) {
  if ((HEAP32[i3 + 4 >> 2] | 0) != (i4 | 0)) {
   STACKTOP = i2;
   return;
  }
  i3 = i3 + 28 | 0;
  if ((HEAP32[i3 >> 2] | 0) == 1) {
   STACKTOP = i2;
   return;
  }
  HEAP32[i3 >> 2] = i1;
  STACKTOP = i2;
  return;
 }
 if ((i11 | 0) == (HEAP32[i3 >> 2] | 0)) {
  if ((HEAP32[i3 + 16 >> 2] | 0) != (i4 | 0) ? (i9 = i3 + 20 | 0, (HEAP32[i9 >> 2] | 0) != (i4 | 0)) : 0) {
   HEAP32[i3 + 32 >> 2] = i1;
   i7 = i3 + 44 | 0;
   if ((HEAP32[i7 >> 2] | 0) == 4) {
    STACKTOP = i2;
    return;
   }
   i20 = HEAP32[i11 + 12 >> 2] | 0;
   i14 = i11 + (i20 << 3) + 16 | 0;
   L19 : do {
    if ((i20 | 0) > 0) {
     i16 = i3 + 52 | 0;
     i17 = i3 + 53 | 0;
     i12 = i3 + 54 | 0;
     i10 = i11 + 8 | 0;
     i15 = i3 + 24 | 0;
     i18 = 0;
     i13 = 0;
     i11 = i11 + 16 | 0;
     L21 : do {
      HEAP8[i16] = 0;
      HEAP8[i17] = 0;
      i19 = HEAP32[i11 + 4 >> 2] | 0;
      i20 = i19 >> 8;
      if ((i19 & 1 | 0) != 0) {
       i20 = HEAP32[(HEAP32[i4 >> 2] | 0) + i20 >> 2] | 0;
      }
      i21 = HEAP32[i11 >> 2] | 0;
      FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i21 >> 2] | 0) + 20 >> 2] & 7](i21, i3, i4, i4 + i20 | 0, 2 - (i19 >>> 1 & 1) | 0, i5);
      if ((HEAP8[i12] | 0) != 0) {
       break;
      }
      do {
       if ((HEAP8[i17] | 0) != 0) {
        if ((HEAP8[i16] | 0) == 0) {
         if ((HEAP32[i10 >> 2] & 1 | 0) == 0) {
          i13 = 1;
          break L21;
         } else {
          i13 = 1;
          break;
         }
        }
        if ((HEAP32[i15 >> 2] | 0) == 1) {
         i10 = 27;
         break L19;
        }
        if ((HEAP32[i10 >> 2] & 2 | 0) == 0) {
         i10 = 27;
         break L19;
        } else {
         i18 = 1;
         i13 = 1;
        }
       }
      } while (0);
      i11 = i11 + 8 | 0;
     } while (i11 >>> 0 < i14 >>> 0);
     if (i18) {
      i8 = i13;
      i10 = 26;
     } else {
      i6 = i13;
      i10 = 23;
     }
    } else {
     i6 = 0;
     i10 = 23;
    }
   } while (0);
   if ((i10 | 0) == 23) {
    HEAP32[i9 >> 2] = i4;
    i21 = i3 + 40 | 0;
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
    if ((HEAP32[i3 + 36 >> 2] | 0) == 1 ? (HEAP32[i3 + 24 >> 2] | 0) == 2 : 0) {
     HEAP8[i3 + 54 | 0] = 1;
     if (i6) {
      i10 = 27;
     } else {
      i10 = 28;
     }
    } else {
     i8 = i6;
     i10 = 26;
    }
   }
   if ((i10 | 0) == 26) {
    if (i8) {
     i10 = 27;
    } else {
     i10 = 28;
    }
   }
   if ((i10 | 0) == 27) {
    HEAP32[i7 >> 2] = 3;
    STACKTOP = i2;
    return;
   } else if ((i10 | 0) == 28) {
    HEAP32[i7 >> 2] = 4;
    STACKTOP = i2;
    return;
   }
  }
  if ((i1 | 0) != 1) {
   STACKTOP = i2;
   return;
  }
  HEAP32[i3 + 32 >> 2] = 1;
  STACKTOP = i2;
  return;
 }
 i9 = HEAP32[i11 + 12 >> 2] | 0;
 i6 = i11 + (i9 << 3) + 16 | 0;
 i8 = HEAP32[i11 + 20 >> 2] | 0;
 i10 = i8 >> 8;
 if ((i8 & 1 | 0) != 0) {
  i10 = HEAP32[(HEAP32[i4 >> 2] | 0) + i10 >> 2] | 0;
 }
 i21 = HEAP32[i11 + 16 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i21 >> 2] | 0) + 24 >> 2] & 31](i21, i3, i4 + i10 | 0, (i8 & 2 | 0) != 0 ? i1 : 2, i5);
 i8 = i11 + 24 | 0;
 if ((i9 | 0) <= 1) {
  STACKTOP = i2;
  return;
 }
 i9 = HEAP32[i11 + 8 >> 2] | 0;
 if ((i9 & 2 | 0) == 0 ? (i7 = i3 + 36 | 0, (HEAP32[i7 >> 2] | 0) != 1) : 0) {
  if ((i9 & 1 | 0) == 0) {
   i9 = i3 + 54 | 0;
   i10 = i8;
   while (1) {
    if ((HEAP8[i9] | 0) != 0) {
     i10 = 53;
     break;
    }
    if ((HEAP32[i7 >> 2] | 0) == 1) {
     i10 = 53;
     break;
    }
    i11 = HEAP32[i10 + 4 >> 2] | 0;
    i12 = i11 >> 8;
    if ((i11 & 1 | 0) != 0) {
     i12 = HEAP32[(HEAP32[i4 >> 2] | 0) + i12 >> 2] | 0;
    }
    i21 = HEAP32[i10 >> 2] | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i21 >> 2] | 0) + 24 >> 2] & 31](i21, i3, i4 + i12 | 0, (i11 & 2 | 0) != 0 ? i1 : 2, i5);
    i10 = i10 + 8 | 0;
    if (!(i10 >>> 0 < i6 >>> 0)) {
     i10 = 53;
     break;
    }
   }
   if ((i10 | 0) == 53) {
    STACKTOP = i2;
    return;
   }
  }
  i9 = i3 + 24 | 0;
  i10 = i3 + 54 | 0;
  i12 = i8;
  while (1) {
   if ((HEAP8[i10] | 0) != 0) {
    i10 = 53;
    break;
   }
   if ((HEAP32[i7 >> 2] | 0) == 1 ? (HEAP32[i9 >> 2] | 0) == 1 : 0) {
    i10 = 53;
    break;
   }
   i11 = HEAP32[i12 + 4 >> 2] | 0;
   i13 = i11 >> 8;
   if ((i11 & 1 | 0) != 0) {
    i13 = HEAP32[(HEAP32[i4 >> 2] | 0) + i13 >> 2] | 0;
   }
   i21 = HEAP32[i12 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i21 >> 2] | 0) + 24 >> 2] & 31](i21, i3, i4 + i13 | 0, (i11 & 2 | 0) != 0 ? i1 : 2, i5);
   i12 = i12 + 8 | 0;
   if (!(i12 >>> 0 < i6 >>> 0)) {
    i10 = 53;
    break;
   }
  }
  if ((i10 | 0) == 53) {
   STACKTOP = i2;
   return;
  }
 }
 i7 = i3 + 54 | 0;
 while (1) {
  if ((HEAP8[i7] | 0) != 0) {
   i10 = 53;
   break;
  }
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i10 = i9 >> 8;
  if ((i9 & 1 | 0) != 0) {
   i10 = HEAP32[(HEAP32[i4 >> 2] | 0) + i10 >> 2] | 0;
  }
  i21 = HEAP32[i8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i21 >> 2] | 0) + 24 >> 2] & 31](i21, i3, i4 + i10 | 0, (i9 & 2 | 0) != 0 ? i1 : 2, i5);
  i8 = i8 + 8 | 0;
  if (!(i8 >>> 0 < i6 >>> 0)) {
   i10 = 53;
   break;
  }
 }
 if ((i10 | 0) == 53) {
  STACKTOP = i2;
  return;
 }
}
function __ZN14btQuantizedBvh20updateSubtreeHeadersEii(i1, i8, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i4 + 32 | 0;
 i2 = i4;
 i5 = HEAP32[i1 + 136 >> 2] | 0;
 i7 = HEAP32[i5 + (i8 << 4) + 12 >> 2] | 0;
 i12 = (i7 | 0) > -1 ? 1 : 0 - i7 | 0;
 i7 = HEAP32[i5 + (i3 << 4) + 12 >> 2] | 0;
 i7 = (i7 | 0) > -1 ? 1 : 0 - i7 | 0;
 i10 = i7 << 4;
 if ((i12 << 4 | 0) < 2049) {
  i13 = i1 + 152 | 0;
  i14 = HEAP32[i13 >> 2] | 0;
  i16 = i1 + 156 | 0;
  if ((i14 | 0) == (HEAP32[i16 >> 2] | 0) ? (i11 = (i14 | 0) == 0 ? 1 : i14 << 1, (i14 | 0) < (i11 | 0)) : 0) {
   if ((i11 | 0) == 0) {
    i15 = 0;
    i19 = i14;
   } else {
    i15 = __Z22btAlignedAllocInternalji(i11 << 5, 16) | 0;
    i19 = HEAP32[i13 >> 2] | 0;
   }
   i17 = i1 + 160 | 0;
   if ((i19 | 0) > 0) {
    i18 = 0;
    do {
     i20 = i15 + (i18 << 5) | 0;
     i21 = (HEAP32[i17 >> 2] | 0) + (i18 << 5) | 0;
     HEAP32[i20 + 0 >> 2] = HEAP32[i21 + 0 >> 2];
     HEAP32[i20 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
     HEAP32[i20 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
     HEAP32[i20 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
     HEAP32[i20 + 16 >> 2] = HEAP32[i21 + 16 >> 2];
     HEAP32[i20 + 20 >> 2] = HEAP32[i21 + 20 >> 2];
     HEAP32[i20 + 24 >> 2] = HEAP32[i21 + 24 >> 2];
     HEAP32[i20 + 28 >> 2] = HEAP32[i21 + 28 >> 2];
     i18 = i18 + 1 | 0;
    } while ((i18 | 0) != (i19 | 0));
   }
   i18 = HEAP32[i17 >> 2] | 0;
   i19 = i1 + 164 | 0;
   if ((i18 | 0) != 0) {
    if ((HEAP8[i19] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i18);
    }
    HEAP32[i17 >> 2] = 0;
   }
   HEAP8[i19] = 1;
   HEAP32[i17 >> 2] = i15;
   HEAP32[i16 >> 2] = i11;
   i11 = HEAP32[i13 >> 2] | 0;
  } else {
   i11 = i14;
  }
  HEAP32[i13 >> 2] = i11 + 1;
  i21 = i1 + 160 | 0;
  i20 = (HEAP32[i21 >> 2] | 0) + (i14 << 5) | 0;
  HEAP32[i20 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i20 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
  HEAP32[i20 + 16 >> 2] = HEAP32[i9 + 16 >> 2];
  HEAP32[i20 + 20 >> 2] = HEAP32[i9 + 20 >> 2];
  HEAP32[i20 + 24 >> 2] = HEAP32[i9 + 24 >> 2];
  HEAP32[i20 + 28 >> 2] = HEAP32[i9 + 28 >> 2];
  i21 = HEAP32[i21 >> 2] | 0;
  HEAP16[i21 + (i14 << 5) >> 1] = HEAP16[i5 + (i8 << 4) >> 1] | 0;
  HEAP16[i21 + (i14 << 5) + 2 >> 1] = HEAP16[i5 + (i8 << 4) + 2 >> 1] | 0;
  HEAP16[i21 + (i14 << 5) + 4 >> 1] = HEAP16[i5 + (i8 << 4) + 4 >> 1] | 0;
  HEAP16[i21 + (i14 << 5) + 6 >> 1] = HEAP16[i5 + (i8 << 4) + 6 >> 1] | 0;
  HEAP16[i21 + (i14 << 5) + 8 >> 1] = HEAP16[i5 + (i8 << 4) + 8 >> 1] | 0;
  HEAP16[i21 + (i14 << 5) + 10 >> 1] = HEAP16[i5 + (i8 << 4) + 10 >> 1] | 0;
  HEAP32[i21 + (i14 << 5) + 12 >> 2] = i8;
  HEAP32[i21 + (i14 << 5) + 16 >> 2] = i12;
 }
 i8 = i1 + 152 | 0;
 if ((i10 | 0) >= 2049) {
  i20 = HEAP32[i8 >> 2] | 0;
  i21 = i1 + 168 | 0;
  HEAP32[i21 >> 2] = i20;
  STACKTOP = i4;
  return;
 }
 i9 = HEAP32[i8 >> 2] | 0;
 i11 = i1 + 156 | 0;
 if ((i9 | 0) == (HEAP32[i11 >> 2] | 0) ? (i6 = (i9 | 0) == 0 ? 1 : i9 << 1, (i9 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) {
   i10 = 0;
   i14 = i9;
  } else {
   i10 = __Z22btAlignedAllocInternalji(i6 << 5, 16) | 0;
   i14 = HEAP32[i8 >> 2] | 0;
  }
  i12 = i1 + 160 | 0;
  if ((i14 | 0) > 0) {
   i13 = 0;
   do {
    i21 = i10 + (i13 << 5) | 0;
    i20 = (HEAP32[i12 >> 2] | 0) + (i13 << 5) | 0;
    HEAP32[i21 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
    HEAP32[i21 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
    HEAP32[i21 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
    HEAP32[i21 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
    HEAP32[i21 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
    HEAP32[i21 + 20 >> 2] = HEAP32[i20 + 20 >> 2];
    HEAP32[i21 + 24 >> 2] = HEAP32[i20 + 24 >> 2];
    HEAP32[i21 + 28 >> 2] = HEAP32[i20 + 28 >> 2];
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i14 | 0));
  }
  i14 = HEAP32[i12 >> 2] | 0;
  i13 = i1 + 164 | 0;
  if ((i14 | 0) != 0) {
   if ((HEAP8[i13] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i14);
   }
   HEAP32[i12 >> 2] = 0;
  }
  HEAP8[i13] = 1;
  HEAP32[i12 >> 2] = i10;
  HEAP32[i11 >> 2] = i6;
  i6 = HEAP32[i8 >> 2] | 0;
 } else {
  i6 = i9;
 }
 HEAP32[i8 >> 2] = i6 + 1;
 i20 = i1 + 160 | 0;
 i21 = (HEAP32[i20 >> 2] | 0) + (i9 << 5) | 0;
 HEAP32[i21 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i21 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i21 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i21 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i21 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i21 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i21 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i21 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
 i20 = HEAP32[i20 >> 2] | 0;
 HEAP16[i20 + (i9 << 5) >> 1] = HEAP16[i5 + (i3 << 4) >> 1] | 0;
 HEAP16[i20 + (i9 << 5) + 2 >> 1] = HEAP16[i5 + (i3 << 4) + 2 >> 1] | 0;
 HEAP16[i20 + (i9 << 5) + 4 >> 1] = HEAP16[i5 + (i3 << 4) + 4 >> 1] | 0;
 HEAP16[i20 + (i9 << 5) + 6 >> 1] = HEAP16[i5 + (i3 << 4) + 6 >> 1] | 0;
 HEAP16[i20 + (i9 << 5) + 8 >> 1] = HEAP16[i5 + (i3 << 4) + 8 >> 1] | 0;
 HEAP16[i20 + (i9 << 5) + 10 >> 1] = HEAP16[i5 + (i3 << 4) + 10 >> 1] | 0;
 HEAP32[i20 + (i9 << 5) + 12 >> 2] = i3;
 HEAP32[i20 + (i9 << 5) + 16 >> 2] = i7;
 i20 = HEAP32[i8 >> 2] | 0;
 i21 = i1 + 168 | 0;
 HEAP32[i21 >> 2] = i20;
 STACKTOP = i4;
 return;
}
function __ZN20btConvexHullInternal4DMulINS_6Int128EyE3mulES1_S1_RS1_S3_(i6, i7, i5, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i4 = STACKTOP;
 i12 = i6;
 i21 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i12 + 4 >> 2] | 0;
 i24 = i7;
 i11 = HEAP32[i24 >> 2] | 0;
 i24 = HEAP32[i24 + 4 >> 2] | 0;
 i2 = ___muldi3(i11 | 0, 0, i21 | 0, 0) | 0;
 i3 = tempRet0;
 i23 = ___muldi3(i24 | 0, 0, i21 | 0, 0) | 0;
 i10 = tempRet0;
 i15 = ___muldi3(i11 | 0, 0, i12 | 0, 0) | 0;
 i14 = tempRet0;
 i9 = ___muldi3(i24 | 0, 0, i12 | 0, 0) | 0;
 i19 = tempRet0;
 i15 = _i64Add(i23 | 0, 0, i15 | 0, 0) | 0;
 i23 = tempRet0;
 i19 = _i64Add(i10 | 0, 0, i9 | 0, i19 | 0) | 0;
 i14 = _i64Add(i19 | 0, tempRet0 | 0, i14 | 0, 0) | 0;
 i23 = _i64Add(i14 | 0, tempRet0 | 0, i23 | 0, 0) | 0;
 i14 = tempRet0;
 i3 = _i64Add(0, i15 | 0, i2 | 0, i3 | 0) | 0;
 i2 = tempRet0;
 i15 = _i64Add(i23 | 0, i14 | 0, (i2 >>> 0 < i15 >>> 0 | (i2 | 0) == (i15 | 0) & i3 >>> 0 < 0) & 1 | 0, 0) | 0;
 i14 = tempRet0;
 i23 = i7 + 8 | 0;
 i19 = HEAP32[i23 >> 2] | 0;
 i23 = HEAP32[i23 + 4 >> 2] | 0;
 i9 = ___muldi3(i19 | 0, 0, i21 | 0, 0) | 0;
 i10 = tempRet0;
 i21 = ___muldi3(i23 | 0, 0, i21 | 0, 0) | 0;
 i13 = tempRet0;
 i7 = ___muldi3(i19 | 0, 0, i12 | 0, 0) | 0;
 i20 = tempRet0;
 i12 = ___muldi3(i23 | 0, 0, i12 | 0, 0) | 0;
 i22 = tempRet0;
 i7 = _i64Add(i21 | 0, 0, i7 | 0, 0) | 0;
 i21 = tempRet0;
 i22 = _i64Add(i13 | 0, 0, i12 | 0, i22 | 0) | 0;
 i20 = _i64Add(i22 | 0, tempRet0 | 0, i20 | 0, 0) | 0;
 i21 = _i64Add(i20 | 0, tempRet0 | 0, i21 | 0, 0) | 0;
 i20 = tempRet0;
 i10 = _i64Add(0, i7 | 0, i9 | 0, i10 | 0) | 0;
 i9 = tempRet0;
 i22 = i6 + 8 | 0;
 i6 = HEAP32[i22 >> 2] | 0;
 i22 = HEAP32[i22 + 4 >> 2] | 0;
 i12 = ___muldi3(i6 | 0, 0, i11 | 0, 0) | 0;
 i13 = tempRet0;
 i16 = ___muldi3(i6 | 0, 0, i24 | 0, 0) | 0;
 i18 = tempRet0;
 i11 = ___muldi3(i22 | 0, 0, i11 | 0, 0) | 0;
 i8 = tempRet0;
 i24 = ___muldi3(i22 | 0, 0, i24 | 0, 0) | 0;
 i17 = tempRet0;
 i11 = _i64Add(i16 | 0, 0, i11 | 0, 0) | 0;
 i16 = tempRet0;
 i17 = _i64Add(i18 | 0, 0, i24 | 0, i17 | 0) | 0;
 i8 = _i64Add(i17 | 0, tempRet0 | 0, i8 | 0, 0) | 0;
 i16 = _i64Add(i8 | 0, tempRet0 | 0, i16 | 0, 0) | 0;
 i8 = tempRet0;
 i13 = _i64Add(0, i11 | 0, i12 | 0, i13 | 0) | 0;
 i12 = tempRet0;
 i11 = _i64Add(i16 | 0, i8 | 0, (i12 >>> 0 < i11 >>> 0 | (i12 | 0) == (i11 | 0) & i13 >>> 0 < 0) & 1 | 0, 0) | 0;
 i8 = tempRet0;
 i16 = ___muldi3(i6 | 0, 0, i19 | 0, 0) | 0;
 i17 = tempRet0;
 i6 = ___muldi3(i6 | 0, 0, i23 | 0, 0) | 0;
 i24 = tempRet0;
 i19 = ___muldi3(i22 | 0, 0, i19 | 0, 0) | 0;
 i18 = tempRet0;
 i23 = ___muldi3(i22 | 0, 0, i23 | 0, 0) | 0;
 i22 = tempRet0;
 i19 = _i64Add(i6 | 0, 0, i19 | 0, 0) | 0;
 i6 = tempRet0;
 i22 = _i64Add(i24 | 0, 0, i23 | 0, i22 | 0) | 0;
 i18 = _i64Add(i22 | 0, tempRet0 | 0, i18 | 0, 0) | 0;
 i6 = _i64Add(i18 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
 i18 = tempRet0;
 i17 = _i64Add(0, i19 | 0, i16 | 0, i17 | 0) | 0;
 i16 = tempRet0;
 i19 = _i64Add(i6 | 0, i18 | 0, (i16 >>> 0 < i19 >>> 0 | (i16 | 0) == (i19 | 0) & i17 >>> 0 < 0) & 1 | 0, 0) | 0;
 i18 = tempRet0;
 i12 = _i64Add(i13 | 0, i12 | 0, i10 | 0, i9 | 0) | 0;
 i13 = tempRet0;
 i6 = _i64Add(i21 | 0, i20 | 0, i17 | 0, i16 | 0) | 0;
 i6 = _i64Add(i6 | 0, tempRet0 | 0, (i9 >>> 0 < i7 >>> 0 | (i9 | 0) == (i7 | 0) & i10 >>> 0 < 0) & 1 | 0, 0) | 0;
 i7 = tempRet0;
 i17 = _i64Add(i19 | 0, i18 | 0, (i7 >>> 0 < i16 >>> 0 | (i7 | 0) == (i16 | 0) & i6 >>> 0 < i17 >>> 0) & 1 | 0, 0) | 0;
 i16 = tempRet0;
 i8 = _i64Add(i11 | 0, i8 | 0, i6 | 0, i7 | 0) | 0;
 i11 = tempRet0;
 i6 = _i64Add(i17 | 0, i16 | 0, (i11 >>> 0 < i7 >>> 0 | (i11 | 0) == (i7 | 0) & i8 >>> 0 < i6 >>> 0) & 1 | 0, 0) | 0;
 i7 = tempRet0;
 i10 = _i64Add(i8 | 0, i11 | 0, (i13 >>> 0 < i9 >>> 0 | (i13 | 0) == (i9 | 0) & i12 >>> 0 < i10 >>> 0) & 1 | 0, 0) | 0;
 i9 = tempRet0;
 i8 = _i64Add(i6 | 0, i7 | 0, (i9 >>> 0 < i11 >>> 0 | (i9 | 0) == (i11 | 0) & i10 >>> 0 < i8 >>> 0) & 1 | 0, 0) | 0;
 i11 = tempRet0;
 i7 = _i64Add(i15 | 0, i14 | 0, i12 | 0, i13 | 0) | 0;
 i6 = tempRet0;
 if (!(i6 >>> 0 < i13 >>> 0 | (i6 | 0) == (i13 | 0) & i7 >>> 0 < i12 >>> 0)) {
  i19 = i10;
  i22 = i9;
  i21 = i8;
  i23 = i11;
  i24 = i5;
  i20 = i24;
  HEAP32[i20 >> 2] = i3;
  i24 = i24 + 4 | 0;
  HEAP32[i24 >> 2] = i2;
  i24 = i5 + 8 | 0;
  i20 = i24;
  HEAP32[i20 >> 2] = i7;
  i24 = i24 + 4 | 0;
  HEAP32[i24 >> 2] = i6;
  i24 = i1;
  i20 = i24;
  HEAP32[i20 >> 2] = i19;
  i24 = i24 + 4 | 0;
  HEAP32[i24 >> 2] = i22;
  i24 = i1 + 8 | 0;
  i22 = i24;
  HEAP32[i22 >> 2] = i21;
  i24 = i24 + 4 | 0;
  HEAP32[i24 >> 2] = i23;
  STACKTOP = i4;
  return;
 }
 i19 = _i64Add(i10 | 0, i9 | 0, 1, 0) | 0;
 i22 = tempRet0;
 i21 = _i64Add(i8 | 0, i11 | 0, (i19 | 0) == 0 & (i22 | 0) == 0 & 1 | 0, 0) | 0;
 i23 = tempRet0;
 i24 = i5;
 i20 = i24;
 HEAP32[i20 >> 2] = i3;
 i24 = i24 + 4 | 0;
 HEAP32[i24 >> 2] = i2;
 i24 = i5 + 8 | 0;
 i20 = i24;
 HEAP32[i20 >> 2] = i7;
 i24 = i24 + 4 | 0;
 HEAP32[i24 >> 2] = i6;
 i24 = i1;
 i20 = i24;
 HEAP32[i20 >> 2] = i19;
 i24 = i24 + 4 | 0;
 HEAP32[i24 >> 2] = i22;
 i24 = i1 + 8 | 0;
 i22 = i24;
 HEAP32[i22 >> 2] = i21;
 i24 = i24 + 4 | 0;
 HEAP32[i24 >> 2] = i23;
 STACKTOP = i4;
 return;
}
function __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i6, i5, i7, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) == 0 | (i7 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i6 + 24 | 0;
 if ((HEAP32[i3 >> 2] | 0) < 128 ? (i8 = i6 + 28 | 0, (HEAP32[i8 >> 2] | 0) < 128) : 0) {
  i4 = __Z22btAlignedAllocInternalji(1024, 16) | 0;
  i10 = HEAP32[i3 >> 2] | 0;
  i9 = i6 + 32 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i12 = i4 + (i11 << 3) | 0;
    if ((i12 | 0) != 0) {
     i13 = (HEAP32[i9 >> 2] | 0) + (i11 << 3) | 0;
     i14 = HEAP32[i13 + 4 >> 2] | 0;
     i15 = i12;
     HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i15 + 4 >> 2] = i14;
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i10 = HEAP32[i9 >> 2] | 0;
  i11 = i6 + 36 | 0;
  if ((i10 | 0) != 0) {
   if ((HEAP8[i11] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i10);
   }
   HEAP32[i9 >> 2] = 0;
  }
  HEAP8[i11] = 1;
  HEAP32[i9 >> 2] = i4;
  HEAP32[i8 >> 2] = 128;
 }
 HEAP32[i3 >> 2] = 128;
 i4 = i6 + 32 | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i11 + 4 >> 2] = i7;
 i5 = i6 + 28 | 0;
 i6 = i6 + 36 | 0;
 i7 = 1;
 i11 = 124;
 do {
  i10 = i7 + -1 | 0;
  i13 = HEAP32[i4 >> 2] | 0;
  i9 = HEAP32[i13 + (i10 << 3) >> 2] | 0;
  i8 = HEAP32[i13 + (i10 << 3) + 4 >> 2] | 0;
  if ((i10 | 0) > (i11 | 0)) {
   i12 = HEAP32[i3 >> 2] | 0;
   i11 = i12 << 1;
   if ((i12 | 0) < (i11 | 0) ? (HEAP32[i5 >> 2] | 0) < (i11 | 0) : 0) {
    if ((i12 | 0) != 0) {
     i13 = __Z22btAlignedAllocInternalji(i12 << 4, 16) | 0;
     i12 = HEAP32[i3 >> 2] | 0;
     if ((i12 | 0) > 0) {
      i14 = 0;
      do {
       i15 = i13 + (i14 << 3) | 0;
       if ((i15 | 0) != 0) {
        i17 = (HEAP32[i4 >> 2] | 0) + (i14 << 3) | 0;
        i16 = HEAP32[i17 + 4 >> 2] | 0;
        HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
        HEAP32[i15 + 4 >> 2] = i16;
       }
       i14 = i14 + 1 | 0;
      } while ((i14 | 0) != (i12 | 0));
     }
    } else {
     i13 = 0;
    }
    i12 = HEAP32[i4 >> 2] | 0;
    if ((i12 | 0) != 0) {
     if ((HEAP8[i6] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i12);
     }
     HEAP32[i4 >> 2] = 0;
    }
    HEAP8[i6] = 1;
    HEAP32[i4 >> 2] = i13;
    HEAP32[i5 >> 2] = i11;
   }
   HEAP32[i3 >> 2] = i11;
   i11 = i11 + -4 | 0;
  }
  do {
   if ((i9 | 0) == (i8 | 0)) {
    i8 = i9 + 40 | 0;
    if ((HEAP32[i8 >> 2] | 0) == 0) {
     i7 = i10;
    } else {
     i15 = i9 + 36 | 0;
     i16 = HEAP32[i15 >> 2] | 0;
     i17 = i13 + (i10 << 3) | 0;
     HEAP32[i17 >> 2] = i16;
     HEAP32[i17 + 4 >> 2] = i16;
     i17 = HEAP32[i8 >> 2] | 0;
     i16 = (HEAP32[i4 >> 2] | 0) + (i7 << 3) | 0;
     HEAP32[i16 >> 2] = i17;
     HEAP32[i16 + 4 >> 2] = i17;
     i16 = HEAP32[i8 >> 2] | 0;
     i17 = (HEAP32[i4 >> 2] | 0) + (i7 + 1 << 3) | 0;
     HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
     HEAP32[i17 + 4 >> 2] = i16;
     i7 = i7 + 2 | 0;
    }
   } else {
    if (((((+HEAPF32[i9 >> 2] <= +HEAPF32[i8 + 16 >> 2] ? +HEAPF32[i9 + 16 >> 2] >= +HEAPF32[i8 >> 2] : 0) ? +HEAPF32[i9 + 4 >> 2] <= +HEAPF32[i8 + 20 >> 2] : 0) ? +HEAPF32[i9 + 20 >> 2] >= +HEAPF32[i8 + 4 >> 2] : 0) ? +HEAPF32[i9 + 8 >> 2] <= +HEAPF32[i8 + 24 >> 2] : 0) ? +HEAPF32[i9 + 24 >> 2] >= +HEAPF32[i8 + 8 >> 2] : 0) {
     i12 = i9 + 40 | 0;
     i14 = i8 + 40 | 0;
     i15 = (HEAP32[i14 >> 2] | 0) != 0;
     if ((HEAP32[i12 >> 2] | 0) == 0) {
      if (i15) {
       i15 = i9;
       i17 = HEAP32[i8 + 36 >> 2] | 0;
       i16 = i13 + (i10 << 3) | 0;
       HEAP32[i16 >> 2] = i15;
       HEAP32[i16 + 4 >> 2] = i17;
       i16 = HEAP32[i14 >> 2] | 0;
       i17 = (HEAP32[i4 >> 2] | 0) + (i7 << 3) | 0;
       HEAP32[i17 >> 2] = i15;
       HEAP32[i17 + 4 >> 2] = i16;
       i7 = i7 + 1 | 0;
       break;
      } else {
       FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 63](i1, i9, i8);
       i7 = i10;
       break;
      }
     } else {
      i10 = i13 + (i10 << 3) | 0;
      i9 = i9 + 36 | 0;
      i13 = HEAP32[i9 >> 2] | 0;
      if (i15) {
       i16 = i8 + 36 | 0;
       i15 = HEAP32[i16 >> 2] | 0;
       i17 = i10;
       HEAP32[i17 >> 2] = i13;
       HEAP32[i17 + 4 >> 2] = i15;
       i16 = HEAP32[i16 >> 2] | 0;
       i17 = (HEAP32[i4 >> 2] | 0) + (i7 << 3) | 0;
       HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i17 + 4 >> 2] = i16;
       i17 = HEAP32[i14 >> 2] | 0;
       i16 = (HEAP32[i4 >> 2] | 0) + (i7 + 1 << 3) | 0;
       HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
       HEAP32[i16 + 4 >> 2] = i17;
       i16 = HEAP32[i14 >> 2] | 0;
       i17 = (HEAP32[i4 >> 2] | 0) + (i7 + 2 << 3) | 0;
       HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i17 + 4 >> 2] = i16;
       i7 = i7 + 3 | 0;
       break;
      } else {
       i16 = i8;
       i17 = i10;
       HEAP32[i17 >> 2] = i13;
       HEAP32[i17 + 4 >> 2] = i16;
       i17 = (HEAP32[i4 >> 2] | 0) + (i7 << 3) | 0;
       HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i17 + 4 >> 2] = i16;
       i7 = i7 + 1 | 0;
       break;
      }
     }
    } else {
     i7 = i10;
    }
   }
  } while (0);
 } while ((i7 | 0) != 0);
 STACKTOP = i2;
 return;
}
function __ZN22SphereTriangleDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i3, i12, i1, i4, i2) {
 i3 = i3 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i14 = i13 + 152 | 0;
 i4 = i13 + 136 | 0;
 i15 = i13 + 128 | 0;
 i24 = i13 + 64 | 0;
 i22 = i13 + 48 | 0;
 i19 = i13 + 32 | 0;
 i20 = i13 + 16 | 0;
 i21 = i13;
 HEAPF32[i15 >> 2] = 0.0;
 i18 = i12 + 112 | 0;
 d30 = +HEAPF32[i12 + 48 >> 2] - +HEAPF32[i18 >> 2];
 i16 = i12 + 116 | 0;
 d28 = +HEAPF32[i12 + 52 >> 2] - +HEAPF32[i16 >> 2];
 i17 = i12 + 120 | 0;
 d26 = +HEAPF32[i12 + 56 >> 2] - +HEAPF32[i17 >> 2];
 i23 = i12 + 64 | 0;
 d47 = +HEAPF32[i23 >> 2];
 d41 = +HEAPF32[i12 >> 2];
 i7 = i12 + 80 | 0;
 d46 = +HEAPF32[i7 >> 2];
 d40 = +HEAPF32[i12 + 16 >> 2];
 i10 = i12 + 96 | 0;
 d45 = +HEAPF32[i10 >> 2];
 d39 = +HEAPF32[i12 + 32 >> 2];
 d38 = +HEAPF32[i12 + 4 >> 2];
 d37 = +HEAPF32[i12 + 20 >> 2];
 d36 = +HEAPF32[i12 + 36 >> 2];
 d35 = +HEAPF32[i12 + 8 >> 2];
 d34 = +HEAPF32[i12 + 24 >> 2];
 d33 = +HEAPF32[i12 + 40 >> 2];
 i5 = i12 + 68 | 0;
 d44 = +HEAPF32[i5 >> 2];
 i8 = i12 + 84 | 0;
 d43 = +HEAPF32[i8 >> 2];
 i11 = i12 + 100 | 0;
 d42 = +HEAPF32[i11 >> 2];
 i6 = i12 + 72 | 0;
 d29 = +HEAPF32[i6 >> 2];
 i9 = i12 + 88 | 0;
 d27 = +HEAPF32[i9 >> 2];
 i12 = i12 + 104 | 0;
 d25 = +HEAPF32[i12 >> 2];
 d32 = d30 * +HEAPF32[i23 >> 2] + d28 * +HEAPF32[i7 >> 2] + d26 * +HEAPF32[i10 >> 2];
 d31 = d30 * +HEAPF32[i5 >> 2] + d28 * +HEAPF32[i8 >> 2] + d26 * +HEAPF32[i11 >> 2];
 HEAPF32[i24 >> 2] = d47 * d41 + d46 * d40 + d45 * d39;
 HEAPF32[i24 + 4 >> 2] = d47 * d38 + d46 * d37 + d45 * d36;
 HEAPF32[i24 + 8 >> 2] = d47 * d35 + d46 * d34 + d45 * d33;
 HEAPF32[i24 + 12 >> 2] = 0.0;
 HEAPF32[i24 + 16 >> 2] = d41 * d44 + d40 * d43 + d39 * d42;
 HEAPF32[i24 + 20 >> 2] = d38 * d44 + d37 * d43 + d36 * d42;
 HEAPF32[i24 + 24 >> 2] = d35 * d44 + d34 * d43 + d33 * d42;
 HEAPF32[i24 + 28 >> 2] = 0.0;
 HEAPF32[i24 + 32 >> 2] = d41 * d29 + d40 * d27 + d39 * d25;
 HEAPF32[i24 + 36 >> 2] = d38 * d29 + d37 * d27 + d36 * d25;
 HEAPF32[i24 + 40 >> 2] = d35 * d29 + d34 * d27 + d33 * d25;
 HEAPF32[i24 + 44 >> 2] = 0.0;
 HEAPF32[i24 + 48 >> 2] = d32;
 HEAPF32[i24 + 52 >> 2] = d31;
 HEAPF32[i24 + 56 >> 2] = d30 * d29 + d28 * d27 + d26 * d25;
 HEAPF32[i24 + 60 >> 2] = 0.0;
 if (!(__ZN22SphereTriangleDetector7collideERK9btVector3RS0_S3_RfS4_f(i3, i24 + 48 | 0, i14, i4, i15, 0, +HEAPF32[i3 + 12 >> 2]) | 0)) {
  STACKTOP = i13;
  return;
 }
 if (i2) {
  d38 = +HEAPF32[i23 >> 2];
  d41 = +HEAPF32[i4 >> 2];
  d40 = +HEAPF32[i5 >> 2];
  d39 = +HEAPF32[i4 + 4 >> 2];
  d42 = +HEAPF32[i6 >> 2];
  d46 = +HEAPF32[i4 + 8 >> 2];
  d44 = d38 * d41 + d40 * d39 + d42 * d46;
  d32 = +HEAPF32[i7 >> 2];
  d33 = +HEAPF32[i8 >> 2];
  d34 = +HEAPF32[i9 >> 2];
  d45 = d41 * d32 + d39 * d33 + d46 * d34;
  d35 = +HEAPF32[i10 >> 2];
  d36 = +HEAPF32[i11 >> 2];
  d37 = +HEAPF32[i12 >> 2];
  d46 = d41 * d35 + d39 * d36 + d46 * d37;
  HEAPF32[i22 >> 2] = -d44;
  HEAPF32[i22 + 4 >> 2] = -d45;
  HEAPF32[i22 + 8 >> 2] = -d46;
  HEAPF32[i22 + 12 >> 2] = 0.0;
  d39 = +HEAPF32[i14 >> 2];
  d41 = +HEAPF32[i14 + 4 >> 2];
  d43 = +HEAPF32[i14 + 8 >> 2];
  d47 = +HEAPF32[i15 >> 2];
  d45 = +HEAPF32[i16 >> 2] + (d39 * d32 + d41 * d33 + d43 * d34) + d45 * d47;
  d46 = +HEAPF32[i17 >> 2] + (d39 * d35 + d41 * d36 + d43 * d37) + d46 * d47;
  HEAPF32[i19 >> 2] = +HEAPF32[i18 >> 2] + (d38 * d39 + d40 * d41 + d42 * d43) + d44 * d47;
  HEAPF32[i19 + 4 >> 2] = d45;
  HEAPF32[i19 + 8 >> 2] = d46;
  HEAPF32[i19 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 7](i1, i22, i19, d47);
  STACKTOP = i13;
  return;
 } else {
  i24 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
  d40 = +HEAPF32[i23 >> 2];
  d45 = +HEAPF32[i4 >> 2];
  d42 = +HEAPF32[i5 >> 2];
  d43 = +HEAPF32[i4 + 4 >> 2];
  d44 = +HEAPF32[i6 >> 2];
  d41 = +HEAPF32[i4 + 8 >> 2];
  d36 = +HEAPF32[i7 >> 2];
  d37 = +HEAPF32[i8 >> 2];
  d46 = +HEAPF32[i9 >> 2];
  d38 = +HEAPF32[i10 >> 2];
  d39 = +HEAPF32[i11 >> 2];
  d47 = +HEAPF32[i12 >> 2];
  HEAPF32[i20 >> 2] = d40 * d45 + d42 * d43 + d44 * d41;
  HEAPF32[i20 + 4 >> 2] = d45 * d36 + d43 * d37 + d41 * d46;
  HEAPF32[i20 + 8 >> 2] = d45 * d38 + d43 * d39 + d41 * d47;
  HEAPF32[i20 + 12 >> 2] = 0.0;
  d41 = +HEAPF32[i14 >> 2];
  d43 = +HEAPF32[i14 + 4 >> 2];
  d45 = +HEAPF32[i14 + 8 >> 2];
  d46 = +HEAPF32[i16 >> 2] + (d41 * d36 + d43 * d37 + d45 * d46);
  d47 = +HEAPF32[i17 >> 2] + (d41 * d38 + d43 * d39 + d45 * d47);
  HEAPF32[i21 >> 2] = +HEAPF32[i18 >> 2] + (d40 * d41 + d42 * d43 + d44 * d45);
  HEAPF32[i21 + 4 >> 2] = d46;
  HEAPF32[i21 + 8 >> 2] = d47;
  HEAPF32[i21 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[i24 & 7](i1, i20, i21, +HEAPF32[i15 >> 2]);
  STACKTOP = i13;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver28setFrictionConstraintImpulseER18btSolverConstraintP11btRigidBodyS3_R15btManifoldPointRK19btContactSolverInfo(i4, i12, i5, i2, i7, i6) {
 i4 = i4 | 0;
 i12 = i12 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, d3 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i1 = STACKTOP;
 i8 = HEAP32[i6 + 60 >> 2] | 0;
 i12 = HEAP32[i12 + 100 >> 2] | 0;
 i4 = HEAP32[i4 + 56 >> 2] | 0;
 if ((i8 & 8 | 0) == 0) {
  HEAPF32[i4 + (i12 * 136 | 0) + 84 >> 2] = 0.0;
  if ((i8 & 16 | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  HEAPF32[i4 + ((i12 + 1 | 0) * 136 | 0) + 84 >> 2] = 0.0;
  STACKTOP = i1;
  return;
 }
 i13 = (i8 & 4 | 0) == 0;
 if (!i13) {
  d15 = +HEAPF32[i7 + 120 >> 2] * +HEAPF32[i6 + 56 >> 2];
  i14 = i4 + (i12 * 136 | 0) + 84 | 0;
  HEAPF32[i14 >> 2] = d15;
  if ((i5 | 0) != 0 ? (d10 = +HEAPF32[i5 + 336 >> 2], d10 != 0.0) : 0) {
   d18 = d15 * d10 * +HEAPF32[i4 + (i12 * 136 | 0) + 20 >> 2] * +HEAPF32[i5 + 344 >> 2];
   d17 = d15 * d10 * +HEAPF32[i4 + (i12 * 136 | 0) + 24 >> 2] * +HEAPF32[i5 + 348 >> 2];
   i16 = i5 + 504 | 0;
   HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] + d15 * d10 * +HEAPF32[i4 + (i12 * 136 | 0) + 16 >> 2] * +HEAPF32[i5 + 340 >> 2];
   i16 = i5 + 508 | 0;
   HEAPF32[i16 >> 2] = d18 + +HEAPF32[i16 >> 2];
   i16 = i5 + 512 | 0;
   HEAPF32[i16 >> 2] = d17 + +HEAPF32[i16 >> 2];
   d17 = d15 * +HEAPF32[i5 + 540 >> 2] * +HEAPF32[i4 + (i12 * 136 | 0) + 52 >> 2];
   d10 = d15 * +HEAPF32[i5 + 544 >> 2] * +HEAPF32[i4 + (i12 * 136 | 0) + 56 >> 2];
   i16 = i5 + 520 | 0;
   HEAPF32[i16 >> 2] = d15 * +HEAPF32[i5 + 536 >> 2] * +HEAPF32[i4 + (i12 * 136 | 0) + 48 >> 2] + +HEAPF32[i16 >> 2];
   i16 = i5 + 524 | 0;
   HEAPF32[i16 >> 2] = d17 + +HEAPF32[i16 >> 2];
   i16 = i5 + 528 | 0;
   HEAPF32[i16 >> 2] = d10 + +HEAPF32[i16 >> 2];
  }
  if ((i2 | 0) != 0 ? (d11 = +HEAPF32[i2 + 336 >> 2], d9 = -+HEAPF32[i14 >> 2], d11 != 0.0) : 0) {
   d18 = +HEAPF32[i4 + (i12 * 136 | 0) + 72 >> 2];
   d17 = +HEAPF32[i4 + (i12 * 136 | 0) + 68 >> 2];
   d15 = +HEAPF32[i4 + (i12 * 136 | 0) + 64 >> 2];
   d19 = d11 * +HEAPF32[i4 + (i12 * 136 | 0) + 20 >> 2] * +HEAPF32[i2 + 344 >> 2] * d9;
   d10 = d11 * +HEAPF32[i4 + (i12 * 136 | 0) + 24 >> 2] * +HEAPF32[i2 + 348 >> 2] * d9;
   i16 = i2 + 504 | 0;
   HEAPF32[i16 >> 2] = d11 * +HEAPF32[i4 + (i12 * 136 | 0) + 16 >> 2] * +HEAPF32[i2 + 340 >> 2] * d9 + +HEAPF32[i16 >> 2];
   i16 = i2 + 508 | 0;
   HEAPF32[i16 >> 2] = d19 + +HEAPF32[i16 >> 2];
   i16 = i2 + 512 | 0;
   HEAPF32[i16 >> 2] = d10 + +HEAPF32[i16 >> 2];
   d17 = d17 * +HEAPF32[i2 + 540 >> 2] * d9;
   d18 = d18 * +HEAPF32[i2 + 544 >> 2] * d9;
   i16 = i2 + 520 | 0;
   HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] - d15 * +HEAPF32[i2 + 536 >> 2] * d9;
   i16 = i2 + 524 | 0;
   HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] - d17;
   i16 = i2 + 528 | 0;
   HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] - d18;
  }
 } else {
  HEAPF32[i4 + (i12 * 136 | 0) + 84 >> 2] = 0.0;
 }
 if ((i8 & 16 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i8 = i12 + 1 | 0;
 if (i13) {
  HEAPF32[i4 + (i8 * 136 | 0) + 84 >> 2] = 0.0;
  STACKTOP = i1;
  return;
 }
 d9 = +HEAPF32[i7 + 124 >> 2] * +HEAPF32[i6 + 56 >> 2];
 i6 = i4 + (i8 * 136 | 0) + 84 | 0;
 HEAPF32[i6 >> 2] = d9;
 if ((i5 | 0) != 0 ? (d3 = +HEAPF32[i5 + 336 >> 2], d3 != 0.0) : 0) {
  d19 = d9 * d3 * +HEAPF32[i4 + (i8 * 136 | 0) + 20 >> 2];
  d18 = d9 * d3 * +HEAPF32[i4 + (i8 * 136 | 0) + 24 >> 2];
  i16 = i5 + 504 | 0;
  HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] + d9 * d3 * +HEAPF32[i4 + (i8 * 136 | 0) + 16 >> 2];
  i16 = i5 + 508 | 0;
  HEAPF32[i16 >> 2] = d19 + +HEAPF32[i16 >> 2];
  i16 = i5 + 512 | 0;
  HEAPF32[i16 >> 2] = d18 + +HEAPF32[i16 >> 2];
  d18 = d9 * +HEAPF32[i5 + 540 >> 2] * +HEAPF32[i4 + (i8 * 136 | 0) + 52 >> 2];
  d19 = d9 * +HEAPF32[i5 + 544 >> 2] * +HEAPF32[i4 + (i8 * 136 | 0) + 56 >> 2];
  i16 = i5 + 520 | 0;
  HEAPF32[i16 >> 2] = d9 * +HEAPF32[i5 + 536 >> 2] * +HEAPF32[i4 + (i8 * 136 | 0) + 48 >> 2] + +HEAPF32[i16 >> 2];
  i16 = i5 + 524 | 0;
  HEAPF32[i16 >> 2] = d18 + +HEAPF32[i16 >> 2];
  i16 = i5 + 528 | 0;
  HEAPF32[i16 >> 2] = d19 + +HEAPF32[i16 >> 2];
 }
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 d3 = +HEAPF32[i2 + 336 >> 2];
 d9 = -+HEAPF32[i6 >> 2];
 if (!(d3 != 0.0)) {
  STACKTOP = i1;
  return;
 }
 d19 = +HEAPF32[i4 + (i8 * 136 | 0) + 72 >> 2];
 d18 = +HEAPF32[i4 + (i8 * 136 | 0) + 68 >> 2];
 d17 = +HEAPF32[i4 + (i8 * 136 | 0) + 64 >> 2];
 d11 = d3 * +HEAPF32[i4 + (i8 * 136 | 0) + 20 >> 2] * d9;
 d15 = d3 * +HEAPF32[i4 + (i8 * 136 | 0) + 24 >> 2] * d9;
 i16 = i2 + 504 | 0;
 HEAPF32[i16 >> 2] = d3 * +HEAPF32[i4 + (i8 * 136 | 0) + 16 >> 2] * d9 + +HEAPF32[i16 >> 2];
 i16 = i2 + 508 | 0;
 HEAPF32[i16 >> 2] = d11 + +HEAPF32[i16 >> 2];
 i16 = i2 + 512 | 0;
 HEAPF32[i16 >> 2] = d15 + +HEAPF32[i16 >> 2];
 d18 = d18 * +HEAPF32[i2 + 540 >> 2] * d9;
 d19 = d19 * +HEAPF32[i2 + 544 >> 2] * d9;
 i16 = i2 + 520 | 0;
 HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] - d17 * +HEAPF32[i2 + 536 >> 2] * d9;
 i16 = i2 + 524 | 0;
 HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] - d18;
 i16 = i2 + 528 | 0;
 HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] - d19;
 STACKTOP = i1;
 return;
}
function __ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i39, i1, i10, i19, i12, i3, i13, i14) {
 i39 = i39 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i19 = i19 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var d2 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d11 = 0.0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, i36 = 0, i37 = 0, i38 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, i49 = 0, d50 = 0.0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, d56 = 0.0, d57 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i15 = i13;
 d56 = +HEAPF32[i10 >> 2];
 i16 = i10 + 4 | 0;
 d29 = +HEAPF32[i16 >> 2];
 i14 = i10 + 8 | 0;
 d28 = +HEAPF32[i14 >> 2];
 d27 = +HEAPF32[i19 >> 2];
 d35 = +HEAPF32[i19 + 4 >> 2];
 d57 = +HEAPF32[i19 + 8 >> 2];
 d50 = +HEAPF32[i12 >> 2];
 d26 = (d27 < d56 ? d27 : d56) + d50;
 i25 = i12 + 4 | 0;
 d48 = +HEAPF32[i25 >> 2];
 d22 = (d35 < d29 ? d35 : d29) + d48;
 i19 = i12 + 8 | 0;
 d47 = +HEAPF32[i19 >> 2];
 d18 = (d57 < d28 ? d57 : d28) + d47;
 d46 = +HEAPF32[i3 >> 2];
 d17 = (d56 < d27 ? d27 : d56) + d46;
 i24 = i3 + 4 | 0;
 d45 = +HEAPF32[i24 >> 2];
 d23 = (d29 < d35 ? d35 : d29) + d45;
 i21 = i3 + 8 | 0;
 d44 = +HEAPF32[i21 >> 2];
 d20 = (d28 < d57 ? d57 : d28) + d44;
 d56 = d27 - d56;
 d27 = d35 - d29;
 d57 = d57 - d28;
 d35 = 1.0 / +Math_sqrt(+(d56 * d56 + d27 * d27 + d57 * d57));
 d28 = d56 * d35;
 d29 = d27 * d35;
 d35 = d57 * d35;
 d27 = d57 * d35 + (d56 * d28 + d27 * d29);
 if (d28 == 0.0) {
  d28 = 999999984306749400.0;
 } else {
  d28 = 1.0 / d28;
 }
 if (d29 == 0.0) {
  d29 = 999999984306749400.0;
 } else {
  d29 = 1.0 / d29;
 }
 if (d35 == 0.0) {
  d35 = 999999984306749400.0;
 } else {
  d35 = 1.0 / d35;
 }
 i38 = d28 < 0.0 | 0;
 i41 = d29 < 0.0 | 0;
 i43 = d35 < 0.0 | 0;
 i37 = i39 + 56 | 0;
 L10 : do {
  if ((HEAP32[i37 >> 2] | 0) > 0) {
   i33 = i15 + 16 | 0;
   i32 = i15 + 4 | 0;
   i31 = i15 + 8 | 0;
   i30 = i15 + 20 | 0;
   i34 = i15 + 24 | 0;
   i36 = i15 + (i38 << 4) | 0;
   i38 = i15 + ((i38 ^ 1) << 4) | 0;
   i40 = i15 + (i41 << 4) + 4 | 0;
   i41 = i15 + ((i41 ^ 1) << 4) + 4 | 0;
   i42 = i15 + (i43 << 4) + 8 | 0;
   i43 = i15 + ((i43 ^ 1) << 4) + 8 | 0;
   i49 = 0;
   i51 = HEAP32[i39 + 96 >> 2] | 0;
   i39 = 1;
   while (1) {
    HEAP32[i15 + 0 >> 2] = HEAP32[i51 + 0 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i51 + 4 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP32[i51 + 8 >> 2];
    HEAP32[i15 + 12 >> 2] = HEAP32[i51 + 12 >> 2];
    i55 = i51 + 16 | 0;
    HEAP32[i33 + 0 >> 2] = HEAP32[i55 + 0 >> 2];
    HEAP32[i33 + 4 >> 2] = HEAP32[i55 + 4 >> 2];
    HEAP32[i33 + 8 >> 2] = HEAP32[i55 + 8 >> 2];
    HEAP32[i33 + 12 >> 2] = HEAP32[i55 + 12 >> 2];
    HEAPF32[i15 >> 2] = +HEAPF32[i15 >> 2] - d46;
    HEAPF32[i32 >> 2] = +HEAPF32[i32 >> 2] - d45;
    HEAPF32[i31 >> 2] = +HEAPF32[i31 >> 2] - d44;
    HEAPF32[i33 >> 2] = +HEAPF32[i33 >> 2] - d50;
    HEAPF32[i30 >> 2] = +HEAPF32[i30 >> 2] - d48;
    HEAPF32[i34 >> 2] = +HEAPF32[i34 >> 2] - d47;
    if (!(d26 > +HEAPF32[i55 >> 2]) ? !(d17 < +HEAPF32[i51 >> 2]) : 0) {
     i52 = 1;
    } else {
     i52 = 0;
    }
    if (!(!(d18 > +HEAPF32[i51 + 24 >> 2]) ? !(d20 < +HEAPF32[i51 + 8 >> 2]) : 0)) {
     i52 = 0;
    }
    if ((((!(d22 > +HEAPF32[i51 + 20 >> 2]) ? !(d23 < +HEAPF32[i51 + 4 >> 2] | i52 ^ 1) : 0) ? (d9 = +HEAPF32[i10 >> 2], d4 = d28 * (+HEAPF32[i36 >> 2] - d9), d9 = d28 * (+HEAPF32[i38 >> 2] - d9), d11 = +HEAPF32[i16 >> 2], d5 = d29 * (+HEAPF32[i40 >> 2] - d11), d11 = d29 * (+HEAPF32[i41 >> 2] - d11), !(d4 > d11 | d5 > d9)) : 0) ? (d8 = d5 > d4 ? d5 : d4, d6 = d11 < d9 ? d11 : d9, d2 = +HEAPF32[i14 >> 2], d7 = d35 * (+HEAPF32[i42 >> 2] - d2), d2 = d35 * (+HEAPF32[i43 >> 2] - d2), !(d8 > d2 | d7 > d6)) : 0) ? (d7 > d8 ? d7 : d8) < d27 : 0) {
     i54 = (d2 < d6 ? d2 : d6) > 0.0;
     i53 = i51 + 32 | 0;
     i52 = (HEAP32[i53 >> 2] | 0) == -1;
     if (i52 & i54) {
      FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 63](i1, HEAP32[i51 + 36 >> 2] | 0, HEAP32[i51 + 40 >> 2] | 0);
      i53 = 24;
     } else {
      i55 = i53;
      i53 = 23;
     }
    } else {
     i55 = i51 + 32 | 0;
     i52 = (HEAP32[i55 >> 2] | 0) == -1;
     i54 = 0;
     i53 = 23;
    }
    if ((i53 | 0) == 23) {
     i53 = 0;
     if (i54 | i52) {
      i53 = 24;
     } else {
      i55 = HEAP32[i55 >> 2] | 0;
      i49 = i55 + i49 | 0;
      i51 = i51 + (i55 << 6) | 0;
     }
    }
    if ((i53 | 0) == 24) {
     i49 = i49 + 1 | 0;
     i51 = i51 + 64 | 0;
    }
    if ((i49 | 0) >= (HEAP32[i37 >> 2] | 0)) {
     break L10;
    }
    d50 = +HEAPF32[i12 >> 2];
    d48 = +HEAPF32[i25 >> 2];
    d47 = +HEAPF32[i19 >> 2];
    d46 = +HEAPF32[i3 >> 2];
    d45 = +HEAPF32[i24 >> 2];
    d44 = +HEAPF32[i21 >> 2];
    i39 = i39 + 1 | 0;
   }
  } else {
   i39 = 0;
  }
 } while (0);
 if ((HEAP32[114066] | 0) >= (i39 | 0)) {
  STACKTOP = i13;
  return;
 }
 HEAP32[114066] = i39;
 STACKTOP = i13;
 return;
}
function __ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallback11processNodeEii(i2, i11, i12) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i9 + 32 | 0;
 i5 = i9 + 28 | 0;
 i10 = i9 + 20 | 0;
 i13 = i9 + 16 | 0;
 i14 = i9 + 12 | 0;
 i15 = i9 + 8 | 0;
 i17 = i9;
 i7 = i2 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] & 3](i8, i5, i9 + 24 | 0, i10, i13, i14, i15, i9 + 4 | 0, i17, i11);
 i14 = HEAP32[i14 >> 2] | 0;
 i15 = Math_imul(HEAP32[i15 >> 2] | 0, i12) | 0;
 i8 = i14 + i15 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i10 = (HEAP32[i10 >> 2] | 0) == 0;
 i5 = HEAP32[i5 >> 2] | 0;
 i4 = i6 + 4 | 0;
 i1 = i6 + 8 | 0;
 i6 = i6 + 12 | 0;
 if ((HEAP32[i17 >> 2] | 0) != 3) {
  i13 = HEAP32[i13 >> 2] | 0;
  i17 = Math_imul(i13, HEAP32[i14 + (i15 + 8) >> 2] | 0) | 0;
  i16 = i5 + i17 | 0;
  if (i10) {
   d19 = +HEAPF32[i5 + (i17 + 4) >> 2] * +HEAPF32[i1 >> 2];
   d18 = +HEAPF32[i5 + (i17 + 8) >> 2] * +HEAPF32[i6 >> 2];
   HEAPF32[i3 + 32 >> 2] = +HEAPF32[i16 >> 2] * +HEAPF32[i4 >> 2];
   HEAPF32[i3 + 36 >> 2] = d19;
   HEAPF32[i3 + 40 >> 2] = d18;
   HEAPF32[i3 + 44 >> 2] = 0.0;
   i17 = Math_imul(i13, HEAP32[i14 + (i15 + 4) >> 2] | 0) | 0;
   d18 = +HEAPF32[i5 + (i17 + 4) >> 2] * +HEAPF32[i1 >> 2];
   d19 = +HEAPF32[i5 + (i17 + 8) >> 2] * +HEAPF32[i6 >> 2];
   HEAPF32[i3 + 16 >> 2] = +HEAPF32[i5 + i17 >> 2] * +HEAPF32[i4 >> 2];
   HEAPF32[i3 + 20 >> 2] = d18;
   HEAPF32[i3 + 24 >> 2] = d19;
   HEAPF32[i3 + 28 >> 2] = 0.0;
   i17 = Math_imul(i13, HEAP32[i8 >> 2] | 0) | 0;
   d19 = +HEAPF32[i5 + (i17 + 4) >> 2] * +HEAPF32[i1 >> 2];
   d18 = +HEAPF32[i5 + (i17 + 8) >> 2] * +HEAPF32[i6 >> 2];
   HEAPF32[i3 >> 2] = +HEAPF32[i5 + i17 >> 2] * +HEAPF32[i4 >> 2];
   HEAPF32[i3 + 4 >> 2] = d19;
   HEAPF32[i3 + 8 >> 2] = d18;
   HEAPF32[i3 + 12 >> 2] = 0.0;
   i17 = i2 + 8 | 0;
   i17 = HEAP32[i17 >> 2] | 0;
   i16 = HEAP32[i17 >> 2] | 0;
   i16 = i16 + 8 | 0;
   i16 = HEAP32[i16 >> 2] | 0;
   FUNCTION_TABLE_viiii[i16 & 63](i17, i3, i11, i12);
   i17 = HEAP32[i7 >> 2] | 0;
   i16 = HEAP32[i17 >> 2] | 0;
   i16 = i16 + 24 | 0;
   i16 = HEAP32[i16 >> 2] | 0;
   FUNCTION_TABLE_vii[i16 & 127](i17, i11);
   STACKTOP = i9;
   return;
  } else {
   d18 = +HEAPF64[i5 + (i17 + 8) >> 3] * +HEAPF32[i1 >> 2];
   d19 = +HEAPF64[i5 + (i17 + 16) >> 3] * +HEAPF32[i6 >> 2];
   HEAPF32[i3 + 32 >> 2] = +HEAPF64[i16 >> 3] * +HEAPF32[i4 >> 2];
   HEAPF32[i3 + 36 >> 2] = d18;
   HEAPF32[i3 + 40 >> 2] = d19;
   HEAPF32[i3 + 44 >> 2] = 0.0;
   i17 = Math_imul(i13, HEAP32[i14 + (i15 + 4) >> 2] | 0) | 0;
   d19 = +HEAPF64[i5 + (i17 + 8) >> 3] * +HEAPF32[i1 >> 2];
   d18 = +HEAPF64[i5 + (i17 + 16) >> 3] * +HEAPF32[i6 >> 2];
   HEAPF32[i3 + 16 >> 2] = +HEAPF64[i5 + i17 >> 3] * +HEAPF32[i4 >> 2];
   HEAPF32[i3 + 20 >> 2] = d19;
   HEAPF32[i3 + 24 >> 2] = d18;
   HEAPF32[i3 + 28 >> 2] = 0.0;
   i17 = Math_imul(i13, HEAP32[i8 >> 2] | 0) | 0;
   d18 = +HEAPF64[i5 + (i17 + 8) >> 3] * +HEAPF32[i1 >> 2];
   d19 = +HEAPF64[i5 + (i17 + 16) >> 3] * +HEAPF32[i6 >> 2];
   HEAPF32[i3 >> 2] = +HEAPF64[i5 + i17 >> 3] * +HEAPF32[i4 >> 2];
   HEAPF32[i3 + 4 >> 2] = d18;
   HEAPF32[i3 + 8 >> 2] = d19;
   HEAPF32[i3 + 12 >> 2] = 0.0;
   i17 = i2 + 8 | 0;
   i17 = HEAP32[i17 >> 2] | 0;
   i16 = HEAP32[i17 >> 2] | 0;
   i16 = i16 + 8 | 0;
   i16 = HEAP32[i16 >> 2] | 0;
   FUNCTION_TABLE_viiii[i16 & 63](i17, i3, i11, i12);
   i17 = HEAP32[i7 >> 2] | 0;
   i16 = HEAP32[i17 >> 2] | 0;
   i16 = i16 + 24 | 0;
   i16 = HEAP32[i16 >> 2] | 0;
   FUNCTION_TABLE_vii[i16 & 127](i17, i11);
   STACKTOP = i9;
   return;
  }
 } else {
  i14 = 2;
  while (1) {
   i16 = Math_imul(HEAP32[i13 >> 2] | 0, HEAPU16[i8 + (i14 << 1) >> 1] | 0) | 0;
   i15 = i5 + i16 | 0;
   if (i10) {
    d18 = +HEAPF32[i5 + (i16 + 4) >> 2] * +HEAPF32[i1 >> 2];
    d19 = +HEAPF32[i5 + (i16 + 8) >> 2] * +HEAPF32[i6 >> 2];
    HEAPF32[i3 + (i14 << 4) >> 2] = +HEAPF32[i15 >> 2] * +HEAPF32[i4 >> 2];
    HEAPF32[i3 + (i14 << 4) + 4 >> 2] = d18;
    HEAPF32[i3 + (i14 << 4) + 8 >> 2] = d19;
    HEAPF32[i3 + (i14 << 4) + 12 >> 2] = 0.0;
   } else {
    d18 = +HEAPF64[i5 + (i16 + 8) >> 3] * +HEAPF32[i1 >> 2];
    d19 = +HEAPF64[i5 + (i16 + 16) >> 3] * +HEAPF32[i6 >> 2];
    HEAPF32[i3 + (i14 << 4) >> 2] = +HEAPF64[i15 >> 3] * +HEAPF32[i4 >> 2];
    HEAPF32[i3 + (i14 << 4) + 4 >> 2] = d18;
    HEAPF32[i3 + (i14 << 4) + 8 >> 2] = d19;
    HEAPF32[i3 + (i14 << 4) + 12 >> 2] = 0.0;
   }
   if ((i14 | 0) > 0) {
    i14 = i14 + -1 | 0;
   } else {
    break;
   }
  }
  i17 = i2 + 8 | 0;
  i17 = HEAP32[i17 >> 2] | 0;
  i16 = HEAP32[i17 >> 2] | 0;
  i16 = i16 + 8 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  FUNCTION_TABLE_viiii[i16 & 63](i17, i3, i11, i12);
  i17 = HEAP32[i7 >> 2] | 0;
  i16 = HEAP32[i17 >> 2] | 0;
  i16 = i16 + 24 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  FUNCTION_TABLE_vii[i16 & 127](i17, i11);
  STACKTOP = i9;
  return;
 }
}
function __ZN27btPolyhedralContactClipping19clipHullAgainstHullERK9btVector3RK18btConvexPolyhedronS5_RK11btTransformS8_ffRN36btDiscreteCollisionDetectorInterface6ResultE(i3, i4, i16, i5, i8, d6, d7, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i16 = i16 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 d6 = +d6;
 d7 = +d7;
 i2 = i2 | 0;
 var i1 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, i50 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i1;
 i13 = HEAP32[i16 + 28 >> 2] | 0;
 if ((i13 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i12 = HEAP32[i16 + 36 >> 2] | 0;
 d46 = +HEAPF32[i8 >> 2];
 d45 = +HEAPF32[i8 + 4 >> 2];
 d44 = +HEAPF32[i8 + 8 >> 2];
 d40 = +HEAPF32[i8 + 16 >> 2];
 d42 = +HEAPF32[i8 + 20 >> 2];
 d38 = +HEAPF32[i8 + 24 >> 2];
 d31 = +HEAPF32[i8 + 32 >> 2];
 d30 = +HEAPF32[i8 + 36 >> 2];
 d29 = +HEAPF32[i8 + 40 >> 2];
 d41 = +HEAPF32[i3 >> 2];
 d37 = +HEAPF32[i3 + 4 >> 2];
 d47 = +HEAPF32[i3 + 8 >> 2];
 i15 = -1;
 d43 = -3.4028234663852886e+38;
 i11 = 0;
 while (1) {
  d49 = +HEAPF32[i12 + (i11 * 56 | 0) + 40 >> 2];
  d48 = +HEAPF32[i12 + (i11 * 56 | 0) + 44 >> 2];
  d39 = +HEAPF32[i12 + (i11 * 56 | 0) + 48 >> 2];
  d39 = (d49 * d46 + d48 * d45 + d39 * d44) * d41 + (d49 * d40 + d48 * d42 + d39 * d38) * d37 + (d49 * d31 + d48 * d30 + d39 * d29) * d47;
  i10 = d39 > d43;
  i15 = i10 ? i11 : i15;
  i11 = i11 + 1 | 0;
  if ((i11 | 0) >= (i13 | 0)) {
   break;
  } else {
   d43 = i10 ? d39 : d43;
  }
 }
 if ((i15 | 0) < 0) {
  STACKTOP = i1;
  return;
 }
 i11 = i9 + 16 | 0;
 HEAP8[i11] = 1;
 i12 = i9 + 12 | 0;
 HEAP32[i12 >> 2] = 0;
 i13 = i9 + 4 | 0;
 HEAP32[i13 >> 2] = 0;
 i10 = i9 + 8 | 0;
 HEAP32[i10 >> 2] = 0;
 i17 = HEAP32[i16 + 36 >> 2] | 0;
 i14 = HEAP32[i17 + (i15 * 56 | 0) + 4 >> 2] | 0;
 L10 : do {
  if ((i14 | 0) > 0) {
   i15 = i17 + (i15 * 56 | 0) + 12 | 0;
   i26 = i16 + 16 | 0;
   i24 = i8 + 4 | 0;
   i23 = i8 + 8 | 0;
   i27 = i8 + 48 | 0;
   i21 = i8 + 16 | 0;
   i20 = i8 + 20 | 0;
   i19 = i8 + 24 | 0;
   i22 = i8 + 52 | 0;
   i17 = i8 + 32 | 0;
   i16 = i8 + 36 | 0;
   i25 = i8 + 40 | 0;
   i18 = i8 + 56 | 0;
   i32 = 0;
   i34 = 0;
   i28 = 0;
   while (1) {
    i36 = HEAP32[(HEAP32[i15 >> 2] | 0) + (i28 << 2) >> 2] | 0;
    i35 = HEAP32[i26 >> 2] | 0;
    d48 = +HEAPF32[i35 + (i36 << 4) >> 2];
    d49 = +HEAPF32[i35 + (i36 << 4) + 4 >> 2];
    d29 = +HEAPF32[i35 + (i36 << 4) + 8 >> 2];
    d31 = +HEAPF32[i27 >> 2] + (+HEAPF32[i8 >> 2] * d48 + +HEAPF32[i24 >> 2] * d49 + +HEAPF32[i23 >> 2] * d29);
    d30 = +HEAPF32[i22 >> 2] + (d48 * +HEAPF32[i21 >> 2] + d49 * +HEAPF32[i20 >> 2] + d29 * +HEAPF32[i19 >> 2]);
    d29 = +HEAPF32[i18 >> 2] + (d48 * +HEAPF32[i17 >> 2] + d49 * +HEAPF32[i16 >> 2] + d29 * +HEAPF32[i25 >> 2]);
    if ((i32 | 0) == (i34 | 0)) {
     i32 = (i34 | 0) == 0 ? 1 : i34 << 1;
     if ((i34 | 0) < (i32 | 0)) {
      if ((i32 | 0) == 0) {
       i33 = 0;
      } else {
       i33 = __Z22btAlignedAllocInternalji(i32 << 4, 16) | 0;
       i34 = HEAP32[i13 >> 2] | 0;
      }
      if ((i34 | 0) > 0) {
       i35 = 0;
       do {
        i36 = i33 + (i35 << 4) | 0;
        if ((i36 | 0) != 0) {
         i50 = (HEAP32[i12 >> 2] | 0) + (i35 << 4) | 0;
         HEAP32[i36 + 0 >> 2] = HEAP32[i50 + 0 >> 2];
         HEAP32[i36 + 4 >> 2] = HEAP32[i50 + 4 >> 2];
         HEAP32[i36 + 8 >> 2] = HEAP32[i50 + 8 >> 2];
         HEAP32[i36 + 12 >> 2] = HEAP32[i50 + 12 >> 2];
        }
        i35 = i35 + 1 | 0;
       } while ((i35 | 0) != (i34 | 0));
      }
      i34 = HEAP32[i12 >> 2] | 0;
      if ((i34 | 0) != 0) {
       if ((HEAP8[i11] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i34);
       }
       HEAP32[i12 >> 2] = 0;
      }
      HEAP8[i11] = 1;
      HEAP32[i12 >> 2] = i33;
      HEAP32[i10 >> 2] = i32;
      i34 = HEAP32[i13 >> 2] | 0;
     }
    } else {
     i34 = i32;
    }
    i32 = HEAP32[i12 >> 2] | 0;
    i33 = i32 + (i34 << 4) | 0;
    if ((i33 | 0) != 0) {
     HEAPF32[i33 >> 2] = d31;
     HEAPF32[i32 + (i34 << 4) + 4 >> 2] = d30;
     HEAPF32[i32 + (i34 << 4) + 8 >> 2] = d29;
     HEAPF32[i32 + (i34 << 4) + 12 >> 2] = 0.0;
     i34 = HEAP32[i13 >> 2] | 0;
    }
    i32 = i34 + 1 | 0;
    HEAP32[i13 >> 2] = i32;
    i28 = i28 + 1 | 0;
    if ((i28 | 0) >= (i14 | 0)) {
     break L10;
    }
    i34 = HEAP32[i10 >> 2] | 0;
   }
  }
 } while (0);
 __ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_EffRN36btDiscreteCollisionDetectorInterface6ResultE(i3, i4, i5, i9, d6, d7, i2);
 i2 = HEAP32[i12 >> 2] | 0;
 if ((i2 | 0) != 0) {
  if ((HEAP8[i11] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i2);
  }
  HEAP32[i12 >> 2] = 0;
 }
 HEAP8[i11] = 1;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZNK14btQuantizedBvh9serializeEPvP12btSerializer(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 HEAPF32[i3 + 16 >> 2] = +HEAPF32[i4 + 20 >> 2];
 HEAPF32[i3 + 20 >> 2] = +HEAPF32[i4 + 24 >> 2];
 HEAPF32[i3 + 24 >> 2] = +HEAPF32[i4 + 28 >> 2];
 HEAPF32[i3 + 28 >> 2] = +HEAPF32[i4 + 32 >> 2];
 HEAPF32[i3 >> 2] = +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i4 + 12 >> 2];
 HEAPF32[i3 + 12 >> 2] = +HEAPF32[i4 + 16 >> 2];
 HEAPF32[i3 + 32 >> 2] = +HEAPF32[i4 + 36 >> 2];
 HEAPF32[i3 + 36 >> 2] = +HEAPF32[i4 + 40 >> 2];
 HEAPF32[i3 + 40 >> 2] = +HEAPF32[i4 + 44 >> 2];
 HEAPF32[i3 + 44 >> 2] = +HEAPF32[i4 + 48 >> 2];
 HEAP32[i3 + 48 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i3 + 52 >> 2] = HEAPU8[i4 + 60 | 0] | 0;
 i5 = i4 + 88 | 0;
 HEAP32[i3 + 56 >> 2] = HEAP32[i5 >> 2];
 if ((HEAP32[i5 >> 2] | 0) != 0) {
  i7 = i4 + 96 | 0;
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i3 + 64 >> 2] = i9;
  if ((i9 | 0) != 0) {
   i6 = HEAP32[i5 >> 2] | 0;
   i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 48, i6) | 0;
   if ((i6 | 0) > 0) {
    i8 = HEAP32[i7 >> 2] | 0;
    i9 = 0;
    i7 = HEAP32[i5 + 8 >> 2] | 0;
    while (1) {
     HEAPF32[i7 + 16 >> 2] = +HEAPF32[i8 + (i9 << 6) + 16 >> 2];
     HEAPF32[i7 + 20 >> 2] = +HEAPF32[i8 + (i9 << 6) + 20 >> 2];
     HEAPF32[i7 + 24 >> 2] = +HEAPF32[i8 + (i9 << 6) + 24 >> 2];
     HEAPF32[i7 + 28 >> 2] = +HEAPF32[i8 + (i9 << 6) + 28 >> 2];
     HEAPF32[i7 >> 2] = +HEAPF32[i8 + (i9 << 6) >> 2];
     HEAPF32[i7 + 4 >> 2] = +HEAPF32[i8 + (i9 << 6) + 4 >> 2];
     HEAPF32[i7 + 8 >> 2] = +HEAPF32[i8 + (i9 << 6) + 8 >> 2];
     HEAPF32[i7 + 12 >> 2] = +HEAPF32[i8 + (i9 << 6) + 12 >> 2];
     HEAP32[i7 + 32 >> 2] = HEAP32[i8 + (i9 << 6) + 32 >> 2];
     HEAP32[i7 + 36 >> 2] = HEAP32[i8 + (i9 << 6) + 36 >> 2];
     HEAP32[i7 + 40 >> 2] = HEAP32[i8 + (i9 << 6) + 40 >> 2];
     i9 = i9 + 1 | 0;
     if ((i9 | 0) == (i6 | 0)) {
      break;
     } else {
      i7 = i7 + 48 | 0;
     }
    }
   } else {
    i8 = HEAP32[i7 >> 2] | 0;
   }
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, 456272, 1497453121, i8);
  }
 } else {
  HEAP32[i3 + 64 >> 2] = 0;
 }
 i5 = i4 + 128 | 0;
 HEAP32[i3 + 60 >> 2] = HEAP32[i5 >> 2];
 if ((HEAP32[i5 >> 2] | 0) != 0) {
  i7 = i4 + 136 | 0;
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i3 + 68 >> 2] = i9;
  if ((i9 | 0) != 0) {
   i6 = HEAP32[i5 >> 2] | 0;
   i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 16, i6) | 0;
   if ((i6 | 0) > 0) {
    i7 = HEAP32[i7 >> 2] | 0;
    i9 = 0;
    i8 = HEAP32[i5 + 8 >> 2] | 0;
    while (1) {
     HEAP32[i8 + 12 >> 2] = HEAP32[i7 + (i9 << 4) + 12 >> 2];
     HEAP16[i8 + 6 >> 1] = HEAP16[i7 + (i9 << 4) + 6 >> 1] | 0;
     HEAP16[i8 + 8 >> 1] = HEAP16[i7 + (i9 << 4) + 8 >> 1] | 0;
     HEAP16[i8 + 10 >> 1] = HEAP16[i7 + (i9 << 4) + 10 >> 1] | 0;
     HEAP16[i8 >> 1] = HEAP16[i7 + (i9 << 4) >> 1] | 0;
     HEAP16[i8 + 2 >> 1] = HEAP16[i7 + (i9 << 4) + 2 >> 1] | 0;
     HEAP16[i8 + 4 >> 1] = HEAP16[i7 + (i9 << 4) + 4 >> 1] | 0;
     i9 = i9 + 1 | 0;
     if ((i9 | 0) == (i6 | 0)) {
      break;
     } else {
      i8 = i8 + 16 | 0;
     }
    }
   } else {
    i7 = HEAP32[i7 >> 2] | 0;
   }
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, 456296, 1497453121, i7);
  }
 } else {
  HEAP32[i3 + 68 >> 2] = 0;
 }
 HEAP32[i3 + 76 >> 2] = HEAP32[i4 + 144 >> 2];
 i6 = i4 + 152 | 0;
 HEAP32[i3 + 80 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i6 >> 2] | 0) == 0) {
  HEAP32[i3 + 72 >> 2] = 0;
  STACKTOP = i2;
  return 456344;
 }
 i5 = i4 + 160 | 0;
 i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i3 + 72 >> 2] = i9;
 if ((i9 | 0) == 0) {
  STACKTOP = i2;
  return 456344;
 }
 i4 = HEAP32[i6 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 20, i4) | 0;
 if ((i4 | 0) > 0) {
  i5 = HEAP32[i5 >> 2] | 0;
  i7 = 0;
  i6 = HEAP32[i3 + 8 >> 2] | 0;
  while (1) {
   HEAP16[i6 + 14 >> 1] = HEAP16[i5 + (i7 << 5) + 6 >> 1] | 0;
   HEAP16[i6 + 16 >> 1] = HEAP16[i5 + (i7 << 5) + 8 >> 1] | 0;
   HEAP16[i6 + 18 >> 1] = HEAP16[i5 + (i7 << 5) + 10 >> 1] | 0;
   HEAP16[i6 + 8 >> 1] = HEAP16[i5 + (i7 << 5) >> 1] | 0;
   HEAP16[i6 + 10 >> 1] = HEAP16[i5 + (i7 << 5) + 2 >> 1] | 0;
   HEAP16[i6 + 12 >> 1] = HEAP16[i5 + (i7 << 5) + 4 >> 1] | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + (i7 << 5) + 12 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i5 + (i7 << 5) + 16 >> 2];
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == (i4 | 0)) {
    break;
   } else {
    i6 = i6 + 20 | 0;
   }
  }
 } else {
  i5 = HEAP32[i5 >> 2] | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i3, 456320, 1497453121, i5);
 STACKTOP = i2;
 return 456344;
}
function __ZN25btSimulationIslandManager12buildIslandsEP12btDispatcherP16btCollisionWorld(i5, i1, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(456752);
 i3 = i5 + 28 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 if ((i7 | 0) < 0) {
  i9 = i5 + 32 | 0;
  i6 = i5 + 36 | 0;
  if ((HEAP32[i9 >> 2] | 0) < 0) {
   i11 = HEAP32[i6 >> 2] | 0;
   i10 = i5 + 40 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i6 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
  }
  do {
   i9 = (HEAP32[i6 >> 2] | 0) + (i7 << 2) | 0;
   if ((i9 | 0) != 0) {
    HEAP32[i9 >> 2] = 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 0);
 }
 HEAP32[i3 >> 2] = 0;
 __ZN11btUnionFind11sortIslandsEv(i5 + 4 | 0);
 i7 = HEAP32[i5 + 8 >> 2] | 0;
 if ((i7 | 0) > 0) {
  i6 = i5 + 16 | 0;
  i9 = i8 + 16 | 0;
  i12 = 0;
  while (1) {
   i13 = HEAP32[i6 >> 2] | 0;
   i11 = HEAP32[i13 + (i12 << 3) >> 2] | 0;
   i8 = i12;
   do {
    i8 = i8 + 1 | 0;
    i10 = (i8 | 0) < (i7 | 0);
    if (!i10) {
     break;
    }
   } while ((HEAP32[i13 + (i8 << 3) >> 2] | 0) == (i11 | 0));
   i14 = (i12 | 0) < (i8 | 0);
   L25 : do {
    if (i14) {
     i15 = HEAP32[i9 >> 2] | 0;
     i17 = 1;
     i16 = i12;
     do {
      i18 = HEAP32[i15 + (HEAP32[i13 + (i16 << 3) + 4 >> 2] << 2) >> 2] | 0;
      if ((HEAP32[i18 + 208 >> 2] | 0) == (i11 | 0)) {
       i18 = HEAP32[i18 + 216 >> 2] | 0;
       i17 = i17 & (i18 | 0) != 1 & (i18 | 0) != 4;
      }
      i16 = i16 + 1 | 0;
     } while ((i16 | 0) != (i8 | 0));
     if (i17) {
      if (!i14) {
       break;
      }
      while (1) {
       i13 = HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i13 + (i12 << 3) + 4 >> 2] << 2) >> 2] | 0;
       if ((HEAP32[i13 + 208 >> 2] | 0) == (i11 | 0)) {
        __ZN17btCollisionObject18setActivationStateEi(i13, 2);
       }
       i12 = i12 + 1 | 0;
       if ((i12 | 0) >= (i8 | 0)) {
        break L25;
       }
       i13 = HEAP32[i6 >> 2] | 0;
      }
     }
     if (i14) {
      while (1) {
       i13 = HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i13 + (i12 << 3) + 4 >> 2] << 2) >> 2] | 0;
       if ((HEAP32[i13 + 208 >> 2] | 0) == (i11 | 0) ? (HEAP32[i13 + 216 >> 2] | 0) == 2 : 0) {
        __ZN17btCollisionObject18setActivationStateEi(i13, 3);
        HEAPF32[i13 + 220 >> 2] = 0.0;
       }
       i12 = i12 + 1 | 0;
       if ((i12 | 0) >= (i8 | 0)) {
        break L25;
       }
       i13 = HEAP32[i6 >> 2] | 0;
      }
     }
    }
   } while (0);
   if (i10) {
    i12 = i8;
   } else {
    break;
   }
  }
 }
 i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 if ((i8 | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i4;
  return;
 }
 i9 = i5 + 64 | 0;
 i7 = i5 + 32 | 0;
 i6 = i5 + 36 | 0;
 i10 = i5 + 40 | 0;
 i5 = 0;
 do {
  i11 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 31](i1, i5) | 0;
  i12 = HEAP32[i11 + 1108 >> 2] | 0;
  i13 = HEAP32[i11 + 1112 >> 2] | 0;
  if ((i12 | 0) != 0 ? (HEAP32[i12 + 216 >> 2] | 0) != 2 : 0) {
   i14 = 40;
  } else {
   i14 = 38;
  }
  if (((i14 | 0) == 38 ? (i14 = 0, (i13 | 0) != 0) : 0) ? (HEAP32[i13 + 216 >> 2] | 0) != 2 : 0) {
   i14 = 40;
  }
  if ((i14 | 0) == 40) {
   if ((HEAP32[i12 + 204 >> 2] & 2 | 0) != 0 ? (HEAP32[i12 + 216 >> 2] | 0) != 2 : 0) {
    __ZN17btCollisionObject8activateEb(i13, 0);
   }
   if ((HEAP32[i13 + 204 >> 2] & 2 | 0) != 0 ? (HEAP32[i13 + 216 >> 2] | 0) != 2 : 0) {
    __ZN17btCollisionObject8activateEb(i12, 0);
   }
   if ((HEAP8[i9] | 0) != 0 ? FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, i12, i13) | 0 : 0) {
    i13 = HEAP32[i3 >> 2] | 0;
    if ((i13 | 0) == (HEAP32[i7 >> 2] | 0) ? (i2 = (i13 | 0) == 0 ? 1 : i13 << 1, (i13 | 0) < (i2 | 0)) : 0) {
     if ((i2 | 0) == 0) {
      i12 = 0;
     } else {
      i12 = __Z22btAlignedAllocInternalji(i2 << 2, 16) | 0;
      i13 = HEAP32[i3 >> 2] | 0;
     }
     if ((i13 | 0) > 0) {
      i15 = 0;
      do {
       i14 = i12 + (i15 << 2) | 0;
       if ((i14 | 0) != 0) {
        HEAP32[i14 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + (i15 << 2) >> 2];
       }
       i15 = i15 + 1 | 0;
      } while ((i15 | 0) != (i13 | 0));
     }
     i14 = HEAP32[i6 >> 2] | 0;
     if ((i14 | 0) != 0) {
      if ((HEAP8[i10] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i14);
       i13 = HEAP32[i3 >> 2] | 0;
      }
      HEAP32[i6 >> 2] = 0;
     }
     HEAP8[i10] = 1;
     HEAP32[i6 >> 2] = i12;
     HEAP32[i7 >> 2] = i2;
    }
    i12 = (HEAP32[i6 >> 2] | 0) + (i13 << 2) | 0;
    if ((i12 | 0) != 0) {
     HEAP32[i12 >> 2] = i11;
    }
    HEAP32[i3 >> 2] = i13 + 1;
   }
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i8 | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i4;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i1, i8, i7, i2, i6, i5, i9, i10, i4, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i6 = i3 + 272 | 0;
 i4 = i3 + 136 | 0;
 i2 = i3;
 i9 = i1 + 8 | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i11 = HEAP32[i1 + 16 >> 2] | 0;
  i13 = i1 + 56 | 0;
  if ((HEAP32[i10 + 60 >> 2] & 8 | 0) == 0) {
   i12 = 0;
   do {
    HEAPF32[(HEAP32[i11 + (i12 * 136 | 0) + 112 >> 2] | 0) + 112 >> 2] = +HEAPF32[i11 + (i12 * 136 | 0) + 84 >> 2];
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i5 | 0));
  } else {
   i12 = 0;
   do {
    i14 = HEAP32[i11 + (i12 * 136 | 0) + 112 >> 2] | 0;
    HEAPF32[i14 + 112 >> 2] = +HEAPF32[i11 + (i12 * 136 | 0) + 84 >> 2];
    i15 = HEAP32[i11 + (i12 * 136 | 0) + 100 >> 2] | 0;
    i16 = HEAP32[i13 >> 2] | 0;
    HEAPF32[i14 + 120 >> 2] = +HEAPF32[i16 + (i15 * 136 | 0) + 84 >> 2];
    HEAPF32[i14 + 124 >> 2] = +HEAPF32[i16 + ((i15 + 1 | 0) * 136 | 0) + 84 >> 2];
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i5 | 0));
  }
 }
 i5 = i1 + 28 | 0;
 i13 = HEAP32[i5 >> 2] | 0;
 if ((i13 | 0) > 0) {
  i12 = HEAP32[i1 + 36 >> 2] | 0;
  i11 = 0;
  do {
   i14 = HEAP32[i12 + (i11 * 136 | 0) + 112 >> 2] | 0;
   i16 = i12 + (i11 * 136 | 0) + 84 | 0;
   HEAPF32[i14 + 32 >> 2] = +HEAPF32[i16 >> 2];
   if (+HEAPF32[i16 >> 2] > +HEAPF32[i14 + 16 >> 2]) {
    HEAP8[i14 + 20 | 0] = 0;
   }
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i13 | 0));
 }
 i11 = (i7 | 0) > 0;
 if ((HEAP32[i10 + 44 >> 2] | 0) == 0) {
  if (i11) {
   i11 = 0;
   do {
    i10 = HEAP32[i8 + (i11 << 2) >> 2] | 0;
    if (!((HEAP32[i10 + 232 >> 2] & 2 | 0) == 0 | (i10 | 0) == 0) ? +HEAPF32[i10 + 336 >> 2] != 0.0 : 0) {
     i16 = i10 + 304 | 0;
     i15 = i10 + 308 | 0;
     d17 = +HEAPF32[i15 >> 2] + +HEAPF32[i10 + 508 >> 2];
     i14 = i10 + 312 | 0;
     d18 = +HEAPF32[i14 >> 2] + +HEAPF32[i10 + 512 >> 2];
     HEAPF32[i16 >> 2] = +HEAPF32[i16 >> 2] + +HEAPF32[i10 + 504 >> 2];
     HEAPF32[i15 >> 2] = d17;
     HEAPF32[i14 >> 2] = d18;
     HEAPF32[i10 + 316 >> 2] = 0.0;
     i14 = i10 + 320 | 0;
     i15 = i10 + 324 | 0;
     d18 = +HEAPF32[i15 >> 2] + +HEAPF32[i10 + 524 >> 2];
     i16 = i10 + 328 | 0;
     d17 = +HEAPF32[i16 >> 2] + +HEAPF32[i10 + 528 >> 2];
     HEAPF32[i14 >> 2] = +HEAPF32[i14 >> 2] + +HEAPF32[i10 + 520 >> 2];
     HEAPF32[i15 >> 2] = d18;
     HEAPF32[i16 >> 2] = d17;
     HEAPF32[i10 + 332 >> 2] = 0.0;
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i7 | 0));
  }
 } else {
  if (i11) {
   i10 = i10 + 12 | 0;
   i11 = 0;
   do {
    i12 = HEAP32[i8 + (i11 << 2) >> 2] | 0;
    if (!((HEAP32[i12 + 232 >> 2] & 2 | 0) == 0 | (i12 | 0) == 0)) {
     __ZN11btRigidBody25internalWritebackVelocityEf(i12, +HEAPF32[i10 >> 2]);
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i7 | 0));
  }
 }
 _memset(i6 | 0, 0, 136) | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 if ((i8 | 0) < 0) {
  i11 = i1 + 12 | 0;
  i7 = i1 + 16 | 0;
  if ((HEAP32[i11 >> 2] | 0) < 0) {
   i12 = HEAP32[i7 >> 2] | 0;
   i10 = i1 + 20 | 0;
   if ((i12 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i12);
    }
    HEAP32[i7 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
  }
  do {
   _memcpy((HEAP32[i7 >> 2] | 0) + (i8 * 136 | 0) | 0, i6 | 0, 136) | 0;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != 0);
 }
 HEAP32[i9 >> 2] = 0;
 _memset(i4 | 0, 0, 136) | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if ((i7 | 0) < 0) {
  i8 = i1 + 32 | 0;
  i6 = i1 + 36 | 0;
  if ((HEAP32[i8 >> 2] | 0) < 0) {
   i9 = HEAP32[i6 >> 2] | 0;
   i10 = i1 + 40 | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i9);
    }
    HEAP32[i6 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i8 >> 2] = 0;
  }
  do {
   _memcpy((HEAP32[i6 >> 2] | 0) + (i7 * 136 | 0) | 0, i4 | 0, 136) | 0;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 0);
 }
 HEAP32[i5 >> 2] = 0;
 _memset(i2 | 0, 0, 136) | 0;
 i5 = i1 + 48 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) >= 0) {
  HEAP32[i5 >> 2] = 0;
  STACKTOP = i3;
  return 0.0;
 }
 i7 = i1 + 52 | 0;
 i4 = i1 + 56 | 0;
 if ((HEAP32[i7 >> 2] | 0) < 0) {
  i8 = HEAP32[i4 >> 2] | 0;
  i1 = i1 + 60 | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i1] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i8);
   }
   HEAP32[i4 >> 2] = 0;
  }
  HEAP8[i1] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
 }
 do {
  _memcpy((HEAP32[i4 >> 2] | 0) + (i6 * 136 | 0) | 0, i2 | 0, 136) | 0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != 0);
 HEAP32[i5 >> 2] = 0;
 STACKTOP = i3;
 return 0.0;
}
function __ZN16btDbvtBroadphase7collideEP12btDispatcher(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i1 + 16 | 0;
 i9 = i1;
 i8 = i2 + 4 | 0;
 __ZN6btDbvt19optimizeIncrementalEi(i8, ((Math_imul(HEAP32[i2 + 112 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0) | 0) / 100 | 0) + 1 | 0);
 i10 = i2 + 124 | 0;
 if ((HEAP32[i10 >> 2] | 0) != 0) {
  i12 = ((Math_imul(HEAP32[i2 + 108 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) / 100 | 0) + 1 | 0;
  __ZN6btDbvt19optimizeIncrementalEi(i2 + 44 | 0, i12);
  i12 = (HEAP32[i10 >> 2] | 0) - i12 | 0;
  HEAP32[i10 >> 2] = (i12 | 0) < 0 ? 0 : i12;
 }
 i20 = i2 + 104 | 0;
 i15 = ((HEAP32[i20 >> 2] | 0) + 1 | 0) % 2 | 0;
 HEAP32[i20 >> 2] = i15;
 i15 = HEAP32[i2 + (i15 << 2) + 84 >> 2] | 0;
 if ((i15 | 0) != 0) {
  i14 = i2 + 92 | 0;
  i12 = i11 + 16 | 0;
  i13 = i2 + 44 | 0;
  while (1) {
   i19 = i15 + 56 | 0;
   i16 = HEAP32[i19 >> 2] | 0;
   i17 = i15 + 60 | 0;
   i18 = i15 + 52 | 0;
   i20 = HEAP32[i18 >> 2] | 0;
   if ((i20 | 0) == 0) {
    HEAP32[i2 + (HEAP32[i17 >> 2] << 2) + 84 >> 2] = i16;
   } else {
    HEAP32[i20 + 56 >> 2] = i16;
   }
   i20 = HEAP32[i19 >> 2] | 0;
   if ((i20 | 0) != 0) {
    HEAP32[i20 + 52 >> 2] = HEAP32[i18 >> 2];
   }
   HEAP32[i18 >> 2] = 0;
   HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
   i18 = HEAP32[i14 >> 2] | 0;
   if ((i18 | 0) != 0) {
    HEAP32[i18 + 52 >> 2] = i15;
   }
   HEAP32[i14 >> 2] = i15;
   i20 = i15 + 48 | 0;
   __ZN6btDbvt6removeEP10btDbvtNode(i8, HEAP32[i20 >> 2] | 0);
   i18 = i15 + 16 | 0;
   i19 = i15 + 32 | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
   HEAP32[i12 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
   HEAP32[i12 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
   HEAP32[i20 >> 2] = __ZN6btDbvt6insertERK12btDbvtAabbMmPv(i13, i11, i15) | 0;
   HEAP32[i17 >> 2] = 2;
   if ((i16 | 0) == 0) {
    break;
   } else {
    i15 = i16;
   }
  }
  HEAP32[i10 >> 2] = HEAP32[i2 + 56 >> 2];
  HEAP8[i2 + 154 | 0] = 1;
 }
 HEAP32[i9 >> 2] = 452016;
 HEAP32[i9 + 4 >> 2] = i2;
 i10 = i2 + 153 | 0;
 if ((HEAP8[i10] | 0) != 0 ? (__ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i8, HEAP32[i8 >> 2] | 0, HEAP32[i2 + 44 >> 2] | 0, i9), (HEAP8[i10] | 0) != 0) : 0) {
  i20 = HEAP32[i8 >> 2] | 0;
  __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i8, i20, i20, i9);
 }
 i8 = i2 + 154 | 0;
 do {
  if ((HEAP8[i8] | 0) != 0 ? (i5 = i2 + 96 | 0, i7 = HEAP32[i5 >> 2] | 0, i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 127](i7) | 0, i4 = i7 + 4 | 0, i6 = HEAP32[i4 >> 2] | 0, (i6 | 0) > 0) : 0) {
   i9 = (Math_imul(HEAP32[i2 + 116 >> 2] | 0, i6) | 0) / 100 | 0;
   i10 = HEAP32[i2 + 120 >> 2] | 0;
   i9 = (i10 | 0) > (i9 | 0) ? i10 : i9;
   i11 = (i6 | 0) < (i9 | 0) ? i6 : i9;
   i9 = i2 + 144 | 0;
   if ((i11 | 0) > 0) {
    i7 = i7 + 12 | 0;
    i10 = 0;
    do {
     i13 = ((HEAP32[i9 >> 2] | 0) + i10 | 0) % (i6 | 0) | 0;
     i12 = HEAP32[i7 >> 2] | 0;
     i14 = HEAP32[i12 + (i13 << 4) >> 2] | 0;
     i13 = HEAP32[i12 + (i13 << 4) + 4 >> 2] | 0;
     i12 = HEAP32[i14 + 48 >> 2] | 0;
     i6 = HEAP32[i13 + 48 >> 2] | 0;
     if (!(((((+HEAPF32[i12 >> 2] <= +HEAPF32[i6 + 16 >> 2] ? +HEAPF32[i12 + 16 >> 2] >= +HEAPF32[i6 >> 2] : 0) ? +HEAPF32[i12 + 4 >> 2] <= +HEAPF32[i6 + 20 >> 2] : 0) ? +HEAPF32[i12 + 20 >> 2] >= +HEAPF32[i6 + 4 >> 2] : 0) ? +HEAPF32[i12 + 8 >> 2] <= +HEAPF32[i6 + 24 >> 2] : 0) ? +HEAPF32[i12 + 24 >> 2] >= +HEAPF32[i6 + 8 >> 2] : 0)) {
      i20 = HEAP32[i5 >> 2] | 0;
      FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] & 15](i20, i14, i13, i3) | 0;
      i10 = i10 + -1 | 0;
      i11 = i11 + -1 | 0;
     }
     i10 = i10 + 1 | 0;
     i6 = HEAP32[i4 >> 2] | 0;
    } while ((i10 | 0) < (i11 | 0));
   }
   if ((i6 | 0) > 0) {
    HEAP32[i9 >> 2] = ((HEAP32[i9 >> 2] | 0) + i11 | 0) % (i6 | 0) | 0;
    break;
   } else {
    HEAP32[i9 >> 2] = 0;
    break;
   }
  }
 } while (0);
 i3 = i2 + 140 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 HEAP32[i2 + 120 >> 2] = 1;
 HEAP8[i8] = 0;
 i3 = i2 + 128 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == 0) {
  HEAPF32[i2 + 136 >> 2] = 0.0;
  i19 = HEAP32[i2 + 132 >> 2] | 0;
  i20 = i2 + 132 | 0;
  i19 = i19 >>> 1;
  HEAP32[i20 >> 2] = i19;
  i20 = i4 >>> 1;
  HEAP32[i3 >> 2] = i20;
  STACKTOP = i1;
  return;
 } else {
  i19 = HEAP32[i2 + 132 >> 2] | 0;
  HEAPF32[i2 + 136 >> 2] = +(i19 >>> 0) / +(i4 >>> 0);
  i20 = i2 + 132 | 0;
  i19 = i19 >>> 1;
  HEAP32[i20 >> 2] = i19;
  i20 = i4 >>> 1;
  HEAP32[i3 >> 2] = i20;
  STACKTOP = i1;
  return;
 }
}
function __ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_S3_PfRj(i20, i18, i19, i17, i16, i2) {
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d21 = 0.0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i15 + 64 | 0;
 i6 = i15 + 16 | 0;
 i3 = i15 + 4 | 0;
 i4 = i15;
 HEAP32[i5 >> 2] = i20;
 HEAP32[i5 + 4 >> 2] = i18;
 HEAP32[i5 + 8 >> 2] = i19;
 HEAP32[i5 + 12 >> 2] = i17;
 d32 = +HEAPF32[i17 >> 2];
 d36 = +HEAPF32[i20 >> 2] - d32;
 i14 = i20 + 4 | 0;
 i8 = i17 + 4 | 0;
 d41 = +HEAPF32[i8 >> 2];
 d39 = +HEAPF32[i14 >> 2] - d41;
 i1 = i20 + 8 | 0;
 i9 = i17 + 8 | 0;
 d37 = +HEAPF32[i9 >> 2];
 d35 = +HEAPF32[i1 >> 2] - d37;
 HEAPF32[i6 >> 2] = d36;
 HEAPF32[i6 + 4 >> 2] = d39;
 HEAPF32[i6 + 8 >> 2] = d35;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 d30 = +HEAPF32[i18 >> 2];
 d38 = d30 - d32;
 i13 = i18 + 4 | 0;
 d33 = +HEAPF32[i13 >> 2];
 d7 = d33 - d41;
 i11 = i18 + 8 | 0;
 d27 = +HEAPF32[i11 >> 2];
 d40 = d27 - d37;
 HEAPF32[i6 + 16 >> 2] = d38;
 HEAPF32[i6 + 20 >> 2] = d7;
 HEAPF32[i6 + 24 >> 2] = d40;
 HEAPF32[i6 + 28 >> 2] = 0.0;
 d29 = +HEAPF32[i19 >> 2];
 d32 = d29 - d32;
 i10 = i19 + 4 | 0;
 d34 = +HEAPF32[i10 >> 2];
 d41 = d34 - d41;
 i12 = i19 + 8 | 0;
 d31 = +HEAPF32[i12 >> 2];
 d37 = d31 - d37;
 HEAPF32[i6 + 32 >> 2] = d32;
 HEAPF32[i6 + 36 >> 2] = d41;
 HEAPF32[i6 + 40 >> 2] = d37;
 HEAPF32[i6 + 44 >> 2] = 0.0;
 d7 = d39 * d40 * d32 + d35 * d38 * d41 - d41 * d40 * d36 - d39 * d38 * d37 + d37 * d36 * d7 - d32 * d35 * d7;
 d29 = d30 - d29;
 d34 = d33 - d34;
 d31 = d27 - d31;
 d35 = +HEAPF32[i20 >> 2];
 d30 = d35 - d30;
 d32 = +HEAPF32[i14 >> 2];
 d33 = d32 - d33;
 d36 = +HEAPF32[i1 >> 2];
 d27 = d36 - d27;
 if (!(d7 * (d36 * (d29 * d33 - d34 * d30) + (d35 * (d34 * d27 - d31 * d33) + d32 * (d31 * d30 - d29 * d27))) <= 0.0) | (d7 != d7 | 0.0 != 0.0 | d7 == 0.0)) {
  d41 = -1.0;
  STACKTOP = i15;
  return +d41;
 }
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i22 = i3 + 4 | 0;
 i23 = i3 + 8 | 0;
 i24 = i16 + 12 | 0;
 i25 = 0;
 d27 = -1.0;
 do {
  i26 = HEAP32[459600 + (i25 << 2) >> 2] | 0;
  d40 = +HEAPF32[i6 + (i25 << 4) + 4 >> 2];
  d37 = +HEAPF32[i6 + (i26 << 4) + 8 >> 2];
  d36 = +HEAPF32[i6 + (i25 << 4) + 8 >> 2];
  d38 = +HEAPF32[i6 + (i26 << 4) + 4 >> 2];
  d41 = +HEAPF32[i6 + (i26 << 4) >> 2];
  d39 = +HEAPF32[i6 + (i25 << 4) >> 2];
  if (d7 * ((d40 * d37 - d36 * d38) * +HEAPF32[i17 >> 2] + +HEAPF32[i8 >> 2] * (d36 * d41 - d37 * d39) + (d38 * d39 - d40 * d41) * +HEAPF32[i9 >> 2]) > 0.0 ? (d21 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_PfRj(HEAP32[i5 + (i25 << 2) >> 2] | 0, HEAP32[i5 + (i26 << 2) >> 2] | 0, i17, i3, i4), d27 < 0.0 | d21 < d27) : 0) {
   i28 = HEAP32[i4 >> 2] | 0;
   HEAP32[i2 >> 2] = ((i28 & 2 | 0) == 0 ? 0 : 1 << i26) + (i28 << 1 & 8) + ((i28 & 1 | 0) == 0 ? 0 : 1 << i25);
   HEAPF32[i16 + (i25 << 2) >> 2] = +HEAPF32[i3 >> 2];
   HEAPF32[i16 + (i26 << 2) >> 2] = +HEAPF32[i22 >> 2];
   HEAPF32[i16 + (HEAP32[459600 + (i26 << 2) >> 2] << 2) >> 2] = 0.0;
   HEAPF32[i24 >> 2] = +HEAPF32[i23 >> 2];
   d27 = d21;
  }
  i25 = i25 + 1 | 0;
 } while ((i25 | 0) != 3);
 if (!(d27 < 0.0)) {
  d41 = d27;
  STACKTOP = i15;
  return +d41;
 }
 HEAP32[i2 >> 2] = 15;
 d38 = +HEAPF32[i10 >> 2];
 d39 = +HEAPF32[i11 >> 2];
 d33 = +HEAPF32[i17 >> 2];
 d37 = +HEAPF32[i12 >> 2];
 d36 = +HEAPF32[i18 >> 2];
 d41 = +HEAPF32[i8 >> 2];
 d34 = +HEAPF32[i19 >> 2];
 d35 = +HEAPF32[i9 >> 2];
 d32 = +HEAPF32[i13 >> 2];
 HEAPF32[i16 >> 2] = (d38 * d39 * d33 + d37 * d36 * d41 - d41 * d39 * d34 - d38 * d36 * d35 + d35 * d34 * d32 - d33 * d37 * d32) / d7;
 d32 = +HEAPF32[i14 >> 2];
 d37 = +HEAPF32[i12 >> 2];
 d33 = +HEAPF32[i17 >> 2];
 d34 = +HEAPF32[i1 >> 2];
 d35 = +HEAPF32[i19 >> 2];
 d36 = +HEAPF32[i8 >> 2];
 d38 = +HEAPF32[i20 >> 2];
 d39 = +HEAPF32[i9 >> 2];
 d41 = +HEAPF32[i10 >> 2];
 d41 = (d32 * d37 * d33 + d34 * d35 * d36 - d36 * d37 * d38 - d32 * d35 * d39 + d39 * d38 * d41 - d33 * d34 * d41) / d7;
 HEAPF32[i16 + 4 >> 2] = d41;
 d34 = +HEAPF32[i13 >> 2];
 d33 = +HEAPF32[i1 >> 2];
 d38 = +HEAPF32[i17 >> 2];
 d39 = +HEAPF32[i11 >> 2];
 d35 = +HEAPF32[i20 >> 2];
 d32 = +HEAPF32[i8 >> 2];
 d37 = +HEAPF32[i18 >> 2];
 d36 = +HEAPF32[i9 >> 2];
 d40 = +HEAPF32[i14 >> 2];
 d40 = (d34 * d33 * d38 + d39 * d35 * d32 - d32 * d33 * d37 - d34 * d35 * d36 + d36 * d37 * d40 - d38 * d39 * d40) / d7;
 HEAPF32[i16 + 8 >> 2] = d40;
 HEAPF32[i24 >> 2] = 1.0 - (d40 + (+HEAPF32[i16 >> 2] + d41));
 d41 = 0.0;
 STACKTOP = i15;
 return +d41;
}
function __ZN25btSimulationIslandManager22buildAndProcessIslandsEP12btDispatcherP16btCollisionWorldPNS_14IslandCallbackE(i11, i5, i12, i2) {
 i11 = i11 | 0;
 i5 = i5 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i1 + 1 | 0;
 __ZN25btSimulationIslandManager12buildIslandsEP12btDispatcherP16btCollisionWorld(i11, i5, i12);
 i3 = HEAP32[i11 + 8 >> 2] | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(456784);
 if ((HEAP8[i11 + 64 | 0] | 0) == 0) {
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 127](i5) | 0;
  i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 7](i2, HEAP32[i12 + 16 >> 2] | 0, HEAP32[i12 + 8 >> 2] | 0, i21, i22, -1);
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i11 + 28 >> 2] | 0;
 if ((i5 | 0) > 1) {
  i21 = i11 + 24 | 0;
  i22 = i5 + -1 | 0;
  HEAP8[i6 + 0 | 0] = HEAP8[i1 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvT_ii(i21, i6, 0, i22);
 }
 if ((i3 | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 i10 = i11 + 16 | 0;
 i9 = i11 + 36 | 0;
 i6 = i11 + 48 | 0;
 i8 = i11 + 52 | 0;
 i7 = i11 + 56 | 0;
 i11 = i11 + 60 | 0;
 i12 = i12 + 16 | 0;
 i15 = 1;
 i16 = 0;
 i13 = 0;
 do {
  i19 = HEAP32[i10 >> 2] | 0;
  i14 = HEAP32[i19 + (i16 << 3) >> 2] | 0;
  L13 : do {
   if ((i16 | 0) < (i3 | 0)) {
    i18 = i14;
    i17 = 1;
    while (1) {
     if ((i18 | 0) != (i14 | 0)) {
      break L13;
     }
     i18 = HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i19 + (i16 << 3) + 4 >> 2] << 2) >> 2] | 0;
     i20 = HEAP32[i6 >> 2] | 0;
     if ((i20 | 0) == (HEAP32[i8 >> 2] | 0) ? (i4 = (i20 | 0) == 0 ? 1 : i20 << 1, (i20 | 0) < (i4 | 0)) : 0) {
      if ((i4 | 0) == 0) {
       i19 = 0;
      } else {
       i19 = __Z22btAlignedAllocInternalji(i4 << 2, 16) | 0;
       i20 = HEAP32[i6 >> 2] | 0;
      }
      if ((i20 | 0) > 0) {
       i21 = 0;
       do {
        i22 = i19 + (i21 << 2) | 0;
        if ((i22 | 0) != 0) {
         HEAP32[i22 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + (i21 << 2) >> 2];
        }
        i21 = i21 + 1 | 0;
       } while ((i21 | 0) != (i20 | 0));
      }
      i21 = HEAP32[i7 >> 2] | 0;
      if ((i21 | 0) != 0) {
       if ((HEAP8[i11] | 0) != 0) {
        __Z21btAlignedFreeInternalPv(i21);
        i20 = HEAP32[i6 >> 2] | 0;
       }
       HEAP32[i7 >> 2] = 0;
      }
      HEAP8[i11] = 1;
      HEAP32[i7 >> 2] = i19;
      HEAP32[i8 >> 2] = i4;
     }
     i19 = (HEAP32[i7 >> 2] | 0) + (i20 << 2) | 0;
     if ((i19 | 0) != 0) {
      HEAP32[i19 >> 2] = i18;
     }
     HEAP32[i6 >> 2] = i20 + 1;
     i22 = HEAP32[i18 + 216 >> 2] | 0;
     i17 = i17 & ((i22 | 0) == 2 | (i22 | 0) == 5);
     i16 = i16 + 1 | 0;
     if ((i16 | 0) >= (i3 | 0)) {
      break L13;
     }
     i19 = HEAP32[i10 >> 2] | 0;
     i18 = HEAP32[i19 + (i16 << 3) >> 2] | 0;
    }
   } else {
    i17 = 1;
   }
  } while (0);
  if ((i13 | 0) < (i5 | 0)) {
   i19 = HEAP32[i9 >> 2] | 0;
   i18 = i19 + (i13 << 2) | 0;
   i21 = HEAP32[i18 >> 2] | 0;
   i20 = HEAP32[(HEAP32[i21 + 1108 >> 2] | 0) + 208 >> 2] | 0;
   if (!((i20 | 0) > -1)) {
    i20 = HEAP32[(HEAP32[i21 + 1112 >> 2] | 0) + 208 >> 2] | 0;
   }
   if ((i20 | 0) == (i14 | 0)) {
    i20 = i13;
    do {
     i20 = i20 + 1 | 0;
     if ((i20 | 0) >= (i5 | 0)) {
      break;
     }
     i21 = HEAP32[i19 + (i20 << 2) >> 2] | 0;
     i15 = HEAP32[(HEAP32[i21 + 1108 >> 2] | 0) + 208 >> 2] | 0;
     if (!((i15 | 0) > -1)) {
      i15 = HEAP32[(HEAP32[i21 + 1112 >> 2] | 0) + 208 >> 2] | 0;
     }
    } while ((i14 | 0) == (i15 | 0));
    i15 = i20;
    i19 = i20 - i13 | 0;
   } else {
    i19 = 0;
    i18 = 0;
   }
  } else {
   i19 = 0;
   i18 = 0;
  }
  if (!i17) {
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 7](i2, HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, i18, i19, i14);
  }
  i13 = (i19 | 0) == 0 ? i13 : i15;
  i17 = HEAP32[i6 >> 2] | 0;
  if ((i17 | 0) < 0) {
   if ((HEAP32[i8 >> 2] | 0) < 0) {
    i14 = HEAP32[i7 >> 2] | 0;
    if ((i14 | 0) != 0) {
     if ((HEAP8[i11] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i14);
     }
     HEAP32[i7 >> 2] = 0;
    }
    HEAP8[i11] = 1;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i8 >> 2] = 0;
   }
   do {
    i14 = (HEAP32[i7 >> 2] | 0) + (i17 << 2) | 0;
    if ((i14 | 0) != 0) {
     HEAP32[i14 >> 2] = 0;
    }
    i17 = i17 + 1 | 0;
   } while ((i17 | 0) != 0);
  }
  HEAP32[i6 >> 2] = 0;
 } while ((i16 | 0) < (i3 | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i1;
 return;
}
function __ZN20btConvexHullInternal12findMaxAngleEbPKNS_6VertexERKNS_7Point32ERKNS_7Point64ES8_RNS_10Rational64E(i10, i9, i13, i6, i5, i8, i2) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i7 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i1 + 24 | 0;
 i3 = i1;
 i7 = i13 + 8 | 0;
 i23 = HEAP32[i7 >> 2] | 0;
 if ((i23 | 0) == 0) {
  i28 = 0;
  STACKTOP = i1;
  return i28 | 0;
 }
 i10 = i10 + 100 | 0;
 i11 = i13 + 88 | 0;
 i12 = i13 + 92 | 0;
 i19 = i13 + 96 | 0;
 i17 = i4 + 4 | 0;
 i21 = i4 + 8 | 0;
 i22 = i4 + 12 | 0;
 i14 = i8 + 8 | 0;
 i13 = i8 + 16 | 0;
 i20 = i5 + 8 | 0;
 i18 = i5 + 16 | 0;
 i15 = i3 + 16 | 0;
 i16 = i3 + 8 | 0;
 i24 = 0;
 do {
  do {
   if ((HEAP32[i23 + 20 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) {
    i30 = HEAP32[i23 + 12 >> 2] | 0;
    i29 = (HEAP32[i30 + 88 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0;
    i32 = (HEAP32[i30 + 92 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0;
    i30 = (HEAP32[i30 + 96 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = i29;
    HEAP32[i17 >> 2] = i32;
    HEAP32[i21 >> 2] = i30;
    HEAP32[i22 >> 2] = -1;
    i25 = ((i29 | 0) < 0) << 31 >> 31;
    i27 = i8;
    i27 = ___muldi3(i29 | 0, i25 | 0, HEAP32[i27 >> 2] | 0, HEAP32[i27 + 4 >> 2] | 0) | 0;
    i33 = tempRet0;
    i31 = ((i32 | 0) < 0) << 31 >> 31;
    i26 = i14;
    i26 = ___muldi3(i32 | 0, i31 | 0, HEAP32[i26 >> 2] | 0, HEAP32[i26 + 4 >> 2] | 0) | 0;
    i33 = _i64Add(i26 | 0, tempRet0 | 0, i27 | 0, i33 | 0) | 0;
    i27 = tempRet0;
    i26 = ((i30 | 0) < 0) << 31 >> 31;
    i28 = i13;
    i28 = ___muldi3(i30 | 0, i26 | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0) | 0;
    i28 = _i64Add(i33 | 0, i27 | 0, i28 | 0, tempRet0 | 0) | 0;
    i27 = tempRet0;
    i33 = i5;
    i25 = ___muldi3(HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0, i29 | 0, i25 | 0) | 0;
    i29 = tempRet0;
    i33 = i20;
    i31 = ___muldi3(HEAP32[i33 >> 2] | 0, HEAP32[i33 + 4 >> 2] | 0, i32 | 0, i31 | 0) | 0;
    i29 = _i64Add(i31 | 0, tempRet0 | 0, i25 | 0, i29 | 0) | 0;
    i25 = tempRet0;
    i31 = i18;
    i26 = ___muldi3(HEAP32[i31 >> 2] | 0, HEAP32[i31 + 4 >> 2] | 0, i30 | 0, i26 | 0) | 0;
    i26 = _i64Add(i29 | 0, i25 | 0, i26 | 0, tempRet0 | 0) | 0;
    i25 = tempRet0;
    do {
     if (!((i27 | 0) > 0 | (i27 | 0) == 0 & i28 >>> 0 > 0)) {
      if ((i27 | 0) < 0) {
       HEAP32[i15 >> 2] = -1;
       i33 = _i64Subtract(0, 0, i28 | 0, i27 | 0) | 0;
       i27 = i3;
       HEAP32[i27 >> 2] = i33;
       HEAP32[i27 + 4 >> 2] = tempRet0;
       i27 = -1;
       break;
      } else {
       HEAP32[i15 >> 2] = 0;
       i27 = i3;
       HEAP32[i27 >> 2] = 0;
       HEAP32[i27 + 4 >> 2] = 0;
       i27 = 0;
       break;
      }
     } else {
      HEAP32[i15 >> 2] = 1;
      i33 = i3;
      HEAP32[i33 >> 2] = i28;
      HEAP32[i33 + 4 >> 2] = i27;
      i27 = 1;
     }
    } while (0);
    do {
     if (!((i25 | 0) > 0 | (i25 | 0) == 0 & i26 >>> 0 > 0)) {
      if ((i25 | 0) < 0) {
       i27 = 0 - i27 | 0;
       HEAP32[i15 >> 2] = i27;
       i26 = _i64Subtract(0, 0, i26 | 0, i25 | 0) | 0;
       i25 = tempRet0;
       i33 = i16;
       HEAP32[i33 >> 2] = i26;
       HEAP32[i33 + 4 >> 2] = i25;
       break;
      } else {
       i26 = i16;
       HEAP32[i26 >> 2] = 0;
       HEAP32[i26 + 4 >> 2] = 0;
       i26 = 0;
       i25 = 0;
       break;
      }
     } else {
      i33 = i16;
      HEAP32[i33 >> 2] = i26;
      HEAP32[i33 + 4 >> 2] = i25;
     }
    } while (0);
    if (!((i27 | 0) == 0 & ((i26 | 0) == 0 & (i25 | 0) == 0))) {
     if ((i24 | 0) == 0) {
      HEAP32[i2 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
      HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
      HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
      i24 = i23;
      break;
     }
     i25 = __ZNK20btConvexHullInternal10Rational647compareERKS0_(i3, i2) | 0;
     if ((i25 | 0) < 0) {
      HEAP32[i2 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
      HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
      HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
      i24 = i23;
      break;
     }
     if ((i25 | 0) == 0) {
      i33 = (__ZN20btConvexHullInternal14getOrientationEPKNS_4EdgeES2_RKNS_7Point32ES5_(i24, i23, i6, i4) | 0) == 2 ^ i9;
      i24 = i33 ? i24 : i23;
     }
    }
   }
  } while (0);
  i23 = HEAP32[i23 >> 2] | 0;
 } while ((i23 | 0) != (HEAP32[i7 >> 2] | 0));
 STACKTOP = i1;
 return i24 | 0;
}
function __ZN22SphereTriangleDetector7collideERK9btVector3RS0_S3_RfS4_f(i9, i10, i4, i2, i1, i3, d6) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 d6 = +d6;
 var d5 = 0.0, d7 = 0.0, d8 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, i36 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i16 = i3 + 48 | 0;
 i17 = i3 + 32 | 0;
 i12 = i3 + 16 | 0;
 i13 = i3;
 i14 = i9 + 8 | 0;
 i11 = HEAP32[i14 >> 2] | 0;
 i18 = i11 + 56 | 0;
 i9 = HEAP32[i9 + 4 >> 2] | 0;
 d5 = +HEAPF32[i9 + 28 >> 2] * +HEAPF32[i9 + 12 >> 2];
 d15 = d5 + d6;
 d34 = +HEAPF32[i18 >> 2];
 d23 = +HEAPF32[i11 + 72 >> 2] - d34;
 d35 = +HEAPF32[i11 + 60 >> 2];
 d25 = +HEAPF32[i11 + 76 >> 2] - d35;
 d26 = +HEAPF32[i11 + 64 >> 2];
 d33 = +HEAPF32[i11 + 80 >> 2] - d26;
 d8 = +HEAPF32[i11 + 88 >> 2] - d34;
 d24 = +HEAPF32[i11 + 92 >> 2] - d35;
 d7 = +HEAPF32[i11 + 96 >> 2] - d26;
 d6 = d25 * d7 - d33 * d24;
 d7 = d33 * d8 - d23 * d7;
 d8 = d23 * d24 - d25 * d8;
 d25 = 1.0 / +Math_sqrt(+(d8 * d8 + (d6 * d6 + d7 * d7)));
 d6 = d25 * d6;
 d7 = d25 * d7;
 d8 = d25 * d8;
 d25 = +HEAPF32[i10 >> 2];
 i11 = i10 + 4 | 0;
 d24 = +HEAPF32[i11 >> 2];
 i9 = i10 + 8 | 0;
 d23 = +HEAPF32[i9 >> 2];
 d26 = (d25 - d34) * d6 + d7 * (d24 - d35) + d8 * (d23 - d26);
 if (d26 < 0.0) {
  d26 = d26 * -1.0;
  d6 = d6 * -1.0;
  d7 = d7 * -1.0;
  d8 = d8 * -1.0;
 }
 if (!(d26 < d15)) {
  i21 = 0;
  STACKTOP = i3;
  return i21 | 0;
 }
 HEAP32[i16 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAPF32[i17 >> 2] = d6;
 HEAPF32[i17 + 4 >> 2] = d7;
 HEAPF32[i17 + 8 >> 2] = d8;
 HEAPF32[i17 + 12 >> 2] = 0.0;
 do {
  if (!(__ZN22SphereTriangleDetector15pointInTriangleEPK9btVector3RS1_PS0_(0, i18, i17, i16) | 0)) {
   d15 = d15 * d15;
   i21 = HEAP32[i14 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 92 >> 2] & 127](i21) | 0) <= 0) {
    i21 = 0;
    STACKTOP = i3;
    return i21 | 0;
   }
   i16 = i12 + 4 | 0;
   i17 = i12 + 8 | 0;
   i18 = i13 + 4 | 0;
   i20 = i13 + 8 | 0;
   d22 = 0.0;
   d25 = 0.0;
   d26 = 0.0;
   i21 = 0;
   i19 = 0;
   do {
    i36 = HEAP32[i14 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i36 >> 2] | 0) + 96 >> 2] & 63](i36, i19, i12, i13);
    d23 = +HEAPF32[i12 >> 2];
    d33 = +HEAPF32[i10 >> 2] - d23;
    d27 = +HEAPF32[i16 >> 2];
    d32 = +HEAPF32[i11 >> 2] - d27;
    d30 = +HEAPF32[i17 >> 2];
    d31 = +HEAPF32[i9 >> 2] - d30;
    d24 = +HEAPF32[i13 >> 2] - d23;
    d28 = +HEAPF32[i18 >> 2] - d27;
    d29 = +HEAPF32[i20 >> 2] - d30;
    d34 = d33 * d24 + d32 * d28 + d31 * d29;
    do {
     if (d34 > 0.0) {
      d35 = d24 * d24 + d28 * d28 + d29 * d29;
      if (d34 < d35) {
       d35 = d34 / d35;
       d33 = d33 - d24 * d35;
       d34 = d32 - d28 * d35;
       d31 = d31 - d29 * d35;
       d32 = d35;
       break;
      } else {
       d33 = d33 - d24;
       d34 = d32 - d28;
       d31 = d31 - d29;
       d32 = 1.0;
       break;
      }
     } else {
      d34 = d32;
      d32 = 0.0;
     }
    } while (0);
    if (d31 * d31 + (d34 * d34 + d33 * d33) < d15) {
     d26 = d30 + d29 * d32;
     d25 = d27 + d28 * d32;
     d22 = d23 + d24 * d32;
     i21 = 1;
    }
    i19 = i19 + 1 | 0;
    i36 = HEAP32[i14 >> 2] | 0;
   } while ((i19 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i36 >> 2] | 0) + 92 >> 2] & 127](i36) | 0));
   if ((i21 & 1) == 0) {
    i36 = 0;
    STACKTOP = i3;
    return i36 | 0;
   } else {
    d27 = +HEAPF32[i10 >> 2];
    d24 = +HEAPF32[i11 >> 2];
    d23 = +HEAPF32[i9 >> 2];
    break;
   }
  } else {
   d15 = d15 * d15;
   d22 = d25 - d6 * d26;
   d27 = d25;
   d25 = d24 - d7 * d26;
   d26 = d23 - d8 * d26;
  }
 } while (0);
 d27 = d27 - d22;
 d24 = d24 - d25;
 d23 = d23 - d26;
 d28 = d27 * d27 + d24 * d24 + d23 * d23;
 if (!(d28 < d15)) {
  i36 = 0;
  STACKTOP = i3;
  return i36 | 0;
 }
 if (d28 > 1.1920928955078125e-7) {
  d35 = +Math_sqrt(+d28);
  HEAPF32[i2 + 12 >> 2] = 0.0;
  d34 = 1.0 / d35;
  HEAPF32[i2 >> 2] = d27 * d34;
  HEAPF32[i2 + 4 >> 2] = d24 * d34;
  HEAPF32[i2 + 8 >> 2] = d23 * d34;
  HEAPF32[i4 >> 2] = d22;
  HEAPF32[i4 + 4 >> 2] = d25;
  HEAPF32[i4 + 8 >> 2] = d26;
  HEAPF32[i4 + 12 >> 2] = 0.0;
  d5 = d5 - d35;
 } else {
  HEAPF32[i2 >> 2] = d6;
  HEAPF32[i2 + 4 >> 2] = d7;
  HEAPF32[i2 + 8 >> 2] = d8;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  HEAPF32[i4 >> 2] = d22;
  HEAPF32[i4 + 4 >> 2] = d25;
  HEAPF32[i4 + 8 >> 2] = d26;
  HEAPF32[i4 + 12 >> 2] = 0.0;
 }
 HEAPF32[i1 >> 2] = -d5;
 i36 = 1;
 STACKTOP = i3;
 return i36 | 0;
}
function __ZN11btRigidBody24setCenterOfMassTransformERK11btTransform(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, i30 = 0;
 i2 = STACKTOP;
 i3 = i1 + 68 | 0;
 if ((HEAP32[i1 + 204 >> 2] & 3 | 0) == 0) {
  HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  i9 = i1 + 84 | 0;
  i10 = i4 + 16 | 0;
  HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  i9 = i1 + 100 | 0;
  i8 = i4 + 32 | 0;
  HEAP32[i9 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  i9 = i1 + 116 | 0;
  i6 = i4 + 48 | 0;
  HEAP32[i9 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  i9 = i1 + 20 | 0;
  i7 = i1 + 36 | 0;
  i5 = i1 + 52 | 0;
  i3 = i1 + 4 | 0;
 } else {
  i11 = i1 + 4 | 0;
  HEAP32[i3 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i10 = i1 + 84 | 0;
  i9 = i1 + 20 | 0;
  HEAP32[i10 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
  i10 = i1 + 100 | 0;
  i7 = i1 + 36 | 0;
  HEAP32[i10 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  i10 = i1 + 116 | 0;
  i5 = i1 + 52 | 0;
  HEAP32[i10 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  i10 = i4 + 16 | 0;
  i8 = i4 + 32 | 0;
  i6 = i4 + 48 | 0;
  i3 = i11;
 }
 i11 = i1 + 132 | 0;
 i30 = i1 + 304 | 0;
 HEAP32[i11 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
 i11 = i1 + 148 | 0;
 i30 = i1 + 320 | 0;
 HEAP32[i11 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 d23 = +HEAPF32[i1 + 4 >> 2];
 d16 = +HEAPF32[i1 + 388 >> 2];
 d29 = d23 * d16;
 d22 = +HEAPF32[i1 + 8 >> 2];
 d14 = +HEAPF32[i1 + 392 >> 2];
 d28 = d22 * d14;
 d21 = +HEAPF32[i1 + 12 >> 2];
 d12 = +HEAPF32[i1 + 396 >> 2];
 d27 = d21 * d12;
 d20 = +HEAPF32[i1 + 20 >> 2];
 d26 = d16 * d20;
 d19 = +HEAPF32[i1 + 24 >> 2];
 d25 = d14 * d19;
 d18 = +HEAPF32[i1 + 28 >> 2];
 d24 = d12 * d18;
 d17 = +HEAPF32[i1 + 36 >> 2];
 d16 = d16 * d17;
 d15 = +HEAPF32[i1 + 40 >> 2];
 d14 = d14 * d15;
 d13 = +HEAPF32[i1 + 44 >> 2];
 d12 = d12 * d13;
 HEAPF32[i1 + 256 >> 2] = d23 * d29 + d22 * d28 + d21 * d27;
 HEAPF32[i1 + 260 >> 2] = d29 * d20 + d28 * d19 + d27 * d18;
 HEAPF32[i1 + 264 >> 2] = d29 * d17 + d28 * d15 + d27 * d13;
 HEAPF32[i1 + 268 >> 2] = 0.0;
 HEAPF32[i1 + 272 >> 2] = d23 * d26 + d22 * d25 + d21 * d24;
 HEAPF32[i1 + 276 >> 2] = d20 * d26 + d19 * d25 + d18 * d24;
 HEAPF32[i1 + 280 >> 2] = d26 * d17 + d25 * d15 + d24 * d13;
 HEAPF32[i1 + 284 >> 2] = 0.0;
 HEAPF32[i1 + 288 >> 2] = d23 * d16 + d22 * d14 + d21 * d12;
 HEAPF32[i1 + 292 >> 2] = d20 * d16 + d19 * d14 + d18 * d12;
 HEAPF32[i1 + 296 >> 2] = d17 * d16 + d15 * d14 + d13 * d12;
 HEAPF32[i1 + 300 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i12 + 2 | 0;
 i4 = i12 + 1 | 0;
 i13 = i12;
 i8 = (i2 + i1 | 0) / 2 | 0;
 i16 = i3 + 12 | 0;
 i10 = HEAP32[i16 >> 2] | 0;
 i9 = HEAP32[i10 + (i8 << 4) >> 2] | 0;
 i14 = HEAP32[i10 + (i8 << 4) + 4 >> 2] | 0;
 i8 = HEAP32[i10 + (i8 << 4) + 8 >> 2] | 0;
 i7 = (i9 | 0) == 0;
 i5 = (i14 | 0) == 0;
 i15 = i14 + 12 | 0;
 i6 = i9 + 12 | 0;
 i19 = i1;
 i21 = i2;
 while (1) {
  L3 : while (1) {
   i17 = HEAP32[i10 + (i19 << 4) >> 2] | 0;
   if ((i17 | 0) == 0) {
    i24 = -1;
   } else {
    i24 = HEAP32[i17 + 12 >> 2] | 0;
   }
   if (i7) {
    i23 = -1;
   } else {
    i23 = HEAP32[i6 >> 2] | 0;
   }
   i18 = HEAP32[i10 + (i19 << 4) + 4 >> 2] | 0;
   if ((i18 | 0) == 0) {
    i22 = -1;
   } else {
    i22 = HEAP32[i18 + 12 >> 2] | 0;
   }
   if (i5) {
    i20 = -1;
   } else {
    i20 = HEAP32[i15 >> 2] | 0;
   }
   do {
    if ((i24 | 0) <= (i23 | 0)) {
     i25 = (i17 | 0) == (i9 | 0);
     i20 = i25 & (i22 | 0) > (i20 | 0);
     if (i20 | i25 ^ 1) {
      if (i20) {
       break;
      } else {
       break L3;
      }
     }
     if ((i18 | 0) != (i14 | 0)) {
      break L3;
     }
     if (!((HEAP32[i10 + (i19 << 4) + 8 >> 2] | 0) >>> 0 > i8 >>> 0)) {
      break L3;
     }
    }
   } while (0);
   i19 = i19 + 1 | 0;
  }
  L25 : do {
   if (i7) {
    while (1) {
     i22 = HEAP32[i10 + (i21 << 4) >> 2] | 0;
     i20 = (i22 | 0) == 0;
     if (i20) {
      i24 = -1;
     } else {
      i24 = HEAP32[i22 + 12 >> 2] | 0;
     }
     if (i5) {
      i23 = -1;
     } else {
      i23 = HEAP32[i15 >> 2] | 0;
     }
     i22 = HEAP32[i10 + (i21 << 4) + 4 >> 2] | 0;
     if ((i22 | 0) == 0) {
      i25 = -1;
     } else {
      i25 = HEAP32[i22 + 12 >> 2] | 0;
     }
     do {
      if (!((i24 | 0) < -1)) {
       i23 = i20 & (i23 | 0) > (i25 | 0);
       if (i23 | i20 ^ 1) {
        if (i23) {
         break;
        } else {
         break L25;
        }
       }
       if ((i14 | 0) != (i22 | 0)) {
        break L25;
       }
       if (!(i8 >>> 0 > (HEAP32[i10 + (i21 << 4) + 8 >> 2] | 0) >>> 0)) {
        break L25;
       }
      }
     } while (0);
     i21 = i21 + -1 | 0;
    }
   } else {
    while (1) {
     i25 = HEAP32[i10 + (i21 << 4) >> 2] | 0;
     if ((i25 | 0) == 0) {
      i24 = -1;
     } else {
      i24 = HEAP32[i25 + 12 >> 2] | 0;
     }
     if (i5) {
      i22 = -1;
     } else {
      i22 = HEAP32[i15 >> 2] | 0;
     }
     i20 = HEAP32[i10 + (i21 << 4) + 4 >> 2] | 0;
     if ((i20 | 0) == 0) {
      i23 = -1;
     } else {
      i23 = HEAP32[i20 + 12 >> 2] | 0;
     }
     do {
      if ((HEAP32[i6 >> 2] | 0) <= (i24 | 0)) {
       i25 = (i9 | 0) == (i25 | 0);
       i22 = i25 & (i22 | 0) > (i23 | 0);
       if (i22 | i25 ^ 1) {
        if (i22) {
         break;
        } else {
         break L25;
        }
       }
       if ((i14 | 0) != (i20 | 0)) {
        break L25;
       }
       if (!(i8 >>> 0 > (HEAP32[i10 + (i21 << 4) + 8 >> 2] | 0) >>> 0)) {
        break L25;
       }
      }
     } while (0);
     i21 = i21 + -1 | 0;
    }
   }
  } while (0);
  if ((i19 | 0) <= (i21 | 0)) {
   i25 = i10 + (i19 << 4) | 0;
   i23 = HEAP32[i10 + (i19 << 4) + 8 >> 2] | 0;
   i24 = HEAP32[i10 + (i19 << 4) + 12 >> 2] | 0;
   i22 = i10 + (i21 << 4) | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
   i25 = HEAP32[i16 >> 2] | 0;
   HEAP32[i25 + (i21 << 4) >> 2] = i17;
   HEAP32[i25 + (i21 << 4) + 4 >> 2] = i18;
   HEAP32[i25 + (i21 << 4) + 8 >> 2] = i23;
   HEAP32[i25 + (i21 << 4) + 12 >> 2] = i24;
   i19 = i19 + 1 | 0;
   i21 = i21 + -1 | 0;
  }
  if ((i19 | 0) > (i21 | 0)) {
   break;
  }
  i10 = HEAP32[i16 >> 2] | 0;
 }
 if ((i21 | 0) > (i1 | 0)) {
  HEAP8[i11 + 0 | 0] = HEAP8[i4 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i11, i1, i21);
 }
 if ((i19 | 0) >= (i2 | 0)) {
  STACKTOP = i12;
  return;
 }
 HEAP8[i11 + 0 | 0] = HEAP8[i13 + 0 | 0] | 0;
 __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i11, i19, i2);
 STACKTOP = i12;
 return;
}
function __ZN24btPerturbedContactResult15addContactPointERK9btVector3S2_f(i5, i2, i15, d16) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 d16 = +d16;
 var d1 = 0.0, i3 = 0, i4 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i10;
 d11 = +HEAPF32[i2 >> 2];
 i6 = i2 + 4 | 0;
 d12 = +HEAPF32[i6 >> 2];
 i4 = i2 + 8 | 0;
 d13 = +HEAPF32[i4 >> 2];
 d1 = +HEAPF32[i15 >> 2];
 d8 = d11 * d16 + d1;
 d9 = +HEAPF32[i15 + 4 >> 2];
 d7 = d12 * d16 + d9;
 d14 = +HEAPF32[i15 + 8 >> 2];
 d16 = d13 * d16 + d14;
 i15 = i5 + 292 | 0;
 if ((HEAP8[i5 + 356 | 0] | 0) == 0) {
  d24 = +HEAPF32[i5 + 228 >> 2];
  d21 = +HEAPF32[i5 + 244 >> 2];
  d27 = +HEAPF32[i5 + 260 >> 2];
  d23 = +HEAPF32[i5 + 232 >> 2];
  d19 = +HEAPF32[i5 + 248 >> 2];
  d26 = +HEAPF32[i5 + 264 >> 2];
  d22 = +HEAPF32[i5 + 236 >> 2];
  d17 = +HEAPF32[i5 + 252 >> 2];
  d25 = +HEAPF32[i5 + 268 >> 2];
  d12 = -+HEAPF32[i5 + 276 >> 2];
  d33 = -+HEAPF32[i5 + 280 >> 2];
  d28 = -+HEAPF32[i5 + 284 >> 2];
  d30 = d24 * d12 + d21 * d33 + d27 * d28;
  d29 = d23 * d12 + d19 * d33 + d26 * d28;
  d28 = d22 * d12 + d17 * d33 + d25 * d28;
  d33 = +HEAPF32[i15 >> 2];
  d12 = +HEAPF32[i5 + 296 >> 2];
  d34 = +HEAPF32[i5 + 300 >> 2];
  d32 = +HEAPF32[i5 + 308 >> 2];
  d31 = +HEAPF32[i5 + 312 >> 2];
  d13 = +HEAPF32[i5 + 316 >> 2];
  d20 = +HEAPF32[i5 + 324 >> 2];
  d18 = +HEAPF32[i5 + 328 >> 2];
  d11 = +HEAPF32[i5 + 332 >> 2];
  d12 = d14 * (d27 * d33 + d26 * d12 + d25 * d34) + (d1 * (d24 * d33 + d23 * d12 + d22 * d34) + d9 * (d21 * d33 + d19 * d12 + d17 * d34)) + (d34 * d28 + (d33 * d30 + d12 * d29) + +HEAPF32[i5 + 340 >> 2]);
  d13 = d14 * (d27 * d32 + d26 * d31 + d25 * d13) + (d1 * (d24 * d32 + d23 * d31 + d22 * d13) + d9 * (d21 * d32 + d19 * d31 + d17 * d13)) + (d30 * d32 + d29 * d31 + d28 * d13 + +HEAPF32[i5 + 344 >> 2]);
  d14 = d30 * d20 + d29 * d18 + d28 * d11 + +HEAPF32[i5 + 348 >> 2] + (d14 * (d27 * d20 + d26 * d18 + d25 * d11) + (d1 * (d24 * d20 + d23 * d18 + d22 * d11) + d9 * (d21 * d20 + d19 * d18 + d17 * d11)));
  HEAPF32[i3 >> 2] = d12;
  HEAPF32[i3 + 4 >> 2] = d13;
  HEAPF32[i3 + 8 >> 2] = d14;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  d16 = (d8 - d12) * +HEAPF32[i2 >> 2] + (d7 - d13) * +HEAPF32[i6 >> 2] + (d16 - d14) * +HEAPF32[i4 >> 2];
  i15 = i5 + 160 | 0;
  i15 = HEAP32[i15 >> 2] | 0;
  i6 = HEAP32[i15 >> 2] | 0;
  i6 = i6 + 16 | 0;
  i6 = HEAP32[i6 >> 2] | 0;
  FUNCTION_TABLE_viiid[i6 & 7](i15, i2, i3, d16);
  STACKTOP = i10;
  return;
 } else {
  d24 = +HEAPF32[i5 + 164 >> 2];
  d27 = +HEAPF32[i5 + 180 >> 2];
  d21 = +HEAPF32[i5 + 196 >> 2];
  d25 = +HEAPF32[i5 + 168 >> 2];
  d29 = +HEAPF32[i5 + 184 >> 2];
  d22 = +HEAPF32[i5 + 200 >> 2];
  d26 = +HEAPF32[i5 + 172 >> 2];
  d34 = +HEAPF32[i5 + 188 >> 2];
  d23 = +HEAPF32[i5 + 204 >> 2];
  d31 = -+HEAPF32[i5 + 212 >> 2];
  d36 = -+HEAPF32[i5 + 216 >> 2];
  d20 = -+HEAPF32[i5 + 220 >> 2];
  d18 = d24 * d31 + d27 * d36 + d21 * d20;
  d19 = d25 * d31 + d29 * d36 + d22 * d20;
  d20 = d26 * d31 + d34 * d36 + d23 * d20;
  d36 = +HEAPF32[i15 >> 2];
  d31 = +HEAPF32[i5 + 296 >> 2];
  d37 = +HEAPF32[i5 + 300 >> 2];
  d35 = +HEAPF32[i5 + 308 >> 2];
  d17 = +HEAPF32[i5 + 312 >> 2];
  d32 = +HEAPF32[i5 + 316 >> 2];
  d28 = +HEAPF32[i5 + 324 >> 2];
  d30 = +HEAPF32[i5 + 328 >> 2];
  d33 = +HEAPF32[i5 + 332 >> 2];
  d31 = d16 * (d21 * d36 + d22 * d31 + d23 * d37) + (d8 * (d24 * d36 + d25 * d31 + d26 * d37) + d7 * (d27 * d36 + d29 * d31 + d34 * d37)) + (d37 * d20 + (d36 * d18 + d31 * d19) + +HEAPF32[i5 + 340 >> 2]);
  d32 = d16 * (d21 * d35 + d22 * d17 + d23 * d32) + (d8 * (d24 * d35 + d25 * d17 + d26 * d32) + d7 * (d27 * d35 + d29 * d17 + d34 * d32)) + (d18 * d35 + d19 * d17 + d20 * d32 + +HEAPF32[i5 + 344 >> 2]);
  d33 = d18 * d28 + d19 * d30 + d20 * d33 + +HEAPF32[i5 + 348 >> 2] + (d16 * (d21 * d28 + d22 * d30 + d23 * d33) + (d8 * (d24 * d28 + d25 * d30 + d26 * d33) + d7 * (d27 * d28 + d29 * d30 + d34 * d33)));
  d34 = d11 * (d31 - d1) + d12 * (d32 - d9) + d13 * (d33 - d14);
  HEAPF32[i3 >> 2] = d31 + d11 * d34;
  HEAPF32[i3 + 4 >> 2] = d32 + d12 * d34;
  HEAPF32[i3 + 8 >> 2] = d33 + d13 * d34;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  i15 = i5 + 160 | 0;
  i15 = HEAP32[i15 >> 2] | 0;
  i6 = HEAP32[i15 >> 2] | 0;
  i6 = i6 + 16 | 0;
  i6 = HEAP32[i6 >> 2] | 0;
  FUNCTION_TABLE_viiid[i6 & 7](i15, i2, i3, d34);
  STACKTOP = i10;
  return;
 }
}
function __ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i4, i33, i32, i29, i22, i1) {
 i4 = i4 | 0;
 i33 = i33 | 0;
 i32 = i32 | 0;
 i29 = i29 | 0;
 i22 = i22 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, d21 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d30 = 0.0, d31 = 0.0, d34 = 0.0, d35 = 0.0;
 i20 = STACKTOP;
 i12 = i1 + 16 | 0;
 i4 = HEAP8[i12] & -16;
 HEAP8[i12] = i4;
 d16 = +HEAPF32[i29 >> 2];
 d6 = +HEAPF32[i32 >> 2];
 d7 = d16 - d6;
 d18 = +HEAPF32[i29 + 4 >> 2];
 d8 = +HEAPF32[i32 + 4 >> 2];
 d9 = d18 - d8;
 d5 = +HEAPF32[i29 + 8 >> 2];
 d10 = +HEAPF32[i32 + 8 >> 2];
 d11 = d5 - d10;
 d17 = +HEAPF32[i22 >> 2];
 d13 = d17 - d6;
 d19 = +HEAPF32[i22 + 4 >> 2];
 d14 = d19 - d8;
 d21 = +HEAPF32[i22 + 8 >> 2];
 d15 = d21 - d10;
 d30 = +HEAPF32[i33 >> 2];
 d25 = d30 - d6;
 d28 = +HEAPF32[i33 + 4 >> 2];
 d26 = d28 - d8;
 d31 = +HEAPF32[i33 + 8 >> 2];
 d23 = d31 - d10;
 d27 = d7 * d25 + d9 * d26 + d11 * d23;
 d23 = d13 * d25 + d14 * d26 + d15 * d23;
 if (!(!(d27 <= 0.0) | !(d23 <= 0.0))) {
  HEAP32[i1 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
  HEAP8[i12] = i4 | 1;
  HEAPF32[i1 + 20 >> 2] = 1.0;
  HEAPF32[i1 + 24 >> 2] = 0.0;
  HEAPF32[i1 + 28 >> 2] = 0.0;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  STACKTOP = i20;
  return 1;
 }
 d34 = d30 - d16;
 d26 = d28 - d18;
 d24 = d31 - d5;
 d25 = d7 * d34 + d9 * d26 + d11 * d24;
 d24 = d13 * d34 + d14 * d26 + d15 * d24;
 if (!(!(d25 >= 0.0) | !(d24 <= d25))) {
  HEAP32[i1 + 0 >> 2] = HEAP32[i29 + 0 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
  HEAP8[i12] = i4 | 2;
  HEAPF32[i1 + 20 >> 2] = 0.0;
  HEAPF32[i1 + 24 >> 2] = 1.0;
  HEAPF32[i1 + 28 >> 2] = 0.0;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  STACKTOP = i20;
  return 1;
 }
 d26 = d27 * d24 - d25 * d23;
 if (!(!(d26 <= 0.0) | !(d27 >= 0.0) | !(d25 <= 0.0))) {
  d34 = d27 / (d27 - d25);
  HEAPF32[i1 >> 2] = d6 + d7 * d34;
  HEAPF32[i1 + 4 >> 2] = d8 + d9 * d34;
  HEAPF32[i1 + 8 >> 2] = d10 + d11 * d34;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  HEAP8[i12] = i4 | 3;
  HEAPF32[i1 + 20 >> 2] = 1.0 - d34;
  HEAPF32[i1 + 24 >> 2] = d34;
  HEAPF32[i1 + 28 >> 2] = 0.0;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  STACKTOP = i20;
  return 1;
 }
 d35 = d30 - d17;
 d34 = d28 - d19;
 d28 = d31 - d21;
 d30 = d7 * d35 + d9 * d34 + d11 * d28;
 d28 = d13 * d35 + d14 * d34 + d15 * d28;
 if (!(!(d28 >= 0.0) | !(d30 <= d28))) {
  HEAP32[i1 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
  HEAP8[i12] = i4 | 4;
  HEAPF32[i1 + 20 >> 2] = 0.0;
  HEAPF32[i1 + 24 >> 2] = 0.0;
  HEAPF32[i1 + 28 >> 2] = 1.0;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  STACKTOP = i20;
  return 1;
 }
 d27 = d30 * d23 - d27 * d28;
 if (!(!(d27 <= 0.0) | !(d23 >= 0.0) | !(d28 <= 0.0))) {
  d35 = d23 / (d23 - d28);
  HEAPF32[i1 >> 2] = d6 + d13 * d35;
  HEAPF32[i1 + 4 >> 2] = d8 + d14 * d35;
  HEAPF32[i1 + 8 >> 2] = d10 + d15 * d35;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  HEAP8[i12] = i4 | 5;
  HEAPF32[i1 + 20 >> 2] = 1.0 - d35;
  HEAPF32[i1 + 24 >> 2] = 0.0;
  HEAPF32[i1 + 28 >> 2] = d35;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  STACKTOP = i20;
  return 1;
 }
 d23 = d25 * d28 - d30 * d24;
 if ((d23 <= 0.0 ? (d2 = d24 - d25, d2 >= 0.0) : 0) ? (d3 = d30 - d28, d3 >= 0.0) : 0) {
  d35 = d2 / (d2 + d3);
  HEAPF32[i1 >> 2] = d16 + (d17 - d16) * d35;
  HEAPF32[i1 + 4 >> 2] = d18 + (d19 - d18) * d35;
  HEAPF32[i1 + 8 >> 2] = d5 + (d21 - d5) * d35;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  HEAP8[i12] = i4 | 6;
  HEAPF32[i1 + 20 >> 2] = 0.0;
  HEAPF32[i1 + 24 >> 2] = 1.0 - d35;
  HEAPF32[i1 + 28 >> 2] = d35;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  STACKTOP = i20;
  return 1;
 }
 d35 = 1.0 / (d26 + (d23 + d27));
 d34 = d27 * d35;
 d35 = d26 * d35;
 HEAPF32[i1 >> 2] = d13 * d35 + (d6 + d7 * d34);
 HEAPF32[i1 + 4 >> 2] = d14 * d35 + (d8 + d9 * d34);
 HEAPF32[i1 + 8 >> 2] = d15 * d35 + (d11 * d34 + d10);
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAP8[i12] = i4 | 7;
 HEAPF32[i1 + 20 >> 2] = 1.0 - d34 - d35;
 HEAPF32[i1 + 24 >> 2] = d34;
 HEAPF32[i1 + 28 >> 2] = d35;
 HEAPF32[i1 + 32 >> 2] = 0.0;
 STACKTOP = i20;
 return 1;
}
function __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2, i7, i5, i3) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i1;
 i8 = i5 - i7 | 0;
 do {
  if ((i8 | 0) == 2) {
   i6 = HEAP32[(HEAP32[i2 + 92 >> 2] | 0) + (i7 << 2) >> 2] | 0;
   i5 = i6 + 112 | 0;
   i8 = HEAP32[i6 + 88 >> 2] | 0;
   i9 = HEAP32[i6 + 200 >> 2] | 0;
   i7 = (i8 | 0) == (i9 | 0);
   i10 = HEAP32[i6 + 92 >> 2] | 0;
   i12 = HEAP32[i6 + 204 >> 2] | 0;
   i11 = (i10 | 0) == (i12 | 0);
   if (i7) {
    if (i11) {
     if ((HEAP32[i6 + 96 >> 2] | 0) == (HEAP32[i6 + 208 >> 2] | 0)) {
      break;
     } else {
      i12 = i10;
     }
    }
    i11 = (i10 | 0) == (i12 | 0);
    if (i7 & i11) {
     i7 = (HEAP32[i6 + 96 >> 2] | 0) > (HEAP32[i6 + 208 >> 2] | 0);
     i14 = i7 ? i5 : i6;
     HEAP32[i14 >> 2] = i14;
     HEAP32[i14 + 4 >> 2] = i14;
     HEAP32[i3 >> 2] = i14;
     HEAP32[i3 + 4 >> 2] = i14;
     HEAP32[i3 + 8 >> 2] = i14;
     HEAP32[i3 + 12 >> 2] = i14;
     i3 = i14;
     i5 = i7 ? i6 : i5;
    } else {
     i4 = 9;
    }
   } else {
    i4 = 9;
   }
   do {
    if ((i4 | 0) == 9) {
     i4 = i10 - i12 | 0;
     HEAP32[i6 >> 2] = i5;
     HEAP32[i6 + 4 >> 2] = i5;
     HEAP32[i5 >> 2] = i6;
     HEAP32[i6 + 116 >> 2] = i6;
     i8 = (i8 - i9 | 0) < 0;
     if (!i8 ? !(i7 & (i4 | 0) < 0) : 0) {
      HEAP32[i3 >> 2] = i5;
      HEAP32[i3 + 4 >> 2] = i6;
     } else {
      HEAP32[i3 >> 2] = i6;
      HEAP32[i3 + 4 >> 2] = i5;
     }
     i7 = i3 + 8 | 0;
     if ((i4 | 0) < 0 | i11 & i8) {
      HEAP32[i7 >> 2] = i6;
      HEAP32[i3 + 12 >> 2] = i5;
      i3 = i6;
      break;
     } else {
      HEAP32[i7 >> 2] = i5;
      HEAP32[i3 + 12 >> 2] = i6;
      i3 = i6;
      break;
     }
    }
   } while (0);
   i13 = i2 + 48 | 0;
   i7 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i13) | 0;
   i13 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i13) | 0;
   i4 = i7 + 8 | 0;
   HEAP32[i4 >> 2] = i13;
   HEAP32[i13 + 8 >> 2] = i7;
   i14 = i2 + 100 | 0;
   HEAP32[i7 + 20 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i13 + 20 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i7 + 12 >> 2] = i5;
   HEAP32[i13 + 12 >> 2] = i3;
   HEAP32[i7 + 16 >> 2] = 0;
   HEAP32[i13 + 16 >> 2] = 0;
   i13 = i2 + 116 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   i6 = i14 + 1 | 0;
   HEAP32[i13 >> 2] = i6;
   i2 = i2 + 120 | 0;
   if ((i14 | 0) >= (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i6;
   }
   HEAP32[i7 >> 2] = i7;
   HEAP32[i7 + 4 >> 2] = i7;
   HEAP32[i3 + 8 >> 2] = i7;
   i14 = HEAP32[i4 >> 2] | 0;
   HEAP32[i14 >> 2] = i14;
   HEAP32[i14 + 4 >> 2] = i14;
   HEAP32[i5 + 8 >> 2] = i14;
   STACKTOP = i1;
   return;
  } else if ((i8 | 0) == 0) {
   HEAP32[i3 + 0 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   STACKTOP = i1;
   return;
  } else if ((i8 | 0) == 1) {
   i6 = HEAP32[(HEAP32[i2 + 92 >> 2] | 0) + (i7 << 2) >> 2] | 0;
  } else {
   i4 = ((i8 | 0) / 2 | 0) + i7 | 0;
   i9 = HEAP32[i2 + 92 >> 2] | 0;
   i13 = HEAP32[i9 + (i4 + -1 << 2) >> 2] | 0;
   i8 = HEAP32[i13 + 88 >> 2] | 0;
   i11 = HEAP32[i13 + 92 >> 2] | 0;
   i13 = HEAP32[i13 + 96 >> 2] | 0;
   L28 : do {
    if ((i4 | 0) < (i5 | 0)) {
     i14 = i4;
     while (1) {
      i12 = HEAP32[i9 + (i14 << 2) >> 2] | 0;
      if ((HEAP32[i12 + 88 >> 2] | 0) != (i8 | 0)) {
       i10 = i14;
       break L28;
      }
      if ((HEAP32[i12 + 92 >> 2] | 0) != (i11 | 0)) {
       i10 = i14;
       break L28;
      }
      i10 = i14 + 1 | 0;
      if ((HEAP32[i12 + 96 >> 2] | 0) != (i13 | 0)) {
       i10 = i14;
       break L28;
      }
      if ((i10 | 0) < (i5 | 0)) {
       i14 = i10;
      } else {
       break;
      }
     }
    } else {
     i10 = i4;
    }
   } while (0);
   __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2, i7, i4, i3);
   HEAP32[i6 + 0 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   HEAP32[i6 + 12 >> 2] = 0;
   __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2, i10, i5, i6);
   __ZN20btConvexHullInternal5mergeERNS_16IntermediateHullES1_(i2, i3, i6);
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 >> 2] = i6;
 HEAP32[i6 + 4 >> 2] = i6;
 HEAP32[i3 >> 2] = i6;
 HEAP32[i3 + 4 >> 2] = i6;
 HEAP32[i3 + 8 >> 2] = i6;
 HEAP32[i3 + 12 >> 2] = i6;
 STACKTOP = i1;
 return;
}
function __ZN13BenchmarkDemo17createTowerCircleERK9btVector3iiS2_(i13, i7, i2, i6, i8) {
 i13 = i13 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, d14 = 0.0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i1 + 16 | 0;
 i29 = i1;
 i4 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d27 = +HEAPF32[i8 >> 2];
 i5 = i8 + 4 | 0;
 d9 = +HEAPF32[i5 >> 2];
 d14 = +HEAPF32[i8 + 8 >> 2];
 __ZN23btPolyhedralConvexShapeC2Ev(i4);
 HEAP32[i4 >> 2] = 447328;
 HEAP32[i4 + 4 >> 2] = 0;
 d28 = +HEAPF32[i4 + 44 >> 2];
 d9 = d9 * +HEAPF32[i4 + 16 >> 2] - d28;
 d14 = d14 * +HEAPF32[i4 + 20 >> 2] - d28;
 HEAPF32[i4 + 28 >> 2] = d27 * +HEAPF32[i4 + 12 >> 2] - d28;
 HEAPF32[i4 + 32 >> 2] = d9;
 HEAPF32[i4 + 36 >> 2] = d14;
 HEAPF32[i4 + 40 >> 2] = 0.0;
 HEAP32[i29 + 0 >> 2] = 0;
 HEAP32[i29 + 4 >> 2] = 0;
 HEAP32[i29 + 8 >> 2] = 0;
 HEAP32[i29 + 12 >> 2] = 0;
 __ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3(i4, 1.0, i29);
 d14 = +(i6 | 0);
 d9 = d14 * 1.2999999523162842 * +HEAPF32[i8 >> 2] / 3.1415927410125732;
 if ((i2 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 d10 = 3.1415927410125732 / d14 * .5;
 i11 = i7 + 4 | 0;
 i8 = i7 + 8 | 0;
 i12 = i13 + 8 | 0;
 i13 = i13 + 4 | 0;
 d16 = 3.1415927410125732 / (d14 * .5) * .5;
 if ((i6 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 d19 = 0.0;
 d22 = 1.0;
 d20 = 0.0;
 d21 = 0.0;
 d14 = +HEAPF32[i5 >> 2];
 i15 = 0;
 while (1) {
  i29 = 0;
  while (1) {
   d27 = d9 * d22 + d21 * 0.0 - d14 * d20;
   d23 = d20 * 0.0 + d14 * d21 - d9 * d19;
   d26 = d14 * d19 + d9 * d21 - d22 * 0.0;
   d25 = d9 * d20 + (d19 * 0.0 + d14 * d22);
   d28 = +HEAPF32[i7 >> 2];
   d18 = +HEAPF32[i11 >> 2];
   d24 = +HEAPF32[i8 >> 2];
   d37 = 2.0 / (d21 * d21 + (d20 * d20 + (d19 * d19 + d22 * d22)));
   d32 = d19 * d37;
   d17 = d22 * d37;
   d37 = d20 * d37;
   d33 = d21 * d32;
   d35 = d21 * d17;
   d38 = d21 * d37;
   d32 = d19 * d32;
   d39 = d19 * d17;
   d36 = d19 * d37;
   d17 = d22 * d17;
   d34 = d22 * d37;
   d37 = d20 * d37;
   HEAP32[i3 + 0 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 7](i4, 1.0, i3);
   i30 = __Z22btAlignedAllocInternalji(608, 16) | 0;
   __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i30, 1.0, 0, i4, i3);
   HEAPF32[i30 + 4 >> 2] = 1.0 - (d17 + d37);
   HEAPF32[i30 + 8 >> 2] = d39 - d38;
   HEAPF32[i30 + 12 >> 2] = d36 + d35;
   HEAPF32[i30 + 16 >> 2] = 0.0;
   HEAPF32[i30 + 20 >> 2] = d39 + d38;
   HEAPF32[i30 + 24 >> 2] = 1.0 - (d32 + d37);
   HEAPF32[i30 + 28 >> 2] = d34 - d33;
   HEAPF32[i30 + 32 >> 2] = 0.0;
   HEAPF32[i30 + 36 >> 2] = d36 - d35;
   HEAPF32[i30 + 40 >> 2] = d34 + d33;
   HEAPF32[i30 + 44 >> 2] = 1.0 - (d32 + d17);
   HEAPF32[i30 + 48 >> 2] = 0.0;
   HEAPF32[i30 + 52 >> 2] = d28 + (d22 * d26 + (d19 * d25 + d21 * d27 - d20 * d23));
   HEAPF32[i30 + 56 >> 2] = d18 + (d20 * d27 + (d22 * d25 + d21 * d23 - d19 * d26));
   HEAPF32[i30 + 60 >> 2] = d24 + (d19 * d23 + (d20 * d25 + d21 * d26 - d22 * d27));
   HEAPF32[i30 + 64 >> 2] = 0.0;
   HEAPF32[i30 + 184 >> 2] = +HEAPF32[i12 >> 2];
   i31 = HEAP32[i13 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i31 >> 2] | 0) + 80 >> 2] & 127](i31, i30);
   d27 = +Math_sin(+d16);
   d26 = d27 * 0.0;
   d25 = +Math_cos(+d16);
   d23 = d21 * d26;
   d24 = d22 * d26;
   d18 = d24 + (d23 + d19 * d25) - d20 * d27;
   d28 = d20 * d26;
   d26 = d19 * d26;
   d17 = d28 + (d21 * d27 + d22 * d25) - d26;
   d20 = d19 * d27 + (d23 + d20 * d25) - d24;
   d21 = d21 * d25 - d26 - d22 * d27 - d28;
   i29 = i29 + 1 | 0;
   if ((i29 | 0) < (i6 | 0)) {
    d22 = d17;
    d19 = d18;
   } else {
    break;
   }
  }
  d25 = +Math_sin(+d10);
  d24 = d25 * 0.0;
  d23 = +Math_cos(+d10);
  d27 = d21 * d24;
  d28 = d17 * d24;
  d26 = d20 * d24;
  d24 = d18 * d24;
  i15 = i15 + 1 | 0;
  if ((i15 | 0) >= (i2 | 0)) {
   break;
  } else {
   d19 = d28 + (d27 + d18 * d23) - d20 * d25;
   d22 = d26 + (d21 * d25 + d17 * d23) - d24;
   d20 = d18 * d25 + (d27 + d20 * d23) - d28;
   d21 = d21 * d23 - d24 - d17 * d25 - d26;
   d14 = d14 + +HEAPF32[i5 >> 2] * 2.0;
  }
 }
 STACKTOP = i1;
 return;
}
function ___udivmoddi4(i6, i8, i2, i4, i1) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = i6;
 i9 = i8;
 i7 = i9;
 i10 = i2;
 i3 = i4;
 i11 = i3;
 if ((i7 | 0) == 0) {
  i2 = (i1 | 0) != 0;
  if ((i11 | 0) == 0) {
   if (i2) {
    HEAP32[i1 >> 2] = (i5 >>> 0) % (i10 >>> 0);
    HEAP32[i1 + 4 >> 2] = 0;
   }
   i11 = 0;
   i12 = (i5 >>> 0) / (i10 >>> 0) >>> 0;
   return (tempRet0 = i11, i12) | 0;
  } else {
   if (!i2) {
    i11 = 0;
    i12 = 0;
    return (tempRet0 = i11, i12) | 0;
   }
   HEAP32[i1 >> 2] = i6 | 0;
   HEAP32[i1 + 4 >> 2] = i8 & 0;
   i11 = 0;
   i12 = 0;
   return (tempRet0 = i11, i12) | 0;
  }
 }
 i12 = (i11 | 0) == 0;
 do {
  if ((i10 | 0) != 0) {
   if (!i12) {
    i10 = (_llvm_ctlz_i32(i11 | 0) | 0) - (_llvm_ctlz_i32(i7 | 0) | 0) | 0;
    if (i10 >>> 0 <= 31) {
     i11 = i10 + 1 | 0;
     i12 = 31 - i10 | 0;
     i8 = i10 - 31 >> 31;
     i9 = i11;
     i6 = i5 >>> (i11 >>> 0) & i8 | i7 << i12;
     i8 = i7 >>> (i11 >>> 0) & i8;
     i11 = 0;
     i7 = i5 << i12;
     break;
    }
    if ((i1 | 0) == 0) {
     i11 = 0;
     i12 = 0;
     return (tempRet0 = i11, i12) | 0;
    }
    HEAP32[i1 >> 2] = i6 | 0;
    HEAP32[i1 + 4 >> 2] = i9 | i8 & 0;
    i11 = 0;
    i12 = 0;
    return (tempRet0 = i11, i12) | 0;
   }
   i11 = i10 - 1 | 0;
   if ((i11 & i10 | 0) != 0) {
    i12 = (_llvm_ctlz_i32(i10 | 0) | 0) + 33 - (_llvm_ctlz_i32(i7 | 0) | 0) | 0;
    i15 = 64 - i12 | 0;
    i10 = 32 - i12 | 0;
    i13 = i10 >> 31;
    i14 = i12 - 32 | 0;
    i8 = i14 >> 31;
    i9 = i12;
    i6 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i5 >>> (i12 >>> 0)) & i8;
    i8 = i8 & i7 >>> (i12 >>> 0);
    i11 = i5 << i15 & i13;
    i7 = (i7 << i15 | i5 >>> (i14 >>> 0)) & i13 | i5 << i10 & i12 - 33 >> 31;
    break;
   }
   if ((i1 | 0) != 0) {
    HEAP32[i1 >> 2] = i11 & i5;
    HEAP32[i1 + 4 >> 2] = 0;
   }
   if ((i10 | 0) == 1) {
    i14 = i9 | i8 & 0;
    i15 = i6 | 0 | 0;
    return (tempRet0 = i14, i15) | 0;
   } else {
    i15 = _llvm_cttz_i32(i10 | 0) | 0;
    i14 = i7 >>> (i15 >>> 0) | 0;
    i15 = i7 << 32 - i15 | i5 >>> (i15 >>> 0) | 0;
    return (tempRet0 = i14, i15) | 0;
   }
  } else {
   if (i12) {
    if ((i1 | 0) != 0) {
     HEAP32[i1 >> 2] = (i7 >>> 0) % (i10 >>> 0);
     HEAP32[i1 + 4 >> 2] = 0;
    }
    i14 = 0;
    i15 = (i7 >>> 0) / (i10 >>> 0) >>> 0;
    return (tempRet0 = i14, i15) | 0;
   }
   if ((i5 | 0) == 0) {
    if ((i1 | 0) != 0) {
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = (i7 >>> 0) % (i11 >>> 0);
    }
    i14 = 0;
    i15 = (i7 >>> 0) / (i11 >>> 0) >>> 0;
    return (tempRet0 = i14, i15) | 0;
   }
   i10 = i11 - 1 | 0;
   if ((i10 & i11 | 0) == 0) {
    if ((i1 | 0) != 0) {
     HEAP32[i1 >> 2] = i6 | 0;
     HEAP32[i1 + 4 >> 2] = i10 & i7 | i8 & 0;
    }
    i14 = 0;
    i15 = i7 >>> ((_llvm_cttz_i32(i11 | 0) | 0) >>> 0);
    return (tempRet0 = i14, i15) | 0;
   }
   i10 = (_llvm_ctlz_i32(i11 | 0) | 0) - (_llvm_ctlz_i32(i7 | 0) | 0) | 0;
   if (i10 >>> 0 <= 30) {
    i8 = i10 + 1 | 0;
    i15 = 31 - i10 | 0;
    i9 = i8;
    i6 = i7 << i15 | i5 >>> (i8 >>> 0);
    i8 = i7 >>> (i8 >>> 0);
    i11 = 0;
    i7 = i5 << i15;
    break;
   }
   if ((i1 | 0) == 0) {
    i14 = 0;
    i15 = 0;
    return (tempRet0 = i14, i15) | 0;
   }
   HEAP32[i1 >> 2] = i6 | 0;
   HEAP32[i1 + 4 >> 2] = i9 | i8 & 0;
   i14 = 0;
   i15 = 0;
   return (tempRet0 = i14, i15) | 0;
  }
 } while (0);
 if ((i9 | 0) == 0) {
  i12 = i6;
  i2 = 0;
  i6 = 0;
 } else {
  i2 = i2 | 0 | 0;
  i3 = i3 | i4 & 0;
  i4 = _i64Add(i2, i3, -1, -1) | 0;
  i5 = tempRet0;
  i10 = i8;
  i12 = i6;
  i6 = 0;
  while (1) {
   i8 = i11 >>> 31 | i7 << 1;
   i11 = i6 | i11 << 1;
   i7 = i12 << 1 | i7 >>> 31 | 0;
   i10 = i12 >>> 31 | i10 << 1 | 0;
   _i64Subtract(i4, i5, i7, i10) | 0;
   i12 = tempRet0;
   i15 = i12 >> 31 | ((i12 | 0) < 0 ? -1 : 0) << 1;
   i6 = i15 & 1;
   i12 = _i64Subtract(i7, i10, i15 & i2, (((i12 | 0) < 0 ? -1 : 0) >> 31 | ((i12 | 0) < 0 ? -1 : 0) << 1) & i3) | 0;
   i10 = tempRet0;
   i9 = i9 - 1 | 0;
   if ((i9 | 0) == 0) {
    break;
   } else {
    i7 = i8;
   }
  }
  i7 = i8;
  i8 = i10;
  i2 = 0;
 }
 i3 = 0;
 if ((i1 | 0) != 0) {
  HEAP32[i1 >> 2] = i12;
  HEAP32[i1 + 4 >> 2] = i8;
 }
 i14 = (i11 | 0) >>> 31 | (i7 | i3) << 1 | (i3 << 1 | i11 >>> 31) & 0 | i2;
 i15 = (i11 << 1 | 0 >>> 31) & -2 | i6;
 return (tempRet0 = i14, i15) | 0;
}
function __ZNK17btCollisionObject9serializeEPvP12btSerializer(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, d7 = 0.0;
 i2 = STACKTOP;
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i1 + 20 >> 2] = +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i4 + 12 >> 2];
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i4 + 16 >> 2];
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i4 + 20 >> 2];
 HEAPF32[i1 + 36 >> 2] = +HEAPF32[i4 + 24 >> 2];
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i4 + 28 >> 2];
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i4 + 32 >> 2];
 HEAPF32[i1 + 48 >> 2] = +HEAPF32[i4 + 36 >> 2];
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i4 + 40 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i4 + 44 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i4 + 48 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i4 + 52 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i4 + 56 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i4 + 60 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i4 + 64 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i4 + 68 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i4 + 72 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i4 + 76 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i4 + 80 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i4 + 84 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i4 + 88 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i4 + 92 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i4 + 96 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i4 + 100 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i4 + 104 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i4 + 108 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i4 + 112 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i4 + 116 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i4 + 120 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i4 + 124 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i4 + 128 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i4 + 132 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i4 + 136 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i4 + 140 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i4 + 144 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i4 + 148 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i4 + 152 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i4 + 156 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i4 + 160 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i4 + 164 >> 2];
 HEAPF32[i1 + 180 >> 2] = +HEAPF32[i4 + 168 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i4 + 172 >> 2];
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i4 + 176 >> 2];
 HEAP32[i1 + 220 >> 2] = HEAP32[i4 + 180 >> 2];
 HEAPF32[i1 + 192 >> 2] = +HEAPF32[i4 + 184 >> 2];
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, HEAP32[i4 + 192 >> 2] | 0) | 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 224 >> 2] = HEAP32[i4 + 204 >> 2];
 HEAP32[i1 + 228 >> 2] = HEAP32[i4 + 208 >> 2];
 HEAP32[i1 + 232 >> 2] = HEAP32[i4 + 212 >> 2];
 i6 = i4 + 216 | 0;
 i3 = i1 + 236 | 0;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAPF32[i1 + 196 >> 2] = +HEAPF32[i4 + 220 >> 2];
 HEAPF32[i1 + 200 >> 2] = +HEAPF32[i4 + 224 >> 2];
 HEAPF32[i1 + 204 >> 2] = +HEAPF32[i4 + 228 >> 2];
 HEAP32[i1 + 240 >> 2] = HEAP32[i4 + 232 >> 2];
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i4) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i1 + 12 >> 2] = i6;
 if ((i6 | 0) == 0) {
  i6 = i4 + 240 | 0;
  d7 = +HEAPF32[i6 >> 2];
  i6 = i1 + 208 | 0;
  HEAPF32[i6 >> 2] = d7;
  i6 = i4 + 244 | 0;
  d7 = +HEAPF32[i6 >> 2];
  i6 = i1 + 212 | 0;
  HEAPF32[i6 >> 2] = d7;
  i6 = i4 + 248 | 0;
  d7 = +HEAPF32[i6 >> 2];
  i5 = i1 + 216 | 0;
  HEAPF32[i5 >> 2] = d7;
  d7 = +HEAPF32[i6 >> 2];
  HEAPF32[i5 >> 2] = d7;
  i5 = i4 + 252 | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 244 | 0;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i2;
  return 448584;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 i6 = i4 + 240 | 0;
 d7 = +HEAPF32[i6 >> 2];
 i6 = i1 + 208 | 0;
 HEAPF32[i6 >> 2] = d7;
 i6 = i4 + 244 | 0;
 d7 = +HEAPF32[i6 >> 2];
 i6 = i1 + 212 | 0;
 HEAPF32[i6 >> 2] = d7;
 i6 = i4 + 248 | 0;
 d7 = +HEAPF32[i6 >> 2];
 i5 = i1 + 216 | 0;
 HEAPF32[i5 >> 2] = d7;
 d7 = +HEAPF32[i6 >> 2];
 HEAPF32[i5 >> 2] = d7;
 i5 = i4 + 252 | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 244 | 0;
 HEAP32[i6 >> 2] = i5;
 STACKTOP = i2;
 return 448584;
}
function __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i7, i13, i16, i15, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d14 = 0.0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i3 = STACKTOP;
 i2 = i7 + 9800 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == 0) {
  HEAP32[i7 >> 2] = 5;
  i17 = 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 i4 = i1 + 52 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i5 = i1 + 48 | 0;
 if ((i6 | 0) != 0) {
  HEAP32[i6 + 48 >> 2] = HEAP32[i5 >> 2];
 }
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) != 0) {
  HEAP32[i6 + 52 >> 2] = HEAP32[i4 >> 2];
 }
 if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 }
 i6 = i7 + 9804 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 HEAP32[i5 >> 2] = 0;
 i9 = i7 + 9792 | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 i10 = HEAP32[i9 >> 2] | 0;
 if ((i10 | 0) != 0) {
  HEAP32[i10 + 48 >> 2] = i1;
 }
 HEAP32[i9 >> 2] = i1;
 i10 = i7 + 9796 | 0;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 HEAP8[i1 + 59 | 0] = 0;
 HEAP32[i1 + 24 >> 2] = i13;
 HEAP32[i1 + 28 >> 2] = i16;
 HEAP32[i1 + 32 >> 2] = i15;
 i39 = i16 + 16 | 0;
 i12 = i13 + 16 | 0;
 d23 = +HEAPF32[i12 >> 2];
 d32 = +HEAPF32[i39 >> 2] - d23;
 i38 = i16 + 20 | 0;
 i11 = i13 + 20 | 0;
 d22 = +HEAPF32[i11 >> 2];
 d14 = +HEAPF32[i38 >> 2] - d22;
 i37 = i16 + 24 | 0;
 i13 = i13 + 24 | 0;
 d26 = +HEAPF32[i13 >> 2];
 d27 = +HEAPF32[i37 >> 2] - d26;
 i36 = i15 + 16 | 0;
 d23 = +HEAPF32[i36 >> 2] - d23;
 i35 = i15 + 20 | 0;
 d22 = +HEAPF32[i35 >> 2] - d22;
 i34 = i15 + 24 | 0;
 d26 = +HEAPF32[i34 >> 2] - d26;
 d21 = d14 * d26 - d27 * d22;
 d26 = d27 * d23 - d32 * d26;
 d23 = d32 * d22 - d14 * d23;
 HEAPF32[i1 >> 2] = d21;
 i15 = i1 + 4 | 0;
 HEAPF32[i15 >> 2] = d26;
 i16 = i1 + 8 | 0;
 HEAPF32[i16 >> 2] = d23;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 d14 = +Math_sqrt(+(d21 * d21 + d26 * d26 + d23 * d23));
 i17 = d14 > 9999999747378752.0e-20;
 d22 = +HEAPF32[i12 >> 2];
 d32 = +HEAPF32[i39 >> 2];
 d27 = d22 - d32;
 d25 = +HEAPF32[i11 >> 2];
 d30 = +HEAPF32[i38 >> 2];
 d29 = d25 - d30;
 d18 = +HEAPF32[i13 >> 2];
 d33 = +HEAPF32[i37 >> 2];
 d19 = d18 - d33;
 d19 = d18 * (d21 * d29 - d26 * d27) + (d22 * (d26 * d19 - d23 * d29) + d25 * (d23 * d27 - d21 * d19));
 d27 = +HEAPF32[i36 >> 2];
 d29 = d32 - d27;
 d24 = +HEAPF32[i35 >> 2];
 d31 = d30 - d24;
 d28 = +HEAPF32[i34 >> 2];
 d20 = d33 - d28;
 d20 = d33 * (d21 * d31 - d26 * d29) + (d32 * (d26 * d20 - d23 * d31) + d30 * (d23 * d29 - d21 * d20));
 d22 = d27 - d22;
 d25 = d24 - d25;
 d18 = d28 - d18;
 d18 = d28 * (d21 * d25 - d26 * d22) + (d27 * (d26 * d18 - d23 * d25) + d24 * (d23 * d22 - d21 * d18));
 d19 = d19 < d20 ? d19 : d20;
 d18 = (d19 < d18 ? d19 : d18) / (i17 ? d14 : 1.0);
 HEAPF32[i1 + 20 >> 2] = !(d18 >= -.009999999776482582) ? d18 : 0.0;
 do {
  if (i17) {
   d29 = +HEAPF32[i1 >> 2];
   d30 = +HEAPF32[i15 >> 2];
   d32 = +HEAPF32[i16 >> 2];
   d33 = (+HEAPF32[i12 >> 2] * d29 + +HEAPF32[i11 >> 2] * d30 + +HEAPF32[i13 >> 2] * d32) / d14;
   HEAPF32[i1 + 16 >> 2] = d33;
   d31 = 1.0 / d14;
   HEAPF32[i1 >> 2] = d31 * d29;
   HEAPF32[i15 >> 2] = d31 * d30;
   HEAPF32[i16 >> 2] = d31 * d32;
   if (!(d33 >= -9999999747378752.0e-21) & (i8 ^ 1)) {
    HEAP32[i7 >> 2] = 3;
    break;
   } else {
    i39 = i1;
    STACKTOP = i3;
    return i39 | 0;
   }
  } else {
   HEAP32[i7 >> 2] = 2;
  }
 } while (0);
 i7 = HEAP32[i4 >> 2] | 0;
 if ((i7 | 0) != 0) {
  HEAP32[i7 + 48 >> 2] = HEAP32[i5 >> 2];
 }
 i7 = HEAP32[i5 >> 2] | 0;
 if ((i7 | 0) != 0) {
  HEAP32[i7 + 52 >> 2] = HEAP32[i4 >> 2];
 }
 if ((HEAP32[i9 >> 2] | 0) == (i1 | 0)) {
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 }
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
 i4 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) != 0) {
  HEAP32[i4 + 48 >> 2] = i1;
 }
 HEAP32[i2 >> 2] = i1;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 i39 = 0;
 STACKTOP = i3;
 return i39 | 0;
}
function __ZN16btDbvtBroadphase7setAabbEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher(i1, i2, i5, i6, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i4 = 0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i12 = i4 + 32 | 0;
 i8 = i4 + 16 | 0;
 i3 = i4;
 HEAP32[i12 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i7 = i12 + 16 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i2 + 60 | 0;
 do {
  if ((HEAP32[i7 >> 2] | 0) == 2) {
   i8 = i2 + 48 | 0;
   __ZN6btDbvt6removeEP10btDbvtNode(i1 + 44 | 0, HEAP32[i8 >> 2] | 0);
   HEAP32[i8 >> 2] = __ZN6btDbvt6insertERK12btDbvtAabbMmPv(i1 + 4 | 0, i12, i2) | 0;
   i8 = 1;
  } else {
   i14 = i1 + 128 | 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i14 = HEAP32[i2 + 48 >> 2] | 0;
   if (((((+HEAPF32[i14 >> 2] <= +HEAPF32[i12 + 16 >> 2] ? +HEAPF32[i14 + 16 >> 2] >= +HEAPF32[i12 >> 2] : 0) ? +HEAPF32[i14 + 4 >> 2] <= +HEAPF32[i12 + 20 >> 2] : 0) ? +HEAPF32[i14 + 20 >> 2] >= +HEAPF32[i12 + 4 >> 2] : 0) ? +HEAPF32[i14 + 8 >> 2] <= +HEAPF32[i12 + 24 >> 2] : 0) ? +HEAPF32[i14 + 24 >> 2] >= +HEAPF32[i12 + 8 >> 2] : 0) {
    d9 = +HEAPF32[i2 + 16 >> 2];
    d18 = +HEAPF32[i5 >> 2] - d9;
    d13 = +HEAPF32[i2 + 20 >> 2];
    d11 = +HEAPF32[i5 + 4 >> 2] - d13;
    d15 = +HEAPF32[i2 + 24 >> 2];
    d17 = +HEAPF32[i5 + 8 >> 2] - d15;
    d19 = +HEAPF32[i1 + 100 >> 2];
    d9 = (+HEAPF32[i2 + 32 >> 2] - d9) * .5 * d19;
    d13 = d19 * (+HEAPF32[i2 + 36 >> 2] - d13) * .5;
    d15 = d19 * (+HEAPF32[i2 + 40 >> 2] - d15) * .5;
    HEAPF32[i8 >> 2] = d9;
    i10 = i8 + 4 | 0;
    HEAPF32[i10 >> 2] = d13;
    i16 = i8 + 8 | 0;
    HEAPF32[i16 >> 2] = d15;
    HEAPF32[i8 + 12 >> 2] = 0.0;
    if (d18 < 0.0) {
     HEAPF32[i8 >> 2] = -d9;
    }
    if (d11 < 0.0) {
     HEAPF32[i10 >> 2] = -d13;
    }
    if (d17 < 0.0) {
     HEAPF32[i16 >> 2] = -d15;
    }
    if (!(__ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f(i1 + 4 | 0, i14, i12, i8, .05000000074505806) | 0)) {
     i8 = 0;
     break;
    }
    i8 = i1 + 132 | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    i8 = 1;
    break;
   }
   __ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm(i1 + 4 | 0, i14, i12);
   i8 = i1 + 132 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   i8 = 1;
  }
 } while (0);
 i10 = i2 + 52 | 0;
 i16 = HEAP32[i10 >> 2] | 0;
 i12 = i2 + 56 | 0;
 i14 = HEAP32[i12 >> 2] | 0;
 if ((i16 | 0) == 0) {
  HEAP32[i1 + (HEAP32[i7 >> 2] << 2) + 84 >> 2] = i14;
 } else {
  HEAP32[i16 + 56 >> 2] = i14;
 }
 i14 = HEAP32[i12 >> 2] | 0;
 if ((i14 | 0) != 0) {
  HEAP32[i14 + 52 >> 2] = HEAP32[i10 >> 2];
 }
 i16 = i2 + 16 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i5 = i2 + 32 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i5 = i1 + 104 | 0;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 i5 = i1 + (HEAP32[i5 >> 2] << 2) + 84 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) != 0) {
  HEAP32[i6 + 52 >> 2] = i2;
 }
 HEAP32[i5 >> 2] = i2;
 if (!i8) {
  STACKTOP = i4;
  return;
 }
 HEAP8[i1 + 154 | 0] = 1;
 if ((HEAP8[i1 + 153 | 0] | 0) != 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i3 >> 2] = 452016;
 HEAP32[i3 + 4 >> 2] = i1;
 i14 = i1 + 44 | 0;
 i16 = i2 + 48 | 0;
 __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i14, HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, i3);
 i14 = i1 + 4 | 0;
 __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i14, HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, i3);
 STACKTOP = i4;
 return;
}
function __ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_RNS_8ICollideE(i13, i14, i1, i12, i8, i6, d3, i5, i4, i2) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 d3 = +d3;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var d7 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, i43 = 0, i44 = 0, d45 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i13;
 if ((i14 | 0) == 0) {
  STACKTOP = i13;
  return;
 }
 i38 = __Z22btAlignedAllocInternalji(512, 16) | 0;
 i15 = 0;
 do {
  i16 = i38 + (i15 << 2) | 0;
  if ((i16 | 0) != 0) {
   HEAP32[i16 >> 2] = 0;
  }
  i15 = i15 + 1 | 0;
 } while ((i15 | 0) != 128);
 HEAP32[i38 >> 2] = i14;
 i28 = i4 + 4 | 0;
 i29 = i4 + 8 | 0;
 i30 = i12 + 4 | 0;
 i24 = i12 + 8 | 0;
 i23 = i12 + 12 | 0;
 i22 = i5 + 4 | 0;
 i21 = i5 + 8 | 0;
 i20 = i12 + 16 | 0;
 i19 = i12 + 20 | 0;
 i18 = i12 + 24 | 0;
 i17 = i12 + 28 | 0;
 i16 = i6 + 4 | 0;
 i15 = i1 + 4 | 0;
 i14 = i8 + 4 | 0;
 i25 = i6 + 8 | 0;
 i26 = i1 + 8 | 0;
 i27 = i8 + 8 | 0;
 i34 = 128;
 i37 = 128;
 i31 = 1;
 i36 = 126;
 do {
  i32 = i31 + -1 | 0;
  i33 = HEAP32[i38 + (i32 << 2) >> 2] | 0;
  d42 = +HEAPF32[i33 + 4 >> 2] - +HEAPF32[i28 >> 2];
  d41 = +HEAPF32[i33 + 8 >> 2] - +HEAPF32[i29 >> 2];
  HEAPF32[i12 >> 2] = +HEAPF32[i33 >> 2] - +HEAPF32[i4 >> 2];
  HEAPF32[i30 >> 2] = d42;
  HEAPF32[i24 >> 2] = d41;
  HEAPF32[i23 >> 2] = 0.0;
  d41 = +HEAPF32[i33 + 20 >> 2] - +HEAPF32[i22 >> 2];
  d42 = +HEAPF32[i33 + 24 >> 2] - +HEAPF32[i21 >> 2];
  HEAPF32[i20 >> 2] = +HEAPF32[i33 + 16 >> 2] - +HEAPF32[i5 >> 2];
  HEAPF32[i19 >> 2] = d41;
  HEAPF32[i18 >> 2] = d42;
  HEAPF32[i17 >> 2] = 0.0;
  i44 = HEAP32[i6 >> 2] | 0;
  d42 = +HEAPF32[i1 >> 2];
  d41 = +HEAPF32[i8 >> 2];
  d39 = (+HEAPF32[i12 + (i44 << 4) >> 2] - d42) * d41;
  d42 = d41 * (+HEAPF32[i12 + (1 - i44 << 4) >> 2] - d42);
  i44 = HEAP32[i16 >> 2] | 0;
  d41 = +HEAPF32[i15 >> 2];
  d45 = +HEAPF32[i14 >> 2];
  d40 = (+HEAPF32[i12 + (i44 << 4) + 4 >> 2] - d41) * d45;
  d41 = d45 * (+HEAPF32[i12 + (1 - i44 << 4) + 4 >> 2] - d41);
  do {
   if (((!(d39 > d41 | d40 > d42) ? (d7 = d40 > d39 ? d40 : d39, d10 = d41 < d42 ? d41 : d42, i44 = HEAP32[i25 >> 2] | 0, d9 = +HEAPF32[i26 >> 2], d45 = +HEAPF32[i27 >> 2], d11 = (+HEAPF32[i12 + (i44 << 4) + 8 >> 2] - d9) * d45, d9 = d45 * (+HEAPF32[i12 + (1 - i44 << 4) + 8 >> 2] - d9), !(d7 > d9 | d11 > d10)) : 0) ? (d11 > d7 ? d11 : d7) < d3 : 0) ? (d9 < d10 ? d9 : d10) > 0.0 : 0) {
    i35 = i33 + 40 | 0;
    if ((HEAP32[i35 >> 2] | 0) == 0) {
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i33);
     i31 = i32;
     break;
    }
    if ((i32 | 0) > (i36 | 0)) {
     i36 = i34 << 1;
     if ((i34 | 0) < (i36 | 0)) {
      if ((i37 | 0) < (i36 | 0)) {
       if ((i34 | 0) != 0) {
        i37 = __Z22btAlignedAllocInternalji(i34 << 3, 16) | 0;
        if ((i34 | 0) > 0) {
         i44 = 0;
         do {
          i43 = i37 + (i44 << 2) | 0;
          if ((i43 | 0) != 0) {
           HEAP32[i43 >> 2] = HEAP32[i38 + (i44 << 2) >> 2];
          }
          i44 = i44 + 1 | 0;
         } while ((i44 | 0) != (i34 | 0));
        }
       } else {
        i37 = 0;
       }
       if ((i38 | 0) == 0) {
        i38 = i37;
        i37 = i36;
       } else {
        __Z21btAlignedFreeInternalPv(i38);
        i38 = i37;
        i37 = i36;
       }
      }
      do {
       i43 = i38 + (i34 << 2) | 0;
       if ((i43 | 0) != 0) {
        HEAP32[i43 >> 2] = 0;
       }
       i34 = i34 + 1 | 0;
      } while ((i34 | 0) != (i36 | 0));
     }
     i34 = i36;
     i36 = i36 + -2 | 0;
    }
    HEAP32[i38 + (i32 << 2) >> 2] = HEAP32[i33 + 36 >> 2];
    HEAP32[i38 + (i31 << 2) >> 2] = HEAP32[i35 >> 2];
    i31 = i31 + 1 | 0;
   } else {
    i31 = i32;
   }
  } while (0);
 } while ((i31 | 0) != 0);
 if ((i38 | 0) == 0) {
  STACKTOP = i13;
  return;
 }
 __Z21btAlignedFreeInternalPv(i38);
 STACKTOP = i13;
 return;
}
function __ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE(i15, i3, i16, i2) {
 i15 = i15 | 0;
 i3 = i3 | 0;
 i16 = i16 | 0;
 i2 = i2 | 0;
 var i1 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0, d36 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8;
 if ((i15 | 0) == 0) {
  STACKTOP = i8;
  return;
 }
 d14 = +HEAPF32[i16 >> 2] - +HEAPF32[i3 >> 2];
 i1 = i3 + 4 | 0;
 d30 = +HEAPF32[i16 + 4 >> 2] - +HEAPF32[i1 >> 2];
 i10 = i3 + 8 | 0;
 d36 = +HEAPF32[i16 + 8 >> 2] - +HEAPF32[i10 >> 2];
 d33 = 1.0 / +Math_sqrt(+(d14 * d14 + d30 * d30 + d36 * d36));
 d31 = d14 * d33;
 d32 = d30 * d33;
 d33 = d36 * d33;
 if (d31 == 0.0) {
  d11 = 999999984306749400.0;
 } else {
  d11 = 1.0 / d31;
 }
 if (d32 == 0.0) {
  d12 = 999999984306749400.0;
 } else {
  d12 = 1.0 / d32;
 }
 if (d33 == 0.0) {
  d13 = 999999984306749400.0;
 } else {
  d13 = 1.0 / d33;
 }
 i17 = d11 < 0.0 | 0;
 i19 = d12 < 0.0 | 0;
 i21 = d13 < 0.0 | 0;
 d14 = d31 * d14 + d32 * d30 + d33 * d36;
 i28 = __Z22btAlignedAllocInternalji(512, 16) | 0;
 i18 = 0;
 do {
  i16 = i28 + (i18 << 2) | 0;
  if ((i16 | 0) != 0) {
   HEAP32[i16 >> 2] = 0;
  }
  i18 = i18 + 1 | 0;
 } while ((i18 | 0) != 128);
 HEAP32[i28 >> 2] = i15;
 i16 = i9 + 16 | 0;
 i15 = i9 + (i17 << 4) | 0;
 i18 = i9 + ((i17 ^ 1) << 4) | 0;
 i17 = i9 + (i19 << 4) + 4 | 0;
 i19 = i9 + ((i19 ^ 1) << 4) + 4 | 0;
 i20 = i9 + (i21 << 4) + 8 | 0;
 i21 = i9 + ((i21 ^ 1) << 4) + 8 | 0;
 i25 = 128;
 i29 = 128;
 i22 = 1;
 i27 = 126;
 do {
  i23 = i22 + -1 | 0;
  i24 = HEAP32[i28 + (i23 << 2) >> 2] | 0;
  HEAP32[i9 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
  i35 = i24 + 16 | 0;
  HEAP32[i16 + 0 >> 2] = HEAP32[i35 + 0 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i35 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i35 + 12 >> 2];
  d32 = +HEAPF32[i3 >> 2];
  d30 = d11 * (+HEAPF32[i15 >> 2] - d32);
  d32 = d11 * (+HEAPF32[i18 >> 2] - d32);
  d31 = +HEAPF32[i1 >> 2];
  d33 = d12 * (+HEAPF32[i17 >> 2] - d31);
  d31 = d12 * (+HEAPF32[i19 >> 2] - d31);
  do {
   if (((!(d30 > d31 | d33 > d32) ? (d7 = d33 > d30 ? d33 : d30, d5 = d31 < d32 ? d31 : d32, d4 = +HEAPF32[i10 >> 2], d6 = d13 * (+HEAPF32[i20 >> 2] - d4), d4 = d13 * (+HEAPF32[i21 >> 2] - d4), !(d7 > d4 | d6 > d5)) : 0) ? (d6 > d7 ? d6 : d7) < d14 : 0) ? (d4 < d5 ? d4 : d5) > 0.0 : 0) {
    i26 = i24 + 40 | 0;
    if ((HEAP32[i26 >> 2] | 0) == 0) {
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i24);
     i22 = i23;
     break;
    }
    if ((i23 | 0) > (i27 | 0)) {
     i27 = i25 << 1;
     if ((i25 | 0) < (i27 | 0)) {
      if ((i29 | 0) < (i27 | 0)) {
       if ((i25 | 0) != 0) {
        i29 = __Z22btAlignedAllocInternalji(i25 << 3, 16) | 0;
        if ((i25 | 0) > 0) {
         i34 = 0;
         do {
          i35 = i29 + (i34 << 2) | 0;
          if ((i35 | 0) != 0) {
           HEAP32[i35 >> 2] = HEAP32[i28 + (i34 << 2) >> 2];
          }
          i34 = i34 + 1 | 0;
         } while ((i34 | 0) != (i25 | 0));
        }
       } else {
        i29 = 0;
       }
       if ((i28 | 0) == 0) {
        i28 = i29;
        i29 = i27;
       } else {
        __Z21btAlignedFreeInternalPv(i28);
        i28 = i29;
        i29 = i27;
       }
      }
      do {
       i34 = i28 + (i25 << 2) | 0;
       if ((i34 | 0) != 0) {
        HEAP32[i34 >> 2] = 0;
       }
       i25 = i25 + 1 | 0;
      } while ((i25 | 0) != (i27 | 0));
     }
     i25 = i27;
     i27 = i27 + -2 | 0;
    }
    HEAP32[i28 + (i23 << 2) >> 2] = HEAP32[i24 + 36 >> 2];
    HEAP32[i28 + (i22 << 2) >> 2] = HEAP32[i26 >> 2];
    i22 = i22 + 1 | 0;
   } else {
    i22 = i23;
   }
  } while (0);
 } while ((i22 | 0) != 0);
 if ((i28 | 0) == 0) {
  STACKTOP = i8;
  return;
 }
 __Z21btAlignedFreeInternalPv(i28);
 STACKTOP = i8;
 return;
}
function __Z22resolveSingleCollisionP11btRigidBodyP17btCollisionObjectRK9btVector3S5_RK19btContactSolverInfof(i6, i9, i23, i1, i10, d13) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 d13 = +d13;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, d11 = 0.0, d12 = 0.0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i2 + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 16 | 0;
 i8 = i2;
 if ((HEAP32[i9 + 232 >> 2] & 2 | 0) == 0) {
  i7 = 0;
 } else {
  i7 = i9;
 }
 d20 = +HEAPF32[i23 >> 2];
 i22 = i6 + 52 | 0;
 d26 = d20 - +HEAPF32[i22 >> 2];
 d18 = +HEAPF32[i23 + 4 >> 2];
 d11 = d18 - +HEAPF32[i6 + 56 >> 2];
 d16 = +HEAPF32[i23 + 8 >> 2];
 d12 = d16 - +HEAPF32[i6 + 60 >> 2];
 HEAPF32[i5 >> 2] = d26;
 HEAPF32[i5 + 4 >> 2] = d11;
 HEAPF32[i5 + 8 >> 2] = d12;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 d20 = d20 - +HEAPF32[i9 + 52 >> 2];
 d19 = d18 - +HEAPF32[i9 + 56 >> 2];
 d21 = d16 - +HEAPF32[i9 + 60 >> 2];
 HEAPF32[i3 >> 2] = d20;
 HEAPF32[i3 + 4 >> 2] = d19;
 HEAPF32[i3 + 8 >> 2] = d21;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 d27 = +HEAPF32[i6 + 324 >> 2];
 d24 = +HEAPF32[i6 + 328 >> 2];
 d25 = +HEAPF32[i6 + 320 >> 2];
 i17 = (i7 | 0) != 0;
 if (i17) {
  d30 = +HEAPF32[i7 + 324 >> 2];
  d29 = +HEAPF32[i7 + 328 >> 2];
  d31 = +HEAPF32[i7 + 320 >> 2];
  d28 = d30 * d21 - d29 * d19 + +HEAPF32[i7 + 304 >> 2];
  d29 = +HEAPF32[i7 + 308 >> 2] + (d29 * d20 - d21 * d31);
  d30 = d19 * d31 - d30 * d20 + +HEAPF32[i7 + 312 >> 2];
 } else {
  d28 = 0.0;
  d29 = 0.0;
  d30 = 0.0;
 }
 d21 = +HEAPF32[i1 >> 2];
 i15 = i1 + 4 | 0;
 d20 = +HEAPF32[i15 >> 2];
 i14 = i1 + 8 | 0;
 d19 = +HEAPF32[i14 >> 2];
 d24 = d21 * (d27 * d12 - d24 * d11 + +HEAPF32[i6 + 304 >> 2] - d28) + (+HEAPF32[i6 + 308 >> 2] + (d24 * d26 - d12 * d25) - d29) * d20 + (d11 * d25 - d27 * d26 + +HEAPF32[i6 + 312 >> 2] - d30) * d19;
 d29 = +HEAPF32[i23 >> 2];
 d26 = d29 - +HEAPF32[i22 >> 2];
 d30 = d19 * d11 - d20 * d12;
 d31 = d21 * d12 - d19 * d26;
 d28 = d20 * d26 - d21 * d11;
 d25 = d28 * +HEAPF32[i6 + 288 >> 2] + (+HEAPF32[i6 + 256 >> 2] * d30 + +HEAPF32[i6 + 272 >> 2] * d31);
 d27 = d30 * +HEAPF32[i6 + 260 >> 2] + d31 * +HEAPF32[i6 + 276 >> 2] + d28 * +HEAPF32[i6 + 292 >> 2];
 d28 = d30 * +HEAPF32[i6 + 264 >> 2] + d31 * +HEAPF32[i6 + 280 >> 2] + d28 * +HEAPF32[i6 + 296 >> 2];
 if (i17) {
  d29 = d29 - +HEAPF32[i7 + 52 >> 2];
  d18 = d18 - +HEAPF32[i7 + 56 >> 2];
  d31 = d16 - +HEAPF32[i7 + 60 >> 2];
  d34 = d19 * d18 - d20 * d31;
  d33 = d21 * d31 - d19 * d29;
  d30 = d20 * d29 - d21 * d18;
  d16 = d30 * +HEAPF32[i7 + 288 >> 2] + (+HEAPF32[i7 + 256 >> 2] * d34 + +HEAPF32[i7 + 272 >> 2] * d33);
  d32 = d34 * +HEAPF32[i7 + 260 >> 2] + d33 * +HEAPF32[i7 + 276 >> 2] + d30 * +HEAPF32[i7 + 292 >> 2];
  d30 = d34 * +HEAPF32[i7 + 264 >> 2] + d33 * +HEAPF32[i7 + 280 >> 2] + d30 * +HEAPF32[i7 + 296 >> 2];
  i17 = 1;
  d16 = +HEAPF32[i7 + 336 >> 2] + (d19 * (d18 * d16 - d29 * d32) + (d21 * (d31 * d32 - d18 * d30) + d20 * (d29 * d30 - d31 * d16)));
 } else {
  i17 = 0;
  d16 = 0.0;
 }
 d11 = 1.0 / (+HEAPF32[i6 + 336 >> 2] + (d19 * (d11 * d25 - d26 * d27) + (d21 * (d12 * d27 - d11 * d28) + d20 * (d26 * d28 - d12 * d25))) + d16);
 d11 = -(+HEAPF32[i10 + 32 >> 2] * d13) / +HEAPF32[i10 + 12 >> 2] * d11 - d24 * (1.0 - d24 * +HEAPF32[i6 + 228 >> 2] * +HEAPF32[i9 + 228 >> 2]) * d11;
 d11 = d11 < 0.0 ? 0.0 : d11;
 d33 = +HEAPF32[i15 >> 2] * d11;
 d34 = +HEAPF32[i14 >> 2] * d11;
 HEAPF32[i4 >> 2] = +HEAPF32[i1 >> 2] * d11;
 HEAPF32[i4 + 4 >> 2] = d33;
 HEAPF32[i4 + 8 >> 2] = d34;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i6, i4, i5);
 if (!i17) {
  STACKTOP = i2;
  return +d11;
 }
 d33 = -(d11 * +HEAPF32[i15 >> 2]);
 d34 = -(d11 * +HEAPF32[i14 >> 2]);
 HEAPF32[i8 >> 2] = -(d11 * +HEAPF32[i1 >> 2]);
 HEAPF32[i8 + 4 >> 2] = d33;
 HEAPF32[i8 + 8 >> 2] = d34;
 HEAPF32[i8 + 12 >> 2] = 0.0;
 __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i7, i8, i3);
 STACKTOP = i2;
 return +d11;
}
function __ZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfo(i7, i10) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i6 = i5 + 20 | 0;
 i8 = i5 + 112 | 0;
 i9 = i5;
 __ZN15CProfileManager13Start_ProfileEPKc(444976);
 i3 = i9 + 16 | 0;
 HEAP8[i3] = 1;
 i2 = i9 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 i1 = i9 + 4 | 0;
 HEAP32[i1 >> 2] = 0;
 i4 = i9 + 8 | 0;
 HEAP32[i4 >> 2] = 0;
 i11 = HEAP32[i7 + 184 >> 2] | 0;
 L1 : do {
  if ((i11 | 0) > 0) {
   i12 = __Z22btAlignedAllocInternalji(i11 << 2, 16) | 0;
   i13 = HEAP32[i1 >> 2] | 0;
   if ((i13 | 0) > 0) {
    i14 = 0;
    do {
     i15 = i12 + (i14 << 2) | 0;
     if ((i15 | 0) != 0) {
      HEAP32[i15 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + (i14 << 2) >> 2];
     }
     i14 = i14 + 1 | 0;
    } while ((i14 | 0) != (i13 | 0));
   }
   i13 = HEAP32[i2 >> 2] | 0;
   if ((i13 | 0) != 0) {
    if ((HEAP8[i3] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i13);
    }
    HEAP32[i2 >> 2] = 0;
   }
   HEAP8[i3] = 1;
   HEAP32[i2 >> 2] = i12;
   HEAP32[i4 >> 2] = i11;
   i13 = 0;
   while (1) {
    i12 = i12 + (i13 << 2) | 0;
    if ((i12 | 0) != 0) {
     HEAP32[i12 >> 2] = 0;
    }
    i13 = i13 + 1 | 0;
    if ((i13 | 0) == (i11 | 0)) {
     break L1;
    }
    i12 = HEAP32[i2 >> 2] | 0;
   }
  }
 } while (0);
 HEAP32[i1 >> 2] = i11;
 i12 = i7 + 192 | 0;
 i11 = 0;
 while (1) {
  if ((i11 | 0) >= (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] & 127](i7) | 0)) {
   break;
  }
  HEAP32[(HEAP32[i2 >> 2] | 0) + (i11 << 2) >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i11 << 2) >> 2];
  i11 = i11 + 1 | 0;
 }
 i11 = HEAP32[i1 >> 2] | 0;
 if ((i11 | 0) > 1) {
  i15 = i11 + -1 | 0;
  HEAP8[i6 + 0 | 0] = HEAP8[i8 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvT_ii(i9, i6, 0, i15);
 }
 i15 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] & 127](i7) | 0) == 0;
 i18 = i15 ? 0 : HEAP32[i2 >> 2] | 0;
 i13 = i7 + 172 | 0;
 i8 = HEAP32[i13 >> 2] | 0;
 i17 = HEAP32[i1 >> 2] | 0;
 i14 = i7 + 80 | 0;
 i9 = HEAP32[i14 >> 2] | 0;
 i15 = i7 + 72 | 0;
 i16 = HEAP32[i15 >> 2] | 0;
 i12 = i7 + 24 | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i6 >> 2] = 445504;
 HEAP32[i6 + 4 >> 2] = i10;
 HEAP32[i6 + 8 >> 2] = i8;
 HEAP32[i6 + 12 >> 2] = i18;
 HEAP32[i6 + 16 >> 2] = i17;
 HEAP32[i6 + 20 >> 2] = i9;
 HEAP32[i6 + 24 >> 2] = i16;
 HEAP32[i6 + 28 >> 2] = i11;
 HEAP8[i6 + 48 | 0] = 1;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 + 36 >> 2] = 0;
 HEAP32[i6 + 40 >> 2] = 0;
 HEAP8[i6 + 68 | 0] = 1;
 HEAP32[i6 + 64 >> 2] = 0;
 HEAP32[i6 + 56 >> 2] = 0;
 HEAP32[i6 + 60 >> 2] = 0;
 HEAP8[i6 + 88 | 0] = 1;
 HEAP32[i6 + 84 >> 2] = 0;
 HEAP32[i6 + 76 >> 2] = 0;
 HEAP32[i6 + 80 >> 2] = 0;
 i16 = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0;
 i9 = HEAP32[i7 + 8 >> 2] | 0;
 i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 127](i11) | 0;
 FUNCTION_TABLE_viii[i16 & 63](i8, i9, i11);
 __ZN25btSimulationIslandManager22buildAndProcessIslandsEP12btDispatcherP16btCollisionWorldPNS_14IslandCallbackE(HEAP32[i7 + 176 >> 2] | 0, HEAP32[i12 >> 2] | 0, i7, i6);
 __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallback18processConstraintsEv(i6);
 i13 = HEAP32[i13 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] & 63](i13, i10, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0);
 __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallbackD2Ev(i6);
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP8[i3] = 1;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i5;
  return;
 }
 if ((HEAP8[i3] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i6);
 }
 HEAP32[i2 >> 2] = 0;
 HEAP8[i3] = 1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i5;
 return;
}
function __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeE6insertERKS0_RKS1_(i1, i7, i10) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = STACKTOP;
 i12 = HEAP16[i7 >> 1] | 0;
 i4 = i7 + 2 | 0;
 i13 = HEAP16[i4 >> 1] | 0;
 i6 = i1 + 48 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i5 = ((i13 & 65535) << 16) + (i12 << 16 >> 16) & i3 + -1;
 L1 : do {
  if (i5 >>> 0 < (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i14 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i5 << 2) >> 2] | 0, !((i14 | 0) == -1)) : 0) {
   i9 = HEAP32[i1 + 72 >> 2] | 0;
   i11 = i1 + 32 | 0;
   while (1) {
    if (i12 << 16 >> 16 == (HEAP16[i9 + (i14 << 2) >> 1] | 0) ? i13 << 16 >> 16 == (HEAP16[i9 + (i14 << 2) + 2 >> 1] | 0) : 0) {
     break;
    }
    i14 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i14 << 2) >> 2] | 0;
    if ((i14 | 0) == -1) {
     break L1;
    }
   }
   if (!((i14 | 0) == -1)) {
    i17 = (HEAP32[i1 + 52 >> 2] | 0) + (i14 << 2) | 0;
    i16 = HEAPU16[i10 >> 1] | HEAPU16[i10 + 2 >> 1] << 16;
    HEAP16[i17 >> 1] = i16;
    HEAP16[i17 + 2 >> 1] = i16 >>> 16;
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 i11 = i1 + 44 | 0;
 i9 = HEAP32[i11 >> 2] | 0;
 if ((i9 | 0) == (i3 | 0)) {
  i14 = (i3 | 0) == 0 ? 1 : i3 << 1;
  if ((i3 | 0) < (i14 | 0)) {
   if ((i14 | 0) == 0) {
    i12 = 0;
    i15 = i3;
   } else {
    i12 = __Z22btAlignedAllocInternalji(i14 << 2, 16) | 0;
    i15 = HEAP32[i11 >> 2] | 0;
   }
   i13 = i1 + 52 | 0;
   if ((i15 | 0) > 0) {
    i16 = 0;
    do {
     i17 = i12 + (i16 << 2) | 0;
     if ((i17 | 0) != 0) {
      i18 = (HEAP32[i13 >> 2] | 0) + (i16 << 2) | 0;
      i18 = HEAPU16[i18 >> 1] | HEAPU16[i18 + 2 >> 1] << 16;
      HEAP16[i17 >> 1] = i18;
      HEAP16[i17 + 2 >> 1] = i18 >>> 16;
     }
     i16 = i16 + 1 | 0;
    } while ((i16 | 0) != (i15 | 0));
   }
   i15 = HEAP32[i13 >> 2] | 0;
   i16 = i1 + 56 | 0;
   if ((i15 | 0) != 0) {
    if ((HEAP8[i16] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i15);
    }
    HEAP32[i13 >> 2] = 0;
   }
   HEAP8[i16] = 1;
   HEAP32[i13 >> 2] = i12;
   HEAP32[i6 >> 2] = i14;
   i12 = HEAP32[i11 >> 2] | 0;
  } else {
   i12 = i3;
  }
 } else {
  i12 = i9;
 }
 i13 = (HEAP32[i1 + 52 >> 2] | 0) + (i12 << 2) | 0;
 if ((i13 | 0) != 0) {
  i12 = HEAPU16[i10 >> 1] | HEAPU16[i10 + 2 >> 1] << 16;
  HEAP16[i13 >> 1] = i12;
  HEAP16[i13 + 2 >> 1] = i12 >>> 16;
  i12 = HEAP32[i11 >> 2] | 0;
 }
 HEAP32[i11 >> 2] = i12 + 1;
 i10 = i1 + 64 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i12 = i1 + 68 | 0;
 if ((i15 | 0) == (HEAP32[i12 >> 2] | 0) ? (i8 = (i15 | 0) == 0 ? 1 : i15 << 1, (i15 | 0) < (i8 | 0)) : 0) {
  if ((i8 | 0) == 0) {
   i11 = 0;
  } else {
   i11 = __Z22btAlignedAllocInternalji(i8 << 2, 16) | 0;
   i15 = HEAP32[i10 >> 2] | 0;
  }
  i13 = i1 + 72 | 0;
  if ((i15 | 0) > 0) {
   i16 = 0;
   do {
    i14 = i11 + (i16 << 2) | 0;
    if ((i14 | 0) != 0) {
     i18 = (HEAP32[i13 >> 2] | 0) + (i16 << 2) | 0;
     i18 = HEAPU16[i18 >> 1] | HEAPU16[i18 + 2 >> 1] << 16;
     HEAP16[i14 >> 1] = i18;
     HEAP16[i14 + 2 >> 1] = i18 >>> 16;
    }
    i16 = i16 + 1 | 0;
   } while ((i16 | 0) != (i15 | 0));
  }
  i15 = HEAP32[i13 >> 2] | 0;
  i14 = i1 + 76 | 0;
  if ((i15 | 0) != 0) {
   if ((HEAP8[i14] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i15);
   }
   HEAP32[i13 >> 2] = 0;
  }
  HEAP8[i14] = 1;
  HEAP32[i13 >> 2] = i11;
  HEAP32[i12 >> 2] = i8;
  i15 = HEAP32[i10 >> 2] | 0;
 }
 i8 = (HEAP32[i1 + 72 >> 2] | 0) + (i15 << 2) | 0;
 if ((i8 | 0) != 0) {
  i15 = HEAPU16[i7 >> 1] | HEAPU16[i7 + 2 >> 1] << 16;
  HEAP16[i8 >> 1] = i15;
  HEAP16[i8 + 2 >> 1] = i15 >>> 16;
  i15 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i10 >> 2] = i15 + 1;
 if ((i3 | 0) < (HEAP32[i6 >> 2] | 0)) {
  __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeE10growTablesERKS0_(i1, 0);
  i5 = (HEAPU16[i4 >> 1] << 16) + (HEAP16[i7 >> 1] | 0) & (HEAP32[i6 >> 2] | 0) + -1;
 }
 i18 = (HEAP32[i1 + 12 >> 2] | 0) + (i5 << 2) | 0;
 HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + (i9 << 2) >> 2] = HEAP32[i18 >> 2];
 HEAP32[i18 >> 2] = i9;
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItEC2ERK9btVector3S3_tttP22btOverlappingPairCacheb(i1, i5, i6, i3, i7, i4, i14, i11) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 var i2 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 447056;
 HEAP16[i1 + 4 >> 1] = i3;
 i3 = i1 + 6 | 0;
 HEAP16[i3 >> 1] = i7;
 i9 = i1 + 8 | 0;
 i7 = i1 + 24 | 0;
 i13 = i1 + 92 | 0;
 HEAP32[i13 >> 2] = i14;
 HEAP32[i1 + 96 >> 2] = 0;
 i12 = i1 + 100 | 0;
 HEAP8[i12] = 0;
 HEAP32[i1 + 104 >> 2] = 0;
 i8 = i1 + 108 | 0;
 HEAP32[i8 >> 2] = 0;
 i10 = (i4 & 65535) + 1 | 0;
 i4 = i10 & 65535;
 if ((i14 | 0) == 0) {
  i14 = __Z22btAlignedAllocInternalji(76, 16) | 0;
  if ((i14 | 0) == 0) {
   i14 = 0;
  } else {
   __ZN28btHashedOverlappingPairCacheC2Ev(i14);
  }
  HEAP32[i13 >> 2] = i14;
  HEAP8[i12] = 1;
 }
 if (!i11) {
  i12 = __Z22btAlignedAllocInternalji(24, 16) | 0;
  if ((i12 | 0) == 0) {
   i12 = 0;
  } else {
   HEAP32[i12 + 0 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   HEAP32[i12 + 12 >> 2] = 0;
   HEAP32[i12 + 16 >> 2] = 0;
   HEAP32[i12 + 20 >> 2] = 0;
   HEAP32[i12 >> 2] = 447120;
   HEAP8[i12 + 20 | 0] = 1;
   HEAP32[i12 + 16 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   HEAP32[i12 + 12 >> 2] = 0;
  }
  i11 = i1 + 112 | 0;
  HEAP32[i11 >> 2] = i12;
  i12 = __Z22btAlignedAllocInternalji(156, 16) | 0;
  if ((i12 | 0) == 0) {
   i12 = 0;
  } else {
   __ZN16btDbvtBroadphaseC2EP22btOverlappingPairCache(i12, HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i8 >> 2] = i12;
  HEAP8[i12 + 153 | 0] = 1;
 }
 HEAP32[i9 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 d17 = +(HEAPU16[i3 >> 1] | 0);
 d16 = d17 / (+HEAPF32[i1 + 28 >> 2] - +HEAPF32[i1 + 12 >> 2]);
 d15 = d17 / (+HEAPF32[i1 + 32 >> 2] - +HEAPF32[i1 + 16 >> 2]);
 HEAPF32[i1 + 40 >> 2] = d17 / (+HEAPF32[i7 >> 2] - +HEAPF32[i9 >> 2]);
 HEAPF32[i1 + 44 >> 2] = d16;
 HEAPF32[i1 + 48 >> 2] = d15;
 HEAPF32[i1 + 52 >> 2] = 0.0;
 i7 = i10 & 65535;
 i6 = __Z22btAlignedAllocInternalji(i7 << 6, 16) | 0;
 if ((i7 | 0) != 0) {
  i8 = i6 + (i7 << 6) | 0;
  i5 = i6;
  do {
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   i5 = i5 + 64 | 0;
  } while ((i5 | 0) != (i8 | 0));
 }
 i5 = i1 + 60 | 0;
 HEAP32[i5 >> 2] = i6;
 HEAP16[i1 + 58 >> 1] = i4;
 HEAP16[i1 + 56 >> 1] = 0;
 HEAP16[i1 + 64 >> 1] = 1;
 if (i7 >>> 0 > 1) {
  i8 = 1;
  i4 = 1;
  do {
   HEAP16[i6 + (i8 << 6) + 48 >> 1] = i8 + 1;
   i4 = i4 + 1 << 16 >> 16;
   i8 = i4 & 65535;
  } while (i8 >>> 0 < i7 >>> 0);
 }
 HEAP16[i6 + (i7 + -1 << 6) + 48 >> 1] = 0;
 i6 = i7 << 3;
 i7 = __Z22btAlignedAllocInternalji(i6, 16) | 0;
 HEAP32[i1 + 80 >> 2] = i7;
 if ((i7 | 0) == 0) {
  i7 = 0;
 }
 i4 = i1 + 68 | 0;
 HEAP32[i4 >> 2] = i7;
 i8 = __Z22btAlignedAllocInternalji(i6, 16) | 0;
 HEAP32[i1 + 84 >> 2] = i8;
 if ((i8 | 0) == 0) {
  i8 = 0;
 }
 i7 = i1 + 72 | 0;
 HEAP32[i7 >> 2] = i8;
 i6 = __Z22btAlignedAllocInternalji(i6, 16) | 0;
 HEAP32[i1 + 88 >> 2] = i6;
 if ((i6 | 0) == 0) {
  i6 = 0;
 }
 i14 = i1 + 76 | 0;
 HEAP32[i14 >> 2] = i6;
 HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
 i13 = HEAP32[i5 >> 2] | 0;
 HEAP16[i13 + 48 >> 1] = 0;
 HEAP16[i13 + 54 >> 1] = 1;
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP16[i12 >> 1] = 0;
 HEAP16[i12 + 2 >> 1] = 0;
 HEAP16[i12 + 4 >> 1] = HEAP16[i3 >> 1] | 0;
 HEAP16[i12 + 6 >> 1] = 0;
 HEAP16[i13 + 50 >> 1] = 0;
 HEAP16[i13 + 56 >> 1] = 1;
 i12 = HEAP32[i7 >> 2] | 0;
 HEAP16[i12 >> 1] = 0;
 HEAP16[i12 + 2 >> 1] = 0;
 HEAP16[i12 + 4 >> 1] = HEAP16[i3 >> 1] | 0;
 HEAP16[i12 + 6 >> 1] = 0;
 HEAP16[i13 + 52 >> 1] = 0;
 HEAP16[i13 + 58 >> 1] = 1;
 i14 = HEAP32[i14 >> 2] | 0;
 HEAP16[i14 >> 1] = 0;
 HEAP16[i14 + 2 >> 1] = 0;
 HEAP16[i14 + 4 >> 1] = HEAP16[i3 >> 1] | 0;
 HEAP16[i14 + 6 >> 1] = 0;
 STACKTOP = i2;
 return;
}
function __ZN28btCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i40, i6, i7, i2, i3) {
 i40 = i40 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d41 = 0.0, i42 = 0, i43 = 0, d44 = 0.0, d45 = 0.0, i46 = 0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0;
 i1 = STACKTOP;
 i5 = (HEAP8[i40 + 28 | 0] | 0) != 0;
 i4 = i5 ? i7 : i6;
 i11 = i5 ? i6 : i7;
 i9 = i4 + 192 | 0;
 i10 = HEAP32[i40 + 12 >> 2] | 0;
 if ((i10 | 0) <= 0) {
  d45 = 1.0;
  STACKTOP = i1;
  return +d45;
 }
 i8 = (HEAP32[i9 >> 2] | 0) + 24 | 0;
 i13 = i4 + 4 | 0;
 i15 = i4 + 8 | 0;
 i17 = i4 + 12 | 0;
 i19 = i4 + 16 | 0;
 i21 = i4 + 20 | 0;
 i23 = i4 + 24 | 0;
 i24 = i4 + 28 | 0;
 i22 = i4 + 32 | 0;
 i20 = i4 + 36 | 0;
 i18 = i4 + 40 | 0;
 i16 = i4 + 44 | 0;
 i14 = i4 + 48 | 0;
 i12 = i4 + 52 | 0;
 i7 = i4 + 56 | 0;
 i6 = i4 + 60 | 0;
 i5 = i4 + 64 | 0;
 i40 = i40 + 20 | 0;
 d25 = +HEAPF32[i13 >> 2];
 d34 = +HEAPF32[i15 >> 2];
 d32 = +HEAPF32[i17 >> 2];
 d30 = +HEAPF32[i19 >> 2];
 d28 = +HEAPF32[i21 >> 2];
 d36 = +HEAPF32[i23 >> 2];
 d26 = +HEAPF32[i24 >> 2];
 d38 = +HEAPF32[i22 >> 2];
 d27 = +HEAPF32[i20 >> 2];
 d29 = +HEAPF32[i18 >> 2];
 d31 = +HEAPF32[i16 >> 2];
 d33 = +HEAPF32[i14 >> 2];
 d35 = +HEAPF32[i12 >> 2];
 d37 = +HEAPF32[i7 >> 2];
 d39 = +HEAPF32[i6 >> 2];
 d41 = +HEAPF32[i5 >> 2];
 d44 = 1.0;
 i43 = 0;
 do {
  i42 = HEAP32[i8 >> 2] | 0;
  i46 = HEAP32[i42 + (i43 * 80 | 0) + 64 >> 2] | 0;
  d57 = +HEAPF32[i42 + (i43 * 80 | 0) >> 2];
  d56 = +HEAPF32[i42 + (i43 * 80 | 0) + 16 >> 2];
  d55 = +HEAPF32[i42 + (i43 * 80 | 0) + 32 >> 2];
  d54 = +HEAPF32[i42 + (i43 * 80 | 0) + 4 >> 2];
  d53 = +HEAPF32[i42 + (i43 * 80 | 0) + 20 >> 2];
  d52 = +HEAPF32[i42 + (i43 * 80 | 0) + 36 >> 2];
  d51 = +HEAPF32[i42 + (i43 * 80 | 0) + 8 >> 2];
  d50 = +HEAPF32[i42 + (i43 * 80 | 0) + 24 >> 2];
  d49 = +HEAPF32[i42 + (i43 * 80 | 0) + 40 >> 2];
  d48 = +HEAPF32[i42 + (i43 * 80 | 0) + 48 >> 2];
  d47 = +HEAPF32[i42 + (i43 * 80 | 0) + 52 >> 2];
  d45 = +HEAPF32[i42 + (i43 * 80 | 0) + 56 >> 2];
  HEAPF32[i13 >> 2] = d25 * d57 + d34 * d56 + d32 * d55;
  HEAPF32[i15 >> 2] = d25 * d54 + d34 * d53 + d32 * d52;
  HEAPF32[i17 >> 2] = d25 * d51 + d34 * d50 + d32 * d49;
  HEAPF32[i19 >> 2] = 0.0;
  HEAPF32[i21 >> 2] = d28 * d57 + d36 * d56 + d26 * d55;
  HEAPF32[i23 >> 2] = d28 * d54 + d36 * d53 + d26 * d52;
  HEAPF32[i24 >> 2] = d28 * d51 + d36 * d50 + d26 * d49;
  HEAPF32[i22 >> 2] = 0.0;
  HEAPF32[i20 >> 2] = d27 * d57 + d29 * d56 + d31 * d55;
  HEAPF32[i18 >> 2] = d27 * d54 + d29 * d53 + d31 * d52;
  HEAPF32[i16 >> 2] = d27 * d51 + d29 * d50 + d31 * d49;
  HEAPF32[i14 >> 2] = 0.0;
  HEAPF32[i12 >> 2] = d35 + (d25 * d48 + d34 * d47 + d32 * d45);
  HEAPF32[i7 >> 2] = d37 + (d28 * d48 + d36 * d47 + d26 * d45);
  HEAPF32[i6 >> 2] = d39 + (d27 * d48 + d29 * d47 + d31 * d45);
  HEAPF32[i5 >> 2] = 0.0;
  i42 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i46;
  i46 = HEAP32[(HEAP32[i40 >> 2] | 0) + (i43 << 2) >> 2] | 0;
  d45 = +FUNCTION_TABLE_diiiii[HEAP32[(HEAP32[i46 >> 2] | 0) + 12 >> 2] & 15](i46, i4, i11, i2, i3);
  d44 = d45 < d44 ? d45 : d44;
  HEAP32[i9 >> 2] = i42;
  HEAPF32[i13 >> 2] = d25;
  HEAPF32[i15 >> 2] = d34;
  HEAPF32[i17 >> 2] = d32;
  HEAPF32[i19 >> 2] = d30;
  HEAPF32[i21 >> 2] = d28;
  HEAPF32[i23 >> 2] = d36;
  HEAPF32[i24 >> 2] = d26;
  HEAPF32[i22 >> 2] = d38;
  HEAPF32[i20 >> 2] = d27;
  HEAPF32[i18 >> 2] = d29;
  HEAPF32[i16 >> 2] = d31;
  HEAPF32[i14 >> 2] = d33;
  HEAPF32[i12 >> 2] = d35;
  HEAPF32[i7 >> 2] = d37;
  HEAPF32[i6 >> 2] = d39;
  HEAPF32[i5 >> 2] = d41;
  i43 = i43 + 1 | 0;
 } while ((i43 | 0) != (i10 | 0));
 STACKTOP = i1;
 return +d44;
}
function __ZN20btAxisSweep3InternalItE12removeHandleEtP12btDispatcher(i1, i4, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = STACKTOP;
 i5 = i1 + 60 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i4 & 65535;
 i8 = i1 + 92 | 0;
 i18 = HEAP32[i8 >> 2] | 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 56 >> 2] & 127](i18) | 0)) {
  i18 = HEAP32[i8 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 63](i18, i3 + (i6 << 6) | 0, i7);
 }
 i10 = i1 + 56 | 0;
 i7 = HEAPU16[i10 >> 1] | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 i9 = i8 + 54 | 0;
 HEAP16[i9 >> 1] = (HEAPU16[i9 >> 1] | 0) + 65534;
 i9 = i8 + 56 | 0;
 HEAP16[i9 >> 1] = (HEAPU16[i9 >> 1] | 0) + 65534;
 i8 = i8 + 58 | 0;
 HEAP16[i8 >> 1] = (HEAPU16[i8 >> 1] | 0) + 65534;
 i8 = i1 + 6 | 0;
 i7 = (i7 << 1) + -1 | 0;
 i9 = 0;
 do {
  i12 = i1 + (i9 << 2) + 68 | 0;
  i11 = HEAP32[i12 >> 2] | 0;
  i14 = HEAPU16[i3 + (i6 << 6) + (i9 << 1) + 54 >> 1] | 0;
  HEAP16[i11 + (i14 << 2) >> 1] = HEAP16[i8 >> 1] | 0;
  i16 = i14 + 1 | 0;
  i15 = HEAP16[i11 + (i16 << 2) + 2 >> 1] | 0;
  if (i15 << 16 >> 16 == 0) {
   i16 = i11;
  } else {
   i13 = (HEAP32[i5 >> 2] | 0) + ((HEAPU16[i11 + (i14 << 2) + 2 >> 1] | 0) << 6) + (i9 << 1) + 54 | 0;
   i14 = i11 + (i14 << 2) | 0;
   i16 = i11 + (i16 << 2) | 0;
   while (1) {
    i18 = HEAP16[i16 >> 1] | 0;
    if ((HEAPU16[i14 >> 1] | 0) < (i18 & 65535)) {
     break;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    i15 = i15 & 65535;
    if ((i18 & 1) == 0) {
     i18 = i17 + (i15 << 6) + (i9 << 1) + 48 | 0;
     HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
    } else {
     i18 = i17 + (i15 << 6) + (i9 << 1) + 54 | 0;
     HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
    }
    HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + 1 << 16 >> 16;
    i15 = HEAPU16[i14 >> 1] | HEAPU16[i14 + 2 >> 1] << 16;
    i18 = HEAPU16[i16 >> 1] | HEAPU16[i16 + 2 >> 1] << 16;
    HEAP16[i14 >> 1] = i18;
    HEAP16[i14 + 2 >> 1] = i18 >>> 16;
    HEAP16[i16 >> 1] = i15;
    HEAP16[i16 + 2 >> 1] = i15 >>> 16;
    i15 = HEAP16[i16 + 6 >> 1] | 0;
    if (i15 << 16 >> 16 == 0) {
     break;
    } else {
     i14 = i14 + 4 | 0;
     i16 = i16 + 4 | 0;
    }
   }
   i16 = HEAP32[i12 >> 2] | 0;
  }
  i13 = HEAPU16[i3 + (i6 << 6) + (i9 << 1) + 48 >> 1] | 0;
  HEAP16[i11 + (i13 << 2) >> 1] = HEAP16[i8 >> 1] | 0;
  i15 = i13 + 1 | 0;
  i14 = HEAP16[i16 + (i15 << 2) + 2 >> 1] | 0;
  L17 : do {
   if (!(i14 << 16 >> 16 == 0)) {
    i12 = (HEAP32[i5 >> 2] | 0) + ((HEAPU16[i16 + (i13 << 2) + 2 >> 1] | 0) << 6) + (i9 << 1) + 48 | 0;
    i13 = i16 + (i13 << 2) | 0;
    i16 = i16 + (i15 << 2) | 0;
    while (1) {
     i15 = HEAP16[i16 >> 1] | 0;
     if ((HEAPU16[i13 >> 1] | 0) < (i15 & 65535)) {
      break L17;
     }
     i17 = HEAP32[i5 >> 2] | 0;
     i14 = i14 & 65535;
     if ((i15 & 1) == 0) {
      i18 = i17 + (i14 << 6) + (i9 << 1) + 48 | 0;
      HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
     } else {
      i18 = i17 + (i14 << 6) + (i9 << 1) + 54 | 0;
      HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
     }
     HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + 1 << 16 >> 16;
     i14 = HEAPU16[i13 >> 1] | HEAPU16[i13 + 2 >> 1] << 16;
     i18 = HEAPU16[i16 >> 1] | HEAPU16[i16 + 2 >> 1] << 16;
     HEAP16[i13 >> 1] = i18;
     HEAP16[i13 + 2 >> 1] = i18 >>> 16;
     HEAP16[i16 >> 1] = i14;
     HEAP16[i16 + 2 >> 1] = i14 >>> 16;
     i14 = HEAP16[i16 + 6 >> 1] | 0;
     if (i14 << 16 >> 16 == 0) {
      break;
     } else {
      i13 = i13 + 4 | 0;
      i16 = i16 + 4 | 0;
     }
    }
   }
  } while (0);
  HEAP16[i11 + (i7 << 2) + 2 >> 1] = 0;
  HEAP16[i11 + (i7 << 2) >> 1] = HEAP16[i8 >> 1] | 0;
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != 3);
 i18 = i1 + 64 | 0;
 HEAP16[(HEAP32[i5 >> 2] | 0) + (i6 << 6) + 48 >> 1] = HEAP16[i18 >> 1] | 0;
 HEAP16[i18 >> 1] = i4;
 HEAP16[i10 >> 1] = (HEAP16[i10 >> 1] | 0) + -1 << 16 >> 16;
 STACKTOP = i2;
 return;
}
function __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i3, i5, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i1 = STACKTOP;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i3 >> 2] = i2;
  HEAP32[i2 + 32 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i5 + 40 >> 2] | 0;
 if ((i4 | 0) != 0) {
  d10 = +HEAPF32[i2 >> 2] + +HEAPF32[i2 + 16 >> 2];
  d11 = +HEAPF32[i2 + 4 >> 2] + +HEAPF32[i2 + 20 >> 2];
  d12 = +HEAPF32[i2 + 8 >> 2] + +HEAPF32[i2 + 24 >> 2];
  do {
   i9 = HEAP32[i5 + 36 >> 2] | 0;
   d16 = +Math_abs(+(d10 - (+HEAPF32[i9 >> 2] + +HEAPF32[i9 + 16 >> 2]))) + +Math_abs(+(d11 - (+HEAPF32[i9 + 4 >> 2] + +HEAPF32[i9 + 20 >> 2]))) + +Math_abs(+(d12 - (+HEAPF32[i9 + 8 >> 2] + +HEAPF32[i9 + 24 >> 2])));
   i5 = HEAP32[i5 + ((!(d16 < +Math_abs(+(d10 - (+HEAPF32[i4 >> 2] + +HEAPF32[i4 + 16 >> 2]))) + +Math_abs(+(d11 - (+HEAPF32[i4 + 4 >> 2] + +HEAPF32[i4 + 20 >> 2]))) + +Math_abs(+(d12 - (+HEAPF32[i4 + 8 >> 2] + +HEAPF32[i4 + 24 >> 2])))) & 1) << 2) + 36 >> 2] | 0;
   i4 = HEAP32[i5 + 40 >> 2] | 0;
  } while ((i4 | 0) != 0);
 }
 i6 = i5 + 32 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i7 = i3 + 4 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 if ((i9 | 0) == 0) {
  i9 = __Z22btAlignedAllocInternalji(44, 16) | 0;
  if ((i9 | 0) == 0) {
   i9 = 0;
  } else {
   i7 = i9 + 0 | 0;
   i8 = i7 + 44 | 0;
   do {
    HEAP32[i7 >> 2] = 0;
    i7 = i7 + 4 | 0;
   } while ((i7 | 0) < (i8 | 0));
  }
 } else {
  HEAP32[i7 >> 2] = 0;
 }
 HEAP32[i9 + 32 >> 2] = i4;
 i8 = i9 + 36 | 0;
 HEAP32[i8 >> 2] = 0;
 i7 = i9 + 40 | 0;
 HEAP32[i7 >> 2] = 0;
 d11 = +HEAPF32[i2 >> 2];
 d10 = +HEAPF32[i5 >> 2];
 d11 = d11 < d10 ? d11 : d10;
 HEAPF32[i9 >> 2] = d11;
 d12 = +HEAPF32[i2 + 16 >> 2];
 d10 = +HEAPF32[i5 + 16 >> 2];
 d10 = d12 > d10 ? d12 : d10;
 HEAPF32[i9 + 16 >> 2] = d10;
 d12 = +HEAPF32[i2 + 4 >> 2];
 d13 = +HEAPF32[i5 + 4 >> 2];
 d13 = d12 < d13 ? d12 : d13;
 HEAPF32[i9 + 4 >> 2] = d13;
 d12 = +HEAPF32[i2 + 20 >> 2];
 d14 = +HEAPF32[i5 + 20 >> 2];
 d12 = d12 > d14 ? d12 : d14;
 HEAPF32[i9 + 20 >> 2] = d12;
 d14 = +HEAPF32[i2 + 8 >> 2];
 d15 = +HEAPF32[i5 + 8 >> 2];
 d15 = d14 < d15 ? d14 : d15;
 HEAPF32[i9 + 8 >> 2] = d15;
 d14 = +HEAPF32[i2 + 24 >> 2];
 d16 = +HEAPF32[i5 + 24 >> 2];
 d14 = d14 > d16 ? d14 : d16;
 HEAPF32[i9 + 24 >> 2] = d14;
 if ((i4 | 0) == 0) {
  HEAP32[i8 >> 2] = i5;
  HEAP32[i6 >> 2] = i9;
  HEAP32[i7 >> 2] = i2;
  HEAP32[i2 + 32 >> 2] = i9;
  HEAP32[i3 >> 2] = i9;
  STACKTOP = i1;
  return;
 }
 HEAP32[i4 + (((HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] | 0) == (i5 | 0)) << 2) + 36 >> 2] = i9;
 HEAP32[i8 >> 2] = i5;
 HEAP32[i6 >> 2] = i9;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i2 + 32 >> 2] = i9;
 while (1) {
  i5 = i4 + 4 | 0;
  if (((((+HEAPF32[i4 >> 2] <= d11 ? +HEAPF32[i5 >> 2] <= d13 : 0) ? +HEAPF32[i4 + 8 >> 2] <= d15 : 0) ? +HEAPF32[i4 + 16 >> 2] >= d10 : 0) ? +HEAPF32[i4 + 20 >> 2] >= d12 : 0) ? +HEAPF32[i4 + 24 >> 2] >= d14 : 0) {
   i2 = 20;
   break;
  }
  i3 = HEAP32[i4 + 36 >> 2] | 0;
  i2 = HEAP32[i4 + 40 >> 2] | 0;
  d10 = +HEAPF32[i3 >> 2];
  d11 = +HEAPF32[i2 >> 2];
  d11 = d10 < d11 ? d10 : d11;
  HEAPF32[i4 >> 2] = d11;
  d10 = +HEAPF32[i3 + 16 >> 2];
  d12 = +HEAPF32[i2 + 16 >> 2];
  d10 = d10 > d12 ? d10 : d12;
  HEAPF32[i4 + 16 >> 2] = d10;
  d12 = +HEAPF32[i3 + 4 >> 2];
  d13 = +HEAPF32[i2 + 4 >> 2];
  d13 = d12 < d13 ? d12 : d13;
  HEAPF32[i5 >> 2] = d13;
  d12 = +HEAPF32[i3 + 20 >> 2];
  d14 = +HEAPF32[i2 + 20 >> 2];
  d12 = d12 > d14 ? d12 : d14;
  HEAPF32[i4 + 20 >> 2] = d12;
  d14 = +HEAPF32[i3 + 8 >> 2];
  d15 = +HEAPF32[i2 + 8 >> 2];
  d15 = d14 < d15 ? d14 : d15;
  HEAPF32[i4 + 8 >> 2] = d15;
  d14 = +HEAPF32[i3 + 24 >> 2];
  d16 = +HEAPF32[i2 + 24 >> 2];
  d14 = d14 > d16 ? d14 : d16;
  HEAPF32[i4 + 24 >> 2] = d14;
  i4 = HEAP32[i4 + 32 >> 2] | 0;
  if ((i4 | 0) == 0) {
   i2 = 20;
   break;
  }
 }
 if ((i2 | 0) == 20) {
  STACKTOP = i1;
  return;
 }
}
function __ZN14btQuantizedBvh17calcSplittingAxisEii(i5, i3, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0;
 i1 = STACKTOP;
 i10 = i2 - i3 | 0;
 i9 = (i3 | 0) < (i2 | 0);
 if (i9) {
  i12 = (HEAP8[i5 + 60 | 0] | 0) == 0;
  i13 = i5 + 76 | 0;
  i14 = i5 + 116 | 0;
  i21 = i5 + 36 | 0;
  i23 = i5 + 40 | 0;
  i25 = i5 + 44 | 0;
  i22 = i5 + 4 | 0;
  i24 = i5 + 8 | 0;
  i11 = i5 + 12 | 0;
  d6 = 0.0;
  d7 = 0.0;
  d8 = 0.0;
  i15 = i3;
  do {
   if (i12) {
    i26 = HEAP32[i13 >> 2] | 0;
    i27 = HEAP32[i13 >> 2] | 0;
    d17 = +HEAPF32[i27 + (i15 << 6) >> 2];
    d16 = +HEAPF32[i26 + (i15 << 6) + 16 >> 2];
    d19 = +HEAPF32[i27 + (i15 << 6) + 4 >> 2];
    d18 = +HEAPF32[i26 + (i15 << 6) + 20 >> 2];
    d4 = +HEAPF32[i27 + (i15 << 6) + 8 >> 2];
    d20 = +HEAPF32[i26 + (i15 << 6) + 24 >> 2];
   } else {
    i27 = HEAP32[i14 >> 2] | 0;
    i26 = HEAP32[i14 >> 2] | 0;
    d17 = +(HEAPU16[i26 + (i15 << 4) >> 1] | 0) / +HEAPF32[i21 >> 2] + +HEAPF32[i22 >> 2];
    d16 = +(HEAPU16[i27 + (i15 << 4) + 6 >> 1] | 0) / +HEAPF32[i21 >> 2] + +HEAPF32[i22 >> 2];
    d19 = +(HEAPU16[i26 + (i15 << 4) + 2 >> 1] | 0) / +HEAPF32[i23 >> 2] + +HEAPF32[i24 >> 2];
    d18 = +(HEAPU16[i27 + (i15 << 4) + 8 >> 1] | 0) / +HEAPF32[i23 >> 2] + +HEAPF32[i24 >> 2];
    d4 = +(HEAPU16[i26 + (i15 << 4) + 4 >> 1] | 0) / +HEAPF32[i25 >> 2] + +HEAPF32[i11 >> 2];
    d20 = +(HEAPU16[i27 + (i15 << 4) + 10 >> 1] | 0) / +HEAPF32[i25 >> 2] + +HEAPF32[i11 >> 2];
   }
   d6 = d6 + (d16 + d17) * .5;
   d7 = d7 + (d18 + d19) * .5;
   d8 = d8 + (d20 + d4) * .5;
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) != (i2 | 0));
  d4 = +(i10 | 0);
  d20 = 1.0 / d4;
  d6 = d6 * d20;
  d7 = d7 * d20;
  d8 = d8 * d20;
  if (i9) {
   i12 = i5 + 76 | 0;
   i13 = i5 + 116 | 0;
   i14 = i5 + 36 | 0;
   i21 = i5 + 40 | 0;
   i10 = i5 + 44 | 0;
   i9 = i5 + 4 | 0;
   i15 = i5 + 8 | 0;
   i11 = i5 + 12 | 0;
   if ((HEAP8[i5 + 60 | 0] | 0) == 0) {
    d16 = 0.0;
    d17 = 0.0;
    d18 = 0.0;
    do {
     i26 = HEAP32[i12 >> 2] | 0;
     i27 = HEAP32[i12 >> 2] | 0;
     d28 = (+HEAPF32[i26 + (i3 << 6) + 16 >> 2] + +HEAPF32[i27 + (i3 << 6) >> 2]) * .5 - d6;
     d19 = (+HEAPF32[i26 + (i3 << 6) + 20 >> 2] + +HEAPF32[i27 + (i3 << 6) + 4 >> 2]) * .5 - d7;
     d20 = (+HEAPF32[i26 + (i3 << 6) + 24 >> 2] + +HEAPF32[i27 + (i3 << 6) + 8 >> 2]) * .5 - d8;
     d16 = d16 + d28 * d28;
     d17 = d17 + d19 * d19;
     d18 = d18 + d20 * d20;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i2 | 0));
   } else {
    d16 = 0.0;
    d17 = 0.0;
    d18 = 0.0;
    do {
     i26 = HEAP32[i13 >> 2] | 0;
     i27 = HEAP32[i13 >> 2] | 0;
     d19 = (+(HEAPU16[i26 + (i3 << 4) + 6 >> 1] | 0) / +HEAPF32[i14 >> 2] + +HEAPF32[i9 >> 2] + (+(HEAPU16[i27 + (i3 << 4) >> 1] | 0) / +HEAPF32[i14 >> 2] + +HEAPF32[i9 >> 2])) * .5 - d6;
     d20 = (+(HEAPU16[i26 + (i3 << 4) + 8 >> 1] | 0) / +HEAPF32[i21 >> 2] + +HEAPF32[i15 >> 2] + (+(HEAPU16[i27 + (i3 << 4) + 2 >> 1] | 0) / +HEAPF32[i21 >> 2] + +HEAPF32[i15 >> 2])) * .5 - d7;
     d28 = (+(HEAPU16[i26 + (i3 << 4) + 10 >> 1] | 0) / +HEAPF32[i10 >> 2] + +HEAPF32[i11 >> 2] + (+(HEAPU16[i27 + (i3 << 4) + 4 >> 1] | 0) / +HEAPF32[i10 >> 2] + +HEAPF32[i11 >> 2])) * .5 - d8;
     d16 = d16 + d19 * d19;
     d17 = d17 + d20 * d20;
     d18 = d18 + d28 * d28;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i2 | 0));
   }
  } else {
   d18 = 0.0;
   d17 = 0.0;
   d16 = 0.0;
  }
 } else {
  d18 = 0.0;
  d17 = 0.0;
  d16 = 0.0;
  d4 = +(i10 | 0);
 }
 d7 = 1.0 / (d4 + -1.0);
 d4 = d16 * d7;
 d6 = d17 * d7;
 d7 = d18 * d7;
 if (d4 < d6) {
  i27 = d6 < d7 ? 2 : 1;
  STACKTOP = i1;
  return i27 | 0;
 } else {
  i27 = d4 < d7 ? 2 : 0;
  STACKTOP = i1;
  return i27 | 0;
 }
 return 0;
}
function __ZNK20btConvexHullInternal11Rational1287compareERKS0_(i14, i13) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i9 = i1 + 112 | 0;
 i8 = i1 + 96 | 0;
 i4 = i1 + 80 | 0;
 i6 = i1 + 64 | 0;
 i3 = i1 + 48 | 0;
 i5 = i1 + 32 | 0;
 i7 = i1 + 16 | 0;
 i11 = i1;
 i2 = i14 + 32 | 0;
 i12 = HEAP32[i2 >> 2] | 0;
 i10 = HEAP32[i13 + 32 >> 2] | 0;
 if ((i12 | 0) != (i10 | 0)) {
  i14 = i12 - i10 | 0;
  STACKTOP = i1;
  return i14 | 0;
 }
 if ((i12 | 0) == 0) {
  i14 = 0;
  STACKTOP = i1;
  return i14 | 0;
 }
 if ((HEAP8[i14 + 36 | 0] | 0) != 0) {
  i14 = ___muldi3(HEAP32[i14 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, i12 | 0, ((i12 | 0) < 0) << 31 >> 31 | 0) | 0;
  i14 = 0 - (__ZNK20btConvexHullInternal11Rational1287compareEx(i13, i14, tempRet0) | 0) | 0;
  STACKTOP = i1;
  return i14 | 0;
 }
 HEAP32[i7 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 i10 = i13 + 16 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 __ZN20btConvexHullInternal4DMulINS_6Int128EyE3mulES1_S1_RS1_S3_(i8, i9, i4, i6);
 i10 = i14 + 16 | 0;
 HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 __ZN20btConvexHullInternal4DMulINS_6Int128EyE3mulES1_S1_RS1_S3_(i8, i9, i3, i5);
 i10 = i6 + 8 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i10 + 4 >> 2] | 0;
 i9 = i5 + 8 | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i9 + 4 >> 2] | 0;
 if (!(i10 >>> 0 < i9 >>> 0 | (i10 | 0) == (i9 | 0) & i8 >>> 0 < i7 >>> 0)) {
  if (!(i10 >>> 0 > i9 >>> 0 | (i10 | 0) == (i9 | 0) & i8 >>> 0 > i7 >>> 0)) {
   i7 = i6;
   i6 = HEAP32[i7 >> 2] | 0;
   i7 = HEAP32[i7 + 4 >> 2] | 0;
   i8 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[i5 + 4 >> 2] | 0;
   if (!(i7 >>> 0 < i5 >>> 0 | (i7 | 0) == (i5 | 0) & i6 >>> 0 < i8 >>> 0)) {
    i5 = i7 >>> 0 > i5 >>> 0 | (i7 | 0) == (i5 | 0) & i6 >>> 0 > i8 >>> 0;
    if (i5) {
     i3 = i5 & 1;
    } else {
     i8 = i4 + 8 | 0;
     i5 = HEAP32[i8 >> 2] | 0;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i7 = i3 + 8 | 0;
     i6 = HEAP32[i7 >> 2] | 0;
     i7 = HEAP32[i7 + 4 >> 2] | 0;
     if (!(i8 >>> 0 < i7 >>> 0 | (i8 | 0) == (i7 | 0) & i5 >>> 0 < i6 >>> 0)) {
      if (!(i8 >>> 0 > i7 >>> 0 | (i8 | 0) == (i7 | 0) & i5 >>> 0 > i6 >>> 0)) {
       i5 = HEAP32[i4 >> 2] | 0;
       i4 = HEAP32[i4 + 4 >> 2] | 0;
       i6 = i3;
       i3 = HEAP32[i6 >> 2] | 0;
       i6 = HEAP32[i6 + 4 >> 2] | 0;
       if (i4 >>> 0 < i6 >>> 0 | (i4 | 0) == (i6 | 0) & i5 >>> 0 < i3 >>> 0) {
        i3 = -1;
       } else {
        i3 = (i4 >>> 0 > i6 >>> 0 | (i4 | 0) == (i6 | 0) & i5 >>> 0 > i3 >>> 0) & 1;
       }
      } else {
       i3 = 1;
      }
     } else {
      i3 = -1;
     }
     i14 = Math_imul(HEAP32[i2 >> 2] | 0, i3) | 0;
     STACKTOP = i1;
     return i14 | 0;
    }
   } else {
    i3 = -1;
   }
  } else {
   i3 = 1;
  }
 } else {
  i3 = -1;
 }
 i14 = Math_imul(HEAP32[i2 >> 2] | 0, i3) | 0;
 STACKTOP = i1;
 return i14 | 0;
}
function __ZNK14btQuantizedBvh26reportAabbOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_(i6, i3, i5, i16) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 6 | 0;
 i4 = i1;
 if ((HEAP8[i6 + 60 | 0] | 0) == 0) {
  __ZNK14btQuantizedBvh17walkStacklessTreeEP21btNodeOverlapCallbackRK9btVector3S4_(i6, i3, i5, i16);
  STACKTOP = i1;
  return;
 }
 d18 = +HEAPF32[i5 >> 2];
 d9 = +HEAPF32[i5 + 4 >> 2];
 d8 = +HEAPF32[i5 + 8 >> 2];
 i17 = i6 + 4 | 0;
 d20 = +HEAPF32[i17 >> 2];
 d24 = d18 < d20 ? d20 : d18;
 i15 = i6 + 8 | 0;
 d18 = +HEAPF32[i15 >> 2];
 d21 = d9 < d18 ? d18 : d9;
 i14 = i6 + 12 | 0;
 d19 = +HEAPF32[i14 >> 2];
 d23 = d8 < d19 ? d19 : d8;
 i13 = i6 + 20 | 0;
 d26 = +HEAPF32[i13 >> 2];
 i12 = i6 + 24 | 0;
 d25 = +HEAPF32[i12 >> 2];
 i11 = i6 + 28 | 0;
 d22 = +HEAPF32[i11 >> 2];
 i10 = i6 + 36 | 0;
 d9 = +HEAPF32[i6 + 40 >> 2];
 d8 = +HEAPF32[i6 + 44 >> 2];
 HEAP16[i2 >> 1] = ~~(((d26 < d24 ? d26 : d24) - d20) * +HEAPF32[i10 >> 2]) & 65535 & 65534;
 i5 = i2 + 2 | 0;
 HEAP16[i5 >> 1] = ~~(((d25 < d21 ? d25 : d21) - d18) * d9) & 65535 & 65534;
 i7 = i2 + 4 | 0;
 HEAP16[i7 >> 1] = ~~(((d22 < d23 ? d22 : d23) - d19) * d8) & 65535 & 65534;
 d19 = +HEAPF32[i16 >> 2];
 d21 = +HEAPF32[i16 + 4 >> 2];
 d23 = +HEAPF32[i16 + 8 >> 2];
 d18 = +HEAPF32[i17 >> 2];
 d19 = d19 < d18 ? d18 : d19;
 d20 = +HEAPF32[i15 >> 2];
 d22 = d21 < d20 ? d20 : d21;
 d21 = +HEAPF32[i14 >> 2];
 d23 = d23 < d21 ? d21 : d23;
 d25 = +HEAPF32[i13 >> 2];
 d26 = +HEAPF32[i12 >> 2];
 d24 = +HEAPF32[i11 >> 2];
 i13 = (~~(((d25 < d19 ? d25 : d19) - d18) * +HEAPF32[i10 >> 2] + 1.0) & 65535 | 1) & 65535;
 HEAP16[i4 >> 1] = i13;
 i14 = (~~(((d26 < d22 ? d26 : d22) - d20) * d9 + 1.0) & 65535 | 1) & 65535;
 i10 = i4 + 2 | 0;
 HEAP16[i10 >> 1] = i14;
 i16 = (~~(((d24 < d23 ? d24 : d23) - d21) * d8 + 1.0) & 65535 | 1) & 65535;
 i11 = i4 + 4 | 0;
 HEAP16[i11 >> 1] = i16;
 i12 = HEAP32[i6 + 144 >> 2] | 0;
 if ((i12 | 0) == 2) {
  __ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_(i6, HEAP32[i6 + 136 >> 2] | 0, i3, i2, i4);
  STACKTOP = i1;
  return;
 } else if ((i12 | 0) == 0) {
  i12 = HEAP32[i6 + 56 >> 2] | 0;
  L9 : do {
   if ((i12 | 0) > 0) {
    i17 = i14;
    i14 = 0;
    i15 = HEAP32[i6 + 136 >> 2] | 0;
    i6 = 1;
    while (1) {
     i16 = (HEAPU16[i2 >> 1] | 0) <= (HEAPU16[i15 + 6 >> 1] | 0) & (i13 & 65535) >= (HEAPU16[i15 >> 1] | 0) & (HEAPU16[i7 >> 1] | 0) <= (HEAPU16[i15 + 10 >> 1] | 0) & (i16 & 65535) >= (HEAPU16[i15 + 4 >> 1] | 0) & (HEAPU16[i5 >> 1] | 0) <= (HEAPU16[i15 + 8 >> 1] | 0) & (i17 & 65535) >= (HEAPU16[i15 + 2 >> 1] | 0);
     i17 = i15 + 12 | 0;
     i27 = HEAP32[i17 >> 2] | 0;
     i13 = (i27 | 0) > -1;
     if (i13 & i16) {
      FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i27 >> 21, i27 & 2097151);
     }
     if (i16 | i13) {
      i14 = i14 + 1 | 0;
      i15 = i15 + 16 | 0;
     } else {
      i27 = HEAP32[i17 >> 2] | 0;
      i14 = i14 - i27 | 0;
      i15 = i15 + (0 - i27 << 4) | 0;
     }
     if ((i14 | 0) >= (i12 | 0)) {
      break L9;
     }
     i13 = HEAP16[i4 >> 1] | 0;
     i16 = HEAP16[i11 >> 1] | 0;
     i17 = HEAP16[i10 >> 1] | 0;
     i6 = i6 + 1 | 0;
    }
   } else {
    i6 = 0;
   }
  } while (0);
  if ((HEAP32[114066] | 0) >= (i6 | 0)) {
   STACKTOP = i1;
   return;
  }
  HEAP32[114066] = i6;
  STACKTOP = i1;
  return;
 } else if ((i12 | 0) == 1) {
  __ZNK14btQuantizedBvh39walkStacklessQuantizedTreeCacheFriendlyEP21btNodeOverlapCallbackPtS2_(i6, i3, i2, i4);
  STACKTOP = i1;
  return;
 } else {
  STACKTOP = i1;
  return;
 }
}
function __ZN17DebugDrawcallback15processTriangleEP9btVector3ii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, i24 = 0, d25 = 0.0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4 + 80 | 0;
 i7 = i4 + 64 | 0;
 i6 = i4 + 48 | 0;
 i9 = i4 + 32 | 0;
 i8 = i4 + 16 | 0;
 i3 = i4;
 i32 = i1 + 28 | 0;
 d37 = +HEAPF32[i32 >> 2];
 d19 = +HEAPF32[i2 >> 2];
 i31 = i1 + 32 | 0;
 d36 = +HEAPF32[i31 >> 2];
 d18 = +HEAPF32[i2 + 4 >> 2];
 i30 = i1 + 36 | 0;
 d20 = +HEAPF32[i30 >> 2];
 d22 = +HEAPF32[i2 + 8 >> 2];
 i33 = i1 + 76 | 0;
 d38 = +HEAPF32[i33 >> 2];
 i28 = i1 + 44 | 0;
 d34 = +HEAPF32[i28 >> 2];
 i27 = i1 + 48 | 0;
 d21 = +HEAPF32[i27 >> 2];
 i26 = i1 + 52 | 0;
 d15 = +HEAPF32[i26 >> 2];
 i29 = i1 + 80 | 0;
 d35 = +HEAPF32[i29 >> 2];
 i24 = i1 + 60 | 0;
 d12 = +HEAPF32[i24 >> 2];
 i23 = i1 + 64 | 0;
 d13 = +HEAPF32[i23 >> 2];
 d14 = +HEAPF32[i1 + 68 >> 2];
 d25 = +HEAPF32[i1 + 84 >> 2];
 HEAPF32[i5 >> 2] = d38 + (d37 * d19 + d36 * d18 + d20 * d22);
 i16 = i5 + 4 | 0;
 HEAPF32[i16 >> 2] = d35 + (d19 * d34 + d18 * d21 + d22 * d15);
 i17 = i5 + 8 | 0;
 HEAPF32[i17 >> 2] = d25 + (d19 * d12 + d18 * d13 + d22 * d14);
 HEAPF32[i5 + 12 >> 2] = 0.0;
 d22 = +HEAPF32[i2 + 16 >> 2];
 d18 = +HEAPF32[i2 + 20 >> 2];
 d19 = +HEAPF32[i2 + 24 >> 2];
 d20 = d38 + (d37 * d22 + d36 * d18 + d20 * d19);
 d15 = d35 + (d22 * d34 + d18 * d21 + d19 * d15);
 d19 = d25 + (d22 * d12 + d18 * d13 + d19 * d14);
 HEAPF32[i7 >> 2] = d20;
 i11 = i7 + 4 | 0;
 HEAPF32[i11 >> 2] = d15;
 i10 = i7 + 8 | 0;
 HEAPF32[i10 >> 2] = d19;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 d13 = +HEAPF32[i2 + 32 >> 2];
 d18 = +HEAPF32[i2 + 36 >> 2];
 d12 = +HEAPF32[i2 + 40 >> 2];
 d22 = +HEAPF32[i33 >> 2] + (+HEAPF32[i32 >> 2] * d13 + +HEAPF32[i31 >> 2] * d18 + +HEAPF32[i30 >> 2] * d12);
 d21 = +HEAPF32[i29 >> 2] + (d13 * +HEAPF32[i28 >> 2] + d18 * +HEAPF32[i27 >> 2] + d12 * +HEAPF32[i26 >> 2]);
 d14 = d25 + (d13 * +HEAPF32[i24 >> 2] + d18 * +HEAPF32[i23 >> 2] + d12 * d14);
 HEAPF32[i6 >> 2] = d22;
 HEAPF32[i6 + 4 >> 2] = d21;
 HEAPF32[i6 + 8 >> 2] = d14;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 d12 = +HEAPF32[i5 >> 2];
 d18 = +HEAPF32[i16 >> 2];
 d13 = +HEAPF32[i17 >> 2];
 HEAPF32[i9 >> 2] = (d12 + d20 + d22) * .3333333432674408;
 i17 = i9 + 4 | 0;
 HEAPF32[i17 >> 2] = (d18 + d15 + d21) * .3333333432674408;
 i16 = i9 + 8 | 0;
 HEAPF32[i16 >> 2] = (d13 + d19 + d14) * .3333333432674408;
 HEAPF32[i9 + 12 >> 2] = 0.0;
 d19 = +HEAPF32[i7 >> 2] - d12;
 d15 = +HEAPF32[i11 >> 2] - d18;
 d20 = +HEAPF32[i10 >> 2] - d13;
 d12 = d22 - d12;
 d18 = d21 - d18;
 d13 = d14 - d13;
 d14 = d15 * d13 - d20 * d18;
 d13 = d20 * d12 - d19 * d13;
 d12 = d19 * d18 - d15 * d12;
 d15 = 1.0 / +Math_sqrt(+(d12 * d12 + (d14 * d14 + d13 * d13)));
 HEAPF32[i8 >> 2] = 1.0;
 HEAPF32[i8 + 4 >> 2] = 1.0;
 HEAPF32[i8 + 8 >> 2] = 0.0;
 HEAPF32[i8 + 12 >> 2] = 0.0;
 i2 = i1 + 8 | 0;
 i10 = HEAP32[i2 >> 2] | 0;
 i11 = HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0;
 d13 = d15 * d13 + +HEAPF32[i17 >> 2];
 d12 = d15 * d12 + +HEAPF32[i16 >> 2];
 HEAPF32[i3 >> 2] = d15 * d14 + +HEAPF32[i9 >> 2];
 HEAPF32[i3 + 4 >> 2] = d13;
 HEAPF32[i3 + 8 >> 2] = d12;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[i11 & 63](i10, i9, i3, i8);
 i8 = HEAP32[i2 >> 2] | 0;
 i3 = i1 + 12 | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 63](i8, i5, i7, i3);
 i1 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 63](i1, i7, i6, i3);
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i6, i5, i3);
 STACKTOP = i4;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i2, i4, i5, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i3 + 16 | 0;
 i7 = i3;
 i6 = i2 + 12 | 0;
 if ((HEAP32[i6 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i9 = (HEAP8[i2 + 16 | 0] | 0) != 0;
 i14 = HEAP32[(i9 ? i5 : i4) + 192 >> 2] | 0;
 i11 = HEAP32[(i9 ? i4 : i5) + 192 >> 2] | 0;
 HEAPF32[i8 >> 2] = 0.0;
 HEAPF32[i8 + 4 >> 2] = 0.0;
 HEAPF32[i8 + 8 >> 2] = 0.0;
 HEAPF32[i8 + 12 >> 2] = 1.0;
 __ZN31btConvexPlaneCollisionAlgorithm20collideSingleContactERK12btQuaternionP17btCollisionObjectS4_RK16btDispatcherInfoP16btManifoldResult(i2, i8, i4, i5, 0, i1);
 i10 = i1 + 4 | 0;
 if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 1116 >> 2] | 0) < (HEAP32[i2 + 24 >> 2] | 0)) {
  i9 = i11 + 48 | 0;
  i8 = i11 + 56 | 0;
  d13 = +HEAPF32[i8 >> 2];
  if (+Math_abs(+d13) > .7071067690849304) {
   d22 = +HEAPF32[i11 + 52 >> 2];
   d15 = 1.0 / +Math_sqrt(+(d13 * d13 + d22 * d22));
   d12 = 0.0;
   d13 = -(d13 * d15);
   d15 = d22 * d15;
  } else {
   d15 = +HEAPF32[i9 >> 2];
   d12 = +HEAPF32[i11 + 52 >> 2];
   d13 = 1.0 / +Math_sqrt(+(d15 * d15 + d12 * d12));
   d12 = -(d12 * d13);
   d13 = d15 * d13;
   d15 = 0.0;
  }
  d16 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 7](i14);
  d16 = +HEAPF32[113934] / d16;
  d22 = +Math_sqrt(+(d15 * d15 + (d13 * d13 + d12 * d12)));
  d23 = d16 > .39269909262657166 ? .19634954631328583 : d16 * .5;
  d16 = +Math_sin(+d23) / d22;
  d12 = d12 * d16;
  d13 = d13 * d16;
  d16 = d15 * d16;
  d15 = +Math_cos(+d23);
  i14 = i2 + 20 | 0;
  i20 = HEAP32[i14 >> 2] | 0;
  if ((i20 | 0) > 0) {
   i18 = i11 + 52 | 0;
   i11 = i7 + 4 | 0;
   i19 = i7 + 8 | 0;
   i17 = i7 + 12 | 0;
   i21 = 0;
   do {
    d27 = +HEAPF32[i9 >> 2];
    d25 = +HEAPF32[i18 >> 2];
    d31 = +HEAPF32[i8 >> 2];
    d29 = +(i21 | 0) * (6.2831854820251465 / +(i20 | 0)) * .5;
    d22 = +Math_sin(+d29) / +Math_sqrt(+(d27 * d27 + d25 * d25 + d31 * d31));
    d27 = d27 * d22;
    d25 = d25 * d22;
    d22 = d31 * d22;
    d29 = +Math_cos(+d29);
    d31 = -d27;
    d30 = -d25;
    d28 = -d22;
    d26 = d16 * d30 + (d12 * d29 + d15 * d31) - d13 * d28;
    d24 = d12 * d28 + (d13 * d29 + d15 * d30) - d16 * d31;
    d23 = d13 * d31 + (d16 * d29 + d15 * d28) - d12 * d30;
    d28 = d15 * d29 - d12 * d31 - d13 * d30 - d16 * d28;
    HEAPF32[i7 >> 2] = d22 * d24 + (d27 * d28 + d29 * d26) - d25 * d23;
    HEAPF32[i11 >> 2] = d27 * d23 + (d29 * d24 + d25 * d28) - d22 * d26;
    HEAPF32[i19 >> 2] = d25 * d26 + (d22 * d28 + d29 * d23) - d27 * d24;
    HEAPF32[i17 >> 2] = d29 * d28 - d27 * d26 - d25 * d24 - d22 * d23;
    __ZN31btConvexPlaneCollisionAlgorithm20collideSingleContactERK12btQuaternionP17btCollisionObjectS4_RK16btDispatcherInfoP16btManifoldResult(i2, i7, i4, i5, 0, i1);
    i21 = i21 + 1 | 0;
    i20 = HEAP32[i14 >> 2] | 0;
   } while ((i21 | 0) < (i20 | 0));
  }
 }
 if ((HEAP8[i2 + 8 | 0] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 1116 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[i2 + 1116 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i2 + 1108 >> 2] | 0) == (HEAP32[i1 + 136 >> 2] | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i2, i1 + 8 | 0, i1 + 72 | 0);
  STACKTOP = i3;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i2, i1 + 72 | 0, i1 + 8 | 0);
  STACKTOP = i3;
  return;
 }
}
function __ZN9btHashMapI9btHashPtrP16btCollisionShapeE6insertERKS0_RKS2_(i1, i6, i9) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = STACKTOP;
 i8 = HEAP32[i6 >> 2] | 0;
 i4 = i8 + ~(i8 << 15) | 0;
 i4 = (i4 >> 10 ^ i4) * 9 | 0;
 i4 = i4 >> 6 ^ i4;
 i4 = i4 + ~(i4 << 11) | 0;
 i5 = i1 + 48 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = (i4 >> 16 ^ i4) & i3 + -1;
 L1 : do {
  if (i4 >>> 0 < (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i12 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i4 << 2) >> 2] | 0, !((i12 | 0) == -1)) : 0) {
   i10 = HEAP32[i1 + 72 >> 2] | 0;
   i11 = i1 + 32 | 0;
   while (1) {
    if ((i8 | 0) == (HEAP32[i10 + (i12 << 3) >> 2] | 0)) {
     break;
    }
    i12 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i12 << 2) >> 2] | 0;
    if ((i12 | 0) == -1) {
     break L1;
    }
   }
   if (!((i12 | 0) == -1)) {
    HEAP32[(HEAP32[i1 + 52 >> 2] | 0) + (i12 << 2) >> 2] = HEAP32[i9 >> 2];
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 i10 = i1 + 44 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 if ((i8 | 0) == (i3 | 0)) {
  i13 = (i3 | 0) == 0 ? 1 : i3 << 1;
  if ((i3 | 0) < (i13 | 0)) {
   if ((i13 | 0) == 0) {
    i12 = 0;
    i14 = i3;
   } else {
    i12 = __Z22btAlignedAllocInternalji(i13 << 2, 16) | 0;
    i14 = HEAP32[i10 >> 2] | 0;
   }
   i11 = i1 + 52 | 0;
   if ((i14 | 0) > 0) {
    i16 = 0;
    do {
     i15 = i12 + (i16 << 2) | 0;
     if ((i15 | 0) != 0) {
      HEAP32[i15 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + (i16 << 2) >> 2];
     }
     i16 = i16 + 1 | 0;
    } while ((i16 | 0) != (i14 | 0));
   }
   i16 = HEAP32[i11 >> 2] | 0;
   i15 = i1 + 56 | 0;
   if ((i16 | 0) != 0) {
    if ((HEAP8[i15] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i16);
     i14 = HEAP32[i10 >> 2] | 0;
    }
    HEAP32[i11 >> 2] = 0;
   }
   HEAP8[i15] = 1;
   HEAP32[i11 >> 2] = i12;
   HEAP32[i5 >> 2] = i13;
  } else {
   i14 = i3;
  }
 } else {
  i14 = i8;
 }
 i11 = (HEAP32[i1 + 52 >> 2] | 0) + (i14 << 2) | 0;
 if ((i11 | 0) != 0) {
  HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 }
 HEAP32[i10 >> 2] = i14 + 1;
 i9 = i1 + 64 | 0;
 i15 = HEAP32[i9 >> 2] | 0;
 i11 = i1 + 68 | 0;
 if ((i15 | 0) == (HEAP32[i11 >> 2] | 0) ? (i7 = (i15 | 0) == 0 ? 1 : i15 << 1, (i15 | 0) < (i7 | 0)) : 0) {
  if ((i7 | 0) == 0) {
   i10 = 0;
  } else {
   i10 = __Z22btAlignedAllocInternalji(i7 << 3, 16) | 0;
   i15 = HEAP32[i9 >> 2] | 0;
  }
  i12 = i1 + 72 | 0;
  if ((i15 | 0) > 0) {
   i14 = 0;
   do {
    i13 = i10 + (i14 << 3) | 0;
    if ((i13 | 0) != 0) {
     i18 = (HEAP32[i12 >> 2] | 0) + (i14 << 3) | 0;
     i17 = HEAP32[i18 + 4 >> 2] | 0;
     i16 = i13;
     HEAP32[i16 >> 2] = HEAP32[i18 >> 2];
     HEAP32[i16 + 4 >> 2] = i17;
    }
    i14 = i14 + 1 | 0;
   } while ((i14 | 0) != (i15 | 0));
  }
  i13 = HEAP32[i12 >> 2] | 0;
  i14 = i1 + 76 | 0;
  if ((i13 | 0) != 0) {
   if ((HEAP8[i14] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i13);
   }
   HEAP32[i12 >> 2] = 0;
  }
  HEAP8[i14] = 1;
  HEAP32[i12 >> 2] = i10;
  HEAP32[i11 >> 2] = i7;
  i15 = HEAP32[i9 >> 2] | 0;
 }
 i7 = (HEAP32[i1 + 72 >> 2] | 0) + (i15 << 3) | 0;
 if ((i7 | 0) != 0) {
  i17 = i6;
  i18 = HEAP32[i17 + 4 >> 2] | 0;
  i15 = i7;
  HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
  HEAP32[i15 + 4 >> 2] = i18;
  i15 = HEAP32[i9 >> 2] | 0;
 }
 HEAP32[i9 >> 2] = i15 + 1;
 if ((i3 | 0) < (HEAP32[i5 >> 2] | 0)) {
  __ZN9btHashMapI9btHashPtrP16btCollisionShapeE10growTablesERKS0_(i1, 0);
  i4 = HEAP32[i6 >> 2] | 0;
  i4 = i4 + ~(i4 << 15) | 0;
  i4 = (i4 >> 10 ^ i4) * 9 | 0;
  i4 = i4 >> 6 ^ i4;
  i4 = i4 + ~(i4 << 11) | 0;
  i4 = (i4 >> 16 ^ i4) & (HEAP32[i5 >> 2] | 0) + -1;
 }
 i18 = (HEAP32[i1 + 12 >> 2] | 0) + (i4 << 2) | 0;
 HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + (i8 << 2) >> 2] = HEAP32[i18 >> 2];
 HEAP32[i18 >> 2] = i8;
 STACKTOP = i2;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallback28internalProcessTriangleIndexEPS2_ii(i3, i6, i4, i5) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0;
 i1 = STACKTOP;
 d14 = +HEAPF32[i6 >> 2];
 d15 = d14 < 999999984306749400.0 ? d14 : 999999984306749400.0;
 d16 = +HEAPF32[i6 + 4 >> 2];
 d13 = d16 < 999999984306749400.0 ? d16 : 999999984306749400.0;
 d17 = +HEAPF32[i6 + 8 >> 2];
 d11 = d17 < 999999984306749400.0 ? d17 : 999999984306749400.0;
 d14 = d14 > -999999984306749400.0 ? d14 : -999999984306749400.0;
 d16 = d16 > -999999984306749400.0 ? d16 : -999999984306749400.0;
 d17 = d17 > -999999984306749400.0 ? d17 : -999999984306749400.0;
 d23 = +HEAPF32[i6 + 16 >> 2];
 d15 = d23 < d15 ? d23 : d15;
 d22 = +HEAPF32[i6 + 20 >> 2];
 d13 = d22 < d13 ? d22 : d13;
 d20 = +HEAPF32[i6 + 24 >> 2];
 d11 = d20 < d11 ? d20 : d11;
 d14 = d14 < d23 ? d23 : d14;
 d16 = d16 < d22 ? d22 : d16;
 d17 = d17 < d20 ? d20 : d17;
 d22 = +HEAPF32[i6 + 32 >> 2];
 d15 = d22 < d15 ? d22 : d15;
 d20 = +HEAPF32[i6 + 36 >> 2];
 d13 = d20 < d13 ? d20 : d13;
 d23 = +HEAPF32[i6 + 40 >> 2];
 d11 = d23 < d11 ? d23 : d11;
 d14 = d14 < d22 ? d22 : d14;
 d16 = d16 < d20 ? d20 : d16;
 d17 = d17 < d23 ? d23 : d17;
 if (d14 - d15 < .0020000000949949026) {
  d14 = d14 + .0010000000474974513;
  d15 = d15 + -.0010000000474974513;
 }
 if (d16 - d13 < .0020000000949949026) {
  d16 = d16 + .0010000000474974513;
  d13 = d13 + -.0010000000474974513;
 }
 if (d17 - d11 < .0020000000949949026) {
  d17 = d17 + .0010000000474974513;
  d11 = d11 + -.0010000000474974513;
 }
 i6 = HEAP32[i3 + 8 >> 2] | 0;
 d28 = +HEAPF32[i6 + 4 >> 2];
 d26 = +HEAPF32[i6 + 8 >> 2];
 d22 = +HEAPF32[i6 + 12 >> 2];
 d27 = +HEAPF32[i6 + 36 >> 2];
 d20 = +HEAPF32[i6 + 40 >> 2];
 d23 = +HEAPF32[i6 + 44 >> 2];
 i6 = ~~((d15 - d28) * d27) & 65535 & 65534;
 i7 = ~~((d13 - d26) * d20) & 65535 & 65534;
 i8 = ~~((d11 - d22) * d23) & 65535 & 65534;
 i9 = (~~((d14 - d28) * d27 + 1.0) & 65535 | 1) & 65535;
 i10 = (~~((d16 - d26) * d20 + 1.0) & 65535 | 1) & 65535;
 i12 = (~~((d17 - d22) * d23 + 1.0) & 65535 | 1) & 65535;
 i4 = i4 << 21 | i5;
 i5 = HEAP32[i3 + 4 >> 2] | 0;
 i3 = i5 + 4 | 0;
 i25 = HEAP32[i3 >> 2] | 0;
 i18 = i5 + 8 | 0;
 if ((i25 | 0) == (HEAP32[i18 >> 2] | 0) ? (i2 = (i25 | 0) == 0 ? 1 : i25 << 1, (i25 | 0) < (i2 | 0)) : 0) {
  if ((i2 | 0) == 0) {
   i19 = 0;
  } else {
   i19 = __Z22btAlignedAllocInternalji(i2 << 4, 16) | 0;
   i25 = HEAP32[i3 >> 2] | 0;
  }
  i21 = i5 + 12 | 0;
  if ((i25 | 0) > 0) {
   i24 = 0;
   do {
    i29 = i19 + (i24 << 4) | 0;
    i30 = (HEAP32[i21 >> 2] | 0) + (i24 << 4) | 0;
    HEAP32[i29 + 0 >> 2] = HEAP32[i30 + 0 >> 2];
    HEAP32[i29 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
    HEAP32[i29 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
    HEAP32[i29 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
    i24 = i24 + 1 | 0;
   } while ((i24 | 0) != (i25 | 0));
  }
  i24 = HEAP32[i21 >> 2] | 0;
  i25 = i5 + 16 | 0;
  if ((i24 | 0) != 0) {
   if ((HEAP8[i25] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i24);
   }
   HEAP32[i21 >> 2] = 0;
  }
  HEAP8[i25] = 1;
  HEAP32[i21 >> 2] = i19;
  HEAP32[i18 >> 2] = i2;
  i25 = HEAP32[i3 >> 2] | 0;
 }
 i30 = HEAP32[i5 + 12 >> 2] | 0;
 HEAP16[i30 + (i25 << 4) >> 1] = i6;
 HEAP16[i30 + (i25 << 4) + 2 >> 1] = i7;
 HEAP16[i30 + (i25 << 4) + 4 >> 1] = i8;
 HEAP16[i30 + (i25 << 4) + 6 >> 1] = i9;
 HEAP16[i30 + (i25 << 4) + 8 >> 1] = i10;
 HEAP16[i30 + (i25 << 4) + 10 >> 1] = i12;
 HEAP32[i30 + (i25 << 4) + 12 >> 2] = i4;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 STACKTOP = i1;
 return;
}
function __ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_(i2, i37, i39, i38) {
 i2 = i2 | 0;
 i37 = i37 | 0;
 i39 = i39 | 0;
 i38 = i38 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i40 = 0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, i46 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i20 + 80 | 0;
 i18 = i20 + 64 | 0;
 i14 = i20 + 48 | 0;
 i24 = i20 + 32 | 0;
 i33 = i20 + 16 | 0;
 i29 = i20;
 d28 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 7](i2);
 i4 = i3 + 4 | 0;
 i5 = i3 + 8 | 0;
 i12 = i37 + 16 | 0;
 i13 = i37 + 32 | 0;
 i6 = i37 + 4 | 0;
 i7 = i37 + 20 | 0;
 i8 = i37 + 36 | 0;
 i9 = i37 + 8 | 0;
 i10 = i37 + 24 | 0;
 i11 = i37 + 40 | 0;
 i15 = i14 + 4 | 0;
 i16 = i14 + 8 | 0;
 i17 = i14 + 12 | 0;
 i19 = i18 + 4 | 0;
 i1 = i18 + 8 | 0;
 i23 = i37 + 48 | 0;
 i21 = i37 + 52 | 0;
 i22 = i37 + 56 | 0;
 i25 = i24 + 4 | 0;
 i26 = i24 + 8 | 0;
 i27 = i24 + 12 | 0;
 i30 = i29 + 4 | 0;
 i31 = i29 + 8 | 0;
 i32 = i29 + 12 | 0;
 i34 = i33 + 4 | 0;
 i35 = i33 + 8 | 0;
 i36 = 0;
 do {
  i46 = i3 + (i36 << 2) | 0;
  HEAP32[i3 + 0 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAPF32[i46 >> 2] = 1.0;
  i40 = HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] | 0;
  d41 = +HEAPF32[i3 >> 2];
  d42 = +HEAPF32[i4 >> 2];
  d43 = +HEAPF32[i5 >> 2];
  d44 = d41 * +HEAPF32[i6 >> 2] + d42 * +HEAPF32[i7 >> 2] + d43 * +HEAPF32[i8 >> 2];
  d45 = d41 * +HEAPF32[i9 >> 2] + d42 * +HEAPF32[i10 >> 2] + d43 * +HEAPF32[i11 >> 2];
  HEAPF32[i14 >> 2] = +HEAPF32[i37 >> 2] * d41 + +HEAPF32[i12 >> 2] * d42 + +HEAPF32[i13 >> 2] * d43;
  HEAPF32[i15 >> 2] = d44;
  HEAPF32[i16 >> 2] = d45;
  HEAPF32[i17 >> 2] = 0.0;
  FUNCTION_TABLE_viii[i40 & 63](i18, i2, i14);
  d45 = +HEAPF32[i18 >> 2];
  d44 = +HEAPF32[i19 >> 2];
  d43 = +HEAPF32[i1 >> 2];
  d42 = +HEAPF32[i21 >> 2] + (d45 * +HEAPF32[i12 >> 2] + d44 * +HEAPF32[i7 >> 2] + d43 * +HEAPF32[i10 >> 2]);
  d41 = +HEAPF32[i22 >> 2] + (d45 * +HEAPF32[i13 >> 2] + d44 * +HEAPF32[i8 >> 2] + d43 * +HEAPF32[i11 >> 2]);
  HEAPF32[i24 >> 2] = +HEAPF32[i23 >> 2] + (+HEAPF32[i37 >> 2] * d45 + +HEAPF32[i6 >> 2] * d44 + +HEAPF32[i9 >> 2] * d43);
  HEAPF32[i25 >> 2] = d42;
  HEAPF32[i26 >> 2] = d41;
  HEAPF32[i27 >> 2] = 0.0;
  i40 = i24 + (i36 << 2) | 0;
  HEAPF32[i38 + (i36 << 2) >> 2] = d28 + +HEAPF32[i40 >> 2];
  HEAPF32[i46 >> 2] = -1.0;
  i46 = HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] | 0;
  d41 = +HEAPF32[i3 >> 2];
  d42 = +HEAPF32[i4 >> 2];
  d43 = +HEAPF32[i5 >> 2];
  d44 = d41 * +HEAPF32[i6 >> 2] + d42 * +HEAPF32[i7 >> 2] + d43 * +HEAPF32[i8 >> 2];
  d45 = d41 * +HEAPF32[i9 >> 2] + d42 * +HEAPF32[i10 >> 2] + d43 * +HEAPF32[i11 >> 2];
  HEAPF32[i29 >> 2] = +HEAPF32[i37 >> 2] * d41 + +HEAPF32[i12 >> 2] * d42 + +HEAPF32[i13 >> 2] * d43;
  HEAPF32[i30 >> 2] = d44;
  HEAPF32[i31 >> 2] = d45;
  HEAPF32[i32 >> 2] = 0.0;
  FUNCTION_TABLE_viii[i46 & 63](i33, i2, i29);
  d45 = +HEAPF32[i33 >> 2];
  d44 = +HEAPF32[i34 >> 2];
  d43 = +HEAPF32[i35 >> 2];
  d42 = +HEAPF32[i21 >> 2] + (d45 * +HEAPF32[i12 >> 2] + d44 * +HEAPF32[i7 >> 2] + d43 * +HEAPF32[i10 >> 2]);
  d41 = +HEAPF32[i22 >> 2] + (d45 * +HEAPF32[i13 >> 2] + d44 * +HEAPF32[i8 >> 2] + d43 * +HEAPF32[i11 >> 2]);
  HEAPF32[i24 >> 2] = +HEAPF32[i23 >> 2] + (+HEAPF32[i37 >> 2] * d45 + +HEAPF32[i6 >> 2] * d44 + +HEAPF32[i9 >> 2] * d43);
  HEAPF32[i25 >> 2] = d42;
  HEAPF32[i26 >> 2] = d41;
  HEAPF32[i27 >> 2] = 0.0;
  HEAPF32[i39 + (i36 << 2) >> 2] = +HEAPF32[i40 >> 2] - d28;
  i36 = i36 + 1 | 0;
 } while ((i36 | 0) != 3);
 STACKTOP = i20;
 return;
}
function __ZN20btPersistentManifold16sortCachedPointsERK15btManifoldPoint(i3, i6) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, d2 = 0.0, i4 = 0, d5 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, d21 = 0.0, d22 = 0.0, i23 = 0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i1 = STACKTOP;
 d5 = +HEAPF32[i6 + 80 >> 2];
 d2 = +HEAPF32[i3 + 84 >> 2];
 i20 = d2 < d5;
 d2 = i20 ? d2 : d5;
 d5 = +HEAPF32[i3 + 360 >> 2];
 i23 = d5 < d2;
 d5 = i23 ? d5 : d2;
 d2 = +HEAPF32[i3 + 636 >> 2];
 i24 = d2 < d5;
 i4 = +HEAPF32[i3 + 912 >> 2] < (i24 ? d2 : d5);
 i20 = i4 ? 3 : i24 ? 2 : i23 ? 1 : (i20 ^ 1) << 31 >> 31;
 d2 = +HEAPF32[i6 >> 2];
 if ((i20 | 0) != 0) {
  d16 = +HEAPF32[i3 + 280 >> 2];
  d25 = d2 - d16;
  d12 = +HEAPF32[i6 + 4 >> 2];
  d5 = +HEAPF32[i3 + 284 >> 2];
  d19 = d12 - d5;
  d11 = +HEAPF32[i6 + 8 >> 2];
  d7 = +HEAPF32[i3 + 288 >> 2];
  d26 = d11 - d7;
  d10 = +HEAPF32[i3 + 832 >> 2];
  d17 = +HEAPF32[i3 + 556 >> 2];
  d21 = d10 - d17;
  d15 = +HEAPF32[i3 + 836 >> 2];
  d13 = +HEAPF32[i3 + 560 >> 2];
  d14 = d15 - d13;
  d18 = +HEAPF32[i3 + 840 >> 2];
  d9 = +HEAPF32[i3 + 564 >> 2];
  d8 = d18 - d9;
  d22 = d19 * d8 - d26 * d14;
  d8 = d26 * d21 - d25 * d8;
  d21 = d25 * d14 - d19 * d21;
  d8 = d21 * d21 + (d22 * d22 + d8 * d8);
  if ((i20 | 0) == 1) {
   d14 = 0.0;
   d22 = +HEAPF32[i3 + 4 >> 2];
   d21 = +HEAPF32[i3 + 8 >> 2];
   d19 = +HEAPF32[i3 + 12 >> 2];
   i6 = 6;
  } else {
   i6 = 5;
  }
 } else {
  d8 = 0.0;
  d12 = +HEAPF32[i6 + 4 >> 2];
  d11 = +HEAPF32[i6 + 8 >> 2];
  d17 = +HEAPF32[i3 + 556 >> 2];
  d10 = +HEAPF32[i3 + 832 >> 2];
  d13 = +HEAPF32[i3 + 560 >> 2];
  d15 = +HEAPF32[i3 + 836 >> 2];
  d9 = +HEAPF32[i3 + 564 >> 2];
  d18 = +HEAPF32[i3 + 840 >> 2];
  i6 = 5;
 }
 if ((i6 | 0) == 5) {
  d22 = +HEAPF32[i3 + 4 >> 2];
  d25 = d2 - d22;
  d21 = +HEAPF32[i3 + 8 >> 2];
  d7 = d12 - d21;
  d19 = +HEAPF32[i3 + 12 >> 2];
  d27 = d11 - d19;
  d5 = d10 - d17;
  d26 = d15 - d13;
  d14 = d18 - d9;
  d16 = d7 * d14 - d27 * d26;
  d14 = d27 * d5 - d25 * d14;
  d5 = d25 * d26 - d7 * d5;
  d14 = d5 * d5 + (d16 * d16 + d14 * d14);
  d16 = +HEAPF32[i3 + 280 >> 2];
  d5 = +HEAPF32[i3 + 284 >> 2];
  d7 = +HEAPF32[i3 + 288 >> 2];
  if ((i20 | 0) == 2) {
   d10 = d22;
   d15 = d21;
   d18 = 0.0;
  } else {
   i6 = 6;
  }
 }
 if ((i6 | 0) == 6) {
  d28 = d2 - d22;
  d25 = d12 - d21;
  d29 = d11 - d19;
  d26 = d10 - d16;
  d15 = d15 - d5;
  d18 = d18 - d7;
  d27 = d25 * d18 - d29 * d15;
  d18 = d29 * d26 - d28 * d18;
  d26 = d28 * d15 - d25 * d26;
  d18 = d26 * d26 + (d27 * d27 + d18 * d18);
  if (i4) {
   d7 = d14;
   d5 = d18;
   d2 = 0.0;
   d8 = +Math_abs(+d8);
   d7 = +Math_abs(+d7);
   d5 = +Math_abs(+d5);
   d2 = +Math_abs(+d2);
   i24 = d8 > -999999984306749400.0;
   i3 = i24 ^ 1;
   i3 = i3 << 31 >> 31;
   d8 = i24 ? d8 : -999999984306749400.0;
   i4 = d7 > d8;
   i3 = i4 ? 1 : i3;
   d7 = i4 ? d7 : d8;
   i4 = d5 > d7;
   i3 = i4 ? 2 : i3;
   d29 = i4 ? d5 : d7;
   i24 = d2 > d29;
   i24 = i24 ? 3 : i3;
   STACKTOP = i1;
   return i24 | 0;
  } else {
   d10 = d22;
   d15 = d21;
  }
 }
 d26 = d2 - d10;
 d27 = d12 - d15;
 d25 = d11 - d19;
 d28 = d17 - d16;
 d5 = d13 - d5;
 d2 = d9 - d7;
 d29 = d27 * d2 - d25 * d5;
 d2 = d25 * d28 - d26 * d2;
 d28 = d26 * d5 - d27 * d28;
 d7 = d14;
 d5 = d18;
 d2 = d28 * d28 + (d29 * d29 + d2 * d2);
 d8 = +Math_abs(+d8);
 d7 = +Math_abs(+d7);
 d5 = +Math_abs(+d5);
 d2 = +Math_abs(+d2);
 i24 = d8 > -999999984306749400.0;
 i3 = i24 ^ 1;
 i3 = i3 << 31 >> 31;
 d8 = i24 ? d8 : -999999984306749400.0;
 i4 = d7 > d8;
 i3 = i4 ? 1 : i3;
 d7 = i4 ? d7 : d8;
 i4 = d5 > d7;
 i3 = i4 ? 2 : i3;
 d29 = i4 ? d5 : d7;
 i24 = d2 > d29;
 i24 = i24 ? 3 : i3;
 STACKTOP = i1;
 return i24 | 0;
}
function __ZN16btDbvtBroadphase22performDeferredRemovalEP12btDispatcher(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i1 + 2 | 0;
 i4 = i1 + 1 | 0;
 i7 = i2 + 96 | 0;
 i18 = HEAP32[i7 >> 2] | 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 56 >> 2] & 127](i18) | 0)) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i7 >> 2] | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0;
 i2 = i3 + 4 | 0;
 i12 = HEAP32[i2 >> 2] | 0;
 if ((i12 | 0) > 1) {
  i12 = i12 + -1 | 0;
  HEAP8[i6 + 0 | 0] = HEAP8[i1 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i6, 0, i12);
  i12 = HEAP32[i2 >> 2] | 0;
 }
 if ((i12 | 0) > 0) {
  i8 = i3 + 12 | 0;
  i11 = 0;
  i17 = 0;
  i9 = 0;
  i10 = 0;
  while (1) {
   i13 = HEAP32[i8 >> 2] | 0;
   i14 = i13 + (i9 << 4) | 0;
   i16 = HEAP32[i14 >> 2] | 0;
   i13 = i13 + (i9 << 4) + 4 | 0;
   i15 = HEAP32[i13 >> 2] | 0;
   if ((i16 | 0) == (i11 | 0)) {
    if ((i15 | 0) == (i17 | 0)) {
     i15 = i17;
     i16 = i11;
     i11 = 15;
    } else {
     i16 = i11;
     i11 = 9;
    }
   } else {
    i11 = 9;
   }
   if ((i11 | 0) == 9) {
    i11 = 0;
    i17 = HEAP32[i16 + 48 >> 2] | 0;
    i18 = HEAP32[i15 + 48 >> 2] | 0;
    if (!(((((+HEAPF32[i17 >> 2] <= +HEAPF32[i18 + 16 >> 2] ? +HEAPF32[i17 + 16 >> 2] >= +HEAPF32[i18 >> 2] : 0) ? +HEAPF32[i17 + 4 >> 2] <= +HEAPF32[i18 + 20 >> 2] : 0) ? +HEAPF32[i17 + 20 >> 2] >= +HEAPF32[i18 + 4 >> 2] : 0) ? +HEAPF32[i17 + 8 >> 2] <= +HEAPF32[i18 + 24 >> 2] : 0) ? +HEAPF32[i17 + 24 >> 2] >= +HEAPF32[i18 + 8 >> 2] : 0)) {
     i11 = 15;
    }
   }
   if ((i11 | 0) == 15) {
    i12 = HEAP32[i7 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 63](i12, i14, i5);
    HEAP32[i14 >> 2] = 0;
    HEAP32[i13 >> 2] = 0;
    i12 = HEAP32[i2 >> 2] | 0;
    i10 = i10 + 1 | 0;
   }
   i9 = i9 + 1 | 0;
   if ((i9 | 0) >= (i12 | 0)) {
    break;
   } else {
    i11 = i16;
    i17 = i15;
   }
  }
  if ((i12 | 0) > 1) {
   i18 = i12 + -1 | 0;
   HEAP8[i6 + 0 | 0] = HEAP8[i4 + 0 | 0] | 0;
   __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i6, 0, i18);
   i4 = HEAP32[i2 >> 2] | 0;
  } else {
   i4 = i12;
  }
  i12 = i4 - i10 | 0;
  if ((i10 | 0) < 0) {
   i6 = i3 + 8 | 0;
   if ((HEAP32[i6 >> 2] | 0) < (i12 | 0)) {
    if ((i4 | 0) == (i10 | 0)) {
     i5 = 0;
    } else {
     i5 = __Z22btAlignedAllocInternalji(i12 << 4, 16) | 0;
     i10 = HEAP32[i2 >> 2] | 0;
    }
    i7 = i3 + 12 | 0;
    if ((i10 | 0) > 0) {
     i8 = 0;
     do {
      i18 = HEAP32[i7 >> 2] | 0;
      HEAP32[i5 + (i8 << 4) >> 2] = HEAP32[i18 + (i8 << 4) >> 2];
      HEAP32[i5 + (i8 << 4) + 4 >> 2] = HEAP32[i18 + (i8 << 4) + 4 >> 2];
      HEAP32[i5 + (i8 << 4) + 8 >> 2] = HEAP32[i18 + (i8 << 4) + 8 >> 2];
      HEAP32[i5 + (i8 << 4) + 12 >> 2] = HEAP32[i18 + (i8 << 4) + 12 >> 2];
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) != (i10 | 0));
    }
    i8 = HEAP32[i7 >> 2] | 0;
    i3 = i3 + 16 | 0;
    if ((i8 | 0) != 0) {
     if ((HEAP8[i3] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i8);
     }
     HEAP32[i7 >> 2] = 0;
    }
    HEAP8[i3] = 1;
    HEAP32[i7 >> 2] = i5;
    HEAP32[i6 >> 2] = i12;
   } else {
    i7 = i3 + 12 | 0;
   }
   do {
    i17 = (HEAP32[i7 >> 2] | 0) + (i4 << 4) | 0;
    i4 = i4 + 1 | 0;
    i18 = (i4 | 0) == (i12 | 0);
    HEAP32[i17 + 0 >> 2] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
    HEAP32[i17 + 8 >> 2] = 0;
    HEAP32[i17 + 12 >> 2] = 0;
   } while (!i18);
  }
 }
 HEAP32[i2 >> 2] = i12;
 STACKTOP = i1;
 return;
}
function __ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_PfRj(i27, i28, i29, i26, i2) {
 i27 = i27 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, i25 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, d34 = 0.0, i35 = 0, d36 = 0.0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i21 + 64 | 0;
 i9 = i21 + 16 | 0;
 i3 = i21;
 i4 = i21 + 8 | 0;
 HEAP32[i5 >> 2] = i27;
 HEAP32[i5 + 4 >> 2] = i28;
 HEAP32[i5 + 8 >> 2] = i29;
 d34 = +HEAPF32[i27 >> 2];
 d17 = +HEAPF32[i28 >> 2];
 d32 = d34 - d17;
 i11 = i27 + 4 | 0;
 d6 = +HEAPF32[i11 >> 2];
 i13 = i28 + 4 | 0;
 d15 = +HEAPF32[i13 >> 2];
 d30 = d6 - d15;
 i12 = i27 + 8 | 0;
 d8 = +HEAPF32[i12 >> 2];
 i14 = i28 + 8 | 0;
 d16 = +HEAPF32[i14 >> 2];
 d31 = d8 - d16;
 HEAPF32[i9 >> 2] = d32;
 HEAPF32[i9 + 4 >> 2] = d30;
 HEAPF32[i9 + 8 >> 2] = d31;
 HEAPF32[i9 + 12 >> 2] = 0.0;
 d36 = +HEAPF32[i29 >> 2];
 d17 = d17 - d36;
 i18 = i29 + 4 | 0;
 d10 = +HEAPF32[i18 >> 2];
 d15 = d15 - d10;
 i19 = i29 + 8 | 0;
 d7 = +HEAPF32[i19 >> 2];
 d16 = d16 - d7;
 HEAPF32[i9 + 16 >> 2] = d17;
 HEAPF32[i9 + 20 >> 2] = d15;
 HEAPF32[i9 + 24 >> 2] = d16;
 HEAPF32[i9 + 28 >> 2] = 0.0;
 i22 = i9 + 32 | 0;
 HEAPF32[i22 >> 2] = d36 - d34;
 i20 = i9 + 36 | 0;
 HEAPF32[i20 >> 2] = d10 - d6;
 i1 = i9 + 40 | 0;
 HEAPF32[i1 >> 2] = d7 - d8;
 HEAPF32[i9 + 44 >> 2] = 0.0;
 d8 = d30 * d16 - d31 * d15;
 d7 = d31 * d17 - d16 * d32;
 d6 = d15 * d32 - d30 * d17;
 d10 = d6 * d6 + (d8 * d8 + d7 * d7);
 if (!(d10 > 0.0)) {
  d36 = -1.0;
  STACKTOP = i21;
  return +d36;
 }
 i23 = i3;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i23 = i3 + 4 | 0;
 i33 = 0;
 d34 = -1.0;
 while (1) {
  i35 = HEAP32[i5 + (i33 << 2) >> 2] | 0;
  if (+HEAPF32[i35 >> 2] * (d6 * d30 - d7 * d31) + +HEAPF32[i35 + 4 >> 2] * (d8 * d31 - d6 * d32) + (d7 * d32 - d8 * d30) * +HEAPF32[i35 + 8 >> 2] > 0.0 ? (i25 = HEAP32[459616 + (i33 << 2) >> 2] | 0, d24 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_PfRj(i35, HEAP32[i5 + (i25 << 2) >> 2] | 0, i3, i4), d34 < 0.0 | d24 < d34) : 0) {
   i35 = HEAP32[i4 >> 2] | 0;
   HEAP32[i2 >> 2] = ((i35 & 1 | 0) == 0 ? 0 : 1 << i33) + ((i35 & 2 | 0) == 0 ? 0 : 1 << i25);
   HEAPF32[i26 + (i33 << 2) >> 2] = +HEAPF32[i3 >> 2];
   HEAPF32[i26 + (i25 << 2) >> 2] = +HEAPF32[i23 >> 2];
   HEAPF32[i26 + (HEAP32[459616 + (i25 << 2) >> 2] << 2) >> 2] = 0.0;
   d34 = d24;
  }
  i33 = i33 + 1 | 0;
  if ((i33 | 0) == 3) {
   break;
  }
  d30 = +HEAPF32[i9 + (i33 << 4) + 4 >> 2];
  d31 = +HEAPF32[i9 + (i33 << 4) + 8 >> 2];
  d32 = +HEAPF32[i9 + (i33 << 4) >> 2];
 }
 if (!(d34 < 0.0)) {
  d36 = d34;
  STACKTOP = i21;
  return +d36;
 }
 d30 = +Math_sqrt(+d10);
 d32 = (d8 * +HEAPF32[i27 >> 2] + d7 * +HEAPF32[i11 >> 2] + d6 * +HEAPF32[i12 >> 2]) / d10;
 d34 = d8 * d32;
 d36 = d7 * d32;
 d32 = d6 * d32;
 HEAP32[i2 >> 2] = 7;
 d24 = +HEAPF32[i28 >> 2] - d34;
 d7 = +HEAPF32[i13 >> 2] - d36;
 d31 = +HEAPF32[i14 >> 2] - d32;
 d8 = d15 * d31 - d7 * d16;
 d31 = d24 * d16 - d31 * d17;
 d15 = d7 * d17 - d24 * d15;
 d31 = +Math_sqrt(+(d15 * d15 + (d8 * d8 + d31 * d31))) / d30;
 HEAPF32[i26 >> 2] = d31;
 d15 = +HEAPF32[i29 >> 2] - d34;
 d8 = +HEAPF32[i18 >> 2] - d36;
 d24 = +HEAPF32[i19 >> 2] - d32;
 d16 = +HEAPF32[i20 >> 2];
 d7 = +HEAPF32[i1 >> 2];
 d17 = d16 * d24 - d8 * d7;
 d10 = +HEAPF32[i22 >> 2];
 d24 = d15 * d7 - d24 * d10;
 d16 = d8 * d10 - d15 * d16;
 d30 = +Math_sqrt(+(d16 * d16 + (d17 * d17 + d24 * d24))) / d30;
 HEAPF32[i26 + 4 >> 2] = d30;
 HEAPF32[i26 + 8 >> 2] = 1.0 - (d30 + d31);
 d36 = d32 * d32 + (d34 * d34 + d36 * d36);
 STACKTOP = i21;
 return +d36;
}
function __ZN28btHashedOverlappingPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher(i8, i4, i3, i6) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 HEAP32[113814] = (HEAP32[113814] | 0) + 1;
 i7 = (HEAP32[i4 + 12 >> 2] | 0) > (HEAP32[i3 + 12 >> 2] | 0);
 i5 = i7 ? i3 : i4;
 i12 = i7 ? i4 : i3;
 i14 = HEAP32[i5 + 12 >> 2] | 0;
 i9 = HEAP32[i12 + 12 >> 2] | 0;
 i13 = i9 << 16 | i14;
 i13 = i13 + ~(i13 << 15) | 0;
 i13 = (i13 >> 10 ^ i13) * 9 | 0;
 i13 = i13 >> 6 ^ i13;
 i13 = i13 + ~(i13 << 11) | 0;
 i10 = i8 + 12 | 0;
 i13 = (i13 >> 16 ^ i13) & (HEAP32[i10 >> 2] | 0) + -1;
 i4 = i8 + 44 | 0;
 i15 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i13 << 2) >> 2] | 0;
 if ((i15 | 0) == -1) {
  i16 = 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 i11 = i8 + 16 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i3 = i8 + 64 | 0;
 while (1) {
  if ((HEAP32[(HEAP32[i7 + (i15 << 4) >> 2] | 0) + 12 >> 2] | 0) == (i14 | 0) ? (HEAP32[(HEAP32[i7 + (i15 << 4) + 4 >> 2] | 0) + 12 >> 2] | 0) == (i9 | 0) : 0) {
   break;
  }
  i15 = HEAP32[(HEAP32[i3 >> 2] | 0) + (i15 << 2) >> 2] | 0;
  if ((i15 | 0) == -1) {
   i3 = 0;
   i1 = 24;
   break;
  }
 }
 if ((i1 | 0) == 24) {
  STACKTOP = i2;
  return i3 | 0;
 }
 i9 = i7 + (i15 << 4) | 0;
 if ((i9 | 0) == 0) {
  i16 = 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] & 63](i8, i9, i6);
 i7 = HEAP32[i7 + (i15 << 4) + 12 >> 2] | 0;
 i9 = i9 - (HEAP32[i11 >> 2] | 0) >> 4;
 i13 = (HEAP32[i4 >> 2] | 0) + (i13 << 2) | 0;
 i15 = HEAP32[i13 >> 2] | 0;
 i14 = HEAP32[i3 >> 2] | 0;
 if ((i15 | 0) != (i9 | 0)) {
  while (1) {
   i16 = HEAP32[i14 + (i15 << 2) >> 2] | 0;
   if ((i16 | 0) == (i9 | 0)) {
    break;
   } else {
    i15 = i16;
   }
  }
  i16 = HEAP32[i14 + (i9 << 2) >> 2] | 0;
  if ((i15 | 0) == -1) {
   i1 = 12;
  } else {
   HEAP32[i14 + (i15 << 2) >> 2] = i16;
  }
 } else {
  i16 = HEAP32[i14 + (i9 << 2) >> 2] | 0;
  i1 = 12;
 }
 if ((i1 | 0) == 12) {
  HEAP32[i13 >> 2] = i16;
 }
 i14 = i8 + 8 | 0;
 i13 = (HEAP32[i14 >> 2] | 0) + -1 | 0;
 i8 = HEAP32[i8 + 72 >> 2] | 0;
 if ((i8 | 0) != 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 15](i8, i5, i12, i6) | 0;
 }
 if ((i13 | 0) == (i9 | 0)) {
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
  i16 = i7;
  STACKTOP = i2;
  return i16 | 0;
 }
 i5 = HEAP32[i11 >> 2] | 0;
 i8 = HEAP32[(HEAP32[i5 + (i13 << 4) + 4 >> 2] | 0) + 12 >> 2] << 16 | HEAP32[(HEAP32[i5 + (i13 << 4) >> 2] | 0) + 12 >> 2];
 i8 = i8 + ~(i8 << 15) | 0;
 i8 = (i8 >> 10 ^ i8) * 9 | 0;
 i8 = i8 >> 6 ^ i8;
 i8 = i8 + ~(i8 << 11) | 0;
 i8 = (i8 >> 16 ^ i8) & (HEAP32[i10 >> 2] | 0) + -1;
 i6 = (HEAP32[i4 >> 2] | 0) + (i8 << 2) | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 if ((i11 | 0) != (i13 | 0)) {
  while (1) {
   i12 = HEAP32[i10 + (i11 << 2) >> 2] | 0;
   if ((i12 | 0) == (i13 | 0)) {
    break;
   } else {
    i11 = i12;
   }
  }
  i12 = HEAP32[i10 + (i13 << 2) >> 2] | 0;
  if ((i11 | 0) == -1) {
   i1 = 22;
  } else {
   HEAP32[i10 + (i11 << 2) >> 2] = i12;
  }
 } else {
  i12 = HEAP32[i10 + (i13 << 2) >> 2] | 0;
  i1 = 22;
 }
 if ((i1 | 0) == 22) {
  HEAP32[i6 >> 2] = i12;
 }
 i16 = i5 + (i9 << 4) | 0;
 i15 = i5 + (i13 << 4) | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 i16 = (HEAP32[i4 >> 2] | 0) + (i8 << 2) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + (i9 << 2) >> 2] = HEAP32[i16 >> 2];
 HEAP32[i16 >> 2] = i9;
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
 i16 = i7;
 STACKTOP = i2;
 return i16 | 0;
}
function __ZN21btCollisionDispatcher14getNewManifoldEPvS0_(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[112080] = (HEAP32[112080] | 0) + 1;
 i4 = i2 + 4 | 0;
 if ((HEAP32[i4 >> 2] & 2 | 0) == 0) {
  i7 = 455736;
 } else {
  i13 = HEAP32[i5 + 192 >> 2] | 0;
  d12 = +FUNCTION_TABLE_did[HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] & 1](i13, +HEAPF32[113934]);
  HEAPF32[i8 >> 2] = d12;
  i13 = HEAP32[i6 + 192 >> 2] | 0;
  d14 = +FUNCTION_TABLE_did[HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] & 1](i13, +HEAPF32[113934]);
  HEAPF32[i7 >> 2] = d14;
  i7 = d12 < d14 ? i8 : i7;
 }
 d9 = +HEAPF32[i7 >> 2];
 d14 = +HEAPF32[i5 + 184 >> 2];
 d12 = +HEAPF32[i6 + 184 >> 2];
 d12 = d14 < d12 ? d14 : d12;
 i7 = HEAP32[i2 + 196 >> 2] | 0;
 i8 = i7 + 8 | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 do {
  if ((i10 | 0) == 0) {
   if ((HEAP32[i4 >> 2] & 4 | 0) == 0) {
    i4 = __Z22btAlignedAllocInternalji(1140, 16) | 0;
    break;
   } else {
    i13 = 0;
    STACKTOP = i1;
    return i13 | 0;
   }
  } else {
   i13 = i7 + 12 | 0;
   i4 = HEAP32[i13 >> 2] | 0;
   HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i8 >> 2] = i10 + -1;
  }
 } while (0);
 HEAP32[i4 >> 2] = 1025;
 HEAP32[i4 + 112 >> 2] = 0;
 HEAPF32[i4 + 116 >> 2] = 0.0;
 HEAP8[i4 + 120 | 0] = 0;
 i10 = i4 + 124 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i4 + 388 >> 2] = 0;
 HEAPF32[i4 + 392 >> 2] = 0.0;
 HEAP8[i4 + 396 | 0] = 0;
 i10 = i4 + 400 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i4 + 664 >> 2] = 0;
 HEAPF32[i4 + 668 >> 2] = 0.0;
 HEAP8[i4 + 672 | 0] = 0;
 i10 = i4 + 676 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i4 + 940 >> 2] = 0;
 HEAPF32[i4 + 944 >> 2] = 0.0;
 HEAP8[i4 + 948 | 0] = 0;
 i10 = i4 + 952 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i4 + 1108 >> 2] = i5;
 HEAP32[i4 + 1112 >> 2] = i6;
 HEAP32[i4 + 1116 >> 2] = 0;
 HEAPF32[i4 + 1120 >> 2] = d9;
 HEAPF32[i4 + 1124 >> 2] = d12;
 i5 = i2 + 12 | 0;
 HEAP32[i4 + 1136 >> 2] = HEAP32[i5 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 i6 = i2 + 16 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i3 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i3 | 0)) : 0) {
  if ((i3 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i3 << 2, 16) | 0;
   i10 = HEAP32[i5 >> 2] | 0;
  }
  i8 = i2 + 20 | 0;
  if ((i10 | 0) > 0) {
   i13 = 0;
   do {
    i11 = i7 + (i13 << 2) | 0;
    if ((i11 | 0) != 0) {
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i13 << 2) >> 2];
    }
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i10 | 0));
  }
  i13 = HEAP32[i8 >> 2] | 0;
  i11 = i2 + 24 | 0;
  if ((i13 | 0) != 0) {
   if ((HEAP8[i11] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i13);
    i10 = HEAP32[i5 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i11] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i3;
 }
 i2 = (HEAP32[i2 + 20 >> 2] | 0) + (i10 << 2) | 0;
 if ((i2 | 0) != 0) {
  HEAP32[i2 >> 2] = i4;
 }
 HEAP32[i5 >> 2] = i10 + 1;
 i13 = i4;
 STACKTOP = i1;
 return i13 | 0;
}
function __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 if ((i5 | 0) > 3) {
  if ((HEAP8[i3] & 8) == 0) {
   i5 = i5 + -1 | 0;
   HEAP32[i1 >> 2] = i5;
   i4 = i1 + 52 | 0;
   i6 = i1 + (i5 << 4) + 4 | 0;
   HEAP32[i4 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   i4 = i1 + 132 | 0;
   i6 = i1 + (i5 << 4) + 84 | 0;
   HEAP32[i4 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   i4 = i1 + 212 | 0;
   i6 = i1 + (i5 << 4) + 164 | 0;
   HEAP32[i4 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   i4 = 4;
  } else {
   i4 = 5;
  }
 } else {
  i4 = 4;
 }
 if ((i4 | 0) == 4) {
  if ((i5 | 0) > 2) {
   i4 = 5;
  }
 }
 if ((i4 | 0) == 5) {
  if ((HEAP8[i3] & 4) == 0) {
   i5 = i5 + -1 | 0;
   HEAP32[i1 >> 2] = i5;
   i6 = i1 + 36 | 0;
   i7 = i1 + (i5 << 4) + 4 | 0;
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i6 = i1 + 116 | 0;
   i7 = i1 + (i5 << 4) + 84 | 0;
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i6 = i1 + 196 | 0;
   i7 = i1 + (i5 << 4) + 164 | 0;
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  }
 }
 if ((i5 | 0) > 1) {
  if ((HEAP8[i3] & 2) == 0) {
   i5 = i5 + -1 | 0;
   HEAP32[i1 >> 2] = i5;
   i4 = i1 + 20 | 0;
   i7 = i1 + (i5 << 4) + 4 | 0;
   HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i4 = i1 + 100 | 0;
   i7 = i1 + (i5 << 4) + 84 | 0;
   HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i4 = i1 + 180 | 0;
   i7 = i1 + (i5 << 4) + 164 | 0;
   HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i4 = 10;
  }
 } else {
  i4 = 10;
 }
 if ((i4 | 0) == 10) {
  if ((i5 | 0) <= 0) {
   STACKTOP = i2;
   return;
  }
 }
 if (!((HEAP8[i3] & 1) == 0)) {
  STACKTOP = i2;
  return;
 }
 i6 = i5 + -1 | 0;
 HEAP32[i1 >> 2] = i6;
 i7 = i1 + 4 | 0;
 i5 = i1 + (i6 << 4) + 4 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i7 = i1 + 84 | 0;
 i5 = i1 + (i6 << 4) + 84 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i7 = i1 + 164 | 0;
 i6 = i1 + (i6 << 4) + 164 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN28btHashedOverlappingPairCache20sortOverlappingPairsEP12btDispatcher(i4, i9) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i2 + 21 | 0;
 i6 = i2 + 20 | 0;
 i8 = i2;
 i1 = i8 + 16 | 0;
 HEAP8[i1] = 1;
 i3 = i8 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 i5 = i8 + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 i11 = i8 + 8 | 0;
 HEAP32[i11 >> 2] = 0;
 i10 = i4 + 8 | 0;
 i18 = HEAP32[i10 >> 2] | 0;
 if ((i18 | 0) > 0) {
  i12 = i4 + 16 | 0;
  i17 = 0;
  i16 = 0;
  i14 = 0;
  while (1) {
   i13 = HEAP32[i12 >> 2] | 0;
   if ((i17 | 0) == (i16 | 0)) {
    i15 = (i16 | 0) == 0 ? 1 : i16 << 1;
    if ((i16 | 0) < (i15 | 0)) {
     if ((i15 | 0) == 0) {
      i17 = 0;
     } else {
      i17 = __Z22btAlignedAllocInternalji(i15 << 4, 16) | 0;
      i16 = HEAP32[i5 >> 2] | 0;
     }
     if ((i16 | 0) > 0) {
      i18 = 0;
      do {
       i19 = HEAP32[i3 >> 2] | 0;
       HEAP32[i17 + (i18 << 4) >> 2] = HEAP32[i19 + (i18 << 4) >> 2];
       HEAP32[i17 + (i18 << 4) + 4 >> 2] = HEAP32[i19 + (i18 << 4) + 4 >> 2];
       HEAP32[i17 + (i18 << 4) + 8 >> 2] = HEAP32[i19 + (i18 << 4) + 8 >> 2];
       HEAP32[i17 + (i18 << 4) + 12 >> 2] = HEAP32[i19 + (i18 << 4) + 12 >> 2];
       i18 = i18 + 1 | 0;
      } while ((i18 | 0) != (i16 | 0));
     }
     i18 = HEAP32[i3 >> 2] | 0;
     if ((i18 | 0) != 0) {
      if ((HEAP8[i1] | 0) != 0) {
       __Z21btAlignedFreeInternalPv(i18);
       i16 = HEAP32[i5 >> 2] | 0;
      }
      HEAP32[i3 >> 2] = 0;
     }
     HEAP8[i1] = 1;
     HEAP32[i3 >> 2] = i17;
     HEAP32[i11 >> 2] = i15;
     i18 = HEAP32[i10 >> 2] | 0;
     i19 = i16;
    } else {
     i19 = i16;
     i15 = i16;
    }
   } else {
    i19 = i17;
    i15 = i16;
   }
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP32[i17 + (i19 << 4) >> 2] = HEAP32[i13 + (i14 << 4) >> 2];
   HEAP32[i17 + (i19 << 4) + 4 >> 2] = HEAP32[i13 + (i14 << 4) + 4 >> 2];
   HEAP32[i17 + (i19 << 4) + 8 >> 2] = HEAP32[i13 + (i14 << 4) + 8 >> 2];
   HEAP32[i17 + (i19 << 4) + 12 >> 2] = HEAP32[i13 + (i14 << 4) + 12 >> 2];
   i17 = i19 + 1 | 0;
   HEAP32[i5 >> 2] = i17;
   i14 = i14 + 1 | 0;
   if ((i14 | 0) >= (i18 | 0)) {
    break;
   } else {
    i16 = i15;
   }
  }
  if ((i19 | 0) > -1) {
   i10 = 0;
   do {
    i17 = HEAP32[i3 >> 2] | 0;
    FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 15](i4, HEAP32[i17 + (i10 << 4) >> 2] | 0, HEAP32[i17 + (i10 << 4) + 4 >> 2] | 0, i9) | 0;
    i10 = i10 + 1 | 0;
    i17 = HEAP32[i5 >> 2] | 0;
   } while ((i10 | 0) < (i17 | 0));
  }
 } else {
  i17 = 0;
 }
 i9 = i4 + 56 | 0;
 if ((HEAP32[i9 >> 2] | 0) > 0) {
  i10 = HEAP32[i4 + 64 >> 2] | 0;
  i11 = 0;
  do {
   HEAP32[i10 + (i11 << 2) >> 2] = -1;
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (HEAP32[i9 >> 2] | 0));
  i17 = HEAP32[i5 >> 2] | 0;
 }
 if ((i17 | 0) > 1) {
  i17 = i17 + -1 | 0;
  HEAP8[i7 + 0 | 0] = HEAP8[i6 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i8, i7, 0, i17);
  i17 = HEAP32[i5 >> 2] | 0;
 }
 if ((i17 | 0) > 0) {
  i6 = 0;
  do {
   i19 = HEAP32[i3 >> 2] | 0;
   FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, HEAP32[i19 + (i6 << 4) >> 2] | 0, HEAP32[i19 + (i6 << 4) + 4 >> 2] | 0) | 0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i5 >> 2] | 0));
 }
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i4);
 }
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallback28internalProcessTriangleIndexE_0PS2_ii(i6, i10, i4, i2) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, i26 = 0, d27 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i3;
 d12 = +HEAPF32[i10 >> 2];
 d7 = d12 < 999999984306749400.0 ? d12 : 999999984306749400.0;
 d13 = +HEAPF32[i10 + 4 >> 2];
 d8 = d13 < 999999984306749400.0 ? d13 : 999999984306749400.0;
 d14 = +HEAPF32[i10 + 8 >> 2];
 d9 = d14 < 999999984306749400.0 ? d14 : 999999984306749400.0;
 d15 = +HEAPF32[i10 + 12 >> 2];
 d11 = d15 < 0.0 ? d15 : 0.0;
 d12 = d12 > -999999984306749400.0 ? d12 : -999999984306749400.0;
 d13 = d13 > -999999984306749400.0 ? d13 : -999999984306749400.0;
 d14 = d14 > -999999984306749400.0 ? d14 : -999999984306749400.0;
 d15 = d15 > 0.0 ? d15 : 0.0;
 d25 = +HEAPF32[i10 + 16 >> 2];
 d7 = d25 < d7 ? d25 : d7;
 d20 = +HEAPF32[i10 + 20 >> 2];
 d8 = d20 < d8 ? d20 : d8;
 d27 = +HEAPF32[i10 + 24 >> 2];
 d9 = d27 < d9 ? d27 : d9;
 d24 = +HEAPF32[i10 + 28 >> 2];
 d11 = d24 < d11 ? d24 : d11;
 d12 = d12 < d25 ? d25 : d12;
 d13 = d13 < d20 ? d20 : d13;
 d14 = d14 < d27 ? d27 : d14;
 d15 = d15 < d24 ? d24 : d15;
 d24 = +HEAPF32[i10 + 32 >> 2];
 d7 = d24 < d7 ? d24 : d7;
 d25 = +HEAPF32[i10 + 36 >> 2];
 d8 = d25 < d8 ? d25 : d8;
 d20 = +HEAPF32[i10 + 40 >> 2];
 d9 = d20 < d9 ? d20 : d9;
 d27 = +HEAPF32[i10 + 44 >> 2];
 d11 = d27 < d11 ? d27 : d11;
 d12 = d12 < d24 ? d24 : d12;
 d13 = d13 < d25 ? d25 : d13;
 d14 = d14 < d20 ? d20 : d14;
 d15 = d15 < d27 ? d27 : d15;
 i10 = HEAP32[i6 + 4 >> 2] | 0;
 i6 = i10 + 4 | 0;
 i26 = HEAP32[i6 >> 2] | 0;
 i16 = i10 + 8 | 0;
 if ((i26 | 0) == (HEAP32[i16 >> 2] | 0) ? (i5 = (i26 | 0) == 0 ? 1 : i26 << 1, (i26 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i17 = 0;
  } else {
   i17 = __Z22btAlignedAllocInternalji(i5 << 6, 16) | 0;
   i26 = HEAP32[i6 >> 2] | 0;
  }
  i18 = i10 + 12 | 0;
  if ((i26 | 0) > 0) {
   i23 = 0;
   do {
    i21 = i17 + (i23 << 6) + 0 | 0;
    i19 = (HEAP32[i18 >> 2] | 0) + (i23 << 6) + 0 | 0;
    i22 = i21 + 64 | 0;
    do {
     HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
     i21 = i21 + 4 | 0;
     i19 = i19 + 4 | 0;
    } while ((i21 | 0) < (i22 | 0));
    i23 = i23 + 1 | 0;
   } while ((i23 | 0) != (i26 | 0));
  }
  i19 = HEAP32[i18 >> 2] | 0;
  i21 = i10 + 16 | 0;
  if ((i19 | 0) != 0) {
   if ((HEAP8[i21] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i19);
   }
   HEAP32[i18 >> 2] = 0;
  }
  HEAP8[i21] = 1;
  HEAP32[i18 >> 2] = i17;
  HEAP32[i16 >> 2] = i5;
  i26 = HEAP32[i6 >> 2] | 0;
 }
 i23 = HEAP32[i10 + 12 >> 2] | 0;
 HEAPF32[i23 + (i26 << 6) >> 2] = d7;
 HEAPF32[i23 + (i26 << 6) + 4 >> 2] = d8;
 HEAPF32[i23 + (i26 << 6) + 8 >> 2] = d9;
 HEAPF32[i23 + (i26 << 6) + 12 >> 2] = d11;
 HEAPF32[i23 + (i26 << 6) + 16 >> 2] = d12;
 HEAPF32[i23 + (i26 << 6) + 20 >> 2] = d13;
 HEAPF32[i23 + (i26 << 6) + 24 >> 2] = d14;
 HEAPF32[i23 + (i26 << 6) + 28 >> 2] = d15;
 HEAP32[i23 + (i26 << 6) + 32 >> 2] = -1;
 HEAP32[i23 + (i26 << 6) + 36 >> 2] = i4;
 HEAP32[i23 + (i26 << 6) + 40 >> 2] = i2;
 i26 = i23 + (i26 << 6) + 44 | 0;
 HEAP32[i26 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i26 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i26 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 STACKTOP = i3;
 return;
}
function __ZN16btCollisionWorld16updateSingleAabbEP17btCollisionObject(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, i19 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i1 + 48 | 0;
 i4 = i1 + 32 | 0;
 i9 = i1 + 16 | 0;
 i6 = i1;
 i19 = i5 + 192 | 0;
 i16 = HEAP32[i19 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] & 63](i16, i5 + 4 | 0, i3, i4);
 d18 = +HEAPF32[113934];
 d10 = +HEAPF32[i3 >> 2] - d18;
 HEAPF32[i3 >> 2] = d10;
 i16 = i3 + 4 | 0;
 d11 = +HEAPF32[i16 >> 2] - d18;
 HEAPF32[i16 >> 2] = d11;
 i12 = i3 + 8 | 0;
 d14 = +HEAPF32[i12 >> 2] - d18;
 HEAPF32[i12 >> 2] = d14;
 d17 = d18 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 >> 2] = d17;
 i8 = i4 + 4 | 0;
 d15 = d18 + +HEAPF32[i8 >> 2];
 HEAPF32[i8 >> 2] = d15;
 i7 = i4 + 8 | 0;
 d13 = d18 + +HEAPF32[i7 >> 2];
 HEAPF32[i7 >> 2] = d13;
 if ((HEAP8[i2 + 44 | 0] | 0) != 0 ? (HEAP32[i5 + 232 >> 2] | 0) == 2 : 0) {
  i19 = HEAP32[i19 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] & 63](i19, i5 + 68 | 0, i9, i6);
  d10 = +HEAPF32[i9 >> 2] - d18;
  HEAPF32[i9 >> 2] = d10;
  i19 = i9 + 4 | 0;
  d11 = +HEAPF32[i19 >> 2] - d18;
  HEAPF32[i19 >> 2] = d11;
  i19 = i9 + 8 | 0;
  d14 = +HEAPF32[i19 >> 2] - d18;
  HEAPF32[i19 >> 2] = d14;
  d17 = d18 + +HEAPF32[i6 >> 2];
  HEAPF32[i6 >> 2] = d17;
  i19 = i6 + 4 | 0;
  d15 = d18 + +HEAPF32[i19 >> 2];
  HEAPF32[i19 >> 2] = d15;
  i19 = i6 + 8 | 0;
  d13 = d18 + +HEAPF32[i19 >> 2];
  HEAPF32[i19 >> 2] = d13;
  d18 = +HEAPF32[i3 >> 2];
  if (d10 < d18) {
   HEAPF32[i3 >> 2] = d10;
  } else {
   d10 = d18;
  }
  d18 = +HEAPF32[i16 >> 2];
  if (d11 < d18) {
   HEAPF32[i16 >> 2] = d11;
  } else {
   d11 = d18;
  }
  d18 = +HEAPF32[i12 >> 2];
  if (d14 < d18) {
   HEAPF32[i12 >> 2] = d14;
  } else {
   d14 = d18;
  }
  i12 = i3 + 12 | 0;
  d18 = +HEAPF32[i9 + 12 >> 2];
  if (d18 < +HEAPF32[i12 >> 2]) {
   HEAPF32[i12 >> 2] = d18;
  }
  d18 = +HEAPF32[i4 >> 2];
  if (d18 < d17) {
   HEAPF32[i4 >> 2] = d17;
  } else {
   d17 = d18;
  }
  d18 = +HEAPF32[i8 >> 2];
  if (d18 < d15) {
   HEAPF32[i8 >> 2] = d15;
  } else {
   d15 = d18;
  }
  d18 = +HEAPF32[i7 >> 2];
  if (d18 < d13) {
   HEAPF32[i7 >> 2] = d13;
  } else {
   d13 = d18;
  }
  i7 = i4 + 12 | 0;
  d18 = +HEAPF32[i6 + 12 >> 2];
  if (+HEAPF32[i7 >> 2] < d18) {
   HEAPF32[i7 >> 2] = d18;
  }
 }
 i6 = HEAP32[i2 + 76 >> 2] | 0;
 if ((HEAP32[i5 + 204 >> 2] & 1 | 0) == 0 ? (d10 = d17 - d10, d17 = d15 - d11, d18 = d13 - d14, !(d10 * d10 + d17 * d17 + d18 * d18 < 999999995904.0)) : 0) {
  __ZN17btCollisionObject18setActivationStateEi(i5, 5);
  if ((HEAP8[448760] | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  i3 = i2 + 80 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  HEAP8[448760] = 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2, 448768);
  i19 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19, 448824);
  i19 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19, 448896);
  i19 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19, 448968);
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 31](i6, HEAP32[i5 + 188 >> 2] | 0, i3, i4, HEAP32[i2 + 24 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN13BenchmarkDemo13createPyramidERK9btVector3iS2_(i13, i2, i15, i7) {
 i13 = i13 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, i11 = 0, d12 = 0.0, d14 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, i20 = 0, d21 = 0.0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i1 + 32 | 0;
 i5 = i1 + 16 | 0;
 i11 = i1;
 i19 = i7 + 4 | 0;
 d16 = +HEAPF32[i19 >> 2];
 i3 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d10 = +HEAPF32[i7 >> 2];
 d8 = +HEAPF32[i19 >> 2];
 i20 = i7 + 8 | 0;
 d12 = +HEAPF32[i20 >> 2];
 __ZN23btPolyhedralConvexShapeC2Ev(i3);
 HEAP32[i3 >> 2] = 447328;
 HEAP32[i3 + 4 >> 2] = 0;
 d18 = +HEAPF32[i3 + 44 >> 2];
 d8 = d8 * +HEAPF32[i3 + 16 >> 2] - d18;
 d12 = d12 * +HEAPF32[i3 + 20 >> 2] - d18;
 HEAPF32[i3 + 28 >> 2] = d10 * +HEAPF32[i3 + 12 >> 2] - d18;
 HEAPF32[i3 + 32 >> 2] = d8;
 HEAPF32[i3 + 36 >> 2] = d12;
 HEAPF32[i3 + 40 >> 2] = 0.0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 __ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3(i3, 1.0, i11);
 d12 = +HEAPF32[i7 >> 2] * 1.0199999809265137;
 d8 = +HEAPF32[i20 >> 2] * 1.0199999809265137;
 d18 = +(0 - i15 | 0);
 d10 = d12 * 2.0 + 9999999747378752.0e-20;
 d6 = d8 * 2.0 + 9999999747378752.0e-20;
 if ((i15 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i11 = i2 + 4 | 0;
 i9 = i2 + 8 | 0;
 i7 = i13 + 8 | 0;
 i13 = i13 + 4 | 0;
 d14 = +HEAPF32[i19 >> 2] * 1.0199999809265137 * 2.0 + 9999999747378752.0e-20;
 d17 = d18 * d10 * .5;
 d18 = d18 * d6 * .5;
 while (1) {
  if ((i15 | 0) > 0) {
   i20 = 0;
   do {
    d21 = d18 + d6 * +(i20 | 0);
    i19 = 0;
    do {
     d26 = +HEAPF32[i2 >> 2];
     d25 = +HEAPF32[i11 >> 2];
     d24 = +HEAPF32[i9 >> 2];
     HEAP32[i4 + 0 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 7](i3, 1.0, i4);
     i22 = __Z22btAlignedAllocInternalji(608, 16) | 0;
     __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i22, 1.0, 0, i3, i4);
     d24 = d21 + d24;
     d25 = d16 + d25;
     d26 = d26 + (d17 + d10 * +(i19 | 0));
     HEAPF32[i22 + 4 >> 2] = 1.0;
     i27 = i22 + 8 | 0;
     HEAP32[i27 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
     HEAP32[i27 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
     HEAP32[i27 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
     HEAP32[i22 + 20 >> 2] = 0;
     HEAPF32[i22 + 24 >> 2] = 1.0;
     i27 = i22 + 28 | 0;
     i23 = i22 + 44 | 0;
     HEAP32[i27 + 0 >> 2] = 0;
     HEAP32[i27 + 4 >> 2] = 0;
     HEAP32[i27 + 8 >> 2] = 0;
     HEAP32[i27 + 12 >> 2] = 0;
     HEAPF32[i23 >> 2] = 1.0;
     HEAPF32[i22 + 48 >> 2] = 0.0;
     HEAPF32[i22 + 52 >> 2] = d26;
     HEAPF32[i22 + 56 >> 2] = d25;
     HEAPF32[i22 + 60 >> 2] = d24;
     HEAPF32[i22 + 64 >> 2] = 0.0;
     HEAPF32[i22 + 184 >> 2] = +HEAPF32[i7 >> 2];
     i23 = HEAP32[i13 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i23 >> 2] | 0) + 80 >> 2] & 127](i23, i22);
     i19 = i19 + 1 | 0;
    } while ((i19 | 0) < (i15 | 0));
    i20 = i20 + 1 | 0;
   } while ((i20 | 0) < (i15 | 0));
  }
  i15 = i15 + -1 | 0;
  if ((i15 | 0) == 0) {
   break;
  } else {
   d16 = d14 + d16;
   d17 = d12 + d17;
   d18 = d8 + d18;
  }
 }
 STACKTOP = i1;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i8, i13, i11, i7, i1) {
 i8 = i8 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i4 = i2 + 136 | 0;
 i6 = i2;
 i5 = i8 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i10 = i8 + 16 | 0;
 i12 = (HEAP8[i10] | 0) != 0;
 i9 = i12 ? i11 : i13;
 i12 = i12 ? i13 : i11;
 i14 = HEAP32[i9 + 192 >> 2] | 0;
 i13 = HEAP32[i12 + 192 >> 2] | 0;
 i11 = i1 + 4 | 0;
 HEAP32[i11 >> 2] = i3;
 __ZN22SphereTriangleDetectorC2EP13btSphereShapeP15btTriangleShapef(i4, i14, i13, +__ZNK20btPersistentManifold27getContactBreakingThresholdEv(HEAP32[i5 >> 2] | 0));
 HEAP32[i6 + 132 >> 2] = 0;
 HEAPF32[i6 + 128 >> 2] = 999999984306749400.0;
 i13 = i9 + 4 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 i13 = i6 + 16 | 0;
 i5 = i9 + 20 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i13 = i6 + 32 | 0;
 i5 = i9 + 36 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i13 = i6 + 48 | 0;
 i9 = i9 + 52 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i13 = i6 + 64 | 0;
 i9 = i12 + 4 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i13 = i6 + 80 | 0;
 i9 = i12 + 20 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i13 = i6 + 96 | 0;
 i9 = i12 + 36 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i13 = i6 + 112 | 0;
 i12 = i12 + 52 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
 __ZN22SphereTriangleDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i4, i6, i1, HEAP32[i7 + 20 >> 2] | 0, (HEAP8[i10] | 0) != 0);
 if ((HEAP8[i8 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i1 + 136 >> 2] | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 8 | 0, i1 + 72 | 0);
  STACKTOP = i2;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 72 | 0, i1 + 8 | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZN31btDefaultCollisionConfigurationD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 452096;
 if ((HEAP8[i2 + 12 | 0] | 0) != 0) {
  i4 = i2 + 8 | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  i7 = i6 + 8 | 0;
  if ((HEAP32[i7 >> 2] | 0) == 0) {
   if ((HEAP8[i6 + 16 | 0] | 0) == 0 ? (i5 = HEAP32[i6 >> 2] | 0, (i5 | 0) != 0) : 0) {
    __Z21btAlignedFreeInternalPv(i5);
   }
   HEAP32[i6 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   i6 = HEAP32[i4 >> 2] | 0;
   i5 = i6 + 8 | 0;
   if ((HEAP32[i6 + 8 >> 2] | 0) == 0) {
    if ((HEAP8[i6 + 16 | 0] | 0) == 0 ? (i3 = HEAP32[i6 >> 2] | 0, (i3 | 0) != 0) : 0) {
     __Z21btAlignedFreeInternalPv(i3);
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i6 = HEAP32[i4 >> 2] | 0;
   }
  }
  __Z21btAlignedFreeInternalPv(i6);
 }
 if ((HEAP8[i2 + 28 | 0] | 0) != 0) {
  i7 = i2 + 24 | 0;
  __Z21btAlignedFreeInternalPv(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0);
  __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 }
 if ((HEAP8[i2 + 20 | 0] | 0) != 0) {
  i7 = i2 + 16 | 0;
  __Z21btAlignedFreeInternalPv(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0);
  __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 }
 i7 = i2 + 40 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 44 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 48 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 52 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 56 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 60 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 64 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 72 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 76 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 68 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 84 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 i7 = i2 + 80 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 __Z21btAlignedFreeInternalPv(HEAP32[i2 + 32 >> 2] | 0);
 i7 = i2 + 36 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
 __Z21btAlignedFreeInternalPv(HEAP32[i7 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZNK20btConvexHullInternal11Rational1287compareEx(i3, i10, i5) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 if ((HEAP8[i3 + 36 | 0] | 0) != 0) {
  i2 = HEAP32[i3 + 32 >> 2] | 0;
  i3 = ___muldi3(i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0, HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0;
  i2 = tempRet0;
  if ((i2 | 0) > (i5 | 0) | (i2 | 0) == (i5 | 0) & i3 >>> 0 > i10 >>> 0) {
   i10 = 1;
   STACKTOP = i1;
   return i10 | 0;
  }
  i10 = ((i2 | 0) < (i5 | 0) | (i2 | 0) == (i5 | 0) & i3 >>> 0 < i10 >>> 0) << 31 >> 31;
  STACKTOP = i1;
  return i10 | 0;
 }
 do {
  if ((i5 | 0) > 0 | (i5 | 0) == 0 & i10 >>> 0 > 0) {
   i2 = HEAP32[i3 + 32 >> 2] | 0;
   if ((i2 | 0) < 1) {
    i10 = -1;
    STACKTOP = i1;
    return i10 | 0;
   }
  } else {
   i2 = HEAP32[i3 + 32 >> 2] | 0;
   if ((i5 | 0) >= 0) {
    i10 = i2;
    STACKTOP = i1;
    return i10 | 0;
   }
   if ((i2 | 0) > -1) {
    i10 = 1;
    STACKTOP = i1;
    return i10 | 0;
   } else {
    i10 = _i64Subtract(0, 0, i10 | 0, i5 | 0) | 0;
    i5 = tempRet0;
    break;
   }
  }
 } while (0);
 i8 = i3 + 24 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i8 + 4 >> 2] | 0;
 i6 = (i8 | 0) < 0;
 i9 = i3 + 16 | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i9 + 4 >> 2] | 0;
 if (i6) {
  i12 = _i64Subtract(0, 0, i4 | 0, i9 | 0) | 0;
  i11 = tempRet0;
  i7 = _i64Add((i4 | 0) == 0 & (i9 | 0) == 0 & 1 | 0, 0, ~i7 | 0, ~i8 | 0) | 0;
  i4 = i12;
  i9 = i11;
  i8 = tempRet0;
 }
 if ((i5 | 0) < 0) {
  i10 = _i64Subtract(0, 0, i10 | 0, i5 | 0) | 0;
  i5 = tempRet0;
  i6 = i6 ^ 1;
 }
 i18 = ___muldi3(i10 | 0, 0, i4 | 0, 0) | 0;
 i17 = tempRet0;
 i11 = ___muldi3(i5 | 0, 0, i4 | 0, 0) | 0;
 i14 = tempRet0;
 i12 = ___muldi3(i10 | 0, 0, i9 | 0, 0) | 0;
 i13 = tempRet0;
 i16 = ___muldi3(i5 | 0, 0, i9 | 0, 0) | 0;
 i15 = tempRet0;
 i12 = _i64Add(i11 | 0, 0, i12 | 0, 0) | 0;
 i11 = tempRet0;
 i4 = _i64Add(0, i12 | 0, i18 | 0, i17 | 0) | 0;
 i9 = tempRet0;
 i7 = ___muldi3(i10 | 0, i5 | 0, i7 | 0, i8 | 0) | 0;
 i7 = _i64Add(i16 | 0, i15 | 0, i7 | 0, tempRet0 | 0) | 0;
 i7 = _i64Add(i7 | 0, tempRet0 | 0, i14 | 0, 0) | 0;
 i7 = _i64Add(i7 | 0, tempRet0 | 0, i13 | 0, 0) | 0;
 i7 = _i64Add(i7 | 0, tempRet0 | 0, i11 | 0, 0) | 0;
 i7 = _i64Add(i7 | 0, tempRet0 | 0, (i9 >>> 0 < i12 >>> 0 | (i9 | 0) == (i12 | 0) & i4 >>> 0 < 0) & 1 | 0, 0) | 0;
 i5 = tempRet0;
 if (i6) {
  i18 = _i64Subtract(0, 0, i4 | 0, i9 | 0) | 0;
  i17 = tempRet0;
  i6 = _i64Add((i4 | 0) == 0 & (i9 | 0) == 0 & 1 | 0, 0, ~i7 | 0, ~i5 | 0) | 0;
  i5 = tempRet0;
  i9 = i17;
  i4 = i18;
 } else {
  i6 = i7;
 }
 i8 = i3 + 8 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i8 + 4 >> 2] | 0;
 if (!(i8 >>> 0 < i5 >>> 0 | (i8 | 0) == (i5 | 0) & i7 >>> 0 < i6 >>> 0)) {
  if (!(i8 >>> 0 > i5 >>> 0 | (i8 | 0) == (i5 | 0) & i7 >>> 0 > i6 >>> 0)) {
   i5 = i3;
   i3 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[i5 + 4 >> 2] | 0;
   if (i5 >>> 0 < i9 >>> 0 | (i5 | 0) == (i9 | 0) & i3 >>> 0 < i4 >>> 0) {
    i3 = -1;
   } else {
    i3 = (i5 >>> 0 > i9 >>> 0 | (i5 | 0) == (i9 | 0) & i3 >>> 0 > i4 >>> 0) & 1;
   }
  } else {
   i3 = 1;
  }
 } else {
  i3 = -1;
 }
 i18 = Math_imul(i2, i3) | 0;
 STACKTOP = i1;
 return i18 | 0;
}
function __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i16, i1, i3, i2, i19) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i19 = i19 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i20 = 0;
 i2 = STACKTOP;
 i18 = HEAP32[i16 + (i1 << 2) + 68 >> 2] | 0;
 i14 = i3 & 65535;
 i17 = i18 + (i14 << 2) | 0;
 i15 = i18 + (i14 + -1 << 2) | 0;
 i3 = i16 + 60 | 0;
 i20 = HEAP32[i3 >> 2] | 0;
 i14 = HEAPU16[i18 + (i14 << 2) + 2 >> 1] | 0;
 i18 = HEAP16[i15 >> 1] | 0;
 if (!((HEAPU16[i17 >> 1] | 0) < (i18 & 65535))) {
  STACKTOP = i2;
  return;
 }
 i4 = i20 + (i14 << 6) + (i1 << 1) + 48 | 0;
 i10 = 1 << i1 & 3;
 i11 = 1 << i10 & 3;
 i7 = i20 + (i14 << 6) + (i10 << 1) + 54 | 0;
 i9 = i20 + (i14 << 6) + (i10 << 1) + 48 | 0;
 i13 = i20 + (i14 << 6) + (i11 << 1) + 54 | 0;
 i8 = i20 + (i14 << 6) + (i11 << 1) + 48 | 0;
 i12 = i16 + 92 | 0;
 i14 = i20 + (i14 << 6) | 0;
 i16 = i16 + 96 | 0;
 if (!i19) {
  while (1) {
   i5 = HEAPU16[i15 + 2 >> 1] | 0;
   if ((i18 & 1) == 0) {
    i20 = i20 + (i5 << 6) + (i1 << 1) + 48 | 0;
    HEAP16[i20 >> 1] = (HEAP16[i20 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i20 = i20 + (i5 << 6) + (i1 << 1) + 54 | 0;
    HEAP16[i20 >> 1] = (HEAP16[i20 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i4 >> 1] = (HEAP16[i4 >> 1] | 0) + -1 << 16 >> 16;
   i18 = HEAPU16[i17 >> 1] | HEAPU16[i17 + 2 >> 1] << 16;
   i20 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
   HEAP16[i17 >> 1] = i20;
   HEAP16[i17 + 2 >> 1] = i20 >>> 16;
   HEAP16[i15 >> 1] = i18;
   HEAP16[i15 + 2 >> 1] = i18 >>> 16;
   i17 = i17 + -4 | 0;
   i15 = i15 + -4 | 0;
   i18 = HEAP16[i15 >> 1] | 0;
   if (!((HEAPU16[i17 >> 1] | 0) < (i18 & 65535))) {
    break;
   }
   i20 = HEAP32[i3 >> 2] | 0;
  }
  STACKTOP = i2;
  return;
 }
 while (1) {
  i19 = HEAPU16[i15 + 2 >> 1] | 0;
  if ((i18 & 1) == 0) {
   i20 = i20 + (i19 << 6) + (i1 << 1) + 48 | 0;
   HEAP16[i20 >> 1] = (HEAP16[i20 >> 1] | 0) + 1 << 16 >> 16;
  } else {
   if (((((HEAPU16[i7 >> 1] | 0) >= (HEAPU16[i20 + (i19 << 6) + (i10 << 1) + 48 >> 1] | 0) ? (HEAPU16[i20 + (i19 << 6) + (i10 << 1) + 54 >> 1] | 0) >= (HEAPU16[i9 >> 1] | 0) : 0) ? (HEAPU16[i13 >> 1] | 0) >= (HEAPU16[i20 + (i19 << 6) + (i11 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i20 + (i19 << 6) + (i11 << 1) + 54 >> 1] | 0) >= (HEAPU16[i8 >> 1] | 0) : 0) ? (i5 = HEAP32[i12 >> 2] | 0, i6 = i20 + (i19 << 6) | 0, FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, i14, i6) | 0, i5 = HEAP32[i16 >> 2] | 0, (i5 | 0) != 0) : 0) {
    FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, i14, i6) | 0;
   }
   i20 = i20 + (i19 << 6) + (i1 << 1) + 54 | 0;
   HEAP16[i20 >> 1] = (HEAP16[i20 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i4 >> 1] = (HEAP16[i4 >> 1] | 0) + -1 << 16 >> 16;
  i18 = HEAPU16[i17 >> 1] | HEAPU16[i17 + 2 >> 1] << 16;
  i20 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
  HEAP16[i17 >> 1] = i20;
  HEAP16[i17 + 2 >> 1] = i20 >>> 16;
  HEAP16[i15 >> 1] = i18;
  HEAP16[i15 + 2 >> 1] = i18 >>> 16;
  i17 = i17 + -4 | 0;
  i15 = i15 + -4 | 0;
  i18 = HEAP16[i15 >> 1] | 0;
  if (!((HEAPU16[i17 >> 1] | 0) < (i18 & 65535))) {
   break;
  }
  i20 = HEAP32[i3 >> 2] | 0;
 }
 STACKTOP = i2;
 return;
}
function __ZN6btDbvt19optimizeIncrementalEi(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i3;
 if ((i5 | 0) < 0) {
  i5 = HEAP32[i1 + 12 >> 2] | 0;
 }
 i11 = HEAP32[i1 >> 2] | 0;
 if (!((i11 | 0) != 0 & (i5 | 0) > 0)) {
  STACKTOP = i3;
  return;
 }
 i4 = i1 + 16 | 0;
 while (1) {
  i7 = i11 + 40 | 0;
  L9 : do {
   if ((HEAP32[i7 >> 2] | 0) != 0) {
    i6 = 0;
    while (1) {
     i8 = (HEAP32[i4 >> 2] | 0) >>> i6 & 1;
     i14 = i11 + 32 | 0;
     i15 = HEAP32[i14 >> 2] | 0;
     if (i15 >>> 0 > i11 >>> 0) {
      i13 = i15 + 40 | 0;
      i17 = (HEAP32[i13 >> 2] | 0) == (i11 | 0) | 0;
      i16 = i17 ^ 1;
      i9 = HEAP32[i15 + (i16 << 2) + 36 >> 2] | 0;
      i10 = i15 + 32 | 0;
      i12 = HEAP32[i10 >> 2] | 0;
      if ((i12 | 0) == 0) {
       HEAP32[i1 >> 2] = i11;
      } else {
       HEAP32[i12 + (((HEAP32[i12 + 40 >> 2] | 0) == (i15 | 0)) << 2) + 36 >> 2] = i11;
      }
      HEAP32[i9 + 32 >> 2] = i11;
      HEAP32[i10 >> 2] = i11;
      HEAP32[i14 >> 2] = i12;
      i14 = i11 + 36 | 0;
      HEAP32[i15 + 36 >> 2] = HEAP32[i14 >> 2];
      HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
      HEAP32[(HEAP32[i14 >> 2] | 0) + 32 >> 2] = i15;
      HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] = i15;
      HEAP32[i11 + (i17 << 2) + 36 >> 2] = i15;
      HEAP32[i11 + (i16 << 2) + 36 >> 2] = i9;
      HEAP32[i2 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
      HEAP32[i2 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
      HEAP32[i2 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
      HEAP32[i2 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
      HEAP32[i2 + 20 >> 2] = HEAP32[i15 + 20 >> 2];
      HEAP32[i2 + 24 >> 2] = HEAP32[i15 + 24 >> 2];
      HEAP32[i2 + 28 >> 2] = HEAP32[i15 + 28 >> 2];
      HEAP32[i15 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
      HEAP32[i15 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
      HEAP32[i15 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
      HEAP32[i15 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
      HEAP32[i15 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
      HEAP32[i15 + 24 >> 2] = HEAP32[i11 + 24 >> 2];
      HEAP32[i15 + 28 >> 2] = HEAP32[i11 + 28 >> 2];
      HEAP32[i11 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
      HEAP32[i11 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
      HEAP32[i11 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
      HEAP32[i11 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
      HEAP32[i11 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
      HEAP32[i11 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
      HEAP32[i11 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
      HEAP32[i11 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
      i11 = i15;
     }
     i11 = HEAP32[i11 + (i8 << 2) + 36 >> 2] | 0;
     i7 = i11 + 40 | 0;
     if ((HEAP32[i7 >> 2] | 0) == 0) {
      break L9;
     }
     i6 = i6 + 1 & 31;
    }
   }
  } while (0);
  if ((__ZL10removeleafP6btDbvtP10btDbvtNode(i1, i11) | 0) == 0) {
   i6 = 0;
  } else {
   i6 = HEAP32[i1 >> 2] | 0;
  }
  __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i1, i6, i11);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  i5 = i5 + -1 | 0;
  if ((i5 | 0) == 0) {
   break;
  }
  i11 = HEAP32[i1 >> 2] | 0;
 }
 STACKTOP = i3;
 return;
}
function __ZN20btAxisSweep3InternalItE25calculateOverlappingPairsEP12btDispatcher(i9, i4) {
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i1 + 33 | 0;
 i6 = i1 + 32 | 0;
 i10 = i1 + 16 | 0;
 i2 = i1;
 i5 = i9 + 92 | 0;
 i23 = HEAP32[i5 >> 2] | 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 56 >> 2] & 127](i23) | 0)) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0;
 i8 = i3 + 4 | 0;
 i11 = HEAP32[i8 >> 2] | 0;
 if ((i11 | 0) > 1) {
  i11 = i11 + -1 | 0;
  HEAP8[i7 + 0 | 0] = HEAP8[i6 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i7, 0, i11);
  i11 = HEAP32[i8 >> 2] | 0;
 }
 i9 = i9 + 104 | 0;
 i17 = i11 - (HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 __ZN20btAlignedObjectArrayI16btBroadphasePairE6resizeEiRKS0_(i3, i17, i10);
 HEAP32[i9 >> 2] = 0;
 i17 = HEAP32[i8 >> 2] | 0;
 if ((i17 | 0) > 0) {
  i10 = i3 + 12 | 0;
  i12 = 0;
  i18 = 0;
  i11 = 0;
  while (1) {
   i13 = HEAP32[i10 >> 2] | 0;
   i14 = i13 + (i11 << 4) | 0;
   i16 = HEAP32[i14 >> 2] | 0;
   i13 = i13 + (i11 << 4) + 4 | 0;
   i15 = HEAP32[i13 >> 2] | 0;
   if ((i16 | 0) == (i12 | 0)) {
    if ((i15 | 0) == (i18 | 0)) {
     i15 = i18;
     i16 = i12;
     i12 = 13;
    } else {
     i16 = i12;
     i12 = 9;
    }
   } else {
    i12 = 9;
   }
   L13 : do {
    if ((i12 | 0) == 9) {
     i12 = 0;
     i21 = i16 + 54 | 0;
     i23 = i15 + 54 | 0;
     i20 = i15 + 48 | 0;
     i22 = i16 + 48 | 0;
     i19 = 0;
     while (1) {
      if ((HEAPU16[i21 + (i19 << 1) >> 1] | 0) < (HEAPU16[i20 + (i19 << 1) >> 1] | 0)) {
       i12 = 13;
       break L13;
      }
      i18 = i19 + 1 | 0;
      if ((HEAPU16[i23 + (i19 << 1) >> 1] | 0) < (HEAPU16[i22 + (i19 << 1) >> 1] | 0)) {
       i12 = 13;
       break L13;
      }
      if ((i18 | 0) < 3) {
       i19 = i18;
      } else {
       break;
      }
     }
    }
   } while (0);
   if ((i12 | 0) == 13) {
    i17 = HEAP32[i5 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i17 >> 2] | 0) + 32 >> 2] & 63](i17, i14, i4);
    HEAP32[i14 >> 2] = 0;
    HEAP32[i13 >> 2] = 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    HEAP32[113812] = (HEAP32[113812] | 0) + -1;
    i17 = HEAP32[i8 >> 2] | 0;
   }
   i11 = i11 + 1 | 0;
   if ((i11 | 0) >= (i17 | 0)) {
    break;
   } else {
    i12 = i16;
    i18 = i15;
   }
  }
  if ((i17 | 0) > 1) {
   i17 = i17 + -1 | 0;
   HEAP8[i7 + 0 | 0] = HEAP8[i6 + 0 | 0] | 0;
   __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvT_ii(i3, i7, 0, i17);
   i17 = HEAP32[i8 >> 2] | 0;
  }
 }
 i23 = i17 - (HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i2 + 0 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 __ZN20btAlignedObjectArrayI16btBroadphasePairE6resizeEiRKS0_(i3, i23, i2);
 HEAP32[i9 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZN23btConvexConvexAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i4, i3, i1, i5, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 i4 = i2 + 568 | 0;
 i5 = i2 + 392 | 0;
 i10 = i2 + 32 | 0;
 i12 = i2 + 16 | 0;
 i11 = i2;
 i7 = i3 + 68 | 0;
 i6 = i3 + 4 | 0;
 d20 = +HEAPF32[i3 + 116 >> 2] - +HEAPF32[i3 + 52 >> 2];
 d19 = +HEAPF32[i3 + 120 >> 2] - +HEAPF32[i3 + 56 >> 2];
 d18 = +HEAPF32[i3 + 124 >> 2] - +HEAPF32[i3 + 60 >> 2];
 i9 = i1 + 68 | 0;
 i8 = i1 + 4 | 0;
 d15 = +HEAPF32[i1 + 116 >> 2] - +HEAPF32[i1 + 52 >> 2];
 d13 = +HEAPF32[i1 + 120 >> 2] - +HEAPF32[i1 + 56 >> 2];
 d14 = +HEAPF32[i1 + 124 >> 2] - +HEAPF32[i1 + 60 >> 2];
 d17 = +HEAPF32[i3 + 248 >> 2];
 if (d20 * d20 + d19 * d19 + d18 * d18 < d17 * d17) {
  d20 = +HEAPF32[i1 + 248 >> 2];
  if (!(!(d15 * d15 + d13 * d13 + d14 * d14 < d20 * d20) & (HEAP8[459e3] | 0) == 0)) {
   d20 = 1.0;
   STACKTOP = i2;
   return +d20;
  }
 } else {
  if ((HEAP8[459e3] | 0) != 0) {
   d20 = 1.0;
   STACKTOP = i2;
   return +d20;
  }
 }
 i21 = HEAP32[i3 + 192 >> 2] | 0;
 d20 = +HEAPF32[i1 + 244 >> 2];
 __ZN21btConvexInternalShapeC2Ev(i4);
 HEAP32[i4 >> 2] = 456848;
 HEAP32[i4 + 4 >> 2] = 8;
 HEAPF32[i4 + 28 >> 2] = d20;
 HEAPF32[i4 + 44 >> 2] = d20;
 HEAP32[i5 >> 2] = 450968;
 i16 = i5 + 164 | 0;
 HEAPF32[i16 >> 2] = 999999984306749400.0;
 HEAP32[i5 + 168 >> 2] = 0;
 HEAPF32[i5 + 172 >> 2] = 0.0;
 HEAPF32[i10 + 308 >> 2] = 9999999747378752.0e-20;
 i22 = i10 + 332 | 0;
 HEAP8[i22] = HEAP8[i22] & -16;
 __ZN15btGjkConvexCastC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolver(i12, i21, i4, i10);
 if (__ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i12, i6, i7, i8, i9, i5) | 0) {
  i12 = i3 + 240 | 0;
  d13 = +HEAPF32[i16 >> 2];
  if (+HEAPF32[i12 >> 2] > d13) {
   HEAPF32[i12 >> 2] = d13;
  }
  i12 = i1 + 240 | 0;
  if (+HEAPF32[i12 >> 2] > d13) {
   HEAPF32[i12 >> 2] = d13;
  }
  if (!(d13 < 1.0)) {
   d13 = 1.0;
  }
 } else {
  d13 = 1.0;
 }
 i22 = HEAP32[i1 + 192 >> 2] | 0;
 d20 = +HEAPF32[i3 + 244 >> 2];
 __ZN21btConvexInternalShapeC2Ev(i4);
 HEAP32[i4 >> 2] = 456848;
 HEAP32[i4 + 4 >> 2] = 8;
 HEAPF32[i4 + 28 >> 2] = d20;
 HEAPF32[i4 + 44 >> 2] = d20;
 HEAP32[i5 >> 2] = 450968;
 i12 = i5 + 164 | 0;
 HEAPF32[i12 >> 2] = 999999984306749400.0;
 HEAP32[i5 + 168 >> 2] = 0;
 HEAPF32[i5 + 172 >> 2] = 0.0;
 HEAPF32[i10 + 308 >> 2] = 9999999747378752.0e-20;
 i21 = i10 + 332 | 0;
 HEAP8[i21] = HEAP8[i21] & -16;
 __ZN15btGjkConvexCastC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolver(i11, i4, i22, i10);
 if (__ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i11, i6, i7, i8, i9, i5) | 0) {
  i3 = i3 + 240 | 0;
  d14 = +HEAPF32[i12 >> 2];
  if (+HEAPF32[i3 >> 2] > d14) {
   HEAPF32[i3 >> 2] = d14;
  }
  i1 = i1 + 240 | 0;
  if (+HEAPF32[i1 >> 2] > d14) {
   HEAPF32[i1 >> 2] = d14;
  }
  if (d13 > d14) {
   d13 = d14;
  }
 }
 d20 = d13;
 STACKTOP = i2;
 return +d20;
}
function __ZN13btRaycastBar24castEP16btCollisionWorld(i1, i15) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, d22 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i11 = i2;
 i3 = i1 + 40024 | 0;
 __ZN7btClock5resetEv(i3);
 i6 = i11 + 4 | 0;
 i7 = i11 + 8 | 0;
 i8 = i11 + 12 | 0;
 i9 = i11 + 14 | 0;
 i10 = i11 + 16 | 0;
 i12 = i11 + 20 | 0;
 i13 = i11 + 36 | 0;
 i4 = i11 + 68 | 0;
 i5 = i11 + 52 | 0;
 i14 = 0;
 do {
  i16 = i1 + (i14 << 4) | 0;
  i17 = i1 + (i14 << 4) + 8e3 | 0;
  HEAPF32[i6 >> 2] = 1.0;
  HEAP32[i7 >> 2] = 0;
  HEAP16[i8 >> 1] = 1;
  HEAP16[i9 >> 1] = -1;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i11 >> 2] = 444008;
  HEAP32[i12 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i12 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
  HEAP32[i13 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 63](i15, i16, i17, i11);
  i16 = i1 + (i14 << 4) + 24e3 | 0;
  if ((HEAP32[i7 >> 2] | 0) == 0) {
   HEAP32[i16 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   HEAPF32[i1 + (i14 << 4) + 32e3 >> 2] = 1.0;
   HEAPF32[i1 + (i14 << 4) + 32004 >> 2] = 0.0;
   HEAPF32[i1 + (i14 << 4) + 32008 >> 2] = 0.0;
   HEAPF32[i1 + (i14 << 4) + 32012 >> 2] = 0.0;
  } else {
   HEAP32[i16 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   i21 = i1 + (i14 << 4) + 32e3 | 0;
   HEAP32[i21 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i21 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i21 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i21 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   d22 = +HEAPF32[i21 >> 2];
   i16 = i1 + (i14 << 4) + 32004 | 0;
   d20 = +HEAPF32[i16 >> 2];
   i17 = i1 + (i14 << 4) + 32008 | 0;
   d19 = +HEAPF32[i17 >> 2];
   d18 = 1.0 / +Math_sqrt(+(d22 * d22 + d20 * d20 + d19 * d19));
   HEAPF32[i21 >> 2] = d22 * d18;
   HEAPF32[i16 >> 2] = d20 * d18;
   HEAPF32[i17 >> 2] = d19 * d18;
  }
  i14 = i14 + 1 | 0;
 } while ((i14 | 0) != 500);
 i3 = __ZN7btClock19getTimeMillisecondsEv(i3) | 0;
 i4 = i1 + 40004 | 0;
 i3 = (HEAP32[i4 >> 2] | 0) + i3 | 0;
 HEAP32[i4 >> 2] = i3;
 i5 = i1 + 4e4 | 0;
 i21 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i21 + 1;
 if ((i21 | 0) <= 49) {
  STACKTOP = i2;
  return;
 }
 i6 = i1 + 40016 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = (i3 | 0) < (i7 | 0) ? i3 : i7;
 i6 = i1 + 40020 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = (i3 | 0) > (i7 | 0) ? i3 : i7;
 i21 = i1 + 40008 | 0;
 HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + i3;
 i21 = i1 + 40012 | 0;
 HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK11btRigidBody9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btCollisionObject9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 248 >> 2] = +HEAPF32[i2 + 256 >> 2];
 HEAPF32[i1 + 252 >> 2] = +HEAPF32[i2 + 260 >> 2];
 HEAPF32[i1 + 256 >> 2] = +HEAPF32[i2 + 264 >> 2];
 HEAPF32[i1 + 260 >> 2] = +HEAPF32[i2 + 268 >> 2];
 HEAPF32[i1 + 264 >> 2] = +HEAPF32[i2 + 272 >> 2];
 HEAPF32[i1 + 268 >> 2] = +HEAPF32[i2 + 276 >> 2];
 HEAPF32[i1 + 272 >> 2] = +HEAPF32[i2 + 280 >> 2];
 HEAPF32[i1 + 276 >> 2] = +HEAPF32[i2 + 284 >> 2];
 HEAPF32[i1 + 280 >> 2] = +HEAPF32[i2 + 288 >> 2];
 HEAPF32[i1 + 284 >> 2] = +HEAPF32[i2 + 292 >> 2];
 HEAPF32[i1 + 288 >> 2] = +HEAPF32[i2 + 296 >> 2];
 HEAPF32[i1 + 292 >> 2] = +HEAPF32[i2 + 300 >> 2];
 HEAPF32[i1 + 296 >> 2] = +HEAPF32[i2 + 304 >> 2];
 HEAPF32[i1 + 300 >> 2] = +HEAPF32[i2 + 308 >> 2];
 HEAPF32[i1 + 304 >> 2] = +HEAPF32[i2 + 312 >> 2];
 HEAPF32[i1 + 308 >> 2] = +HEAPF32[i2 + 316 >> 2];
 HEAPF32[i1 + 312 >> 2] = +HEAPF32[i2 + 320 >> 2];
 HEAPF32[i1 + 316 >> 2] = +HEAPF32[i2 + 324 >> 2];
 HEAPF32[i1 + 320 >> 2] = +HEAPF32[i2 + 328 >> 2];
 HEAPF32[i1 + 324 >> 2] = +HEAPF32[i2 + 332 >> 2];
 HEAPF32[i1 + 440 >> 2] = +HEAPF32[i2 + 336 >> 2];
 HEAPF32[i1 + 328 >> 2] = +HEAPF32[i2 + 536 >> 2];
 HEAPF32[i1 + 332 >> 2] = +HEAPF32[i2 + 540 >> 2];
 HEAPF32[i1 + 336 >> 2] = +HEAPF32[i2 + 544 >> 2];
 HEAPF32[i1 + 340 >> 2] = +HEAPF32[i2 + 548 >> 2];
 HEAPF32[i1 + 344 >> 2] = +HEAPF32[i2 + 340 >> 2];
 HEAPF32[i1 + 348 >> 2] = +HEAPF32[i2 + 344 >> 2];
 HEAPF32[i1 + 352 >> 2] = +HEAPF32[i2 + 348 >> 2];
 HEAPF32[i1 + 356 >> 2] = +HEAPF32[i2 + 352 >> 2];
 HEAPF32[i1 + 360 >> 2] = +HEAPF32[i2 + 356 >> 2];
 HEAPF32[i1 + 364 >> 2] = +HEAPF32[i2 + 360 >> 2];
 HEAPF32[i1 + 368 >> 2] = +HEAPF32[i2 + 364 >> 2];
 HEAPF32[i1 + 372 >> 2] = +HEAPF32[i2 + 368 >> 2];
 HEAPF32[i1 + 376 >> 2] = +HEAPF32[i2 + 372 >> 2];
 HEAPF32[i1 + 380 >> 2] = +HEAPF32[i2 + 376 >> 2];
 HEAPF32[i1 + 384 >> 2] = +HEAPF32[i2 + 380 >> 2];
 HEAPF32[i1 + 388 >> 2] = +HEAPF32[i2 + 384 >> 2];
 HEAPF32[i1 + 392 >> 2] = +HEAPF32[i2 + 388 >> 2];
 HEAPF32[i1 + 396 >> 2] = +HEAPF32[i2 + 392 >> 2];
 HEAPF32[i1 + 400 >> 2] = +HEAPF32[i2 + 396 >> 2];
 HEAPF32[i1 + 404 >> 2] = +HEAPF32[i2 + 400 >> 2];
 HEAPF32[i1 + 408 >> 2] = +HEAPF32[i2 + 404 >> 2];
 HEAPF32[i1 + 412 >> 2] = +HEAPF32[i2 + 408 >> 2];
 HEAPF32[i1 + 416 >> 2] = +HEAPF32[i2 + 412 >> 2];
 HEAPF32[i1 + 420 >> 2] = +HEAPF32[i2 + 416 >> 2];
 HEAPF32[i1 + 424 >> 2] = +HEAPF32[i2 + 420 >> 2];
 HEAPF32[i1 + 428 >> 2] = +HEAPF32[i2 + 424 >> 2];
 HEAPF32[i1 + 432 >> 2] = +HEAPF32[i2 + 428 >> 2];
 HEAPF32[i1 + 436 >> 2] = +HEAPF32[i2 + 432 >> 2];
 HEAPF32[i1 + 444 >> 2] = +HEAPF32[i2 + 436 >> 2];
 HEAPF32[i1 + 448 >> 2] = +HEAPF32[i2 + 440 >> 2];
 HEAP32[i1 + 476 >> 2] = HEAPU8[i2 + 444 | 0] | 0;
 HEAPF32[i1 + 452 >> 2] = +HEAPF32[i2 + 448 >> 2];
 HEAPF32[i1 + 456 >> 2] = +HEAPF32[i2 + 452 >> 2];
 HEAPF32[i1 + 460 >> 2] = +HEAPF32[i2 + 456 >> 2];
 HEAPF32[i1 + 464 >> 2] = +HEAPF32[i2 + 460 >> 2];
 HEAPF32[i1 + 468 >> 2] = +HEAPF32[i2 + 464 >> 2];
 HEAPF32[i1 + 472 >> 2] = +HEAPF32[i2 + 468 >> 2];
 STACKTOP = i4;
 return 445888;
}
function __Z11cullPoints2iPfiiPi(i5, i8, i2, i1, i7) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, i20 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 32 | 0;
 i6 = i3;
 if ((i5 | 0) == 2) {
  d12 = (+HEAPF32[i8 >> 2] + +HEAPF32[i8 + 8 >> 2]) * .5;
  d10 = (+HEAPF32[i8 + 4 >> 2] + +HEAPF32[i8 + 12 >> 2]) * .5;
  i9 = 9;
 } else if ((i5 | 0) != 1) {
  i18 = i5 + -1 | 0;
  if ((i18 | 0) > 0) {
   d16 = 0.0;
   d12 = 0.0;
   d13 = 0.0;
   i19 = 0;
   do {
    i20 = i19 << 1;
    d10 = +HEAPF32[i8 + (i20 << 2) >> 2];
    d14 = +HEAPF32[i8 + (i20 + 3 << 2) >> 2];
    d11 = +HEAPF32[i8 + (i20 + 2 << 2) >> 2];
    d15 = +HEAPF32[i8 + ((i20 | 1) << 2) >> 2];
    d17 = d10 * d14 - d11 * d15;
    d16 = d16 + d17;
    d12 = d12 + (d10 + d11) * d17;
    d13 = d13 + (d14 + d15) * d17;
    i19 = i19 + 1 | 0;
   } while ((i19 | 0) != (i18 | 0));
  } else {
   d16 = 0.0;
   d12 = 0.0;
   d13 = 0.0;
  }
  i20 = i5 << 1;
  d17 = +HEAPF32[i8 + (i20 + -2 << 2) >> 2];
  d10 = +HEAPF32[i8 + 4 >> 2];
  d15 = +HEAPF32[i8 >> 2];
  d11 = +HEAPF32[i8 + (i20 + -1 << 2) >> 2];
  d14 = d17 * d10 - d15 * d11;
  d16 = d16 + d14;
  if (+Math_abs(+d16) > 1.1920928955078125e-7) {
   d16 = 1.0 / (d16 * 3.0);
  } else {
   d16 = 999999984306749400.0;
  }
  if ((i5 | 0) > 0) {
   d12 = d16 * (d12 + d14 * (d17 + d15));
   d10 = d16 * (d13 + d14 * (d11 + d10));
   i9 = 9;
  } else {
   i18 = 0;
  }
 } else {
  d12 = +HEAPF32[i8 >> 2];
  d10 = +HEAPF32[i8 + 4 >> 2];
  i9 = 9;
 }
 if ((i9 | 0) == 9) {
  i9 = 0;
  while (1) {
   i20 = i9 << 1;
   HEAPF32[i4 + (i9 << 2) >> 2] = +Math_atan2(+(+HEAPF32[i8 + ((i20 | 1) << 2) >> 2] - d10), +(+HEAPF32[i8 + (i20 << 2) >> 2] - d12));
   i9 = i9 + 1 | 0;
   if ((i9 | 0) == (i5 | 0)) {
    i8 = 0;
    break;
   }
  }
  while (1) {
   HEAP32[i6 + (i8 << 2) >> 2] = 1;
   i8 = i8 + 1 | 0;
   if ((i8 | 0) == (i5 | 0)) {
    i18 = 1;
    break;
   }
  }
 }
 i9 = i6 + (i1 << 2) | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i7 >> 2] = i1;
 i8 = i7 + 4 | 0;
 if ((i2 | 0) <= 1) {
  STACKTOP = i3;
  return;
 }
 d10 = 6.2831854820251465 / +(i2 | 0);
 d11 = +HEAPF32[i4 + (i1 << 2) >> 2];
 if (i18) {
  i7 = 1;
 } else {
  i4 = 1;
  while (1) {
   HEAP32[i8 >> 2] = i1;
   HEAP32[i9 >> 2] = 0;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i2 | 0)) {
    break;
   } else {
    i8 = i8 + 4 | 0;
   }
  }
  STACKTOP = i3;
  return;
 }
 while (1) {
  d12 = +(i7 | 0) * d10 + d11;
  if (d12 > 3.1415927410125732) {
   d12 = d12 + -6.2831854820251465;
  }
  HEAP32[i8 >> 2] = i1;
  i18 = i1;
  i9 = 0;
  d13 = 1.0e9;
  do {
   if ((HEAP32[i6 + (i9 << 2) >> 2] | 0) != 0) {
    d14 = +Math_abs(+(+HEAPF32[i4 + (i9 << 2) >> 2] - d12));
    if (d14 > 3.1415927410125732) {
     d14 = 6.2831854820251465 - d14;
    }
    if (d14 < d13) {
     HEAP32[i8 >> 2] = i9;
     i18 = i9;
     d13 = d14;
    }
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i5 | 0));
  HEAP32[i6 + (i18 << 2) >> 2] = 0;
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == (i2 | 0)) {
   break;
  } else {
   i8 = i8 + 4 | 0;
  }
 }
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCache10growTablesEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = STACKTOP;
 i1 = i4 + 12 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i4 + 36 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i2 | 0) >= (i5 | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((i2 | 0) <= (i5 | 0)) {
  i9 = i4 + 40 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i8 = 0;
    i10 = i2;
   } else {
    i8 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i10 = HEAP32[i6 >> 2] | 0;
   }
   i7 = i4 + 44 | 0;
   if ((i10 | 0) > 0) {
    i11 = 0;
    do {
     i12 = i8 + (i11 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i10 | 0));
   }
   i10 = HEAP32[i7 >> 2] | 0;
   i11 = i4 + 48 | 0;
   if ((i10 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i10);
    }
    HEAP32[i7 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i7 >> 2] = i8;
   HEAP32[i9 >> 2] = i5;
  } else {
   i8 = HEAP32[i4 + 44 >> 2] | 0;
  }
  i9 = i2;
  do {
   i7 = i8 + (i9 << 2) | 0;
   if ((i7 | 0) != 0) {
    HEAP32[i7 >> 2] = 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 i6 = i4 + 56 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i5 | 0)) {
  i10 = i4 + 60 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i8 = 0;
    i12 = i7;
   } else {
    i8 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i12 = HEAP32[i6 >> 2] | 0;
   }
   i9 = i4 + 64 | 0;
   if ((i12 | 0) > 0) {
    i11 = 0;
    do {
     i13 = i8 + (i11 << 2) | 0;
     if ((i13 | 0) != 0) {
      HEAP32[i13 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i12 | 0));
   }
   i11 = HEAP32[i9 >> 2] | 0;
   i12 = i4 + 68 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i12] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i9 >> 2] = 0;
   }
   HEAP8[i12] = 1;
   HEAP32[i9 >> 2] = i8;
   HEAP32[i10 >> 2] = i5;
  } else {
   i8 = HEAP32[i4 + 64 >> 2] | 0;
  }
  do {
   i9 = i8 + (i7 << 2) | 0;
   if ((i9 | 0) != 0) {
    HEAP32[i9 >> 2] = 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 if ((i5 | 0) > 0) {
  _memset(HEAP32[i4 + 44 >> 2] | 0, -1, i5 << 2 | 0) | 0;
  _memset(HEAP32[i4 + 64 >> 2] | 0, -1, i5 << 2 | 0) | 0;
 }
 if ((i2 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i5 = HEAP32[i4 + 16 >> 2] | 0;
 i6 = HEAP32[i4 + 44 >> 2] | 0;
 i4 = HEAP32[i4 + 64 >> 2] | 0;
 i7 = 0;
 do {
  i13 = HEAP32[(HEAP32[i5 + (i7 << 4) + 4 >> 2] | 0) + 12 >> 2] << 16 | HEAP32[(HEAP32[i5 + (i7 << 4) >> 2] | 0) + 12 >> 2];
  i13 = i13 + ~(i13 << 15) | 0;
  i13 = (i13 >> 10 ^ i13) * 9 | 0;
  i13 = i13 >> 6 ^ i13;
  i13 = i13 + ~(i13 << 11) | 0;
  i13 = i6 + (((i13 >> 16 ^ i13) & (HEAP32[i1 >> 2] | 0) + -1) << 2) | 0;
  HEAP32[i4 + (i7 << 2) >> 2] = HEAP32[i13 >> 2];
  HEAP32[i13 >> 2] = i7;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i2 | 0));
 STACKTOP = i3;
 return;
}
function __ZN25btTriangleRaycastCallback15processTriangleEP9btVector3ii(i2, i8, i3, i4) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, d7 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i6 + 16 | 0;
 i5 = i6;
 i23 = i8 + 16 | 0;
 d28 = +HEAPF32[i8 >> 2];
 d26 = +HEAPF32[i23 >> 2] - d28;
 i22 = i8 + 20 | 0;
 d27 = +HEAPF32[i8 + 4 >> 2];
 d11 = +HEAPF32[i22 >> 2] - d27;
 d21 = +HEAPF32[i8 + 24 >> 2];
 d24 = +HEAPF32[i8 + 8 >> 2];
 d30 = d21 - d24;
 d20 = +HEAPF32[i8 + 32 >> 2];
 d12 = d20 - d28;
 d18 = +HEAPF32[i8 + 36 >> 2];
 d32 = d18 - d27;
 d19 = +HEAPF32[i8 + 40 >> 2];
 d14 = d19 - d24;
 d15 = d11 * d14 - d30 * d32;
 d14 = d30 * d12 - d26 * d14;
 d12 = d26 * d32 - d11 * d12;
 HEAPF32[i1 >> 2] = d15;
 i13 = i1 + 4 | 0;
 HEAPF32[i13 >> 2] = d14;
 i9 = i1 + 8 | 0;
 HEAPF32[i9 >> 2] = d12;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 d11 = d28 * d15 + d27 * d14 + d24 * d12;
 d32 = +HEAPF32[i2 + 4 >> 2];
 d26 = +HEAPF32[i2 + 8 >> 2];
 d30 = +HEAPF32[i2 + 12 >> 2];
 d7 = d15 * d32 + d14 * d26 + d12 * d30 - d11;
 d25 = +HEAPF32[i2 + 20 >> 2];
 d31 = +HEAPF32[i2 + 24 >> 2];
 d29 = +HEAPF32[i2 + 28 >> 2];
 d11 = d15 * d25 + d14 * d31 + d12 * d29 - d11;
 if (d7 * d11 >= 0.0) {
  STACKTOP = i6;
  return;
 }
 i8 = HEAP32[i2 + 36 >> 2] | 0;
 if ((i8 & 1 | 0) != 0 & d7 > 0.0) {
  STACKTOP = i6;
  return;
 }
 d11 = d7 / (d7 - d11);
 i10 = i2 + 40 | 0;
 if (!(d11 < +HEAPF32[i10 >> 2])) {
  STACKTOP = i6;
  return;
 }
 d17 = d15 * d15 + d14 * d14 + d12 * d12;
 d16 = d17 * -9999999747378752.0e-20;
 d33 = 1.0 - d11;
 d25 = d25 * d11 + d32 * d33;
 d26 = d31 * d11 + d26 * d33;
 d29 = d29 * d11 + d30 * d33;
 d28 = d28 - d25;
 d27 = d27 - d26;
 d24 = d24 - d29;
 d30 = +HEAPF32[i23 >> 2] - d25;
 d31 = +HEAPF32[i22 >> 2] - d26;
 d21 = d21 - d29;
 if (!(d12 * (d28 * d31 - d27 * d30) + (d15 * (d27 * d21 - d24 * d31) + d14 * (d24 * d30 - d28 * d21)) >= d16)) {
  STACKTOP = i6;
  return;
 }
 d20 = d20 - d25;
 d18 = d18 - d26;
 d19 = d19 - d29;
 if (!(d12 * (d30 * d18 - d31 * d20) + (d15 * (d31 * d19 - d21 * d18) + d14 * (d21 * d20 - d30 * d19)) >= d16)) {
  STACKTOP = i6;
  return;
 }
 if (!(d12 * (d27 * d20 - d28 * d18) + (d15 * (d24 * d18 - d27 * d19) + d14 * (d28 * d19 - d24 * d20)) >= d16)) {
  STACKTOP = i6;
  return;
 }
 d33 = 1.0 / +Math_sqrt(+d17);
 d15 = d15 * d33;
 HEAPF32[i1 >> 2] = d15;
 d14 = d14 * d33;
 HEAPF32[i13 >> 2] = d14;
 d12 = d12 * d33;
 HEAPF32[i9 >> 2] = d12;
 i9 = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] | 0;
 if ((i8 & 2 | 0) == 0 & !(d7 <= 0.0)) {
  HEAPF32[i10 >> 2] = +FUNCTION_TABLE_diidii[i9 & 3](i2, i1, d11, i3, i4);
  STACKTOP = i6;
  return;
 } else {
  HEAPF32[i5 >> 2] = -d15;
  HEAPF32[i5 + 4 >> 2] = -d14;
  HEAPF32[i5 + 8 >> 2] = -d12;
  HEAPF32[i5 + 12 >> 2] = 0.0;
  HEAPF32[i10 >> 2] = +FUNCTION_TABLE_diidii[i9 & 3](i2, i5, d11, i3, i4);
  STACKTOP = i6;
  return;
 }
}
function __ZN9btHashMapI9btHashPtrP16btCollisionShapeE10growTablesERKS0_(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 i1 = i4 + 48 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i4 + 4 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 if ((i3 | 0) >= (i5 | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((i3 | 0) <= (i5 | 0)) {
  i9 = i4 + 8 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i7 = 0;
    i11 = i3;
   } else {
    i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i11 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i4 + 12 | 0;
   if ((i11 | 0) > 0) {
    i10 = 0;
    do {
     i12 = i7 + (i10 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i10 << 2) >> 2];
     }
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i11 | 0));
   }
   i11 = HEAP32[i8 >> 2] | 0;
   i10 = i4 + 16 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i8 >> 2] = i7;
   HEAP32[i9 >> 2] = i5;
  } else {
   i7 = HEAP32[i4 + 12 >> 2] | 0;
  }
  i9 = i3;
  do {
   i8 = i7 + (i9 << 2) | 0;
   if ((i8 | 0) != 0) {
    HEAP32[i8 >> 2] = 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 i6 = i4 + 24 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i5 | 0)) {
  i9 = i4 + 28 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i10 = 0;
    i13 = i7;
   } else {
    i10 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i13 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i4 + 32 | 0;
   if ((i13 | 0) > 0) {
    i11 = 0;
    do {
     i12 = i10 + (i11 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i13 | 0));
   }
   i12 = HEAP32[i8 >> 2] | 0;
   i11 = i4 + 36 | 0;
   if ((i12 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i12);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i8 >> 2] = i10;
   HEAP32[i9 >> 2] = i5;
  } else {
   i10 = HEAP32[i4 + 32 >> 2] | 0;
  }
  do {
   i8 = i10 + (i7 << 2) | 0;
   if ((i8 | 0) != 0) {
    HEAP32[i8 >> 2] = 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 if ((i5 | 0) > 0) {
  _memset(HEAP32[i4 + 12 >> 2] | 0, -1, i5 << 2 | 0) | 0;
  _memset(HEAP32[i4 + 32 >> 2] | 0, -1, i5 << 2 | 0) | 0;
 }
 if ((i3 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[i4 + 72 >> 2] | 0;
 i6 = HEAP32[i4 + 12 >> 2] | 0;
 i7 = HEAP32[i4 + 32 >> 2] | 0;
 i4 = 0;
 do {
  i13 = HEAP32[i5 + (i4 << 3) >> 2] | 0;
  i13 = i13 + ~(i13 << 15) | 0;
  i13 = (i13 >> 10 ^ i13) * 9 | 0;
  i13 = i13 >> 6 ^ i13;
  i13 = i13 + ~(i13 << 11) | 0;
  i13 = i6 + (((i13 >> 16 ^ i13) & (HEAP32[i1 >> 2] | 0) + -1) << 2) | 0;
  HEAP32[i7 + (i4 << 2) >> 2] = HEAP32[i13 >> 2];
  HEAP32[i13 >> 2] = i4;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i3 | 0));
 STACKTOP = i2;
 return;
}
function __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i8, i9, i1, i6) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2;
 d23 = +HEAPF32[i8 + 20 >> 2];
 d15 = +HEAPF32[i8 + 40 >> 2];
 d10 = +HEAPF32[i8 + 24 >> 2];
 d14 = +HEAPF32[i8 + 36 >> 2];
 d19 = d23 * d15 - d10 * d14;
 d21 = +HEAPF32[i8 + 32 >> 2];
 d25 = +HEAPF32[i8 + 16 >> 2];
 d18 = d10 * d21 - d15 * d25;
 d17 = d14 * d25 - d23 * d21;
 d24 = +HEAPF32[i8 >> 2];
 d4 = +HEAPF32[i8 + 4 >> 2];
 d20 = +HEAPF32[i8 + 8 >> 2];
 d22 = 1.0 / (d19 * d24 + d4 * d18 + d17 * d20);
 d19 = d19 * d22;
 d16 = d22 * (d14 * d20 - d15 * d4);
 d13 = d22 * (d10 * d4 - d23 * d20);
 d18 = d18 * d22;
 d15 = d22 * (d15 * d24 - d21 * d20);
 d10 = d22 * (d25 * d20 - d10 * d24);
 d17 = d17 * d22;
 d14 = d22 * (d21 * d4 - d14 * d24);
 d4 = d22 * (d23 * d24 - d25 * d4);
 d25 = +HEAPF32[i9 >> 2];
 d24 = +HEAPF32[i9 + 4 >> 2];
 d23 = +HEAPF32[i9 + 8 >> 2];
 d22 = +HEAPF32[i9 + 16 >> 2];
 d21 = +HEAPF32[i9 + 20 >> 2];
 d20 = +HEAPF32[i9 + 24 >> 2];
 d7 = +HEAPF32[i9 + 32 >> 2];
 d5 = +HEAPF32[i9 + 36 >> 2];
 d3 = +HEAPF32[i9 + 40 >> 2];
 HEAPF32[i11 >> 2] = d19 * d25 + d18 * d24 + d17 * d23;
 HEAPF32[i11 + 4 >> 2] = d25 * d16 + d24 * d15 + d14 * d23;
 HEAPF32[i11 + 8 >> 2] = d25 * d13 + d24 * d10 + d4 * d23;
 HEAPF32[i11 + 12 >> 2] = 0.0;
 HEAPF32[i11 + 16 >> 2] = d19 * d22 + d18 * d21 + d17 * d20;
 HEAPF32[i11 + 20 >> 2] = d16 * d22 + d15 * d21 + d14 * d20;
 HEAPF32[i11 + 24 >> 2] = d13 * d22 + d10 * d21 + d4 * d20;
 HEAPF32[i11 + 28 >> 2] = 0.0;
 HEAPF32[i11 + 32 >> 2] = d19 * d7 + d18 * d5 + d17 * d3;
 HEAPF32[i11 + 36 >> 2] = d16 * d7 + d15 * d5 + d14 * d3;
 HEAPF32[i11 + 40 >> 2] = d13 * d7 + d10 * d5 + d4 * d3;
 HEAPF32[i11 + 44 >> 2] = 0.0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i11, i12);
 d3 = +HEAPF32[i12 >> 2];
 i11 = i12 + 4 | 0;
 d4 = +HEAPF32[i11 >> 2];
 i8 = i12 + 8 | 0;
 d5 = +HEAPF32[i8 >> 2];
 i9 = i12 + 12 | 0;
 d10 = +HEAPF32[i9 >> 2];
 d7 = 1.0 / +Math_sqrt(+(d3 * d3 + d4 * d4 + d5 * d5 + d10 * d10));
 d3 = d3 * d7;
 HEAPF32[i12 >> 2] = d3;
 d4 = d4 * d7;
 HEAPF32[i11 >> 2] = d4;
 d5 = d5 * d7;
 HEAPF32[i8 >> 2] = d5;
 d7 = d10 * d7;
 HEAPF32[i9 >> 2] = d7;
 d7 = d7 < -1.0 ? -1.0 : d7;
 HEAPF32[i6 >> 2] = +Math_acos(+(d7 > 1.0 ? 1.0 : d7)) * 2.0;
 HEAPF32[i1 >> 2] = d3;
 i6 = i1 + 4 | 0;
 HEAPF32[i6 >> 2] = d4;
 i8 = i1 + 8 | 0;
 HEAPF32[i8 >> 2] = d5;
 i9 = i1 + 12 | 0;
 HEAPF32[i9 >> 2] = 0.0;
 d7 = d3 * d3 + d4 * d4 + d5 * d5;
 if (d7 < 1.4210854715202004e-14) {
  HEAPF32[i1 >> 2] = 1.0;
  HEAPF32[i6 >> 2] = 0.0;
  HEAPF32[i8 >> 2] = 0.0;
  HEAPF32[i9 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 } else {
  d25 = 1.0 / +Math_sqrt(+d7);
  HEAPF32[i1 >> 2] = d3 * d25;
  HEAPF32[i6 >> 2] = d25 * d4;
  HEAPF32[i8 >> 2] = d25 * d5;
  STACKTOP = i2;
  return;
 }
}
function __ZN26btBoxBoxCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i9, i6, i7, i8, i1) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2;
 i3 = HEAP32[i9 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i12 = HEAP32[i6 + 192 >> 2] | 0;
 i11 = HEAP32[i7 + 192 >> 2] | 0;
 i10 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i4 + 132 >> 2] = 0;
 HEAPF32[i4 + 128 >> 2] = 999999984306749400.0;
 i3 = i6 + 4 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i3 = i4 + 16 | 0;
 i13 = i6 + 20 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 i3 = i4 + 32 | 0;
 i13 = i6 + 36 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 i3 = i4 + 48 | 0;
 i6 = i6 + 52 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i6 = i4 + 64 | 0;
 i3 = i7 + 4 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i6 = i4 + 80 | 0;
 i3 = i7 + 20 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i6 = i4 + 96 | 0;
 i3 = i7 + 36 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i6 = i4 + 112 | 0;
 i7 = i7 + 52 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 __ZN16btBoxBoxDetectorC2EP10btBoxShapeS1_(i5, i12, i11);
 __ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i5, i4, i1, HEAP32[i8 + 20 >> 2] | 0, 0);
 if ((HEAP8[i9 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i1 + 136 >> 2] | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 8 | 0, i1 + 72 | 0);
  STACKTOP = i2;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 72 | 0, i1 + 8 | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER11btRigidBodyS1_RK18btSolverConstraint(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, i25 = 0, d26 = 0.0, d27 = 0.0;
 i16 = STACKTOP;
 i25 = i3 + 84 | 0;
 d26 = +HEAPF32[i25 >> 2];
 i6 = i3 + 16 | 0;
 d15 = +HEAPF32[i6 >> 2];
 i14 = i2 + 504 | 0;
 i22 = i3 + 20 | 0;
 d12 = +HEAPF32[i22 >> 2];
 i21 = i2 + 508 | 0;
 i4 = i3 + 24 | 0;
 d13 = +HEAPF32[i4 >> 2];
 i17 = i2 + 512 | 0;
 i18 = i2 + 520 | 0;
 i19 = i2 + 524 | 0;
 i20 = i2 + 528 | 0;
 i5 = i1 + 504 | 0;
 i7 = i1 + 508 | 0;
 i8 = i1 + 512 | 0;
 i9 = i1 + 520 | 0;
 i10 = i1 + 524 | 0;
 i11 = i1 + 528 | 0;
 d23 = +HEAPF32[i3 + 92 >> 2];
 d23 = +HEAPF32[i3 + 116 >> 2] - d26 * +HEAPF32[i3 + 120 >> 2] - (d15 * +HEAPF32[i14 >> 2] + d12 * +HEAPF32[i21 >> 2] + d13 * +HEAPF32[i17 >> 2] + (+HEAPF32[i3 >> 2] * +HEAPF32[i18 >> 2] + +HEAPF32[i3 + 4 >> 2] * +HEAPF32[i19 >> 2] + +HEAPF32[i3 + 8 >> 2] * +HEAPF32[i20 >> 2])) * d23 - d23 * (+HEAPF32[i3 + 32 >> 2] * +HEAPF32[i9 >> 2] + +HEAPF32[i3 + 36 >> 2] * +HEAPF32[i10 >> 2] + +HEAPF32[i3 + 40 >> 2] * +HEAPF32[i11 >> 2] - (d15 * +HEAPF32[i5 >> 2] + d12 * +HEAPF32[i7 >> 2] + d13 * +HEAPF32[i8 >> 2]));
 d24 = d26 + d23;
 d27 = +HEAPF32[i3 + 124 >> 2];
 do {
  if (!(d24 < d27)) {
   d27 = +HEAPF32[i3 + 128 >> 2];
   if (d24 > d27) {
    HEAPF32[i25 >> 2] = d27;
    d23 = d27 - d26;
    break;
   } else {
    HEAPF32[i25 >> 2] = d24;
    break;
   }
  } else {
   HEAPF32[i25 >> 2] = d27;
   d23 = d27 - d26;
  }
 } while (0);
 if (+HEAPF32[i2 + 336 >> 2] != 0.0) {
  d27 = d23 * +HEAPF32[i2 + 556 >> 2] * d12;
  d26 = d23 * +HEAPF32[i2 + 560 >> 2] * d13;
  HEAPF32[i14 >> 2] = +HEAPF32[i14 >> 2] + d23 * +HEAPF32[i2 + 552 >> 2] * d15;
  HEAPF32[i21 >> 2] = d27 + +HEAPF32[i21 >> 2];
  HEAPF32[i17 >> 2] = d26 + +HEAPF32[i17 >> 2];
  d26 = d23 * +HEAPF32[i2 + 540 >> 2] * +HEAPF32[i3 + 52 >> 2];
  d27 = d23 * +HEAPF32[i2 + 544 >> 2] * +HEAPF32[i3 + 56 >> 2];
  HEAPF32[i18 >> 2] = d23 * +HEAPF32[i2 + 536 >> 2] * +HEAPF32[i3 + 48 >> 2] + +HEAPF32[i18 >> 2];
  HEAPF32[i19 >> 2] = d26 + +HEAPF32[i19 >> 2];
  HEAPF32[i20 >> 2] = d27 + +HEAPF32[i20 >> 2];
 }
 if (!(+HEAPF32[i1 + 336 >> 2] != 0.0)) {
  STACKTOP = i16;
  return;
 }
 d27 = d23 * +HEAPF32[i1 + 556 >> 2] * +HEAPF32[i22 >> 2];
 d26 = d23 * +HEAPF32[i1 + 560 >> 2] * +HEAPF32[i4 >> 2];
 HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] - d23 * +HEAPF32[i1 + 552 >> 2] * +HEAPF32[i6 >> 2];
 HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] - d27;
 HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] - d26;
 d26 = d23 * +HEAPF32[i1 + 540 >> 2] * +HEAPF32[i3 + 68 >> 2];
 d27 = d23 * +HEAPF32[i1 + 544 >> 2] * +HEAPF32[i3 + 72 >> 2];
 HEAPF32[i9 >> 2] = d23 * +HEAPF32[i1 + 536 >> 2] * +HEAPF32[i3 + 64 >> 2] + +HEAPF32[i9 >> 2];
 HEAPF32[i10 >> 2] = d26 + +HEAPF32[i10 >> 2];
 HEAPF32[i11 >> 2] = d27 + +HEAPF32[i11 >> 2];
 STACKTOP = i16;
 return;
}
function __ZN13BenchmarkDemo11createTest4Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 64 | 0;
 i13 = i3 + 48 | 0;
 i15 = i3 + 32 | 0;
 i2 = i3 + 16 | 0;
 i16 = i3;
 i1 = __Z22btAlignedAllocInternalji(112, 16) | 0;
 __ZN17btConvexHullShapeC2EPKfii(i1, 0, 0, 16);
 i11 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
 HEAPF32[i13 >> 2] = 1.0;
 HEAPF32[i13 + 4 >> 2] = 1.0;
 HEAPF32[i13 + 8 >> 2] = 1.0;
 HEAPF32[i13 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_vii[i11 & 127](i1, i13);
 i13 = i15 + 4 | 0;
 i11 = i15 + 8 | 0;
 i9 = i15 + 12 | 0;
 i5 = 0;
 do {
  i17 = i5 * 3 | 0;
  d12 = +HEAPF32[442600 + (i17 + 1 << 2) >> 2];
  d14 = +HEAPF32[442600 + (i17 + 2 << 2) >> 2];
  HEAPF32[i15 >> 2] = +HEAPF32[442600 + (i17 << 2) >> 2];
  HEAPF32[i13 >> 2] = d12;
  HEAPF32[i11 >> 2] = d14;
  HEAPF32[i9 >> 2] = 0.0;
  __ZN17btConvexHullShape8addPointERK9btVector3(i1, i15);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != 43);
 HEAP32[i2 + 0 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 7](i1, 1.0, i16);
 i5 = i7 + 8 | 0;
 i9 = i7 + 4 | 0;
 d6 = 3.0;
 i7 = 0;
 d10 = -18.0;
 d8 = 1.5;
 while (1) {
  d14 = d8 + 3.0;
  i11 = 0;
  do {
   d12 = d10 + d14 * +(i11 | 0);
   i13 = 0;
   do {
    HEAP32[i4 + 0 >> 2] = 0;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = 0;
    HEAP32[i4 + 12 >> 2] = 0;
    FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 7](i1, 1.0, i4);
    i17 = __Z22btAlignedAllocInternalji(608, 16) | 0;
    __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i17, 1.0, 0, i1, i4);
    d18 = d10 + d14 * +(i13 | 0);
    HEAPF32[i17 + 4 >> 2] = 1.0;
    i15 = i17 + 8 | 0;
    HEAP32[i15 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i17 + 20 >> 2] = 0;
    HEAPF32[i17 + 24 >> 2] = 1.0;
    i15 = i17 + 28 | 0;
    i16 = i17 + 44 | 0;
    HEAP32[i15 + 0 >> 2] = 0;
    HEAP32[i15 + 4 >> 2] = 0;
    HEAP32[i15 + 8 >> 2] = 0;
    HEAP32[i15 + 12 >> 2] = 0;
    HEAPF32[i16 >> 2] = 1.0;
    HEAP32[i17 + 48 >> 2] = 0;
    HEAPF32[i17 + 52 >> 2] = d18;
    HEAPF32[i17 + 56 >> 2] = d6;
    HEAPF32[i17 + 60 >> 2] = d12;
    HEAPF32[i17 + 64 >> 2] = 0.0;
    HEAPF32[i17 + 184 >> 2] = +HEAPF32[i5 >> 2];
    i16 = HEAP32[i9 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i16 >> 2] | 0) + 80 >> 2] & 127](i16, i17);
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) < 8);
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < 8);
  d12 = d8 * 1.0099999904632568;
  i7 = i7 + 1 | 0;
  if ((i7 | 0) >= 15) {
   break;
  } else {
   d6 = d6 + (d12 + 3.0);
   d10 = d10 - d8 * .05000000074505806 * 7.0;
   d8 = d12;
  }
 }
 STACKTOP = i3;
 return;
}
function __ZN13BenchmarkDemo10createWallERK9btVector3iS2_(i12, i1, i14, i7) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, i11 = 0, i13 = 0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i5 + 32 | 0;
 i9 = i5 + 16 | 0;
 i3 = i5;
 i2 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 d16 = +HEAPF32[i7 >> 2];
 i11 = i7 + 4 | 0;
 d6 = +HEAPF32[i11 >> 2];
 i13 = i7 + 8 | 0;
 d15 = +HEAPF32[i13 >> 2];
 __ZN23btPolyhedralConvexShapeC2Ev(i2);
 HEAP32[i2 >> 2] = 447328;
 HEAP32[i2 + 4 >> 2] = 0;
 d8 = +HEAPF32[i2 + 44 >> 2];
 d6 = d6 * +HEAPF32[i2 + 16 >> 2] - d8;
 d15 = d15 * +HEAPF32[i2 + 20 >> 2] - d8;
 HEAPF32[i2 + 28 >> 2] = d16 * +HEAPF32[i2 + 12 >> 2] - d8;
 HEAPF32[i2 + 32 >> 2] = d6;
 HEAPF32[i2 + 36 >> 2] = d15;
 HEAPF32[i2 + 40 >> 2] = 0.0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 __ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3(i2, 1.0, i9);
 d15 = +HEAPF32[i11 >> 2];
 d6 = +HEAPF32[i13 >> 2];
 d8 = d6 * 2.0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 if ((i14 | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 d10 = d15 * 2.0;
 i11 = i1 + 4 | 0;
 i7 = i1 + 8 | 0;
 i9 = i12 + 8 | 0;
 i13 = i12 + 4 | 0;
 i12 = i14;
 d16 = +(0 - i14 | 0) * d8 * .5;
 while (1) {
  if ((i12 | 0) > 0) {
   i14 = 0;
   do {
    d21 = +HEAPF32[i1 >> 2];
    d20 = +HEAPF32[i11 >> 2];
    d19 = +HEAPF32[i7 >> 2];
    HEAP32[i4 + 0 >> 2] = 0;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = 0;
    HEAP32[i4 + 12 >> 2] = 0;
    FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 1.0, i4);
    i17 = __Z22btAlignedAllocInternalji(608, 16) | 0;
    __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i17, 1.0, 0, i2, i4);
    d19 = d16 + d8 * +(i14 | 0) + d19;
    d20 = d15 + d20;
    d21 = d21 + 0.0;
    HEAPF32[i17 + 4 >> 2] = 1.0;
    i22 = i17 + 8 | 0;
    HEAP32[i22 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
    HEAP32[i22 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i22 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i17 + 20 >> 2] = 0;
    HEAPF32[i17 + 24 >> 2] = 1.0;
    i22 = i17 + 28 | 0;
    i18 = i17 + 44 | 0;
    HEAP32[i22 + 0 >> 2] = 0;
    HEAP32[i22 + 4 >> 2] = 0;
    HEAP32[i22 + 8 >> 2] = 0;
    HEAP32[i22 + 12 >> 2] = 0;
    HEAPF32[i18 >> 2] = 1.0;
    HEAPF32[i17 + 48 >> 2] = 0.0;
    HEAPF32[i17 + 52 >> 2] = d21;
    HEAPF32[i17 + 56 >> 2] = d20;
    HEAPF32[i17 + 60 >> 2] = d19;
    HEAPF32[i17 + 64 >> 2] = 0.0;
    HEAPF32[i17 + 184 >> 2] = +HEAPF32[i9 >> 2];
    i18 = HEAP32[i13 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i18 >> 2] | 0) + 80 >> 2] & 127](i18, i17);
    i14 = i14 + 1 | 0;
   } while ((i14 | 0) < (i12 | 0));
  }
  i12 = i12 + -1 | 0;
  if ((i12 | 0) == 0) {
   break;
  } else {
   d15 = d10 + d15;
   d16 = d6 + d16;
  }
 }
 STACKTOP = i5;
 return;
}
function __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeE10growTablesERKS0_(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 i1 = i4 + 48 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i4 + 4 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 if ((i3 | 0) >= (i5 | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((i3 | 0) <= (i5 | 0)) {
  i9 = i4 + 8 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i7 = 0;
    i11 = i3;
   } else {
    i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i11 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i4 + 12 | 0;
   if ((i11 | 0) > 0) {
    i10 = 0;
    do {
     i12 = i7 + (i10 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i10 << 2) >> 2];
     }
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i11 | 0));
   }
   i11 = HEAP32[i8 >> 2] | 0;
   i10 = i4 + 16 | 0;
   if ((i11 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i11);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i8 >> 2] = i7;
   HEAP32[i9 >> 2] = i5;
  } else {
   i7 = HEAP32[i4 + 12 >> 2] | 0;
  }
  i9 = i3;
  do {
   i8 = i7 + (i9 << 2) | 0;
   if ((i8 | 0) != 0) {
    HEAP32[i8 >> 2] = 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 i6 = i4 + 24 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i5 | 0)) {
  i9 = i4 + 28 | 0;
  if ((HEAP32[i9 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i10 = 0;
    i13 = i7;
   } else {
    i10 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i13 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i4 + 32 | 0;
   if ((i13 | 0) > 0) {
    i11 = 0;
    do {
     i12 = i10 + (i11 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i13 | 0));
   }
   i12 = HEAP32[i8 >> 2] | 0;
   i11 = i4 + 36 | 0;
   if ((i12 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i12);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i8 >> 2] = i10;
   HEAP32[i9 >> 2] = i5;
  } else {
   i10 = HEAP32[i4 + 32 >> 2] | 0;
  }
  do {
   i8 = i10 + (i7 << 2) | 0;
   if ((i8 | 0) != 0) {
    HEAP32[i8 >> 2] = 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 HEAP32[i6 >> 2] = i5;
 if ((i5 | 0) > 0) {
  _memset(HEAP32[i4 + 12 >> 2] | 0, -1, i5 << 2 | 0) | 0;
  _memset(HEAP32[i4 + 32 >> 2] | 0, -1, i5 << 2 | 0) | 0;
 }
 if ((i3 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i4 + 72 >> 2] | 0;
 i5 = HEAP32[i4 + 12 >> 2] | 0;
 i7 = HEAP32[i4 + 32 >> 2] | 0;
 i4 = 0;
 do {
  i13 = i5 + (((HEAPU16[i6 + (i4 << 2) + 2 >> 1] << 16) + (HEAP16[i6 + (i4 << 2) >> 1] | 0) & (HEAP32[i1 >> 2] | 0) + -1) << 2) | 0;
  HEAP32[i7 + (i4 << 2) >> 2] = HEAP32[i13 >> 2];
  HEAP32[i13 >> 2] = i4;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i3 | 0));
 STACKTOP = i2;
 return;
}
function __ZN13BenchmarkDemo11exitPhysicsEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 i3 = i2 + 36 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i6 = i2 + 44 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i9 | 0) > 0) {
  i8 = 0;
  do {
   i10 = HEAP32[i7 + (i8 << 2) >> 2] | 0;
   if ((i10 | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] & 255](i10);
    i9 = HEAP32[i3 >> 2] | 0;
    i7 = HEAP32[i6 >> 2] | 0;
   }
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < (i9 | 0));
 }
 i8 = i2 + 48 | 0;
 if ((i7 | 0) != 0) {
  if ((HEAP8[i8] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i7);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i8] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 + 40 >> 2] = 0;
 i3 = i2 + 4 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 L14 : do {
  if ((i6 | 0) != 0 ? (i5 = HEAP32[i6 + 8 >> 2] | 0, (i5 | 0) > 0) : 0) {
   while (1) {
    i5 = i5 + -1 | 0;
    i7 = HEAP32[(HEAP32[i6 + 16 >> 2] | 0) + (i5 << 2) >> 2] | 0;
    i8 = (i7 | 0) == 0;
    if (!((HEAP32[i7 + 232 >> 2] & 2 | 0) == 0 | i8) ? (i4 = HEAP32[i7 + 472 >> 2] | 0, (i4 | 0) != 0) : 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 255](i4);
     i6 = HEAP32[i3 >> 2] | 0;
    }
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6, i7);
    if (!i8) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 255](i7);
    }
    if ((i5 | 0) <= 0) {
     break L14;
    }
    i6 = HEAP32[i3 >> 2] | 0;
   }
  }
 } while (0);
 i5 = i2 + 16 | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 i4 = i2 + 24 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 if ((i8 | 0) > 0) {
  i7 = 0;
  do {
   i9 = HEAP32[i6 + (i7 << 2) >> 2] | 0;
   if ((i9 | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] & 255](i9);
    i6 = HEAP32[i4 >> 2] | 0;
    i8 = HEAP32[i5 >> 2] | 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < (i8 | 0));
 }
 i7 = i2 + 28 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i7] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i7] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 255](i4);
 }
 HEAP32[i3 >> 2] = 0;
 i3 = i2 + 60 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 255](i4);
 }
 HEAP32[i3 >> 2] = 0;
 i3 = i2 + 52 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 255](i4);
 }
 HEAP32[i3 >> 2] = 0;
 i3 = i2 + 56 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 255](i4);
 }
 HEAP32[i3 >> 2] = 0;
 i2 = i2 + 64 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP32[i2 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 255](i3);
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER11btRigidBodyS1_RK18btSolverConstraint(i5, i2, i3, i1) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var d4 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, i18 = 0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0;
 i16 = STACKTOP;
 d24 = +HEAPF32[i1 + 132 >> 2];
 if (!(d24 != 0.0)) {
  STACKTOP = i16;
  return;
 }
 HEAP32[111486] = (HEAP32[111486] | 0) + 1;
 i5 = i1 + 80 | 0;
 d25 = +HEAPF32[i5 >> 2];
 i10 = i1 + 16 | 0;
 d19 = +HEAPF32[i10 >> 2];
 i18 = i2 + 568 | 0;
 i7 = i1 + 20 | 0;
 d4 = +HEAPF32[i7 >> 2];
 i20 = i2 + 572 | 0;
 i8 = i1 + 24 | 0;
 d17 = +HEAPF32[i8 >> 2];
 i21 = i2 + 576 | 0;
 i22 = i2 + 584 | 0;
 i23 = i2 + 588 | 0;
 i6 = i2 + 592 | 0;
 i9 = i3 + 568 | 0;
 i11 = i3 + 572 | 0;
 i12 = i3 + 576 | 0;
 i13 = i3 + 584 | 0;
 i14 = i3 + 588 | 0;
 i15 = i3 + 592 | 0;
 d27 = +HEAPF32[i1 + 92 >> 2];
 d27 = d24 - d25 * +HEAPF32[i1 + 120 >> 2] - (d19 * +HEAPF32[i18 >> 2] + d4 * +HEAPF32[i20 >> 2] + d17 * +HEAPF32[i21 >> 2] + (+HEAPF32[i1 >> 2] * +HEAPF32[i22 >> 2] + +HEAPF32[i1 + 4 >> 2] * +HEAPF32[i23 >> 2] + +HEAPF32[i1 + 8 >> 2] * +HEAPF32[i6 >> 2])) * d27 - d27 * (+HEAPF32[i1 + 32 >> 2] * +HEAPF32[i13 >> 2] + +HEAPF32[i1 + 36 >> 2] * +HEAPF32[i14 >> 2] + +HEAPF32[i1 + 40 >> 2] * +HEAPF32[i15 >> 2] - (d19 * +HEAPF32[i9 >> 2] + d4 * +HEAPF32[i11 >> 2] + d17 * +HEAPF32[i12 >> 2]));
 d26 = d25 + d27;
 d24 = +HEAPF32[i1 + 124 >> 2];
 if (d26 < d24) {
  d27 = d24 - d25;
 } else {
  d24 = d26;
 }
 HEAPF32[i5 >> 2] = d24;
 if (+HEAPF32[i2 + 336 >> 2] != 0.0) {
  d26 = d27 * +HEAPF32[i2 + 556 >> 2] * d4;
  d25 = d27 * +HEAPF32[i2 + 560 >> 2] * d17;
  HEAPF32[i18 >> 2] = +HEAPF32[i18 >> 2] + d27 * +HEAPF32[i2 + 552 >> 2] * d19;
  HEAPF32[i20 >> 2] = d26 + +HEAPF32[i20 >> 2];
  HEAPF32[i21 >> 2] = d25 + +HEAPF32[i21 >> 2];
  d25 = d27 * +HEAPF32[i2 + 540 >> 2] * +HEAPF32[i1 + 52 >> 2];
  d26 = d27 * +HEAPF32[i2 + 544 >> 2] * +HEAPF32[i1 + 56 >> 2];
  HEAPF32[i22 >> 2] = d27 * +HEAPF32[i2 + 536 >> 2] * +HEAPF32[i1 + 48 >> 2] + +HEAPF32[i22 >> 2];
  HEAPF32[i23 >> 2] = d25 + +HEAPF32[i23 >> 2];
  HEAPF32[i6 >> 2] = d26 + +HEAPF32[i6 >> 2];
 }
 if (!(+HEAPF32[i3 + 336 >> 2] != 0.0)) {
  STACKTOP = i16;
  return;
 }
 d26 = d27 * +HEAPF32[i3 + 556 >> 2] * +HEAPF32[i7 >> 2];
 d25 = d27 * +HEAPF32[i3 + 560 >> 2] * +HEAPF32[i8 >> 2];
 HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] - d27 * +HEAPF32[i3 + 552 >> 2] * +HEAPF32[i10 >> 2];
 HEAPF32[i11 >> 2] = +HEAPF32[i11 >> 2] - d26;
 HEAPF32[i12 >> 2] = +HEAPF32[i12 >> 2] - d25;
 d25 = d27 * +HEAPF32[i3 + 540 >> 2] * +HEAPF32[i1 + 68 >> 2];
 d26 = d27 * +HEAPF32[i3 + 544 >> 2] * +HEAPF32[i1 + 72 >> 2];
 HEAPF32[i13 >> 2] = d27 * +HEAPF32[i3 + 536 >> 2] * +HEAPF32[i1 + 64 >> 2] + +HEAPF32[i13 >> 2];
 HEAPF32[i14 >> 2] = d25 + +HEAPF32[i14 >> 2];
 HEAPF32[i15 >> 2] = d26 + +HEAPF32[i15 >> 2];
 STACKTOP = i16;
 return;
}
function __ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f(i1, i6, i5, i4, i3, d2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 HEAP32[i1 >> 2] = 456432;
 i10 = i1 + 8 | 0;
 i9 = i1 + 72 | 0;
 i8 = i1 + 136 | 0;
 HEAP32[i1 + 4 >> 2] = i6;
 HEAP32[i10 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i6 = i1 + 24 | 0;
 i10 = i5 + 16 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i6 = i1 + 40 | 0;
 i10 = i5 + 32 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i6 = i1 + 56 | 0;
 i5 = i5 + 48 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i9 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i6 = i1 + 88 | 0;
 i5 = i4 + 16 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i6 = i1 + 104 | 0;
 i5 = i4 + 32 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i6 = i1 + 120 | 0;
 i5 = i4 + 48 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i6 = i1 + 152 | 0;
 i5 = i3 + 16 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i6 = i1 + 168 | 0;
 i5 = i3 + 32 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i6 = i1 + 184 | 0;
 i5 = i3 + 48 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAPF32[i1 + 200 >> 2] = 1.0;
 HEAPF32[i1 + 204 >> 2] = d2;
 HEAPF32[i1 + 208 >> 2] = 0.0;
 STACKTOP = i7;
 return;
}
function __ZNK14btCapsuleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i8, i9, i7, i2) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, i30 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i1 + 16 | 0;
 i6 = i1;
 i3 = i8 + 52 | 0;
 i18 = HEAP32[i3 >> 2] | 0;
 d4 = +HEAPF32[i8 + (((i18 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 if ((i2 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i15 = i5 + 4 | 0;
 i16 = i5 + 8 | 0;
 i10 = i8 + 12 | 0;
 i11 = i8 + 16 | 0;
 i13 = i8 + 20 | 0;
 i12 = i6 + 4 | 0;
 i14 = i6 + 8 | 0;
 i17 = 0;
 while (1) {
  i19 = i8 + (i18 << 2) + 28 | 0;
  HEAP32[i5 + 0 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i5 + (i18 << 2) >> 2] = +HEAPF32[i19 >> 2];
  i18 = i9 + (i17 << 4) | 0;
  i19 = i9 + (i17 << 4) + 4 | 0;
  i20 = i9 + (i17 << 4) + 8 | 0;
  d24 = d4 * +HEAPF32[i18 >> 2] * +HEAPF32[i10 >> 2] + +HEAPF32[i5 >> 2];
  d27 = d4 * +HEAPF32[i19 >> 2] * +HEAPF32[i11 >> 2] + +HEAPF32[i15 >> 2];
  d21 = d4 * +HEAPF32[i20 >> 2] * +HEAPF32[i13 >> 2] + +HEAPF32[i16 >> 2];
  d25 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i8 >> 2] | 0) + 44 >> 2] & 7](i8);
  d26 = +HEAPF32[i18 >> 2];
  d23 = +HEAPF32[i19 >> 2];
  d22 = +HEAPF32[i20 >> 2];
  d24 = d24 - d25 * d26;
  d27 = d27 - d25 * d23;
  d25 = d21 - d25 * d22;
  d21 = d26 * d24 + d23 * d27 + d22 * d25;
  if (d21 > -999999984306749400.0) {
   HEAPF32[i7 + (i17 << 4) >> 2] = d24;
   HEAPF32[i7 + (i17 << 4) + 4 >> 2] = d27;
   HEAPF32[i7 + (i17 << 4) + 8 >> 2] = d25;
   HEAPF32[i7 + (i17 << 4) + 12 >> 2] = 0.0;
   d24 = +HEAPF32[i18 >> 2];
   d23 = +HEAPF32[i19 >> 2];
   d22 = +HEAPF32[i20 >> 2];
  } else {
   d24 = d26;
   d21 = -999999984306749400.0;
  }
  HEAP32[i6 + 0 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
  i30 = HEAP32[i3 >> 2] | 0;
  HEAPF32[i6 + (i30 << 2) >> 2] = -+HEAPF32[i8 + (i30 << 2) + 28 >> 2];
  d29 = d4 * d24 * +HEAPF32[i10 >> 2] + +HEAPF32[i6 >> 2];
  d24 = d4 * d23 * +HEAPF32[i11 >> 2] + +HEAPF32[i12 >> 2];
  d28 = d4 * d22 * +HEAPF32[i13 >> 2] + +HEAPF32[i14 >> 2];
  d23 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i8 >> 2] | 0) + 44 >> 2] & 7](i8);
  d25 = +HEAPF32[i18 >> 2];
  d26 = +HEAPF32[i19 >> 2];
  d27 = +HEAPF32[i20 >> 2];
  d22 = d29 - d23 * d25;
  d24 = d24 - d23 * d26;
  d23 = d28 - d23 * d27;
  if (d25 * d22 + d26 * d24 + d27 * d23 > d21) {
   HEAPF32[i7 + (i17 << 4) >> 2] = d22;
   HEAPF32[i7 + (i17 << 4) + 4 >> 2] = d24;
   HEAPF32[i7 + (i17 << 4) + 8 >> 2] = d23;
   HEAPF32[i7 + (i17 << 4) + 12 >> 2] = 0.0;
  }
  i17 = i17 + 1 | 0;
  if ((i17 | 0) == (i2 | 0)) {
   break;
  }
  i18 = HEAP32[i3 >> 2] | 0;
 }
 STACKTOP = i1;
 return;
}
function __ZN13BenchmarkDemo11createTest6Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, d19 = 0.0, i20 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i5 + 48 | 0;
 i8 = i5 + 32 | 0;
 i4 = i5 + 16 | 0;
 i7 = i5;
 i3 = __Z22btAlignedAllocInternalji(112, 16) | 0;
 __ZN17btConvexHullShapeC2EPKfii(i3, 0, 0, 16);
 i13 = i8 + 4 | 0;
 i15 = i8 + 8 | 0;
 i6 = i8 + 12 | 0;
 i17 = 0;
 do {
  i18 = i17 * 3 | 0;
  HEAPF32[i8 >> 2] = +HEAPF32[442600 + (i18 << 2) >> 2];
  HEAPF32[i13 >> 2] = +HEAPF32[442600 + (i18 + 1 << 2) >> 2];
  HEAPF32[i15 >> 2] = +HEAPF32[442600 + (i18 + 2 << 2) >> 2];
  HEAPF32[i6 >> 2] = 0.0;
  __ZN17btConvexHullShape8addPointERK9btVector3(i3, i8);
  i17 = i17 + 1 | 0;
 } while ((i17 | 0) != 43);
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 7](i3, 1.0, i7);
 i7 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 d11 = 20.0;
 i8 = 0;
 d10 = -25.0;
 d9 = 2.0;
 while (1) {
  d12 = d9 + 3.0;
  d16 = d11 + 25.0;
  i15 = 0;
  do {
   d14 = (d10 + d12 * +(i15 | 0)) * 5.0 + 0.0;
   i13 = 0;
   do {
    HEAP32[i2 + 0 >> 2] = 0;
    HEAP32[i2 + 4 >> 2] = 0;
    HEAP32[i2 + 8 >> 2] = 0;
    HEAP32[i2 + 12 >> 2] = 0;
    FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 7](i3, 1.0, i2);
    i18 = __Z22btAlignedAllocInternalji(608, 16) | 0;
    __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i18, 1.0, 0, i3, i2);
    d19 = (d10 + d12 * +(i13 | 0)) * 5.0 + 0.0;
    HEAPF32[i18 + 4 >> 2] = 1.0;
    i20 = i18 + 8 | 0;
    HEAP32[i20 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[i20 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
    HEAP32[i18 + 20 >> 2] = 0;
    HEAPF32[i18 + 24 >> 2] = 1.0;
    i20 = i18 + 28 | 0;
    i17 = i18 + 44 | 0;
    HEAP32[i20 + 0 >> 2] = 0;
    HEAP32[i20 + 4 >> 2] = 0;
    HEAP32[i20 + 8 >> 2] = 0;
    HEAP32[i20 + 12 >> 2] = 0;
    HEAPF32[i17 >> 2] = 1.0;
    HEAPF32[i18 + 48 >> 2] = 0.0;
    HEAPF32[i18 + 52 >> 2] = d19;
    HEAPF32[i18 + 56 >> 2] = d16;
    HEAPF32[i18 + 60 >> 2] = d14;
    HEAPF32[i18 + 64 >> 2] = 0.0;
    HEAPF32[i18 + 184 >> 2] = +HEAPF32[i7 >> 2];
    i17 = HEAP32[i6 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 80 >> 2] & 127](i17, i18);
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) < 10);
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) < 10);
  d12 = d9 * 1.100000023841858;
  i8 = i8 + 1 | 0;
  if ((i8 | 0) >= 10) {
   break;
  } else {
   d11 = d11 + (d12 + 3.0);
   d10 = d10 - d9 * .05000000074505806 * 9.0;
   d9 = d12;
  }
 }
 __ZN13BenchmarkDemo19createLargeMeshBodyEv(i1);
 STACKTOP = i5;
 return;
}
function __ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(i3, i10, i11, i1) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = STACKTOP;
 if ((i10 | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 d7 = +HEAPF32[i11 >> 2];
 d5 = +HEAPF32[i11 + 4 >> 2];
 d4 = +HEAPF32[i11 + 8 >> 2];
 d8 = +HEAPF32[i11 + 16 >> 2];
 d6 = +HEAPF32[i11 + 20 >> 2];
 d9 = +HEAPF32[i11 + 24 >> 2];
 i11 = __Z22btAlignedAllocInternalji(256, 16) | 0;
 if ((i11 | 0) != 0) {
  HEAP32[i11 >> 2] = i10;
 }
 i13 = 64;
 i10 = 1;
 do {
  i12 = i10 + -1 | 0;
  i15 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
  do {
   if (((((+HEAPF32[i15 >> 2] <= d8 ? +HEAPF32[i15 + 16 >> 2] >= d7 : 0) ? +HEAPF32[i15 + 4 >> 2] <= d6 : 0) ? +HEAPF32[i15 + 20 >> 2] >= d5 : 0) ? +HEAPF32[i15 + 8 >> 2] <= d9 : 0) ? +HEAPF32[i15 + 24 >> 2] >= d4 : 0) {
    i14 = i15 + 40 | 0;
    if ((HEAP32[i14 >> 2] | 0) == 0) {
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1, i15);
     i10 = i12;
     break;
    }
    i15 = HEAP32[i15 + 36 >> 2] | 0;
    if ((i12 | 0) == (i13 | 0) ? (i2 = (i13 | 0) == 0 ? 1 : i13 << 1, (i10 | 0) <= (i2 | 0)) : 0) {
     if ((i2 | 0) == 0) {
      i16 = 0;
     } else {
      i16 = __Z22btAlignedAllocInternalji(i2 << 2, 16) | 0;
     }
     if ((i13 | 0) > 0) {
      i18 = 0;
      do {
       i17 = i16 + (i18 << 2) | 0;
       if ((i17 | 0) != 0) {
        HEAP32[i17 >> 2] = HEAP32[i11 + (i18 << 2) >> 2];
       }
       i18 = i18 + 1 | 0;
      } while ((i18 | 0) != (i13 | 0));
     }
     if ((i11 | 0) == 0) {
      i13 = i2;
      i11 = i16;
     } else {
      __Z21btAlignedFreeInternalPv(i11);
      i13 = i2;
      i11 = i16;
     }
    }
    i12 = i11 + (i12 << 2) | 0;
    if ((i12 | 0) != 0) {
     HEAP32[i12 >> 2] = i15;
    }
    i12 = HEAP32[i14 >> 2] | 0;
    if ((i10 | 0) == (i13 | 0)) {
     i13 = (i10 | 0) == 0 ? 1 : i10 << 1;
     if ((i10 | 0) < (i13 | 0)) {
      if ((i13 | 0) == 0) {
       i14 = 0;
      } else {
       i14 = __Z22btAlignedAllocInternalji(i13 << 2, 16) | 0;
      }
      if ((i10 | 0) > 0) {
       i15 = 0;
       do {
        i16 = i14 + (i15 << 2) | 0;
        if ((i16 | 0) != 0) {
         HEAP32[i16 >> 2] = HEAP32[i11 + (i15 << 2) >> 2];
        }
        i15 = i15 + 1 | 0;
       } while ((i15 | 0) != (i10 | 0));
      }
      if ((i11 | 0) == 0) {
       i11 = i14;
      } else {
       __Z21btAlignedFreeInternalPv(i11);
       i11 = i14;
      }
     } else {
      i13 = i10;
     }
    }
    i14 = i11 + (i10 << 2) | 0;
    if ((i14 | 0) != 0) {
     HEAP32[i14 >> 2] = i12;
    }
    i10 = i10 + 1 | 0;
   } else {
    i10 = i12;
   }
  } while (0);
 } while ((i10 | 0) > 0);
 if ((i11 | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 __Z21btAlignedFreeInternalPv(i11);
 STACKTOP = i3;
 return;
}
function __ZN19btSingleRayCallbackC2ERK9btVector3S2_PK16btCollisionWorldRNS3_17RayResultCallbackE(i1, i14, i13, i11, i12) {
 i1 = i1 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i4 = STACKTOP;
 HEAP32[i1 >> 2] = 449440;
 i3 = i1 + 36 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 i2 = i1 + 52 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 HEAP32[i1 + 212 >> 2] = i11;
 HEAP32[i1 + 216 >> 2] = i12;
 HEAPF32[i1 + 68 >> 2] = 1.0;
 i12 = i1 + 72 | 0;
 i11 = i1 + 88 | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAPF32[i11 >> 2] = 1.0;
 i11 = i1 + 92 | 0;
 i12 = i1 + 108 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAPF32[i12 >> 2] = 1.0;
 HEAP32[i1 + 112 >> 2] = 0;
 i12 = i1 + 116 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i1 + 132 >> 2] = 1.0;
 i12 = i1 + 136 | 0;
 i11 = i1 + 152 | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAPF32[i11 >> 2] = 1.0;
 i11 = i1 + 156 | 0;
 i12 = i1 + 172 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAPF32[i12 >> 2] = 1.0;
 HEAP32[i1 + 176 >> 2] = 0;
 i12 = i1 + 180 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 d8 = +HEAPF32[i13 >> 2] - +HEAPF32[i14 >> 2];
 d5 = +HEAPF32[i13 + 4 >> 2] - +HEAPF32[i14 + 4 >> 2];
 d10 = +HEAPF32[i13 + 8 >> 2] - +HEAPF32[i14 + 8 >> 2];
 d6 = 1.0 / +Math_sqrt(+(d8 * d8 + d5 * d5 + d10 * d10));
 d8 = d8 * d6;
 d5 = d5 * d6;
 d6 = d10 * d6;
 if (d8 == 0.0) {
  d10 = 999999984306749400.0;
 } else {
  d10 = 1.0 / d8;
 }
 HEAPF32[i1 + 4 >> 2] = d10;
 if (d5 == 0.0) {
  d9 = 999999984306749400.0;
 } else {
  d9 = 1.0 / d5;
 }
 HEAPF32[i1 + 8 >> 2] = d9;
 if (d6 == 0.0) {
  d7 = 999999984306749400.0;
 } else {
  d7 = 1.0 / d6;
 }
 HEAPF32[i1 + 12 >> 2] = d7;
 HEAP32[i1 + 20 >> 2] = d10 < 0.0;
 HEAP32[i1 + 24 >> 2] = d9 < 0.0;
 HEAP32[i1 + 28 >> 2] = d7 < 0.0;
 HEAPF32[i1 + 32 >> 2] = d8 * (+HEAPF32[i2 >> 2] - +HEAPF32[i3 >> 2]) + d5 * (+HEAPF32[i1 + 56 >> 2] - +HEAPF32[i1 + 40 >> 2]) + d6 * (+HEAPF32[i1 + 60 >> 2] - +HEAPF32[i1 + 44 >> 2]);
 STACKTOP = i4;
 return;
}
function __ZN24btConvexTriangleCallback22setTimeStepAndCountersEfRK16btDispatcherInfoP16btManifoldResult(i2, d1, i4, i3) {
 i2 = i2 | 0;
 d1 = +d1;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5;
 HEAP32[i2 + 52 >> 2] = i4;
 HEAPF32[i2 + 56 >> 2] = d1;
 HEAP32[i2 + 44 >> 2] = i3;
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 d22 = +HEAPF32[i7 + 4 >> 2];
 d21 = +HEAPF32[i7 + 20 >> 2];
 d20 = +HEAPF32[i7 + 36 >> 2];
 d19 = +HEAPF32[i7 + 8 >> 2];
 d18 = +HEAPF32[i7 + 24 >> 2];
 d17 = +HEAPF32[i7 + 40 >> 2];
 d13 = +HEAPF32[i7 + 12 >> 2];
 d11 = +HEAPF32[i7 + 28 >> 2];
 d9 = +HEAPF32[i7 + 44 >> 2];
 d16 = -+HEAPF32[i7 + 52 >> 2];
 d15 = -+HEAPF32[i7 + 56 >> 2];
 d14 = -+HEAPF32[i7 + 60 >> 2];
 i7 = i2 + 4 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 d31 = +HEAPF32[i4 + 4 >> 2];
 d30 = +HEAPF32[i4 + 20 >> 2];
 d29 = +HEAPF32[i4 + 36 >> 2];
 d28 = +HEAPF32[i4 + 8 >> 2];
 d27 = +HEAPF32[i4 + 24 >> 2];
 d26 = +HEAPF32[i4 + 40 >> 2];
 d25 = +HEAPF32[i4 + 12 >> 2];
 d24 = +HEAPF32[i4 + 28 >> 2];
 d23 = +HEAPF32[i4 + 44 >> 2];
 d12 = +HEAPF32[i4 + 52 >> 2];
 d10 = +HEAPF32[i4 + 56 >> 2];
 d8 = +HEAPF32[i4 + 60 >> 2];
 HEAPF32[i6 >> 2] = d22 * d31 + d21 * d30 + d20 * d29;
 HEAPF32[i6 + 4 >> 2] = d22 * d28 + d21 * d27 + d20 * d26;
 HEAPF32[i6 + 8 >> 2] = d22 * d25 + d21 * d24 + d20 * d23;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 HEAPF32[i6 + 16 >> 2] = d19 * d31 + d18 * d30 + d17 * d29;
 HEAPF32[i6 + 20 >> 2] = d19 * d28 + d18 * d27 + d17 * d26;
 HEAPF32[i6 + 24 >> 2] = d19 * d25 + d18 * d24 + d17 * d23;
 HEAPF32[i6 + 28 >> 2] = 0.0;
 HEAPF32[i6 + 32 >> 2] = d13 * d31 + d11 * d30 + d9 * d29;
 HEAPF32[i6 + 36 >> 2] = d13 * d28 + d11 * d27 + d9 * d26;
 HEAPF32[i6 + 40 >> 2] = d13 * d25 + d11 * d24 + d9 * d23;
 HEAPF32[i6 + 44 >> 2] = 0.0;
 HEAPF32[i6 + 48 >> 2] = d22 * d16 + d21 * d15 + d20 * d14 + (d22 * d12 + d21 * d10 + d20 * d8);
 HEAPF32[i6 + 52 >> 2] = d19 * d16 + d18 * d15 + d17 * d14 + (d19 * d12 + d18 * d10 + d17 * d8);
 HEAPF32[i6 + 56 >> 2] = d13 * d16 + d11 * d15 + d9 * d14 + (d13 * d12 + d11 * d10 + d9 * d8);
 HEAPF32[i6 + 60 >> 2] = 0.0;
 i7 = HEAP32[(HEAP32[i7 >> 2] | 0) + 192 >> 2] | 0;
 i4 = i2 + 12 | 0;
 i3 = i2 + 28 | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 63](i7, i6, i4, i3);
 HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + d1;
 i3 = i2 + 32 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + d1;
 i3 = i2 + 36 | 0;
 HEAPF32[i3 >> 2] = +HEAPF32[i3 >> 2] + d1;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] - d1;
 i4 = i2 + 16 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] - d1;
 i4 = i2 + 20 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] - d1;
 STACKTOP = i5;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER11btRigidBodyS1_RK18btSolverConstraint(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0;
 i16 = STACKTOP;
 i21 = i3 + 84 | 0;
 d27 = +HEAPF32[i21 >> 2];
 i6 = i3 + 16 | 0;
 d15 = +HEAPF32[i6 >> 2];
 i14 = i2 + 504 | 0;
 i23 = i3 + 20 | 0;
 d12 = +HEAPF32[i23 >> 2];
 i22 = i2 + 508 | 0;
 i4 = i3 + 24 | 0;
 d13 = +HEAPF32[i4 >> 2];
 i17 = i2 + 512 | 0;
 i18 = i2 + 520 | 0;
 i19 = i2 + 524 | 0;
 i20 = i2 + 528 | 0;
 i5 = i1 + 504 | 0;
 i7 = i1 + 508 | 0;
 i8 = i1 + 512 | 0;
 i9 = i1 + 520 | 0;
 i10 = i1 + 524 | 0;
 i11 = i1 + 528 | 0;
 d26 = +HEAPF32[i3 + 92 >> 2];
 d26 = +HEAPF32[i3 + 116 >> 2] - d27 * +HEAPF32[i3 + 120 >> 2] - (d15 * +HEAPF32[i14 >> 2] + d12 * +HEAPF32[i22 >> 2] + d13 * +HEAPF32[i17 >> 2] + (+HEAPF32[i3 >> 2] * +HEAPF32[i18 >> 2] + +HEAPF32[i3 + 4 >> 2] * +HEAPF32[i19 >> 2] + +HEAPF32[i3 + 8 >> 2] * +HEAPF32[i20 >> 2])) * d26 - d26 * (+HEAPF32[i3 + 32 >> 2] * +HEAPF32[i9 >> 2] + +HEAPF32[i3 + 36 >> 2] * +HEAPF32[i10 >> 2] + +HEAPF32[i3 + 40 >> 2] * +HEAPF32[i11 >> 2] - (d15 * +HEAPF32[i5 >> 2] + d12 * +HEAPF32[i7 >> 2] + d13 * +HEAPF32[i8 >> 2]));
 d24 = d27 + d26;
 d25 = +HEAPF32[i3 + 124 >> 2];
 if (d24 < d25) {
  d26 = d25 - d27;
  d24 = d25;
 }
 HEAPF32[i21 >> 2] = d24;
 if (+HEAPF32[i2 + 336 >> 2] != 0.0) {
  d27 = d26 * +HEAPF32[i2 + 556 >> 2] * d12;
  d25 = d26 * +HEAPF32[i2 + 560 >> 2] * d13;
  HEAPF32[i14 >> 2] = +HEAPF32[i14 >> 2] + d26 * +HEAPF32[i2 + 552 >> 2] * d15;
  HEAPF32[i22 >> 2] = d27 + +HEAPF32[i22 >> 2];
  HEAPF32[i17 >> 2] = d25 + +HEAPF32[i17 >> 2];
  d25 = d26 * +HEAPF32[i2 + 540 >> 2] * +HEAPF32[i3 + 52 >> 2];
  d27 = d26 * +HEAPF32[i2 + 544 >> 2] * +HEAPF32[i3 + 56 >> 2];
  HEAPF32[i18 >> 2] = d26 * +HEAPF32[i2 + 536 >> 2] * +HEAPF32[i3 + 48 >> 2] + +HEAPF32[i18 >> 2];
  HEAPF32[i19 >> 2] = d25 + +HEAPF32[i19 >> 2];
  HEAPF32[i20 >> 2] = d27 + +HEAPF32[i20 >> 2];
 }
 if (!(+HEAPF32[i1 + 336 >> 2] != 0.0)) {
  STACKTOP = i16;
  return;
 }
 d27 = d26 * +HEAPF32[i1 + 556 >> 2] * +HEAPF32[i23 >> 2];
 d25 = d26 * +HEAPF32[i1 + 560 >> 2] * +HEAPF32[i4 >> 2];
 HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] - d26 * +HEAPF32[i1 + 552 >> 2] * +HEAPF32[i6 >> 2];
 HEAPF32[i7 >> 2] = +HEAPF32[i7 >> 2] - d27;
 HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] - d25;
 d25 = d26 * +HEAPF32[i1 + 540 >> 2] * +HEAPF32[i3 + 68 >> 2];
 d27 = d26 * +HEAPF32[i1 + 544 >> 2] * +HEAPF32[i3 + 72 >> 2];
 HEAPF32[i9 >> 2] = d26 * +HEAPF32[i1 + 536 >> 2] * +HEAPF32[i3 + 64 >> 2] + +HEAPF32[i9 >> 2];
 HEAPF32[i10 >> 2] = d25 + +HEAPF32[i10 >> 2];
 HEAPF32[i11 >> 2] = d27 + +HEAPF32[i11 >> 2];
 STACKTOP = i16;
 return;
}
function __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i15, i1) {
 i15 = i15 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i3 + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 i2 = i15 + 8 | 0;
 i16 = HEAP32[i2 >> 2] | 0;
 if ((i16 | 0) > 0) {
  i9 = i15 + 16 | 0;
  i10 = 0;
  do {
   i11 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i10 << 2) >> 2] | 0;
   if ((HEAP32[i11 + 232 >> 2] | 0) == 1) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 127](i11, i1);
    i16 = HEAP32[i2 >> 2] | 0;
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (i16 | 0));
 }
 HEAP8[i6 + 16 | 0] = 1;
 i11 = i6 + 12 | 0;
 HEAP32[i11 >> 2] = 0;
 i9 = i6 + 4 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP8[i6 + 36 | 0] = 1;
 i12 = i6 + 32 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 HEAP32[i6 + 28 >> 2] = 0;
 HEAP8[i6 + 56 | 0] = 1;
 i14 = i6 + 52 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i6 + 44 >> 2] = 0;
 i10 = i6 + 48 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP8[i6 + 76 | 0] = 1;
 i13 = i6 + 72 | 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i6 + 64 >> 2] = 0;
 HEAP32[i6 + 68 >> 2] = 0;
 if ((i16 | 0) <= 0) {
  __ZN9btHashMapI9btHashPtrP16btCollisionShapeED2Ev(i6);
  STACKTOP = i3;
  return;
 }
 i15 = i15 + 16 | 0;
 i21 = -1;
 i20 = 0;
 i17 = 0;
 while (1) {
  i18 = HEAP32[(HEAP32[(HEAP32[i15 >> 2] | 0) + (i17 << 2) >> 2] | 0) + 192 >> 2] | 0;
  HEAP32[i4 >> 2] = i18;
  i19 = i18;
  i22 = i19 + ~(i19 << 15) | 0;
  i22 = (i22 >> 10 ^ i22) * 9 | 0;
  i22 = i22 >> 6 ^ i22;
  i22 = i22 + ~(i22 << 11) | 0;
  i21 = (i22 >> 16 ^ i22) & i21;
  L14 : do {
   if (i21 >>> 0 < i20 >>> 0 ? (i7 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i21 << 2) >> 2] | 0, !((i7 | 0) == -1)) : 0) {
    i21 = HEAP32[i13 >> 2] | 0;
    i20 = HEAP32[i12 >> 2] | 0;
    i22 = i7;
    while (1) {
     if ((i18 | 0) == (HEAP32[i21 + (i22 << 3) >> 2] | 0)) {
      break;
     }
     i22 = HEAP32[i20 + (i22 << 2) >> 2] | 0;
     if ((i22 | 0) == -1) {
      i8 = 15;
      break L14;
     }
    }
    if (!(!((i22 | 0) == -1) ? ((HEAP32[i14 >> 2] | 0) + (i22 << 2) | 0) != 0 : 0)) {
     i8 = 15;
    }
   } else {
    i8 = 15;
   }
  } while (0);
  if ((i8 | 0) == 15) {
   i8 = 0;
   HEAP32[i5 >> 2] = i19;
   __ZN9btHashMapI9btHashPtrP16btCollisionShapeE6insertERKS0_RKS2_(i6, i5, i4);
   i16 = HEAP32[i4 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i16 >> 2] | 0) + 56 >> 2] & 127](i16, i1);
   i16 = HEAP32[i2 >> 2] | 0;
  }
  i17 = i17 + 1 | 0;
  if ((i17 | 0) >= (i16 | 0)) {
   break;
  }
  i21 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
  i20 = HEAP32[i9 >> 2] | 0;
 }
 __ZN9btHashMapI9btHashPtrP16btCollisionShapeED2Ev(i6);
 STACKTOP = i3;
 return;
}
function __ZN22btCompoundLeafCallback7ProcessEPK10btDbvtNode(i2, i11) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i6 + 32 | 0;
 i7 = i6 + 16 | 0;
 i9 = i6;
 i3 = HEAP32[i11 + 36 >> 2] | 0;
 i5 = i2 + 4 | 0;
 i4 = HEAP32[(HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 192 >> 2] | 0) + 24 >> 2] | 0) + (i3 * 80 | 0) + 64 >> 2] | 0;
 i8 = i2 + 16 | 0;
 i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0;
 if ((i10 | 0) == 0) {
  __ZN22btCompoundLeafCallback17ProcessChildShapeEP16btCollisionShapei(i2, i4, i3);
  STACKTOP = i6;
  return;
 }
 if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 127](i10) | 0) & 2 | 0) == 0) {
  __ZN22btCompoundLeafCallback17ProcessChildShapeEP16btCollisionShapei(i2, i4, i3);
  STACKTOP = i6;
  return;
 }
 i10 = HEAP32[i5 >> 2] | 0;
 d26 = +HEAPF32[i10 + 4 >> 2];
 d25 = +HEAPF32[i10 + 8 >> 2];
 d17 = +HEAPF32[i10 + 12 >> 2];
 d24 = +HEAPF32[i10 + 20 >> 2];
 d23 = +HEAPF32[i10 + 24 >> 2];
 d14 = +HEAPF32[i10 + 28 >> 2];
 d21 = +HEAPF32[i10 + 36 >> 2];
 d19 = +HEAPF32[i10 + 40 >> 2];
 d12 = +HEAPF32[i10 + 44 >> 2];
 d29 = +HEAPF32[i11 + 16 >> 2];
 d28 = +HEAPF32[i11 >> 2];
 d15 = +HEAPF32[i11 + 20 >> 2];
 d27 = +HEAPF32[i11 + 4 >> 2];
 d16 = +HEAPF32[i11 + 24 >> 2];
 d13 = +HEAPF32[i11 + 8 >> 2];
 d22 = (d29 - d28) * .5 + 0.0;
 d20 = (d15 - d27) * .5 + 0.0;
 d18 = (d16 - d13) * .5 + 0.0;
 d28 = (d29 + d28) * .5;
 d27 = (d15 + d27) * .5;
 d13 = (d16 + d13) * .5;
 d16 = +HEAPF32[i10 + 52 >> 2] + (d26 * d28 + d25 * d27 + d17 * d13);
 d15 = +HEAPF32[i10 + 56 >> 2] + (d24 * d28 + d23 * d27 + d14 * d13);
 d13 = +HEAPF32[i10 + 60 >> 2] + (d21 * d28 + d19 * d27 + d12 * d13);
 d17 = d22 * +Math_abs(+d26) + d20 * +Math_abs(+d25) + d18 * +Math_abs(+d17);
 d14 = d22 * +Math_abs(+d24) + d20 * +Math_abs(+d23) + d18 * +Math_abs(+d14);
 d12 = d22 * +Math_abs(+d21) + d20 * +Math_abs(+d19) + d18 * +Math_abs(+d12);
 HEAPF32[i1 >> 2] = d16 - d17;
 HEAPF32[i1 + 4 >> 2] = d15 - d14;
 HEAPF32[i1 + 8 >> 2] = d13 - d12;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i7 >> 2] = d17 + d16;
 HEAPF32[i7 + 4 >> 2] = d15 + d14;
 HEAPF32[i7 + 8 >> 2] = d13 + d12;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 i11 = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0;
 i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] | 0;
 HEAPF32[i9 >> 2] = 1.0;
 HEAPF32[i9 + 4 >> 2] = 0.0;
 HEAPF32[i9 + 8 >> 2] = 0.0;
 HEAPF32[i9 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[i10 & 63](i11, i1, i7, i9);
 __ZN22btCompoundLeafCallback17ProcessChildShapeEP16btCollisionShapei(i2, i4, i3);
 STACKTOP = i6;
 return;
}
function __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvT_ii(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8 + 2 | 0;
 i6 = i8 + 1 | 0;
 i11 = i8;
 i4 = i3 + 12 | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 i10 = HEAP32[i9 + (((i2 + i1 | 0) / 2 | 0) << 2) >> 2] | 0;
 i5 = i10 + 1108 | 0;
 i10 = i10 + 1112 | 0;
 i14 = i1;
 i15 = i2;
 while (1) {
  i12 = HEAP32[(HEAP32[i5 >> 2] | 0) + 208 >> 2] | 0;
  i16 = (i12 | 0) > -1;
  if (i16) {
   while (1) {
    i13 = HEAP32[i9 + (i14 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i13 + 1108 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i17 | 0) > -1)) {
     i17 = HEAP32[(HEAP32[i13 + 1112 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((i17 | 0) < (i12 | 0)) {
     i14 = i14 + 1 | 0;
    } else {
     break;
    }
   }
  } else {
   while (1) {
    i13 = HEAP32[i9 + (i14 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i13 + 1108 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i17 | 0) > -1)) {
     i17 = HEAP32[(HEAP32[i13 + 1112 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((i17 | 0) < (HEAP32[(HEAP32[i10 >> 2] | 0) + 208 >> 2] | 0)) {
     i14 = i14 + 1 | 0;
    } else {
     break;
    }
   }
  }
  if (i16) {
   while (1) {
    i16 = HEAP32[i9 + (i15 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i16 + 1108 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i17 | 0) > -1)) {
     i17 = HEAP32[(HEAP32[i16 + 1112 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((i12 | 0) < (i17 | 0)) {
     i15 = i15 + -1 | 0;
    } else {
     break;
    }
   }
  } else {
   while (1) {
    i16 = HEAP32[i9 + (i15 << 2) >> 2] | 0;
    i12 = HEAP32[(HEAP32[i16 + 1108 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i12 | 0) > -1)) {
     i12 = HEAP32[(HEAP32[i16 + 1112 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 208 >> 2] | 0) < (i12 | 0)) {
     i15 = i15 + -1 | 0;
    } else {
     break;
    }
   }
  }
  if ((i14 | 0) <= (i15 | 0)) {
   HEAP32[i9 + (i14 << 2) >> 2] = i16;
   HEAP32[(HEAP32[i4 >> 2] | 0) + (i15 << 2) >> 2] = i13;
   i14 = i14 + 1 | 0;
   i15 = i15 + -1 | 0;
  }
  if ((i14 | 0) > (i15 | 0)) {
   break;
  }
  i9 = HEAP32[i4 >> 2] | 0;
 }
 if ((i15 | 0) > (i1 | 0)) {
  HEAP8[i7 + 0 | 0] = HEAP8[i6 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvT_ii(i3, i7, i1, i15);
 }
 if ((i14 | 0) >= (i2 | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP8[i7 + 0 | 0] = HEAP8[i11 + 0 | 0] | 0;
 __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvT_ii(i3, i7, i14, i2);
 STACKTOP = i8;
 return;
}
function __ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallback15processTriangleEP9btVector3ii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 i9 = i3 + 712 | 0;
 i8 = i3 + 536 | 0;
 i12 = i3 + 480 | 0;
 i4 = i3 + 376 | 0;
 i11 = i3 + 16 | 0;
 i10 = i3;
 HEAPF32[i9 >> 2] = 1.0;
 i6 = i9 + 4 | 0;
 i5 = i9 + 20 | 0;
 HEAP32[i6 + 0 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAPF32[i5 >> 2] = 1.0;
 i5 = i9 + 24 | 0;
 i6 = i9 + 40 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i6 >> 2] = 1.0;
 i6 = i9 + 44 | 0;
 HEAP32[i6 + 0 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i8 >> 2] = 450968;
 i6 = i8 + 164 | 0;
 HEAP32[i8 + 168 >> 2] = 0;
 HEAPF32[i8 + 172 >> 2] = 0.0;
 i5 = i1 + 200 | 0;
 HEAPF32[i6 >> 2] = +HEAPF32[i5 >> 2];
 d7 = +HEAPF32[i1 + 196 >> 2];
 __ZN21btConvexInternalShapeC2Ev(i12);
 HEAP32[i12 >> 2] = 456848;
 HEAP32[i12 + 4 >> 2] = 8;
 HEAPF32[i12 + 28 >> 2] = d7;
 HEAPF32[i12 + 44 >> 2] = d7;
 __ZN23btPolyhedralConvexShapeC2Ev(i4);
 i13 = i2 + 32 | 0;
 i14 = i2 + 16 | 0;
 HEAP32[i4 >> 2] = 456552;
 i15 = i4 + 56 | 0;
 HEAP32[i4 + 4 >> 2] = 1;
 HEAP32[i15 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i15 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i15 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i15 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i2 = i4 + 72 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 i2 = i4 + 88 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 HEAPF32[i11 + 308 >> 2] = 9999999747378752.0e-20;
 i2 = i11 + 332 | 0;
 HEAP8[i2] = HEAP8[i2] & -16;
 __ZN22btSubsimplexConvexCastC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolver(i10, i12, i4, i11);
 if (!(__ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i10, i1 + 4 | 0, i1 + 68 | 0, i9, i9, i8) | 0)) {
  __ZN23btPolyhedralConvexShapeD2Ev(i4);
  STACKTOP = i3;
  return;
 }
 d7 = +HEAPF32[i6 >> 2];
 if (!(+HEAPF32[i5 >> 2] > d7)) {
  __ZN23btPolyhedralConvexShapeD2Ev(i4);
  STACKTOP = i3;
  return;
 }
 HEAPF32[i5 >> 2] = d7;
 __ZN23btPolyhedralConvexShapeD2Ev(i4);
 STACKTOP = i3;
 return;
}
function __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvT_ii(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8 + 2 | 0;
 i6 = i8 + 1 | 0;
 i11 = i8;
 i4 = i3 + 12 | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 i10 = HEAP32[i9 + (((i2 + i1 | 0) / 2 | 0) << 2) >> 2] | 0;
 i5 = i10 + 24 | 0;
 i10 = i10 + 28 | 0;
 i14 = i1;
 i15 = i2;
 while (1) {
  i12 = HEAP32[(HEAP32[i5 >> 2] | 0) + 208 >> 2] | 0;
  i16 = (i12 | 0) > -1;
  if (i16) {
   while (1) {
    i13 = HEAP32[i9 + (i14 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i13 + 24 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i17 | 0) > -1)) {
     i17 = HEAP32[(HEAP32[i13 + 28 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((i17 | 0) < (i12 | 0)) {
     i14 = i14 + 1 | 0;
    } else {
     break;
    }
   }
  } else {
   while (1) {
    i13 = HEAP32[i9 + (i14 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i13 + 24 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i17 | 0) > -1)) {
     i17 = HEAP32[(HEAP32[i13 + 28 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((i17 | 0) < (HEAP32[(HEAP32[i10 >> 2] | 0) + 208 >> 2] | 0)) {
     i14 = i14 + 1 | 0;
    } else {
     break;
    }
   }
  }
  if (i16) {
   while (1) {
    i16 = HEAP32[i9 + (i15 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i16 + 24 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i17 | 0) > -1)) {
     i17 = HEAP32[(HEAP32[i16 + 28 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((i12 | 0) < (i17 | 0)) {
     i15 = i15 + -1 | 0;
    } else {
     break;
    }
   }
  } else {
   while (1) {
    i16 = HEAP32[i9 + (i15 << 2) >> 2] | 0;
    i12 = HEAP32[(HEAP32[i16 + 24 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i12 | 0) > -1)) {
     i12 = HEAP32[(HEAP32[i16 + 28 >> 2] | 0) + 208 >> 2] | 0;
    }
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 208 >> 2] | 0) < (i12 | 0)) {
     i15 = i15 + -1 | 0;
    } else {
     break;
    }
   }
  }
  if ((i14 | 0) <= (i15 | 0)) {
   HEAP32[i9 + (i14 << 2) >> 2] = i16;
   HEAP32[(HEAP32[i4 >> 2] | 0) + (i15 << 2) >> 2] = i13;
   i14 = i14 + 1 | 0;
   i15 = i15 + -1 | 0;
  }
  if ((i14 | 0) > (i15 | 0)) {
   break;
  }
  i9 = HEAP32[i4 >> 2] | 0;
 }
 if ((i15 | 0) > (i1 | 0)) {
  HEAP8[i7 + 0 | 0] = HEAP8[i6 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvT_ii(i3, i7, i1, i15);
 }
 if ((i14 | 0) >= (i2 | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP8[i7 + 0 | 0] = HEAP8[i11 + 0 | 0] | 0;
 __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvT_ii(i3, i7, i14, i2);
 STACKTOP = i8;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i12, i2, i4, i11, i3, i5) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 if ((i12 | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
  i8 = i2 + 52 | 0;
  i7 = HEAP8[i8] | 0;
  i10 = i2 + 53 | 0;
  i9 = HEAP8[i10] | 0;
  i13 = HEAP32[i12 + 12 >> 2] | 0;
  i6 = i12 + (i13 << 3) + 16 | 0;
  HEAP8[i8] = 0;
  HEAP8[i10] = 0;
  i14 = HEAP32[i12 + 20 >> 2] | 0;
  i15 = i14 >> 8;
  if ((i14 & 1 | 0) != 0) {
   i15 = HEAP32[(HEAP32[i11 >> 2] | 0) + i15 >> 2] | 0;
  }
  i17 = HEAP32[i12 + 16 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2] & 7](i17, i2, i4, i11 + i15 | 0, (i14 & 2 | 0) != 0 ? i3 : 2, i5);
  L6 : do {
   if ((i13 | 0) > 1) {
    i14 = i2 + 24 | 0;
    i13 = i12 + 8 | 0;
    i15 = i2 + 54 | 0;
    i12 = i12 + 24 | 0;
    do {
     if ((HEAP8[i15] | 0) != 0) {
      break L6;
     }
     if ((HEAP8[i8] | 0) == 0) {
      if ((HEAP8[i10] | 0) != 0 ? (HEAP32[i13 >> 2] & 1 | 0) == 0 : 0) {
       break L6;
      }
     } else {
      if ((HEAP32[i14 >> 2] | 0) == 1) {
       break L6;
      }
      if ((HEAP32[i13 >> 2] & 2 | 0) == 0) {
       break L6;
      }
     }
     HEAP8[i8] = 0;
     HEAP8[i10] = 0;
     i16 = HEAP32[i12 + 4 >> 2] | 0;
     i17 = i16 >> 8;
     if ((i16 & 1 | 0) != 0) {
      i17 = HEAP32[(HEAP32[i11 >> 2] | 0) + i17 >> 2] | 0;
     }
     i18 = HEAP32[i12 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 20 >> 2] & 7](i18, i2, i4, i11 + i17 | 0, (i16 & 2 | 0) != 0 ? i3 : 2, i5);
     i12 = i12 + 8 | 0;
    } while (i12 >>> 0 < i6 >>> 0);
   }
  } while (0);
  HEAP8[i8] = i7;
  HEAP8[i10] = i9;
  STACKTOP = i1;
  return;
 }
 HEAP8[i2 + 53 | 0] = 1;
 if ((HEAP32[i2 + 4 >> 2] | 0) != (i11 | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP8[i2 + 52 | 0] = 1;
 i5 = i2 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i5 >> 2] = i4;
  HEAP32[i2 + 24 >> 2] = i3;
  HEAP32[i2 + 36 >> 2] = 1;
  if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i3 | 0) == 1)) {
   STACKTOP = i1;
   return;
  }
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i1;
  return;
 }
 if ((i6 | 0) != (i4 | 0)) {
  i18 = i2 + 36 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  HEAP8[i2 + 54 | 0] = 1;
  STACKTOP = i1;
  return;
 }
 i4 = i2 + 24 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == 2) {
  HEAP32[i4 >> 2] = i3;
 } else {
  i3 = i5;
 }
 if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i3 | 0) == 1)) {
  STACKTOP = i1;
  return;
 }
 HEAP8[i2 + 54 | 0] = 1;
 STACKTOP = i1;
 return;
}
function __ZN14btQuantizedBvh21mergeInternalNodeAabbEiRK9btVector3S2_(i7, i2, i5, i3) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i1 = STACKTOP;
 if ((HEAP8[i7 + 60 | 0] | 0) != 0) {
  d16 = +HEAPF32[i7 + 4 >> 2];
  d14 = +HEAPF32[i7 + 8 >> 2];
  d12 = +HEAPF32[i7 + 12 >> 2];
  d15 = +HEAPF32[i7 + 36 >> 2];
  d13 = +HEAPF32[i7 + 40 >> 2];
  d11 = +HEAPF32[i7 + 44 >> 2];
  i9 = ~~((+HEAPF32[i5 >> 2] - d16) * d15) & 65535 & 65534;
  i6 = ~~((+HEAPF32[i5 + 4 >> 2] - d14) * d13) & 65535 & 65534;
  i4 = ~~((+HEAPF32[i5 + 8 >> 2] - d12) * d11) & 65535 & 65534;
  i8 = (~~((+HEAPF32[i3 >> 2] - d16) * d15 + 1.0) & 65535 | 1) & 65535;
  i5 = (~~((+HEAPF32[i3 + 4 >> 2] - d14) * d13 + 1.0) & 65535 | 1) & 65535;
  i3 = (~~((+HEAPF32[i3 + 8 >> 2] - d12) * d11 + 1.0) & 65535 | 1) & 65535;
  i7 = HEAP32[i7 + 136 >> 2] | 0;
  i10 = i7 + (i2 << 4) | 0;
  if ((HEAPU16[i10 >> 1] | 0) > (i9 & 65535)) {
   HEAP16[i10 >> 1] = i9;
  }
  i9 = i7 + (i2 << 4) + 6 | 0;
  if ((HEAPU16[i9 >> 1] | 0) < (i8 & 65535)) {
   HEAP16[i9 >> 1] = i8;
  }
  i8 = i7 + (i2 << 4) + 2 | 0;
  if ((HEAPU16[i8 >> 1] | 0) > (i6 & 65535)) {
   HEAP16[i8 >> 1] = i6;
  }
  i6 = i7 + (i2 << 4) + 8 | 0;
  if ((HEAPU16[i6 >> 1] | 0) < (i5 & 65535)) {
   HEAP16[i6 >> 1] = i5;
  }
  i5 = i7 + (i2 << 4) + 4 | 0;
  if ((HEAPU16[i5 >> 1] | 0) > (i4 & 65535)) {
   HEAP16[i5 >> 1] = i4;
  }
  i2 = i7 + (i2 << 4) + 10 | 0;
  if (!((HEAPU16[i2 >> 1] | 0) < (i3 & 65535))) {
   STACKTOP = i1;
   return;
  }
  HEAP16[i2 >> 1] = i3;
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i7 + 96 >> 2] | 0;
 i6 = i4 + (i2 << 6) | 0;
 d11 = +HEAPF32[i5 >> 2];
 if (d11 < +HEAPF32[i6 >> 2]) {
  HEAPF32[i6 >> 2] = d11;
 }
 i6 = i4 + (i2 << 6) + 4 | 0;
 d11 = +HEAPF32[i5 + 4 >> 2];
 if (d11 < +HEAPF32[i6 >> 2]) {
  HEAPF32[i6 >> 2] = d11;
 }
 i6 = i4 + (i2 << 6) + 8 | 0;
 d11 = +HEAPF32[i5 + 8 >> 2];
 if (d11 < +HEAPF32[i6 >> 2]) {
  HEAPF32[i6 >> 2] = d11;
 }
 i6 = i4 + (i2 << 6) + 12 | 0;
 d11 = +HEAPF32[i5 + 12 >> 2];
 if (d11 < +HEAPF32[i6 >> 2]) {
  HEAPF32[i6 >> 2] = d11;
 }
 i5 = i4 + (i2 << 6) + 16 | 0;
 d11 = +HEAPF32[i3 >> 2];
 if (+HEAPF32[i5 >> 2] < d11) {
  HEAPF32[i5 >> 2] = d11;
 }
 i5 = i4 + (i2 << 6) + 20 | 0;
 d11 = +HEAPF32[i3 + 4 >> 2];
 if (+HEAPF32[i5 >> 2] < d11) {
  HEAPF32[i5 >> 2] = d11;
 }
 i5 = i4 + (i2 << 6) + 24 | 0;
 d11 = +HEAPF32[i3 + 8 >> 2];
 if (+HEAPF32[i5 >> 2] < d11) {
  HEAPF32[i5 >> 2] = d11;
 }
 i2 = i4 + (i2 << 6) + 28 | 0;
 d11 = +HEAPF32[i3 + 12 >> 2];
 if (!(+HEAPF32[i2 >> 2] < d11)) {
  STACKTOP = i1;
  return;
 }
 HEAPF32[i2 >> 2] = d11;
 STACKTOP = i1;
 return;
}
function __ZN21btConeTwistConstraintC2ER11btRigidBodyS1_RK11btTransformS4_(i1, i5, i4, i3, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBodyS2_(i1, 5, i5, i4);
 HEAP32[i1 >> 2] = 444456;
 i5 = i1 + 292 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i5 = i1 + 308 | 0;
 i4 = i3 + 16 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i5 = i1 + 324 | 0;
 i4 = i3 + 32 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i5 = i1 + 340 | 0;
 i4 = i3 + 48 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i5 = i1 + 356 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i5 = i1 + 372 | 0;
 i4 = i2 + 16 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i5 = i1 + 388 | 0;
 i4 = i2 + 32 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i5 = i1 + 404 | 0;
 i4 = i2 + 48 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i5 = i1 + 516 | 0;
 HEAP8[i1 + 544 | 0] = 0;
 HEAP8[i5] = 0;
 HEAP8[i5 + 1 | 0] = 0;
 HEAP8[i5 + 2 | 0] = 0;
 HEAP8[i5 + 3 | 0] = 0;
 HEAPF32[i1 + 564 >> 2] = -1.0;
 HEAPF32[i1 + 436 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 440 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 444 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 420 >> 2] = 1.0;
 HEAPF32[i1 + 424 >> 2] = .30000001192092896;
 HEAPF32[i1 + 428 >> 2] = 1.0;
 HEAPF32[i1 + 432 >> 2] = .009999999776482582;
 HEAPF32[i1 + 448 >> 2] = .05000000074505806;
 HEAP32[i1 + 584 >> 2] = 0;
 HEAPF32[i1 + 588 >> 2] = 0.0;
 HEAPF32[i1 + 592 >> 2] = .699999988079071;
 HEAPF32[i1 + 596 >> 2] = 0.0;
 STACKTOP = i6;
 return;
}
function __ZN13BenchmarkDemo19createLargeMeshBodyEv(i13) {
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i1 + 48 | 0;
 i11 = i1 + 32 | 0;
 i8 = i1;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 i9 = i8 + 24 | 0;
 i7 = i8 + 28 | 0;
 i3 = i8 + 16 | 0;
 i4 = i8 + 20 | 0;
 i5 = i8 + 12 | 0;
 i6 = i8 + 4 | 0;
 i2 = i8 + 8 | 0;
 i12 = i13 + 8 | 0;
 i14 = i13 + 4 | 0;
 i13 = 0;
 do {
  i15 = __Z22btAlignedAllocInternalji(84, 16) | 0;
  HEAPF32[i15 + 4 >> 2] = 1.0;
  HEAPF32[i15 + 8 >> 2] = 1.0;
  HEAPF32[i15 + 12 >> 2] = 1.0;
  HEAPF32[i15 + 16 >> 2] = 0.0;
  HEAP32[i15 >> 2] = 457512;
  HEAP8[i15 + 36 | 0] = 1;
  HEAP32[i15 + 32 >> 2] = 0;
  HEAP32[i15 + 24 >> 2] = 0;
  HEAP32[i15 + 28 >> 2] = 0;
  HEAP32[i15 + 48 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i3 >> 2] = HEAP32[443184 + (i13 << 2) >> 2];
  HEAP32[i4 >> 2] = 12;
  HEAP32[i5 >> 2] = HEAP32[443120 + (i13 << 2) >> 2];
  HEAP32[i6 >> 2] = HEAP32[443216 + (i13 << 2) >> 2];
  HEAP32[i2 >> 2] = 6;
  HEAP32[i8 >> 2] = (HEAP32[443152 + (i13 << 2) >> 2] | 0) / 3 | 0;
  HEAP32[i9 >> 2] = 3;
  __ZN26btTriangleIndexVertexArray14addIndexedMeshERK13btIndexedMesh14PHY_ScalarType(i15, i8, 3);
  i17 = __Z22btAlignedAllocInternalji(76, 16) | 0;
  __ZN22btBvhTriangleMeshShapeC2EP23btStridingMeshInterfacebb(i17, i15, 1, 1);
  HEAP32[i10 + 0 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  HEAP32[i10 + 12 >> 2] = 0;
  i15 = __Z22btAlignedAllocInternalji(608, 16) | 0;
  __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i15, 0.0, 0, i17, i10);
  HEAPF32[i15 + 4 >> 2] = 1.0;
  i17 = i15 + 8 | 0;
  HEAP32[i17 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i15 + 20 >> 2] = 0;
  HEAPF32[i15 + 24 >> 2] = 1.0;
  i17 = i15 + 28 | 0;
  i16 = i15 + 44 | 0;
  HEAP32[i17 + 0 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = 0;
  HEAP32[i17 + 12 >> 2] = 0;
  HEAPF32[i16 >> 2] = 1.0;
  HEAPF32[i15 + 48 >> 2] = 0.0;
  HEAPF32[i15 + 52 >> 2] = 0.0;
  HEAPF32[i15 + 56 >> 2] = -25.0;
  HEAPF32[i15 + 60 >> 2] = 0.0;
  HEAPF32[i15 + 64 >> 2] = 0.0;
  HEAPF32[i15 + 184 >> 2] = +HEAPF32[i12 >> 2];
  i16 = HEAP32[i14 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i16 >> 2] | 0) + 80 >> 2] & 127](i16, i15);
  HEAPF32[i15 + 224 >> 2] = .8999999761581421;
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) < 8);
 STACKTOP = i1;
 return;
}
function __ZNK14btQuantizedBvh39walkStacklessQuantizedTreeCacheFriendlyEP21btNodeOverlapCallbackPtS2_(i11, i2, i10, i3) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i4 = STACKTOP;
 i9 = i11 + 152 | 0;
 if ((HEAP32[i9 >> 2] | 0) <= 0) {
  STACKTOP = i4;
  return;
 }
 i1 = i11 + 160 | 0;
 i5 = i10 + 4 | 0;
 i6 = i3 + 4 | 0;
 i7 = i10 + 2 | 0;
 i8 = i3 + 2 | 0;
 i11 = i11 + 136 | 0;
 i12 = 0;
 do {
  i13 = HEAP32[i1 >> 2] | 0;
  i14 = HEAP16[i10 >> 1] | 0;
  i15 = HEAP16[i3 >> 1] | 0;
  i18 = HEAP16[i5 >> 1] | 0;
  i19 = HEAP16[i6 >> 1] | 0;
  i21 = HEAP16[i7 >> 1] | 0;
  i16 = HEAP16[i8 >> 1] | 0;
  if ((i14 & 65535) <= (HEAPU16[i13 + (i12 << 5) + 6 >> 1] | 0) & (i15 & 65535) >= (HEAPU16[i13 + (i12 << 5) >> 1] | 0) & (i18 & 65535) <= (HEAPU16[i13 + (i12 << 5) + 10 >> 1] | 0) & (i19 & 65535) >= (HEAPU16[i13 + (i12 << 5) + 4 >> 1] | 0) & (i21 & 65535) <= (HEAPU16[i13 + (i12 << 5) + 8 >> 1] | 0) & (i16 & 65535) >= (HEAPU16[i13 + (i12 << 5) + 2 >> 1] | 0)) {
   i17 = HEAP32[i13 + (i12 << 5) + 12 >> 2] | 0;
   i22 = HEAP32[i13 + (i12 << 5) + 16 >> 2] | 0;
   i13 = i22 + i17 | 0;
   L8 : do {
    if ((i22 | 0) > 0) {
     i22 = i16;
     i16 = i17;
     i20 = (HEAP32[i11 >> 2] | 0) + (i17 << 4) | 0;
     i17 = 1;
     while (1) {
      i15 = (i14 & 65535) <= (HEAPU16[i20 + 6 >> 1] | 0) & (i15 & 65535) >= (HEAPU16[i20 >> 1] | 0) & (i18 & 65535) <= (HEAPU16[i20 + 10 >> 1] | 0) & (i19 & 65535) >= (HEAPU16[i20 + 4 >> 1] | 0) & (i21 & 65535) <= (HEAPU16[i20 + 8 >> 1] | 0) & (i22 & 65535) >= (HEAPU16[i20 + 2 >> 1] | 0);
      i14 = i20 + 12 | 0;
      i19 = HEAP32[i14 >> 2] | 0;
      i18 = (i19 | 0) > -1;
      if (i18 & i15) {
       FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i19 >> 21, i19 & 2097151);
      }
      if (i15 | i18) {
       i16 = i16 + 1 | 0;
       i20 = i20 + 16 | 0;
      } else {
       i22 = HEAP32[i14 >> 2] | 0;
       i16 = i16 - i22 | 0;
       i20 = i20 + (0 - i22 << 4) | 0;
      }
      if ((i16 | 0) >= (i13 | 0)) {
       break L8;
      }
      i14 = HEAP16[i10 >> 1] | 0;
      i15 = HEAP16[i3 >> 1] | 0;
      i18 = HEAP16[i5 >> 1] | 0;
      i19 = HEAP16[i6 >> 1] | 0;
      i21 = HEAP16[i7 >> 1] | 0;
      i22 = HEAP16[i8 >> 1] | 0;
      i17 = i17 + 1 | 0;
     }
    } else {
     i17 = 0;
    }
   } while (0);
   if ((HEAP32[114066] | 0) < (i17 | 0)) {
    HEAP32[114066] = i17;
   }
  }
  i12 = i12 + 1 | 0;
 } while ((i12 | 0) < (HEAP32[i9 >> 2] | 0));
 STACKTOP = i4;
 return;
}
function __ZN28btTriangleConvexcastCallback15processTriangleEP9btVector3ii(i1, i7, i4, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 i2 = i6 + 568 | 0;
 i13 = i6 + 208 | 0;
 i14 = i6 + 200 | 0;
 i11 = i6 + 176 | 0;
 i3 = i6;
 i17 = i7 + 16 | 0;
 i16 = i7 + 32 | 0;
 __ZN23btPolyhedralConvexShapeC2Ev(i2);
 HEAP32[i2 >> 2] = 456552;
 i18 = i2 + 56 | 0;
 HEAP32[i2 + 4 >> 2] = 1;
 HEAP32[i18 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i7 = i2 + 72 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
 i7 = i2 + 88 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
 HEAPF32[i2 + 44 >> 2] = +HEAPF32[i1 + 204 >> 2];
 HEAPF32[i13 + 308 >> 2] = 9999999747378752.0e-20;
 i7 = i13 + 332 | 0;
 HEAP8[i7] = HEAP8[i7] & -16;
 HEAP32[i14 >> 2] = 453240;
 __ZN27btContinuousConvexCollisionC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i11, HEAP32[i1 + 4 >> 2] | 0, i2, i13, i14);
 HEAP32[i3 >> 2] = 450968;
 i14 = i3 + 164 | 0;
 HEAP32[i3 + 168 >> 2] = 0;
 HEAPF32[i14 >> 2] = 1.0;
 HEAPF32[i3 + 172 >> 2] = +HEAPF32[i1 + 208 >> 2];
 i13 = i1 + 136 | 0;
 if (!(__ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i11, i1 + 8 | 0, i1 + 72 | 0, i13, i13, i3) | 0)) {
  __ZN23btPolyhedralConvexShapeD2Ev(i2);
  STACKTOP = i6;
  return;
 }
 i11 = i3 + 132 | 0;
 d10 = +HEAPF32[i11 >> 2];
 i13 = i3 + 136 | 0;
 d12 = +HEAPF32[i13 >> 2];
 i7 = i3 + 140 | 0;
 d8 = +HEAPF32[i7 >> 2];
 d9 = d10 * d10 + d12 * d12 + d8 * d8;
 if (!(d9 > 9999999747378752.0e-20)) {
  __ZN23btPolyhedralConvexShapeD2Ev(i2);
  STACKTOP = i6;
  return;
 }
 d15 = +HEAPF32[i14 >> 2];
 if (!(d15 < +HEAPF32[i1 + 200 >> 2])) {
  __ZN23btPolyhedralConvexShapeD2Ev(i2);
  STACKTOP = i6;
  return;
 }
 d9 = 1.0 / +Math_sqrt(+d9);
 HEAPF32[i11 >> 2] = d10 * d9;
 HEAPF32[i13 >> 2] = d12 * d9;
 HEAPF32[i7 >> 2] = d8 * d9;
 +FUNCTION_TABLE_diiidii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 3](i1, i11, i3 + 148 | 0, d15, i4, i5);
 __ZN23btPolyhedralConvexShapeD2Ev(i2);
 STACKTOP = i6;
 return;
}
function __ZN19btTriangleMeshShapeC2EP23btStridingMeshInterface(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i2 + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2;
 __ZN14btConcaveShapeC2Ev(i1);
 HEAP32[i1 >> 2] = 457632;
 HEAP32[i1 + 48 >> 2] = i6;
 HEAP32[i1 + 4 >> 2] = 21;
 if (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 63](i6, i1 + 16 | 0, i1 + 32 | 0);
  STACKTOP = i2;
  return;
 } else {
  i9 = i5 + 4 | 0;
  i8 = i5 + 8 | 0;
  i6 = i1 + 12 | 0;
  HEAP32[i5 + 0 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i5 >> 2] = 1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i3, i1, i5);
  HEAPF32[i1 + 32 >> 2] = +HEAPF32[i3 >> 2] + +HEAPF32[i6 >> 2];
  HEAPF32[i5 >> 2] = -1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i4, i1, i5);
  HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAPF32[i1 + 16 >> 2] = +HEAPF32[i3 >> 2] - +HEAPF32[i6 >> 2];
  HEAP32[i5 + 0 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i9 >> 2] = 1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i3, i1, i5);
  i7 = i3 + 4 | 0;
  HEAPF32[i1 + 36 >> 2] = +HEAPF32[i7 >> 2] + +HEAPF32[i6 >> 2];
  HEAPF32[i9 >> 2] = -1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i4, i1, i5);
  HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAPF32[i1 + 20 >> 2] = +HEAPF32[i7 >> 2] - +HEAPF32[i6 >> 2];
  HEAP32[i5 + 0 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i8 >> 2] = 1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i3, i1, i5);
  i7 = i3 + 8 | 0;
  HEAPF32[i1 + 40 >> 2] = +HEAPF32[i7 >> 2] + +HEAPF32[i6 >> 2];
  HEAPF32[i8 >> 2] = -1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i4, i1, i5);
  HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAPF32[i1 + 24 >> 2] = +HEAPF32[i7 >> 2] - +HEAPF32[i6 >> 2];
  STACKTOP = i2;
  return;
 }
}
function __ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectss(i1, i7, i8, i9) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i6 + 32 | 0;
 i4 = i6 + 16 | 0;
 i5 = i6;
 i2 = i1 + 8 | 0;
 i14 = HEAP32[i2 >> 2] | 0;
 i12 = i1 + 12 | 0;
 if ((i14 | 0) == (HEAP32[i12 >> 2] | 0) ? (i11 = (i14 | 0) == 0 ? 1 : i14 << 1, (i14 | 0) < (i11 | 0)) : 0) {
  if ((i11 | 0) == 0) {
   i10 = 0;
  } else {
   i10 = __Z22btAlignedAllocInternalji(i11 << 2, 16) | 0;
   i14 = HEAP32[i2 >> 2] | 0;
  }
  i13 = i1 + 16 | 0;
  if ((i14 | 0) > 0) {
   i15 = 0;
   do {
    i16 = i10 + (i15 << 2) | 0;
    if ((i16 | 0) != 0) {
     HEAP32[i16 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + (i15 << 2) >> 2];
    }
    i15 = i15 + 1 | 0;
   } while ((i15 | 0) != (i14 | 0));
  }
  i16 = HEAP32[i13 >> 2] | 0;
  i15 = i1 + 20 | 0;
  if ((i16 | 0) != 0) {
   if ((HEAP8[i15] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i16);
    i14 = HEAP32[i2 >> 2] | 0;
   }
   HEAP32[i13 >> 2] = 0;
  }
  HEAP8[i15] = 1;
  HEAP32[i13 >> 2] = i10;
  HEAP32[i12 >> 2] = i11;
 }
 i10 = (HEAP32[i1 + 16 >> 2] | 0) + (i14 << 2) | 0;
 if ((i10 | 0) != 0) {
  HEAP32[i10 >> 2] = i7;
 }
 HEAP32[i2 >> 2] = i14 + 1;
 i16 = i7 + 4 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
 i16 = i3 + 16 | 0;
 i15 = i7 + 20 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 i16 = i3 + 32 | 0;
 i15 = i7 + 36 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 i16 = i3 + 48 | 0;
 i15 = i7 + 52 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 i16 = i7 + 192 | 0;
 i15 = HEAP32[i16 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] & 63](i15, i3, i4, i5);
 i15 = HEAP32[i1 + 76 >> 2] | 0;
 HEAP32[i7 + 188 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] & 3](i15, i4, i5, HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0, i7, i8, i9, HEAP32[i1 + 24 >> 2] | 0, 0) | 0;
 STACKTOP = i6;
 return;
}
function __ZNK14btCapsuleShape37localGetSupportingVertexWithoutMarginERK9btVector3(i5, i6, i12) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, d23 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i14 = i4 + 16 | 0;
 i7 = i4;
 i1 = i5 + 4 | 0;
 i2 = i5 + 8 | 0;
 i3 = i5 + 12 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 d8 = +HEAPF32[i12 >> 2];
 d9 = +HEAPF32[i12 + 4 >> 2];
 d10 = +HEAPF32[i12 + 8 >> 2];
 d11 = d8 * d8 + d9 * d9 + d10 * d10;
 if (d11 < 9999999747378752.0e-20) {
  d8 = 1.0;
  d9 = 0.0;
  d10 = 0.0;
 } else {
  d20 = 1.0 / +Math_sqrt(+d11);
  d8 = d8 * d20;
  d9 = d9 * d20;
  d10 = d10 * d20;
 }
 i16 = i6 + 52 | 0;
 i13 = HEAP32[i16 >> 2] | 0;
 d11 = +HEAPF32[i6 + (((i13 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 i22 = i14 + 4 | 0;
 i21 = i14 + 8 | 0;
 i15 = i6 + (i13 << 2) + 28 | 0;
 HEAP32[i14 + 0 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 HEAPF32[i14 + (i13 << 2) >> 2] = +HEAPF32[i15 >> 2];
 i13 = i6 + 12 | 0;
 i15 = i6 + 16 | 0;
 i12 = i6 + 20 | 0;
 d17 = d11 * d8 * +HEAPF32[i13 >> 2] + +HEAPF32[i14 >> 2];
 d20 = d11 * d9 * +HEAPF32[i15 >> 2] + +HEAPF32[i22 >> 2];
 d18 = d11 * d10 * +HEAPF32[i12 >> 2] + +HEAPF32[i21 >> 2];
 d19 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 7](i6);
 d17 = d17 - d8 * d19;
 d20 = d20 - d9 * d19;
 d19 = d18 - d10 * d19;
 d18 = d10 * d19 + (d8 * d17 + d9 * d20);
 if (d18 > -999999984306749400.0) {
  HEAPF32[i5 >> 2] = d17;
  HEAPF32[i1 >> 2] = d20;
  HEAPF32[i2 >> 2] = d19;
  HEAPF32[i3 >> 2] = 0.0;
  d17 = d18;
 } else {
  d17 = -999999984306749400.0;
 }
 i21 = i7 + 4 | 0;
 i22 = i7 + 8 | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i16 = HEAP32[i16 >> 2] | 0;
 HEAPF32[i7 + (i16 << 2) >> 2] = -+HEAPF32[i6 + (i16 << 2) + 28 >> 2];
 d23 = d11 * d8 * +HEAPF32[i13 >> 2] + +HEAPF32[i7 >> 2];
 d18 = d11 * d9 * +HEAPF32[i15 >> 2] + +HEAPF32[i21 >> 2];
 d20 = d11 * d10 * +HEAPF32[i12 >> 2] + +HEAPF32[i22 >> 2];
 d19 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 7](i6);
 d11 = d23 - d8 * d19;
 d18 = d18 - d9 * d19;
 d19 = d20 - d10 * d19;
 if (!(d10 * d19 + (d8 * d11 + d9 * d18) > d17)) {
  STACKTOP = i4;
  return;
 }
 HEAPF32[i5 >> 2] = d11;
 HEAPF32[i1 >> 2] = d18;
 HEAPF32[i2 >> 2] = d19;
 HEAPF32[i3 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN20btAxisSweep3InternalItE9sortMaxUpEitP12btDispatcherb(i15, i2, i7, i6, i1) {
 i15 = i15 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = STACKTOP;
 i17 = HEAP32[i15 + (i2 << 2) + 68 >> 2] | 0;
 i19 = i7 & 65535;
 i18 = i19 + 1 | 0;
 i11 = i15 + 60 | 0;
 i21 = HEAP32[i11 >> 2] | 0;
 i16 = HEAPU16[i17 + (i19 << 2) + 2 >> 1] | 0;
 i20 = HEAP16[i17 + (i18 << 2) + 2 >> 1] | 0;
 if (i20 << 16 >> 16 == 0) {
  STACKTOP = i6;
  return;
 }
 i14 = 1 << i2 & 3;
 i9 = 1 << i14 & 3;
 i12 = i21 + (i16 << 6) + (i14 << 1) + 54 | 0;
 i13 = i21 + (i16 << 6) + (i14 << 1) + 48 | 0;
 i7 = i21 + (i16 << 6) + (i9 << 1) + 54 | 0;
 i8 = i21 + (i16 << 6) + (i9 << 1) + 48 | 0;
 i10 = i15 + 92 | 0;
 i15 = i15 + 96 | 0;
 i16 = i21 + (i16 << 6) + (i2 << 1) + 54 | 0;
 i19 = i17 + (i19 << 2) | 0;
 i17 = i17 + (i18 << 2) | 0;
 while (1) {
  i18 = HEAP16[i17 >> 1] | 0;
  if ((HEAPU16[i19 >> 1] | 0) < (i18 & 65535)) {
   i1 = 15;
   break;
  }
  i21 = HEAP32[i11 >> 2] | 0;
  i20 = i20 & 65535;
  if ((i18 & 1) == 0) {
   if (((((i1 ? (HEAPU16[i12 >> 1] | 0) >= (HEAPU16[i21 + (i20 << 6) + (i14 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i21 + (i20 << 6) + (i14 << 1) + 54 >> 1] | 0) >= (HEAPU16[i13 >> 1] | 0) : 0) ? (HEAPU16[i7 >> 1] | 0) >= (HEAPU16[i21 + (i20 << 6) + (i9 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i21 + (i20 << 6) + (i9 << 1) + 54 >> 1] | 0) >= (HEAPU16[i8 >> 1] | 0) : 0) ? (i3 = HEAP32[i10 >> 2] | 0, i4 = i21 + ((HEAPU16[i19 + 2 >> 1] | 0) << 6) | 0, i5 = i21 + (i20 << 6) | 0, FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i4, i5) | 0, i3 = HEAP32[i15 >> 2] | 0, (i3 | 0) != 0) : 0) {
    FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i4, i5) | 0;
   }
   i21 = i21 + (i20 << 6) + (i2 << 1) + 48 | 0;
   HEAP16[i21 >> 1] = (HEAP16[i21 >> 1] | 0) + -1 << 16 >> 16;
  } else {
   i21 = i21 + (i20 << 6) + (i2 << 1) + 54 | 0;
   HEAP16[i21 >> 1] = (HEAP16[i21 >> 1] | 0) + -1 << 16 >> 16;
  }
  HEAP16[i16 >> 1] = (HEAP16[i16 >> 1] | 0) + 1 << 16 >> 16;
  i20 = HEAPU16[i19 >> 1] | HEAPU16[i19 + 2 >> 1] << 16;
  i21 = HEAPU16[i17 >> 1] | HEAPU16[i17 + 2 >> 1] << 16;
  HEAP16[i19 >> 1] = i21;
  HEAP16[i19 + 2 >> 1] = i21 >>> 16;
  HEAP16[i17 >> 1] = i20;
  HEAP16[i17 + 2 >> 1] = i20 >>> 16;
  i20 = HEAP16[i17 + 6 >> 1] | 0;
  if (i20 << 16 >> 16 == 0) {
   i1 = 15;
   break;
  } else {
   i19 = i19 + 4 | 0;
   i17 = i17 + 4 | 0;
  }
 }
 if ((i1 | 0) == 15) {
  STACKTOP = i6;
  return;
 }
}
function __ZN32btSphereSphereCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i5, i16, i17, i2, i1) {
 i5 = i5 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 16 | 0;
 i3 = i2;
 i15 = HEAP32[i5 + 12 >> 2] | 0;
 if ((i15 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = i1 + 4 | 0;
 HEAP32[i5 >> 2] = i15;
 i18 = HEAP32[i16 + 192 >> 2] | 0;
 i19 = HEAP32[i17 + 192 >> 2] | 0;
 d7 = +HEAPF32[i17 + 52 >> 2];
 d12 = +HEAPF32[i16 + 52 >> 2] - d7;
 d6 = +HEAPF32[i17 + 56 >> 2];
 d13 = +HEAPF32[i16 + 56 >> 2] - d6;
 d8 = +HEAPF32[i17 + 60 >> 2];
 d14 = +HEAPF32[i16 + 60 >> 2] - d8;
 d9 = +Math_sqrt(+(d12 * d12 + d13 * d13 + d14 * d14));
 d10 = +HEAPF32[i19 + 28 >> 2] * +HEAPF32[i19 + 12 >> 2];
 d11 = +HEAPF32[i18 + 28 >> 2] * +HEAPF32[i18 + 12 >> 2] + d10;
 if (d9 > d11) {
  if ((HEAP32[i15 + 1116 >> 2] | 0) == 0) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[i15 + 1108 >> 2] | 0) == (HEAP32[i1 + 136 >> 2] | 0)) {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i15, i1 + 8 | 0, i1 + 72 | 0);
   STACKTOP = i2;
   return;
  } else {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i15, i1 + 72 | 0, i1 + 8 | 0);
   STACKTOP = i2;
   return;
  }
 }
 HEAPF32[i4 >> 2] = 1.0;
 i17 = i4 + 4 | 0;
 HEAPF32[i17 >> 2] = 0.0;
 i16 = i4 + 8 | 0;
 HEAPF32[i16 >> 2] = 0.0;
 i15 = i4 + 12 | 0;
 HEAPF32[i15 >> 2] = 0.0;
 if (d9 > 1.1920928955078125e-7) {
  d21 = 1.0 / d9;
  d12 = d12 * d21;
  d20 = d13 * d21;
  d13 = d14 * d21;
  HEAPF32[i4 >> 2] = d12;
  HEAPF32[i17 >> 2] = d20;
  HEAPF32[i16 >> 2] = d13;
  HEAPF32[i15 >> 2] = 0.0;
  d14 = d20;
 } else {
  d12 = 1.0;
  d14 = 0.0;
  d13 = 0.0;
 }
 HEAPF32[i3 >> 2] = d10 * d12 + d7;
 HEAPF32[i3 + 4 >> 2] = d10 * d14 + d6;
 HEAPF32[i3 + 8 >> 2] = d10 * d13 + d8;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 7](i1, i4, i3, d9 - d11);
 i3 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i1 + 136 >> 2] | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 8 | 0, i1 + 72 | 0);
  STACKTOP = i2;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 72 | 0, i1 + 8 | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1, i8, i6, i9, i7, i10, i5, d3, i4, d2) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 d2 = +d2;
 var i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0;
 i11 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 d23 = +HEAPF32[i9 + 4 >> 2];
 d22 = +HEAPF32[i1 + 8 >> 2];
 d20 = +HEAPF32[i9 + 8 >> 2];
 d14 = +HEAPF32[i1 + 4 >> 2];
 d18 = d23 * d22 - d20 * d14;
 d12 = +HEAPF32[i1 >> 2];
 d21 = +HEAPF32[i9 >> 2];
 d20 = d20 * d12 - d22 * d21;
 d23 = d14 * d21 - d23 * d12;
 d21 = d18 * +HEAPF32[i8 + 16 >> 2] + d20 * +HEAPF32[i8 + 20 >> 2] + d23 * +HEAPF32[i8 + 24 >> 2];
 d16 = d18 * +HEAPF32[i8 + 32 >> 2] + d20 * +HEAPF32[i8 + 36 >> 2] + d23 * +HEAPF32[i8 + 40 >> 2];
 i24 = i1 + 16 | 0;
 HEAPF32[i24 >> 2] = d18 * +HEAPF32[i8 >> 2] + +HEAPF32[i8 + 4 >> 2] * d20 + d23 * +HEAPF32[i8 + 8 >> 2];
 i9 = i1 + 20 | 0;
 HEAPF32[i9 >> 2] = d21;
 i10 = i1 + 24 | 0;
 HEAPF32[i10 >> 2] = d16;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 d12 = -d12;
 d14 = -d14;
 d22 = -d22;
 d16 = +HEAPF32[i7 + 4 >> 2];
 d21 = +HEAPF32[i7 + 8 >> 2];
 d23 = d16 * d22 - d21 * d14;
 d20 = +HEAPF32[i7 >> 2];
 d22 = d21 * d12 - d20 * d22;
 d12 = d20 * d14 - d16 * d12;
 d16 = +HEAPF32[i6 >> 2] * d23 + +HEAPF32[i6 + 4 >> 2] * d22 + d12 * +HEAPF32[i6 + 8 >> 2];
 d14 = d23 * +HEAPF32[i6 + 16 >> 2] + d22 * +HEAPF32[i6 + 20 >> 2] + d12 * +HEAPF32[i6 + 24 >> 2];
 d12 = d23 * +HEAPF32[i6 + 32 >> 2] + d22 * +HEAPF32[i6 + 36 >> 2] + d12 * +HEAPF32[i6 + 40 >> 2];
 HEAPF32[i1 + 32 >> 2] = d16;
 HEAPF32[i1 + 36 >> 2] = d14;
 HEAPF32[i1 + 40 >> 2] = d12;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 d22 = +HEAPF32[i24 >> 2];
 d23 = +HEAPF32[i5 >> 2] * d22;
 d20 = +HEAPF32[i9 >> 2];
 d21 = +HEAPF32[i5 + 4 >> 2] * d20;
 d18 = +HEAPF32[i10 >> 2];
 d19 = +HEAPF32[i5 + 8 >> 2] * d18;
 HEAPF32[i1 + 48 >> 2] = d23;
 HEAPF32[i1 + 52 >> 2] = d21;
 HEAPF32[i1 + 56 >> 2] = d19;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 d17 = +HEAPF32[i4 >> 2] * d16;
 d15 = +HEAPF32[i4 + 4 >> 2] * d14;
 d13 = +HEAPF32[i4 + 8 >> 2] * d12;
 HEAPF32[i1 + 64 >> 2] = d17;
 HEAPF32[i1 + 68 >> 2] = d15;
 HEAPF32[i1 + 72 >> 2] = d13;
 HEAPF32[i1 + 76 >> 2] = 0.0;
 HEAPF32[i1 + 80 >> 2] = d23 * d22 + d21 * d20 + d19 * d18 + d3 + d2 + (d17 * d16 + d15 * d14 + d13 * d12);
 STACKTOP = i11;
 return;
}
function __ZNK22btBvhTriangleMeshShape9serializeEPvP12btSerializer(i5, i3, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 __ZNK16btCollisionShape9serializeEPvP12btSerializer(i5, i3, i1) | 0;
 i4 = HEAP32[i5 + 48 >> 2] | 0;
 FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] & 31](i4, i3 + 12 | 0, i1) | 0;
 HEAPF32[i3 + 52 >> 2] = +HEAPF32[i5 + 12 >> 2];
 i4 = i5 + 52 | 0;
 do {
  if ((HEAP32[i4 >> 2] | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 127](i1) | 0) & 1 | 0) == 0 : 0) {
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0) | 0;
   if ((i7 | 0) == 0) {
    HEAP32[i3 + 40 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0) | 0;
    HEAP32[i3 + 44 >> 2] = 0;
    i8 = HEAP32[i4 >> 2] | 0;
    i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 127](i8) | 0;
    i8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i8, 1) | 0;
    i7 = HEAP32[i4 >> 2] | 0;
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 31](i7, HEAP32[i8 + 8 >> 2] | 0, i1) | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i8, i7, 1213612625, HEAP32[i4 >> 2] | 0);
    break;
   } else {
    HEAP32[i3 + 40 >> 2] = i7;
    HEAP32[i3 + 44 >> 2] = 0;
    break;
   }
  } else {
   i6 = 6;
  }
 } while (0);
 if ((i6 | 0) == 6) {
  HEAP32[i3 + 40 >> 2] = 0;
  HEAP32[i3 + 44 >> 2] = 0;
 }
 i4 = i5 + 56 | 0;
 if ((HEAP32[i4 >> 2] | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 127](i1) | 0) & 2 | 0) == 0 : 0) {
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0) | 0;
  if ((i5 | 0) == 0) {
   HEAP32[i3 + 48 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0) | 0;
   i7 = HEAP32[i4 >> 2] | 0;
   i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 127](i7) | 0;
   i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i7, 1) | 0;
   i8 = HEAP32[i4 >> 2] | 0;
   i8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i7, i8, 1346456916, HEAP32[i4 >> 2] | 0);
   STACKTOP = i2;
   return 447568;
  } else {
   HEAP32[i3 + 48 >> 2] = i5;
   STACKTOP = i2;
   return 447568;
  }
 }
 HEAP32[i3 + 48 >> 2] = 0;
 STACKTOP = i2;
 return 447568;
}
function __ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i3, i2, i1, i4, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i8 = i5 + 104 | 0;
 i6 = i5 + 56 | 0;
 i7 = i5 + 16 | 0;
 i4 = i5;
 HEAPF32[i8 >> 2] = +HEAPF32[i2 >> 2];
 HEAPF32[i6 >> 2] = +HEAPF32[i2 + 64 >> 2];
 HEAPF32[i8 + 4 >> 2] = +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i6 + 4 >> 2] = +HEAPF32[i2 + 68 >> 2];
 HEAPF32[i8 + 8 >> 2] = +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i6 + 8 >> 2] = +HEAPF32[i2 + 72 >> 2];
 HEAPF32[i8 + 16 >> 2] = +HEAPF32[i2 + 16 >> 2];
 HEAPF32[i6 + 16 >> 2] = +HEAPF32[i2 + 80 >> 2];
 HEAPF32[i8 + 20 >> 2] = +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i6 + 20 >> 2] = +HEAPF32[i2 + 84 >> 2];
 HEAPF32[i8 + 24 >> 2] = +HEAPF32[i2 + 24 >> 2];
 HEAPF32[i6 + 24 >> 2] = +HEAPF32[i2 + 88 >> 2];
 HEAPF32[i8 + 32 >> 2] = +HEAPF32[i2 + 32 >> 2];
 HEAPF32[i6 + 32 >> 2] = +HEAPF32[i2 + 96 >> 2];
 HEAPF32[i8 + 36 >> 2] = +HEAPF32[i2 + 36 >> 2];
 HEAPF32[i6 + 36 >> 2] = +HEAPF32[i2 + 100 >> 2];
 HEAPF32[i8 + 40 >> 2] = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i6 + 40 >> 2] = +HEAPF32[i2 + 104 >> 2];
 i14 = HEAP32[i3 + 4 >> 2] | 0;
 d10 = +HEAPF32[i14 + 28 >> 2];
 d9 = +HEAPF32[i14 + 32 >> 2];
 d13 = +HEAPF32[i14 + 36 >> 2];
 d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] & 7](i14);
 d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] & 7](i14);
 d13 = (d13 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] & 7](i14)) * 2.0;
 HEAPF32[i7 >> 2] = (d10 + d12) * 2.0;
 HEAPF32[i7 + 4 >> 2] = (d9 + d11) * 2.0;
 HEAPF32[i7 + 8 >> 2] = d13;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 i3 = HEAP32[i3 + 8 >> 2] | 0;
 d13 = +HEAPF32[i3 + 28 >> 2];
 d11 = +HEAPF32[i3 + 32 >> 2];
 d9 = +HEAPF32[i3 + 36 >> 2];
 d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 d9 = (d9 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3)) * 2.0;
 HEAPF32[i4 >> 2] = (d13 + d12) * 2.0;
 HEAPF32[i4 + 4 >> 2] = (d11 + d10) * 2.0;
 HEAPF32[i4 + 8 >> 2] = d9;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 __Z8dBoxBox2RK9btVector3PKfS1_S1_S3_S1_RS_PfPiiP12dContactGeomiRN36btDiscreteCollisionDetectorInterface6ResultE(i2 + 48 | 0, i8, i7, i2 + 112 | 0, i6, i4, i5 + 40 | 0, i5 + 36 | 0, i5 + 32 | 0, 4, 0, 0, i1) | 0;
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld26calculateSimulationIslandsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(445e3);
 i2 = i1 + 176 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i1, HEAP32[i1 + 24 >> 2] | 0);
 i3 = HEAP32[i1 + 184 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  i11 = HEAP32[i2 >> 2] | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i10 = i10 + 12 | 0;
  i10 = HEAP32[i10 >> 2] | 0;
  FUNCTION_TABLE_vii[i10 & 127](i11, i1);
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i6;
  return;
 }
 i5 = HEAP32[i1 + 192 >> 2] | 0;
 i4 = 0;
 do {
  i7 = HEAP32[i5 + (i4 << 2) >> 2] | 0;
  i8 = HEAP32[i7 + 24 >> 2] | 0;
  i7 = HEAP32[i7 + 28 >> 2] | 0;
  do {
   if (((i8 | 0) != 0 ? !((HEAP32[i8 + 204 >> 2] & 3 | 0) != 0 | (i7 | 0) == 0) : 0) ? (HEAP32[i7 + 204 >> 2] & 3 | 0) == 0 : 0) {
    i11 = HEAP32[i8 + 216 >> 2] | 0;
    if ((i11 | 0) == 2 | (i11 | 0) == 5 ? (i11 = HEAP32[i7 + 216 >> 2] | 0, (i11 | 0) == 2 | (i11 | 0) == 5) : 0) {
     break;
    }
    i9 = HEAP32[i8 + 208 >> 2] | 0;
    i8 = HEAP32[i7 + 208 >> 2] | 0;
    i7 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
    i10 = i7 + (i9 << 3) | 0;
    i11 = HEAP32[i10 >> 2] | 0;
    if ((i11 | 0) != (i9 | 0)) {
     i9 = i11;
     while (1) {
      i9 = i7 + (i9 << 3) | 0;
      HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
      i9 = HEAP32[i9 >> 2] | 0;
      i10 = i7 + (i9 << 3) | 0;
      i11 = HEAP32[i10 >> 2] | 0;
      if ((i9 | 0) == (i11 | 0)) {
       break;
      } else {
       i9 = i11;
      }
     }
    }
    i10 = i7 + (i8 << 3) | 0;
    i11 = HEAP32[i10 >> 2] | 0;
    if ((i11 | 0) != (i8 | 0)) {
     i8 = i11;
     while (1) {
      i8 = i7 + (i8 << 3) | 0;
      HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
      i8 = HEAP32[i8 >> 2] | 0;
      i10 = i7 + (i8 << 3) | 0;
      i11 = HEAP32[i10 >> 2] | 0;
      if ((i8 | 0) == (i11 | 0)) {
       break;
      } else {
       i8 = i11;
      }
     }
    }
    if ((i9 | 0) != (i8 | 0)) {
     HEAP32[i7 + (i9 << 3) >> 2] = i8;
     i11 = i7 + (i8 << 3) + 4 | 0;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i7 + (i9 << 3) + 4 >> 2] | 0);
    }
   }
  } while (0);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i3 | 0));
 i11 = HEAP32[i2 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 i10 = i10 + 12 | 0;
 i10 = HEAP32[i10 >> 2] | 0;
 FUNCTION_TABLE_vii[i10 & 127](i11, i1);
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i6;
 return;
}
function __ZNK20btConvexHullInternal10Rational647compareERKS0_(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 i1 = HEAP32[i8 + 16 >> 2] | 0;
 i3 = HEAP32[i7 + 16 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i10 = i1 - i3 | 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 if ((i1 | 0) == 0) {
  i10 = 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 i12 = i8;
 i13 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i12 + 4 >> 2] | 0;
 i11 = i7 + 8 | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i11 + 4 >> 2] | 0;
 i5 = ___muldi3(i6 | 0, 0, i13 | 0, 0) | 0;
 i3 = tempRet0;
 i13 = ___muldi3(i11 | 0, 0, i13 | 0, 0) | 0;
 i9 = tempRet0;
 i6 = ___muldi3(i6 | 0, 0, i12 | 0, 0) | 0;
 i4 = tempRet0;
 i12 = ___muldi3(i11 | 0, 0, i12 | 0, 0) | 0;
 i11 = tempRet0;
 i6 = _i64Add(i13 | 0, 0, i6 | 0, 0) | 0;
 i13 = tempRet0;
 i11 = _i64Add(i9 | 0, 0, i12 | 0, i11 | 0) | 0;
 i4 = _i64Add(i11 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
 i13 = _i64Add(i4 | 0, tempRet0 | 0, i13 | 0, 0) | 0;
 i4 = tempRet0;
 i3 = _i64Add(0, i6 | 0, i5 | 0, i3 | 0) | 0;
 i5 = tempRet0;
 i6 = _i64Add(i13 | 0, i4 | 0, (i5 >>> 0 < i6 >>> 0 | (i5 | 0) == (i6 | 0) & i3 >>> 0 < 0) & 1 | 0, 0) | 0;
 i4 = tempRet0;
 i13 = i8 + 8 | 0;
 i11 = HEAP32[i13 >> 2] | 0;
 i13 = HEAP32[i13 + 4 >> 2] | 0;
 i12 = i7;
 i9 = HEAP32[i12 >> 2] | 0;
 i12 = HEAP32[i12 + 4 >> 2] | 0;
 i7 = ___muldi3(i9 | 0, 0, i11 | 0, 0) | 0;
 i8 = tempRet0;
 i11 = ___muldi3(i12 | 0, 0, i11 | 0, 0) | 0;
 i14 = tempRet0;
 i9 = ___muldi3(i9 | 0, 0, i13 | 0, 0) | 0;
 i10 = tempRet0;
 i13 = ___muldi3(i12 | 0, 0, i13 | 0, 0) | 0;
 i12 = tempRet0;
 i9 = _i64Add(i11 | 0, 0, i9 | 0, 0) | 0;
 i11 = tempRet0;
 i12 = _i64Add(i14 | 0, 0, i13 | 0, i12 | 0) | 0;
 i10 = _i64Add(i12 | 0, tempRet0 | 0, i10 | 0, 0) | 0;
 i11 = _i64Add(i10 | 0, tempRet0 | 0, i11 | 0, 0) | 0;
 i10 = tempRet0;
 i8 = _i64Add(0, i9 | 0, i7 | 0, i8 | 0) | 0;
 i7 = tempRet0;
 i9 = _i64Add(i11 | 0, i10 | 0, (i7 >>> 0 < i9 >>> 0 | (i7 | 0) == (i9 | 0) & i8 >>> 0 < 0) & 1 | 0, 0) | 0;
 i10 = tempRet0;
 if (!(i4 >>> 0 < i10 >>> 0 | (i4 | 0) == (i10 | 0) & i6 >>> 0 < i9 >>> 0)) {
  if (!(i4 >>> 0 > i10 >>> 0 | (i4 | 0) == (i10 | 0) & i6 >>> 0 > i9 >>> 0)) {
   if (i5 >>> 0 < i7 >>> 0 | (i5 | 0) == (i7 | 0) & i3 >>> 0 < i8 >>> 0) {
    i3 = -1;
   } else {
    i3 = (i5 >>> 0 > i7 >>> 0 | (i5 | 0) == (i7 | 0) & i3 >>> 0 > i8 >>> 0) & 1;
   }
  } else {
   i3 = 1;
  }
 } else {
  i3 = -1;
 }
 i14 = Math_imul(i3, i1) | 0;
 STACKTOP = i2;
 return i14 | 0;
}
function __ZN13BenchmarkDemo11createTest1Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i5 + 32 | 0;
 i4 = i5 + 16 | 0;
 i3 = i5;
 i2 = __Z22btAlignedAllocInternalji(56, 16) | 0;
 __ZN23btPolyhedralConvexShapeC2Ev(i2);
 HEAP32[i2 >> 2] = 447328;
 HEAP32[i2 + 4 >> 2] = 0;
 d12 = +HEAPF32[i2 + 44 >> 2];
 d9 = +HEAPF32[i2 + 16 >> 2] - d12;
 d8 = +HEAPF32[i2 + 20 >> 2] - d12;
 HEAPF32[i2 + 28 >> 2] = +HEAPF32[i2 + 12 >> 2] - d12;
 HEAPF32[i2 + 32 >> 2] = d9;
 HEAPF32[i2 + 36 >> 2] = d8;
 HEAPF32[i2 + 40 >> 2] = 0.0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 __ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3(i2, 2.0, i4);
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 i4 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 d8 = 2.0;
 i10 = 0;
 d9 = -12.0;
 while (1) {
  i6 = 0;
  do {
   d12 = d9 + +(i6 | 0) * 3.0;
   i7 = 0;
   do {
    HEAP32[i1 + 0 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 2.0, i1);
    i13 = __Z22btAlignedAllocInternalji(608, 16) | 0;
    __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i13, 2.0, 0, i2, i1);
    d15 = d9 + +(i7 | 0) * 3.0;
    HEAPF32[i13 + 4 >> 2] = 1.0;
    i16 = i13 + 8 | 0;
    HEAP32[i16 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
    HEAP32[i16 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i16 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i13 + 20 >> 2] = 0;
    HEAPF32[i13 + 24 >> 2] = 1.0;
    i16 = i13 + 28 | 0;
    i14 = i13 + 44 | 0;
    HEAP32[i16 + 0 >> 2] = 0;
    HEAP32[i16 + 4 >> 2] = 0;
    HEAP32[i16 + 8 >> 2] = 0;
    HEAP32[i16 + 12 >> 2] = 0;
    HEAPF32[i14 >> 2] = 1.0;
    HEAP32[i13 + 48 >> 2] = 0;
    HEAPF32[i13 + 52 >> 2] = d15;
    HEAPF32[i13 + 56 >> 2] = d8;
    HEAPF32[i13 + 60 >> 2] = d12;
    HEAPF32[i13 + 64 >> 2] = 0.0;
    HEAPF32[i13 + 184 >> 2] = +HEAPF32[i4 >> 2];
    i14 = HEAP32[i11 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 80 >> 2] & 127](i14, i13);
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) < 8);
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < 8);
  i10 = i10 + 1 | 0;
  if ((i10 | 0) >= 47) {
   break;
  } else {
   d8 = d8 + 3.0;
   d9 = d9 + -.3499999940395355;
  }
 }
 STACKTOP = i5;
 return;
}
function __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK11btTransformS4_b(i1, i7, i6, i5, i4, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBodyS2_(i1, 4, i7, i6);
 HEAP32[i1 >> 2] = 445704;
 i7 = i1 + 544 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i7 = i1 + 560 | 0;
 i6 = i5 + 16 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 576 | 0;
 i6 = i5 + 32 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 592 | 0;
 i6 = i5 + 48 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 608 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i7 = i1 + 624 | 0;
 i6 = i4 + 16 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 640 | 0;
 i6 = i4 + 32 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 656 | 0;
 i6 = i4 + 48 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAPF32[i1 + 680 >> 2] = 0.0;
 HEAPF32[i1 + 684 >> 2] = -1.0;
 HEAPF32[i1 + 688 >> 2] = .8999999761581421;
 HEAPF32[i1 + 692 >> 2] = .30000001192092896;
 HEAPF32[i1 + 696 >> 2] = 1.0;
 HEAPF32[i1 + 700 >> 2] = 0.0;
 HEAPF32[i1 + 704 >> 2] = 0.0;
 HEAP8[i1 + 708 | 0] = 0;
 HEAP8[i1 + 728 | 0] = 0;
 HEAP8[i1 + 729 | 0] = 0;
 HEAP8[i1 + 730 | 0] = 0;
 HEAP8[i1 + 731 | 0] = 1;
 HEAP8[i1 + 732 | 0] = i3 & 1;
 HEAP32[i1 + 740 >> 2] = 0;
 HEAPF32[i1 + 724 >> 2] = i3 ? -1.0 : 1.0;
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItE9sortMinUpEitP12btDispatcherb(i13, i2, i8, i3, i7) {
 i13 = i13 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 i15 = HEAP32[i13 + (i2 << 2) + 68 >> 2] | 0;
 i14 = i8 & 65535;
 i17 = i14 + 1 | 0;
 i8 = i13 + 60 | 0;
 i16 = HEAP16[i15 + (i17 << 2) + 2 >> 1] | 0;
 if (i16 << 16 >> 16 == 0) {
  STACKTOP = i1;
  return;
 }
 i12 = (HEAP32[i8 >> 2] | 0) + ((HEAPU16[i15 + (i14 << 2) + 2 >> 1] | 0) << 6) + (i2 << 1) + 48 | 0;
 i9 = 1 << i2 & 3;
 i10 = 1 << i9 & 3;
 i11 = i13 + 92 | 0;
 i13 = i13 + 96 | 0;
 i14 = i15 + (i14 << 2) | 0;
 i15 = i15 + (i17 << 2) | 0;
 while (1) {
  i18 = HEAP16[i15 >> 1] | 0;
  if ((HEAPU16[i14 >> 1] | 0) < (i18 & 65535)) {
   i2 = 15;
   break;
  }
  i17 = HEAP32[i8 >> 2] | 0;
  i16 = i16 & 65535;
  if ((i18 & 1) == 0) {
   i18 = i17 + (i16 << 6) + (i2 << 1) + 48 | 0;
   HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
  } else {
   i18 = HEAPU16[i14 + 2 >> 1] | 0;
   if (((((i7 ? (HEAPU16[i17 + (i18 << 6) + (i9 << 1) + 54 >> 1] | 0) >= (HEAPU16[i17 + (i16 << 6) + (i9 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i17 + (i16 << 6) + (i9 << 1) + 54 >> 1] | 0) >= (HEAPU16[i17 + (i18 << 6) + (i9 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i17 + (i18 << 6) + (i10 << 1) + 54 >> 1] | 0) >= (HEAPU16[i17 + (i16 << 6) + (i10 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i17 + (i16 << 6) + (i10 << 1) + 54 >> 1] | 0) >= (HEAPU16[i17 + (i18 << 6) + (i10 << 1) + 48 >> 1] | 0) : 0) ? (i4 = HEAP32[i11 >> 2] | 0, i5 = i17 + (i18 << 6) | 0, i6 = i17 + (i16 << 6) | 0, FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 15](i4, i5, i6, i3) | 0, i4 = HEAP32[i13 >> 2] | 0, (i4 | 0) != 0) : 0) {
    FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 15](i4, i5, i6, i3) | 0;
   }
   i18 = i17 + (i16 << 6) + (i2 << 1) + 54 | 0;
   HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
  }
  HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + 1 << 16 >> 16;
  i16 = HEAPU16[i14 >> 1] | HEAPU16[i14 + 2 >> 1] << 16;
  i18 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
  HEAP16[i14 >> 1] = i18;
  HEAP16[i14 + 2 >> 1] = i18 >>> 16;
  HEAP16[i15 >> 1] = i16;
  HEAP16[i15 + 2 >> 1] = i16 >>> 16;
  i16 = HEAP16[i15 + 6 >> 1] | 0;
  if (i16 << 16 >> 16 == 0) {
   i2 = 15;
   break;
  } else {
   i14 = i14 + 4 | 0;
   i15 = i15 + 4 | 0;
  }
 }
 if ((i2 | 0) == 15) {
  STACKTOP = i1;
  return;
 }
}
function __ZNK19btTriangleMeshShape24localGetSupportingVertexERK9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i16 = i4 + 160 | 0;
 i15 = i4 + 136 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i15 + 0 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 HEAP32[i15 + 16 >> 2] = 0;
 HEAP32[i5 >> 2] = 457768;
 i13 = i5 + 4 | 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i13 + 12 >> 2] = 0;
 HEAPF32[i5 + 20 >> 2] = 1.0;
 i13 = i5 + 24 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i5 + 36 >> 2] = 0;
 HEAPF32[i5 + 40 >> 2] = 1.0;
 i16 = i5 + 44 | 0;
 i14 = i5 + 60 | 0;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAPF32[i14 >> 2] = 1.0;
 HEAPF32[i5 + 64 >> 2] = 0.0;
 i14 = i5 + 68 | 0;
 i15 = i15 + 4 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 HEAPF32[i5 + 84 >> 2] = -999999984306749400.0;
 d12 = +HEAPF32[i3 >> 2];
 d9 = +HEAPF32[i3 + 4 >> 2];
 d11 = d9 * 0.0;
 d8 = +HEAPF32[i3 + 8 >> 2];
 d10 = d8 * 0.0;
 d9 = d12 * +HEAPF32[i13 >> 2] + d9 + d10;
 d8 = d12 * +HEAPF32[i5 + 28 >> 2] + d11 + d8;
 HEAPF32[i5 + 88 >> 2] = d12 + d11 + d10;
 HEAPF32[i5 + 92 >> 2] = d9;
 HEAPF32[i5 + 96 >> 2] = d8;
 HEAPF32[i5 + 100 >> 2] = 0.0;
 HEAPF32[i6 >> 2] = 999999984306749400.0;
 HEAPF32[i6 + 4 >> 2] = 999999984306749400.0;
 HEAPF32[i6 + 8 >> 2] = 999999984306749400.0;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 i3 = HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] | 0;
 HEAPF32[i7 >> 2] = -999999984306749400.0;
 HEAPF32[i7 + 4 >> 2] = -999999984306749400.0;
 HEAPF32[i7 + 8 >> 2] = -999999984306749400.0;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[i3 & 63](i2, i5, i7, i6);
 i3 = i5 + 4 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f(i1, i2, i3, i5, d10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 d10 = +d10;
 var i4 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0;
 i4 = STACKTOP;
 d11 = +HEAPF32[i3 >> 2];
 if (+HEAPF32[i2 >> 2] <= d11) {
  d8 = +HEAPF32[i3 + 4 >> 2];
  if ((((+HEAPF32[i2 + 4 >> 2] <= d8 ? +HEAPF32[i2 + 8 >> 2] <= +HEAPF32[i3 + 8 >> 2] : 0) ? +HEAPF32[i2 + 16 >> 2] >= +HEAPF32[i3 + 16 >> 2] : 0) ? +HEAPF32[i2 + 20 >> 2] >= +HEAPF32[i3 + 20 >> 2] : 0) ? +HEAPF32[i2 + 24 >> 2] >= +HEAPF32[i3 + 24 >> 2] : 0) {
   i15 = 0;
   STACKTOP = i4;
   return i15 | 0;
  }
 } else {
  d8 = +HEAPF32[i3 + 4 >> 2];
 }
 d11 = d11 - d10;
 HEAPF32[i3 >> 2] = d11;
 i6 = i3 + 4 | 0;
 d12 = d8 - d10;
 HEAPF32[i6 >> 2] = d12;
 i9 = i3 + 8 | 0;
 d8 = +HEAPF32[i9 >> 2] - d10;
 HEAPF32[i9 >> 2] = d8;
 i15 = i3 + 16 | 0;
 d16 = +HEAPF32[i15 >> 2] + d10;
 HEAPF32[i15 >> 2] = d16;
 i14 = i3 + 20 | 0;
 d13 = +HEAPF32[i14 >> 2] + d10;
 HEAPF32[i14 >> 2] = d13;
 i7 = i3 + 24 | 0;
 d10 = +HEAPF32[i7 >> 2] + d10;
 HEAPF32[i7 >> 2] = d10;
 d17 = +HEAPF32[i5 >> 2];
 if (d17 > 0.0) {
  HEAPF32[i15 >> 2] = d17 + d16;
 } else {
  HEAPF32[i3 >> 2] = d17 + d11;
 }
 d11 = +HEAPF32[i5 + 4 >> 2];
 if (d11 > 0.0) {
  HEAPF32[i14 >> 2] = d11 + d13;
 } else {
  HEAPF32[i6 >> 2] = d11 + d12;
 }
 d11 = +HEAPF32[i5 + 8 >> 2];
 if (d11 > 0.0) {
  HEAPF32[i7 >> 2] = d11 + d10;
 } else {
  HEAPF32[i9 >> 2] = d11 + d8;
 }
 i6 = __ZL10removeleafP6btDbvtP10btDbvtNode(i1, i2) | 0;
 L22 : do {
  if ((i6 | 0) != 0) {
   i5 = HEAP32[i1 + 8 >> 2] | 0;
   if (!((i5 | 0) > -1)) {
    i6 = HEAP32[i1 >> 2] | 0;
    break;
   }
   if ((i5 | 0) > 0) {
    i7 = 0;
    i9 = i6;
    while (1) {
     i6 = HEAP32[i9 + 32 >> 2] | 0;
     i7 = i7 + 1 | 0;
     if ((i6 | 0) == 0) {
      i6 = i9;
      break L22;
     }
     if ((i7 | 0) < (i5 | 0)) {
      i9 = i6;
     } else {
      break;
     }
    }
   }
  } else {
   i6 = 0;
  }
 } while (0);
 HEAP32[i2 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i1, i6, i2);
 i15 = 1;
 STACKTOP = i4;
 return i15 | 0;
}
function __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallback18processConstraintsEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 i4 = i3 + 56 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i2 = i3 + 76 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i6 + i5 | 0) > 0) {
  i9 = HEAP32[i3 + 8 >> 2] | 0;
  i10 = i3 + 36 | 0;
  +FUNCTION_TABLE_diiiiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 1](i9, HEAP32[i3 + 44 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i3 + 64 >> 2] | 0, i5, HEAP32[i3 + 84 >> 2] | 0, i6, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 20 >> 2] | 0, HEAP32[i3 + 24 >> 2] | 0, HEAP32[i3 + 28 >> 2] | 0);
  i5 = i10;
 } else {
  i5 = i3 + 36 | 0;
 }
 i7 = HEAP32[i5 >> 2] | 0;
 if ((i7 | 0) < 0) {
  i9 = i3 + 40 | 0;
  i6 = i3 + 44 | 0;
  if ((HEAP32[i9 >> 2] | 0) < 0) {
   i8 = HEAP32[i6 >> 2] | 0;
   i10 = i3 + 48 | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i10] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i8);
    }
    HEAP32[i6 >> 2] = 0;
   }
   HEAP8[i10] = 1;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
  }
  do {
   i8 = (HEAP32[i6 >> 2] | 0) + (i7 << 2) | 0;
   if ((i8 | 0) != 0) {
    HEAP32[i8 >> 2] = 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 0);
 }
 HEAP32[i5 >> 2] = 0;
 i6 = HEAP32[i4 >> 2] | 0;
 if ((i6 | 0) < 0) {
  i7 = i3 + 60 | 0;
  i5 = i3 + 64 | 0;
  if ((HEAP32[i7 >> 2] | 0) < 0) {
   i9 = HEAP32[i5 >> 2] | 0;
   i8 = i3 + 68 | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i8] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i9);
    }
    HEAP32[i5 >> 2] = 0;
   }
   HEAP8[i8] = 1;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
  }
  do {
   i7 = (HEAP32[i5 >> 2] | 0) + (i6 << 2) | 0;
   if ((i7 | 0) != 0) {
    HEAP32[i7 >> 2] = 0;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != 0);
 }
 HEAP32[i4 >> 2] = 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i5 | 0) >= 0) {
  HEAP32[i2 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i7 = i3 + 80 | 0;
 i4 = i3 + 84 | 0;
 if ((HEAP32[i7 >> 2] | 0) < 0) {
  i6 = HEAP32[i4 >> 2] | 0;
  i3 = i3 + 88 | 0;
  if ((i6 | 0) != 0) {
   if ((HEAP8[i3] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i6);
   }
   HEAP32[i4 >> 2] = 0;
  }
  HEAP8[i3] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
 }
 do {
  i3 = (HEAP32[i4 >> 2] | 0) + (i5 << 2) | 0;
  if ((i3 | 0) != 0) {
   HEAP32[i3 >> 2] = 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != 0);
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i3, i6, i5, i2, i9, i4) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 i7 = i2 + 59 | 0;
 if ((HEAPU8[i7] | 0 | 0) == (i6 | 0)) {
  i9 = 0;
  STACKTOP = i1;
  return i9 | 0;
 }
 i8 = HEAP32[459568 + (i9 << 2) >> 2] | 0;
 if (+HEAPF32[i2 >> 2] * +HEAPF32[i5 + 16 >> 2] + +HEAPF32[i2 + 4 >> 2] * +HEAPF32[i5 + 20 >> 2] + +HEAPF32[i2 + 8 >> 2] * +HEAPF32[i5 + 24 >> 2] - +HEAPF32[i2 + 16 >> 2] < -9999999747378752.0e-21) {
  i3 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i3, HEAP32[i2 + (i8 << 2) + 24 >> 2] | 0, HEAP32[i2 + (i9 << 2) + 24 >> 2] | 0, i5, 0) | 0;
  if ((i3 | 0) == 0) {
   i9 = 0;
   STACKTOP = i1;
   return i9 | 0;
  }
  HEAP8[i3 + 56 | 0] = i9;
  HEAP32[i3 + 36 >> 2] = i2;
  HEAP8[i2 + i9 + 56 | 0] = 0;
  HEAP32[i2 + (i9 << 2) + 36 >> 2] = i3;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) == 0) {
   HEAP32[i4 + 4 >> 2] = i3;
  } else {
   HEAP8[i2 + 57 | 0] = 2;
   HEAP32[i2 + 40 >> 2] = i3;
   HEAP8[i3 + 58 | 0] = 1;
   HEAP32[i3 + 44 >> 2] = i2;
  }
  HEAP32[i4 >> 2] = i3;
  i9 = i4 + 8 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  i9 = 1;
  STACKTOP = i1;
  return i9 | 0;
 }
 i9 = HEAP32[459584 + (i9 << 2) >> 2] | 0;
 HEAP8[i7] = i6;
 if (!(__ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i3, i6, i5, HEAP32[i2 + (i8 << 2) + 36 >> 2] | 0, HEAPU8[i2 + i8 + 56 | 0] | 0, i4) | 0)) {
  i9 = 0;
  STACKTOP = i1;
  return i9 | 0;
 }
 if (!(__ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i3, i6, i5, HEAP32[i2 + (i9 << 2) + 36 >> 2] | 0, HEAPU8[i2 + i9 + 56 | 0] | 0, i4) | 0)) {
  i9 = 0;
  STACKTOP = i1;
  return i9 | 0;
 }
 i4 = i2 + 52 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i5 = i2 + 48 | 0;
 if ((i6 | 0) != 0) {
  HEAP32[i6 + 48 >> 2] = HEAP32[i5 >> 2];
 }
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) != 0) {
  HEAP32[i6 + 52 >> 2] = HEAP32[i4 >> 2];
 }
 i6 = i3 + 9792 | 0;
 if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) {
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 }
 i9 = i3 + 9796 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 HEAP32[i5 >> 2] = 0;
 i5 = i3 + 9800 | 0;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 i4 = HEAP32[i5 >> 2] | 0;
 if ((i4 | 0) != 0) {
  HEAP32[i4 + 48 >> 2] = i2;
 }
 HEAP32[i5 >> 2] = i2;
 i9 = i3 + 9804 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 i9 = 1;
 STACKTOP = i1;
 return i9 | 0;
}
function __ZN11btRigidBody18saveKinematicStateEf(i1, d5) {
 i1 = i1 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 if (!(d5 != 0.0)) {
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i1 + 472 >> 2] | 0;
 if ((i6 | 0) == 0) {
  i6 = i1 + 4 | 0;
 } else {
  i7 = i1 + 4 | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6, i7);
  i6 = i7;
 }
 i7 = i1 + 68 | 0;
 i9 = i1 + 304 | 0;
 i8 = i1 + 320 | 0;
 d12 = 1.0 / d5;
 d10 = (+HEAPF32[i1 + 56 >> 2] - +HEAPF32[i1 + 120 >> 2]) * d12;
 d11 = d12 * (+HEAPF32[i1 + 60 >> 2] - +HEAPF32[i1 + 124 >> 2]);
 HEAPF32[i9 >> 2] = (+HEAPF32[i1 + 52 >> 2] - +HEAPF32[i1 + 116 >> 2]) * d12;
 HEAPF32[i1 + 308 >> 2] = d10;
 HEAPF32[i1 + 312 >> 2] = d11;
 HEAPF32[i1 + 316 >> 2] = 0.0;
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i7, i6, i3, i4);
 d11 = +HEAPF32[i4 >> 2];
 d10 = d12 * d11 * +HEAPF32[i3 + 4 >> 2];
 d5 = d12 * d11 * +HEAPF32[i3 + 8 >> 2];
 HEAPF32[i8 >> 2] = d12 * +HEAPF32[i3 >> 2] * d11;
 HEAPF32[i1 + 324 >> 2] = d10;
 HEAPF32[i1 + 328 >> 2] = d5;
 HEAPF32[i1 + 332 >> 2] = 0.0;
 i4 = i1 + 132 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i4 = i1 + 148 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 84 | 0;
 i6 = i1 + 20 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 100 | 0;
 i6 = i1 + 36 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i1 + 116 | 0;
 i6 = i1 + 52 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN19btTriangleMeshShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i3 + 32 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3;
 i9 = (HEAP32[i1 + 48 >> 2] | 0) + 4 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i9 = i7 + 4 | 0;
 i8 = i7 + 8 | 0;
 i2 = i1 + 12 | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAPF32[i7 >> 2] = 1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i5, i1, i7);
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i5 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i7 >> 2] = -1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i6, i1, i7);
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i5 >> 2] - +HEAPF32[i2 >> 2];
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAPF32[i9 >> 2] = 1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i5, i1, i7);
 i4 = i5 + 4 | 0;
 HEAPF32[i1 + 36 >> 2] = +HEAPF32[i4 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i9 >> 2] = -1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i6, i1, i7);
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAPF32[i1 + 20 >> 2] = +HEAPF32[i4 >> 2] - +HEAPF32[i2 >> 2];
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAPF32[i8 >> 2] = 1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i5, i1, i7);
 i4 = i5 + 8 | 0;
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i4 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i8 >> 2] = -1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i6, i1, i7);
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i4 >> 2] - +HEAPF32[i2 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld21updateActivationStateEf(i4, d1) {
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i3 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(444952);
 i2 = i4 + 204 | 0;
 if ((HEAP32[i2 >> 2] | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i3;
  return;
 }
 i6 = i4 + 212 | 0;
 i5 = 0;
 do {
  i4 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  L6 : do {
   if ((i4 | 0) != 0) {
    i7 = i4 + 216 | 0;
    i9 = HEAP32[i7 >> 2] | 0;
    do {
     if (!((i9 | 0) == 4 | (i9 | 0) == 2)) {
      d13 = +HEAPF32[i4 + 304 >> 2];
      d12 = +HEAPF32[i4 + 308 >> 2];
      d11 = +HEAPF32[i4 + 312 >> 2];
      d10 = +HEAPF32[i4 + 464 >> 2];
      if (d13 * d13 + d12 * d12 + d11 * d11 < d10 * d10 ? (d10 = +HEAPF32[i4 + 320 >> 2], d11 = +HEAPF32[i4 + 324 >> 2], d12 = +HEAPF32[i4 + 328 >> 2], d13 = +HEAPF32[i4 + 468 >> 2], d10 * d10 + d11 * d11 + d12 * d12 < d13 * d13) : 0) {
       i8 = i4 + 220 | 0;
       HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] + d1;
       break;
      }
      HEAPF32[i4 + 220 >> 2] = 0.0;
      __ZN17btCollisionObject18setActivationStateEi(i4, 0);
      i9 = HEAP32[i7 >> 2] | 0;
     }
    } while (0);
    i8 = (i9 | 0) == 4;
    if (!i8) {
     d10 = +HEAPF32[111456];
     do {
      if (!((HEAP8[445832] | 0) != 0 | d10 == 0.0)) {
       if (!((i9 + -2 | 0) >>> 0 < 2) ? !(+HEAPF32[i4 + 220 >> 2] > d10) : 0) {
        if (i8) {
         break L6;
        } else {
         break;
        }
       }
       if ((HEAP32[i4 + 204 >> 2] & 3 | 0) != 0) {
        __ZN17btCollisionObject18setActivationStateEi(i4, 2);
        break L6;
       }
       if ((i9 | 0) == 1) {
        __ZN17btCollisionObject18setActivationStateEi(i4, 3);
        i9 = HEAP32[i7 >> 2] | 0;
       }
       if ((i9 | 0) != 2) {
        break L6;
       }
       i9 = i4 + 304 | 0;
       HEAP32[i9 + 0 >> 2] = 0;
       HEAP32[i9 + 4 >> 2] = 0;
       HEAP32[i9 + 8 >> 2] = 0;
       HEAP32[i9 + 12 >> 2] = 0;
       HEAP32[i9 + 16 >> 2] = 0;
       HEAP32[i9 + 20 >> 2] = 0;
       HEAP32[i9 + 24 >> 2] = 0;
       HEAP32[i9 + 28 >> 2] = 0;
       break L6;
      }
     } while (0);
     __ZN17btCollisionObject18setActivationStateEi(i4, 1);
    }
   }
  } while (0);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (HEAP32[i2 >> 2] | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i3;
 return;
}
function __ZNK17btHingeConstraint9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i2 + 544 >> 2];
 HEAPF32[i1 + 48 >> 2] = +HEAPF32[i2 + 548 >> 2];
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i2 + 552 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 556 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 560 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 564 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 568 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 + 572 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 576 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 580 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i2 + 584 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i2 + 588 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i2 + 592 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i2 + 596 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i2 + 600 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i2 + 604 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i2 + 608 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i2 + 612 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i2 + 616 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i2 + 620 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i2 + 624 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i2 + 628 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i2 + 632 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i2 + 636 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i2 + 640 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i2 + 644 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i2 + 648 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i2 + 652 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i2 + 656 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i2 + 660 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i2 + 664 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i2 + 668 >> 2];
 HEAP32[i1 + 176 >> 2] = HEAPU8[i2 + 728 | 0] | 0;
 HEAP32[i1 + 180 >> 2] = HEAPU8[i2 + 729 | 0] | 0;
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i2 + 676 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i2 + 672 >> 2];
 HEAP32[i1 + 172 >> 2] = HEAPU8[i2 + 732 | 0] | 0;
 i3 = i2 + 680 | 0;
 HEAPF32[i1 + 192 >> 2] = +__ZNK14btAngularLimit6getLowEv(i3);
 HEAPF32[i1 + 196 >> 2] = +__ZNK14btAngularLimit7getHighEv(i3);
 HEAPF32[i1 + 200 >> 2] = +HEAPF32[i2 + 688 >> 2];
 HEAPF32[i1 + 204 >> 2] = +HEAPF32[i2 + 692 >> 2];
 HEAPF32[i1 + 208 >> 2] = +HEAPF32[i2 + 696 >> 2];
 STACKTOP = i4;
 return 445792;
}
function __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i12, i2, i8, i5, i3) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 i13 = HEAP32[i12 + (i2 << 2) + 68 >> 2] | 0;
 i14 = i8 & 65535;
 i17 = i13 + (i14 << 2) | 0;
 i15 = i13 + (i14 + -1 << 2) | 0;
 i9 = i12 + 60 | 0;
 i16 = HEAP16[i15 >> 1] | 0;
 if (!((HEAPU16[i17 >> 1] | 0) < (i16 & 65535))) {
  STACKTOP = i1;
  return;
 }
 i18 = HEAP32[i9 >> 2] | 0;
 i11 = 1 << i2 & 3;
 i8 = 1 << i11 & 3;
 i10 = i12 + 92 | 0;
 i12 = i12 + 96 | 0;
 i13 = i18 + ((HEAPU16[i13 + (i14 << 2) + 2 >> 1] | 0) << 6) + (i2 << 1) + 54 | 0;
 i14 = i18;
 while (1) {
  i18 = HEAPU16[i15 + 2 >> 1] | 0;
  if ((i16 & 1) == 0) {
   i16 = HEAPU16[i17 + 2 >> 1] | 0;
   if (((((i3 ? (HEAPU16[i14 + (i16 << 6) + (i11 << 1) + 54 >> 1] | 0) >= (HEAPU16[i14 + (i18 << 6) + (i11 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i14 + (i18 << 6) + (i11 << 1) + 54 >> 1] | 0) >= (HEAPU16[i14 + (i16 << 6) + (i11 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i14 + (i16 << 6) + (i8 << 1) + 54 >> 1] | 0) >= (HEAPU16[i14 + (i18 << 6) + (i8 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i14 + (i18 << 6) + (i8 << 1) + 54 >> 1] | 0) >= (HEAPU16[i14 + (i16 << 6) + (i8 << 1) + 48 >> 1] | 0) : 0) ? (i6 = HEAP32[i10 >> 2] | 0, i7 = i14 + (i16 << 6) | 0, i4 = i14 + (i18 << 6) | 0, FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i7, i4, i5) | 0, i6 = HEAP32[i12 >> 2] | 0, (i6 | 0) != 0) : 0) {
    FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i7, i4, i5) | 0;
   }
   i18 = i14 + (i18 << 6) + (i2 << 1) + 48 | 0;
   HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + 1 << 16 >> 16;
  } else {
   i18 = i14 + (i18 << 6) + (i2 << 1) + 54 | 0;
   HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + -1 << 16 >> 16;
  i16 = HEAPU16[i17 >> 1] | HEAPU16[i17 + 2 >> 1] << 16;
  i18 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
  HEAP16[i17 >> 1] = i18;
  HEAP16[i17 + 2 >> 1] = i18 >>> 16;
  HEAP16[i15 >> 1] = i16;
  HEAP16[i15 + 2 >> 1] = i16 >>> 16;
  i17 = i17 + -4 | 0;
  i15 = i15 + -4 | 0;
  i16 = HEAP16[i15 >> 1] | 0;
  if (!((HEAPU16[i17 >> 1] | 0) < (i16 & 65535))) {
   break;
  }
  i14 = HEAP32[i9 >> 2] | 0;
 }
 STACKTOP = i1;
 return;
}
function __ZN17btConvexHullShapeC2EPKfii(i1, i6, i3, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5;
 __ZN34btPolyhedralConvexAabbCachingShapeC2Ev(i1);
 HEAP32[i1 >> 2] = 451264;
 i10 = i1 + 108 | 0;
 HEAP8[i10] = 1;
 i2 = i1 + 104 | 0;
 HEAP32[i2 >> 2] = 0;
 i7 = i1 + 96 | 0;
 HEAP32[i7 >> 2] = 0;
 i11 = i1 + 100 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 4;
 i8 = (i3 | 0) > 0;
 if (!i8) {
  HEAP32[i7 >> 2] = i3;
  __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
  STACKTOP = i5;
  return;
 }
 i12 = __Z22btAlignedAllocInternalji(i3 << 4, 16) | 0;
 i13 = HEAP32[i7 >> 2] | 0;
 if ((i13 | 0) > 0) {
  i15 = 0;
  do {
   i14 = i12 + (i15 << 4) | 0;
   if ((i14 | 0) != 0) {
    i16 = (HEAP32[i2 >> 2] | 0) + (i15 << 4) | 0;
    HEAP32[i14 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
    HEAP32[i14 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
    HEAP32[i14 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
    HEAP32[i14 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
   }
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) != (i13 | 0));
 }
 i13 = HEAP32[i2 >> 2] | 0;
 if ((i13 | 0) != 0) {
  if ((HEAP8[i10] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i13);
  }
  HEAP32[i2 >> 2] = 0;
 }
 HEAP8[i10] = 1;
 HEAP32[i2 >> 2] = i12;
 HEAP32[i11 >> 2] = i3;
 i10 = 0;
 while (1) {
  i11 = i12 + (i10 << 4) | 0;
  if ((i11 | 0) != 0) {
   HEAP32[i11 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
  }
  i10 = i10 + 1 | 0;
  if ((i10 | 0) == (i3 | 0)) {
   break;
  }
  i12 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i7 >> 2] = i3;
 if (!i8) {
  __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
  STACKTOP = i5;
  return;
 }
 i7 = 0;
 while (1) {
  i16 = HEAP32[i2 >> 2] | 0;
  d18 = +HEAPF32[i6 + 4 >> 2];
  d17 = +HEAPF32[i6 + 8 >> 2];
  HEAPF32[i16 + (i7 << 4) >> 2] = +HEAPF32[i6 >> 2];
  HEAPF32[i16 + (i7 << 4) + 4 >> 2] = d18;
  HEAPF32[i16 + (i7 << 4) + 8 >> 2] = d17;
  HEAPF32[i16 + (i7 << 4) + 12 >> 2] = 0.0;
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == (i3 | 0)) {
   break;
  }
  i6 = i6 + i4 | 0;
 }
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i5;
 return;
}
function __ZL10removeleafP6btDbvtP10btDbvtNode(i3, i13) {
 i3 = i3 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 i1 = STACKTOP;
 if ((HEAP32[i3 >> 2] | 0) == (i13 | 0)) {
  HEAP32[i3 >> 2] = 0;
  i21 = 0;
  STACKTOP = i1;
  return i21 | 0;
 }
 i10 = HEAP32[i13 + 32 >> 2] | 0;
 i7 = HEAP32[i10 + 32 >> 2] | 0;
 i13 = HEAP32[i10 + (((HEAP32[i10 + 40 >> 2] | 0) != (i13 | 0)) << 2) + 36 >> 2] | 0;
 if ((i7 | 0) == 0) {
  HEAP32[i3 >> 2] = i13;
  HEAP32[i13 + 32 >> 2] = 0;
  i21 = i3 + 4 | 0;
  __Z21btAlignedFreeInternalPv(HEAP32[i21 >> 2] | 0);
  HEAP32[i21 >> 2] = i10;
  i21 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i1;
  return i21 | 0;
 }
 HEAP32[i7 + (((HEAP32[i7 + 40 >> 2] | 0) == (i10 | 0)) << 2) + 36 >> 2] = i13;
 HEAP32[i13 + 32 >> 2] = i7;
 i21 = i3 + 4 | 0;
 __Z21btAlignedFreeInternalPv(HEAP32[i21 >> 2] | 0);
 HEAP32[i21 >> 2] = i10;
 do {
  d5 = +HEAPF32[i7 >> 2];
  i19 = i7 + 4 | 0;
  d4 = +HEAPF32[i19 >> 2];
  i14 = i7 + 8 | 0;
  d11 = +HEAPF32[i14 >> 2];
  i21 = i7 + 16 | 0;
  d6 = +HEAPF32[i21 >> 2];
  i17 = i7 + 20 | 0;
  d8 = +HEAPF32[i17 >> 2];
  i10 = i7 + 24 | 0;
  d9 = +HEAPF32[i10 >> 2];
  i15 = HEAP32[i7 + 36 >> 2] | 0;
  i13 = HEAP32[i7 + 40 >> 2] | 0;
  d16 = +HEAPF32[i15 >> 2];
  d12 = +HEAPF32[i13 >> 2];
  d12 = d16 < d12 ? d16 : d12;
  HEAPF32[i7 >> 2] = d12;
  d16 = +HEAPF32[i15 + 16 >> 2];
  d18 = +HEAPF32[i13 + 16 >> 2];
  d16 = d16 > d18 ? d16 : d18;
  HEAPF32[i21 >> 2] = d16;
  d18 = +HEAPF32[i15 + 4 >> 2];
  d20 = +HEAPF32[i13 + 4 >> 2];
  d18 = d18 < d20 ? d18 : d20;
  HEAPF32[i19 >> 2] = d18;
  d20 = +HEAPF32[i15 + 20 >> 2];
  d22 = +HEAPF32[i13 + 20 >> 2];
  d20 = d20 > d22 ? d20 : d22;
  HEAPF32[i17 >> 2] = d20;
  d23 = +HEAPF32[i15 + 8 >> 2];
  d22 = +HEAPF32[i13 + 8 >> 2];
  d22 = d23 < d22 ? d23 : d22;
  HEAPF32[i14 >> 2] = d22;
  d23 = +HEAPF32[i15 + 24 >> 2];
  d24 = +HEAPF32[i13 + 24 >> 2];
  d23 = d23 > d24 ? d23 : d24;
  HEAPF32[i10 >> 2] = d23;
  if (!(d5 != d12 | d4 != d18 | d11 != d22 | d6 != d16) ? !(d8 != d20 | d9 != d23) : 0) {
   i2 = 10;
   break;
  }
  i7 = HEAP32[i7 + 32 >> 2] | 0;
 } while ((i7 | 0) != 0);
 if ((i2 | 0) == 10) {
  STACKTOP = i1;
  return i7 | 0;
 }
 i21 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i1;
 return i21 | 0;
}
function __ZN30btGjkEpaPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAlloc(i8, i9, i7, i4, i1, i3, i2, i6, i5, i10, i11) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var d12 = 0.0, d13 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8 + 56 | 0;
 i10 = i8;
 d13 = +HEAPF32[i1 + 52 >> 2] - +HEAPF32[i3 + 52 >> 2];
 d12 = +HEAPF32[i1 + 56 >> 2] - +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i9 >> 2] = +HEAPF32[i1 + 48 >> 2] - +HEAPF32[i3 + 48 >> 2];
 HEAPF32[i9 + 4 >> 2] = d13;
 HEAPF32[i9 + 8 >> 2] = d12;
 HEAPF32[i9 + 12 >> 2] = 0.0;
 if (__ZN15btGjkEpaSolver211PenetrationEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsEb(i7, i1, i4, i3, i9, i10, 1) | 0) {
  i11 = i10 + 4 | 0;
  HEAP32[i6 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i11 = i10 + 20 | 0;
  HEAP32[i5 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i11 = i10 + 36 | 0;
  HEAP32[i2 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i11 = 1;
  STACKTOP = i8;
  return i11 | 0;
 }
 if (!(__ZN15btGjkEpaSolver28DistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE(i7, i1, i4, i3, i9, i10) | 0)) {
  i11 = 0;
  STACKTOP = i8;
  return i11 | 0;
 }
 i11 = i10 + 4 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i11 = i10 + 20 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i11 = i10 + 36 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i11 = 0;
 STACKTOP = i8;
 return i11 | 0;
}
function __ZN11btRigidBody12applyDampingEf(i16, d10) {
 i16 = i16 | 0;
 d10 = +d10;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d17 = 0.0;
 i1 = STACKTOP;
 d6 = +HEAPF32[i16 + 436 >> 2];
 d15 = +Math_pow(+(1.0 - d6), +d10);
 i9 = i16 + 304 | 0;
 d11 = d15 * +HEAPF32[i9 >> 2];
 HEAPF32[i9 >> 2] = d11;
 i4 = i16 + 308 | 0;
 d13 = d15 * +HEAPF32[i4 >> 2];
 HEAPF32[i4 >> 2] = d13;
 i5 = i16 + 312 | 0;
 d15 = d15 * +HEAPF32[i5 >> 2];
 HEAPF32[i5 >> 2] = d15;
 d2 = +HEAPF32[i16 + 440 >> 2];
 d10 = +Math_pow(+(1.0 - d2), +d10);
 i8 = i16 + 320 | 0;
 d14 = d10 * +HEAPF32[i8 >> 2];
 HEAPF32[i8 >> 2] = d14;
 i3 = i16 + 324 | 0;
 d12 = d10 * +HEAPF32[i3 >> 2];
 HEAPF32[i3 >> 2] = d12;
 i7 = i16 + 328 | 0;
 d10 = d10 * +HEAPF32[i7 >> 2];
 HEAPF32[i7 >> 2] = d10;
 if ((HEAP8[i16 + 444 | 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if (d10 * d10 + (d14 * d14 + d12 * d12) < +HEAPF32[i16 + 456 >> 2] ? d11 * d11 + d13 * d13 + d15 * d15 < +HEAPF32[i16 + 452 >> 2] : 0) {
  d17 = +HEAPF32[i16 + 448 >> 2];
  d14 = d14 * d17;
  HEAPF32[i8 >> 2] = d14;
  d12 = d17 * d12;
  HEAPF32[i3 >> 2] = d12;
  d10 = d17 * d10;
  HEAPF32[i7 >> 2] = d10;
  d11 = d17 * d11;
  HEAPF32[i9 >> 2] = d11;
  d13 = d17 * d13;
  HEAPF32[i4 >> 2] = d13;
  d15 = d17 * d15;
  HEAPF32[i5 >> 2] = d15;
 }
 d17 = +Math_sqrt(+(d11 * d11 + d13 * d13 + d15 * d15));
 do {
  if (d17 < d6) {
   if (d17 > .004999999888241291) {
    d17 = 1.0 / d17;
    HEAPF32[i9 >> 2] = d11 - d11 * d17 * .004999999888241291;
    HEAPF32[i4 >> 2] = d13 - d13 * d17 * .004999999888241291;
    HEAPF32[i5 >> 2] = d15 - d15 * d17 * .004999999888241291;
    break;
   } else {
    HEAP32[i9 + 0 >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP32[i9 + 8 >> 2] = 0;
    HEAP32[i9 + 12 >> 2] = 0;
    break;
   }
  }
 } while (0);
 d6 = +Math_sqrt(+(d14 * d14 + d12 * d12 + d10 * d10));
 if (!(d6 < d2)) {
  STACKTOP = i1;
  return;
 }
 if (d6 > .004999999888241291) {
  d17 = 1.0 / d6;
  HEAPF32[i8 >> 2] = d14 - d14 * d17 * .004999999888241291;
  HEAPF32[i3 >> 2] = d12 - d12 * d17 * .004999999888241291;
  HEAPF32[i7 >> 2] = d10 - d10 * d17 * .004999999888241291;
  STACKTOP = i1;
  return;
 } else {
  HEAP32[i8 + 0 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
}
function __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i4, i12, i11, d1, i5) {
 i4 = i4 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 d6 = +HEAPF32[i12 + 4 >> 2] * d1 + +HEAPF32[i4 + 52 >> 2];
 d7 = +HEAPF32[i12 + 8 >> 2] * d1 + +HEAPF32[i4 + 56 >> 2];
 HEAPF32[i5 + 48 >> 2] = +HEAPF32[i12 >> 2] * d1 + +HEAPF32[i4 + 48 >> 2];
 HEAPF32[i5 + 52 >> 2] = d6;
 HEAPF32[i5 + 56 >> 2] = d7;
 HEAPF32[i5 + 60 >> 2] = 0.0;
 d7 = +HEAPF32[i11 >> 2];
 d6 = +HEAPF32[i11 + 4 >> 2];
 d8 = +HEAPF32[i11 + 8 >> 2];
 d10 = +Math_sqrt(+(d7 * d7 + d6 * d6 + d8 * d8));
 if (d10 * d1 > .7853981852531433) {
  d10 = .7853981852531433 / d1;
 }
 if (d10 < .0010000000474974513) {
  d9 = d1 * .5 - d10 * d1 * d1 * d1 * .02083333395421505 * d10;
 } else {
  d9 = +Math_sin(+(d10 * .5 * d1)) / d10;
 }
 d14 = d9 * d7;
 d7 = d9 * d6;
 d13 = d9 * d8;
 d17 = +Math_cos(+(d10 * d1 * .5));
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i4, i2);
 d10 = +HEAPF32[i2 >> 2];
 d6 = +HEAPF32[i2 + 12 >> 2];
 d15 = +HEAPF32[i2 + 8 >> 2];
 d9 = +HEAPF32[i2 + 4 >> 2];
 d1 = d17 * d10 + d14 * d6 + d7 * d15 - d13 * d9;
 d8 = d13 * d10 + (d7 * d6 + d17 * d9) - d14 * d15;
 d16 = d13 * d6 + d17 * d15 + d14 * d9 - d7 * d10;
 d15 = d17 * d6 - d14 * d10 - d7 * d9 - d13 * d15;
 d13 = 1.0 / +Math_sqrt(+(d15 * d15 + (d16 * d16 + (d1 * d1 + d8 * d8))));
 d1 = d1 * d13;
 d8 = d13 * d8;
 d16 = d13 * d16;
 d15 = d13 * d15;
 d13 = 2.0 / (d15 * d15 + (d16 * d16 + (d1 * d1 + d8 * d8)));
 d9 = d1 * d13;
 d10 = d13 * d8;
 d13 = d13 * d16;
 d7 = d15 * d9;
 d6 = d15 * d10;
 d15 = d15 * d13;
 d9 = d1 * d9;
 d14 = d1 * d10;
 d1 = d1 * d13;
 d10 = d8 * d10;
 d8 = d8 * d13;
 d13 = d16 * d13;
 HEAPF32[i5 >> 2] = 1.0 - (d13 + d10);
 HEAPF32[i5 + 4 >> 2] = d14 - d15;
 HEAPF32[i5 + 8 >> 2] = d1 + d6;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 HEAPF32[i5 + 16 >> 2] = d15 + d14;
 HEAPF32[i5 + 20 >> 2] = 1.0 - (d9 + d13);
 HEAPF32[i5 + 24 >> 2] = d8 - d7;
 HEAPF32[i5 + 28 >> 2] = 0.0;
 HEAPF32[i5 + 32 >> 2] = d1 - d6;
 HEAPF32[i5 + 36 >> 2] = d7 + d8;
 HEAPF32[i5 + 40 >> 2] = 1.0 - (d9 + d10);
 HEAPF32[i5 + 44 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii(i2, i15, i16) {
 i2 = i2 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i3 + 28 | 0;
 i9 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i1 = i3 + 12 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3;
 i11 = i2 + 4 | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 3](i10, i7, i3 + 24 | 0, i9, i8, i1, i12, i3 + 4 | 0, i13, i15);
 i1 = HEAP32[i1 >> 2] | 0;
 i12 = Math_imul(HEAP32[i12 >> 2] | 0, i16) | 0;
 i10 = i1 + i12 | 0;
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = i5 + 4 | 0;
 i4 = i5 + 8 | 0;
 i5 = i5 + 12 | 0;
 i13 = HEAP32[i13 >> 2] | 0;
 i14 = 2;
 while (1) {
  if ((i13 | 0) == 2) {
   i18 = HEAP32[i10 + (i14 << 2) >> 2] | 0;
  } else if ((i13 | 0) == 3) {
   i18 = HEAPU16[i10 + (i14 << 1) >> 1] | 0;
  } else {
   i18 = HEAPU8[i1 + (i14 + i12) | 0] | 0;
  }
  i17 = HEAP32[i7 >> 2] | 0;
  i19 = Math_imul(HEAP32[i8 >> 2] | 0, i18) | 0;
  i18 = i17 + i19 | 0;
  if ((HEAP32[i9 >> 2] | 0) == 0) {
   d21 = +HEAPF32[i17 + (i19 + 4) >> 2] * +HEAPF32[i4 >> 2];
   d20 = +HEAPF32[i17 + (i19 + 8) >> 2] * +HEAPF32[i5 >> 2];
   HEAPF32[i2 + (i14 << 4) + 12 >> 2] = +HEAPF32[i18 >> 2] * +HEAPF32[i6 >> 2];
   HEAPF32[i2 + (i14 << 4) + 16 >> 2] = d21;
   HEAPF32[i2 + (i14 << 4) + 20 >> 2] = d20;
   HEAPF32[i2 + (i14 << 4) + 24 >> 2] = 0.0;
  } else {
   d20 = +HEAPF64[i17 + (i19 + 8) >> 3] * +HEAPF32[i4 >> 2];
   d21 = +HEAPF64[i17 + (i19 + 16) >> 3] * +HEAPF32[i5 >> 2];
   HEAPF32[i2 + (i14 << 4) + 12 >> 2] = +HEAPF64[i18 >> 3] * +HEAPF32[i6 >> 2];
   HEAPF32[i2 + (i14 << 4) + 16 >> 2] = d20;
   HEAPF32[i2 + (i14 << 4) + 20 >> 2] = d21;
   HEAPF32[i2 + (i14 << 4) + 24 >> 2] = 0.0;
  }
  if ((i14 | 0) > 0) {
   i14 = i14 + -1 | 0;
  } else {
   break;
  }
 }
 i19 = HEAP32[i2 + 8 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] & 63](i19, i2 + 12 | 0, i15, i16);
 i19 = HEAP32[i11 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] & 127](i19, i15);
 STACKTOP = i3;
 return;
}
function __ZNK19btTriangleMeshShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i5 = STACKTOP;
 i35 = i4 + 32 | 0;
 i34 = i4 + 16 | 0;
 i33 = i4 + 36 | 0;
 i32 = i4 + 20 | 0;
 i31 = i4 + 40 | 0;
 i30 = i4 + 24 | 0;
 d23 = (+HEAPF32[i35 >> 2] - +HEAPF32[i34 >> 2]) * .5;
 d25 = (+HEAPF32[i33 >> 2] - +HEAPF32[i32 >> 2]) * .5;
 d12 = (+HEAPF32[i31 >> 2] - +HEAPF32[i30 >> 2]) * .5;
 d16 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d14 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d16 = d23 + d16;
 d14 = d25 + d14;
 d12 = d12 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d25 = (+HEAPF32[i35 >> 2] + +HEAPF32[i34 >> 2]) * .5;
 d23 = (+HEAPF32[i33 >> 2] + +HEAPF32[i32 >> 2]) * .5;
 d21 = (+HEAPF32[i31 >> 2] + +HEAPF32[i30 >> 2]) * .5;
 d29 = +HEAPF32[i3 >> 2];
 d20 = +Math_abs(+d29);
 d28 = +HEAPF32[i3 + 4 >> 2];
 d19 = +Math_abs(+d28);
 d10 = +HEAPF32[i3 + 8 >> 2];
 d11 = +Math_abs(+d10);
 d27 = +HEAPF32[i3 + 16 >> 2];
 d18 = +Math_abs(+d27);
 d26 = +HEAPF32[i3 + 20 >> 2];
 d17 = +Math_abs(+d26);
 d8 = +HEAPF32[i3 + 24 >> 2];
 d9 = +Math_abs(+d8);
 d24 = +HEAPF32[i3 + 32 >> 2];
 d15 = +Math_abs(+d24);
 d22 = +HEAPF32[i3 + 36 >> 2];
 d13 = +Math_abs(+d22);
 d6 = +HEAPF32[i3 + 40 >> 2];
 d7 = +Math_abs(+d6);
 d10 = +HEAPF32[i3 + 48 >> 2] + (d25 * d29 + d23 * d28 + d21 * d10);
 d8 = +HEAPF32[i3 + 52 >> 2] + (d25 * d27 + d23 * d26 + d21 * d8);
 d6 = +HEAPF32[i3 + 56 >> 2] + (d25 * d24 + d23 * d22 + d21 * d6);
 d11 = d16 * d20 + d14 * d19 + d12 * d11;
 d9 = d16 * d18 + d14 * d17 + d12 * d9;
 d7 = d16 * d15 + d14 * d13 + d12 * d7;
 HEAPF32[i2 >> 2] = d10 - d11;
 HEAPF32[i2 + 4 >> 2] = d8 - d9;
 HEAPF32[i2 + 8 >> 2] = d6 - d7;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d11 + d10;
 HEAPF32[i1 + 4 >> 2] = d9 + d8;
 HEAPF32[i1 + 8 >> 2] = d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorldC2EP12btDispatcherP21btBroadphaseInterfaceP18btConstraintSolverP24btCollisionConfiguration(i1, i6, i5, i3, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN16btCollisionWorldC2EP12btDispatcherP21btBroadphaseInterfaceP24btCollisionConfiguration(i1, i6, i5, i4);
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAPF32[i1 + 100 >> 2] = .6000000238418579;
 HEAPF32[i1 + 104 >> 2] = 1.0;
 HEAPF32[i1 + 108 >> 2] = .30000001192092896;
 HEAPF32[i1 + 116 >> 2] = 0.0;
 HEAPF32[i1 + 124 >> 2] = 20.0;
 HEAP32[i1 + 120 >> 2] = 10;
 HEAPF32[i1 + 132 >> 2] = .20000000298023224;
 HEAPF32[i1 + 136 >> 2] = .10000000149011612;
 HEAPF32[i1 + 140 >> 2] = 0.0;
 HEAPF32[i1 + 128 >> 2] = 1.0;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAPF32[i1 + 148 >> 2] = -.019999999552965164;
 HEAPF32[i1 + 152 >> 2] = 0.0;
 HEAPF32[i1 + 156 >> 2] = .8500000238418579;
 HEAP32[i1 + 160 >> 2] = 260;
 HEAP32[i1 + 164 >> 2] = 2;
 HEAP32[i1 + 168 >> 2] = 128;
 HEAP32[i1 >> 2] = 444672;
 i4 = i1 + 172 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP8[i1 + 196 | 0] = 1;
 HEAP32[i1 + 192 >> 2] = 0;
 HEAP32[i1 + 184 >> 2] = 0;
 HEAP32[i1 + 188 >> 2] = 0;
 HEAP8[i1 + 216 | 0] = 1;
 HEAP32[i1 + 212 >> 2] = 0;
 HEAP32[i1 + 204 >> 2] = 0;
 HEAP32[i1 + 208 >> 2] = 0;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 HEAPF32[i1 + 224 >> 2] = -10.0;
 HEAPF32[i1 + 228 >> 2] = 0.0;
 HEAPF32[i1 + 232 >> 2] = 0.0;
 HEAPF32[i1 + 236 >> 2] = 0.0;
 HEAP8[i1 + 242 | 0] = 0;
 HEAP8[i1 + 260 | 0] = 1;
 HEAP32[i1 + 256 >> 2] = 0;
 HEAP32[i1 + 248 >> 2] = 0;
 HEAP32[i1 + 252 >> 2] = 0;
 HEAP32[i1 + 264 >> 2] = 0;
 if ((i3 | 0) == 0) {
  i3 = __Z22btAlignedAllocInternalji(128, 16) | 0;
  if ((i3 | 0) == 0) {
   i3 = 0;
  } else {
   __ZN35btSequentialImpulseConstraintSolverC2Ev(i3);
  }
  HEAP32[i4 >> 2] = i3;
  HEAP8[i1 + 241 | 0] = 1;
 } else {
  HEAP8[i1 + 241 | 0] = 0;
 }
 i3 = __Z22btAlignedAllocInternalji(68, 16) | 0;
 if ((i3 | 0) == 0) {
  i5 = 0;
  i6 = i1 + 176 | 0;
  HEAP32[i6 >> 2] = i5;
  i6 = i1 + 240 | 0;
  HEAP8[i6] = 1;
  STACKTOP = i2;
  return;
 }
 __ZN25btSimulationIslandManagerC2Ev(i3);
 i5 = i3;
 i6 = i1 + 176 | 0;
 HEAP32[i6 >> 2] = i5;
 i6 = i1 + 240 | 0;
 HEAP8[i6] = 1;
 STACKTOP = i2;
 return;
}
function __ZN16btDbvtBroadphase11createProxyERK9btVector3S2_iPvssP12btDispatcherS3_(i1, i10, i2, i3, i5, i7, i8, i4, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i9 = 0, i11 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i9 + 16 | 0;
 i4 = i9;
 i3 = __Z22btAlignedAllocInternalji(64, 16) | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP16[i3 + 4 >> 1] = i7;
 HEAP16[i3 + 6 >> 1] = i8;
 i8 = i3 + 16 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i8 = i3 + 32 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 8 >> 2] = 0;
 i8 = i3 + 56 | 0;
 HEAP32[i8 >> 2] = 0;
 i11 = i3 + 52 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i5 = i6 + 16 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i5 = i1 + 104 | 0;
 HEAP32[i3 + 60 >> 2] = HEAP32[i5 >> 2];
 i2 = i1 + 148 | 0;
 i7 = (HEAP32[i2 >> 2] | 0) + 1 | 0;
 HEAP32[i2 >> 2] = i7;
 HEAP32[i3 + 12 >> 2] = i7;
 i7 = i1 + 4 | 0;
 HEAP32[i3 + 48 >> 2] = __ZN6btDbvt6insertERK12btDbvtAabbMmPv(i7, i6, i3) | 0;
 i5 = i1 + (HEAP32[i5 >> 2] << 2) + 84 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) != 0) {
  HEAP32[i2 + 52 >> 2] = i3;
 }
 HEAP32[i5 >> 2] = i3;
 if ((HEAP8[i1 + 153 | 0] | 0) != 0) {
  STACKTOP = i9;
  return i3 | 0;
 }
 HEAP32[i4 >> 2] = 452016;
 HEAP32[i4 + 4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i3;
 __ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(0, HEAP32[i7 >> 2] | 0, i6, i4);
 __ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(0, HEAP32[i1 + 44 >> 2] | 0, i6, i4);
 STACKTOP = i9;
 return i3 | 0;
}
function __ZNK21btConeTwistConstraint9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i2 + 292 >> 2];
 HEAPF32[i1 + 48 >> 2] = +HEAPF32[i2 + 296 >> 2];
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i2 + 300 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 304 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 308 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 312 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 316 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 + 320 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 324 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 328 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i2 + 332 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i2 + 336 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i2 + 340 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i2 + 344 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i2 + 348 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i2 + 352 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i2 + 356 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i2 + 360 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i2 + 364 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i2 + 368 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i2 + 372 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i2 + 376 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i2 + 380 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i2 + 384 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i2 + 388 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i2 + 392 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i2 + 396 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i2 + 400 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i2 + 404 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i2 + 408 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i2 + 412 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i2 + 416 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i2 + 436 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i2 + 440 >> 2];
 HEAPF32[i1 + 180 >> 2] = +HEAPF32[i2 + 444 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i2 + 420 >> 2];
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i2 + 424 >> 2];
 HEAPF32[i1 + 192 >> 2] = +HEAPF32[i2 + 428 >> 2];
 HEAPF32[i1 + 196 >> 2] = +HEAPF32[i2 + 432 >> 2];
 STACKTOP = i4;
 return 444632;
}
function __ZN28btHashedOverlappingPairCache15internalAddPairEP17btBroadphaseProxyS1_(i1, i4, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = STACKTOP;
 i5 = (HEAP32[i4 + 12 >> 2] | 0) > (HEAP32[i6 + 12 >> 2] | 0);
 i3 = i5 ? i6 : i4;
 i5 = i5 ? i4 : i6;
 i6 = i3 + 12 | 0;
 i15 = HEAP32[i6 >> 2] | 0;
 i7 = i5 + 12 | 0;
 i14 = HEAP32[i7 >> 2] | 0;
 i8 = i14 << 16 | i15;
 i8 = i8 + ~(i8 << 15) | 0;
 i8 = (i8 >> 10 ^ i8) * 9 | 0;
 i8 = i8 >> 6 ^ i8;
 i8 = i8 + ~(i8 << 11) | 0;
 i8 = i8 >> 16 ^ i8;
 i12 = i1 + 4 | 0;
 i11 = i1 + 12 | 0;
 i9 = HEAP32[i11 >> 2] | 0;
 i10 = i8 & i9 + -1;
 i4 = i1 + 44 | 0;
 i17 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i10 << 2) >> 2] | 0;
 L1 : do {
  if (!((i17 | 0) == -1)) {
   i16 = HEAP32[i1 + 16 >> 2] | 0;
   i13 = i1 + 64 | 0;
   while (1) {
    if ((HEAP32[(HEAP32[i16 + (i17 << 4) >> 2] | 0) + 12 >> 2] | 0) == (i15 | 0) ? (HEAP32[(HEAP32[i16 + (i17 << 4) + 4 >> 2] | 0) + 12 >> 2] | 0) == (i14 | 0) : 0) {
     break;
    }
    i17 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i17 << 2) >> 2] | 0;
    if ((i17 | 0) == -1) {
     break L1;
    }
   }
   i13 = i16 + (i17 << 4) | 0;
   if ((i13 | 0) != 0) {
    i17 = i13;
    STACKTOP = i2;
    return i17 | 0;
   }
  }
 } while (0);
 i13 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = __ZN20btAlignedObjectArrayI16btBroadphasePairE21expandNonInitializingEv(i12) | 0;
 i14 = HEAP32[i1 + 72 >> 2] | 0;
 if ((i14 | 0) != 0) {
  FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] & 31](i14, i3, i5) | 0;
 }
 if ((i9 | 0) < (HEAP32[i11 >> 2] | 0)) {
  __ZN28btHashedOverlappingPairCache10growTablesEv(i1);
  i10 = (HEAP32[i11 >> 2] | 0) + -1 & i8;
 }
 if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
  HEAP32[i12 >> 2] = i3;
  HEAP32[i12 + 4 >> 2] = i5;
 } else {
  HEAP32[i12 >> 2] = i5;
  HEAP32[i12 + 4 >> 2] = i3;
 }
 i17 = i12 + 8 | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 i17 = (HEAP32[i4 >> 2] | 0) + (i10 << 2) | 0;
 HEAP32[(HEAP32[i1 + 64 >> 2] | 0) + (i13 << 2) >> 2] = HEAP32[i17 >> 2];
 HEAP32[i17 >> 2] = i13;
 i17 = i12;
 STACKTOP = i2;
 return i17 | 0;
}
function __ZN24btConvexTriangleCallback15processTriangleEP9btVector3ii(i2, i9, i7, i1) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i8;
 i5 = HEAP32[i2 + 48 >> 2] | 0;
 i4 = i2 + 8 | 0;
 i3 = i2 + 4 | 0;
 if ((HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 192 >> 2] | 0) + 4 >> 2] | 0) >= 20) {
  STACKTOP = i8;
  return;
 }
 i10 = HEAP32[i4 >> 2] | 0;
 i12 = i9 + 16 | 0;
 i11 = i9 + 32 | 0;
 __ZN23btPolyhedralConvexShapeC2Ev(i6);
 HEAP32[i6 >> 2] = 456552;
 i13 = i6 + 56 | 0;
 HEAP32[i6 + 4 >> 2] = 1;
 HEAP32[i13 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i9 = i6 + 72 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
 i9 = i6 + 88 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 HEAPF32[i6 + 44 >> 2] = +HEAPF32[i2 + 56 >> 2];
 i9 = i10 + 192 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = i6;
 i11 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 15](i5, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0) | 0;
 i12 = i2 + 44 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 if ((HEAP32[i13 + 136 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
  FUNCTION_TABLE_viii[HEAP32[i14 + 8 >> 2] & 63](i13, i7, i1);
 } else {
  FUNCTION_TABLE_viii[HEAP32[i14 + 12 >> 2] & 63](i13, i7, i1);
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 31](i11, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i2 + 52 >> 2] | 0, HEAP32[i12 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i11 >> 2] >> 2] & 255](i11);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] & 127](i5, i11);
 HEAP32[i9 >> 2] = i10;
 __ZN23btPolyhedralConvexShapeD2Ev(i6);
 STACKTOP = i8;
 return;
}
function __ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii(i2, i14, i15) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i4 + 32 | 0;
 i5 = i4 + 28 | 0;
 i1 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4;
 i3 = i2 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] & 3](i8, i5, i4 + 24 | 0, i1, i9, i7, i11, i4 + 4 | 0, i12, i14);
 i11 = (HEAP32[i7 >> 2] | 0) + (Math_imul(HEAP32[i11 >> 2] | 0, i15) | 0) | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i12 = (HEAP32[i12 >> 2] | 0) == 3;
 i1 = (HEAP32[i1 >> 2] | 0) == 0;
 i5 = HEAP32[i5 >> 2] | 0;
 i8 = i7 + 4 | 0;
 i6 = i7 + 8 | 0;
 i7 = i7 + 12 | 0;
 i13 = 2;
 while (1) {
  if (i12) {
   i16 = HEAPU16[i11 + (i13 << 1) >> 1] | 0;
  } else {
   i16 = HEAP32[i11 + (i13 << 2) >> 2] | 0;
  }
  i17 = Math_imul(HEAP32[i9 >> 2] | 0, i16) | 0;
  i16 = i5 + i17 | 0;
  if (i1) {
   d19 = +HEAPF32[i5 + (i17 + 4) >> 2] * +HEAPF32[i6 >> 2];
   d18 = +HEAPF32[i5 + (i17 + 8) >> 2] * +HEAPF32[i7 >> 2];
   HEAPF32[i10 + (i13 << 4) >> 2] = +HEAPF32[i16 >> 2] * +HEAPF32[i8 >> 2];
   HEAPF32[i10 + (i13 << 4) + 4 >> 2] = d19;
   HEAPF32[i10 + (i13 << 4) + 8 >> 2] = d18;
   HEAPF32[i10 + (i13 << 4) + 12 >> 2] = 0.0;
  } else {
   d18 = +HEAPF64[i5 + (i17 + 8) >> 3] * +HEAPF32[i6 >> 2];
   d19 = +HEAPF64[i5 + (i17 + 16) >> 3] * +HEAPF32[i7 >> 2];
   HEAPF32[i10 + (i13 << 4) >> 2] = +HEAPF64[i16 >> 3] * +HEAPF32[i8 >> 2];
   HEAPF32[i10 + (i13 << 4) + 4 >> 2] = d18;
   HEAPF32[i10 + (i13 << 4) + 8 >> 2] = d19;
   HEAPF32[i10 + (i13 << 4) + 12 >> 2] = 0.0;
  }
  if ((i13 | 0) > 0) {
   i13 = i13 + -1 | 0;
  } else {
   break;
  }
 }
 i17 = HEAP32[i2 + 8 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] & 63](i17, i10, i14, i15);
 i17 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] & 127](i17, i14);
 STACKTOP = i4;
 return;
}
function __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEP17btCollisionObjectS1_(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 i6 = (HEAP8[i3 + 28 | 0] | 0) != 0;
 i2 = i6 ? i4 : i5;
 i4 = i6 ? i5 : i4;
 i6 = i2 + 192 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i7 + 16 >> 2] | 0;
 i8 = i3 + 12 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 if ((i9 | 0) < (i5 | 0)) {
  i10 = i3 + 16 | 0;
  if ((HEAP32[i10 >> 2] | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) {
    i11 = 0;
    i13 = i9;
   } else {
    i11 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
    i13 = HEAP32[i8 >> 2] | 0;
   }
   i12 = i3 + 20 | 0;
   if ((i13 | 0) > 0) {
    i15 = 0;
    do {
     i14 = i11 + (i15 << 2) | 0;
     if ((i14 | 0) != 0) {
      HEAP32[i14 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + (i15 << 2) >> 2];
     }
     i15 = i15 + 1 | 0;
    } while ((i15 | 0) != (i13 | 0));
   }
   i14 = HEAP32[i12 >> 2] | 0;
   i13 = i3 + 24 | 0;
   if ((i14 | 0) != 0) {
    if ((HEAP8[i13] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i14);
    }
    HEAP32[i12 >> 2] = 0;
   }
   HEAP8[i13] = 1;
   HEAP32[i12 >> 2] = i11;
   HEAP32[i10 >> 2] = i5;
  } else {
   i12 = i3 + 20 | 0;
  }
  do {
   i10 = (HEAP32[i12 >> 2] | 0) + (i9 << 2) | 0;
   if ((i10 | 0) != 0) {
    HEAP32[i10 >> 2] = 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i5 | 0));
 }
 HEAP32[i8 >> 2] = i5;
 if ((i5 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i8 = i7 + 64 | 0;
 i10 = i7 + 24 | 0;
 i9 = i3 + 4 | 0;
 i7 = i3 + 32 | 0;
 i11 = i3 + 20 | 0;
 i3 = 0;
 do {
  if ((HEAP32[i8 >> 2] | 0) == 0) {
   i15 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + (i3 * 80 | 0) + 64 >> 2];
   i14 = HEAP32[i9 >> 2] | 0;
   i14 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] & 15](i14, i2, i4, HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i11 >> 2] | 0) + (i3 << 2) >> 2] = i14;
   HEAP32[i6 >> 2] = i15;
  } else {
   HEAP32[(HEAP32[i11 >> 2] | 0) + (i3 << 2) >> 2] = 0;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != (i5 | 0));
 STACKTOP = i1;
 return;
}
function __ZN16btManifoldResultC2EP17btCollisionObjectS1_(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 HEAP32[i2 >> 2] = 453504;
 HEAP32[i2 + 4 >> 2] = 0;
 i6 = i2 + 8 | 0;
 i5 = i2 + 72 | 0;
 HEAP32[i2 + 136 >> 2] = i3;
 HEAP32[i2 + 140 >> 2] = i1;
 i8 = i2 + 144 | 0;
 i7 = i3 + 4 | 0;
 HEAP32[i8 + 0 >> 2] = -1;
 HEAP32[i8 + 4 >> 2] = -1;
 HEAP32[i8 + 8 >> 2] = -1;
 HEAP32[i8 + 12 >> 2] = -1;
 HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i6 = i2 + 24 | 0;
 i7 = i3 + 20 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i6 = i2 + 40 | 0;
 i7 = i3 + 36 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i6 = i2 + 56 | 0;
 i3 = i3 + 52 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i3 = i1 + 4 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i3 = i2 + 88 | 0;
 i5 = i1 + 20 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 104 | 0;
 i5 = i1 + 36 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 120 | 0;
 i2 = i1 + 52 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN23btDiscreteDynamicsWorld14debugDrawWorldEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(444848);
 __ZN16btCollisionWorld14debugDrawWorldEv(i2);
 L1 : do {
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0) != 0 ? (i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5) | 0) & 6144 | 0) != 0) : 0) {
   i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 100 >> 2] & 127](i2) | 0;
   while (1) {
    i4 = i3 + -1 | 0;
    if ((i3 | 0) <= 0) {
     break L1;
    }
    __ZN23btDiscreteDynamicsWorld19debugDrawConstraintEP17btTypedConstraint(i2, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 104 >> 2] & 31](i2, i4) | 0);
    i3 = i4;
   }
  }
 } while (0);
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0) == 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
 if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5) | 0) & 3 | 0) == 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0) == 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5) | 0) == 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 i3 = i2 + 248 | 0;
 if ((HEAP32[i3 >> 2] | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
 i4 = i2 + 256 | 0;
 i2 = i2 + 80 | 0;
 i5 = 0;
 do {
  i6 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 127](i6, HEAP32[i2 >> 2] | 0);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (HEAP32[i3 >> 2] | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i1;
 return;
}
function __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalIPFbRKS1_S5_EEEvT_ii(i1, i2, i8, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i6 + 16 | 0;
 i4 = i6;
 i3 = i1 + 12 | 0;
 i9 = (HEAP32[i3 >> 2] | 0) + (((i7 + i8 | 0) / 2 | 0) << 4) | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 i9 = i8;
 i11 = i7;
 do {
  while (1) {
   i10 = i9 + 1 | 0;
   if (FUNCTION_TABLE_iii[i2 & 31]((HEAP32[i3 >> 2] | 0) + (i9 << 4) | 0, i4) | 0) {
    i9 = i10;
   } else {
    break;
   }
  }
  while (1) {
   i12 = i11 + -1 | 0;
   if (FUNCTION_TABLE_iii[i2 & 31](i4, (HEAP32[i3 >> 2] | 0) + (i11 << 4) | 0) | 0) {
    i11 = i12;
   } else {
    break;
   }
  }
  if ((i9 | 0) <= (i11 | 0)) {
   i13 = HEAP32[i3 >> 2] | 0;
   i9 = i13 + (i9 << 4) | 0;
   HEAP32[i5 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   i13 = i13 + (i11 << 4) | 0;
   HEAP32[i9 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i9 = (HEAP32[i3 >> 2] | 0) + (i11 << 4) | 0;
   HEAP32[i9 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   i9 = i10;
   i11 = i12;
  }
 } while ((i9 | 0) <= (i11 | 0));
 if ((i11 | 0) > (i8 | 0)) {
  __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalIPFbRKS1_S5_EEEvT_ii(i1, i2, i8, i11);
 }
 if ((i9 | 0) >= (i7 | 0)) {
  STACKTOP = i6;
  return;
 }
 __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalIPFbRKS1_S5_EEEvT_ii(i1, i2, i9, i7);
 STACKTOP = i6;
 return;
}
function __ZN23btDiscreteDynamicsWorld23synchronizeMotionStatesEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i1 + 64 | 0;
 i3 = i1;
 __ZN15CProfileManager13Start_ProfileEPKc(444864);
 if ((HEAP8[i6 + 242 | 0] | 0) == 0) {
  i5 = i6 + 204 | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  if ((i8 | 0) <= 0) {
   __ZN15CProfileManager12Stop_ProfileEv();
   STACKTOP = i1;
   return;
  }
  i4 = i6 + 212 | 0;
  i6 = i6 + 236 | 0;
  i7 = 0;
  do {
   i9 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i7 << 2) >> 2] | 0;
   i10 = HEAP32[i9 + 216 >> 2] | 0;
   if ((!((i10 | 0) == 2 | (i10 | 0) == 5) ? (i2 = i9 + 472 | 0, (HEAP32[i2 >> 2] | 0) != 0) : 0) ? (HEAP32[i9 + 204 >> 2] & 3 | 0) == 0 : 0) {
    __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i9 + 68 | 0, i9 + 132 | 0, i9 + 148 | 0, +HEAPF32[i6 >> 2] * +HEAPF32[i9 + 240 >> 2], i3);
    i8 = HEAP32[i2 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 127](i8, i3);
    i8 = HEAP32[i5 >> 2] | 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < (i8 | 0));
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 } else {
  i3 = i6 + 8 | 0;
  i8 = HEAP32[i3 >> 2] | 0;
  if ((i8 | 0) <= 0) {
   __ZN15CProfileManager12Stop_ProfileEv();
   STACKTOP = i1;
   return;
  }
  i2 = i6 + 16 | 0;
  i6 = i6 + 236 | 0;
  i7 = 0;
  do {
   i9 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i7 << 2) >> 2] | 0;
   if ((!((HEAP32[i9 + 232 >> 2] & 2 | 0) == 0 | (i9 | 0) == 0) ? (i5 = i9 + 472 | 0, (HEAP32[i5 >> 2] | 0) != 0) : 0) ? (HEAP32[i9 + 204 >> 2] & 3 | 0) == 0 : 0) {
    __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i9 + 68 | 0, i9 + 132 | 0, i9 + 148 | 0, +HEAPF32[i6 >> 2] * +HEAPF32[i9 + 240 >> 2], i4);
    i8 = HEAP32[i5 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 127](i8, i4);
    i8 = HEAP32[i3 >> 2] | 0;
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < (i8 | 0));
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i1;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver45solveGroupCacheFriendlySplitImpulseIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i3, i7, i9, i10, i6, i5, i8, i4, i1, i2) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 if ((HEAP32[i4 + 44 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i2 = i4 + 20 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = (i6 | 0) > 0;
 if ((HEAP32[i4 + 60 >> 2] & 256 | 0) == 0) {
  if (!i5) {
   STACKTOP = i1;
   return;
  }
  i4 = i3 + 8 | 0;
  i5 = i3 + 76 | 0;
  i3 = i3 + 16 | 0;
  i7 = 1;
  while (1) {
   i8 = HEAP32[i4 >> 2] | 0;
   if ((i8 | 0) > 0) {
    i6 = 0;
    do {
     i10 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
     i9 = HEAP32[i3 >> 2] | 0;
     __ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i9 + (i10 * 136 | 0) + 104 >> 2] | 0, HEAP32[i9 + (i10 * 136 | 0) + 108 >> 2] | 0, i9 + (i10 * 136 | 0) | 0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i8 | 0));
    i6 = HEAP32[i2 >> 2] | 0;
   }
   if ((i7 | 0) >= (i6 | 0)) {
    break;
   }
   i7 = i7 + 1 | 0;
  }
  STACKTOP = i1;
  return;
 } else {
  if (!i5) {
   STACKTOP = i1;
   return;
  }
  i4 = i3 + 8 | 0;
  i5 = i3 + 76 | 0;
  i3 = i3 + 16 | 0;
  i7 = 1;
  while (1) {
   i8 = HEAP32[i4 >> 2] | 0;
   if ((i8 | 0) > 0) {
    i6 = 0;
    do {
     i10 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
     i9 = HEAP32[i3 >> 2] | 0;
     __ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER11btRigidBodyS1_RK18btSolverConstraint(0, HEAP32[i9 + (i10 * 136 | 0) + 104 >> 2] | 0, HEAP32[i9 + (i10 * 136 | 0) + 108 >> 2] | 0, i9 + (i10 * 136 | 0) | 0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i8 | 0));
    i6 = HEAP32[i2 >> 2] | 0;
   }
   if ((i7 | 0) >= (i6 | 0)) {
    break;
   }
   i7 = i7 + 1 | 0;
  }
  STACKTOP = i1;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolverD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 445960;
 i5 = i1 + 108 | 0;
 i4 = i1 + 116 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 120 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i5 = i1 + 88 | 0;
 i4 = i1 + 96 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 100 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 i5 = i1 + 68 | 0;
 i4 = i1 + 76 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 80 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 i5 = i1 + 48 | 0;
 i4 = i1 + 56 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 60 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i5 = i1 + 28 | 0;
 i4 = i1 + 36 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 40 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 16 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 20 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 12 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 12 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN20btConvexHullInternal14getOrientationEPKNS_4EdgeES2_RKNS_7Point32ES5_(i5, i6, i4, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 i3 = (HEAP32[i5 + 4 >> 2] | 0) == (i6 | 0);
 if ((HEAP32[i5 >> 2] | 0) != (i6 | 0)) {
  i6 = i3 & 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 if (!i3) {
  i6 = 2;
  STACKTOP = i2;
  return i6 | 0;
 }
 i11 = HEAP32[i1 + 4 >> 2] | 0;
 i8 = HEAP32[i4 + 8 >> 2] | 0;
 i3 = Math_imul(i8, i11) | 0;
 i10 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = i3 - (Math_imul(i12, i10) | 0) | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 i10 = Math_imul(i4, i10) | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i8 = i10 - (Math_imul(i9, i8) | 0) | 0;
 i4 = (Math_imul(i9, i12) | 0) - (Math_imul(i4, i11) | 0) | 0;
 i11 = HEAP32[i5 + 12 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i6 + 8 >> 2] | 0) + 12 >> 2] | 0;
 i12 = HEAP32[i5 + 88 >> 2] | 0;
 i9 = (HEAP32[i11 + 88 >> 2] | 0) - i12 | 0;
 i10 = HEAP32[i5 + 92 >> 2] | 0;
 i7 = (HEAP32[i11 + 92 >> 2] | 0) - i10 | 0;
 i5 = HEAP32[i5 + 96 >> 2] | 0;
 i11 = (HEAP32[i11 + 96 >> 2] | 0) - i5 | 0;
 i1 = HEAP32[i6 + 12 >> 2] | 0;
 i6 = (HEAP32[i1 + 88 >> 2] | 0) - i12 | 0;
 i10 = (HEAP32[i1 + 92 >> 2] | 0) - i10 | 0;
 i5 = (HEAP32[i1 + 96 >> 2] | 0) - i5 | 0;
 i1 = (Math_imul(i5, i7) | 0) - (Math_imul(i10, i11) | 0) | 0;
 i5 = (Math_imul(i6, i11) | 0) - (Math_imul(i5, i9) | 0) | 0;
 i7 = (Math_imul(i10, i9) | 0) - (Math_imul(i6, i7) | 0) | 0;
 i1 = ___muldi3(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0) | 0;
 i3 = tempRet0;
 i5 = ___muldi3(i5 | 0, ((i5 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
 i6 = tempRet0;
 i4 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, i4 | 0, ((i4 | 0) < 0) << 31 >> 31 | 0) | 0;
 i4 = _i64Add(i1 | 0, i3 | 0, i4 | 0, tempRet0 | 0) | 0;
 i6 = _i64Add(i4 | 0, tempRet0 | 0, i5 | 0, i6 | 0) | 0;
 i5 = tempRet0;
 i12 = (i5 | 0) > 0 | (i5 | 0) == 0 & i6 >>> 0 > 0 ? 2 : 1;
 STACKTOP = i2;
 return i12 | 0;
}
function __ZNK15btTriangleShape8isInsideERK9btVector3f(i11, i2, d17) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 d17 = +d17;
 var i1 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, d10 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i1 + 16 | 0;
 i4 = i1;
 d19 = +HEAPF32[i11 + 56 >> 2];
 d22 = +HEAPF32[i11 + 72 >> 2] - d19;
 d10 = +HEAPF32[i11 + 60 >> 2];
 d5 = +HEAPF32[i11 + 76 >> 2] - d10;
 d18 = +HEAPF32[i11 + 64 >> 2];
 d23 = +HEAPF32[i11 + 80 >> 2] - d18;
 d20 = +HEAPF32[i11 + 88 >> 2] - d19;
 d21 = +HEAPF32[i11 + 92 >> 2] - d10;
 d6 = +HEAPF32[i11 + 96 >> 2] - d18;
 d7 = d5 * d6 - d23 * d21;
 d6 = d23 * d20 - d22 * d6;
 d20 = d22 * d21 - d5 * d20;
 d5 = 1.0 / +Math_sqrt(+(d20 * d20 + (d7 * d7 + d6 * d6)));
 d7 = d5 * d7;
 d6 = d5 * d6;
 d5 = d20 * d5;
 i8 = i2 + 4 | 0;
 i9 = i2 + 8 | 0;
 d18 = +HEAPF32[i2 >> 2] * d7 + +HEAPF32[i8 >> 2] * d6 + d5 * +HEAPF32[i9 >> 2] - (d7 * d19 + d6 * d10 + d5 * d18);
 d10 = -d17;
 if (!(d18 >= d10) | !(d18 <= d17)) {
  i16 = 0;
  STACKTOP = i1;
  return i16 | 0;
 }
 i13 = i4 + 4 | 0;
 i12 = i3 + 4 | 0;
 i15 = i4 + 8 | 0;
 i14 = i3 + 8 | 0;
 i16 = 0;
 while (1) {
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 96 >> 2] & 63](i11, i16, i3, i4);
  d20 = +HEAPF32[i3 >> 2];
  d19 = +HEAPF32[i4 >> 2] - d20;
  d22 = +HEAPF32[i12 >> 2];
  d17 = +HEAPF32[i13 >> 2] - d22;
  d18 = +HEAPF32[i14 >> 2];
  d23 = +HEAPF32[i15 >> 2] - d18;
  d21 = d5 * d17 - d6 * d23;
  d23 = d7 * d23 - d5 * d19;
  d17 = d6 * d19 - d7 * d17;
  d19 = 1.0 / +Math_sqrt(+(d17 * d17 + (d21 * d21 + d23 * d23)));
  d21 = d19 * d21;
  d23 = d19 * d23;
  d19 = d17 * d19;
  i16 = i16 + 1 | 0;
  if (+HEAPF32[i2 >> 2] * d21 + +HEAPF32[i8 >> 2] * d23 + d19 * +HEAPF32[i9 >> 2] - (d18 * d19 + (d20 * d21 + d22 * d23)) < d10) {
   i3 = 0;
   i2 = 5;
   break;
  }
  if ((i16 | 0) >= 3) {
   i3 = 1;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}
function __ZNK20btDefaultMotionState17getWorldTransformER11btTransform(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0;
 d17 = +HEAPF32[i2 + 68 >> 2];
 d16 = +HEAPF32[i2 + 84 >> 2];
 d15 = +HEAPF32[i2 + 100 >> 2];
 d14 = +HEAPF32[i2 + 72 >> 2];
 d13 = +HEAPF32[i2 + 88 >> 2];
 d12 = +HEAPF32[i2 + 104 >> 2];
 d8 = +HEAPF32[i2 + 76 >> 2];
 d6 = +HEAPF32[i2 + 92 >> 2];
 d4 = +HEAPF32[i2 + 108 >> 2];
 d11 = -+HEAPF32[i2 + 116 >> 2];
 d10 = -+HEAPF32[i2 + 120 >> 2];
 d9 = -+HEAPF32[i2 + 124 >> 2];
 d26 = +HEAPF32[i2 + 4 >> 2];
 d25 = +HEAPF32[i2 + 20 >> 2];
 d24 = +HEAPF32[i2 + 36 >> 2];
 d23 = +HEAPF32[i2 + 8 >> 2];
 d22 = +HEAPF32[i2 + 24 >> 2];
 d21 = +HEAPF32[i2 + 40 >> 2];
 d20 = +HEAPF32[i2 + 12 >> 2];
 d19 = +HEAPF32[i2 + 28 >> 2];
 d18 = +HEAPF32[i2 + 44 >> 2];
 d7 = +HEAPF32[i2 + 52 >> 2];
 d5 = +HEAPF32[i2 + 56 >> 2];
 d3 = +HEAPF32[i2 + 60 >> 2];
 HEAPF32[i1 >> 2] = d17 * d26 + d16 * d25 + d15 * d24;
 HEAPF32[i1 + 4 >> 2] = d17 * d23 + d16 * d22 + d15 * d21;
 HEAPF32[i1 + 8 >> 2] = d17 * d20 + d16 * d19 + d15 * d18;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d14 * d26 + d13 * d25 + d12 * d24;
 HEAPF32[i1 + 20 >> 2] = d14 * d23 + d13 * d22 + d12 * d21;
 HEAPF32[i1 + 24 >> 2] = d14 * d20 + d13 * d19 + d12 * d18;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = d8 * d26 + d6 * d25 + d4 * d24;
 HEAPF32[i1 + 36 >> 2] = d8 * d23 + d6 * d22 + d4 * d21;
 HEAPF32[i1 + 40 >> 2] = d8 * d20 + d6 * d19 + d4 * d18;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 48 >> 2] = d17 * d11 + d16 * d10 + d15 * d9 + (d17 * d7 + d16 * d5 + d15 * d3);
 HEAPF32[i1 + 52 >> 2] = d14 * d11 + d13 * d10 + d12 * d9 + (d14 * d7 + d13 * d5 + d12 * d3);
 HEAPF32[i1 + 56 >> 2] = d8 * d11 + d6 * d10 + d4 * d9 + (d8 * d7 + d6 * d5 + d4 * d3);
 HEAPF32[i1 + 60 >> 2] = 0.0;
 return;
}
function __ZN26btTriangleIndexVertexArray14addIndexedMeshERK13btIndexedMesh14PHY_ScalarType(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 i5 = i1 + 24 | 0;
 i10 = HEAP32[i5 >> 2] | 0;
 i7 = i1 + 28 | 0;
 if ((i10 | 0) == (HEAP32[i7 >> 2] | 0) ? (i6 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) {
   i8 = 0;
  } else {
   i8 = __Z22btAlignedAllocInternalji(i6 << 5, 16) | 0;
   i10 = HEAP32[i5 >> 2] | 0;
  }
  i9 = i1 + 32 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i12 = i8 + (i11 << 5) | 0;
    i13 = (HEAP32[i9 >> 2] | 0) + (i11 << 5) | 0;
    HEAP32[i12 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
    HEAP32[i12 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
    HEAP32[i12 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
    HEAP32[i12 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
    HEAP32[i12 + 16 >> 2] = HEAP32[i13 + 16 >> 2];
    HEAP32[i12 + 20 >> 2] = HEAP32[i13 + 20 >> 2];
    HEAP32[i12 + 24 >> 2] = HEAP32[i13 + 24 >> 2];
    HEAP32[i12 + 28 >> 2] = HEAP32[i13 + 28 >> 2];
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i9 >> 2] | 0;
  i10 = i1 + 36 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i10] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
   }
   HEAP32[i9 >> 2] = 0;
  }
  HEAP8[i10] = 1;
  HEAP32[i9 >> 2] = i8;
  HEAP32[i7 >> 2] = i6;
  i10 = HEAP32[i5 >> 2] | 0;
 }
 i12 = i1 + 32 | 0;
 i13 = (HEAP32[i12 >> 2] | 0) + (i10 << 5) | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i13 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i13 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i13 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i13 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 i13 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i13 + 1;
 HEAP32[(HEAP32[i12 >> 2] | 0) + (i13 << 5) + 24 >> 2] = i4;
 STACKTOP = i2;
 return;
}
function __ZNK14btCapsuleShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i23 = i5;
 i24 = HEAP32[i4 + 52 >> 2] | 0;
 d13 = +HEAPF32[i4 + (((i24 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 HEAPF32[i23 >> 2] = d13;
 i22 = i23 + 4 | 0;
 HEAPF32[i22 >> 2] = d13;
 i21 = i23 + 8 | 0;
 HEAPF32[i21 >> 2] = d13;
 HEAPF32[i23 + 12 >> 2] = 0.0;
 HEAPF32[i23 + (i24 << 2) >> 2] = d13 + +HEAPF32[i4 + (i24 << 2) + 28 >> 2];
 d13 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d16 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d13 = d13 + +HEAPF32[i23 >> 2];
 HEAPF32[i23 >> 2] = d13;
 d6 = d6 + +HEAPF32[i22 >> 2];
 HEAPF32[i22 >> 2] = d6;
 d16 = d16 + +HEAPF32[i21 >> 2];
 d19 = +Math_abs(+(+HEAPF32[i3 >> 2]));
 d10 = +Math_abs(+(+HEAPF32[i3 + 4 >> 2]));
 d20 = +Math_abs(+(+HEAPF32[i3 + 8 >> 2]));
 d17 = +Math_abs(+(+HEAPF32[i3 + 16 >> 2]));
 d8 = +Math_abs(+(+HEAPF32[i3 + 20 >> 2]));
 d18 = +Math_abs(+(+HEAPF32[i3 + 24 >> 2]));
 d14 = +Math_abs(+(+HEAPF32[i3 + 32 >> 2]));
 d12 = +Math_abs(+(+HEAPF32[i3 + 36 >> 2]));
 d15 = +Math_abs(+(+HEAPF32[i3 + 40 >> 2]));
 d11 = +HEAPF32[i3 + 48 >> 2];
 d9 = +HEAPF32[i3 + 52 >> 2];
 d7 = +HEAPF32[i3 + 56 >> 2];
 d10 = d16 * d20 + (d19 * d13 + d10 * d6);
 d8 = d16 * d18 + (d17 * d13 + d8 * d6);
 d6 = d16 * d15 + (d14 * d13 + d12 * d6);
 HEAPF32[i2 >> 2] = d11 - d10;
 HEAPF32[i2 + 4 >> 2] = d9 - d8;
 HEAPF32[i2 + 8 >> 2] = d7 - d6;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d11 + d10;
 HEAPF32[i1 + 4 >> 2] = d9 + d8;
 HEAPF32[i1 + 8 >> 2] = d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZNK16btDbvtBroadphase17getBroadphaseAabbER9btVector3S1_(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, i18 = 0;
 i3 = STACKTOP;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i4 = HEAP32[i4 + 44 >> 2] | 0;
 i18 = (i4 | 0) == 0;
 do {
  if ((i5 | 0) == 0) {
   if (i18) {
    d6 = 0.0;
    d12 = 0.0;
    d14 = 0.0;
    d15 = 0.0;
    d11 = 0.0;
    d7 = 0.0;
    d8 = 0.0;
    d9 = 0.0;
   } else {
    d6 = +HEAPF32[i4 >> 2];
    d12 = +HEAPF32[i4 + 4 >> 2];
    d14 = +HEAPF32[i4 + 8 >> 2];
    d15 = +HEAPF32[i4 + 12 >> 2];
    d11 = +HEAPF32[i4 + 16 >> 2];
    d7 = +HEAPF32[i4 + 20 >> 2];
    d8 = +HEAPF32[i4 + 24 >> 2];
    d9 = +HEAPF32[i4 + 28 >> 2];
   }
  } else {
   d6 = +HEAPF32[i5 >> 2];
   if (i18) {
    d12 = +HEAPF32[i5 + 4 >> 2];
    d14 = +HEAPF32[i5 + 8 >> 2];
    d15 = +HEAPF32[i5 + 12 >> 2];
    d11 = +HEAPF32[i5 + 16 >> 2];
    d7 = +HEAPF32[i5 + 20 >> 2];
    d8 = +HEAPF32[i5 + 24 >> 2];
    d9 = +HEAPF32[i5 + 28 >> 2];
    break;
   } else {
    d17 = +HEAPF32[i4 >> 2];
    d11 = +HEAPF32[i5 + 16 >> 2];
    d13 = +HEAPF32[i4 + 16 >> 2];
    d16 = +HEAPF32[i5 + 4 >> 2];
    d12 = +HEAPF32[i4 + 4 >> 2];
    d8 = +HEAPF32[i5 + 20 >> 2];
    d7 = +HEAPF32[i4 + 20 >> 2];
    d15 = +HEAPF32[i5 + 8 >> 2];
    d14 = +HEAPF32[i4 + 8 >> 2];
    d9 = +HEAPF32[i5 + 24 >> 2];
    d10 = +HEAPF32[i4 + 24 >> 2];
    d6 = d6 < d17 ? d6 : d17;
    d12 = d16 < d12 ? d16 : d12;
    d14 = d15 < d14 ? d15 : d14;
    d15 = 0.0;
    d11 = d11 > d13 ? d11 : d13;
    d7 = d8 > d7 ? d8 : d7;
    d8 = d9 > d10 ? d9 : d10;
    d9 = 0.0;
    break;
   }
  }
 } while (0);
 HEAPF32[i1 >> 2] = d6;
 HEAPF32[i1 + 4 >> 2] = d12;
 HEAPF32[i1 + 8 >> 2] = d14;
 HEAPF32[i1 + 12 >> 2] = d15;
 HEAPF32[i2 >> 2] = d11;
 HEAPF32[i2 + 4 >> 2] = d7;
 HEAPF32[i2 + 8 >> 2] = d8;
 HEAPF32[i2 + 12 >> 2] = d9;
 STACKTOP = i3;
 return;
}
function __ZNK11btMatrix3x311getRotationER12btQuaternion(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 d8 = +HEAPF32[i4 >> 2];
 d6 = +HEAPF32[i4 + 20 >> 2];
 d7 = +HEAPF32[i4 + 40 >> 2];
 d5 = d8 + d6 + d7;
 if (d5 > 0.0) {
  d7 = +Math_sqrt(+(d5 + 1.0));
  d8 = d7 * .5;
  HEAPF32[i3 + 12 >> 2] = d8;
  d7 = .5 / d7;
  d5 = d7 * (+HEAPF32[i4 + 36 >> 2] - +HEAPF32[i4 + 24 >> 2]);
  HEAPF32[i3 >> 2] = d5;
  d6 = d7 * (+HEAPF32[i4 + 8 >> 2] - +HEAPF32[i4 + 32 >> 2]);
  HEAPF32[i3 + 4 >> 2] = d6;
  d7 = d7 * (+HEAPF32[i4 + 16 >> 2] - +HEAPF32[i4 + 4 >> 2]);
  HEAPF32[i3 + 8 >> 2] = d7;
  HEAPF32[i1 >> 2] = d5;
  i9 = i1 + 4 | 0;
  HEAPF32[i9 >> 2] = d6;
  i9 = i1 + 8 | 0;
  HEAPF32[i9 >> 2] = d7;
  i9 = i1 + 12 | 0;
  HEAPF32[i9 >> 2] = d8;
  STACKTOP = i2;
  return;
 }
 if (d8 < d6) {
  i9 = d6 < d7 ? 2 : 1;
 } else {
  i9 = d8 < d7 ? 2 : 0;
 }
 i12 = ((i9 + 1 | 0) >>> 0) % 3 | 0;
 i11 = ((i9 + 2 | 0) >>> 0) % 3 | 0;
 d5 = +Math_sqrt(+(+HEAPF32[i4 + (i9 << 4) + (i9 << 2) >> 2] - +HEAPF32[i4 + (i12 << 4) + (i12 << 2) >> 2] - +HEAPF32[i4 + (i11 << 4) + (i11 << 2) >> 2] + 1.0));
 HEAPF32[i3 + (i9 << 2) >> 2] = d5 * .5;
 d5 = .5 / d5;
 i10 = i3 + 12 | 0;
 HEAPF32[i10 >> 2] = d5 * (+HEAPF32[i4 + (i11 << 4) + (i12 << 2) >> 2] - +HEAPF32[i4 + (i12 << 4) + (i11 << 2) >> 2]);
 HEAPF32[i3 + (i12 << 2) >> 2] = d5 * (+HEAPF32[i4 + (i12 << 4) + (i9 << 2) >> 2] + +HEAPF32[i4 + (i9 << 4) + (i12 << 2) >> 2]);
 HEAPF32[i3 + (i11 << 2) >> 2] = d5 * (+HEAPF32[i4 + (i11 << 4) + (i9 << 2) >> 2] + +HEAPF32[i4 + (i9 << 4) + (i11 << 2) >> 2]);
 d5 = +HEAPF32[i3 >> 2];
 d6 = +HEAPF32[i3 + 4 >> 2];
 d7 = +HEAPF32[i3 + 8 >> 2];
 d8 = +HEAPF32[i10 >> 2];
 HEAPF32[i1 >> 2] = d5;
 i9 = i1 + 4 | 0;
 HEAPF32[i9 >> 2] = d6;
 i9 = i1 + 8 | 0;
 HEAPF32[i9 >> 2] = d7;
 i9 = i1 + 12 | 0;
 HEAPF32[i9 >> 2] = d8;
 STACKTOP = i2;
 return;
}
function __ZNK34btPolyhedralConvexAabbCachingShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i5 = STACKTOP;
 d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d28 = +HEAPF32[i4 + 72 >> 2];
 d25 = +HEAPF32[i4 + 56 >> 2];
 d20 = +HEAPF32[i4 + 76 >> 2];
 d23 = +HEAPF32[i4 + 60 >> 2];
 d29 = +HEAPF32[i4 + 80 >> 2];
 d21 = +HEAPF32[i4 + 64 >> 2];
 d16 = d12 + (d28 - d25) * .5;
 d14 = d12 + (d20 - d23) * .5;
 d12 = d12 + (d29 - d21) * .5;
 d25 = (d28 + d25) * .5;
 d23 = (d20 + d23) * .5;
 d21 = (d29 + d21) * .5;
 d29 = +HEAPF32[i3 >> 2];
 d20 = +Math_abs(+d29);
 d28 = +HEAPF32[i3 + 4 >> 2];
 d19 = +Math_abs(+d28);
 d10 = +HEAPF32[i3 + 8 >> 2];
 d11 = +Math_abs(+d10);
 d27 = +HEAPF32[i3 + 16 >> 2];
 d18 = +Math_abs(+d27);
 d26 = +HEAPF32[i3 + 20 >> 2];
 d17 = +Math_abs(+d26);
 d8 = +HEAPF32[i3 + 24 >> 2];
 d9 = +Math_abs(+d8);
 d24 = +HEAPF32[i3 + 32 >> 2];
 d15 = +Math_abs(+d24);
 d22 = +HEAPF32[i3 + 36 >> 2];
 d13 = +Math_abs(+d22);
 d6 = +HEAPF32[i3 + 40 >> 2];
 d7 = +Math_abs(+d6);
 d10 = d25 * d29 + d23 * d28 + d21 * d10 + +HEAPF32[i3 + 48 >> 2];
 d8 = d25 * d27 + d23 * d26 + d21 * d8 + +HEAPF32[i3 + 52 >> 2];
 d6 = d25 * d24 + d23 * d22 + d21 * d6 + +HEAPF32[i3 + 56 >> 2];
 d11 = d16 * d20 + d14 * d19 + d12 * d11;
 d9 = d16 * d18 + d14 * d17 + d12 * d9;
 d7 = d16 * d15 + d14 * d13 + d12 * d7;
 HEAPF32[i2 >> 2] = d10 - d11;
 HEAPF32[i2 + 4 >> 2] = d8 - d9;
 HEAPF32[i2 + 8 >> 2] = d6 - d7;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d11 + d10;
 HEAPF32[i1 + 4 >> 2] = d9 + d8;
 HEAPF32[i1 + 8 >> 2] = d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN21btConeTwistConstraint9setFramesERK11btTransformS2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 i5 = i1 + 292 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i5 = i1 + 308 | 0;
 i6 = i3 + 16 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i5 = i1 + 324 | 0;
 i6 = i3 + 32 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i5 = i1 + 340 | 0;
 i3 = i3 + 48 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i3 = i1 + 356 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i3 = i1 + 372 | 0;
 i5 = i2 + 16 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i1 + 388 | 0;
 i5 = i2 + 32 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i1 + 404 | 0;
 i2 = i2 + 48 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
 STACKTOP = i4;
 return;
}
function __ZN13BenchmarkDemo11createTest3Ev(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 HEAPF32[i6 >> 2] = 0.0;
 i5 = i6 + 4 | 0;
 HEAPF32[i5 >> 2] = 1.0;
 i4 = i6 + 8 | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 i7 = i10 + 4 | 0;
 i9 = i10 + 36 | 0;
 i3 = i10 + 40 | 0;
 i2 = i10 + 44 | 0;
 i11 = i10 + 48 | 0;
 i13 = 16;
 do {
  d14 = +(0 - i13 | 0) * 6.0 * .5;
  i10 = 0;
  do {
   HEAPF32[i6 >> 2] = d14 + +(i10 | 0) * 6.0;
   i12 = __Znwj(136) | 0;
   __ZN7RagDollC2EP15btDynamicsWorldRK9btVector3f(i12, HEAP32[i7 >> 2] | 0, i6, 3.5);
   i16 = HEAP32[i9 >> 2] | 0;
   if ((i16 | 0) == (HEAP32[i3 >> 2] | 0) ? (i1 = (i16 | 0) == 0 ? 1 : i16 << 1, (i16 | 0) < (i1 | 0)) : 0) {
    if ((i1 | 0) == 0) {
     i15 = 0;
    } else {
     i15 = __Z22btAlignedAllocInternalji(i1 << 2, 16) | 0;
     i16 = HEAP32[i9 >> 2] | 0;
    }
    if ((i16 | 0) > 0) {
     i17 = 0;
     do {
      i18 = i15 + (i17 << 2) | 0;
      if ((i18 | 0) != 0) {
       HEAP32[i18 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + (i17 << 2) >> 2];
      }
      i17 = i17 + 1 | 0;
     } while ((i17 | 0) != (i16 | 0));
    }
    i17 = HEAP32[i2 >> 2] | 0;
    if ((i17 | 0) != 0) {
     if ((HEAP8[i11] | 0) != 0) {
      __Z21btAlignedFreeInternalPv(i17);
      i16 = HEAP32[i9 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = 0;
    }
    HEAP8[i11] = 1;
    HEAP32[i2 >> 2] = i15;
    HEAP32[i3 >> 2] = i1;
   }
   i15 = (HEAP32[i2 >> 2] | 0) + (i16 << 2) | 0;
   if ((i15 | 0) != 0) {
    HEAP32[i15 >> 2] = i12;
   }
   HEAP32[i9 >> 2] = i16 + 1;
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (i13 | 0));
  d14 = +HEAPF32[i4 >> 2];
  HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] + 7.0;
  HEAPF32[i4 >> 2] = d14 + -2.0;
  i13 = i13 + -1 | 0;
 } while ((i13 | 0) != 0);
 STACKTOP = i8;
 return;
}
function __ZN25btSimulationIslandManager10findUnionsEP12btDispatcherP16btCollisionWorld(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[i2 + 76 >> 2] | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
 if ((i3 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i5 = i4 + 16 | 0;
 i4 = 0;
 do {
  i7 = HEAP32[HEAP32[i2 + (i4 << 4) >> 2] >> 2] | 0;
  i6 = HEAP32[HEAP32[i2 + (i4 << 4) + 4 >> 2] >> 2] | 0;
  if (((i7 | 0) != 0 ? !((HEAP32[i7 + 204 >> 2] & 7 | 0) != 0 | (i6 | 0) == 0) : 0) ? (HEAP32[i6 + 204 >> 2] & 7 | 0) == 0 : 0) {
   i8 = HEAP32[i7 + 208 >> 2] | 0;
   i7 = HEAP32[i6 + 208 >> 2] | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   i9 = i6 + (i8 << 3) | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   if ((i10 | 0) != (i8 | 0)) {
    i8 = i10;
    while (1) {
     i8 = i6 + (i8 << 3) | 0;
     HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
     i8 = HEAP32[i8 >> 2] | 0;
     i9 = i6 + (i8 << 3) | 0;
     i10 = HEAP32[i9 >> 2] | 0;
     if ((i8 | 0) == (i10 | 0)) {
      break;
     } else {
      i8 = i10;
     }
    }
   }
   i9 = i6 + (i7 << 3) | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   if ((i10 | 0) != (i7 | 0)) {
    i7 = i10;
    while (1) {
     i7 = i6 + (i7 << 3) | 0;
     HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
     i7 = HEAP32[i7 >> 2] | 0;
     i9 = i6 + (i7 << 3) | 0;
     i10 = HEAP32[i9 >> 2] | 0;
     if ((i7 | 0) == (i10 | 0)) {
      break;
     } else {
      i7 = i10;
     }
    }
   }
   if ((i8 | 0) != (i7 | 0)) {
    HEAP32[i6 + (i8 << 3) >> 2] = i7;
    i10 = i6 + (i7 << 3) + 4 | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i6 + (i8 << 3) + 4 >> 2] | 0);
   }
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i3 | 0));
 STACKTOP = i1;
 return;
}
function __ZN13btRaycastBar2C2Efff(i5, d1, d7, d6) {
 i5 = i5 | 0;
 d1 = +d1;
 d7 = +d7;
 d6 = +d6;
 var i2 = 0, i3 = 0, i4 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i2 = STACKTOP;
 __ZN7btClockC2Ev(i5 + 40024 | 0);
 HEAP32[i5 + 4e4 >> 2] = 0;
 HEAP32[i5 + 40004 >> 2] = 0;
 HEAP32[i5 + 40020 >> 2] = 0;
 HEAP32[i5 + 40016 >> 2] = 9999;
 HEAP32[i5 + 40012 >> 2] = 0;
 HEAP32[i5 + 40008 >> 2] = 0;
 HEAPF32[i5 + 40028 >> 2] = 10.0;
 i3 = i5 + 40032 | 0;
 HEAPF32[i3 >> 2] = 0.0;
 HEAPF32[i5 + 40036 >> 2] = 0.0;
 HEAPF32[i5 + 40040 >> 2] = d6;
 HEAPF32[i5 + 40044 >> 2] = 1.0;
 i4 = 0;
 do {
  d15 = +(i4 | 0) * .025132741779088974 * .5;
  d12 = +Math_sin(+d15);
  d17 = d12 * 0.0;
  d15 = +Math_cos(+d15);
  d13 = d17 * 0.0;
  d11 = d15 + d17 - d13;
  d16 = d15 * 0.0;
  d14 = d17 + d16 - d13;
  d16 = d16 + d13 - d12;
  d10 = -d17;
  d13 = d10 - d17 - d13;
  d12 = -d12;
  d17 = d13 * d10;
  d8 = d14 * d10;
  d9 = (d8 + (d15 * d11 + d17) - d16 * d12) * d1;
  d8 = (d11 * d12 + (d15 * d16 + d17) - d8) * d1;
  HEAPF32[i5 + (i4 << 4) + 16e3 >> 2] = d9;
  HEAPF32[i5 + (i4 << 4) + 16004 >> 2] = (d16 * d10 + (d15 * d14 + d13 * d12) - d11 * d10) * d1;
  HEAPF32[i5 + (i4 << 4) + 16008 >> 2] = d8;
  HEAPF32[i5 + (i4 << 4) + 16012 >> 2] = 0.0;
  d10 = +HEAPF32[i3 >> 2];
  HEAPF32[i5 + (i4 << 4) >> 2] = d10;
  HEAPF32[i5 + (i4 << 4) + 4 >> 2] = d6;
  HEAPF32[i5 + (i4 << 4) + 8 >> 2] = d7;
  HEAPF32[i5 + (i4 << 4) + 12 >> 2] = 0.0;
  HEAPF32[i5 + (i4 << 4) + 8e3 >> 2] = d10 + d9;
  HEAPF32[i5 + (i4 << 4) + 8008 >> 2] = d8 + d7;
  HEAPF32[i5 + (i4 << 4) + 8012 >> 2] = 0.0;
  HEAPF32[i5 + (i4 << 4) + 8004 >> 2] = -1.0e3;
  HEAPF32[i5 + (i4 << 4) + 32e3 >> 2] = 1.0;
  HEAPF32[i5 + (i4 << 4) + 32004 >> 2] = 0.0;
  HEAPF32[i5 + (i4 << 4) + 32008 >> 2] = 0.0;
  HEAPF32[i5 + (i4 << 4) + 32012 >> 2] = 0.0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 500);
 STACKTOP = i2;
 return;
}
function __ZN34btClosestNotMeConvexResultCallback15addSingleResultERN16btCollisionWorld17LocalConvexResultEb(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i4 + 80 >> 2] | 0)) {
  d10 = 1.0;
  STACKTOP = i2;
  return +d10;
 }
 if ((HEAP32[i3 + 204 >> 2] & 4 | 0) != 0) {
  d10 = 1.0;
  STACKTOP = i2;
  return +d10;
 }
 i6 = i1 + 8 | 0;
 i7 = i1 + 12 | 0;
 i8 = i1 + 16 | 0;
 if ((+HEAPF32[i4 + 28 >> 2] - +HEAPF32[i4 + 12 >> 2]) * +HEAPF32[i6 >> 2] + (+HEAPF32[i4 + 32 >> 2] - +HEAPF32[i4 + 16 >> 2]) * +HEAPF32[i7 >> 2] + (+HEAPF32[i4 + 36 >> 2] - +HEAPF32[i4 + 20 >> 2]) * +HEAPF32[i8 >> 2] >= -+HEAPF32[i4 + 84 >> 2]) {
  d10 = 1.0;
  STACKTOP = i2;
  return +d10;
 }
 i9 = i1 + 40 | 0;
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i9 >> 2];
 HEAP32[i4 + 76 >> 2] = i3;
 if (i5) {
  i8 = i4 + 44 | 0;
  HEAP32[i8 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i8 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 } else {
  d14 = +HEAPF32[i1 + 8 >> 2];
  d13 = +HEAPF32[i7 >> 2];
  d12 = +HEAPF32[i8 >> 2];
  d11 = d14 * +HEAPF32[i3 + 20 >> 2] + d13 * +HEAPF32[i3 + 24 >> 2] + d12 * +HEAPF32[i3 + 28 >> 2];
  d10 = d14 * +HEAPF32[i3 + 36 >> 2] + d13 * +HEAPF32[i3 + 40 >> 2] + d12 * +HEAPF32[i3 + 44 >> 2];
  HEAPF32[i4 + 44 >> 2] = +HEAPF32[i3 + 4 >> 2] * d14 + +HEAPF32[i3 + 8 >> 2] * d13 + +HEAPF32[i3 + 12 >> 2] * d12;
  HEAPF32[i4 + 48 >> 2] = d11;
  HEAPF32[i4 + 52 >> 2] = d10;
  HEAPF32[i4 + 56 >> 2] = 0.0;
 }
 i8 = i4 + 60 | 0;
 i7 = i1 + 24 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 d14 = +HEAPF32[i9 >> 2];
 STACKTOP = i2;
 return +d14;
}
function __ZN13BenchmarkDemo11createTest2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i12 = i2 + 144 | 0;
 i11 = i2 + 128 | 0;
 i10 = i2 + 112 | 0;
 i9 = i2 + 96 | 0;
 i8 = i2 + 80 | 0;
 i7 = i2 + 64 | 0;
 i6 = i2 + 48 | 0;
 i5 = i2 + 32 | 0;
 i4 = i2 + 16 | 0;
 i3 = i2;
 HEAPF32[i12 >> 2] = -20.0;
 HEAPF32[i12 + 4 >> 2] = 0.0;
 HEAPF32[i12 + 8 >> 2] = 0.0;
 HEAPF32[i12 + 12 >> 2] = 0.0;
 HEAPF32[i11 >> 2] = 1.0;
 HEAPF32[i11 + 4 >> 2] = 1.0;
 HEAPF32[i11 + 8 >> 2] = 1.0;
 HEAPF32[i11 + 12 >> 2] = 0.0;
 __ZN13BenchmarkDemo13createPyramidERK9btVector3iS2_(i1, i12, 12, i11);
 HEAPF32[i10 >> 2] = -2.0;
 HEAPF32[i10 + 4 >> 2] = 0.0;
 HEAPF32[i10 + 8 >> 2] = 0.0;
 HEAPF32[i10 + 12 >> 2] = 0.0;
 HEAPF32[i9 >> 2] = 1.0;
 HEAPF32[i9 + 4 >> 2] = 1.0;
 HEAPF32[i9 + 8 >> 2] = 1.0;
 HEAPF32[i9 + 12 >> 2] = 0.0;
 __ZN13BenchmarkDemo10createWallERK9btVector3iS2_(i1, i10, 12, i9);
 HEAPF32[i8 >> 2] = 4.0;
 HEAPF32[i8 + 4 >> 2] = 0.0;
 HEAPF32[i8 + 8 >> 2] = 0.0;
 HEAPF32[i8 + 12 >> 2] = 0.0;
 HEAPF32[i7 >> 2] = 1.0;
 HEAPF32[i7 + 4 >> 2] = 1.0;
 HEAPF32[i7 + 8 >> 2] = 1.0;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 __ZN13BenchmarkDemo10createWallERK9btVector3iS2_(i1, i8, 12, i7);
 HEAPF32[i6 >> 2] = 10.0;
 HEAPF32[i6 + 4 >> 2] = 0.0;
 HEAPF32[i6 + 8 >> 2] = 0.0;
 HEAPF32[i6 + 12 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 1.0;
 HEAPF32[i5 + 4 >> 2] = 1.0;
 HEAPF32[i5 + 8 >> 2] = 1.0;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 __ZN13BenchmarkDemo10createWallERK9btVector3iS2_(i1, i6, 12, i5);
 HEAPF32[i4 >> 2] = 25.0;
 HEAPF32[i4 + 4 >> 2] = 0.0;
 HEAPF32[i4 + 8 >> 2] = 0.0;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAPF32[i3 >> 2] = 1.0;
 HEAPF32[i3 + 4 >> 2] = 1.0;
 HEAPF32[i3 + 8 >> 2] = 1.0;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 __ZN13BenchmarkDemo17createTowerCircleERK9btVector3iiS2_(i1, i4, 8, 24, i3);
 STACKTOP = i2;
 return;
}
function __ZNK11btTransformmlERKS_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0;
 d18 = +HEAPF32[i3 >> 2];
 d24 = +HEAPF32[i2 >> 2];
 d17 = +HEAPF32[i3 + 16 >> 2];
 d23 = +HEAPF32[i2 + 4 >> 2];
 d16 = +HEAPF32[i3 + 32 >> 2];
 d22 = +HEAPF32[i2 + 8 >> 2];
 d15 = +HEAPF32[i3 + 4 >> 2];
 d14 = +HEAPF32[i3 + 20 >> 2];
 d13 = +HEAPF32[i3 + 36 >> 2];
 d12 = +HEAPF32[i3 + 8 >> 2];
 d10 = +HEAPF32[i3 + 24 >> 2];
 d8 = +HEAPF32[i3 + 40 >> 2];
 d21 = +HEAPF32[i2 + 16 >> 2];
 d20 = +HEAPF32[i2 + 20 >> 2];
 d19 = +HEAPF32[i2 + 24 >> 2];
 d11 = +HEAPF32[i2 + 32 >> 2];
 d9 = +HEAPF32[i2 + 36 >> 2];
 d7 = +HEAPF32[i2 + 40 >> 2];
 d26 = +HEAPF32[i3 + 48 >> 2];
 d25 = +HEAPF32[i3 + 52 >> 2];
 d4 = +HEAPF32[i3 + 56 >> 2];
 d6 = +HEAPF32[i2 + 48 >> 2] + (d24 * d26 + d23 * d25 + d22 * d4);
 d5 = +HEAPF32[i2 + 52 >> 2] + (d26 * d21 + d25 * d20 + d4 * d19);
 d4 = +HEAPF32[i2 + 56 >> 2] + (d26 * d11 + d25 * d9 + d4 * d7);
 HEAPF32[i1 >> 2] = d18 * d24 + d17 * d23 + d16 * d22;
 HEAPF32[i1 + 4 >> 2] = d24 * d15 + d23 * d14 + d22 * d13;
 HEAPF32[i1 + 8 >> 2] = d24 * d12 + d23 * d10 + d22 * d8;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d18 * d21 + d17 * d20 + d16 * d19;
 HEAPF32[i1 + 20 >> 2] = d15 * d21 + d14 * d20 + d13 * d19;
 HEAPF32[i1 + 24 >> 2] = d12 * d21 + d10 * d20 + d8 * d19;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = d18 * d11 + d17 * d9 + d16 * d7;
 HEAPF32[i1 + 36 >> 2] = d15 * d11 + d14 * d9 + d13 * d7;
 HEAPF32[i1 + 40 >> 2] = d12 * d11 + d10 * d9 + d8 * d7;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 48 >> 2] = d6;
 HEAPF32[i1 + 52 >> 2] = d5;
 HEAPF32[i1 + 56 >> 2] = d4;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 return;
}
function __ZN20btAlignedObjectArrayI6btFaceE6resizeEiRKS0_(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 i2 = i6 + 4 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) <= (i1 | 0)) {
  if ((i4 | 0) >= (i1 | 0)) {
   HEAP32[i2 >> 2] = i1;
   STACKTOP = i3;
   return;
  }
  __ZN20btAlignedObjectArrayI6btFaceE7reserveEi(i6, i1);
  i6 = i6 + 12 | 0;
  i8 = i5 + 20 | 0;
  i7 = i5 + 40 | 0;
  do {
   i9 = (HEAP32[i6 >> 2] | 0) + (i4 * 56 | 0) | 0;
   if ((i9 | 0) != 0) {
    __ZN20btAlignedObjectArrayIiEC2ERKS0_(i9, i5);
    __ZN20btAlignedObjectArrayIiEC2ERKS0_(i9 + 20 | 0, i8);
    i11 = i9 + 40 | 0;
    HEAP32[i11 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    HEAP32[i11 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i1 | 0));
  HEAP32[i2 >> 2] = i1;
  STACKTOP = i3;
  return;
 }
 i6 = i6 + 12 | 0;
 i5 = i1;
 do {
  i7 = HEAP32[i6 >> 2] | 0;
  i9 = i7 + (i5 * 56 | 0) + 24 | 0;
  i11 = i7 + (i5 * 56 | 0) + 32 | 0;
  i8 = HEAP32[i11 >> 2] | 0;
  i10 = i7 + (i5 * 56 | 0) + 36 | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i10] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i8);
   }
   HEAP32[i11 >> 2] = 0;
  }
  HEAP8[i10] = 1;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i7 + (i5 * 56 | 0) + 28 >> 2] = 0;
  i10 = i7 + (i5 * 56 | 0) + 4 | 0;
  i8 = i7 + (i5 * 56 | 0) + 12 | 0;
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i7 + (i5 * 56 | 0) + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i7 + (i5 * 56 | 0) + 8 >> 2] = 0;
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i4 | 0));
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i3;
 return;
}
function ___dynamic_cast(i7, i6, i11, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i1;
 i3 = HEAP32[i7 >> 2] | 0;
 i4 = i7 + (HEAP32[i3 + -8 >> 2] | 0) | 0;
 i3 = HEAP32[i3 + -4 >> 2] | 0;
 HEAP32[i2 >> 2] = i11;
 HEAP32[i2 + 4 >> 2] = i7;
 HEAP32[i2 + 8 >> 2] = i6;
 HEAP32[i2 + 12 >> 2] = i5;
 i9 = i2 + 16 | 0;
 i10 = i2 + 20 | 0;
 i6 = i2 + 24 | 0;
 i8 = i2 + 28 | 0;
 i5 = i2 + 32 | 0;
 i7 = i2 + 40 | 0;
 i12 = (i3 | 0) == (i11 | 0);
 i13 = i9 + 0 | 0;
 i11 = i13 + 36 | 0;
 do {
  HEAP32[i13 >> 2] = 0;
  i13 = i13 + 4 | 0;
 } while ((i13 | 0) < (i11 | 0));
 HEAP16[i9 + 36 >> 1] = 0;
 HEAP8[i9 + 38 | 0] = 0;
 if (i12) {
  HEAP32[i2 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 7](i3, i2, i4, i4, 1, 0);
  i13 = (HEAP32[i6 >> 2] | 0) == 1 ? i4 : 0;
  STACKTOP = i1;
  return i13 | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 31](i3, i2, i4, 1, 0);
 i2 = HEAP32[i2 + 36 >> 2] | 0;
 if ((i2 | 0) == 1) {
  if ((HEAP32[i6 >> 2] | 0) != 1) {
   if ((HEAP32[i7 >> 2] | 0) != 0) {
    i13 = 0;
    STACKTOP = i1;
    return i13 | 0;
   }
   if ((HEAP32[i8 >> 2] | 0) != 1) {
    i13 = 0;
    STACKTOP = i1;
    return i13 | 0;
   }
   if ((HEAP32[i5 >> 2] | 0) != 1) {
    i13 = 0;
    STACKTOP = i1;
    return i13 | 0;
   }
  }
  i13 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i1;
  return i13 | 0;
 } else if ((i2 | 0) == 0) {
  if ((HEAP32[i7 >> 2] | 0) != 1) {
   i13 = 0;
   STACKTOP = i1;
   return i13 | 0;
  }
  if ((HEAP32[i8 >> 2] | 0) != 1) {
   i13 = 0;
   STACKTOP = i1;
   return i13 | 0;
  }
  i13 = (HEAP32[i5 >> 2] | 0) == 1 ? HEAP32[i10 >> 2] | 0 : 0;
  STACKTOP = i1;
  return i13 | 0;
 } else {
  i13 = 0;
  STACKTOP = i1;
  return i13 | 0;
 }
 return 0;
}
function __ZN11btRigidBody25internalWritebackVelocityEf(i1, d4) {
 i1 = i1 | 0;
 d4 = +d4;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2;
 if (!(+HEAPF32[i1 + 336 >> 2] != 0.0)) {
  STACKTOP = i2;
  return;
 }
 i5 = i1 + 304 | 0;
 i6 = i1 + 308 | 0;
 d7 = +HEAPF32[i6 >> 2] + +HEAPF32[i1 + 508 >> 2];
 i9 = i1 + 312 | 0;
 d8 = +HEAPF32[i9 >> 2] + +HEAPF32[i1 + 512 >> 2];
 HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] + +HEAPF32[i1 + 504 >> 2];
 HEAPF32[i6 >> 2] = d7;
 HEAPF32[i9 >> 2] = d8;
 HEAPF32[i1 + 316 >> 2] = 0.0;
 i9 = i1 + 320 | 0;
 i6 = i1 + 324 | 0;
 d8 = +HEAPF32[i6 >> 2] + +HEAPF32[i1 + 524 >> 2];
 i5 = i1 + 328 | 0;
 d7 = +HEAPF32[i5 >> 2] + +HEAPF32[i1 + 528 >> 2];
 HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] + +HEAPF32[i1 + 520 >> 2];
 HEAPF32[i6 >> 2] = d8;
 HEAPF32[i5 >> 2] = d7;
 HEAPF32[i1 + 332 >> 2] = 0.0;
 i5 = i1 + 4 | 0;
 __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i5, i1 + 568 | 0, i1 + 584 | 0, d4, i3);
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i5 = i1 + 20 | 0;
 i6 = i3 + 16 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i5 = i1 + 36 | 0;
 i6 = i3 + 32 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i1 = i1 + 52 | 0;
 i3 = i3 + 48 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN20btConvexHullInternal11getBtNormalEPNS_4FaceE(i1, i5, i3) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i2;
 i10 = i5 + 108 | 0;
 i17 = HEAP32[i10 >> 2] | 0;
 HEAPF32[i14 + (i17 << 2) >> 2] = +(HEAP32[i3 + 28 >> 2] | 0);
 i9 = i5 + 112 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 HEAPF32[i14 + (i16 << 2) >> 2] = +(HEAP32[i3 + 32 >> 2] | 0);
 i15 = HEAP32[i5 + 104 >> 2] | 0;
 HEAPF32[i14 + (i15 << 2) >> 2] = +(HEAP32[i3 + 36 >> 2] | 0);
 d4 = +HEAPF32[i5 >> 2];
 d12 = +HEAPF32[i14 >> 2] * d4;
 d11 = +HEAPF32[i5 + 4 >> 2];
 d8 = +HEAPF32[i14 + 4 >> 2] * d11;
 d6 = +HEAPF32[i5 + 8 >> 2];
 d13 = +HEAPF32[i14 + 8 >> 2] * d6;
 HEAPF32[i14 + (i17 << 2) >> 2] = +(HEAP32[i3 + 44 >> 2] | 0);
 HEAPF32[i14 + (i16 << 2) >> 2] = +(HEAP32[i3 + 48 >> 2] | 0);
 HEAPF32[i14 + (i15 << 2) >> 2] = +(HEAP32[i3 + 52 >> 2] | 0);
 d4 = +HEAPF32[i14 >> 2] * d4;
 d11 = +HEAPF32[i14 + 4 >> 2] * d11;
 d6 = +HEAPF32[i14 + 8 >> 2] * d6;
 d7 = d8 * d6 - d13 * d11;
 d6 = d13 * d4 - d12 * d6;
 d4 = d12 * d11 - d8 * d4;
 HEAPF32[i1 >> 2] = d7;
 i5 = i1 + 4 | 0;
 HEAPF32[i5 >> 2] = d6;
 i3 = i1 + 8 | 0;
 HEAPF32[i3 >> 2] = d4;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 i10 = HEAP32[i10 >> 2] | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 d8 = +Math_sqrt(+(d7 * d7 + d6 * d6 + d4 * d4));
 if ((i10 + 1 | 0) == (i9 | 0) | (i10 + -2 | 0) == (i9 | 0)) {
  d13 = d8;
  d13 = 1.0 / d13;
  d12 = d13 * d7;
  HEAPF32[i1 >> 2] = d12;
  d12 = d13 * d6;
  HEAPF32[i5 >> 2] = d12;
  d13 = d13 * d4;
  HEAPF32[i3 >> 2] = d13;
  STACKTOP = i2;
  return;
 }
 d13 = -d8;
 d13 = 1.0 / d13;
 d12 = d13 * d7;
 HEAPF32[i1 >> 2] = d12;
 d12 = d13 * d6;
 HEAPF32[i5 >> 2] = d12;
 d13 = d13 * d4;
 HEAPF32[i3 >> 2] = d13;
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i3, i4, i8, i7) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 if ((i6 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) {
  if ((HEAP32[i3 + 4 >> 2] | 0) != (i4 | 0)) {
   STACKTOP = i1;
   return;
  }
  i2 = i3 + 28 | 0;
  if ((HEAP32[i2 >> 2] | 0) == 1) {
   STACKTOP = i1;
   return;
  }
  HEAP32[i2 >> 2] = i8;
  STACKTOP = i1;
  return;
 }
 if ((i6 | 0) != (HEAP32[i3 >> 2] | 0)) {
  i9 = HEAP32[i6 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] & 31](i9, i3, i4, i8, i7);
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i3 + 16 >> 2] | 0) != (i4 | 0) ? (i5 = i3 + 20 | 0, (HEAP32[i5 >> 2] | 0) != (i4 | 0)) : 0) {
  HEAP32[i3 + 32 >> 2] = i8;
  i8 = i3 + 44 | 0;
  if ((HEAP32[i8 >> 2] | 0) == 4) {
   STACKTOP = i1;
   return;
  }
  i9 = i3 + 52 | 0;
  HEAP8[i9] = 0;
  i10 = i3 + 53 | 0;
  HEAP8[i10] = 0;
  i6 = HEAP32[i6 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] & 7](i6, i3, i4, i4, 1, i7);
  if ((HEAP8[i10] | 0) != 0) {
   if ((HEAP8[i9] | 0) == 0) {
    i6 = 1;
    i2 = 13;
   }
  } else {
   i6 = 0;
   i2 = 13;
  }
  do {
   if ((i2 | 0) == 13) {
    HEAP32[i5 >> 2] = i4;
    i10 = i3 + 40 | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    if ((HEAP32[i3 + 36 >> 2] | 0) == 1 ? (HEAP32[i3 + 24 >> 2] | 0) == 2 : 0) {
     HEAP8[i3 + 54 | 0] = 1;
     if (i6) {
      break;
     }
    } else {
     i2 = 16;
    }
    if ((i2 | 0) == 16 ? i6 : 0) {
     break;
    }
    HEAP32[i8 >> 2] = 4;
    STACKTOP = i1;
    return;
   }
  } while (0);
  HEAP32[i8 >> 2] = 3;
  STACKTOP = i1;
  return;
 }
 if ((i8 | 0) != 1) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i3 + 32 >> 2] = 1;
 STACKTOP = i1;
 return;
}
function __ZNK11btTransform12inverseTimesERKS_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 d9 = +HEAPF32[i3 + 48 >> 2] - +HEAPF32[i2 + 48 >> 2];
 d7 = +HEAPF32[i3 + 52 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d5 = +HEAPF32[i3 + 56 >> 2] - +HEAPF32[i2 + 56 >> 2];
 d15 = +HEAPF32[i2 >> 2];
 d24 = +HEAPF32[i3 >> 2];
 d14 = +HEAPF32[i2 + 16 >> 2];
 d23 = +HEAPF32[i3 + 16 >> 2];
 d13 = +HEAPF32[i2 + 32 >> 2];
 d22 = +HEAPF32[i3 + 32 >> 2];
 d21 = +HEAPF32[i3 + 4 >> 2];
 d20 = +HEAPF32[i3 + 20 >> 2];
 d19 = +HEAPF32[i3 + 36 >> 2];
 d18 = +HEAPF32[i3 + 8 >> 2];
 d17 = +HEAPF32[i3 + 24 >> 2];
 d16 = +HEAPF32[i3 + 40 >> 2];
 d12 = +HEAPF32[i2 + 4 >> 2];
 d11 = +HEAPF32[i2 + 20 >> 2];
 d10 = +HEAPF32[i2 + 36 >> 2];
 d8 = +HEAPF32[i2 + 8 >> 2];
 d6 = +HEAPF32[i2 + 24 >> 2];
 d4 = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i1 >> 2] = d15 * d24 + d14 * d23 + d13 * d22;
 HEAPF32[i1 + 4 >> 2] = d15 * d21 + d14 * d20 + d13 * d19;
 HEAPF32[i1 + 8 >> 2] = d15 * d18 + d14 * d17 + d13 * d16;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d24 * d12 + d23 * d11 + d22 * d10;
 HEAPF32[i1 + 20 >> 2] = d21 * d12 + d20 * d11 + d19 * d10;
 HEAPF32[i1 + 24 >> 2] = d18 * d12 + d17 * d11 + d16 * d10;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = d24 * d8 + d23 * d6 + d22 * d4;
 HEAPF32[i1 + 36 >> 2] = d21 * d8 + d20 * d6 + d19 * d4;
 HEAPF32[i1 + 40 >> 2] = d18 * d8 + d17 * d6 + d16 * d4;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 48 >> 2] = d9 * d15 + d7 * d14 + d5 * d13;
 HEAPF32[i1 + 52 >> 2] = d9 * d12 + d7 * d11 + d5 * d10;
 HEAPF32[i1 + 56 >> 2] = d9 * d8 + d7 * d6 + d5 * d4;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 return;
}
function __ZN20btAlignedObjectArrayI16btBroadphasePairE6resizeEiRKS0_(i6, i1, i3) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 i2 = i6 + 4 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i5 | 0) > (i1 | 0)) {
  HEAP32[i2 >> 2] = i1;
  STACKTOP = i4;
  return;
 }
 i7 = (i5 | 0) < (i1 | 0);
 if (!i7) {
  HEAP32[i2 >> 2] = i1;
  STACKTOP = i4;
  return;
 }
 i8 = i6 + 8 | 0;
 if ((HEAP32[i8 >> 2] | 0) < (i1 | 0)) {
  if ((i1 | 0) == 0) {
   i10 = 0;
   i12 = i5;
  } else {
   i10 = __Z22btAlignedAllocInternalji(i1 << 4, 16) | 0;
   i12 = HEAP32[i2 >> 2] | 0;
  }
  i9 = i6 + 12 | 0;
  if ((i12 | 0) > 0) {
   i11 = 0;
   do {
    i13 = HEAP32[i9 >> 2] | 0;
    HEAP32[i10 + (i11 << 4) >> 2] = HEAP32[i13 + (i11 << 4) >> 2];
    HEAP32[i10 + (i11 << 4) + 4 >> 2] = HEAP32[i13 + (i11 << 4) + 4 >> 2];
    HEAP32[i10 + (i11 << 4) + 8 >> 2] = HEAP32[i13 + (i11 << 4) + 8 >> 2];
    HEAP32[i10 + (i11 << 4) + 12 >> 2] = HEAP32[i13 + (i11 << 4) + 12 >> 2];
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i12 | 0));
  }
  i12 = HEAP32[i9 >> 2] | 0;
  i11 = i6 + 16 | 0;
  if ((i12 | 0) != 0) {
   if ((HEAP8[i11] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i12);
   }
   HEAP32[i9 >> 2] = 0;
  }
  HEAP8[i11] = 1;
  HEAP32[i9 >> 2] = i10;
  HEAP32[i8 >> 2] = i1;
  if (!i7) {
   HEAP32[i2 >> 2] = i1;
   STACKTOP = i4;
   return;
  }
 }
 i8 = i6 + 12 | 0;
 i9 = i3 + 4 | 0;
 i7 = i3 + 8 | 0;
 i6 = i3 + 12 | 0;
 do {
  i13 = HEAP32[i8 >> 2] | 0;
  HEAP32[i13 + (i5 << 4) >> 2] = HEAP32[i3 >> 2];
  HEAP32[i13 + (i5 << 4) + 4 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i13 + (i5 << 4) + 8 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i13 + (i5 << 4) + 12 >> 2] = HEAP32[i6 >> 2];
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i1 | 0));
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i4;
 return;
}
function __ZNK13btConvexShape31localGetSupportVertexNonVirtualERK9btVector3(i1, i7, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i4 + 16 | 0;
 i2 = i4;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 d9 = +HEAPF32[i3 >> 2];
 i6 = i3 + 4 | 0;
 d10 = +HEAPF32[i6 >> 2];
 i5 = i3 + 8 | 0;
 d8 = +HEAPF32[i5 >> 2];
 if (d9 * d9 + d10 * d10 + d8 * d8 < 1.4210854715202004e-14) {
  HEAPF32[i3 >> 2] = -1.0;
  HEAPF32[i6 >> 2] = -1.0;
  HEAPF32[i5 >> 2] = -1.0;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  d9 = -1.0;
  d10 = -1.0;
  d8 = -1.0;
 }
 d11 = 1.0 / +Math_sqrt(+(d9 * d9 + d10 * d10 + d8 * d8));
 HEAPF32[i3 >> 2] = d9 * d11;
 HEAPF32[i6 >> 2] = d10 * d11;
 HEAPF32[i5 >> 2] = d8 * d11;
 __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i2, i7, i3);
 switch (HEAP32[i7 + 4 >> 2] | 0) {
 case 1:
  {
   d8 = +HEAPF32[i7 + 44 >> 2];
   break;
  }
 case 10:
  {
   d8 = +HEAPF32[i7 + 44 >> 2];
   break;
  }
 case 4:
 case 5:
  {
   d8 = +HEAPF32[i7 + 44 >> 2];
   break;
  }
 case 8:
  {
   d8 = +HEAPF32[i7 + 28 >> 2] * +HEAPF32[i7 + 12 >> 2];
   break;
  }
 case 0:
  {
   d8 = +HEAPF32[i7 + 44 >> 2];
   break;
  }
 case 13:
  {
   d8 = +HEAPF32[i7 + 44 >> 2];
   break;
  }
 default:
  {
   d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 7](i7);
  }
 }
 d10 = d8 * +HEAPF32[i6 >> 2] + +HEAPF32[i2 + 4 >> 2];
 d11 = d8 * +HEAPF32[i5 >> 2] + +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i1 >> 2] = d8 * +HEAPF32[i3 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i1 + 4 >> 2] = d10;
 HEAPF32[i1 + 8 >> 2] = d11;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZNK14btQuantizedBvh17walkStacklessTreeEP21btNodeOverlapCallbackRK9btVector3S4_(i10, i6, i5, i4) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = STACKTOP;
 i3 = i10 + 56 | 0;
 L1 : do {
  if ((HEAP32[i3 >> 2] | 0) > 0) {
   i2 = i5 + 8 | 0;
   i8 = i5 + 4 | 0;
   i9 = i4 + 4 | 0;
   i7 = i4 + 8 | 0;
   i11 = 0;
   i12 = HEAP32[i10 + 96 >> 2] | 0;
   i10 = 1;
   while (1) {
    if (!(+HEAPF32[i5 >> 2] > +HEAPF32[i12 + 16 >> 2]) ? !(+HEAPF32[i4 >> 2] < +HEAPF32[i12 >> 2]) : 0) {
     i15 = 1;
    } else {
     i15 = 0;
    }
    if (!(!(+HEAPF32[i2 >> 2] > +HEAPF32[i12 + 24 >> 2]) ? !(+HEAPF32[i7 >> 2] < +HEAPF32[i12 + 8 >> 2]) : 0)) {
     i15 = 0;
    }
    if (!(+HEAPF32[i8 >> 2] > +HEAPF32[i12 + 20 >> 2]) ? !(+HEAPF32[i9 >> 2] < +HEAPF32[i12 + 4 >> 2]) : 0) {
     i13 = i12 + 32 | 0;
     i14 = (HEAP32[i13 >> 2] | 0) == -1;
     if (i14 & i15) {
      FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 63](i6, HEAP32[i12 + 36 >> 2] | 0, HEAP32[i12 + 40 >> 2] | 0);
      i13 = 15;
     } else {
      i16 = i13;
      i13 = 14;
     }
    } else {
     i16 = i12 + 32 | 0;
     i14 = (HEAP32[i16 >> 2] | 0) == -1;
     i15 = 0;
     i13 = 14;
    }
    if ((i13 | 0) == 14) {
     i13 = 0;
     if (i15 | i14) {
      i13 = 15;
     } else {
      i16 = HEAP32[i16 >> 2] | 0;
      i11 = i16 + i11 | 0;
      i12 = i12 + (i16 << 6) | 0;
     }
    }
    if ((i13 | 0) == 15) {
     i11 = i11 + 1 | 0;
     i12 = i12 + 64 | 0;
    }
    if ((i11 | 0) >= (HEAP32[i3 >> 2] | 0)) {
     break L1;
    }
    i10 = i10 + 1 | 0;
   }
  } else {
   i10 = 0;
  }
 } while (0);
 if ((HEAP32[114066] | 0) >= (i10 | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[114066] = i10;
 STACKTOP = i1;
 return;
}
function __ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBody(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 i5 = i3 + 204 | 0;
 if ((HEAP32[i5 >> 2] & 3 | 0) == 0 ? (HEAP32[i3 + 496 >> 2] & 1 | 0) == 0 : 0) {
  __ZN11btRigidBody10setGravityERK9btVector3(i3, i2 + 220 | 0);
 }
 if ((HEAP32[i3 + 192 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i5 >> 2] & 1 | 0) == 0) {
  i4 = i2 + 204 | 0;
  i10 = HEAP32[i4 >> 2] | 0;
  i8 = i2 + 208 | 0;
  if ((i10 | 0) == (HEAP32[i8 >> 2] | 0) ? (i6 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i6 | 0)) : 0) {
   if ((i6 | 0) == 0) {
    i7 = 0;
   } else {
    i7 = __Z22btAlignedAllocInternalji(i6 << 2, 16) | 0;
    i10 = HEAP32[i4 >> 2] | 0;
   }
   i9 = i2 + 212 | 0;
   if ((i10 | 0) > 0) {
    i11 = 0;
    do {
     i12 = i7 + (i11 << 2) | 0;
     if ((i12 | 0) != 0) {
      HEAP32[i12 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i10 | 0));
   }
   i12 = HEAP32[i9 >> 2] | 0;
   i11 = i2 + 216 | 0;
   if ((i12 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i12);
     i10 = HEAP32[i4 >> 2] | 0;
    }
    HEAP32[i9 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i9 >> 2] = i7;
   HEAP32[i8 >> 2] = i6;
  }
  i6 = (HEAP32[i2 + 212 >> 2] | 0) + (i10 << 2) | 0;
  if ((i6 | 0) != 0) {
   HEAP32[i6 >> 2] = i3;
  }
  HEAP32[i4 >> 2] = i10 + 1;
 } else {
  __ZN17btCollisionObject18setActivationStateEi(i3, 2);
 }
 i4 = HEAP32[i5 >> 2] | 0;
 if ((i4 & 1 | 0) == 0) {
  i4 = (i4 & 2 | 0) == 0;
 } else {
  i4 = 0;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i2, i3, i4 ? 1 : 2, i4 ? -1 : -3);
 STACKTOP = i1;
 return;
}
function __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_(i7, i5, i6, i1, i2) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0;
 i3 = STACKTOP;
 HEAPF32[i1 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i2 >> 2] = -3.4028234663852886e+38;
 i4 = HEAP32[i7 + 8 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i8 = HEAP32[i7 + 16 >> 2] | 0;
  i10 = i5 + 4 | 0;
  i11 = i5 + 8 | 0;
  i9 = i5 + 48 | 0;
  i13 = i5 + 16 | 0;
  i14 = i5 + 20 | 0;
  i15 = i5 + 24 | 0;
  i12 = i5 + 52 | 0;
  i18 = i5 + 32 | 0;
  i19 = i5 + 36 | 0;
  i20 = i5 + 40 | 0;
  i17 = i5 + 56 | 0;
  i16 = i6 + 4 | 0;
  i7 = i6 + 8 | 0;
  d22 = -3.4028234663852886e+38;
  i21 = 0;
  do {
   d25 = +HEAPF32[i8 + (i21 << 4) >> 2];
   d24 = +HEAPF32[i8 + (i21 << 4) + 4 >> 2];
   d23 = +HEAPF32[i8 + (i21 << 4) + 8 >> 2];
   d23 = (+HEAPF32[i9 >> 2] + (+HEAPF32[i5 >> 2] * d25 + +HEAPF32[i10 >> 2] * d24 + +HEAPF32[i11 >> 2] * d23)) * +HEAPF32[i6 >> 2] + (+HEAPF32[i12 >> 2] + (d25 * +HEAPF32[i13 >> 2] + d24 * +HEAPF32[i14 >> 2] + d23 * +HEAPF32[i15 >> 2])) * +HEAPF32[i16 >> 2] + (+HEAPF32[i17 >> 2] + (d25 * +HEAPF32[i18 >> 2] + d24 * +HEAPF32[i19 >> 2] + d23 * +HEAPF32[i20 >> 2])) * +HEAPF32[i7 >> 2];
   if (d23 < +HEAPF32[i1 >> 2]) {
    HEAPF32[i1 >> 2] = d23;
    d22 = +HEAPF32[i2 >> 2];
   }
   if (d23 > d22) {
    HEAPF32[i2 >> 2] = d23;
    d22 = d23;
   }
   i21 = i21 + 1 | 0;
  } while ((i21 | 0) != (i4 | 0));
 } else {
  d22 = -3.4028234663852886e+38;
 }
 d23 = +HEAPF32[i1 >> 2];
 if (!(d23 > d22)) {
  STACKTOP = i3;
  return;
 }
 HEAPF32[i1 >> 2] = d22;
 HEAPF32[i2 >> 2] = d23;
 STACKTOP = i3;
 return;
}
function __ZN17btConvexHullShape8addPointERK9btVector3(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 i2 = i1 + 96 | 0;
 i11 = HEAP32[i2 >> 2] | 0;
 i6 = i1 + 100 | 0;
 if ((i11 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i11 | 0) == 0 ? 1 : i11 << 1, (i11 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 4, 16) | 0;
   i11 = HEAP32[i2 >> 2] | 0;
  }
  i8 = i1 + 104 | 0;
  if ((i11 | 0) > 0) {
   i9 = 0;
   do {
    i10 = i7 + (i9 << 4) | 0;
    if ((i10 | 0) != 0) {
     i12 = (HEAP32[i8 >> 2] | 0) + (i9 << 4) | 0;
     HEAP32[i10 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
     HEAP32[i10 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
     HEAP32[i10 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
     HEAP32[i10 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
    }
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i11 | 0));
  }
  i10 = HEAP32[i8 >> 2] | 0;
  i9 = i1 + 108 | 0;
  if ((i10 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i10);
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
  i11 = HEAP32[i2 >> 2] | 0;
 }
 i5 = (HEAP32[i1 + 104 >> 2] | 0) + (i11 << 4) | 0;
 if ((i5 | 0) == 0) {
  i12 = i11;
  i12 = i12 + 1 | 0;
  HEAP32[i2 >> 2] = i12;
  __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i12 = HEAP32[i2 >> 2] | 0;
 i12 = i12 + 1 | 0;
 HEAP32[i2 >> 2] = i12;
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i3;
 return;
}
function __ZNK12gjkepa2_impl13MinkowskiDiff8Support1ERK9btVector3(i7, i6, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2;
 i9 = i6 + 120 | 0;
 i8 = HEAPU8[i9] | HEAPU8[i9 + 1 | 0] << 8 | HEAPU8[i9 + 2 | 0] << 16 | HEAPU8[i9 + 3 | 0] << 24;
 i9 = i9 + 4 | 0;
 i9 = HEAPU8[i9] | HEAPU8[i9 + 1 | 0] << 8 | HEAPU8[i9 + 2 | 0] << 16 | HEAPU8[i9 + 3 | 0] << 24;
 i5 = (HEAP32[i6 + 4 >> 2] | 0) + (i9 >> 1) | 0;
 if ((i9 & 1 | 0) != 0) {
  i8 = HEAP32[(HEAP32[i5 >> 2] | 0) + i8 >> 2] | 0;
 }
 d10 = +HEAPF32[i1 >> 2];
 d11 = +HEAPF32[i1 + 4 >> 2];
 d12 = +HEAPF32[i1 + 8 >> 2];
 d13 = d10 * +HEAPF32[i6 + 24 >> 2] + d11 * +HEAPF32[i6 + 28 >> 2] + d12 * +HEAPF32[i6 + 32 >> 2];
 d14 = d10 * +HEAPF32[i6 + 40 >> 2] + d11 * +HEAPF32[i6 + 44 >> 2] + d12 * +HEAPF32[i6 + 48 >> 2];
 HEAPF32[i4 >> 2] = +HEAPF32[i6 + 8 >> 2] * d10 + +HEAPF32[i6 + 12 >> 2] * d11 + +HEAPF32[i6 + 16 >> 2] * d12;
 HEAPF32[i4 + 4 >> 2] = d13;
 HEAPF32[i4 + 8 >> 2] = d14;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i8 & 63](i3, i5, i4);
 d14 = +HEAPF32[i3 >> 2];
 d13 = +HEAPF32[i3 + 4 >> 2];
 d12 = +HEAPF32[i3 + 8 >> 2];
 d11 = +HEAPF32[i6 + 108 >> 2] + (d14 * +HEAPF32[i6 + 72 >> 2] + d13 * +HEAPF32[i6 + 76 >> 2] + d12 * +HEAPF32[i6 + 80 >> 2]);
 d10 = +HEAPF32[i6 + 112 >> 2] + (d14 * +HEAPF32[i6 + 88 >> 2] + d13 * +HEAPF32[i6 + 92 >> 2] + d12 * +HEAPF32[i6 + 96 >> 2]);
 HEAPF32[i7 >> 2] = +HEAPF32[i6 + 104 >> 2] + (+HEAPF32[i6 + 56 >> 2] * d14 + +HEAPF32[i6 + 60 >> 2] * d13 + +HEAPF32[i6 + 64 >> 2] * d12);
 HEAPF32[i7 + 4 >> 2] = d11;
 HEAPF32[i7 + 8 >> 2] = d10;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN14btQuantizedBvhD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 456232;
 i5 = i1 + 152 | 0;
 i4 = i1 + 160 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 164 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 i5 = i1 + 128 | 0;
 i4 = i1 + 136 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 140 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 i4 = i1 + 108 | 0;
 i6 = i1 + 116 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i3 = i1 + 120 | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i5 = i1 + 88 | 0;
 i4 = i1 + 96 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 100 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 i4 = i1 + 68 | 0;
 i5 = i1 + 76 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 80 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 72 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 72 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvT_ii(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8 + 2 | 0;
 i6 = i8 + 1 | 0;
 i9 = i8;
 i10 = i1 + 12 | 0;
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i4 + (((i3 + i2 | 0) / 2 | 0) << 3) >> 2] | 0;
 i11 = i2;
 i13 = i3;
 while (1) {
  while (1) {
   i12 = i11 + 1 | 0;
   if ((HEAP32[i4 + (i11 << 3) >> 2] | 0) < (i5 | 0)) {
    i11 = i12;
   } else {
    break;
   }
  }
  while (1) {
   i15 = i4 + (i13 << 3) | 0;
   i14 = i13 + -1 | 0;
   if ((i5 | 0) < (HEAP32[i15 >> 2] | 0)) {
    i13 = i14;
   } else {
    break;
   }
  }
  if ((i11 | 0) <= (i13 | 0)) {
   i11 = i4 + (i11 << 3) | 0;
   i4 = i11;
   i16 = HEAP32[i4 >> 2] | 0;
   i4 = HEAP32[i4 + 4 >> 2] | 0;
   i17 = i15;
   i15 = HEAP32[i17 + 4 >> 2] | 0;
   HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i11 + 4 >> 2] = i15;
   i11 = (HEAP32[i10 >> 2] | 0) + (i13 << 3) | 0;
   HEAP32[i11 >> 2] = i16;
   HEAP32[i11 + 4 >> 2] = i4;
   i11 = i12;
   i13 = i14;
  }
  if ((i11 | 0) > (i13 | 0)) {
   break;
  }
  i4 = HEAP32[i10 >> 2] | 0;
 }
 if ((i13 | 0) > (i2 | 0)) {
  HEAP8[i7 + 0 | 0] = HEAP8[i6 + 0 | 0] | 0;
  __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvT_ii(i1, i7, i2, i13);
 }
 if ((i11 | 0) >= (i3 | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP8[i7 + 0 | 0] = HEAP8[i9 + 0 | 0] | 0;
 __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvT_ii(i1, i7, i11, i3);
 STACKTOP = i8;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3P11btRigidBodyS4_iR15btManifoldPointS2_S2_P17btCollisionObjectS8_fff(i2, i7, i14, i13, i6, i8, i9, i10, i11, i5, d1, d4, d3) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 d4 = +d4;
 d3 = +d3;
 var i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i13 = STACKTOP;
 i15 = i2 + 48 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = i2 + 52 | 0;
 if ((i14 | 0) == (HEAP32[i16 >> 2] | 0) ? (i12 = (i14 | 0) == 0 ? 1 : i14 << 1, (i14 | 0) < (i12 | 0)) : 0) {
  if ((i12 | 0) == 0) {
   i17 = 0;
   i19 = i14;
  } else {
   i17 = __Z22btAlignedAllocInternalji(i12 * 136 | 0, 16) | 0;
   i19 = HEAP32[i15 >> 2] | 0;
  }
  i18 = i2 + 56 | 0;
  if ((i19 | 0) > 0) {
   i20 = 0;
   do {
    _memcpy(i17 + (i20 * 136 | 0) | 0, (HEAP32[i18 >> 2] | 0) + (i20 * 136 | 0) | 0, 136) | 0;
    i20 = i20 + 1 | 0;
   } while ((i20 | 0) != (i19 | 0));
  }
  i19 = HEAP32[i18 >> 2] | 0;
  i20 = i2 + 60 | 0;
  if ((i19 | 0) != 0) {
   if ((HEAP8[i20] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i19);
   }
   HEAP32[i18 >> 2] = 0;
  }
  HEAP8[i20] = 1;
  HEAP32[i18 >> 2] = i17;
  HEAP32[i16 >> 2] = i12;
  i12 = HEAP32[i15 >> 2] | 0;
 } else {
  i12 = i14;
 }
 HEAP32[i15 >> 2] = i12 + 1;
 i19 = HEAP32[i2 + 56 >> 2] | 0;
 i20 = i19 + (i14 * 136 | 0) | 0;
 HEAP32[i19 + (i14 * 136 | 0) + 100 >> 2] = i6;
 __ZN35btSequentialImpulseConstraintSolver23setupFrictionConstraintER18btSolverConstraintRK9btVector3P11btRigidBodyS6_R15btManifoldPointS4_S4_P17btCollisionObjectSA_fff(0, i20, i7, 0, 0, i8, i9, i10, i11, i5, d1, d4, d3);
 STACKTOP = i13;
 return i20 | 0;
}
function __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i1, i4, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i5 = i1 + 24 | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 31](i6, HEAP32[i5 >> 2] | 0) | 0;
 i3 = i1 + 28 | 0;
 HEAP32[i4 + 4 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 31](i6, HEAP32[i3 >> 2] | 0) | 0;
 i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 31](i6, i1) | 0;
 i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 31](i6, i7) | 0;
 HEAP32[i4 + 8 >> 2] = i8;
 if ((i8 | 0) != 0) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 127](i6, i7);
 }
 HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAPU8[i1 + 21 | 0] | 0;
 HEAP32[i4 + 20 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i1 + 32 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i1 + 36 >> 2];
 i4 = i4 + 36 | 0;
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i7 + 480 >> 2] | 0) > 0) {
  i6 = 0;
  do {
   if ((HEAP32[(HEAP32[i7 + 488 >> 2] | 0) + (i6 << 2) >> 2] | 0) == (i1 | 0)) {
    HEAP32[i4 >> 2] = 1;
    i7 = HEAP32[i5 >> 2] | 0;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i7 + 480 >> 2] | 0));
 }
 i6 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i6 + 480 >> 2] | 0) > 0) {
  i5 = 0;
 } else {
  STACKTOP = i2;
  return 446848;
 }
 do {
  if ((HEAP32[(HEAP32[i6 + 488 >> 2] | 0) + (i5 << 2) >> 2] | 0) == (i1 | 0)) {
   HEAP32[i4 >> 2] = 1;
   i6 = HEAP32[i3 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (HEAP32[i6 + 480 >> 2] | 0));
 STACKTOP = i2;
 return 446848;
}
function __ZNK16btCollisionShape21calculateTemporalAabbERK11btTransformRK9btVector3S5_fRS3_S6_(i3, i7, i20, i2, d6, i5, i1) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 d6 = +d6;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i4 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i7, i5, i1);
 d18 = +HEAPF32[i1 >> 2];
 i7 = i1 + 4 | 0;
 d16 = +HEAPF32[i7 >> 2];
 i10 = i1 + 8 | 0;
 d11 = +HEAPF32[i10 >> 2];
 d13 = +HEAPF32[i5 >> 2];
 i9 = i5 + 4 | 0;
 d17 = +HEAPF32[i9 >> 2];
 i8 = i5 + 8 | 0;
 d12 = +HEAPF32[i8 >> 2];
 d19 = +HEAPF32[i20 >> 2] * d6;
 d15 = +HEAPF32[i20 + 4 >> 2] * d6;
 d14 = +HEAPF32[i20 + 8 >> 2] * d6;
 if (d19 > 0.0) {
  d18 = d18 + d19;
 } else {
  d13 = d13 + d19;
 }
 if (d15 > 0.0) {
  d16 = d16 + d15;
 } else {
  d17 = d17 + d15;
 }
 if (d14 > 0.0) {
  d11 = d11 + d14;
 } else {
  d12 = d12 + d14;
 }
 d14 = +HEAPF32[i2 >> 2];
 d15 = +HEAPF32[i2 + 4 >> 2];
 d19 = +HEAPF32[i2 + 8 >> 2];
 d19 = +Math_sqrt(+(d14 * d14 + d15 * d15 + d19 * d19));
 d19 = d19 * +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 7](i3) * d6;
 HEAPF32[i5 >> 2] = d13;
 HEAPF32[i9 >> 2] = d17;
 HEAPF32[i8 >> 2] = d12;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d18;
 HEAPF32[i7 >> 2] = d16;
 HEAPF32[i10 >> 2] = d11;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = +HEAPF32[i5 >> 2] - d19;
 HEAPF32[i9 >> 2] = +HEAPF32[i9 >> 2] - d19;
 HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] - d19;
 HEAPF32[i1 >> 2] = d19 + +HEAPF32[i1 >> 2];
 HEAPF32[i7 >> 2] = d19 + +HEAPF32[i7 >> 2];
 HEAPF32[i10 >> 2] = d19 + +HEAPF32[i10 >> 2];
 STACKTOP = i4;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i7, i4, i3, i2) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 if ((i7 | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  i6 = i4 + 16 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  if ((i5 | 0) == 0) {
   HEAP32[i6 >> 2] = i3;
   HEAP32[i4 + 24 >> 2] = i2;
   HEAP32[i4 + 36 >> 2] = 1;
   STACKTOP = i1;
   return;
  }
  if ((i5 | 0) != (i3 | 0)) {
   i9 = i4 + 36 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   HEAP32[i4 + 24 >> 2] = 2;
   HEAP8[i4 + 54 | 0] = 1;
   STACKTOP = i1;
   return;
  }
  i3 = i4 + 24 | 0;
  if ((HEAP32[i3 >> 2] | 0) != 2) {
   STACKTOP = i1;
   return;
  }
  HEAP32[i3 >> 2] = i2;
  STACKTOP = i1;
  return;
 }
 i8 = HEAP32[i7 + 12 >> 2] | 0;
 i5 = i7 + (i8 << 3) + 16 | 0;
 i6 = HEAP32[i7 + 20 >> 2] | 0;
 i9 = i6 >> 8;
 if ((i6 & 1 | 0) != 0) {
  i9 = HEAP32[(HEAP32[i3 >> 2] | 0) + i9 >> 2] | 0;
 }
 i10 = HEAP32[i7 + 16 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, i4, i3 + i9 | 0, (i6 & 2 | 0) != 0 ? i2 : 2);
 if ((i8 | 0) <= 1) {
  STACKTOP = i1;
  return;
 }
 i6 = i4 + 54 | 0;
 i7 = i7 + 24 | 0;
 while (1) {
  i8 = HEAP32[i7 + 4 >> 2] | 0;
  i9 = i8 >> 8;
  if ((i8 & 1 | 0) != 0) {
   i9 = HEAP32[(HEAP32[i3 >> 2] | 0) + i9 >> 2] | 0;
  }
  i10 = HEAP32[i7 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, i4, i3 + i9 | 0, (i8 & 2 | 0) != 0 ? i2 : 2);
  if ((HEAP8[i6] | 0) != 0) {
   i2 = 16;
   break;
  }
  i7 = i7 + 8 | 0;
  if (!(i7 >>> 0 < i5 >>> 0)) {
   i2 = 16;
   break;
  }
 }
 if ((i2 | 0) == 16) {
  STACKTOP = i1;
  return;
 }
}
function __ZNK17btConvexHullShape9serializeEPvP12btSerializer(i5, i4, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 __ZNK16btCollisionShape9serializeEPvP12btSerializer(i5, i4, i1) | 0;
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i5 + 28 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i5 + 32 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i5 + 36 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i5 + 40 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i5 + 12 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i5 + 16 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i5 + 20 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i5 + 24 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i5 + 44 >> 2];
 i3 = HEAP32[i5 + 96 >> 2] | 0;
 HEAP32[i4 + 60 >> 2] = i3;
 if ((i3 | 0) == 0) {
  HEAP32[i4 + 52 >> 2] = 0;
  HEAP32[i4 + 56 >> 2] = 0;
  STACKTOP = i2;
  return 451408;
 }
 i5 = i5 + 104 | 0;
 HEAP32[i4 + 52 >> 2] = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i4 + 56 >> 2] = 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 16, i3) | 0;
 if ((i3 | 0) > 0) {
  i5 = HEAP32[i5 >> 2] | 0;
  i7 = 0;
  i6 = HEAP32[i4 + 8 >> 2] | 0;
  while (1) {
   HEAPF32[i6 >> 2] = +HEAPF32[i5 + (i7 << 4) >> 2];
   HEAPF32[i6 + 4 >> 2] = +HEAPF32[i5 + (i7 << 4) + 4 >> 2];
   HEAPF32[i6 + 8 >> 2] = +HEAPF32[i5 + (i7 << 4) + 8 >> 2];
   HEAPF32[i6 + 12 >> 2] = +HEAPF32[i5 + (i7 << 4) + 12 >> 2];
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == (i3 | 0)) {
    break;
   } else {
    i6 = i6 + 16 | 0;
   }
  }
 } else {
  i5 = HEAP32[i5 >> 2] | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i4, 451384, 1497453121, i5);
 STACKTOP = i2;
 return 451408;
}
function __ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBodyss(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 i6 = i1 + 204 | 0;
 if ((HEAP32[i6 >> 2] & 3 | 0) == 0 ? (HEAP32[i1 + 496 >> 2] & 1 | 0) == 0 : 0) {
  __ZN11btRigidBody10setGravityERK9btVector3(i1, i4 + 220 | 0);
 }
 if ((HEAP32[i1 + 192 >> 2] | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i6 >> 2] & 1 | 0) == 0) {
  i6 = i4 + 204 | 0;
  i12 = HEAP32[i6 >> 2] | 0;
  i8 = i4 + 208 | 0;
  if ((i12 | 0) == (HEAP32[i8 >> 2] | 0) ? (i7 = (i12 | 0) == 0 ? 1 : i12 << 1, (i12 | 0) < (i7 | 0)) : 0) {
   if ((i7 | 0) == 0) {
    i9 = 0;
   } else {
    i9 = __Z22btAlignedAllocInternalji(i7 << 2, 16) | 0;
    i12 = HEAP32[i6 >> 2] | 0;
   }
   i10 = i4 + 212 | 0;
   if ((i12 | 0) > 0) {
    i11 = 0;
    do {
     i13 = i9 + (i11 << 2) | 0;
     if ((i13 | 0) != 0) {
      HEAP32[i13 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + (i11 << 2) >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i12 | 0));
   }
   i13 = HEAP32[i10 >> 2] | 0;
   i11 = i4 + 216 | 0;
   if ((i13 | 0) != 0) {
    if ((HEAP8[i11] | 0) != 0) {
     __Z21btAlignedFreeInternalPv(i13);
     i12 = HEAP32[i6 >> 2] | 0;
    }
    HEAP32[i10 >> 2] = 0;
   }
   HEAP8[i11] = 1;
   HEAP32[i10 >> 2] = i9;
   HEAP32[i8 >> 2] = i7;
  }
  i7 = (HEAP32[i4 + 212 >> 2] | 0) + (i12 << 2) | 0;
  if ((i7 | 0) != 0) {
   HEAP32[i7 >> 2] = i1;
  }
  HEAP32[i6 >> 2] = i12 + 1;
 } else {
  __ZN17btCollisionObject18setActivationStateEi(i1, 2);
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 63](i4, i1, i2, i3);
 STACKTOP = i5;
 return;
}
function __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i1, d5, i4, i3, i2) {
 i1 = i1 | 0;
 d5 = +d5;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i6;
 __ZN17btCollisionObjectC2Ev(i1);
 HEAP32[i1 >> 2] = 445848;
 HEAP8[i1 + 492 | 0] = 1;
 HEAP32[i1 + 488 >> 2] = 0;
 HEAP32[i1 + 480 >> 2] = 0;
 HEAP32[i1 + 484 >> 2] = 0;
 HEAPF32[i7 >> 2] = d5;
 HEAP32[i7 + 4 >> 2] = i4;
 HEAP32[i7 + 72 >> 2] = i3;
 i4 = i7 + 76 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAPF32[i7 + 92 >> 2] = 0.0;
 HEAPF32[i7 + 96 >> 2] = 0.0;
 HEAPF32[i7 + 100 >> 2] = .5;
 HEAPF32[i7 + 104 >> 2] = 0.0;
 HEAPF32[i7 + 108 >> 2] = .800000011920929;
 HEAPF32[i7 + 112 >> 2] = 1.0;
 HEAP8[i7 + 116 | 0] = 0;
 HEAPF32[i7 + 120 >> 2] = .004999999888241291;
 HEAPF32[i7 + 124 >> 2] = .009999999776482582;
 HEAPF32[i7 + 128 >> 2] = .009999999776482582;
 HEAPF32[i7 + 132 >> 2] = .009999999776482582;
 HEAPF32[i7 + 8 >> 2] = 1.0;
 i4 = i7 + 12 | 0;
 i3 = i7 + 28 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAPF32[i3 >> 2] = 1.0;
 i3 = i7 + 32 | 0;
 i4 = i7 + 48 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i7 + 52 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 __ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE(i1, i7);
 STACKTOP = i6;
 return;
}
function __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i2 = i3;
 HEAP8[i1 + 88 | 0] = 1;
 if ((HEAP8[456112] | 0) == 0 ? (___cxa_guard_acquire(456112) | 0) != 0 : 0) {
  HEAPF32[114004] = 1.0;
  HEAP32[456020 >> 2] = 0;
  HEAP32[456024 >> 2] = 0;
  HEAP32[456028 >> 2] = 0;
  HEAP32[456032 >> 2] = 0;
  HEAPF32[456036 >> 2] = 1.0;
  HEAP32[456040 >> 2] = 0;
  HEAP32[456044 >> 2] = 0;
  HEAP32[456048 >> 2] = 0;
  HEAP32[456052 >> 2] = 0;
  HEAPF32[456056 >> 2] = 1.0;
  HEAPF32[456060 >> 2] = 0.0;
  HEAPF32[456064 >> 2] = -1.0;
  HEAP32[456068 >> 2] = 0;
  HEAP32[456072 >> 2] = 0;
  HEAP32[456076 >> 2] = 0;
  HEAP32[456080 >> 2] = 0;
  HEAPF32[456084 >> 2] = -1.0;
  HEAP32[456088 >> 2] = 0;
  HEAP32[456092 >> 2] = 0;
  HEAP32[456096 >> 2] = 0;
  HEAP32[456100 >> 2] = 0;
  HEAPF32[456104 >> 2] = -1.0;
  HEAPF32[456108 >> 2] = 0.0;
  ___cxa_guard_release(456112);
 }
 i6 = i2 + 20 | 0;
 i8 = i2 + 40 | 0;
 i5 = i2 + 48 | 0;
 i7 = i2 + 68 | 0;
 i9 = i2 + 88 | 0;
 i10 = i2 + 0 | 0;
 i4 = i10 + 96 | 0;
 do {
  HEAP32[i10 >> 2] = 0;
  i10 = i10 + 4 | 0;
 } while ((i10 | 0) < (i4 | 0));
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 63](i1, 456016, i2, 6);
 d11 = +HEAPF32[i1 + 44 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 >> 2] + d11;
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i5 >> 2] - d11;
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i6 >> 2] + d11;
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i7 >> 2] - d11;
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i8 >> 2] + d11;
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i9 >> 2] - d11;
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld28internalSingleStepSimulationEf(i1, d3) {
 i1 = i1 | 0;
 d3 = +d3;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(444904);
 i4 = HEAP32[i1 + 92 >> 2] | 0;
 if ((i4 | 0) != 0) {
  FUNCTION_TABLE_vid[i4 & 15](i1, d3);
 }
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i1 >> 2] | 0) + 136 >> 2] & 15](i1, d3);
 HEAPF32[i1 + 28 >> 2] = d3;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1);
 if ((HEAP8[i1 + 44 | 0] | 0) != 0) {
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i1 >> 2] | 0) + 144 >> 2] & 15](i1, d3);
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 148 >> 2] & 255](i1);
 HEAPF32[i1 + 112 >> 2] = d3;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 152 >> 2] & 127](i1, i1 + 100 | 0);
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i1 >> 2] | 0) + 140 >> 2] & 15](i1, d3);
 __ZN15CProfileManager13Start_ProfileEPKc(444936);
 i4 = i1 + 248 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i5 = i1 + 256 | 0;
  i6 = 0;
  do {
   i7 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
   FUNCTION_TABLE_viid[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 1](i7, i1, d3);
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 __ZN15CProfileManager12Stop_ProfileEv();
 __ZN23btDiscreteDynamicsWorld21updateActivationStateEf(i1, d3);
 i4 = HEAP32[i1 + 88 >> 2] | 0;
 if ((i4 | 0) == 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vid[i4 & 15](i1, d3);
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld27ClosestConvexResultCallback15addSingleResultERNS_17LocalConvexResultEb(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i2 = STACKTOP;
 i3 = i1 + 40 | 0;
 HEAPF32[i5 + 4 >> 2] = +HEAPF32[i3 >> 2];
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 76 >> 2] = i4;
 if (i6) {
  i6 = i5 + 44 | 0;
  i4 = i1 + 8 | 0;
  HEAP32[i6 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  i6 = i5 + 60 | 0;
  i5 = i1 + 24 | 0;
  HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  d7 = +HEAPF32[i3 >> 2];
  STACKTOP = i2;
  return +d7;
 } else {
  d11 = +HEAPF32[i1 + 8 >> 2];
  d10 = +HEAPF32[i1 + 12 >> 2];
  d9 = +HEAPF32[i1 + 16 >> 2];
  d8 = d11 * +HEAPF32[i4 + 20 >> 2] + d10 * +HEAPF32[i4 + 24 >> 2] + d9 * +HEAPF32[i4 + 28 >> 2];
  d7 = d11 * +HEAPF32[i4 + 36 >> 2] + d10 * +HEAPF32[i4 + 40 >> 2] + d9 * +HEAPF32[i4 + 44 >> 2];
  HEAPF32[i5 + 44 >> 2] = +HEAPF32[i4 + 4 >> 2] * d11 + +HEAPF32[i4 + 8 >> 2] * d10 + +HEAPF32[i4 + 12 >> 2] * d9;
  HEAPF32[i5 + 48 >> 2] = d8;
  HEAPF32[i5 + 52 >> 2] = d7;
  HEAPF32[i5 + 56 >> 2] = 0.0;
  i6 = i5 + 60 | 0;
  i5 = i1 + 24 | 0;
  HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  d7 = +HEAPF32[i3 >> 2];
  STACKTOP = i2;
  return +d7;
 }
 return 0.0;
}
function __ZN23btDiscreteDynamicsWorldD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 444672;
 if ((HEAP8[i1 + 240 | 0] | 0) != 0) {
  i6 = i1 + 176 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 255](i5);
  __Z21btAlignedFreeInternalPv(HEAP32[i6 >> 2] | 0);
 }
 if ((HEAP8[i1 + 241 | 0] | 0) != 0) {
  i6 = i1 + 172 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 255](i5);
  __Z21btAlignedFreeInternalPv(HEAP32[i6 >> 2] | 0);
 }
 i5 = i1 + 248 | 0;
 i4 = i1 + 256 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 260 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 252 >> 2] = 0;
 i4 = i1 + 204 | 0;
 i6 = i1 + 212 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i3 = i1 + 216 | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 208 >> 2] = 0;
 i4 = i1 + 184 | 0;
 i5 = i1 + 192 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 196 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 188 | 0;
  HEAP32[i6 >> 2] = 0;
  __ZN16btCollisionWorldD2Ev(i1);
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 188 | 0;
 HEAP32[i6 >> 2] = 0;
 __ZN16btCollisionWorldD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBody16addConstraintRefEP17btTypedConstraint(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 i2 = i1 + 480 | 0;
 i10 = HEAP32[i2 >> 2] | 0;
 L1 : do {
  if ((i10 | 0) > 0) {
   i7 = HEAP32[i1 + 488 >> 2] | 0;
   i8 = 0;
   while (1) {
    i6 = i8 + 1 | 0;
    if ((HEAP32[i7 + (i8 << 2) >> 2] | 0) == (i3 | 0)) {
     break;
    }
    if ((i6 | 0) < (i10 | 0)) {
     i8 = i6;
    } else {
     break L1;
    }
   }
   if ((i8 | 0) != (i10 | 0)) {
    i11 = i1 + 252 | 0;
    HEAP32[i11 >> 2] = 1;
    STACKTOP = i4;
    return;
   }
  }
 } while (0);
 i6 = i1 + 484 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i2 >> 2] | 0;
  }
  i8 = i1 + 488 | 0;
  if ((i10 | 0) > 0) {
   i9 = 0;
   do {
    i11 = i7 + (i9 << 2) | 0;
    if ((i11 | 0) != 0) {
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i9 << 2) >> 2];
    }
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i1 + 492 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i2 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i5 = (HEAP32[i1 + 488 >> 2] | 0) + (i10 << 2) | 0;
 if ((i5 | 0) != 0) {
  HEAP32[i5 >> 2] = i3;
 }
 HEAP32[i2 >> 2] = i10 + 1;
 i11 = i1 + 252 | 0;
 HEAP32[i11 >> 2] = 1;
 STACKTOP = i4;
 return;
}
function __ZN20btAxisSweep3InternalItE8aabbTestERK9btVector3S3_R24btBroadphaseAabbCallback(i7, i1, i2, i3) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i7 + 108 >> 2] | 0;
 if ((i5 | 0) != 0) {
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, i1, i2, i3);
  STACKTOP = i4;
  return;
 }
 i6 = i7 + 56 | 0;
 i13 = HEAP16[i6 >> 1] | 0;
 if (!((i13 & 65535) << 1 >>> 0 > 1)) {
  STACKTOP = i4;
  return;
 }
 i5 = i7 + 68 | 0;
 i7 = i7 + 60 | 0;
 i8 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 i9 = i2 + 4 | 0;
 i11 = i2 + 8 | 0;
 i15 = 1;
 i12 = 2;
 while (1) {
  i16 = HEAP32[i5 >> 2] | 0;
  if (!((HEAP16[i16 + (i15 << 2) >> 1] & 1) == 0)) {
   i14 = HEAP32[i7 >> 2] | 0;
   i15 = HEAPU16[i16 + (i15 << 2) + 2 >> 1] | 0;
   if (!(+HEAPF32[i1 >> 2] > +HEAPF32[i14 + (i15 << 6) + 32 >> 2]) ? !(+HEAPF32[i2 >> 2] < +HEAPF32[i14 + (i15 << 6) + 16 >> 2]) : 0) {
    i16 = 1;
   } else {
    i16 = 0;
   }
   if (!(!(+HEAPF32[i8 >> 2] > +HEAPF32[i14 + (i15 << 6) + 40 >> 2]) ? !(+HEAPF32[i11 >> 2] < +HEAPF32[i14 + (i15 << 6) + 24 >> 2]) : 0)) {
    i16 = 0;
   }
   if (!(+HEAPF32[i10 >> 2] > +HEAPF32[i14 + (i15 << 6) + 36 >> 2]) ? !(+HEAPF32[i9 >> 2] < +HEAPF32[i14 + (i15 << 6) + 20 >> 2] | i16 ^ 1) : 0) {
    FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i14 + (i15 << 6) | 0) | 0;
    i13 = HEAP16[i6 >> 1] | 0;
   }
  }
  i15 = i12 & 65535;
  if (!(i15 >>> 0 < ((i13 & 65535) << 1 | 1) >>> 0)) {
   break;
  }
  i12 = i12 + 1 << 16 >> 16;
 }
 STACKTOP = i4;
 return;
}
function __ZN23btDiscreteDynamicsWorld14stepSimulationEfif(i1, d6, i5, d3) {
 i1 = i1 | 0;
 d6 = +d6;
 i5 = i5 | 0;
 d3 = +d3;
 var i2 = 0, i4 = 0, i7 = 0;
 i2 = STACKTOP;
 __ZN15CProfileManager5ResetEv();
 __ZN15CProfileManager13Start_ProfileEPKc(444888);
 i4 = i1 + 236 | 0;
 if ((i5 | 0) != 0) {
  d6 = +HEAPF32[i4 >> 2] + d6;
  HEAPF32[i4 >> 2] = d6;
  if (!(d6 >= d3)) {
   i4 = 0;
  } else {
   i7 = ~~(d6 / d3);
   HEAPF32[i4 >> 2] = d6 - +(i7 | 0) * d3;
   i4 = i7;
  }
 } else {
  HEAPF32[i4 >> 2] = d6;
  i4 = !(+Math_abs(+d6) < 1.1920928955078125e-7) & 1;
  i5 = i4;
  d3 = d6;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0) != 0) {
  i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP8[445832] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 127](i7) | 0) >>> 4 & 1;
 }
 if ((i4 | 0) != 0) {
  i7 = (i4 | 0) > (i5 | 0) ? i5 : i4;
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i1 >> 2] | 0) + 160 >> 2] & 15](i1, d3 * +(i7 | 0));
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 164 >> 2] & 255](i1);
  if ((i7 | 0) > 0) {
   i5 = 0;
   do {
    FUNCTION_TABLE_vid[HEAP32[(HEAP32[i1 >> 2] | 0) + 156 >> 2] & 15](i1, d3);
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 76 >> 2] & 255](i1);
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i7 | 0));
  }
 } else {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 76 >> 2] & 255](i1);
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 116 >> 2] & 255](i1);
 __ZN15CProfileManager23Increment_Frame_CounterEv();
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return i4 | 0;
}
function __ZNK23btPolyhedralConvexShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i4, i1, i3, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6;
 i9 = (i5 | 0) > 0;
 if (i9) {
  i8 = 0;
 } else {
  STACKTOP = i6;
  return;
 }
 do {
  HEAPF32[i3 + (i8 << 4) + 12 >> 2] = -999999984306749400.0;
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != (i5 | 0));
 if (!i9) {
  STACKTOP = i6;
  return;
 }
 i9 = i2 + 4 | 0;
 i16 = i2 + 8 | 0;
 i11 = 0;
 do {
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] & 127](i4) | 0) > 0) {
   i14 = i1 + (i11 << 4) | 0;
   i15 = i1 + (i11 << 4) + 4 | 0;
   i8 = i1 + (i11 << 4) + 8 | 0;
   i13 = i3 + (i11 << 4) + 12 | 0;
   i12 = i3 + (i11 << 4) | 0;
   i10 = 0;
   do {
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] & 63](i4, i10, i2);
    d7 = +HEAPF32[i14 >> 2] * +HEAPF32[i2 >> 2] + +HEAPF32[i15 >> 2] * +HEAPF32[i9 >> 2] + +HEAPF32[i8 >> 2] * +HEAPF32[i16 >> 2];
    if (d7 > +HEAPF32[i13 >> 2]) {
     HEAP32[i12 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
     HEAP32[i12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i12 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i12 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAPF32[i13 >> 2] = d7;
    }
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] & 127](i4) | 0));
  }
  i11 = i11 + 1 | 0;
 } while ((i11 | 0) != (i5 | 0));
 STACKTOP = i6;
 return;
}
function __ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallback28internalProcessTriangleIndexEPS2_ii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0;
 i5 = STACKTOP;
 i9 = i2 + 16 | 0;
 d11 = +HEAPF32[i2 >> 2];
 d10 = +HEAPF32[i9 >> 2];
 i7 = i2 + 32 | 0;
 d8 = d11 < d10 ? d11 : d10;
 d6 = +HEAPF32[i7 >> 2];
 if ((d8 < d6 ? d8 : d6) > +HEAPF32[i1 + 24 >> 2]) {
  STACKTOP = i5;
  return;
 }
 i9 = d11 > d10 ? i2 : i9;
 if (+HEAPF32[(+HEAPF32[i9 >> 2] > d6 ? i9 : i7) >> 2] < +HEAPF32[i1 + 8 >> 2]) {
  STACKTOP = i5;
  return;
 }
 i9 = i2 + 8 | 0;
 i12 = i2 + 24 | 0;
 d8 = +HEAPF32[i9 >> 2];
 d10 = +HEAPF32[i12 >> 2];
 i7 = i2 + 40 | 0;
 d11 = d8 < d10 ? d8 : d10;
 d6 = +HEAPF32[i7 >> 2];
 if ((d11 < d6 ? d11 : d6) > +HEAPF32[i1 + 32 >> 2]) {
  STACKTOP = i5;
  return;
 }
 i9 = d8 > d10 ? i9 : i12;
 if (+HEAPF32[(+HEAPF32[i9 >> 2] > d6 ? i9 : i7) >> 2] < +HEAPF32[i1 + 16 >> 2]) {
  STACKTOP = i5;
  return;
 }
 i12 = i2 + 4 | 0;
 i9 = i2 + 20 | 0;
 d8 = +HEAPF32[i12 >> 2];
 d10 = +HEAPF32[i9 >> 2];
 i7 = i2 + 36 | 0;
 d11 = d8 < d10 ? d8 : d10;
 d6 = +HEAPF32[i7 >> 2];
 if ((d11 < d6 ? d11 : d6) > +HEAPF32[i1 + 28 >> 2]) {
  STACKTOP = i5;
  return;
 }
 i9 = d8 > d10 ? i12 : i9;
 if (+HEAPF32[(+HEAPF32[i9 >> 2] > d6 ? i9 : i7) >> 2] < +HEAPF32[i1 + 12 >> 2]) {
  STACKTOP = i5;
  return;
 }
 i12 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] & 63](i12, i2, i3, i4);
 STACKTOP = i5;
 return;
}
function __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i6, i7, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i5 + 32 | 0;
 i2 = i5 + 16 | 0;
 i4 = i5;
 d15 = +HEAPF32[i7 >> 2];
 d14 = +HEAPF32[i7 + 4 >> 2];
 d13 = +HEAPF32[i7 + 8 >> 2];
 d12 = 1.0 / +Math_sqrt(+(d15 * d15 + d14 * d14 + d13 * d13));
 HEAPF32[i1 >> 2] = d15 * d12;
 i7 = i1 + 4 | 0;
 HEAPF32[i7 >> 2] = d14 * d12;
 i9 = i1 + 8 | 0;
 HEAPF32[i9 >> 2] = d13 * d12;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 i11 = i6 + 120 | 0;
 i10 = HEAPU8[i11] | HEAPU8[i11 + 1 | 0] << 8 | HEAPU8[i11 + 2 | 0] << 16 | HEAPU8[i11 + 3 | 0] << 24;
 i11 = i11 + 4 | 0;
 i11 = HEAPU8[i11] | HEAPU8[i11 + 1 | 0] << 8 | HEAPU8[i11 + 2 | 0] << 16 | HEAPU8[i11 + 3 | 0] << 24;
 i8 = (HEAP32[i6 >> 2] | 0) + (i11 >> 1) | 0;
 if ((i11 & 1 | 0) != 0) {
  i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + i10 >> 2] | 0;
 }
 FUNCTION_TABLE_viii[i10 & 63](i3, i8, i1);
 d15 = -+HEAPF32[i7 >> 2];
 d14 = -+HEAPF32[i9 >> 2];
 HEAPF32[i4 >> 2] = -+HEAPF32[i1 >> 2];
 HEAPF32[i4 + 4 >> 2] = d15;
 HEAPF32[i4 + 8 >> 2] = d14;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 __ZNK12gjkepa2_impl13MinkowskiDiff8Support1ERK9btVector3(i2, i6, i4);
 d14 = +HEAPF32[i3 + 4 >> 2] - +HEAPF32[i2 + 4 >> 2];
 d15 = +HEAPF32[i3 + 8 >> 2] - +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i3 >> 2] - +HEAPF32[i2 >> 2];
 HEAPF32[i1 + 20 >> 2] = d14;
 HEAPF32[i1 + 24 >> 2] = d15;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, d3 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i1 + 336 >> 2];
 if (!(d3 != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d6 = +HEAPF32[i1 + 340 >> 2];
 i13 = i4 + 4 | 0;
 d10 = +HEAPF32[i1 + 344 >> 2];
 i12 = i4 + 8 | 0;
 d8 = +HEAPF32[i1 + 348 >> 2];
 d11 = d3 * +HEAPF32[i13 >> 2] * d10;
 d7 = d3 * +HEAPF32[i12 >> 2] * d8;
 i14 = i1 + 304 | 0;
 HEAPF32[i14 >> 2] = d3 * +HEAPF32[i4 >> 2] * d6 + +HEAPF32[i14 >> 2];
 i14 = i1 + 308 | 0;
 HEAPF32[i14 >> 2] = d11 + +HEAPF32[i14 >> 2];
 i14 = i1 + 312 | 0;
 HEAPF32[i14 >> 2] = d7 + +HEAPF32[i14 >> 2];
 d6 = +HEAPF32[i4 >> 2] * d6;
 d10 = +HEAPF32[i13 >> 2] * d10;
 d8 = +HEAPF32[i12 >> 2] * d8;
 d7 = +HEAPF32[i5 + 4 >> 2];
 d11 = +HEAPF32[i5 + 8 >> 2];
 d9 = d7 * d8 - d10 * d11;
 d3 = +HEAPF32[i5 >> 2];
 d8 = d6 * d11 - d8 * d3;
 d7 = d10 * d3 - d6 * d7;
 d6 = (d9 * +HEAPF32[i1 + 272 >> 2] + d8 * +HEAPF32[i1 + 276 >> 2] + d7 * +HEAPF32[i1 + 280 >> 2]) * +HEAPF32[i1 + 540 >> 2];
 d3 = (d9 * +HEAPF32[i1 + 288 >> 2] + d8 * +HEAPF32[i1 + 292 >> 2] + d7 * +HEAPF32[i1 + 296 >> 2]) * +HEAPF32[i1 + 544 >> 2];
 i5 = i1 + 320 | 0;
 HEAPF32[i5 >> 2] = (+HEAPF32[i1 + 256 >> 2] * d9 + +HEAPF32[i1 + 260 >> 2] * d8 + d7 * +HEAPF32[i1 + 264 >> 2]) * +HEAPF32[i1 + 536 >> 2] + +HEAPF32[i5 >> 2];
 i5 = i1 + 324 | 0;
 HEAPF32[i5 >> 2] = d6 + +HEAPF32[i5 >> 2];
 i5 = i1 + 328 | 0;
 HEAPF32[i5 >> 2] = d3 + +HEAPF32[i5 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN22SphereTriangleDetector15pointInTriangleEPK9btVector3RS1_PS0_(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0;
 i1 = STACKTOP;
 d22 = +HEAPF32[i4 + 16 >> 2];
 d27 = +HEAPF32[i4 >> 2];
 d7 = d22 - d27;
 d20 = +HEAPF32[i4 + 20 >> 2];
 d25 = +HEAPF32[i4 + 4 >> 2];
 d26 = d20 - d25;
 d23 = +HEAPF32[i4 + 24 >> 2];
 d28 = +HEAPF32[i4 + 8 >> 2];
 d24 = d23 - d28;
 d15 = +HEAPF32[i4 + 32 >> 2];
 d6 = d15 - d22;
 d11 = +HEAPF32[i4 + 36 >> 2];
 d21 = d11 - d20;
 d17 = +HEAPF32[i4 + 40 >> 2];
 d19 = d17 - d23;
 d8 = d27 - d15;
 d14 = d25 - d11;
 d10 = d28 - d17;
 d16 = +HEAPF32[i3 >> 2];
 d12 = +HEAPF32[i3 + 4 >> 2];
 d18 = +HEAPF32[i3 + 8 >> 2];
 d5 = +HEAPF32[i2 + 8 >> 2];
 d13 = +HEAPF32[i2 + 4 >> 2];
 d9 = +HEAPF32[i2 >> 2];
 d7 = (d18 - d28) * (d7 * d13 - d26 * d9) + ((d16 - d27) * (d26 * d5 - d24 * d13) + (d12 - d25) * (d24 * d9 - d7 * d5));
 d6 = (d18 - d23) * (d6 * d13 - d21 * d9) + ((d16 - d22) * (d21 * d5 - d19 * d13) + (d12 - d20) * (d19 * d9 - d6 * d5));
 d5 = (d18 - d17) * (d8 * d13 - d14 * d9) + ((d16 - d15) * (d14 * d5 - d10 * d13) + (d12 - d11) * (d10 * d9 - d8 * d5));
 if (d7 > 0.0 & d6 > 0.0 & d5 > 0.0) {
  STACKTOP = i1;
  return 1;
 } else {
  STACKTOP = i1;
  return (!(d7 <= 0.0) | !(d6 <= 0.0) | !(d5 <= 0.0)) ^ 1 | 0;
 }
 return 0;
}
function __ZN20btAxisSweep3InternalItE12updateHandleEtRK9btVector3S3_P12btDispatcher(i2, i7, i9, i8, i1) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 6 | 0;
 i6 = i4;
 i3 = HEAP32[i2 + 60 >> 2] | 0;
 i7 = i7 & 65535;
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i2, i5, i9, 0);
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i2, i6, i8, 1);
 i8 = 0;
 do {
  i11 = HEAP16[i3 + (i7 << 6) + (i8 << 1) + 48 >> 1] | 0;
  i9 = HEAP16[i3 + (i7 << 6) + (i8 << 1) + 54 >> 1] | 0;
  i16 = HEAP16[i5 + (i8 << 1) >> 1] | 0;
  i13 = HEAP32[i2 + (i8 << 2) + 68 >> 2] | 0;
  i15 = i13 + ((i11 & 65535) << 2) | 0;
  i12 = (i16 & 65535) - (HEAPU16[i15 >> 1] | 0) | 0;
  i14 = HEAP16[i6 + (i8 << 1) >> 1] | 0;
  i13 = i13 + ((i9 & 65535) << 2) | 0;
  i10 = (i14 & 65535) - (HEAPU16[i13 >> 1] | 0) | 0;
  HEAP16[i15 >> 1] = i16;
  HEAP16[i13 >> 1] = i14;
  if ((i12 | 0) < 0) {
   __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i2, i8, i11, 0, 1);
  }
  if ((i10 | 0) > 0) {
   __ZN20btAxisSweep3InternalItE9sortMaxUpEitP12btDispatcherb(i2, i8, i9, 0, 1);
  }
  if ((i12 | 0) > 0) {
   __ZN20btAxisSweep3InternalItE9sortMinUpEitP12btDispatcherb(i2, i8, i11, i1, 1);
  }
  if ((i10 | 0) < 0) {
   __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i2, i8, i9, i1, 1);
  }
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != 3);
 STACKTOP = i4;
 return;
}
function __ZNK17btConvexHullShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i9, i4, i2, i3) {
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d10 = 0.0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, d15 = 0.0, d16 = 0.0;
 i1 = STACKTOP;
 i12 = (i3 | 0) > 0;
 if (i12) {
  i5 = 0;
  do {
   HEAPF32[i2 + (i5 << 4) + 12 >> 2] = -999999984306749400.0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i3 | 0));
 }
 i6 = i9 + 96 | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 if ((i11 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i7 = i9 + 104 | 0;
 i5 = i9 + 12 | 0;
 i8 = i9 + 16 | 0;
 i9 = i9 + 20 | 0;
 if (i12) {
  i14 = 0;
 } else {
  i2 = 0;
  do {
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i11 | 0));
  STACKTOP = i1;
  return;
 }
 do {
  i11 = HEAP32[i7 >> 2] | 0;
  d16 = +HEAPF32[i11 + (i14 << 4) >> 2] * +HEAPF32[i5 >> 2];
  d15 = +HEAPF32[i11 + (i14 << 4) + 4 >> 2] * +HEAPF32[i8 >> 2];
  d13 = +HEAPF32[i11 + (i14 << 4) + 8 >> 2] * +HEAPF32[i9 >> 2];
  i11 = 0;
  do {
   d10 = d16 * +HEAPF32[i4 + (i11 << 4) >> 2] + d15 * +HEAPF32[i4 + (i11 << 4) + 4 >> 2] + d13 * +HEAPF32[i4 + (i11 << 4) + 8 >> 2];
   i12 = i2 + (i11 << 4) + 12 | 0;
   if (d10 > +HEAPF32[i12 >> 2]) {
    HEAPF32[i2 + (i11 << 4) >> 2] = d16;
    HEAPF32[i2 + (i11 << 4) + 4 >> 2] = d15;
    HEAPF32[i2 + (i11 << 4) + 8 >> 2] = d13;
    HEAPF32[i12 >> 2] = d10;
   }
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i3 | 0));
  i14 = i14 + 1 | 0;
 } while ((i14 | 0) < (HEAP32[i6 >> 2] | 0));
 STACKTOP = i1;
 return;
}
function __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i3, i2, i8, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
 i4 = STACKTOP;
 d7 = (+HEAPF32[i8 >> 2] - +HEAPF32[i3 + 8 >> 2]) * +HEAPF32[i3 + 40 >> 2];
 d6 = (+HEAPF32[i8 + 4 >> 2] - +HEAPF32[i3 + 12 >> 2]) * +HEAPF32[i3 + 44 >> 2];
 d5 = (+HEAPF32[i8 + 8 >> 2] - +HEAPF32[i3 + 16 >> 2]) * +HEAPF32[i3 + 48 >> 2];
 do {
  if (!(d7 <= 0.0)) {
   i8 = HEAP16[i3 + 6 >> 1] | 0;
   if (!(d7 >= +(i8 & 65535 | 0))) {
    i8 = HEAP16[i3 + 4 >> 1] & (~~d7 & 65535) & 65535 | i1;
    break;
   } else {
    i8 = HEAP16[i3 + 4 >> 1] & i8 & 65535 | i1;
    break;
   }
  } else {
   i8 = i1;
  }
 } while (0);
 HEAP16[i2 >> 1] = i8;
 do {
  if (!(d6 <= 0.0)) {
   i8 = HEAP16[i3 + 6 >> 1] | 0;
   if (!(d6 >= +(i8 & 65535 | 0))) {
    i8 = HEAP16[i3 + 4 >> 1] & (~~d6 & 65535) & 65535 | i1;
    break;
   } else {
    i8 = HEAP16[i3 + 4 >> 1] & i8 & 65535 | i1;
    break;
   }
  } else {
   i8 = i1;
  }
 } while (0);
 HEAP16[i2 + 2 >> 1] = i8;
 if (d5 <= 0.0) {
  i3 = i1;
  i3 = i3 & 65535;
  i8 = i2 + 4 | 0;
  HEAP16[i8 >> 1] = i3;
  STACKTOP = i4;
  return;
 }
 i8 = HEAP16[i3 + 6 >> 1] | 0;
 if (!(d5 >= +(i8 & 65535 | 0))) {
  i3 = HEAP16[i3 + 4 >> 1] & (~~d5 & 65535) & 65535 | i1;
  i3 = i3 & 65535;
  i8 = i2 + 4 | 0;
  HEAP16[i8 >> 1] = i3;
  STACKTOP = i4;
  return;
 } else {
  i3 = HEAP16[i3 + 4 >> 1] & i8 & 65535 | i1;
  i3 = i3 & 65535;
  i8 = i2 + 4 | 0;
  HEAP16[i8 >> 1] = i3;
  STACKTOP = i4;
  return;
 }
}
function __ZN28btHashedOverlappingPairCacheC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 HEAP32[i1 >> 2] = 455288;
 i2 = i1 + 20 | 0;
 HEAP8[i2] = 1;
 i4 = i1 + 16 | 0;
 HEAP32[i4 >> 2] = 0;
 i7 = i1 + 8 | 0;
 HEAP32[i7 >> 2] = 0;
 i5 = i1 + 12 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP8[i1 + 28 | 0] = 0;
 HEAP8[i1 + 48 | 0] = 1;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP8[i1 + 68 | 0] = 1;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 i3 = __Z22btAlignedAllocInternalji(32, 16) | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 if ((i7 | 0) > 0) {
  i8 = 0;
  do {
   i9 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 + (i8 << 4) >> 2] = HEAP32[i9 + (i8 << 4) >> 2];
   HEAP32[i3 + (i8 << 4) + 4 >> 2] = HEAP32[i9 + (i8 << 4) + 4 >> 2];
   HEAP32[i3 + (i8 << 4) + 8 >> 2] = HEAP32[i9 + (i8 << 4) + 8 >> 2];
   HEAP32[i3 + (i8 << 4) + 12 >> 2] = HEAP32[i9 + (i8 << 4) + 12 >> 2];
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i7 | 0));
 }
 i7 = HEAP32[i4 >> 2] | 0;
 if ((i7 | 0) == 0) {
  HEAP8[i2] = 1;
  HEAP32[i4 >> 2] = i3;
  HEAP32[i5 >> 2] = 2;
  __ZN28btHashedOverlappingPairCache10growTablesEv(i1);
  STACKTOP = i6;
  return;
 }
 if ((HEAP8[i2] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i7);
 }
 HEAP32[i4 >> 2] = 0;
 HEAP8[i2] = 1;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i5 >> 2] = 2;
 __ZN28btHashedOverlappingPairCache10growTablesEv(i1);
 STACKTOP = i6;
 return;
}
function __ZN23btDiscreteDynamicsWorld20serializeRigidBodiesEP12btSerializer(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 i4 = i3 + 8 | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 if ((i7 | 0) > 0) {
  i5 = i3 + 16 | 0;
  i6 = 0;
  do {
   i8 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
   if ((HEAP32[i8 + 232 >> 2] & 2 | 0) != 0) {
    i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] & 127](i8) | 0;
    i9 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, i9, 1) | 0;
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] & 31](i8, HEAP32[i9 + 8 >> 2] | 0, i2) | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i9, i7, 1497645650, i8);
    i7 = HEAP32[i4 >> 2] | 0;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (i7 | 0));
 }
 i4 = i3 + 184 | 0;
 if ((HEAP32[i4 >> 2] | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i3 = i3 + 192 | 0;
 i5 = 0;
 do {
  i9 = HEAP32[(HEAP32[i3 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
  i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, i7, 1) | 0;
  i8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] & 31](i9, HEAP32[i7 + 8 >> 2] | 0, i2) | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i7, i8, 1397641027, i9);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (HEAP32[i4 >> 2] | 0));
 STACKTOP = i1;
 return;
}
function __ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_PfRj(i10, i11, i2, i12) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i9 = STACKTOP;
 d16 = +HEAPF32[i10 >> 2];
 d5 = +HEAPF32[i11 >> 2] - d16;
 i3 = i11 + 4 | 0;
 i7 = i10 + 4 | 0;
 d15 = +HEAPF32[i7 >> 2];
 d6 = +HEAPF32[i3 >> 2] - d15;
 i4 = i11 + 8 | 0;
 i1 = i10 + 8 | 0;
 d14 = +HEAPF32[i1 >> 2];
 d8 = +HEAPF32[i4 >> 2] - d14;
 d13 = d5 * d5 + d6 * d6 + d8 * d8;
 if (!(d13 > 0.0)) {
  d16 = -1.0;
  STACKTOP = i9;
  return +d16;
 }
 d13 = -(d16 * d5 + d15 * d6 + d14 * d8) / d13;
 if (d13 >= 1.0) {
  HEAPF32[i2 >> 2] = 0.0;
  HEAPF32[i2 + 4 >> 2] = 1.0;
  HEAP32[i12 >> 2] = 2;
  d14 = +HEAPF32[i11 >> 2];
  d15 = +HEAPF32[i3 >> 2];
  d16 = +HEAPF32[i4 >> 2];
  d16 = d14 * d14 + d15 * d15 + d16 * d16;
  STACKTOP = i9;
  return +d16;
 }
 if (!(d13 <= 0.0)) {
  HEAPF32[i2 + 4 >> 2] = d13;
  HEAPF32[i2 >> 2] = 1.0 - d13;
  HEAP32[i12 >> 2] = 3;
  d14 = d5 * d13 + +HEAPF32[i10 >> 2];
  d15 = d6 * d13 + +HEAPF32[i7 >> 2];
  d16 = d8 * d13 + +HEAPF32[i1 >> 2];
  d16 = d14 * d14 + d15 * d15 + d16 * d16;
  STACKTOP = i9;
  return +d16;
 } else {
  HEAPF32[i2 >> 2] = 1.0;
  HEAPF32[i2 + 4 >> 2] = 0.0;
  HEAP32[i12 >> 2] = 1;
  d14 = +HEAPF32[i10 >> 2];
  d15 = +HEAPF32[i7 >> 2];
  d16 = +HEAPF32[i1 >> 2];
  d16 = d14 * d14 + d15 * d15 + d16 * d16;
  STACKTOP = i9;
  return +d16;
 }
 return 0.0;
}
function __ZN33btConvexConcaveCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i3, i6, i7, i4, i1) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0;
 i2 = STACKTOP;
 i8 = (HEAP8[i3 + 8 | 0] | 0) != 0;
 i5 = i8 ? i7 : i6;
 i7 = i8 ? i6 : i7;
 i6 = HEAP32[i7 + 192 >> 2] | 0;
 if (!(((HEAP32[i6 + 4 >> 2] | 0) + -21 | 0) >>> 0 < 9)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i5 + 192 >> 2] | 0) + 4 >> 2] | 0) >= 20) {
  STACKTOP = i2;
  return;
 }
 d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 7](i6);
 i9 = i3 + 12 | 0;
 i10 = i3 + 76 | 0;
 i8 = i1 + 4 | 0;
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 __ZN24btConvexTriangleCallback22setTimeStepAndCountersEfRK16btDispatcherInfoP16btManifoldResult(i9, d11, i4, i1);
 i4 = HEAP32[i10 >> 2] | 0;
 HEAP32[i4 + 1108 >> 2] = i5;
 HEAP32[i4 + 1112 >> 2] = i7;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] & 63](i6, i9, i3 + 24 | 0, i3 + 40 | 0);
 i3 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i3 + 1116 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 + 1108 >> 2] | 0) == (HEAP32[i1 + 136 >> 2] | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 8 | 0, i1 + 72 | 0);
  STACKTOP = i2;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i1 + 72 | 0, i1 + 8 | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 d21 = +HEAPF32[i1 + 544 >> 2];
 d20 = +HEAPF32[i1 + 560 >> 2];
 d19 = +HEAPF32[i1 + 576 >> 2];
 d18 = +HEAPF32[i3 >> 2];
 d17 = +HEAPF32[i3 + 4 >> 2];
 d16 = +HEAPF32[i3 + 8 >> 2];
 d14 = +HEAPF32[i3 + 16 >> 2];
 d13 = +HEAPF32[i3 + 20 >> 2];
 d12 = +HEAPF32[i3 + 24 >> 2];
 d10 = +HEAPF32[i3 + 32 >> 2];
 d8 = +HEAPF32[i3 + 36 >> 2];
 d6 = +HEAPF32[i3 + 40 >> 2];
 d9 = +HEAPF32[i1 + 548 >> 2];
 d7 = +HEAPF32[i1 + 564 >> 2];
 d5 = +HEAPF32[i1 + 580 >> 2];
 d23 = +HEAPF32[i1 + 612 >> 2];
 d22 = +HEAPF32[i1 + 628 >> 2];
 d4 = +HEAPF32[i1 + 644 >> 2];
 d15 = d23 * +HEAPF32[i2 >> 2] + d22 * +HEAPF32[i2 + 4 >> 2] + d4 * +HEAPF32[i2 + 8 >> 2];
 d11 = d23 * +HEAPF32[i2 + 16 >> 2] + d22 * +HEAPF32[i2 + 20 >> 2] + d4 * +HEAPF32[i2 + 24 >> 2];
 d4 = d23 * +HEAPF32[i2 + 32 >> 2] + d22 * +HEAPF32[i2 + 36 >> 2] + d4 * +HEAPF32[i2 + 40 >> 2];
 d4 = +Math_atan2(+((d21 * d18 + d20 * d17 + d19 * d16) * d15 + (d21 * d14 + d20 * d13 + d19 * d12) * d11 + (d21 * d10 + d20 * d8 + d19 * d6) * d4), +((d18 * d9 + d17 * d7 + d16 * d5) * d15 + (d14 * d9 + d13 * d7 + d12 * d5) * d11 + (d10 * d9 + d8 * d7 + d6 * d5) * d4));
 return +(d4 * +HEAPF32[i1 + 724 >> 2]);
}
function __ZN11btRigidBody19integrateVelocitiesEf(i9, d2) {
 i9 = i9 | 0;
 d2 = +d2;
 var i1 = 0, d3 = 0.0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d10 = 0.0;
 i1 = STACKTOP;
 if ((HEAP32[i9 + 204 >> 2] & 3 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 d3 = +HEAPF32[i9 + 336 >> 2] * d2;
 d7 = d3 * +HEAPF32[i9 + 408 >> 2];
 d10 = d3 * +HEAPF32[i9 + 412 >> 2];
 i4 = i9 + 304 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i9 + 404 >> 2] * d3 + +HEAPF32[i4 >> 2];
 i4 = i9 + 308 | 0;
 HEAPF32[i4 >> 2] = d7 + +HEAPF32[i4 >> 2];
 i4 = i9 + 312 | 0;
 HEAPF32[i4 >> 2] = d10 + +HEAPF32[i4 >> 2];
 d10 = +HEAPF32[i9 + 420 >> 2];
 d7 = +HEAPF32[i9 + 424 >> 2];
 d3 = +HEAPF32[i9 + 428 >> 2];
 d5 = (d10 * +HEAPF32[i9 + 272 >> 2] + d7 * +HEAPF32[i9 + 276 >> 2] + d3 * +HEAPF32[i9 + 280 >> 2]) * d2;
 d8 = (d10 * +HEAPF32[i9 + 288 >> 2] + d7 * +HEAPF32[i9 + 292 >> 2] + d3 * +HEAPF32[i9 + 296 >> 2]) * d2;
 i4 = i9 + 320 | 0;
 d3 = (+HEAPF32[i9 + 256 >> 2] * d10 + +HEAPF32[i9 + 260 >> 2] * d7 + +HEAPF32[i9 + 264 >> 2] * d3) * d2 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 >> 2] = d3;
 i6 = i9 + 324 | 0;
 d5 = d5 + +HEAPF32[i6 >> 2];
 HEAPF32[i6 >> 2] = d5;
 i9 = i9 + 328 | 0;
 d8 = d8 + +HEAPF32[i9 >> 2];
 HEAPF32[i9 >> 2] = d8;
 d7 = +Math_sqrt(+(d8 * d8 + (d3 * d3 + d5 * d5)));
 if (!(d7 * d2 > 1.5707963705062866)) {
  STACKTOP = i1;
  return;
 }
 d10 = 1.5707963705062866 / d2 / d7;
 HEAPF32[i4 >> 2] = d3 * d10;
 HEAPF32[i6 >> 2] = d10 * d5;
 HEAPF32[i9 >> 2] = d10 * d8;
 STACKTOP = i1;
 return;
}
function __ZNK23btPolyhedralConvexShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i4, i8) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 d5 = +HEAPF32[i8 >> 2];
 d6 = +HEAPF32[i8 + 4 >> 2];
 d7 = +HEAPF32[i8 + 8 >> 2];
 d11 = d5 * d5 + d6 * d6 + d7 * d7;
 if (d11 < 9999999747378752.0e-20) {
  d5 = 1.0;
  d6 = 0.0;
  d7 = 0.0;
 } else {
  d12 = 1.0 / +Math_sqrt(+d11);
  d5 = d5 * d12;
  d6 = d6 * d12;
  d7 = d7 * d12;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] & 127](i4) | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i10 = i2 + 4 | 0;
 i9 = i2 + 8 | 0;
 i8 = 0;
 d12 = -999999984306749400.0;
 while (1) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] & 63](i4, i8, i2);
  d11 = d5 * +HEAPF32[i2 >> 2] + d6 * +HEAPF32[i10 >> 2] + d7 * +HEAPF32[i9 >> 2];
  if (d11 > d12) {
   HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  } else {
   d11 = d12;
  }
  i8 = i8 + 1 | 0;
  if ((i8 | 0) >= (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] & 127](i4) | 0)) {
   break;
  } else {
   d12 = d11;
  }
 }
 STACKTOP = i3;
 return;
}
function __ZN9btHashMapI20btInternalVertexPair14btInternalEdgeED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i5 = i1 + 64 | 0;
 i4 = i1 + 72 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 76 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 i5 = i1 + 44 | 0;
 i4 = i1 + 52 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 56 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i5 = i1 + 24 | 0;
 i4 = i1 + 32 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 36 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i4 = i1 + 4 | 0;
 i5 = i1 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 16 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 8 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK23btPolyhedralConvexShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i10 = i4 + 32 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4;
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 HEAPF32[i10 >> 2] = 1.0;
 i11 = i10 + 4 | 0;
 i12 = i10 + 20 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAPF32[i12 >> 2] = 1.0;
 i12 = i10 + 24 | 0;
 i11 = i10 + 40 | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAPF32[i11 >> 2] = 1.0;
 i11 = i10 + 44 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i10, i8, i9);
 d6 = (d7 + (+HEAPF32[i9 >> 2] - +HEAPF32[i8 >> 2]) * .5) * 2.0;
 d5 = (d7 + (+HEAPF32[i9 + 4 >> 2] - +HEAPF32[i8 + 4 >> 2]) * .5) * 2.0;
 d7 = (d7 + (+HEAPF32[i9 + 8 >> 2] - +HEAPF32[i8 + 8 >> 2]) * .5) * 2.0;
 d6 = d6 * d6;
 d5 = d5 * d5;
 d7 = d7 * d7;
 d2 = d2 * .0833333283662796;
 HEAPF32[i1 >> 2] = d2 * (d5 + d7);
 HEAPF32[i1 + 4 >> 2] = d2 * (d6 + d7);
 HEAPF32[i1 + 8 >> 2] = d2 * (d6 + d5);
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i16 = i4 + 32 | 0;
 i14 = i4 + 16 | 0;
 i15 = i4;
 HEAPF32[i16 >> 2] = 1.0;
 i17 = i16 + 4 | 0;
 i18 = i16 + 20 | 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i17 + 12 >> 2] = 0;
 HEAPF32[i18 >> 2] = 1.0;
 i18 = i16 + 24 | 0;
 i17 = i16 + 40 | 0;
 HEAP32[i18 + 0 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i18 + 12 >> 2] = 0;
 HEAPF32[i17 >> 2] = 1.0;
 i17 = i16 + 44 | 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i17 + 12 >> 2] = 0;
 HEAP32[i17 + 16 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i16, i14, i15);
 d9 = +HEAPF32[i15 >> 2];
 d10 = +HEAPF32[i14 >> 2];
 d13 = d9 - d10;
 d7 = +HEAPF32[i15 + 4 >> 2];
 d8 = +HEAPF32[i14 + 4 >> 2];
 d12 = d7 - d8;
 d5 = +HEAPF32[i15 + 8 >> 2];
 d6 = +HEAPF32[i14 + 8 >> 2];
 d11 = d5 - d6;
 HEAPF32[i2 >> 2] = +Math_sqrt(+(d13 * d13 + d12 * d12 + d11 * d11)) * .5;
 HEAPF32[i1 >> 2] = (d10 + d9) * .5;
 HEAPF32[i1 + 4 >> 2] = (d8 + d7) * .5;
 HEAPF32[i1 + 8 >> 2] = (d6 + d5) * .5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN9btHashMapI9btHashPtrP16btCollisionShapeED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i5 = i1 + 64 | 0;
 i4 = i1 + 72 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 76 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 i5 = i1 + 44 | 0;
 i4 = i1 + 52 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 56 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i5 = i1 + 24 | 0;
 i4 = i1 + 32 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 36 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i4 = i1 + 4 | 0;
 i5 = i1 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 16 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 8 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN15CProfileManager13Start_ProfileEPKc(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 i5 = HEAP32[114964] | 0;
 if ((HEAP32[i5 >> 2] | 0) != (i4 | 0)) {
  i6 = i5 + 24 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  L3 : do {
   if ((i7 | 0) == 0) {
    i3 = 5;
   } else {
    while (1) {
     if ((HEAP32[i7 >> 2] | 0) == (i4 | 0)) {
      i5 = i7;
      break L3;
     }
     i7 = HEAP32[i7 + 28 >> 2] | 0;
     if ((i7 | 0) == 0) {
      i3 = 5;
      break;
     }
    }
   }
  } while (0);
  if ((i3 | 0) == 5) {
   i7 = __Znwj(32) | 0;
   HEAP32[i7 >> 2] = i4;
   i3 = i7 + 4 | 0;
   i4 = i7 + 20 | 0;
   HEAP32[i3 + 0 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i7 + 24 >> 2] = 0;
   i5 = i7 + 28 | 0;
   HEAP32[i5 >> 2] = 0;
   __ZN12CProfileNode5ResetEv(i7);
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i6 >> 2] = i7;
   i5 = i7;
  }
  HEAP32[114964] = i5;
 }
 i6 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 i6 = i5 + 16 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = i7 + 1;
 if ((i7 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 _gettimeofday(i1 | 0, 0) | 0;
 i7 = HEAP32[114952] | 0;
 HEAP32[i5 + 12 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i7 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) * 1e6 | 0);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld13addConstraintEP17btTypedConstraintb(i5, i2, i3) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 i4 = i5 + 184 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i8 = i5 + 188 | 0;
 if ((i10 | 0) == (HEAP32[i8 >> 2] | 0) ? (i6 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i6 << 2, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i9 = i5 + 192 | 0;
  if ((i10 | 0) > 0) {
   i12 = 0;
   do {
    i11 = i7 + (i12 << 2) | 0;
    if ((i11 | 0) != 0) {
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + (i12 << 2) >> 2];
    }
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i10 | 0));
  }
  i12 = HEAP32[i9 >> 2] | 0;
  i11 = i5 + 196 | 0;
  if ((i12 | 0) != 0) {
   if ((HEAP8[i11] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i12);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i9 >> 2] = 0;
  }
  HEAP8[i11] = 1;
  HEAP32[i9 >> 2] = i7;
  HEAP32[i8 >> 2] = i6;
 }
 i5 = (HEAP32[i5 + 192 >> 2] | 0) + (i10 << 2) | 0;
 if ((i5 | 0) != 0) {
  HEAP32[i5 >> 2] = i2;
 }
 HEAP32[i4 >> 2] = i10 + 1;
 if (!i3) {
  STACKTOP = i1;
  return;
 }
 __ZN11btRigidBody16addConstraintRefEP17btTypedConstraint(HEAP32[i2 + 24 >> 2] | 0, i2);
 __ZN11btRigidBody16addConstraintRefEP17btTypedConstraint(HEAP32[i2 + 28 >> 2] | 0, i2);
 STACKTOP = i1;
 return;
}
function __ZN21SupportVertexCallback15processTriangleEP9btVector3ii(i9, i1, i3, i2) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d10 = 0.0;
 i4 = STACKTOP;
 i2 = i9 + 84 | 0;
 i3 = i9 + 4 | 0;
 d5 = +HEAPF32[i9 + 88 >> 2];
 d6 = +HEAPF32[i9 + 92 >> 2];
 d7 = +HEAPF32[i9 + 96 >> 2];
 d10 = d5 * +HEAPF32[i1 >> 2] + d6 * +HEAPF32[i1 + 4 >> 2] + d7 * +HEAPF32[i1 + 8 >> 2];
 d8 = +HEAPF32[i2 >> 2];
 if (d10 > d8) {
  HEAPF32[i2 >> 2] = d10;
  HEAP32[i3 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 } else {
  d10 = d8;
 }
 i9 = i1 + 16 | 0;
 d8 = d5 * +HEAPF32[i9 >> 2] + d6 * +HEAPF32[i1 + 20 >> 2] + d7 * +HEAPF32[i1 + 24 >> 2];
 if (d8 > d10) {
  HEAPF32[i2 >> 2] = d8;
  HEAP32[i3 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 } else {
  d8 = d10;
 }
 i9 = i1 + 32 | 0;
 d5 = d5 * +HEAPF32[i9 >> 2] + d6 * +HEAPF32[i1 + 36 >> 2] + d7 * +HEAPF32[i1 + 40 >> 2];
 if (!(d5 > d8)) {
  STACKTOP = i4;
  return;
 }
 HEAPF32[i2 >> 2] = d5;
 HEAP32[i3 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN20btConvexHullInternal14getCoordinatesEPKNS_6VertexE(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 if ((HEAP32[i5 + 100 >> 2] | 0) > -1) {
  HEAPF32[i3 + (HEAP32[i1 + 108 >> 2] << 2) >> 2] = +(HEAP32[i5 + 88 >> 2] | 0);
  HEAPF32[i3 + (HEAP32[i1 + 112 >> 2] << 2) >> 2] = +(HEAP32[i5 + 92 >> 2] | 0);
  d6 = +(HEAP32[i5 + 96 >> 2] | 0);
  i5 = i3;
 } else {
  d6 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i5 + 24 | 0);
  d6 = d6 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i5 + 72 | 0);
  HEAPF32[i3 + (HEAP32[i1 + 108 >> 2] << 2) >> 2] = d6;
  d6 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i5 + 40 | 0);
  d6 = d6 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i5 + 72 | 0);
  HEAPF32[i3 + (HEAP32[i1 + 112 >> 2] << 2) >> 2] = d6;
  d6 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i5 + 56 | 0);
  d6 = d6 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i5 + 72 | 0);
  i5 = i3;
 }
 HEAPF32[i3 + (HEAP32[i1 + 104 >> 2] << 2) >> 2] = d6;
 d7 = +HEAPF32[i3 + 4 >> 2] * +HEAPF32[i1 + 4 >> 2] + +HEAPF32[i1 + 20 >> 2];
 d6 = +HEAPF32[i3 + 8 >> 2] * +HEAPF32[i1 + 8 >> 2] + +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i4 >> 2] = +HEAPF32[i5 >> 2] * +HEAPF32[i1 >> 2] + +HEAPF32[i1 + 16 >> 2];
 HEAPF32[i4 + 4 >> 2] = d7;
 HEAPF32[i4 + 8 >> 2] = d6;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN20btAlignedObjectArrayIiEC2ERKS0_(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 i7 = i2 + 16 | 0;
 HEAP8[i7] = 1;
 i8 = i2 + 12 | 0;
 HEAP32[i8 >> 2] = 0;
 i5 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 i9 = i2 + 8 | 0;
 HEAP32[i9 >> 2] = 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i6 = (i3 | 0) > 0;
 if (!i6) {
  HEAP32[i5 >> 2] = i3;
  STACKTOP = i1;
  return;
 }
 i2 = __Z22btAlignedAllocInternalji(i3 << 2, 16) | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 if ((i11 | 0) > 0) {
  i12 = 0;
  do {
   i10 = i2 + (i12 << 2) | 0;
   if ((i10 | 0) != 0) {
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i12 << 2) >> 2];
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i11 | 0));
 }
 i10 = HEAP32[i8 >> 2] | 0;
 if ((i10 | 0) != 0) {
  if ((HEAP8[i7] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i10);
  }
  HEAP32[i8 >> 2] = 0;
 }
 HEAP8[i7] = 1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 i7 = 0;
 do {
  i8 = i2 + (i7 << 2) | 0;
  if ((i8 | 0) != 0) {
   HEAP32[i8 >> 2] = 0;
  }
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i3 | 0));
 HEAP32[i5 >> 2] = i3;
 if (!i6) {
  STACKTOP = i1;
  return;
 }
 i4 = i4 + 12 | 0;
 i5 = 0;
 do {
  i6 = i2 + (i5 << 2) | 0;
  if ((i6 | 0) != 0) {
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + (i5 << 2) >> 2];
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i3 | 0));
 STACKTOP = i1;
 return;
}
function __ZNK15btTriangleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i2, i4, i5, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, d21 = 0.0, d22 = 0.0;
 i11 = STACKTOP;
 if ((i3 | 0) <= 0) {
  STACKTOP = i11;
  return;
 }
 i6 = i2 + 56 | 0;
 i7 = i2 + 60 | 0;
 i8 = i2 + 64 | 0;
 i9 = i2 + 72 | 0;
 i10 = i2 + 76 | 0;
 i1 = i2 + 80 | 0;
 i12 = i2 + 88 | 0;
 i13 = i2 + 92 | 0;
 i14 = i2 + 96 | 0;
 i15 = 0;
 do {
  d22 = +HEAPF32[i4 + (i15 << 4) >> 2];
  d21 = +HEAPF32[i4 + (i15 << 4) + 4 >> 2];
  d17 = +HEAPF32[i4 + (i15 << 4) + 8 >> 2];
  d19 = d22 * +HEAPF32[i6 >> 2] + d21 * +HEAPF32[i7 >> 2] + d17 * +HEAPF32[i8 >> 2];
  d18 = d22 * +HEAPF32[i9 >> 2] + d21 * +HEAPF32[i10 >> 2] + d17 * +HEAPF32[i1 >> 2];
  d17 = d22 * +HEAPF32[i12 >> 2] + d21 * +HEAPF32[i13 >> 2] + d17 * +HEAPF32[i14 >> 2];
  i16 = i5 + (i15 << 4) | 0;
  if (d19 < d18) {
   i20 = d18 < d17 ? 2 : 1;
  } else {
   i20 = d19 < d17 ? 2 : 0;
  }
  i20 = i2 + (i20 << 4) + 56 | 0;
  HEAP32[i16 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
  i15 = i15 + 1 | 0;
 } while ((i15 | 0) != (i3 | 0));
 STACKTOP = i11;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i4 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i4 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i3 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 8 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i8 = i3 + 12 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i9 = i7 + (i11 << 2) | 0;
    if ((i9 | 0) != 0) {
     HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i3 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i3 = (HEAP32[i3 + 12 >> 2] | 0) + (i10 << 2) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 }
 HEAP32[i4 >> 2] = i10 + 1;
 STACKTOP = i2;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i4 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i4 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i3 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 8 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i8 = i3 + 12 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i9 = i7 + (i11 << 2) | 0;
    if ((i9 | 0) != 0) {
     HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i3 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i3 = (HEAP32[i3 + 12 >> 2] | 0) + (i10 << 2) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 }
 HEAP32[i4 >> 2] = i10 + 1;
 STACKTOP = i2;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i4 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i4 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i3 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 8 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i8 = i3 + 12 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i9 = i7 + (i11 << 2) | 0;
    if ((i9 | 0) != 0) {
     HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i3 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i3 = (HEAP32[i3 + 12 >> 2] | 0) + (i10 << 2) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 }
 HEAP32[i4 >> 2] = i10 + 1;
 STACKTOP = i2;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i4 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i4 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i3 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 8 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i8 = i3 + 12 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i9 = i7 + (i11 << 2) | 0;
    if ((i9 | 0) != 0) {
     HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i3 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i3 = (HEAP32[i3 + 12 >> 2] | 0) + (i10 << 2) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 }
 HEAP32[i4 >> 2] = i10 + 1;
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld24ClosestRayResultCallback15addSingleResultERNS_14LocalRayResultEb(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i2 = i4 + 24 | 0;
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[i2 >> 2];
 i3 = HEAP32[i4 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 if (i5) {
  i5 = i1 + 52 | 0;
  i4 = i4 + 8 | 0;
  HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 } else {
  d10 = +HEAPF32[i4 + 8 >> 2];
  d9 = +HEAPF32[i4 + 12 >> 2];
  d8 = +HEAPF32[i4 + 16 >> 2];
  d7 = d10 * +HEAPF32[i3 + 20 >> 2] + d9 * +HEAPF32[i3 + 24 >> 2] + d8 * +HEAPF32[i3 + 28 >> 2];
  d6 = d10 * +HEAPF32[i3 + 36 >> 2] + d9 * +HEAPF32[i3 + 40 >> 2] + d8 * +HEAPF32[i3 + 44 >> 2];
  HEAPF32[i1 + 52 >> 2] = +HEAPF32[i3 + 4 >> 2] * d10 + +HEAPF32[i3 + 8 >> 2] * d9 + +HEAPF32[i3 + 12 >> 2] * d8;
  HEAPF32[i1 + 56 >> 2] = d7;
  HEAPF32[i1 + 60 >> 2] = d6;
  HEAPF32[i1 + 64 >> 2] = 0.0;
 }
 d10 = +HEAPF32[i2 >> 2];
 d9 = 1.0 - d10;
 HEAPF32[i1 + 68 >> 2] = d9 * +HEAPF32[i1 + 20 >> 2] + d10 * +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i1 + 72 >> 2] = d9 * +HEAPF32[i1 + 24 >> 2] + d10 * +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i1 + 76 >> 2] = d9 * +HEAPF32[i1 + 28 >> 2] + d10 * +HEAPF32[i1 + 44 >> 2];
 return +(+HEAPF32[i2 >> 2]);
}
function __ZN23btConvexConvexAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i4 + 20 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i4 + 16 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i3 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 8 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i8 = i3 + 12 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i9 = i7 + (i11 << 2) | 0;
    if ((i9 | 0) != 0) {
     HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i3 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i3 = (HEAP32[i3 + 12 >> 2] | 0) + (i10 << 2) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 }
 HEAP32[i4 >> 2] = i10 + 1;
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0;
 i5 = STACKTOP;
 d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d16 = d12 + +HEAPF32[i4 + 28 >> 2];
 d14 = d12 + +HEAPF32[i4 + 32 >> 2];
 d12 = d12 + +HEAPF32[i4 + 36 >> 2];
 d20 = +Math_abs(+(+HEAPF32[i3 >> 2]));
 d19 = +Math_abs(+(+HEAPF32[i3 + 4 >> 2]));
 d11 = +Math_abs(+(+HEAPF32[i3 + 8 >> 2]));
 d18 = +Math_abs(+(+HEAPF32[i3 + 16 >> 2]));
 d17 = +Math_abs(+(+HEAPF32[i3 + 20 >> 2]));
 d9 = +Math_abs(+(+HEAPF32[i3 + 24 >> 2]));
 d15 = +Math_abs(+(+HEAPF32[i3 + 32 >> 2]));
 d13 = +Math_abs(+(+HEAPF32[i3 + 36 >> 2]));
 d7 = +Math_abs(+(+HEAPF32[i3 + 40 >> 2]));
 d10 = +HEAPF32[i3 + 48 >> 2];
 d8 = +HEAPF32[i3 + 52 >> 2];
 d6 = +HEAPF32[i3 + 56 >> 2];
 d11 = d16 * d20 + d14 * d19 + d12 * d11;
 d9 = d16 * d18 + d14 * d17 + d12 * d9;
 d7 = d16 * d15 + d14 * d13 + d12 * d7;
 HEAPF32[i2 >> 2] = d10 - d11;
 HEAPF32[i2 + 4 >> 2] = d8 - d9;
 HEAPF32[i2 + 8 >> 2] = d6 - d7;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d11 + d10;
 HEAPF32[i1 + 4 >> 2] = d9 + d8;
 HEAPF32[i1 + 8 >> 2] = d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN17btCollisionObjectC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 448552;
 HEAPF32[i1 + 164 >> 2] = 1.0;
 HEAPF32[i1 + 168 >> 2] = 1.0;
 HEAPF32[i1 + 172 >> 2] = 1.0;
 HEAPF32[i1 + 176 >> 2] = 0.0;
 HEAP32[i1 + 180 >> 2] = 0;
 HEAPF32[i1 + 184 >> 2] = 999999984306749400.0;
 i4 = i1 + 188 | 0;
 i3 = i1 + 204 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i3 >> 2] = 1;
 HEAP32[i1 + 208 >> 2] = -1;
 HEAP32[i1 + 212 >> 2] = -1;
 HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 HEAPF32[i1 + 224 >> 2] = .5;
 HEAPF32[i1 + 228 >> 2] = 0.0;
 HEAP32[i1 + 232 >> 2] = 1;
 HEAP32[i1 + 236 >> 2] = 0;
 HEAPF32[i1 + 240 >> 2] = 1.0;
 HEAPF32[i1 + 244 >> 2] = 0.0;
 HEAPF32[i1 + 248 >> 2] = 0.0;
 HEAP32[i1 + 252 >> 2] = 0;
 HEAPF32[i1 + 4 >> 2] = 1.0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 24 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i1 + 28 | 0;
 i3 = i1 + 44 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAPF32[i3 >> 2] = 1.0;
 i1 = i1 + 48 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN11btUnionFind8allocateEi(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = STACKTOP;
 i2 = i8 + 4 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) >= (i1 | 0)) {
  HEAP32[i2 >> 2] = i1;
  STACKTOP = i3;
  return;
 }
 i6 = i8 + 8 | 0;
 if ((HEAP32[i6 >> 2] | 0) < (i1 | 0)) {
  if ((i1 | 0) == 0) {
   i7 = 0;
   i9 = i4;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i1 << 3, 16) | 0;
   i9 = HEAP32[i2 >> 2] | 0;
  }
  i5 = i8 + 12 | 0;
  if ((i9 | 0) > 0) {
   i10 = 0;
   do {
    i11 = i7 + (i10 << 3) | 0;
    if ((i11 | 0) != 0) {
     i13 = (HEAP32[i5 >> 2] | 0) + (i10 << 3) | 0;
     i12 = HEAP32[i13 + 4 >> 2] | 0;
     HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i11 + 4 >> 2] = i12;
    }
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i9 | 0));
  }
  i9 = HEAP32[i5 >> 2] | 0;
  i8 = i8 + 16 | 0;
  if ((i9 | 0) != 0) {
   if ((HEAP8[i8] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i9);
   }
   HEAP32[i5 >> 2] = 0;
  }
  HEAP8[i8] = 1;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i6 >> 2] = i1;
 } else {
  i5 = i8 + 12 | 0;
 }
 do {
  i6 = (HEAP32[i5 >> 2] | 0) + (i4 << 3) | 0;
  if ((i6 | 0) != 0) {
   i13 = i6;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i1 | 0));
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i3;
 return;
}
function __ZN20btAlignedObjectArrayI6btFaceE7reserveEi(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i1 = i6 + 8 | 0;
 if ((HEAP32[i1 >> 2] | 0) >= (i2 | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((i2 | 0) == 0) {
  i3 = 0;
 } else {
  i3 = __Z22btAlignedAllocInternalji(i2 * 56 | 0, 16) | 0;
 }
 i10 = i6 + 4 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i4 = i6 + 12 | 0;
 if ((i8 | 0) > 0) {
  i9 = 0;
  do {
   i7 = i3 + (i9 * 56 | 0) | 0;
   if ((i7 | 0) != 0) {
    i11 = HEAP32[i4 >> 2] | 0;
    __ZN20btAlignedObjectArrayIiEC2ERKS0_(i7, i11 + (i9 * 56 | 0) | 0);
    __ZN20btAlignedObjectArrayIiEC2ERKS0_(i7 + 20 | 0, i11 + (i9 * 56 | 0) + 20 | 0);
    i7 = i7 + 40 | 0;
    i11 = i11 + (i9 * 56 | 0) + 40 | 0;
    HEAP32[i7 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i8 | 0));
  i8 = HEAP32[i10 >> 2] | 0;
 }
 __ZN20btAlignedObjectArrayI6btFaceE7destroyEii(i6, 0, i8);
 i7 = HEAP32[i4 >> 2] | 0;
 i6 = i6 + 16 | 0;
 if ((i7 | 0) != 0) {
  if ((HEAP8[i6] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i7);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i6] = 1;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 STACKTOP = i5;
 return;
}
function __ZN20btConvexHullInternal4PoolINS_6VertexEE9newObjectEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i2 = i4 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == 0) {
  i5 = i4 + 4 | 0;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == 0) {
   i3 = __Z22btAlignedAllocInternalji(12, 16) | 0;
   if ((i3 | 0) == 0) {
    i3 = 0;
   } else {
    i7 = HEAP32[i4 + 12 >> 2] | 0;
    HEAP32[i3 + 4 >> 2] = i7;
    HEAP32[i3 + 8 >> 2] = 0;
    HEAP32[i3 >> 2] = __Z22btAlignedAllocInternalji(i7 * 112 | 0, 16) | 0;
   }
   HEAP32[i3 + 8 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i4 >> 2] = i3;
  } else {
   HEAP32[i5 >> 2] = HEAP32[i3 + 8 >> 2];
  }
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  if ((i5 | 0) > 0) {
   i7 = 0;
   i4 = HEAP32[i3 >> 2] | 0;
   while (1) {
    i7 = i7 + 1 | 0;
    i6 = i4 + 112 | 0;
    HEAP32[i4 >> 2] = (i7 | 0) < (i5 | 0) ? i6 : 0;
    if ((i7 | 0) == (i5 | 0)) {
     break;
    } else {
     i4 = i6;
    }
   }
  }
  i3 = HEAP32[i3 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  if ((i3 | 0) == 0) {
   i7 = 0;
   STACKTOP = i1;
   return i7 | 0;
  }
 } else {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 }
 i7 = i3 + 104 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i7 >> 2] = -1;
 i7 = i3;
 STACKTOP = i1;
 return i7 | 0;
}
function __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i2 = i4 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == 0) {
  i5 = i4 + 4 | 0;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == 0) {
   i3 = __Z22btAlignedAllocInternalji(12, 16) | 0;
   if ((i3 | 0) == 0) {
    i3 = 0;
   } else {
    i7 = HEAP32[i4 + 12 >> 2] | 0;
    HEAP32[i3 + 4 >> 2] = i7;
    HEAP32[i3 + 8 >> 2] = 0;
    HEAP32[i3 >> 2] = __Z22btAlignedAllocInternalji(i7 * 24 | 0, 16) | 0;
   }
   HEAP32[i3 + 8 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i4 >> 2] = i3;
  } else {
   HEAP32[i5 >> 2] = HEAP32[i3 + 8 >> 2];
  }
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  if ((i5 | 0) > 0) {
   i7 = 0;
   i4 = HEAP32[i3 >> 2] | 0;
   while (1) {
    i7 = i7 + 1 | 0;
    i6 = i4 + 24 | 0;
    HEAP32[i4 >> 2] = (i7 | 0) < (i5 | 0) ? i6 : 0;
    if ((i7 | 0) == (i5 | 0)) {
     break;
    } else {
     i4 = i6;
    }
   }
  }
  i3 = HEAP32[i3 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  if ((i3 | 0) == 0) {
   i7 = 0;
   STACKTOP = i1;
   return i7 | 0;
  }
 } else {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 }
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 i7 = i3;
 STACKTOP = i1;
 return i7 | 0;
}
function __ZN16btCollisionWorldD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 HEAP32[i1 >> 2] = 448712;
 i4 = i1 + 8 | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i2 = i1 + 16 | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 if ((i7 | 0) > 0) {
  i6 = i1 + 76 | 0;
  i5 = i1 + 24 | 0;
  i9 = 0;
  do {
   i10 = (HEAP32[i8 + (i9 << 2) >> 2] | 0) + 188 | 0;
   i11 = HEAP32[i10 >> 2] | 0;
   if ((i11 | 0) != 0) {
    i7 = HEAP32[i6 >> 2] | 0;
    i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 63](i7, i11, HEAP32[i5 >> 2] | 0);
    i7 = HEAP32[i6 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 63](i7, i11, HEAP32[i5 >> 2] | 0);
    HEAP32[i10 >> 2] = 0;
    i7 = HEAP32[i4 >> 2] | 0;
    i8 = HEAP32[i2 >> 2] | 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i7 | 0));
 }
 i5 = i1 + 20 | 0;
 if ((i8 | 0) == 0) {
  HEAP8[i5] = 1;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i11 = i1 + 12 | 0;
  HEAP32[i11 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i5] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i8);
 }
 HEAP32[i2 >> 2] = 0;
 HEAP8[i5] = 1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i11 = i1 + 12 | 0;
 HEAP32[i11 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZN20btAlignedObjectArrayI16btBroadphasePairE21expandNonInitializingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i4 = i1 + 4 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i5 = i1 + 8 | 0;
 if ((i3 | 0) == (HEAP32[i5 >> 2] | 0) ? (i6 = (i3 | 0) == 0 ? 1 : i3 << 1, (i3 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) {
   i8 = 0;
   i10 = i3;
  } else {
   i8 = __Z22btAlignedAllocInternalji(i6 << 4, 16) | 0;
   i10 = HEAP32[i4 >> 2] | 0;
  }
  i7 = i1 + 12 | 0;
  if ((i10 | 0) > 0) {
   i9 = 0;
   do {
    i11 = HEAP32[i7 >> 2] | 0;
    HEAP32[i8 + (i9 << 4) >> 2] = HEAP32[i11 + (i9 << 4) >> 2];
    HEAP32[i8 + (i9 << 4) + 4 >> 2] = HEAP32[i11 + (i9 << 4) + 4 >> 2];
    HEAP32[i8 + (i9 << 4) + 8 >> 2] = HEAP32[i11 + (i9 << 4) + 8 >> 2];
    HEAP32[i8 + (i9 << 4) + 12 >> 2] = HEAP32[i11 + (i9 << 4) + 12 >> 2];
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i7 >> 2] | 0;
  i9 = i1 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i4 >> 2] | 0;
   }
   HEAP32[i7 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i7 >> 2] = i8;
  HEAP32[i5 >> 2] = i6;
 } else {
  i10 = i3;
 }
 HEAP32[i4 >> 2] = i10 + 1;
 STACKTOP = i2;
 return (HEAP32[i1 + 12 >> 2] | 0) + (i3 << 4) | 0;
}
function __ZN33btConvexConcaveCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 i4 = i3 + 76 | 0;
 if ((HEAP32[i4 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = i2 + 4 | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i6 = i2 + 8 | 0;
 if ((i10 | 0) == (HEAP32[i6 >> 2] | 0) ? (i5 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i5 << 2, 16) | 0;
   i10 = HEAP32[i3 >> 2] | 0;
  }
  i8 = i2 + 12 | 0;
  if ((i10 | 0) > 0) {
   i11 = 0;
   do {
    i9 = i7 + (i11 << 2) | 0;
    if ((i9 | 0) != 0) {
     HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i11 << 2) >> 2];
    }
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i9 = i2 + 16 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i10 = HEAP32[i3 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
 }
 i2 = (HEAP32[i2 + 12 >> 2] | 0) + (i10 << 2) | 0;
 if ((i2 | 0) != 0) {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 }
 HEAP32[i3 >> 2] = i10 + 1;
 STACKTOP = i1;
 return;
}
function __ZNK10btBoxShape16getPlaneEquationER9btVector4i(i7, i1, i5) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i7 + 28 >> 2];
 d4 = +HEAPF32[i7 + 32 >> 2];
 d6 = +HEAPF32[i7 + 36 >> 2];
 switch (i5 | 0) {
 case 1:
  {
   HEAPF32[i1 >> 2] = -1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d3;
   STACKTOP = i2;
   return;
  }
 case 2:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d4;
   STACKTOP = i2;
   return;
  }
 case 3:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = -1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d4;
   STACKTOP = i2;
   return;
  }
 case 0:
  {
   HEAPF32[i1 >> 2] = 1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d3;
   STACKTOP = i2;
   return;
  }
 case 5:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = -1.0;
   HEAPF32[i1 + 12 >> 2] = -d6;
   STACKTOP = i2;
   return;
  }
 case 4:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 1.0;
   HEAPF32[i1 + 12 >> 2] = -d6;
   STACKTOP = i2;
   return;
  }
 default:
  {
   STACKTOP = i2;
   return;
  }
 }
}
function __ZN20btConvexHullInternal4PoolINS_4FaceEE9newObjectEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i2 = i3 + 8 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) == 0) {
  i4 = i3 + 4 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == 0) {
   i5 = __Z22btAlignedAllocInternalji(12, 16) | 0;
   if ((i5 | 0) == 0) {
    i5 = 0;
   } else {
    i7 = HEAP32[i3 + 12 >> 2] | 0;
    HEAP32[i5 + 4 >> 2] = i7;
    HEAP32[i5 + 8 >> 2] = 0;
    HEAP32[i5 >> 2] = __Z22btAlignedAllocInternalji(i7 * 60 | 0, 16) | 0;
   }
   HEAP32[i5 + 8 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i3 >> 2] = i5;
  } else {
   HEAP32[i4 >> 2] = HEAP32[i5 + 8 >> 2];
  }
  i4 = HEAP32[i5 + 4 >> 2] | 0;
  if ((i4 | 0) > 0) {
   i7 = 0;
   i3 = HEAP32[i5 >> 2] | 0;
   while (1) {
    i7 = i7 + 1 | 0;
    i6 = i3 + 60 | 0;
    HEAP32[i3 >> 2] = (i7 | 0) < (i4 | 0) ? i6 : 0;
    if ((i7 | 0) == (i4 | 0)) {
     break;
    } else {
     i3 = i6;
    }
   }
  }
  i3 = HEAP32[i5 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  if ((i3 | 0) == 0) {
   i7 = 0;
   STACKTOP = i1;
   return i7 | 0;
  } else {
   i2 = i3;
  }
 } else {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i2 = i4;
  i3 = i4;
 }
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 i7 = i3;
 STACKTOP = i1;
 return i7 | 0;
}
function __ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_(i9, i11, i2, i10, i7) {
 i9 = i9 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i12 = 0;
 i8 = STACKTOP;
 i3 = i10 + 4 | 0;
 i4 = i7 + 4 | 0;
 i5 = i10 + 2 | 0;
 i6 = i7 + 2 | 0;
 while (1) {
  i12 = HEAP32[i11 + 12 >> 2] | 0;
  if (!((HEAPU16[i10 >> 1] | 0) <= (HEAPU16[i11 + 6 >> 1] | 0) & (HEAPU16[i7 >> 1] | 0) >= (HEAPU16[i11 >> 1] | 0) & (HEAPU16[i3 >> 1] | 0) <= (HEAPU16[i11 + 10 >> 1] | 0) & (HEAPU16[i4 >> 1] | 0) >= (HEAPU16[i11 + 4 >> 1] | 0) & (HEAPU16[i5 >> 1] | 0) <= (HEAPU16[i11 + 8 >> 1] | 0) & (HEAPU16[i6 >> 1] | 0) >= (HEAPU16[i11 + 2 >> 1] | 0))) {
   i1 = 8;
   break;
  }
  if ((i12 | 0) > -1) {
   break;
  }
  __ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_(i9, i11 + 16 | 0, i2, i10, i7);
  i12 = HEAP32[i11 + 28 >> 2] | 0;
  if ((i12 | 0) > -1) {
   i11 = i11 + 32 | 0;
   continue;
  } else {
   i11 = i11 + (1 - i12 << 4) | 0;
   continue;
  }
 }
 if ((i1 | 0) == 8) {
  STACKTOP = i8;
  return;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 63](i2, i12 >> 21, i12 & 2097151);
 STACKTOP = i8;
 return;
}
function __ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject(i6, i3) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i5 = i3 + 188 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 if ((i4 | 0) != 0) {
  i9 = i6 + 76 | 0;
  i8 = HEAP32[i9 >> 2] | 0;
  i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0;
  i10 = i6 + 24 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 63](i8, i4, HEAP32[i10 >> 2] | 0);
  i9 = HEAP32[i9 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 63](i9, i4, HEAP32[i10 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
 }
 i5 = i6 + 8 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i7 = i6 + 16 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i8 = 0;
 while (1) {
  i9 = i6 + (i8 << 2) | 0;
  i10 = i8 + 1 | 0;
  if ((HEAP32[i9 >> 2] | 0) == (i3 | 0)) {
   break;
  }
  if ((i10 | 0) < (i4 | 0)) {
   i8 = i10;
  } else {
   i1 = 9;
   break;
  }
 }
 if ((i1 | 0) == 9) {
  STACKTOP = i2;
  return;
 }
 if ((i8 | 0) >= (i4 | 0)) {
  STACKTOP = i2;
  return;
 }
 i10 = i4 + -1 | 0;
 HEAP32[i9 >> 2] = HEAP32[i6 + (i10 << 2) >> 2];
 HEAP32[(HEAP32[i7 >> 2] | 0) + (i10 << 2) >> 2] = i3;
 HEAP32[i5 >> 2] = i10;
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld9addActionEP17btActionInterface(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i4 + 248 | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i5 = i4 + 252 | 0;
 if ((i9 | 0) == (HEAP32[i5 >> 2] | 0) ? (i6 = (i9 | 0) == 0 ? 1 : i9 << 1, (i9 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) {
   i7 = 0;
  } else {
   i7 = __Z22btAlignedAllocInternalji(i6 << 2, 16) | 0;
   i9 = HEAP32[i1 >> 2] | 0;
  }
  i8 = i4 + 256 | 0;
  if ((i9 | 0) > 0) {
   i10 = 0;
   do {
    i11 = i7 + (i10 << 2) | 0;
    if ((i11 | 0) != 0) {
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + (i10 << 2) >> 2];
    }
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i9 | 0));
  }
  i11 = HEAP32[i8 >> 2] | 0;
  i10 = i4 + 260 | 0;
  if ((i11 | 0) != 0) {
   if ((HEAP8[i10] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i11);
    i9 = HEAP32[i1 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = 0;
  }
  HEAP8[i10] = 1;
  HEAP32[i8 >> 2] = i7;
  HEAP32[i5 >> 2] = i6;
 }
 i4 = (HEAP32[i4 + 256 >> 2] | 0) + (i9 << 2) | 0;
 if ((i4 | 0) == 0) {
  i11 = i9 + 1 | 0;
  HEAP32[i1 >> 2] = i11;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = i3;
 i11 = i9 + 1 | 0;
 HEAP32[i1 >> 2] = i11;
 STACKTOP = i2;
 return;
}
function __ZN7RagDollD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 HEAP32[i1 >> 2] = 444184;
 i2 = i1 + 4 | 0;
 i4 = 0;
 while (1) {
  i6 = HEAP32[i2 >> 2] | 0;
  i5 = i1 + (i4 << 2) + 96 | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2] & 127](i6, HEAP32[i5 >> 2] | 0);
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) != 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] & 255](i6);
  }
  HEAP32[i5 >> 2] = 0;
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == 10) {
   i4 = 0;
   break;
  }
 }
 do {
  i6 = HEAP32[i2 >> 2] | 0;
  i5 = i1 + (i4 << 2) + 52 | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2] & 127](i6, HEAP32[i5 >> 2] | 0);
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = HEAP32[i6 + 472 >> 2] | 0;
  if ((i7 | 0) != 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] & 255](i7);
   i6 = HEAP32[i5 >> 2] | 0;
  }
  if ((i6 | 0) != 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 255](i6);
  }
  HEAP32[i5 >> 2] = 0;
  i6 = i1 + (i4 << 2) + 8 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  if ((i5 | 0) != 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 255](i5);
  }
  HEAP32[i6 >> 2] = 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 11);
 STACKTOP = i3;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN9RayTester7ProcessE_1PK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i3 + 32 | 0;
 i5 = i3;
 i10 = HEAP32[i2 + 36 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 24 >> 2] | 0;
 i7 = HEAP32[i2 + (i10 * 80 | 0) + 64 >> 2] | 0;
 __ZNK11btTransformmlERKS_(i6, HEAP32[i1 + 12 >> 2] | 0, i2 + (i10 * 80 | 0) | 0);
 i2 = i1 + 4 | 0;
 i9 = (HEAP32[i2 >> 2] | 0) + 192 | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = i7;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i8 = i5 + 4 | 0;
 HEAPF32[i8 >> 2] = 1.0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP16[i5 + 12 >> 1] = 1;
 HEAP16[i5 + 14 >> 1] = -1;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 >> 2] = 450160;
 HEAP32[i5 + 20 >> 2] = i9;
 HEAP32[i5 + 24 >> 2] = i10;
 HEAPF32[i8 >> 2] = +HEAPF32[i9 + 4 >> 2];
 __ZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackE(HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i2 >> 2] | 0, i7, i6, i5);
 HEAP32[(HEAP32[i2 >> 2] | 0) + 192 >> 2] = i4;
 STACKTOP = i3;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i1, i4, i6, i3, i7) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) != (HEAP32[i1 + 8 >> 2] | 0)) {
  i5 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 7](i5, i1, i4, i6, i3, i7);
  STACKTOP = i2;
  return;
 }
 HEAP8[i1 + 53 | 0] = 1;
 if ((HEAP32[i1 + 4 >> 2] | 0) != (i6 | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[i1 + 52 | 0] = 1;
 i5 = i1 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i5 >> 2] = i4;
  HEAP32[i1 + 24 >> 2] = i3;
  HEAP32[i1 + 36 >> 2] = 1;
  if (!((HEAP32[i1 + 48 >> 2] | 0) == 1 & (i3 | 0) == 1)) {
   STACKTOP = i2;
   return;
  }
  HEAP8[i1 + 54 | 0] = 1;
  STACKTOP = i2;
  return;
 }
 if ((i6 | 0) != (i4 | 0)) {
  i7 = i1 + 36 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  HEAP8[i1 + 54 | 0] = 1;
  STACKTOP = i2;
  return;
 }
 i4 = i1 + 24 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == 2) {
  HEAP32[i4 >> 2] = i3;
 } else {
  i3 = i5;
 }
 if (!((HEAP32[i1 + 48 >> 2] | 0) == 1 & (i3 | 0) == 1)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[i1 + 54 | 0] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK17btConvexHullShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i20, i14) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i9 = STACKTOP;
 i3 = i1 + 4 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 12 | 0;
 i2 = i20 + 96 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i2 = HEAP32[i2 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i9;
  return;
 }
 i6 = HEAP32[i20 + 104 >> 2] | 0;
 d7 = +HEAPF32[i20 + 12 >> 2];
 d8 = +HEAPF32[i20 + 16 >> 2];
 d12 = +HEAPF32[i20 + 20 >> 2];
 d11 = +HEAPF32[i14 >> 2];
 d10 = +HEAPF32[i14 + 4 >> 2];
 d13 = +HEAPF32[i14 + 8 >> 2];
 i14 = 0;
 d15 = -999999984306749400.0;
 do {
  d19 = +HEAPF32[i6 + (i14 << 4) >> 2] * d7;
  d18 = +HEAPF32[i6 + (i14 << 4) + 4 >> 2] * d8;
  d17 = +HEAPF32[i6 + (i14 << 4) + 8 >> 2] * d12;
  d16 = d19 * d11 + d18 * d10 + d17 * d13;
  if (d16 > d15) {
   HEAPF32[i1 >> 2] = d19;
   HEAPF32[i3 >> 2] = d18;
   HEAPF32[i4 >> 2] = d17;
   HEAPF32[i5 >> 2] = 0.0;
   d15 = d16;
  }
  i14 = i14 + 1 | 0;
 } while ((i14 | 0) < (i2 | 0));
 STACKTOP = i9;
 return;
}
function __ZN28btHashedOverlappingPairCache8findPairEP17btBroadphaseProxyS1_(i4, i6, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[113818] = (HEAP32[113818] | 0) + 1;
 i7 = (HEAP32[i6 + 12 >> 2] | 0) > (HEAP32[i5 + 12 >> 2] | 0);
 i3 = HEAP32[(i7 ? i5 : i6) + 12 >> 2] | 0;
 i5 = HEAP32[(i7 ? i6 : i5) + 12 >> 2] | 0;
 i6 = i5 << 16 | i3;
 i6 = i6 + ~(i6 << 15) | 0;
 i6 = (i6 >> 10 ^ i6) * 9 | 0;
 i6 = i6 >> 6 ^ i6;
 i6 = i6 + ~(i6 << 11) | 0;
 i6 = (i6 >> 16 ^ i6) & (HEAP32[i4 + 12 >> 2] | 0) + -1;
 if ((i6 | 0) >= (HEAP32[i4 + 36 >> 2] | 0)) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i7 = HEAP32[(HEAP32[i4 + 44 >> 2] | 0) + (i6 << 2) >> 2] | 0;
 if ((i7 | 0) == -1) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i6 = HEAP32[i4 + 16 >> 2] | 0;
 i4 = i4 + 64 | 0;
 while (1) {
  if ((HEAP32[(HEAP32[i6 + (i7 << 4) >> 2] | 0) + 12 >> 2] | 0) == (i3 | 0) ? (HEAP32[(HEAP32[i6 + (i7 << 4) + 4 >> 2] | 0) + 12 >> 2] | 0) == (i5 | 0) : 0) {
   break;
  }
  i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i7 << 2) >> 2] | 0;
  if ((i7 | 0) == -1) {
   i3 = 0;
   i1 = 8;
   break;
  }
 }
 if ((i1 | 0) == 8) {
  STACKTOP = i2;
  return i3 | 0;
 }
 i7 = i6 + (i7 << 4) | 0;
 STACKTOP = i2;
 return i7 | 0;
}
function __ZN18btConvexPolyhedronD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 459464;
 i5 = i1 + 48 | 0;
 i4 = i1 + 56 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 60 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i4 = i1 + 28 | 0;
 __ZN20btAlignedObjectArrayI6btFaceE7destroyEii(i1 + 24 | 0, 0, HEAP32[i4 >> 2] | 0);
 i6 = i1 + 36 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i3 = i1 + 40 | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 16 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 20 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 12 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 12 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallbackD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 445504;
 i5 = i1 + 76 | 0;
 i4 = i1 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 88 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 80 >> 2] = 0;
 i4 = i1 + 56 | 0;
 i6 = i1 + 64 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i3 = i1 + 68 | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 i4 = i1 + 36 | 0;
 i5 = i1 + 44 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 48 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 40 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 40 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN20btConvexHullInternalD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 i5 = i2 + 84 | 0;
 i4 = i2 + 92 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i2 + 96 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i2 + 88 >> 2] = 0;
 i3 = i2 + 64 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  do {
   HEAP32[i3 >> 2] = HEAP32[i4 + 8 >> 2];
   __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
   __Z21btAlignedFreeInternalPv(i4);
   i4 = HEAP32[i3 >> 2] | 0;
  } while ((i4 | 0) != 0);
 }
 i3 = i2 + 48 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  do {
   HEAP32[i3 >> 2] = HEAP32[i4 + 8 >> 2];
   __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
   __Z21btAlignedFreeInternalPv(i4);
   i4 = HEAP32[i3 >> 2] | 0;
  } while ((i4 | 0) != 0);
 }
 i2 = i2 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 + 8 >> 2];
  __Z21btAlignedFreeInternalPv(HEAP32[i3 >> 2] | 0);
  __Z21btAlignedFreeInternalPv(i3);
  i3 = HEAP32[i2 >> 2] | 0;
 } while ((i3 | 0) != 0);
 STACKTOP = i1;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitE_0RK9btVector3fii(i1, i3, d2, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i6 + 32 | 0;
 i7 = i6;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i11 + 4 >> 2] = i4;
 d13 = +HEAPF32[i3 >> 2];
 d12 = +HEAPF32[i3 + 4 >> 2];
 d8 = +HEAPF32[i3 + 8 >> 2];
 d10 = +HEAPF32[i1 + 56 >> 2] * d13 + +HEAPF32[i1 + 60 >> 2] * d12 + +HEAPF32[i1 + 64 >> 2] * d8;
 d9 = d13 * +HEAPF32[i1 + 72 >> 2] + d12 * +HEAPF32[i1 + 76 >> 2] + d8 * +HEAPF32[i1 + 80 >> 2];
 d8 = d13 * +HEAPF32[i1 + 88 >> 2] + d12 * +HEAPF32[i1 + 92 >> 2] + d8 * +HEAPF32[i1 + 96 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i7 + 4 >> 2] = i11;
 HEAPF32[i7 + 8 >> 2] = d10;
 HEAPF32[i7 + 12 >> 2] = d9;
 HEAPF32[i7 + 16 >> 2] = d8;
 HEAPF32[i7 + 20 >> 2] = 0.0;
 HEAPF32[i7 + 24 >> 2] = d2;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 d2 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 7](i5, i7, 1);
 STACKTOP = i6;
 return +d2;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitERK9btVector3fii(i1, i3, d2, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i6 + 32 | 0;
 i7 = i6;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i11 + 4 >> 2] = i4;
 d13 = +HEAPF32[i3 >> 2];
 d12 = +HEAPF32[i3 + 4 >> 2];
 d8 = +HEAPF32[i3 + 8 >> 2];
 d10 = +HEAPF32[i1 + 56 >> 2] * d13 + +HEAPF32[i1 + 60 >> 2] * d12 + +HEAPF32[i1 + 64 >> 2] * d8;
 d9 = d13 * +HEAPF32[i1 + 72 >> 2] + d12 * +HEAPF32[i1 + 76 >> 2] + d8 * +HEAPF32[i1 + 80 >> 2];
 d8 = d13 * +HEAPF32[i1 + 88 >> 2] + d12 * +HEAPF32[i1 + 92 >> 2] + d8 * +HEAPF32[i1 + 96 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i7 + 4 >> 2] = i11;
 HEAPF32[i7 + 8 >> 2] = d10;
 HEAPF32[i7 + 12 >> 2] = d9;
 HEAPF32[i7 + 16 >> 2] = d8;
 HEAPF32[i7 + 20 >> 2] = 0.0;
 HEAPF32[i7 + 24 >> 2] = d2;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 d2 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 7](i5, i7, 1);
 STACKTOP = i6;
 return +d2;
}
function __Z24applyAnisotropicFrictionP17btCollisionObjectR9btVector3(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 180 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d17 = +HEAPF32[i1 + 4 >> 2];
 d19 = +HEAPF32[i3 >> 2];
 d14 = +HEAPF32[i1 + 20 >> 2];
 i11 = i3 + 4 | 0;
 d18 = +HEAPF32[i11 >> 2];
 d10 = +HEAPF32[i1 + 36 >> 2];
 i4 = i3 + 8 | 0;
 d5 = +HEAPF32[i4 >> 2];
 d16 = +HEAPF32[i1 + 8 >> 2];
 d13 = +HEAPF32[i1 + 24 >> 2];
 d8 = +HEAPF32[i1 + 40 >> 2];
 d15 = +HEAPF32[i1 + 12 >> 2];
 d12 = +HEAPF32[i1 + 28 >> 2];
 d6 = +HEAPF32[i1 + 44 >> 2];
 d9 = (d17 * d19 + d14 * d18 + d10 * d5) * +HEAPF32[i1 + 164 >> 2];
 d7 = (d19 * d16 + d18 * d13 + d5 * d8) * +HEAPF32[i1 + 168 >> 2];
 d5 = (d19 * d15 + d18 * d12 + d5 * d6) * +HEAPF32[i1 + 172 >> 2];
 HEAPF32[i3 >> 2] = d17 * d9 + d16 * d7 + d15 * d5;
 HEAPF32[i11 >> 2] = d14 * d9 + d13 * d7 + d12 * d5;
 HEAPF32[i4 >> 2] = d10 * d9 + d8 * d7 + d6 * d5;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape32getPreferredPenetrationDirectionEiR9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = STACKTOP;
 switch (i2 | 0) {
 case 4:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 1.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 2:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 1:
  {
   HEAPF32[i1 >> 2] = -1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 0:
  {
   HEAPF32[i1 >> 2] = 1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 5:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = -1.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 3:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = -1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 default:
  {
   STACKTOP = i3;
   return;
  }
 }
}
function __ZN11btRigidBody12setMassPropsEfRK9btVector3(i1, d4, i2) {
 i1 = i1 | 0;
 d4 = +d4;
 i2 = i2 | 0;
 var d3 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, d8 = 0.0;
 i6 = i1 + 204 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (d4 == 0.0) {
  HEAP32[i6 >> 2] = i7 | 1;
  HEAPF32[i1 + 336 >> 2] = 0.0;
  d3 = 0.0;
 } else {
  HEAP32[i6 >> 2] = i7 & -2;
  d3 = 1.0 / d4;
  HEAPF32[i1 + 336 >> 2] = d3;
 }
 d5 = +HEAPF32[i1 + 376 >> 2] * d4;
 d8 = +HEAPF32[i1 + 380 >> 2] * d4;
 HEAPF32[i1 + 356 >> 2] = +HEAPF32[i1 + 372 >> 2] * d4;
 HEAPF32[i1 + 360 >> 2] = d5;
 HEAPF32[i1 + 364 >> 2] = d8;
 HEAPF32[i1 + 368 >> 2] = 0.0;
 d4 = +HEAPF32[i2 >> 2];
 if (d4 != 0.0) {
  d4 = 1.0 / d4;
 } else {
  d4 = 0.0;
 }
 d5 = +HEAPF32[i2 + 4 >> 2];
 if (d5 != 0.0) {
  d5 = 1.0 / d5;
 } else {
  d5 = 0.0;
 }
 d8 = +HEAPF32[i2 + 8 >> 2];
 if (d8 != 0.0) {
  d8 = 1.0 / d8;
 } else {
  d8 = 0.0;
 }
 HEAPF32[i1 + 388 >> 2] = d4;
 HEAPF32[i1 + 392 >> 2] = d5;
 HEAPF32[i1 + 396 >> 2] = d8;
 HEAPF32[i1 + 400 >> 2] = 0.0;
 d5 = d3 * +HEAPF32[i1 + 344 >> 2];
 d8 = d3 * +HEAPF32[i1 + 348 >> 2];
 HEAPF32[i1 + 552 >> 2] = +HEAPF32[i1 + 340 >> 2] * d3;
 HEAPF32[i1 + 556 >> 2] = d5;
 HEAPF32[i1 + 560 >> 2] = d8;
 HEAPF32[i1 + 564 >> 2] = 0.0;
 return;
}
function __ZN21btCollisionDispatcher15releaseManifoldEP20btPersistentManifold(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 HEAP32[112080] = (HEAP32[112080] | 0) + -1;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 127](i4, i1);
 i6 = HEAP32[i1 + 1136 >> 2] | 0;
 i5 = i4 + 12 | 0;
 i8 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
 i7 = i4 + 20 | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 i10 = i11 + (i6 << 2) | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 + (i8 << 2) >> 2];
 HEAP32[(HEAP32[i7 >> 2] | 0) + (i8 << 2) >> 2] = i9;
 HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + (i6 << 2) >> 2] | 0) + 1136 >> 2] = i6;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 i4 = HEAP32[i4 + 196 >> 2] | 0;
 if (((i1 | 0) != 0 ? (i3 = HEAP32[i4 + 16 >> 2] | 0, !(i3 >>> 0 > i1 >>> 0)) : 0) ? (i3 + (Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0) | 0) >>> 0 > i1 >>> 0 : 0) {
  i11 = i4 + 12 | 0;
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = i1;
  i11 = i4 + 8 | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  STACKTOP = i2;
  return;
 }
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitE_0RK9btVector3SG_fii(i5, i6, i7, d1, i9, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 d1 = +d1;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i2 + 48 | 0;
 i3 = i2;
 HEAP32[i4 >> 2] = i9;
 HEAP32[i4 + 4 >> 2] = i8;
 i8 = HEAP32[i5 + 212 >> 2] | 0;
 if (!(+HEAPF32[i8 + 4 >> 2] >= d1)) {
  STACKTOP = i2;
  return +d1;
 }
 HEAP32[i3 >> 2] = HEAP32[i5 + 216 >> 2];
 HEAP32[i3 + 4 >> 2] = i4;
 i9 = i3 + 8 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i9 = i3 + 24 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAPF32[i3 + 40 >> 2] = d1;
 d1 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 7](i8, i3, 0);
 STACKTOP = i2;
 return +d1;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitERK9btVector3SG_fii(i5, i6, i7, d1, i9, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 d1 = +d1;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i2 + 48 | 0;
 i3 = i2;
 HEAP32[i4 >> 2] = i9;
 HEAP32[i4 + 4 >> 2] = i8;
 i8 = HEAP32[i5 + 212 >> 2] | 0;
 if (!(+HEAPF32[i8 + 4 >> 2] >= d1)) {
  STACKTOP = i2;
  return +d1;
 }
 HEAP32[i3 >> 2] = HEAP32[i5 + 216 >> 2];
 HEAP32[i3 + 4 >> 2] = i4;
 i9 = i3 + 8 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i9 = i3 + 24 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAPF32[i3 + 40 >> 2] = d1;
 d1 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 7](i8, i3, 1);
 STACKTOP = i2;
 return +d1;
}
function __ZN28btHashedOverlappingPairCacheD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 455288;
 i5 = i1 + 56 | 0;
 i4 = i1 + 64 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 68 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 i4 = i1 + 36 | 0;
 i6 = i1 + 44 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i3 = i1 + 48 | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 16 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 20 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 12 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 12 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher19defaultNearCallbackER16btBroadphasePairRS_RK16btDispatcherInfo(i7, i6, i2) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d8 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i3 = i1;
 i4 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 i5 = HEAP32[HEAP32[i7 + 4 >> 2] >> 2] | 0;
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 31](i6, i4, i5) | 0)) {
  STACKTOP = i1;
  return;
 }
 i7 = i7 + 8 | 0;
 if ((HEAP32[i7 >> 2] | 0) == 0 ? (i6 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 15](i6, i4, i5, 0) | 0, HEAP32[i7 >> 2] = i6, (i6 | 0) == 0) : 0) {
  STACKTOP = i1;
  return;
 }
 __ZN16btManifoldResultC2EP17btCollisionObjectS1_(i3, i4, i5);
 i6 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[i2 + 8 >> 2] | 0) == 1) {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 31](i6, i4, i5, i2, i3);
  STACKTOP = i1;
  return;
 }
 d8 = +FUNCTION_TABLE_diiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i4, i5, i2, i3);
 i2 = i2 + 12 | 0;
 if (!(+HEAPF32[i2 >> 2] > d8)) {
  STACKTOP = i1;
  return;
 }
 HEAPF32[i2 >> 2] = d8;
 STACKTOP = i1;
 return;
}
function __ZN20btConvexHullComputerD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i5 = i1 + 44 | 0;
 i4 = i1 + 52 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 56 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i4 = i1 + 24 | 0;
 i6 = i1 + 32 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i3 = i1 + 36 | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i5);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i4 = i1 + 4 | 0;
 i5 = i1 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 16 | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i6] = 1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i6 = i1 + 8 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i6] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 HEAP32[i5 >> 2] = 0;
 HEAP8[i6] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN31btDefaultCollisionConfiguration31getCollisionAlgorithmCreateFuncEii(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 i6 = (i4 | 0) == 8;
 i5 = (i3 | 0) == 8;
 do {
  if (!(i6 & i5)) {
   if (i6 & (i3 | 0) == 1) {
    i2 = i2 + 72 | 0;
    break;
   }
   if ((i4 | 0) == 1 & i5) {
    i2 = i2 + 76 | 0;
    break;
   }
   if ((i3 | i4 | 0) == 0) {
    i2 = i2 + 68 | 0;
    break;
   }
   i5 = (i4 | 0) < 20;
   if (i5 & (i3 | 0) == 28) {
    i2 = i2 + 84 | 0;
    break;
   }
   i6 = (i3 | 0) < 20;
   if (i6 & (i4 | 0) == 28) {
    i2 = i2 + 80 | 0;
    break;
   }
   if (i5) {
    if (i6) {
     i2 = i2 + 40 | 0;
     break;
    }
    if ((i3 + -21 | 0) >>> 0 < 9) {
     i2 = i2 + 44 | 0;
     break;
    }
   } else {
    if (i6 ? (i4 + -21 | 0) >>> 0 < 9 : 0) {
     i2 = i2 + 48 | 0;
     break;
    }
   }
   if ((i4 | 0) == 31) {
    i2 = i2 + 52 | 0;
    break;
   }
   if ((i3 | 0) == 31) {
    i2 = i2 + 56 | 0;
    break;
   } else {
    i2 = i2 + 60 | 0;
    break;
   }
  } else {
   i2 = i2 + 64 | 0;
  }
 } while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}
function __ZN22btVoronoiSimplexSolver9addVertexERK9btVector3S2_S2_(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = i1 + 292 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP8[i1 + 356 | 0] = 1;
 i6 = i1 + (HEAP32[i1 >> 2] << 4) + 4 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = i1 + (HEAP32[i1 >> 2] << 4) + 84 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i4 = i1 + (HEAP32[i1 >> 2] << 4) + 164 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 STACKTOP = i5;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i6, i1, i4, i5, i2, i3) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = STACKTOP;
 if ((HEAP32[i1 + 8 >> 2] | 0) != (i6 | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP8[i1 + 53 | 0] = 1;
 if ((HEAP32[i1 + 4 >> 2] | 0) != (i5 | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP8[i1 + 52 | 0] = 1;
 i5 = i1 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i5 >> 2] = i4;
  HEAP32[i1 + 24 >> 2] = i2;
  HEAP32[i1 + 36 >> 2] = 1;
  if (!((HEAP32[i1 + 48 >> 2] | 0) == 1 & (i2 | 0) == 1)) {
   STACKTOP = i3;
   return;
  }
  HEAP8[i1 + 54 | 0] = 1;
  STACKTOP = i3;
  return;
 }
 if ((i6 | 0) != (i4 | 0)) {
  i6 = i1 + 36 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP8[i1 + 54 | 0] = 1;
  STACKTOP = i3;
  return;
 }
 i4 = i1 + 24 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) == 2) {
  HEAP32[i4 >> 2] = i2;
 } else {
  i2 = i5;
 }
 if (!((HEAP32[i1 + 48 >> 2] | 0) == 1 & (i2 | 0) == 1)) {
  STACKTOP = i3;
  return;
 }
 HEAP8[i1 + 54 | 0] = 1;
 STACKTOP = i3;
 return;
}
function __ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 i6 = __ZL10removeleafP6btDbvtP10btDbvtNode(i3, i2) | 0;
 L1 : do {
  if ((i6 | 0) != 0) {
   i5 = HEAP32[i3 + 8 >> 2] | 0;
   if (!((i5 | 0) > -1)) {
    i6 = HEAP32[i3 >> 2] | 0;
    break;
   }
   if ((i5 | 0) > 0) {
    i7 = 0;
    i8 = i6;
    while (1) {
     i6 = HEAP32[i8 + 32 >> 2] | 0;
     i7 = i7 + 1 | 0;
     if ((i6 | 0) == 0) {
      i6 = i8;
      break L1;
     }
     if ((i7 | 0) < (i5 | 0)) {
      i8 = i6;
     } else {
      break;
     }
    }
   }
  } else {
   i6 = 0;
  }
 } while (0);
 HEAP32[i2 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i3, i6, i2);
 STACKTOP = i4;
 return;
}
function __ZNK21btConeTwistConstraint16GetPointForAngleEff(i3, i8, d4, d1) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 d4 = +d4;
 d1 = +d1;
 var d2 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 d2 = +Math_cos(+d4);
 d4 = +Math_sin(+d4);
 d5 = +HEAPF32[i8 + 436 >> 2];
 if (+Math_abs(+d2) > 1.1920928955078125e-7) {
  d6 = d4 * d4;
  d7 = d2 * d2;
  d9 = d6 / d7;
  d10 = +HEAPF32[i8 + 440 >> 2];
  d5 = +Math_sqrt(+((d9 + 1.0) / (1.0 / (d10 * d10) + d9 / (d5 * d5))));
 } else {
  d6 = d4 * d4;
  d7 = d2 * d2;
 }
 d12 = d5 * .5;
 d6 = +Math_sin(+d12) / +Math_sqrt(+(d7 + 0.0 + d6));
 d10 = d6 * 0.0;
 d2 = d2 * d6;
 d6 = d4 * d6;
 d4 = +Math_cos(+d12);
 d12 = d2 * 0.0;
 d7 = d6 * -0.0;
 d11 = d4 * d1 + d12 - d7;
 d13 = d4 * 0.0;
 d5 = d10 * 0.0;
 d9 = d13 - d6 * d1 - d5;
 d5 = d13 + d5 - d2 * d1;
 d7 = -(d10 * d1) - d12 - d7;
 d10 = -d10;
 d2 = -d2;
 HEAPF32[i3 >> 2] = d6 * d9 + (d4 * d11 + d7 * d10) - d5 * d2;
 HEAPF32[i3 + 4 >> 2] = d5 * d10 + (d4 * d9 + d7 * d2) - d6 * d11;
 HEAPF32[i3 + 8 >> 2] = d11 * d2 + (d4 * d5 + d6 * d7) - d9 * d10;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 return;
}
function __ZN25btSimulationIslandManager26storeIslandActivationStateEP16btCollisionWorld(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i1 = i3 + 8 | 0;
 if ((HEAP32[i1 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i3 + 16 >> 2] | 0;
 i4 = i4 + 16 | 0;
 i5 = 0;
 i7 = 0;
 do {
  i8 = HEAP32[i3 + (i5 << 2) >> 2] | 0;
  if ((HEAP32[i8 + 204 >> 2] & 3 | 0) == 0) {
   i6 = HEAP32[i4 >> 2] | 0;
   i9 = i6 + (i7 << 3) | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   if ((i10 | 0) == (i7 | 0)) {
    i11 = i7;
   } else {
    do {
     i11 = i6 + (i10 << 3) | 0;
     HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
     i11 = HEAP32[i11 >> 2] | 0;
     i9 = i6 + (i11 << 3) | 0;
     i10 = HEAP32[i9 >> 2] | 0;
    } while ((i11 | 0) != (i10 | 0));
   }
   HEAP32[i8 + 208 >> 2] = i11;
   HEAP32[i6 + (i7 << 3) + 4 >> 2] = i5;
   HEAP32[i8 + 212 >> 2] = -1;
   i7 = i7 + 1 | 0;
  } else {
   HEAP32[i8 + 208 >> 2] = -1;
   HEAP32[i8 + 212 >> 2] = -2;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (HEAP32[i1 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver33solveGroupCacheFriendlyIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i1, i7, i11, i10, i9, i2, i3, i4, i8, i6) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(446032);
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 3](i1, i7, i11, i10, i9, i2, i3, i4, i8, i6);
 i6 = i4 + 20 | 0;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  i7 = 0;
 } else {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i5;
  return 0.0;
 }
 do {
  +__ZN35btSequentialImpulseConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i1, i7, 0, 0, 0, 0, i2, i3, i4, 0, 0);
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) < (HEAP32[i6 >> 2] | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i5;
 return 0.0;
}
function __ZN20btDefaultMotionState17setWorldTransformERK11btTransform(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3;
 i5 = i1 + 4 | 0;
 __ZNK11btTransformmlERKS_(i4, i2, i1 + 68 | 0);
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i2 = i1 + 20 | 0;
 i5 = i4 + 16 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i2 = i1 + 36 | 0;
 i5 = i4 + 32 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i2 = i1 + 52 | 0;
 i1 = i4 + 48 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN20btAlignedObjectArrayI6btFaceE7destroyEii(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 if ((i4 | 0) >= (i1 | 0)) {
  STACKTOP = i2;
  return;
 }
 i3 = i3 + 12 | 0;
 do {
  i5 = HEAP32[i3 >> 2] | 0;
  i7 = i5 + (i4 * 56 | 0) + 24 | 0;
  i6 = i5 + (i4 * 56 | 0) + 32 | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  i9 = i5 + (i4 * 56 | 0) + 36 | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i8);
   }
   HEAP32[i6 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i5 + (i4 * 56 | 0) + 28 >> 2] = 0;
  i6 = i5 + (i4 * 56 | 0) + 4 | 0;
  i7 = i5 + (i4 * 56 | 0) + 12 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = i5 + (i4 * 56 | 0) + 16 | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i9] | 0) != 0) {
    __Z21btAlignedFreeInternalPv(i8);
   }
   HEAP32[i7 >> 2] = 0;
  }
  HEAP8[i9] = 1;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i5 + (i4 * 56 | 0) + 8 >> 2] = 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i1 | 0));
 STACKTOP = i2;
 return;
}
function __ZN6btDbvt6insertERK12btDbvtAabbMmPv(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i6 = i4 + 4 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if ((i5 | 0) == 0) {
  i5 = __Z22btAlignedAllocInternalji(44, 16) | 0;
  if ((i5 | 0) == 0) {
   i5 = 0;
  } else {
   i7 = i5 + 0 | 0;
   i6 = i7 + 44 | 0;
   do {
    HEAP32[i7 >> 2] = 0;
    i7 = i7 + 4 | 0;
   } while ((i7 | 0) < (i6 | 0));
  }
 } else {
  HEAP32[i6 >> 2] = 0;
 }
 HEAP32[i5 + 32 >> 2] = 0;
 HEAP32[i5 + 36 >> 2] = i1;
 HEAP32[i5 + 40 >> 2] = 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i5 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i5 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i4, HEAP32[i4 >> 2] | 0, i5);
 i7 = i4 + 12 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN14btQuantizedBvhC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 456232;
 HEAP32[i1 + 52 >> 2] = 278;
 HEAP8[i1 + 60 | 0] = 0;
 HEAP8[i1 + 80 | 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 HEAP8[i1 + 100 | 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP8[i1 + 120 | 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP8[i1 + 140 | 0] = 1;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAP8[i1 + 164 | 0] = 1;
 HEAP32[i1 + 160 >> 2] = 0;
 HEAP32[i1 + 152 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 168 >> 2] = 0;
 HEAPF32[i1 + 4 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i1 + 8 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i1 + 12 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 HEAPF32[i1 + 20 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i1 + 24 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i1 + 28 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i1 + 32 >> 2] = 0.0;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i7, i1, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 28) | 0;
 i4 = (i3 | 0) == 0;
 if ((HEAP8[i7 + 4 | 0] | 0) == 0) {
  if (i4) {
   i7 = 0;
   STACKTOP = i2;
   return i7 | 0;
  }
  __ZN31btConvexPlaneCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_bii(i3, 0, i1, i5, i6, 0, HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0);
  i7 = i3;
  STACKTOP = i2;
  return i7 | 0;
 } else {
  if (i4) {
   i7 = 0;
   STACKTOP = i2;
   return i7 | 0;
  }
  __ZN31btConvexPlaneCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_bii(i3, 0, i1, i5, i6, 1, HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0);
  i7 = i3;
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}
function __ZN22btBvhTriangleMeshShape15setLocalScalingERK9btVector3(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i2 = STACKTOP;
 i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0;
 d7 = +HEAPF32[i4 >> 2] - +HEAPF32[i3 >> 2];
 d6 = +HEAPF32[i4 + 4 >> 2] - +HEAPF32[i3 + 4 >> 2];
 d5 = +HEAPF32[i4 + 8 >> 2] - +HEAPF32[i3 + 8 >> 2];
 if (!(d7 * d7 + d6 * d6 + d5 * d5 > 1.1920928955078125e-7)) {
  STACKTOP = i2;
  return;
 }
 __ZN19btTriangleMeshShape15setLocalScalingERK9btVector3(i1, i3);
 i3 = i1 + 61 | 0;
 i4 = i1 + 52 | 0;
 if ((HEAP8[i3] | 0) != 0) {
  i8 = HEAP32[i4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 255](i8);
  __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
 }
 i8 = __Z22btAlignedAllocInternalji(172, 16) | 0;
 __ZN14btOptimizedBvhC2Ev(i8);
 HEAP32[i4 >> 2] = i8;
 __ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_(i8, HEAP32[i1 + 48 >> 2] | 0, (HEAP8[i1 + 60 | 0] | 0) != 0, i1 + 16 | 0, i1 + 32 | 0);
 HEAP8[i3] = 1;
 STACKTOP = i2;
 return;
}
function __ZN21btConeTwistConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i3 + 519 | 0] | 0) != 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = 3;
 i7 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = 3;
 i9 = HEAP32[i3 + 24 >> 2] | 0;
 i8 = HEAP32[i3 + 28 >> 2] | 0;
 __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i3, i9 + 4 | 0, i8 + 4 | 0, i9 + 256 | 0, i8 + 256 | 0);
 if (((HEAP8[i3 + 518 | 0] | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, HEAP32[i1 >> 2] = i4 + 1, i5 = HEAP32[i7 >> 2] | 0, HEAP32[i7 >> 2] = i5 + -1, d6 = +HEAPF32[i3 + 448 >> 2], +HEAPF32[i3 + 436 >> 2] < d6) : 0) ? +HEAPF32[i3 + 440 >> 2] < d6 : 0) {
  HEAP32[i1 >> 2] = i4 + 2;
  HEAP32[i7 >> 2] = i5 + -2;
 }
 if ((HEAP8[i3 + 517 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 STACKTOP = i2;
 return;
}
function __ZL11TestSepAxisRK18btConvexPolyhedronS1_RK11btTransformS4_RK9btVector3Rf(i6, i9, i8, i5, i7, i1) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i15 = i2 + 8 | 0;
 i14 = i2 + 4 | 0;
 i4 = i2;
 __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_(i6, i8, i7, i3, i15);
 __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_(i9, i5, i7, i14, i4);
 d11 = +HEAPF32[i15 >> 2];
 d10 = +HEAPF32[i14 >> 2];
 if (d11 < d10) {
  i15 = 0;
  STACKTOP = i2;
  return i15 | 0;
 }
 d12 = +HEAPF32[i4 >> 2];
 d13 = +HEAPF32[i3 >> 2];
 if (d12 < d13) {
  i15 = 0;
  STACKTOP = i2;
  return i15 | 0;
 }
 d10 = d11 - d10;
 if (!(d10 >= 0.0)) {
  ___assert_fail(459640, 459656, 89, 459728);
 }
 d11 = d12 - d13;
 if (!(d11 >= 0.0)) {
  ___assert_fail(459744, 459656, 91, 459728);
 }
 HEAPF32[i1 >> 2] = d10 < d11 ? d10 : d11;
 i15 = 1;
 STACKTOP = i2;
 return i15 | 0;
}
function __ZN28btCompoundCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 HEAP32[i1 >> 2] = 458312;
 i3 = i1 + 12 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 20 | 0;
 if ((i5 | 0) > 0) {
  i6 = i1 + 4 | 0;
  i7 = 0;
  do {
   i8 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i7 << 2) >> 2] | 0;
   if ((i8 | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 255](i8);
    i8 = HEAP32[i6 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 60 >> 2] & 127](i8, HEAP32[(HEAP32[i2 >> 2] | 0) + (i7 << 2) >> 2] | 0);
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = i1 + 24 | 0;
 if ((i6 | 0) == 0) {
  HEAP8[i5] = 1;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  i8 = i1 + 16 | 0;
  HEAP32[i8 >> 2] = 0;
  STACKTOP = i4;
  return;
 }
 if ((HEAP8[i5] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i6);
 }
 HEAP32[i2 >> 2] = 0;
 HEAP8[i5] = 1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i8 = i1 + 16 | 0;
 HEAP32[i8 >> 2] = 0;
 STACKTOP = i4;
 return;
}
function __ZN16btDbvtBroadphaseC2EP22btOverlappingPairCache(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 451752;
 i3 = i1 + 84 | 0;
 i4 = i1 + 4 | 0;
 do {
  __ZN6btDbvtC2Ev(i4);
  i4 = i4 + 40 | 0;
 } while ((i4 | 0) != (i3 | 0));
 HEAP8[i1 + 153 | 0] = 0;
 HEAP8[i1 + 154 | 0] = 1;
 i4 = (i5 | 0) != 0;
 HEAP8[i1 + 152 | 0] = i4 & 1 ^ 1;
 HEAPF32[i1 + 100 >> 2] = 0.0;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 124 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 1;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 116 >> 2] = 10;
 HEAP32[i1 + 120 >> 2] = 1;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 HEAPF32[i1 + 136 >> 2] = 0.0;
 if (!i4) {
  i5 = __Z22btAlignedAllocInternalji(76, 16) | 0;
  if ((i5 | 0) == 0) {
   i5 = 0;
  } else {
   __ZN28btHashedOverlappingPairCacheC2Ev(i5);
  }
 }
 HEAP32[i1 + 96 >> 2] = i5;
 HEAP32[i1 + 148 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAP32[i1 + 144 >> 2] = 0;
 i5 = i1 + 84 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN11btUnionFind11sortIslandsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4 + 1 | 0;
 i2 = i4;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i4;
  return;
 }
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 i8 = 0;
 do {
  i9 = i7 + (i8 << 3) | 0;
  i11 = HEAP32[i9 >> 2] | 0;
  if ((i11 | 0) == (i8 | 0)) {
   i12 = i8;
  } else {
   i10 = i9;
   do {
    i12 = i7 + (i11 << 3) | 0;
    HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
    i12 = HEAP32[i12 >> 2] | 0;
    i10 = i7 + (i12 << 3) | 0;
    i11 = HEAP32[i10 >> 2] | 0;
   } while ((i12 | 0) != (i11 | 0));
  }
  HEAP32[i9 >> 2] = i12;
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != (i6 | 0));
 i5 = HEAP32[i5 >> 2] | 0;
 if ((i5 | 0) <= 1) {
  STACKTOP = i4;
  return;
 }
 i12 = i5 + -1 | 0;
 HEAP8[i3 + 0 | 0] = HEAP8[i2 + 0 | 0] | 0;
 __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvT_ii(i1, i3, 0, i12);
 STACKTOP = i4;
 return;
}
function __ZN16btCollisionWorld33performDiscreteCollisionDetectionEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(449e3);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
 __ZN15CProfileManager13Start_ProfileEPKc(449040);
 i4 = i1 + 76 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i5 = i1 + 24 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 127](i3, HEAP32[i5 >> 2] | 0);
 __ZN15CProfileManager12Stop_ProfileEv();
 i3 = HEAP32[i5 >> 2] | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(449072);
 if ((i3 | 0) == 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0;
 FUNCTION_TABLE_viiii[i6 & 63](i3, i4, i1 + 28 | 0, HEAP32[i5 >> 2] | 0);
 __ZN15CProfileManager12Stop_ProfileEv();
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcherC2EP24btCollisionConfiguration(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 448336;
 HEAP32[i1 + 4 >> 2] = 2;
 HEAP8[i1 + 24 | 0] = 1;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 453504;
 i3 = i1 + 172 | 0;
 HEAP32[i3 + 0 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 HEAP32[i3 + 8 >> 2] = -1;
 HEAP32[i3 + 12 >> 2] = -1;
 i3 = i1 + 5384 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i1 + 188 >> 2] = 53;
 HEAP32[i1 + 192 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 127](i4) | 0;
 HEAP32[i1 + 196 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 127](i4) | 0;
 i4 = 0;
 do {
  i5 = 0;
  do {
   i6 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 + (i4 * 144 | 0) + (i5 << 2) + 200 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] & 31](i6, i4, i5) | 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < 36);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < 36);
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i3, i4, i1, i2) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i3 + 8 >> 2] | 0) == (i6 | 0)) {
  if ((HEAP32[i3 + 4 >> 2] | 0) != (i4 | 0)) {
   STACKTOP = i2;
   return;
  }
  i3 = i3 + 28 | 0;
  if ((HEAP32[i3 >> 2] | 0) == 1) {
   STACKTOP = i2;
   return;
  }
  HEAP32[i3 >> 2] = i1;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) != (i6 | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 + 16 >> 2] | 0) != (i4 | 0) ? (i5 = i3 + 20 | 0, (HEAP32[i5 >> 2] | 0) != (i4 | 0)) : 0) {
  HEAP32[i3 + 32 >> 2] = i1;
  HEAP32[i5 >> 2] = i4;
  i6 = i3 + 40 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  if ((HEAP32[i3 + 36 >> 2] | 0) == 1 ? (HEAP32[i3 + 24 >> 2] | 0) == 2 : 0) {
   HEAP8[i3 + 54 | 0] = 1;
  }
  HEAP32[i3 + 44 >> 2] = 4;
  STACKTOP = i2;
  return;
 }
 if ((i1 | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 + 32 >> 2] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK15btTriangleShape32getPreferredPenetrationDirectionEiR9btVector3(i6, i3, i1) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i2 = STACKTOP;
 d9 = +HEAPF32[i6 + 56 >> 2];
 d11 = +HEAPF32[i6 + 72 >> 2] - d9;
 d10 = +HEAPF32[i6 + 60 >> 2];
 d7 = +HEAPF32[i6 + 76 >> 2] - d10;
 d5 = +HEAPF32[i6 + 64 >> 2];
 d12 = +HEAPF32[i6 + 80 >> 2] - d5;
 d9 = +HEAPF32[i6 + 88 >> 2] - d9;
 d10 = +HEAPF32[i6 + 92 >> 2] - d10;
 d5 = +HEAPF32[i6 + 96 >> 2] - d5;
 d4 = d7 * d5 - d12 * d10;
 d5 = d12 * d9 - d11 * d5;
 d9 = d11 * d10 - d7 * d9;
 i6 = i1 + 4 | 0;
 i8 = i1 + 8 | 0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 d7 = 1.0 / +Math_sqrt(+(d9 * d9 + (d4 * d4 + d5 * d5)));
 d4 = d7 * d4;
 HEAPF32[i1 >> 2] = d4;
 d5 = d7 * d5;
 HEAPF32[i6 >> 2] = d5;
 d7 = d9 * d7;
 HEAPF32[i8 >> 2] = d7;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 >> 2] = d4 * -1.0;
 HEAPF32[i6 >> 2] = d5 * -1.0;
 HEAPF32[i8 >> 2] = d7 * -1.0;
 STACKTOP = i2;
 return;
}
function __ZN14btCapsuleShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, d15 = 0.0;
 i3 = STACKTOP;
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 i8 = i1 + 28 | 0;
 i6 = i1 + 32 | 0;
 i4 = i1 + 36 | 0;
 i10 = i1 + 12 | 0;
 d11 = (d9 + +HEAPF32[i8 >> 2]) / +HEAPF32[i10 >> 2];
 i14 = i1 + 16 | 0;
 d15 = (d7 + +HEAPF32[i6 >> 2]) / +HEAPF32[i14 >> 2];
 i12 = i1 + 20 | 0;
 d13 = (d5 + +HEAPF32[i4 >> 2]) / +HEAPF32[i12 >> 2];
 __ZN21btConvexInternalShape15setLocalScalingERK9btVector3(i1, i2);
 d7 = d15 * +HEAPF32[i14 >> 2] - d7;
 d5 = d13 * +HEAPF32[i12 >> 2] - d5;
 HEAPF32[i8 >> 2] = d11 * +HEAPF32[i10 >> 2] - d9;
 HEAPF32[i6 >> 2] = d7;
 HEAPF32[i4 >> 2] = d5;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN10btBoxShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, d15 = 0.0;
 i3 = STACKTOP;
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 i8 = i1 + 28 | 0;
 i6 = i1 + 32 | 0;
 i4 = i1 + 36 | 0;
 i10 = i1 + 12 | 0;
 d11 = (d9 + +HEAPF32[i8 >> 2]) / +HEAPF32[i10 >> 2];
 i14 = i1 + 16 | 0;
 d15 = (d7 + +HEAPF32[i6 >> 2]) / +HEAPF32[i14 >> 2];
 i12 = i1 + 20 | 0;
 d13 = (d5 + +HEAPF32[i4 >> 2]) / +HEAPF32[i12 >> 2];
 __ZN21btConvexInternalShape15setLocalScalingERK9btVector3(i1, i2);
 d7 = d15 * +HEAPF32[i14 >> 2] - d7;
 d5 = d13 * +HEAPF32[i12 >> 2] - d5;
 HEAPF32[i8 >> 2] = d11 * +HEAPF32[i10 >> 2] - d9;
 HEAPF32[i6 >> 2] = d7;
 HEAPF32[i4 >> 2] = d5;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_bii(i2, i5, i3, i6, i7, i8, i10, i9) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0;
 i1 = STACKTOP;
 __ZN20btCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo(i2, i3);
 HEAP32[i2 >> 2] = 459376;
 i4 = i2 + 8 | 0;
 HEAP8[i4] = 0;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = i5;
 HEAP8[i2 + 16 | 0] = i8 & 1;
 HEAP32[i2 + 20 >> 2] = i10;
 HEAP32[i2 + 24 >> 2] = i9;
 i9 = i8 ? i7 : i6;
 i6 = i8 ? i6 : i7;
 if ((i5 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 i2 = i2 + 4 | 0;
 i10 = HEAP32[i2 >> 2] | 0;
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] & 31](i10, i9, i6) | 0)) {
  STACKTOP = i1;
  return;
 }
 i10 = HEAP32[i2 >> 2] | 0;
 HEAP32[i3 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 31](i10, i9, i6) | 0;
 HEAP8[i4] = 1;
 STACKTOP = i1;
 return;
}
function __ZN20btAxisSweep3InternalItED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 447056;
 i3 = i1 + 108 | 0;
 if ((HEAP32[i3 >> 2] | 0) != 0) {
  i4 = i1 + 112 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 255](i5);
  __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
  i4 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 255](i4);
  __Z21btAlignedFreeInternalPv(HEAP32[i3 >> 2] | 0);
 }
 __Z21btAlignedFreeInternalPv(HEAP32[i1 + 88 >> 2] | 0);
 __Z21btAlignedFreeInternalPv(HEAP32[i1 + 84 >> 2] | 0);
 __Z21btAlignedFreeInternalPv(HEAP32[i1 + 80 >> 2] | 0);
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 if ((HEAP8[i1 + 100 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = i1 + 92 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 255](i4);
 __Z21btAlignedFreeInternalPv(HEAP32[i5 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNK20btConvexHullInternal6Int1288toScalarEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i2;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i3 | 0) > -1 | (i3 | 0) == -1 & i4 >>> 0 > 4294967295) {
  i5 = i1;
  d6 = (+(i4 >>> 0) + 4294967296.0 * +(i3 >>> 0)) * 18446744073709552000.0 + (+((HEAP32[i5 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[i5 + 4 >> 2] | 0) >>> 0));
  STACKTOP = i2;
  return +d6;
 } else {
  i8 = i1;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = HEAP32[i8 + 4 >> 2] | 0;
  i7 = _i64Subtract(0, 0, i9 | 0, i8 | 0) | 0;
  i1 = tempRet0;
  i3 = _i64Add((i9 | 0) == 0 & (i8 | 0) == 0 & 1 | 0, 0, ~i4 | 0, ~i3 | 0) | 0;
  i4 = i5;
  HEAP32[i4 >> 2] = i7;
  HEAP32[i4 + 4 >> 2] = i1;
  i4 = i5 + 8 | 0;
  HEAP32[i4 >> 2] = i3;
  HEAP32[i4 + 4 >> 2] = tempRet0;
  d6 = -+__ZNK20btConvexHullInternal6Int1288toScalarEv(i5);
  STACKTOP = i2;
  return +d6;
 }
 return 0.0;
}
function __ZNK15btTriangleShape16getPlaneEquationEiR9btVector3S1_(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i4 = STACKTOP;
 d6 = +HEAPF32[i2 + 56 >> 2];
 d10 = +HEAPF32[i2 + 72 >> 2] - d6;
 d9 = +HEAPF32[i2 + 60 >> 2];
 d5 = +HEAPF32[i2 + 76 >> 2] - d9;
 d7 = +HEAPF32[i2 + 64 >> 2];
 d11 = +HEAPF32[i2 + 80 >> 2] - d7;
 d6 = +HEAPF32[i2 + 88 >> 2] - d6;
 d9 = +HEAPF32[i2 + 92 >> 2] - d9;
 d7 = +HEAPF32[i2 + 96 >> 2] - d7;
 d8 = d5 * d7 - d11 * d9;
 d7 = d11 * d6 - d10 * d7;
 d6 = d10 * d9 - d5 * d6;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 d5 = 1.0 / +Math_sqrt(+(d6 * d6 + (d8 * d8 + d7 * d7)));
 HEAPF32[i3 >> 2] = d5 * d8;
 HEAPF32[i3 + 4 >> 2] = d5 * d7;
 HEAPF32[i3 + 8 >> 2] = d6 * d5;
 i3 = i2 + 56 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN20btAxisSweep3InternalItE7rayTestERK9btVector3S3_R23btBroadphaseRayCallbackS3_S3_(i5, i6, i4, i2, i7, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i9 = 0;
 i1 = STACKTOP;
 i3 = HEAP32[i5 + 108 >> 2] | 0;
 if ((i3 | 0) != 0) {
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 7](i3, i6, i4, i2, i7, i8);
  STACKTOP = i1;
  return;
 }
 i4 = i5 + 56 | 0;
 i8 = HEAP16[i4 >> 1] | 0;
 if (!((i8 & 65535) << 1 >>> 0 > 1)) {
  STACKTOP = i1;
  return;
 }
 i3 = i5 + 68 | 0;
 i5 = i5 + 60 | 0;
 i7 = 1;
 i6 = 2;
 while (1) {
  i9 = HEAP32[i3 >> 2] | 0;
  if (!((HEAP16[i9 + (i7 << 2) >> 1] & 1) == 0)) {
   FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, (HEAP32[i5 >> 2] | 0) + ((HEAPU16[i9 + (i7 << 2) + 2 >> 1] | 0) << 6) | 0) | 0;
   i8 = HEAP16[i4 >> 1] | 0;
  }
  i7 = i6 & 65535;
  if (!(i7 >>> 0 < ((i8 & 65535) << 1 | 1) >>> 0)) {
   break;
  }
  i6 = i6 + 1 << 16 >> 16;
 }
 STACKTOP = i1;
 return;
}
function __ZNK17btConvexHullShape7getEdgeEiR9btVector3S1_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i7 = HEAP32[i3 + 96 >> 2] | 0;
 i11 = (i4 | 0) % (i7 | 0) | 0;
 i7 = (i4 + 1 | 0) % (i7 | 0) | 0;
 i10 = i3 + 104 | 0;
 i12 = HEAP32[i10 >> 2] | 0;
 i4 = i3 + 12 | 0;
 i9 = i3 + 16 | 0;
 d5 = +HEAPF32[i12 + (i11 << 4) + 4 >> 2] * +HEAPF32[i9 >> 2];
 i8 = i3 + 20 | 0;
 d6 = +HEAPF32[i12 + (i11 << 4) + 8 >> 2] * +HEAPF32[i8 >> 2];
 HEAPF32[i2 >> 2] = +HEAPF32[i12 + (i11 << 4) >> 2] * +HEAPF32[i4 >> 2];
 HEAPF32[i2 + 4 >> 2] = d5;
 HEAPF32[i2 + 8 >> 2] = d6;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 i3 = HEAP32[i10 >> 2] | 0;
 d6 = +HEAPF32[i3 + (i7 << 4) + 4 >> 2] * +HEAPF32[i9 >> 2];
 d5 = +HEAPF32[i3 + (i7 << 4) + 8 >> 2] * +HEAPF32[i8 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i3 + (i7 << 4) >> 2] * +HEAPF32[i4 >> 2];
 HEAPF32[i1 + 4 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZN23btConvexConvexAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i5, i6) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 36) | 0;
 if ((i3 | 0) == 0) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i8 = HEAP32[i1 + 4 >> 2] | 0;
 i10 = HEAP32[i4 + 12 >> 2] | 0;
 i9 = HEAP32[i4 + 8 >> 2] | 0;
 i7 = HEAP32[i4 + 16 >> 2] | 0;
 i4 = HEAP32[i4 + 20 >> 2] | 0;
 __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i3, i1, i5, i6);
 HEAP32[i3 >> 2] = 458976;
 HEAP32[i3 + 8 >> 2] = i10;
 HEAP32[i3 + 12 >> 2] = i9;
 HEAP8[i3 + 16 | 0] = 0;
 HEAP32[i3 + 20 >> 2] = i8;
 HEAP8[i3 + 24 | 0] = 0;
 HEAP32[i3 + 28 >> 2] = i7;
 HEAP32[i3 + 32 >> 2] = i4;
 i6 = i3;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZNK14btCapsuleShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i4;
 i12 = HEAP32[i3 + 52 >> 2] | 0;
 d6 = +HEAPF32[i3 + (((i12 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 HEAPF32[i10 >> 2] = d6;
 i9 = i10 + 4 | 0;
 HEAPF32[i9 >> 2] = d6;
 i8 = i10 + 8 | 0;
 HEAPF32[i8 >> 2] = d6;
 HEAPF32[i10 + 12 >> 2] = 0.0;
 i11 = i10 + (i12 << 2) | 0;
 HEAPF32[i11 >> 2] = +HEAPF32[i3 + (i12 << 2) + 28 >> 2] + +HEAPF32[i11 >> 2];
 d6 = (+HEAPF32[i10 >> 2] + .03999999910593033) * 2.0;
 d5 = (+HEAPF32[i9 >> 2] + .03999999910593033) * 2.0;
 d7 = (+HEAPF32[i8 >> 2] + .03999999910593033) * 2.0;
 d6 = d6 * d6;
 d5 = d5 * d5;
 d7 = d7 * d7;
 d2 = d2 * .0833333283662796;
 HEAPF32[i1 >> 2] = d2 * (d5 + d7);
 HEAPF32[i1 + 4 >> 2] = d2 * (d6 + d7);
 HEAPF32[i1 + 8 >> 2] = d2 * (d6 + d5);
 STACKTOP = i4;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2;
 if ((i1 | 0) == (i5 | 0)) {
  i7 = 1;
  STACKTOP = i2;
  return i7 | 0;
 }
 if ((i5 | 0) == 0) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i5 = ___dynamic_cast(i5, 459944, 46e4, 0) | 0;
 if ((i5 | 0) == 0) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i7 = i3 + 0 | 0;
 i6 = i7 + 56 | 0;
 do {
  HEAP32[i7 >> 2] = 0;
  i7 = i7 + 4 | 0;
 } while ((i7 | 0) < (i6 | 0));
 HEAP32[i3 >> 2] = i5;
 HEAP32[i3 + 8 >> 2] = i1;
 HEAP32[i3 + 12 >> 2] = -1;
 HEAP32[i3 + 48 >> 2] = 1;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, i3, HEAP32[i4 >> 2] | 0, 1);
 if ((HEAP32[i3 + 24 >> 2] | 0) != 1) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP32[i4 >> 2] = HEAP32[i3 + 16 >> 2];
 i7 = 1;
 STACKTOP = i2;
 return i7 | 0;
}
function __ZN22btVoronoiSimplexSolver9inSimplexERK9btVector3(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i1 = STACKTOP;
 i8 = HEAP32[i3 >> 2] | 0;
 if ((i8 | 0) > 0) {
  d5 = +HEAPF32[i2 >> 2];
  d6 = +HEAPF32[i2 + 4 >> 2];
  d7 = +HEAPF32[i2 + 8 >> 2];
  d4 = +HEAPF32[i3 + 308 >> 2];
  i10 = 0;
  i9 = 0;
  do {
   d13 = d5 - +HEAPF32[i3 + (i9 << 4) + 4 >> 2];
   d12 = d6 - +HEAPF32[i3 + (i9 << 4) + 8 >> 2];
   d11 = d7 - +HEAPF32[i3 + (i9 << 4) + 12 >> 2];
   i10 = i10 | d13 * d13 + d12 * d12 + d11 * d11 <= d4;
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i8 | 0));
 } else {
  i10 = 0;
 }
 if ((+HEAPF32[i2 + 12 >> 2] == +HEAPF32[i3 + 304 >> 2] ? +HEAPF32[i2 + 8 >> 2] == +HEAPF32[i3 + 300 >> 2] : 0) ? +HEAPF32[i2 + 4 >> 2] == +HEAPF32[i3 + 296 >> 2] : 0) {
  i2 = +HEAPF32[i2 >> 2] == +HEAPF32[i3 + 292 >> 2];
 } else {
  i2 = 0;
 }
 STACKTOP = i1;
 return i2 | i10 | 0;
}
function __ZNK10btBoxShape8getPlaneER9btVector3S1_i(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i5 + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 116 >> 2] & 63](i2, i11, i4);
 d10 = +HEAPF32[i11 >> 2];
 d9 = +HEAPF32[i11 + 4 >> 2];
 d8 = +HEAPF32[i11 + 8 >> 2];
 HEAPF32[i3 >> 2] = d10;
 HEAPF32[i3 + 4 >> 2] = d9;
 HEAPF32[i3 + 8 >> 2] = d8;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] | 0;
 HEAPF32[i7 >> 2] = -d10;
 HEAPF32[i7 + 4 >> 2] = -d9;
 HEAPF32[i7 + 8 >> 2] = -d8;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i4 & 63](i6, i2, i7);
 HEAP32[i1 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 STACKTOP = i5;
 return;
}
function __ZN16btCollisionWorldC2EP12btDispatcherP21btBroadphaseInterfaceP24btCollisionConfiguration(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 448712;
 HEAP8[i1 + 20 | 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = i4;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 1;
 HEAPF32[i1 + 40 >> 2] = 1.0;
 HEAP8[i1 + 44 | 0] = 1;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP8[i1 + 52 | 0] = 0;
 HEAP8[i1 + 53 | 0] = 1;
 HEAP8[i1 + 54 | 0] = 1;
 HEAPF32[i1 + 56 >> 2] = .03999999910593033;
 HEAP8[i1 + 60 | 0] = 0;
 HEAPF32[i1 + 64 >> 2] = 0.0;
 i4 = i1 + 68 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 76 >> 2] = i3;
 HEAP32[i1 + 80 >> 2] = 0;
 HEAP8[i1 + 84 | 0] = 1;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
 HEAP32[i1 + 72 >> 2] = i3;
 HEAP32[i4 >> 2] = i3;
 STACKTOP = i5;
 return;
}
function __ZNK21btConvexInternalShape24localGetSupportingVertexERK9btVector3(i3, i1, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i3, i1, i5);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d4 = +HEAPF32[i5 >> 2];
 d6 = +HEAPF32[i5 + 4 >> 2];
 d7 = +HEAPF32[i5 + 8 >> 2];
 i5 = d4 * d4 + d6 * d6 + d7 * d7 < 1.4210854715202004e-14;
 d7 = i5 ? -1.0 : d7;
 d6 = i5 ? -1.0 : d6;
 d9 = i5 ? -1.0 : d4;
 d4 = 1.0 / +Math_sqrt(+(d7 * d7 + (d9 * d9 + d6 * d6)));
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 HEAPF32[i3 >> 2] = d4 * d9 * d8 + +HEAPF32[i3 >> 2];
 i5 = i3 + 4 | 0;
 HEAPF32[i5 >> 2] = d8 * d4 * d6 + +HEAPF32[i5 >> 2];
 i5 = i3 + 8 | 0;
 HEAPF32[i5 >> 2] = d8 * d4 * d7 + +HEAPF32[i5 >> 2];
 STACKTOP = i2;
 return;
}
function __ZNK17btConvexHullShape24localGetSupportingVertexERK9btVector3(i3, i1, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i3, i1, i5);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d4 = +HEAPF32[i5 >> 2];
 d6 = +HEAPF32[i5 + 4 >> 2];
 d7 = +HEAPF32[i5 + 8 >> 2];
 i5 = d4 * d4 + d6 * d6 + d7 * d7 < 1.4210854715202004e-14;
 d7 = i5 ? -1.0 : d7;
 d6 = i5 ? -1.0 : d6;
 d9 = i5 ? -1.0 : d4;
 d4 = 1.0 / +Math_sqrt(+(d7 * d7 + (d9 * d9 + d6 * d6)));
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 HEAPF32[i3 >> 2] = d4 * d9 * d8 + +HEAPF32[i3 >> 2];
 i5 = i3 + 4 | 0;
 HEAPF32[i5 >> 2] = d8 * d4 * d6 + +HEAPF32[i5 >> 2];
 i5 = i3 + 8 | 0;
 HEAPF32[i5 >> 2] = d8 * d4 * d7 + +HEAPF32[i5 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItE7setAabbEP17btBroadphaseProxyRK9btVector3S5_P12btDispatcher(i6, i1, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i7 = 0;
 i2 = STACKTOP;
 i7 = i1 + 16 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i7 = i1 + 32 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 __ZN20btAxisSweep3InternalItE12updateHandleEtRK9btVector3S3_P12btDispatcher(i6, HEAP32[i1 + 12 >> 2] & 65535, i3, i4, i5);
 i6 = HEAP32[i6 + 108 >> 2] | 0;
 if ((i6 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 31](i6, HEAP32[i1 + 60 >> 2] | 0, i3, i4, i5);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld16removeConstraintEP17btTypedConstraint(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 i3 = i5 + 184 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 L1 : do {
  if ((i2 | 0) > 0) {
   i6 = i5 + 192 | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   i7 = 0;
   while (1) {
    i8 = i5 + (i7 << 2) | 0;
    i9 = i7 + 1 | 0;
    if ((HEAP32[i8 >> 2] | 0) == (i1 | 0)) {
     break;
    }
    if ((i9 | 0) < (i2 | 0)) {
     i7 = i9;
    } else {
     break L1;
    }
   }
   if ((i7 | 0) < (i2 | 0)) {
    i9 = i2 + -1 | 0;
    HEAP32[i8 >> 2] = HEAP32[i5 + (i9 << 2) >> 2];
    HEAP32[(HEAP32[i6 >> 2] | 0) + (i9 << 2) >> 2] = i1;
    HEAP32[i3 >> 2] = i9;
   }
  }
 } while (0);
 __ZN11btRigidBody19removeConstraintRefEP17btTypedConstraint(HEAP32[i1 + 24 >> 2] | 0, i1);
 __ZN11btRigidBody19removeConstraintRefEP17btTypedConstraint(HEAP32[i1 + 28 >> 2] | 0, i1);
 STACKTOP = i4;
 return;
}
function __ZN14btCapsuleShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i3 = STACKTOP;
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 i8 = i1 + 28 | 0;
 d10 = d10 + +HEAPF32[i8 >> 2];
 i5 = i1 + 32 | 0;
 d7 = d7 + +HEAPF32[i5 >> 2];
 i4 = i1 + 36 | 0;
 d11 = d11 + +HEAPF32[i4 >> 2];
 HEAPF32[i1 + 44 >> 2] = d2;
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d2 = d11 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 HEAPF32[i8 >> 2] = d10 - d9;
 HEAPF32[i5 >> 2] = d7 - d6;
 HEAPF32[i4 >> 2] = d2;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN10btBoxShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i3 = STACKTOP;
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 i8 = i1 + 28 | 0;
 d10 = d10 + +HEAPF32[i8 >> 2];
 i5 = i1 + 32 | 0;
 d7 = d7 + +HEAPF32[i5 >> 2];
 i4 = i1 + 36 | 0;
 d11 = d11 + +HEAPF32[i4 >> 2];
 HEAPF32[i1 + 44 >> 2] = d2;
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 d2 = d11 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 HEAPF32[i8 >> 2] = d10 - d9;
 HEAPF32[i5 >> 2] = d7 - d6;
 HEAPF32[i4 >> 2] = d2;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 i3 = i6 + 8 | 0;
 if ((HEAP32[i3 >> 2] | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i2 = i6 + 16 | 0;
 i7 = 0;
 L4 : while (1) {
  while (1) {
   i9 = HEAP32[i2 >> 2] | 0;
   i8 = i9 + (i7 << 4) | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, i8) | 0)) {
    break;
   }
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, HEAP32[i8 >> 2] | 0, HEAP32[i9 + (i7 << 4) + 4 >> 2] | 0, i4) | 0;
   HEAP32[113812] = (HEAP32[113812] | 0) + -1;
   if ((i7 | 0) >= (HEAP32[i3 >> 2] | 0)) {
    i2 = 7;
    break L4;
   }
  }
  i7 = i7 + 1 | 0;
  if ((i7 | 0) >= (HEAP32[i3 >> 2] | 0)) {
   i2 = 7;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i1;
  return;
 }
}
function __ZNK10btBoxShape7getEdgeEiR9btVector3S1_(i1, i6, i3, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 switch (i6 | 0) {
 case 5:
  {
   i5 = 1;
   break;
  }
 case 6:
  {
   i5 = 2;
   break;
  }
 case 2:
  {
   i5 = 1;
   i6 = 3;
   break;
  }
 case 1:
  {
   i5 = 0;
   i6 = 2;
   break;
  }
 case 0:
  {
   i5 = 0;
   i6 = 1;
   break;
  }
 case 7:
  {
   i5 = 3;
   break;
  }
 case 8:
  {
   i5 = 4;
   i6 = 5;
   break;
  }
 case 9:
  {
   i5 = 4;
   i6 = 6;
   break;
  }
 case 10:
  {
   i5 = 5;
   i6 = 7;
   break;
  }
 case 11:
  {
   i5 = 6;
   i6 = 7;
   break;
  }
 case 3:
  {
   i5 = 2;
   break;
  }
 case 4:
  {
   i5 = 0;
   break;
  }
 default:
  {
   i5 = 0;
   i6 = 0;
  }
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] & 63](i1, i5, i3);
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] & 63](i1, i6, i4);
 STACKTOP = i2;
 return;
}
function __ZN13BenchmarkDemoD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 443408;
 __ZN13BenchmarkDemo11exitPhysicsEv(i1);
 i5 = i1 + 36 | 0;
 i4 = i1 + 44 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 48 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i3 = i1 + 16 | 0;
 i4 = i1 + 24 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i5 = i1 + 28 | 0;
 if ((i6 | 0) == 0) {
  HEAP8[i5] = 1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  i6 = i1 + 20 | 0;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i5] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i6);
 }
 HEAP32[i4 >> 2] = 0;
 HEAP8[i5] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i6 = i1 + 20 | 0;
 HEAP32[i6 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN16btDbvtBroadphase8aabbTestERK9btVector3S2_R24btBroadphaseAabbCallback(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5;
 HEAP32[i6 >> 2] = 451856;
 HEAP32[i6 + 4 >> 2] = i4;
 HEAP32[i7 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i4 = i7 + 16 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 __ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(0, HEAP32[i1 + 4 >> 2] | 0, i7, i6);
 __ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(0, HEAP32[i1 + 44 >> 2] | 0, i7, i6);
 STACKTOP = i5;
 return;
}
function __ZN16btDbvtBroadphase12destroyProxyEP17btBroadphaseProxyP12btDispatcher(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i6 = i3 + 60 | 0;
 if ((HEAP32[i6 >> 2] | 0) == 2) {
  __ZN6btDbvt6removeEP10btDbvtNode(i1 + 44 | 0, HEAP32[i3 + 48 >> 2] | 0);
 } else {
  __ZN6btDbvt6removeEP10btDbvtNode(i1 + 4 | 0, HEAP32[i3 + 48 >> 2] | 0);
 }
 i5 = i3 + 52 | 0;
 i9 = HEAP32[i5 >> 2] | 0;
 i7 = i3 + 56 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i9 | 0) == 0) {
  HEAP32[i1 + (HEAP32[i6 >> 2] << 2) + 84 >> 2] = i8;
 } else {
  HEAP32[i9 + 56 >> 2] = i8;
 }
 i6 = HEAP32[i7 >> 2] | 0;
 if ((i6 | 0) != 0) {
  HEAP32[i6 + 52 >> 2] = HEAP32[i5 >> 2];
 }
 i9 = HEAP32[i1 + 96 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 63](i9, i3, i4);
 __Z21btAlignedFreeInternalPv(i3);
 HEAP8[i1 + 154 | 0] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK13btSphereShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0;
 i5 = STACKTOP;
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] & 7](i4);
 i4 = i3 + 48 | 0;
 i9 = i3 + 52 | 0;
 d11 = +HEAPF32[i9 >> 2] - d7;
 i3 = i3 + 56 | 0;
 d10 = +HEAPF32[i3 >> 2] - d6;
 HEAPF32[i2 >> 2] = +HEAPF32[i4 >> 2] - d8;
 HEAPF32[i2 + 4 >> 2] = d11;
 HEAPF32[i2 + 8 >> 2] = d10;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 d7 = d7 + +HEAPF32[i9 >> 2];
 d6 = d6 + +HEAPF32[i3 >> 2];
 HEAPF32[i1 >> 2] = d8 + +HEAPF32[i4 >> 2];
 HEAPF32[i1 + 4 >> 2] = d7;
 HEAPF32[i1 + 8 >> 2] = d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZNK14btQuantizedBvh25reportRayOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_(i7, i6, i5, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i2 + 16 | 0;
 i3 = i2;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 i8 = i7 + 60 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 if ((HEAP8[i8] | 0) == 0) {
  __ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i7, i6, i5, i1, i4, i3, 0, 0);
  STACKTOP = i2;
  return;
 } else {
  __ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i7, i6, i5, i1, i4, i3, 0, HEAP32[i7 + 56 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i5, i4, i3, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) != (HEAP32[i4 + 8 >> 2] | 0)) {
  i6 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 63](i6, i4, i3, i1);
  STACKTOP = i2;
  return;
 }
 i5 = i4 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i5 >> 2] = i3;
  HEAP32[i4 + 24 >> 2] = i1;
  HEAP32[i4 + 36 >> 2] = 1;
  STACKTOP = i2;
  return;
 }
 if ((i6 | 0) != (i3 | 0)) {
  i6 = i4 + 36 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i4 + 24 >> 2] = 2;
  HEAP8[i4 + 54 | 0] = 1;
  STACKTOP = i2;
  return;
 }
 i3 = i4 + 24 | 0;
 if ((HEAP32[i3 >> 2] | 0) != 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_b(i1, i6, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i1, i6, i3, i4);
 HEAP32[i1 >> 2] = 458592;
 HEAP8[i1 + 8 | 0] = i5 & 1;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i1 + 12 >> 2] = 458624;
 i7 = i1 + 60 | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i1 + 64 >> 2] = 0;
 i8 = i5 ? i4 : i3;
 HEAP32[i1 + 16 >> 2] = i8;
 i5 = i5 ? i3 : i4;
 HEAP32[i1 + 20 >> 2] = i5;
 i8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 31](i6, i8, i5) | 0;
 HEAP32[i1 + 76 >> 2] = i8;
 i7 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 127](i7, i8);
 STACKTOP = i2;
 return;
}
function __ZNK15btTriangleShape37localGetSupportingVertexWithoutMarginERK9btVector3(i3, i1, i7) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 d9 = +HEAPF32[i7 >> 2];
 d8 = +HEAPF32[i7 + 4 >> 2];
 d4 = +HEAPF32[i7 + 8 >> 2];
 d6 = d9 * +HEAPF32[i1 + 56 >> 2] + d8 * +HEAPF32[i1 + 60 >> 2] + d4 * +HEAPF32[i1 + 64 >> 2];
 d5 = d9 * +HEAPF32[i1 + 72 >> 2] + d8 * +HEAPF32[i1 + 76 >> 2] + d4 * +HEAPF32[i1 + 80 >> 2];
 d4 = d9 * +HEAPF32[i1 + 88 >> 2] + d8 * +HEAPF32[i1 + 92 >> 2] + d4 * +HEAPF32[i1 + 96 >> 2];
 if (d6 < d5) {
  i7 = d5 < d4 ? 2 : 1;
 } else {
  i7 = d6 < d4 ? 2 : 0;
 }
 i7 = i1 + (i7 << 4) + 56 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAllocP12btDispatcher(i10, i9, i8, i7, i1, i5, i4, i3, i6, i2, i11) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i11 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(446072);
 +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 3](i10, i9, i8, i7, i1, i5, i4, i3, i6, i2);
 +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 3](i10, i9, i8, i7, i1, i5, i4, i3, i6, i2);
 +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 3](i10, i9, i8, i7, i1, i5, i4, i3, i6, i2);
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i11;
 return 0.0;
}
function __ZNK20btPersistentManifold13getCacheEntryERK15btManifoldPoint(i2, i7) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0;
 i1 = STACKTOP;
 d8 = +HEAPF32[i2 + 1120 >> 2];
 i3 = HEAP32[i2 + 1116 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  i11 = -1;
  STACKTOP = i1;
  return i11 | 0;
 }
 d4 = +HEAPF32[i7 >> 2];
 d5 = +HEAPF32[i7 + 4 >> 2];
 d6 = +HEAPF32[i7 + 8 >> 2];
 i10 = 0;
 i11 = -1;
 d9 = d8 * d8;
 while (1) {
  d13 = +HEAPF32[i2 + (i10 * 276 | 0) + 4 >> 2] - d4;
  d12 = +HEAPF32[i2 + (i10 * 276 | 0) + 8 >> 2] - d5;
  d8 = +HEAPF32[i2 + (i10 * 276 | 0) + 12 >> 2] - d6;
  d8 = d13 * d13 + d12 * d12 + d8 * d8;
  i7 = d8 < d9;
  i11 = i7 ? i10 : i11;
  i10 = i10 + 1 | 0;
  if ((i10 | 0) == (i3 | 0)) {
   break;
  } else {
   d9 = i7 ? d8 : d9;
  }
 }
 STACKTOP = i1;
 return i11 | 0;
}
function __ZN17btGjkPairDetectorC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i1, i3, i2, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 HEAP32[i1 >> 2] = 453384;
 HEAPF32[i1 + 4 >> 2] = 0.0;
 HEAPF32[i1 + 8 >> 2] = 1.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 HEAP32[i1 + 20 >> 2] = i5;
 HEAP32[i1 + 24 >> 2] = i4;
 HEAP32[i1 + 28 >> 2] = i3;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 36 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAPF32[i1 + 44 >> 2] = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 HEAPF32[i1 + 48 >> 2] = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 7](i2);
 HEAP8[i1 + 52 | 0] = 0;
 HEAP32[i1 + 60 >> 2] = -1;
 HEAP32[i1 + 72 >> 2] = 1;
 STACKTOP = i6;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_(i6, i7, i4, i1, i3) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i6, i4, i1, i3);
 HEAP32[i6 >> 2] = 458136;
 i5 = i6 + 8 | 0;
 HEAP8[i5] = 0;
 i4 = i6 + 12 | 0;
 HEAP32[i4 >> 2] = i7;
 if ((i7 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 i6 = i6 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 31](i7, i1, i3) | 0)) {
  STACKTOP = i2;
  return;
 }
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, i1, i3) | 0;
 HEAP8[i5] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i7, i4, i2, i3) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i5 = STACKTOP;
 if ((i3 | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i6 = i7 + 28 | 0;
 i1 = i7 + 32 | 0;
 i7 = i7 + 36 | 0;
 i8 = 0;
 do {
  d9 = +HEAPF32[i6 >> 2];
  d10 = +HEAPF32[i1 >> 2];
  d10 = +HEAPF32[i4 + (i8 << 4) + 4 >> 2] >= 0.0 ? d10 : -d10;
  d11 = +HEAPF32[i7 >> 2];
  d11 = +HEAPF32[i4 + (i8 << 4) + 8 >> 2] >= 0.0 ? d11 : -d11;
  HEAPF32[i2 + (i8 << 4) >> 2] = +HEAPF32[i4 + (i8 << 4) >> 2] >= 0.0 ? d9 : -d9;
  HEAPF32[i2 + (i8 << 4) + 4 >> 2] = d10;
  HEAPF32[i2 + (i8 << 4) + 8 >> 2] = d11;
  HEAPF32[i2 + (i8 << 4) + 12 >> 2] = 0.0;
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != (i3 | 0));
 STACKTOP = i5;
 return;
}
function __ZN15CProfileManager12Stop_ProfileEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = HEAP32[114964] | 0;
 i4 = i3 + 16 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
 HEAP32[i4 >> 2] = i5;
 if ((i5 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do {
  if ((HEAP32[i3 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i2 | 0, 0) | 0;
   i6 = HEAP32[114952] | 0;
   i5 = i3 + 8 | 0;
   HEAPF32[i5 >> 2] = +(((HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[i6 + 4 >> 2] | 0) + (((HEAP32[i2 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i3 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i5 >> 2];
   if ((HEAP32[i4 >> 2] | 0) == 0) {
    i3 = HEAP32[114964] | 0;
    break;
   } else {
    STACKTOP = i1;
    return;
   }
  }
 } while (0);
 HEAP32[114964] = HEAP32[i3 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN23btDiscreteDynamicsWorld15removeRigidBodyEP11btRigidBody(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 i3 = i5 + 204 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 L1 : do {
  if ((i2 | 0) > 0) {
   i7 = i5 + 212 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
   i8 = 0;
   while (1) {
    i9 = i6 + (i8 << 2) | 0;
    i10 = i8 + 1 | 0;
    if ((HEAP32[i9 >> 2] | 0) == (i1 | 0)) {
     break;
    }
    if ((i10 | 0) < (i2 | 0)) {
     i8 = i10;
    } else {
     break L1;
    }
   }
   if ((i8 | 0) < (i2 | 0)) {
    i10 = i2 + -1 | 0;
    HEAP32[i9 >> 2] = HEAP32[i6 + (i10 << 2) >> 2];
    HEAP32[(HEAP32[i7 >> 2] | 0) + (i10 << 2) >> 2] = i1;
    HEAP32[i3 >> 2] = i10;
   }
  }
 } while (0);
 __ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject(i5, i1);
 STACKTOP = i4;
 return;
}
function __ZN14btAngularLimit4testEf(i7, d6) {
 i7 = i7 | 0;
 d6 = +d6;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d8 = 0.0;
 i1 = STACKTOP;
 i3 = i7 + 20 | 0;
 HEAPF32[i3 >> 2] = 0.0;
 i4 = i7 + 24 | 0;
 HEAPF32[i4 >> 2] = 0.0;
 i2 = i7 + 28 | 0;
 HEAP8[i2] = 0;
 i5 = i7 + 4 | 0;
 if (!(+HEAPF32[i5 >> 2] >= 0.0)) {
  STACKTOP = i1;
  return;
 }
 d6 = +_fmod(+(d6 - +HEAPF32[i7 >> 2]), 6.2831854820251465);
 if (!(d6 < -3.1415927410125732)) {
  if (d6 > 3.1415927410125732) {
   d6 = d6 + -6.2831854820251465;
  }
 } else {
  d6 = d6 + 6.2831854820251465;
 }
 d8 = +HEAPF32[i5 >> 2];
 if (d6 < -d8) {
  HEAP8[i2] = 1;
  HEAPF32[i3 >> 2] = -(d6 + d8);
  HEAPF32[i4 >> 2] = 1.0;
  STACKTOP = i1;
  return;
 }
 if (!(d6 > d8)) {
  STACKTOP = i1;
  return;
 }
 HEAP8[i2] = 1;
 HEAPF32[i3 >> 2] = d8 - d6;
 HEAPF32[i4 >> 2] = -1.0;
 STACKTOP = i1;
 return;
}
function __ZNK13btSphereShape24localGetSupportingVertexERK9btVector3(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, d3 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 63](i4, i1, i5);
 d3 = +HEAPF32[i5 >> 2];
 d6 = +HEAPF32[i5 + 4 >> 2];
 d7 = +HEAPF32[i5 + 8 >> 2];
 i5 = d3 * d3 + d6 * d6 + d7 * d7 < 1.4210854715202004e-14;
 d7 = i5 ? -1.0 : d7;
 d6 = i5 ? -1.0 : d6;
 d9 = i5 ? -1.0 : d3;
 d3 = 1.0 / +Math_sqrt(+(d7 * d7 + (d9 * d9 + d6 * d6)));
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 7](i1);
 HEAPF32[i4 >> 2] = d3 * d9 * d8 + +HEAPF32[i4 >> 2];
 i5 = i4 + 4 | 0;
 HEAPF32[i5 >> 2] = d8 * d3 * d6 + +HEAPF32[i5 >> 2];
 i5 = i4 + 8 | 0;
 HEAPF32[i5 >> 2] = d8 * d3 * d7 + +HEAPF32[i5 >> 2];
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape9getVertexEiR9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0;
 i4 = STACKTOP;
 d11 = +HEAPF32[i3 + 28 >> 2];
 d10 = +HEAPF32[i3 + 32 >> 2];
 d5 = +HEAPF32[i3 + 36 >> 2];
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 d8 = d11 + d8;
 d6 = d10 + d6;
 d5 = d5 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 i9 = i2 & 1;
 i7 = i2 >>> 1 & 1;
 i3 = i2 >>> 2 & 1;
 HEAPF32[i1 >> 2] = +(i9 ^ 1 | 0) * d8 - +(i9 | 0) * d8;
 HEAPF32[i1 + 4 >> 2] = +(i7 ^ 1 | 0) * d6 - +(i7 | 0) * d6;
 HEAPF32[i1 + 8 >> 2] = +(i3 ^ 1 | 0) * d5 - +(i3 | 0) * d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN23btDiscreteDynamicsWorld10setGravityERK9btVector3(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = i4 + 220 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i3 = i4 + 204 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i4 + 212 | 0;
 i5 = 0;
 do {
  i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  i8 = HEAP32[i7 + 216 >> 2] | 0;
  if (!((i8 | 0) == 2 | (i8 | 0) == 5) ? (HEAP32[i7 + 496 >> 2] & 1 | 0) == 0 : 0) {
   __ZN11btRigidBody10setGravityERK9btVector3(i7, i1);
   i6 = HEAP32[i3 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i6 | 0));
 STACKTOP = i2;
 return;
}
function __ZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 457832;
 HEAP32[i6 + 4 >> 2] = i4;
 i4 = i6 + 8 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i4 = i6 + 24 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i4 = HEAP32[i3 + 48 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 63](i4, i6, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld25predictUnconstraintMotionEf(i4, d1) {
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(445144);
 i3 = i4 + 204 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return;
 }
 i4 = i4 + 212 | 0;
 i5 = 0;
 do {
  i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  if ((HEAP32[i7 + 204 >> 2] & 3 | 0) == 0) {
   __ZN11btRigidBody19integrateVelocitiesEf(i7, d1);
   __ZN11btRigidBody12applyDampingEf(i7, d1);
   __ZN11btRigidBody26predictIntegratedTransformEfR11btTransform(i7, d1, i7 + 68 | 0);
   i6 = HEAP32[i3 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i6 | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld12removeActionEP17btActionInterface(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 i3 = i6 + 248 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i8 = i6 + 256 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i9 = 0;
 while (1) {
  i10 = i7 + (i9 << 2) | 0;
  i6 = i9 + 1 | 0;
  if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
   break;
  }
  if ((i6 | 0) < (i2 | 0)) {
   i9 = i6;
  } else {
   i4 = 7;
   break;
  }
 }
 if ((i4 | 0) == 7) {
  STACKTOP = i5;
  return;
 }
 if ((i9 | 0) >= (i2 | 0)) {
  STACKTOP = i5;
  return;
 }
 i9 = i2 + -1 | 0;
 HEAP32[i10 >> 2] = HEAP32[i7 + (i9 << 2) >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + (i9 << 2) >> 2] = i1;
 HEAP32[i3 >> 2] = i9;
 STACKTOP = i5;
 return;
}
function __ZN14btQuantizedBvh21setQuantizationValuesERK9btVector3S2_f(i1, i4, i3, d2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 d8 = +HEAPF32[i4 >> 2] - d2;
 d6 = +HEAPF32[i4 + 4 >> 2] - d2;
 d5 = +HEAPF32[i4 + 8 >> 2] - d2;
 HEAPF32[i1 + 4 >> 2] = d8;
 HEAPF32[i1 + 8 >> 2] = d6;
 HEAPF32[i1 + 12 >> 2] = d5;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 d9 = +HEAPF32[i3 >> 2] + d2;
 d7 = +HEAPF32[i3 + 4 >> 2] + d2;
 d2 = +HEAPF32[i3 + 8 >> 2] + d2;
 HEAPF32[i1 + 20 >> 2] = d9;
 HEAPF32[i1 + 24 >> 2] = d7;
 HEAPF32[i1 + 28 >> 2] = d2;
 HEAPF32[i1 + 32 >> 2] = 0.0;
 HEAPF32[i1 + 36 >> 2] = 65533.0 / (d9 - d8);
 HEAPF32[i1 + 40 >> 2] = 65533.0 / (d7 - d6);
 HEAPF32[i1 + 44 >> 2] = 65533.0 / (d2 - d5);
 HEAPF32[i1 + 48 >> 2] = 0.0;
 HEAP8[i1 + 60 | 0] = 1;
 return;
}
function __ZN11btRigidBody19removeConstraintRefEP17btTypedConstraint(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 i5 = i2 + 480 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 L1 : do {
  if ((i6 | 0) > 0) {
   i8 = i2 + 488 | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   i9 = 0;
   while (1) {
    i10 = i7 + (i9 << 2) | 0;
    i4 = i9 + 1 | 0;
    if ((HEAP32[i10 >> 2] | 0) == (i3 | 0)) {
     break;
    }
    if ((i4 | 0) < (i6 | 0)) {
     i9 = i4;
    } else {
     break L1;
    }
   }
   if ((i9 | 0) < (i6 | 0)) {
    i6 = i6 + -1 | 0;
    HEAP32[i10 >> 2] = HEAP32[i7 + (i6 << 2) >> 2];
    HEAP32[(HEAP32[i8 >> 2] | 0) + (i6 << 2) >> 2] = i3;
    HEAP32[i5 >> 2] = i6;
   }
  }
 } while (0);
 HEAP32[i2 + 252 >> 2] = (i6 | 0) > 0;
 STACKTOP = i1;
 return;
}
function __ZN16btDbvtBroadphase9resetPoolEP12btDispatcher(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 16 >> 2] | 0) != (0 - (HEAP32[i1 + 56 >> 2] | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 __ZN6btDbvt5clearEv(i1 + 4 | 0);
 __ZN6btDbvt5clearEv(i1 + 44 | 0);
 HEAP8[i1 + 153 | 0] = 0;
 HEAP8[i1 + 154 | 0] = 1;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 124 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 1;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 116 >> 2] = 10;
 HEAP32[i1 + 120 >> 2] = 1;
 i3 = i1 + 128 | 0;
 i1 = i1 + 84 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape24localGetSupportingVertexERK9btVector3(i1, i7, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i2 = 0, d3 = 0.0, d5 = 0.0, d6 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 d9 = +HEAPF32[i7 + 28 >> 2];
 d8 = +HEAPF32[i7 + 32 >> 2];
 d5 = +HEAPF32[i7 + 36 >> 2];
 d3 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 7](i7);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 7](i7);
 d3 = d9 + d3;
 d6 = d8 + d6;
 d5 = d5 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 7](i7);
 d6 = +HEAPF32[i4 + 4 >> 2] >= 0.0 ? d6 : -d6;
 d5 = +HEAPF32[i4 + 8 >> 2] >= 0.0 ? d5 : -d5;
 HEAPF32[i1 >> 2] = +HEAPF32[i4 >> 2] >= 0.0 ? d3 : -d3;
 HEAPF32[i1 + 4 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN28btHashedOverlappingPairCache18addOverlappingPairEP17btBroadphaseProxyS1_(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[113816] = (HEAP32[113816] | 0) + 1;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i3 | 0) == 0) {
  if ((HEAP16[i5 + 6 >> 1] & HEAP16[i4 + 4 >> 1]) << 16 >> 16 == 0) {
   i5 = 0;
   STACKTOP = i2;
   return i5 | 0;
  }
  if ((HEAP16[i4 + 6 >> 1] & HEAP16[i5 + 4 >> 1]) << 16 >> 16 == 0) {
   i5 = 0;
   STACKTOP = i2;
   return i5 | 0;
  }
 } else {
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i4, i5) | 0)) {
   i5 = 0;
   STACKTOP = i2;
   return i5 | 0;
  }
 }
 i5 = __ZN28btHashedOverlappingPairCache15internalAddPairEP17btBroadphaseProxyS1_(i1, i4, i5) | 0;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN20btAxisSweep3InternalItE11createProxyERK9btVector3S3_iPvssP12btDispatcherS4_(i11, i2, i6, i1, i8, i5, i4, i3, i9) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i7 = 0, i10 = 0;
 i7 = STACKTOP;
 i10 = __ZN20btAxisSweep3InternalItE9addHandleERK9btVector3S3_PvssP12btDispatcherS4_(i11, i2, i6, i8, i5, i4, i3, i9) | 0;
 i9 = HEAP32[i11 + 60 >> 2] | 0;
 i10 = i10 & 65535;
 i11 = HEAP32[i11 + 108 >> 2] | 0;
 if ((i11 | 0) == 0) {
  i11 = i9 + (i10 << 6) | 0;
  STACKTOP = i7;
  return i11 | 0;
 }
 HEAP32[i9 + (i10 << 6) + 60 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 3](i11, i2, i6, i1, i8, i5, i4, i3, 0) | 0;
 i11 = i9 + (i10 << 6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResult15addContactPointERKS8_SG_f(i1, i4, i3, d2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = i1 + 4 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = i1 + 20 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i1 + 36 >> 2] = d2;
 HEAP8[i1 + 40 | 0] = 1;
 STACKTOP = i5;
 return;
}
function __ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i4 = STACKTOP;
 d9 = +HEAPF32[i3 + 28 >> 2];
 d6 = +HEAPF32[i3 + 32 >> 2];
 d7 = +HEAPF32[i3 + 36 >> 2];
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3);
 d5 = (d9 + d5) * 2.0;
 d8 = (d6 + d8) * 2.0;
 d7 = (d7 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 7](i3)) * 2.0;
 d6 = d2 / 12.0;
 d2 = d8 * d8;
 d7 = d7 * d7;
 d5 = d5 * d5;
 HEAPF32[i1 >> 2] = d6 * (d2 + d7);
 HEAPF32[i1 + 4 >> 2] = d6 * (d5 + d7);
 HEAPF32[i1 + 8 >> 2] = d6 * (d5 + d2);
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN21btSingleSweepCallback7processEPK17btBroadphaseProxy(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 184 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (+HEAPF32[i4 + 4 >> 2] == 0.0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i5 = HEAP32[i5 >> 2] | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, HEAP32[i5 + 188 >> 2] | 0) | 0)) {
  i5 = 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 __ZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEf(HEAP32[i1 + 192 >> 2] | 0, i1 + 36 | 0, i1 + 100 | 0, i5, HEAP32[i5 + 192 >> 2] | 0, i5 + 4 | 0, HEAP32[i3 >> 2] | 0, +HEAPF32[i1 + 188 >> 2]);
 i5 = 1;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN15CProfileManager5ResetEv() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _gettimeofday(HEAP32[114952] | 0, 0) | 0;
 __ZN12CProfileNode5ResetEv(459816);
 HEAP32[459820 >> 2] = (HEAP32[459820 >> 2] | 0) + 1;
 i3 = HEAP32[459832 >> 2] | 0;
 HEAP32[459832 >> 2] = i3 + 1;
 if ((i3 | 0) == 0) {
  _gettimeofday(i2 | 0, 0) | 0;
  i3 = HEAP32[114952] | 0;
  HEAP32[459828 >> 2] = (HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) + (((HEAP32[i2 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) * 1e6 | 0);
 }
 HEAP32[114966] = 0;
 _gettimeofday(i2 | 0, 0) | 0;
 i3 = HEAP32[114952] | 0;
 HEAP32[114968] = (HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) + (((HEAP32[i2 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) * 1e6 | 0);
 STACKTOP = i1;
 return;
}
function __ZN28btCompoundCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_b(i1, i6, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i1, i6, i3, i4);
 HEAP32[i1 >> 2] = 458312;
 HEAP8[i1 + 24 | 0] = 1;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 28 | 0] = i5 & 1;
 HEAP32[i1 + 32 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP8[i1 + 36 | 0] = 0;
 HEAP32[i1 + 40 >> 2] = HEAP32[(HEAP32[(i5 ? i4 : i3) + 192 >> 2] | 0) + 68 >> 2];
 __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEP17btCollisionObjectS1_(i1, i3, i4);
 STACKTOP = i2;
 return;
}
function __ZN25btSimulationIslandManagerD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 456736;
 i5 = i1 + 48 | 0;
 i4 = i1 + 56 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 60 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i5 = i1 + 28 | 0;
 i4 = i1 + 36 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 40 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 __ZN11btUnionFindD2Ev(i1 + 4 | 0);
 STACKTOP = i2;
 return;
}
function __ZN17btHingeConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0;
 i2 = STACKTOP;
 if ((HEAP8[i3 + 730 | 0] | 0) != 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = 5;
 i4 = i1 + 4 | 0;
 HEAP32[i4 >> 2] = 1;
 d5 = +__ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_(i3, (HEAP32[i3 + 24 >> 2] | 0) + 4 | 0, (HEAP32[i3 + 28 >> 2] | 0) + 4 | 0);
 HEAPF32[i3 + 720 >> 2] = d5;
 __ZN14btAngularLimit4testEf(i3 + 680 | 0, d5);
 if ((HEAP8[i3 + 708 | 0] | 0) == 0 ? (HEAP8[i3 + 729 | 0] | 0) == 0 : 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 STACKTOP = i2;
 return;
}
function __ZN25btSimulationIslandManager21updateActivationStateEP16btCollisionWorldP12btDispatcher(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i4 = i1 + 8 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i5 = HEAP32[i1 + 16 >> 2] | 0;
  i6 = 0;
  i7 = 0;
  do {
   i8 = HEAP32[i5 + (i6 << 2) >> 2] | 0;
   if ((HEAP32[i8 + 204 >> 2] & 3 | 0) == 0) {
    HEAP32[i8 + 208 >> 2] = i7;
    i7 = i7 + 1 | 0;
   }
   HEAP32[i8 + 212 >> 2] = -1;
   HEAPF32[i8 + 240 >> 2] = 1.0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i4 >> 2] | 0));
 } else {
  i7 = 0;
 }
 __ZN11btUnionFind5resetEi(i2 + 4 | 0, i7);
 __ZN25btSimulationIslandManager10findUnionsEP12btDispatcherP16btCollisionWorld(i2, 0, i1);
 STACKTOP = i3;
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i5, i4, i3, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0;
 i1 = STACKTOP;
 if ((HEAP32[i4 + 8 >> 2] | 0) != (i5 | 0)) {
  STACKTOP = i1;
  return;
 }
 i5 = i4 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) == 0) {
  HEAP32[i5 >> 2] = i3;
  HEAP32[i4 + 24 >> 2] = i2;
  HEAP32[i4 + 36 >> 2] = 1;
  STACKTOP = i1;
  return;
 }
 if ((i6 | 0) != (i3 | 0)) {
  i6 = i4 + 36 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i4 + 24 >> 2] = 2;
  HEAP8[i4 + 54 | 0] = 1;
  STACKTOP = i1;
  return;
 }
 i3 = i4 + 24 | 0;
 if ((HEAP32[i3 >> 2] | 0) != 2) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i1;
 return;
}
function __ZN21btConeTwistConstraint8setParamEifi(i3, i5, d1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) == 2 | (i5 | 0) == 1) {
  if (i4 >>> 0 < 3) {
   HEAPF32[i3 + 592 >> 2] = d1;
   i5 = i3 + 584 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
   STACKTOP = i2;
   return;
  } else {
   HEAPF32[i3 + 424 >> 2] = d1;
   STACKTOP = i2;
   return;
  }
 } else if ((i5 | 0) == 4 | (i5 | 0) == 3) {
  if (i4 >>> 0 < 3) {
   HEAPF32[i3 + 588 >> 2] = d1;
   i5 = i3 + 584 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
   STACKTOP = i2;
   return;
  } else {
   HEAPF32[i3 + 596 >> 2] = d1;
   i5 = i3 + 584 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4;
   STACKTOP = i2;
   return;
  }
 } else {
  STACKTOP = i2;
  return;
 }
}
function __ZN16btCollisionWorld11updateAabbsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(448984);
 i3 = i1 + 8 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 if ((i7 | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return;
 }
 i4 = i1 + 16 | 0;
 i5 = i1 + 84 | 0;
 i6 = 0;
 do {
  i8 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i6 << 2) >> 2] | 0;
  if (!((HEAP8[i5] | 0) == 0 ? (i9 = HEAP32[i8 + 216 >> 2] | 0, (i9 | 0) == 2 | (i9 | 0) == 5) : 0)) {
   __ZN16btCollisionWorld16updateSingleAabbEP17btCollisionObject(i1, i8);
   i7 = HEAP32[i3 >> 2] | 0;
  }
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (i7 | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolverC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 445960;
 HEAP8[i1 + 20 | 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP8[i1 + 40 | 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP8[i1 + 60 | 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP8[i1 + 80 | 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 HEAP8[i1 + 100 | 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP8[i1 + 120 | 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 124 >> 2] = 0;
 return;
}
function __ZN22btBvhTriangleMeshShapeC2EP23btStridingMeshInterfacebb(i1, i4, i6, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 __ZN19btTriangleMeshShapeC2EP23btStridingMeshInterface(i1, i4);
 HEAP32[i1 >> 2] = 447488;
 i4 = i1 + 52 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 i5 = i1 + 60 | 0;
 HEAP8[i5] = i6 & 1;
 i6 = i1 + 61 | 0;
 HEAP8[i6] = 0;
 HEAP32[i1 + 4 >> 2] = 21;
 if (!i3) {
  STACKTOP = i2;
  return;
 }
 i3 = __Z22btAlignedAllocInternalji(172, 16) | 0;
 __ZN14btOptimizedBvhC2Ev(i3);
 HEAP32[i4 >> 2] = i3;
 __ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_(i3, HEAP32[i1 + 48 >> 2] | 0, (HEAP8[i5] | 0) != 0, i1 + 16 | 0, i1 + 32 | 0);
 HEAP8[i6] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK16btCollisionWorld7rayTestERK9btVector3S2_RNS_17RayResultCallbackE(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i8 = i5 + 32 | 0;
 i7 = i5 + 16 | 0;
 i6 = i5;
 __ZN19btSingleRayCallbackC2ERK9btVector3S2_PK16btCollisionWorldRNS3_17RayResultCallbackE(i8, i2, i1, i3, i4);
 i4 = HEAP32[i3 + 76 >> 2] | 0;
 i3 = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i6 + 0 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 FUNCTION_TABLE_viiiiii[i3 & 7](i4, i2, i1, i8, i7, i6);
 STACKTOP = i5;
 return;
}
function __ZNK26btTriangleIndexVertexArray32getLockedReadOnlyVertexIndexBaseEPPKhRiR14PHY_ScalarTypeS3_S2_S3_S3_S5_i(i10, i8, i9, i7, i6, i4, i3, i5, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = HEAP32[i10 + 32 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 + (i2 << 5) + 12 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 + (i2 << 5) + 16 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i10 + (i2 << 5) + 28 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i10 + (i2 << 5) + 20 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i10 + (i2 << 5) >> 2];
 HEAP32[i4 >> 2] = HEAP32[i10 + (i2 << 5) + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i10 + (i2 << 5) + 8 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i10 + (i2 << 5) + 24 >> 2];
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_b(i1, i5, i7, i3, i4, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i8 = 0;
 i2 = STACKTOP;
 __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i1, i7, i3, i4);
 HEAP32[i1 >> 2] = 457064;
 i8 = i1 + 8 | 0;
 HEAP8[i8] = 0;
 i7 = i1 + 12 | 0;
 HEAP32[i7 >> 2] = i5;
 HEAP8[i1 + 16 | 0] = i6 & 1;
 if ((i5 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i7 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 31](i6, i3, i4) | 0;
 HEAP8[i8] = 1;
 STACKTOP = i2;
 return;
}
function __ZN26btTriangleIndexVertexArray24getLockedVertexIndexBaseEPPhRiR14PHY_ScalarTypeS2_S1_S2_S2_S4_i(i10, i8, i9, i7, i6, i4, i3, i5, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = HEAP32[i10 + 32 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 + (i2 << 5) + 12 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 + (i2 << 5) + 16 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i10 + (i2 << 5) + 28 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i10 + (i2 << 5) + 20 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i10 + (i2 << 5) >> 2];
 HEAP32[i4 >> 2] = HEAP32[i10 + (i2 << 5) + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i10 + (i2 << 5) + 8 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i10 + (i2 << 5) + 24 >> 2];
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN14LocalInfoAdder15addSingleResultE_1RNS_17LocalConvexResultEb(i1, i5, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d7 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 16 >> 2];
 i3 = i5 + 4 | 0;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i3 >> 2] = i4;
 }
 i4 = i1 + 12 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 d7 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 7](i3, i5, i6);
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 STACKTOP = i2;
 return +d7;
}
function __ZN16btDbvtBroadphase7rayTestERK9btVector3S2_R23btBroadphaseRayCallbackS2_S2_(i4, i3, i6, i5, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = 451936;
 HEAP32[i7 + 4 >> 2] = i5;
 i9 = i5 + 4 | 0;
 i8 = i5 + 20 | 0;
 i5 = i5 + 32 | 0;
 __ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_RNS_8ICollideE(0, HEAP32[i4 + 4 >> 2] | 0, i3, 0, i9, i8, +HEAPF32[i5 >> 2], i2, i1, i7);
 __ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_RNS_8ICollideE(0, HEAP32[i4 + 44 >> 2] | 0, i3, 0, i9, i8, +HEAPF32[i5 >> 2], i2, i1, i7);
 STACKTOP = i6;
 return;
}
function ___remdi3(i1, i4, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i2 = i3 | 0;
 i7 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i9 = i6 >> 31 | ((i6 | 0) < 0 ? -1 : 0) << 1;
 i10 = ((i6 | 0) < 0 ? -1 : 0) >> 31 | ((i6 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i7 ^ i1, i8 ^ i4, i7, i8) | 0;
 i4 = tempRet0;
 ___udivmoddi4(i1, i4, _i64Subtract(i9 ^ i5, i10 ^ i6, i9, i10) | 0, tempRet0, i2) | 0;
 i9 = _i64Subtract(HEAP32[i2 >> 2] ^ i7, HEAP32[i2 + 4 >> 2] ^ i8, i7, i8) | 0;
 i8 = tempRet0;
 STACKTOP = i3;
 return (tempRet0 = i8, i9) | 0;
}
function __ZN17btGjkPairDetectorC2EPK13btConvexShapeS2_iiffP22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i1, i7, i6, i5, i4, d3, d2, i8, i9) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 d2 = +d2;
 i8 = i8 | 0;
 i9 = i9 | 0;
 HEAP32[i1 >> 2] = 453384;
 HEAPF32[i1 + 4 >> 2] = 0.0;
 HEAPF32[i1 + 8 >> 2] = 1.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 HEAP32[i1 + 20 >> 2] = i9;
 HEAP32[i1 + 24 >> 2] = i8;
 HEAP32[i1 + 28 >> 2] = i7;
 HEAP32[i1 + 32 >> 2] = i6;
 HEAP32[i1 + 36 >> 2] = i5;
 HEAP32[i1 + 40 >> 2] = i4;
 HEAPF32[i1 + 44 >> 2] = d3;
 HEAPF32[i1 + 48 >> 2] = d2;
 HEAP8[i1 + 52 | 0] = 0;
 HEAP32[i1 + 60 >> 2] = -1;
 HEAP32[i1 + 72 >> 2] = 1;
 return;
}
function __ZNK14btCapsuleShape9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK16btCollisionShape9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i2 + 28 >> 2];
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i2 + 32 >> 2];
 HEAPF32[i1 + 36 >> 2] = +HEAPF32[i2 + 36 >> 2];
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i1 + 12 >> 2] = +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i2 + 16 >> 2];
 HEAPF32[i1 + 20 >> 2] = +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i2 + 24 >> 2];
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i2 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 52 >> 2];
 STACKTOP = i4;
 return 448280;
}
function __ZN17btHingeConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 i6 = i4 + 4 | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i5 = i3 + 4 | 0;
 i4 = i4 + 320 | 0;
 i3 = i3 + 320 | 0;
 if ((HEAP8[i1 + 731 | 0] | 0) == 0) {
  __ZN17btHingeConstraint16getInfo2InternalEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_(i1, i7, i6, i5, i4, i3);
  STACKTOP = i2;
  return;
 } else {
  __ZN17btHingeConstraint32getInfo2InternalUsingFrameOffsetEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_(i1, i7, i6, i5, i4, i3);
  STACKTOP = i2;
  return;
 }
}
function __ZN16btPointCollector15addContactPointERK9btVector3S2_f(i1, i4, i5, d6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i2 = 0, i3 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = i1 + 36 | 0;
 if (!(+HEAPF32[i3 >> 2] > d6)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[i1 + 40 | 0] = 1;
 i7 = i1 + 4 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = i1 + 20 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAPF32[i3 >> 2] = d6;
 STACKTOP = i2;
 return;
}
function __ZN19btSingleRayCallback7processEPK17btBroadphaseProxy(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 216 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (+HEAPF32[i4 + 4 >> 2] == 0.0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i5 = HEAP32[i5 >> 2] | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, HEAP32[i5 + 188 >> 2] | 0) | 0)) {
  i5 = 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 __ZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackE(i1 + 68 | 0, i1 + 132 | 0, i5, HEAP32[i5 + 192 >> 2] | 0, i5 + 4 | 0, HEAP32[i3 >> 2] | 0);
 i5 = 1;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN15LocalInfoAdder215addSingleResultERNS_14LocalRayResultEb(i1, i5, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d7 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 24 >> 2];
 i3 = i5 + 4 | 0;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i3 >> 2] = i4;
 }
 i4 = i1 + 20 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 d7 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 7](i3, i5, i6);
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 STACKTOP = i2;
 return +d7;
}
function __ZN32btSphereSphereCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_(i1, i5, i6, i3, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i7 = 0;
 i2 = STACKTOP;
 __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i1, i6, i3, i4);
 HEAP32[i1 >> 2] = 456976;
 i7 = i1 + 8 | 0;
 HEAP8[i7] = 0;
 i6 = i1 + 12 | 0;
 HEAP32[i6 >> 2] = i5;
 if ((i5 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i6 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, i3, i4) | 0;
 HEAP8[i7] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK22btBvhTriangleMeshShape30serializeSingleTriangleInfoMapEP12btSerializer(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i4 = i3 + 56 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i5, 1) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 31](i3, HEAP32[i5 + 8 >> 2] | 0, i1) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, i3, 1346456916, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBody24checkCollideWithOverrideEP17btCollisionObject(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 L1 : do {
  if ((HEAP32[i2 + 232 >> 2] & 2 | 0) != 0 ? (i3 = HEAP32[i4 + 480 >> 2] | 0, (i3 | 0) > 0) : 0) {
   i4 = HEAP32[i4 + 488 >> 2] | 0;
   i6 = 0;
   while (1) {
    i5 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
    if ((HEAP32[i5 + 24 >> 2] | 0) == (i2 | 0)) {
     i2 = 0;
     break L1;
    }
    i6 = i6 + 1 | 0;
    if ((HEAP32[i5 + 28 >> 2] | 0) == (i2 | 0)) {
     i2 = 0;
     break L1;
    }
    if ((i6 | 0) >= (i3 | 0)) {
     i2 = 1;
     break;
    }
   }
  } else {
   i2 = 1;
  }
 } while (0);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK22btBvhTriangleMeshShape18serializeSingleBvhEP12btSerializer(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i4 = i3 + 52 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i5, 1) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, HEAP32[i5 + 8 >> 2] | 0, i1) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, i3, 1213612625, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNK21btConvexInternalShape9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK16btCollisionShape9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i2 + 28 >> 2];
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i2 + 32 >> 2];
 HEAPF32[i1 + 36 >> 2] = +HEAPF32[i2 + 36 >> 2];
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i1 + 12 >> 2] = +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i2 + 16 >> 2];
 HEAPF32[i1 + 20 >> 2] = +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i2 + 24 >> 2];
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i2 + 44 >> 2];
 STACKTOP = i4;
 return 444136;
}
function __ZNK34btClosestNotMeConvexResultCallback14needsCollisionEP17btBroadphaseProxy(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i1 + 80 >> 2] | 0;
 if ((i4 | 0) == (i3 | 0)) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP16[i1 + 10 >> 1] & HEAP16[i5 + 4 >> 1]) << 16 >> 16 == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP16[i5 + 6 >> 1] & HEAP16[i1 + 8 >> 1]) << 16 >> 16 == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i5 = HEAP32[i1 + 92 >> 2] | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3, i4) | 0;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN20btPersistentManifold16addManifoldPointERK15btManifoldPoint(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i5 = i2 + 1116 | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if ((i7 | 0) == 4) {
  i7 = __ZN20btPersistentManifold16sortCachedPointsERK15btManifoldPoint(i2, i3) | 0;
  i6 = i2 + (i7 * 276 | 0) + 112 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  if ((i5 | 0) != 0 ? (i4 = HEAP32[113936] | 0, (i4 | 0) != 0) : 0) {
   FUNCTION_TABLE_ii[i4 & 127](i5) | 0;
   HEAP32[i6 >> 2] = 0;
  }
 } else {
  HEAP32[i5 >> 2] = i7 + 1;
 }
 i7 = (i7 | 0) < 0 ? 0 : i7;
 _memcpy(i2 + (i7 * 276 | 0) + 4 | 0, i3 | 0, 276) | 0;
 STACKTOP = i1;
 return i7 | 0;
}
function __ZN34btSphereTriangleCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i6, i1, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 20) | 0;
 if ((i3 | 0) == 0) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 __ZN34btSphereTriangleCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_b(i3, HEAP32[i1 + 4 >> 2] | 0, i1, i4, i5, (HEAP8[i6 + 4 | 0] | 0) != 0);
 i6 = i3;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZN6btDbvt5clearEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1, i3);
 }
 i5 = i1 + 4 | 0;
 __Z21btAlignedFreeInternalPv(HEAP32[i5 >> 2] | 0);
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = -1;
 i5 = i1 + 24 | 0;
 i4 = i1 + 32 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 36 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN17btHingeConstraint8setParamEifi(i3, i4, d1, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 do {
  if ((i5 | 0) == 5 | (i5 | 0) == -1) {
   if ((i4 | 0) == 4) {
    HEAPF32[i3 + 748 >> 2] = d1;
    i5 = i3 + 740 | 0;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
    break;
   } else if ((i4 | 0) == 3) {
    HEAPF32[i3 + 744 >> 2] = d1;
    i5 = i3 + 740 | 0;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4;
    break;
   } else if ((i4 | 0) == 2) {
    HEAPF32[i3 + 752 >> 2] = d1;
    i5 = i3 + 740 | 0;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
    break;
   } else {
    break;
   }
  }
 } while (0);
 STACKTOP = i2;
 return;
}
function __ZN6btDbvtD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1, i3);
 }
 i5 = i1 + 4 | 0;
 __Z21btAlignedFreeInternalPv(HEAP32[i5 >> 2] | 0);
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = -1;
 i5 = i1 + 24 | 0;
 i4 = i1 + 32 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 36 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i3] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i4 >> 2] = 0;
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i3] = 1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN25btTriangleRaycastCallbackC2ERK9btVector3S2_j(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 456408;
 i6 = i1 + 4 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = i1 + 20 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 36 >> 2] = i2;
 HEAPF32[i1 + 40 >> 2] = 1.0;
 STACKTOP = i5;
 return;
}
function __ZN20btAxisSweep3InternalItE9resetPoolEP12btDispatcher(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 if ((HEAP16[i2 + 56 >> 1] | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 HEAP16[i2 + 64 >> 1] = 1;
 i3 = i2 + 58 | 0;
 i4 = HEAP16[i3 >> 1] | 0;
 i2 = HEAP32[i2 + 60 >> 2] | 0;
 if ((i4 & 65535) > 1) {
  i5 = 1;
  i4 = 1;
  while (1) {
   HEAP16[i2 + (i5 << 6) + 48 >> 1] = i5 + 1;
   i4 = i4 + 1 << 16 >> 16;
   i5 = HEAP16[i3 >> 1] | 0;
   if ((i4 & 65535) < (i5 & 65535)) {
    i5 = i4 & 65535;
   } else {
    i4 = i5;
    break;
   }
  }
 }
 HEAP16[i2 + ((i4 & 65535) + -1 << 6) + 48 >> 1] = 0;
 STACKTOP = i1;
 return;
}
function __ZNK13btConvexShape19getMarginNonVirtualEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0;
 i1 = STACKTOP;
 switch (HEAP32[i2 + 4 >> 2] | 0) {
 case 4:
 case 5:
  {
   d3 = +HEAPF32[i2 + 44 >> 2];
   break;
  }
 case 1:
  {
   d3 = +HEAPF32[i2 + 44 >> 2];
   break;
  }
 case 0:
  {
   d3 = +HEAPF32[i2 + 44 >> 2];
   break;
  }
 case 8:
  {
   d3 = +HEAPF32[i2 + 28 >> 2] * +HEAPF32[i2 + 12 >> 2];
   break;
  }
 case 13:
  {
   d3 = +HEAPF32[i2 + 44 >> 2];
   break;
  }
 case 10:
  {
   d3 = +HEAPF32[i2 + 44 >> 2];
   break;
  }
 default:
  {
   d3 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 7](i2);
  }
 }
 STACKTOP = i1;
 return +d3;
}
function __ZN17btTypedConstraint14getMotorFactorEfffff(i2, d3, d1, d4, d5, d6) {
 i2 = i2 | 0;
 d3 = +d3;
 d1 = +d1;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 i2 = STACKTOP;
 do {
  if (!(d1 > d4)) {
   if (!(d1 == d4)) {
    d5 = d5 / d6;
    if (d5 < 0.0) {
     if (d3 >= d1 ? d1 - d5 > d3 : 0) {
      d1 = (d1 - d3) / d5;
      break;
     }
     d1 = d3 < d1 ? 0.0 : 1.0;
     break;
    }
    if (d5 > 0.0) {
     if (d3 <= d4 ? d4 - d5 < d3 : 0) {
      d1 = (d4 - d3) / d5;
      break;
     }
     d1 = d3 > d4 ? 0.0 : 1.0;
    } else {
     d1 = 0.0;
    }
   } else {
    d1 = 0.0;
   }
  } else {
   d1 = 1.0;
  }
 } while (0);
 STACKTOP = i2;
 return +d1;
}
function __ZN23btDiscreteDynamicsWorld18saveKinematicStateEf(i4, d1) {
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = i4 + 8 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i4 + 16 | 0;
 i5 = 0;
 do {
  i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  if ((((HEAP32[i7 + 232 >> 2] & 2 | 0) != 0 ? (i7 | 0) != 0 : 0) ? (HEAP32[i7 + 216 >> 2] | 0) != 2 : 0) ? (HEAP32[i7 + 204 >> 2] & 2 | 0) != 0 : 0) {
   __ZN11btRigidBody18saveKinematicStateEf(i7, d1);
   i6 = HEAP32[i3 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i6 | 0));
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBody10setGravityERK9btVector3(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, d3 = 0.0, d5 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i1 + 336 >> 2];
 if (d3 != 0.0) {
  d6 = 1.0 / d3;
  d5 = d6 * +HEAPF32[i4 + 4 >> 2];
  d3 = d6 * +HEAPF32[i4 + 8 >> 2];
  HEAPF32[i1 + 356 >> 2] = d6 * +HEAPF32[i4 >> 2];
  HEAPF32[i1 + 360 >> 2] = d5;
  HEAPF32[i1 + 364 >> 2] = d3;
  HEAPF32[i1 + 368 >> 2] = 0.0;
 }
 i1 = i1 + 372 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN22btVoronoiSimplexSolver14compute_pointsER9btVector3S1_(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i2) | 0;
 i5 = i2 + 244 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 260 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZNK21btConeTwistConstraint8getParamEii(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do {
  if ((i4 | 0) == 2 | (i4 | 0) == 1) {
   if (i3 >>> 0 < 3) {
    d5 = +HEAPF32[i2 + 592 >> 2];
    break;
   }
   if ((i3 + -3 | 0) >>> 0 < 3) {
    d5 = +HEAPF32[i2 + 424 >> 2];
   } else {
    d5 = 0.0;
   }
  } else if ((i4 | 0) == 4 | (i4 | 0) == 3) {
   if (i3 >>> 0 < 3) {
    d5 = +HEAPF32[i2 + 588 >> 2];
    break;
   }
   if ((i3 + -3 | 0) >>> 0 < 3) {
    d5 = +HEAPF32[i2 + 596 >> 2];
   } else {
    d5 = 0.0;
   }
  } else {
   d5 = 0.0;
  }
 } while (0);
 STACKTOP = i1;
 return +d5;
}
function __ZNK14btQuantizedBvh29reportBoxCastOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_(i1, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i1 + 60 | 0] | 0) == 0) {
  __ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i1, i3, i4, i5, i6, i7, 0, 0);
  STACKTOP = i2;
  return;
 } else {
  __ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i1, i3, i4, i5, i6, i7, 0, HEAP32[i1 + 56 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZN23btDiscreteDynamicsWorld14updateVehiclesEf(i1, d4) {
 i1 = i1 | 0;
 d4 = +d4;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 __ZN15CProfileManager13Start_ProfileEPKc(444936);
 i3 = i1 + 248 | 0;
 if ((HEAP32[i3 >> 2] | 0) <= 0) {
  __ZN15CProfileManager12Stop_ProfileEv();
  STACKTOP = i2;
  return;
 }
 i5 = i1 + 256 | 0;
 i6 = 0;
 do {
  i7 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
  FUNCTION_TABLE_viid[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 1](i7, i1, d4);
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (HEAP32[i3 >> 2] | 0));
 __ZN15CProfileManager12Stop_ProfileEv();
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld11clearForcesEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = i3 + 204 | 0;
 if ((HEAP32[i2 >> 2] | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i3 = i3 + 212 | 0;
 i4 = 0;
 do {
  i5 = (HEAP32[(HEAP32[i3 >> 2] | 0) + (i4 << 2) >> 2] | 0) + 404 | 0;
  HEAP32[i5 + 0 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i5 + 20 >> 2] = 0;
  HEAP32[i5 + 24 >> 2] = 0;
  HEAP32[i5 + 28 >> 2] = 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i2 >> 2] | 0));
 STACKTOP = i1;
 return;
}
function _memcpy(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if ((i1 | 0) >= 4096) return _emscripten_memcpy_big(i3 | 0, i2 | 0, i1 | 0) | 0;
 i4 = i3 | 0;
 if ((i3 & 3) == (i2 & 3)) {
  while (i3 & 3) {
   if ((i1 | 0) == 0) return i4 | 0;
   HEAP8[i3] = HEAP8[i2] | 0;
   i3 = i3 + 1 | 0;
   i2 = i2 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  while ((i1 | 0) >= 4) {
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   i3 = i3 + 4 | 0;
   i2 = i2 + 4 | 0;
   i1 = i1 - 4 | 0;
  }
 }
 while ((i1 | 0) > 0) {
  HEAP8[i3] = HEAP8[i2] | 0;
  i3 = i3 + 1 | 0;
  i2 = i2 + 1 | 0;
  i1 = i1 - 1 | 0;
 }
 return i4 | 0;
}
function __ZN28btCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = i4 + 12 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i4 + 20 | 0;
 i5 = 0;
 do {
  i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  if ((i7 | 0) != 0) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 127](i7, i1);
   i6 = HEAP32[i3 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i6 | 0));
 STACKTOP = i2;
 return;
}
function __ZNK26btTriangleIndexVertexArray14setPremadeAabbERK9btVector3S2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = i1 + 52 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i3 = i1 + 68 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 48 >> 2] = 1;
 STACKTOP = i4;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 __ZN32btSphereSphereCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_(i5, 0, i1, i2, i3);
 STACKTOP = i4;
 return i5 | 0;
}
function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i7 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i5 ^ i1, i6 ^ i2, i5, i6) | 0;
 i2 = tempRet0;
 i5 = i7 ^ i5;
 i6 = i8 ^ i6;
 i7 = _i64Subtract((___udivmoddi4(i1, i2, _i64Subtract(i7 ^ i3, i8 ^ i4, i7, i8) | 0, tempRet0, 0) | 0) ^ i5, tempRet0 ^ i6, i5, i6) | 0;
 return i7 | 0;
}
function __ZNK20btAxisSweep3InternalItE7getAabbEP17btBroadphaseProxyR9btVector3S4_(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = i2 + 16 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 32 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 __ZN26btBoxBoxCollisionAlgorithmC2EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS6_(i5, 0, i1, i2, i3);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 80) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 __ZN33btConvexConcaveCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_b(i5, i1, i2, i3, 1);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZNK16btDbvtBroadphase7getAabbEP17btBroadphaseProxyR9btVector3S3_(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = i2 + 16 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 32 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 80) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 __ZN33btConvexConcaveCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_b(i5, i1, i2, i3, 0);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZL8pointCmpRKN20btConvexHullInternal7Point32ES2_(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i5 | 0) >= (i4 | 0)) {
  if ((i5 | 0) == (i4 | 0)) {
   i5 = HEAP32[i2 >> 2] | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i5 | 0) >= (i4 | 0)) {
    if ((i5 | 0) == (i4 | 0)) {
     i2 = (HEAP32[i2 + 8 >> 2] | 0) < (HEAP32[i3 + 8 >> 2] | 0);
    } else {
     i2 = 0;
    }
   } else {
    i2 = 1;
   }
  } else {
   i2 = 0;
  }
 } else {
  i2 = 1;
 }
 STACKTOP = i1;
 return i2 | 0;
}
function __ZN21btCollisionDispatcher22freeCollisionAlgorithmEPv(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i4 + 192 >> 2] | 0;
 if (((i1 | 0) != 0 ? (i3 = HEAP32[i4 + 16 >> 2] | 0, !(i3 >>> 0 > i1 >>> 0)) : 0) ? (i3 + (Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0) | 0) >>> 0 > i1 >>> 0 : 0) {
  i3 = i4 + 12 | 0;
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i3 >> 2] = i1;
  i4 = i4 + 8 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  STACKTOP = i2;
  return;
 }
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN28btCompoundCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 44) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 __ZN28btCompoundCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_b(i5, i1, i2, i3, 1);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZNK26btTriangleIndexVertexArray14getPremadeAabbEP9btVector3S1_(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = i2 + 52 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 68 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZNK20btAxisSweep3InternalItE17getBroadphaseAabbER9btVector3S2_(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = i2 + 8 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i3 = i2 + 24 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN28btCompoundCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 44) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 __ZN28btCompoundCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_b(i5, i1, i2, i3, 0);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_(i5, i6, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7;
 i9 = HEAP32[i5 + 48 >> 2] | 0;
 HEAP32[i8 >> 2] = 447848;
 HEAP32[i8 + 4 >> 2] = i9;
 HEAP32[i8 + 8 >> 2] = i6;
 __ZNK14btQuantizedBvh29reportBoxCastOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_(HEAP32[i5 + 52 >> 2] | 0, i8, i4, i3, i2, i1);
 STACKTOP = i7;
 return;
}
function __ZN13BenchmarkDemo20clientMoveAndDisplayEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  FUNCTION_TABLE_iidid[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 1](i4, .01666666753590107, 1, .01666666753590107) | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 255](i4);
 }
 if ((HEAP32[i1 + 68 >> 2] | 0) != 7) {
  STACKTOP = i2;
  return;
 }
 __ZN13btRaycastBar24castEP16btCollisionWorld(402552, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher13findAlgorithmEP17btCollisionObjectS1_P20btPersistentManifold(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i6 + 4 >> 2] = i4;
 i4 = HEAP32[i3 + ((HEAP32[(HEAP32[i2 + 192 >> 2] | 0) + 4 >> 2] | 0) * 144 | 0) + (HEAP32[(HEAP32[i1 + 192 >> 2] | 0) + 4 >> 2] << 2) + 200 >> 2] | 0;
 i4 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 15](i4, i6, i2, i1) | 0;
 STACKTOP = i5;
 return i4 | 0;
}
function __ZN22btVoronoiSimplexSolver5resetEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP8[i1 + 312 | 0] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP8[i1 + 356 | 0] = 1;
 HEAPF32[i1 + 292 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 296 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 300 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 304 >> 2] = 0.0;
 i3 = i1 + 336 | 0;
 i1 = i1 + 332 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP8[i3 + 16 | 0] = 0;
 HEAP8[i1] = HEAP8[i1] & -16;
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBody12applyGravityEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, d5 = 0.0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 204 >> 2] & 3 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 d5 = +HEAPF32[i1 + 360 >> 2] * +HEAPF32[i1 + 344 >> 2];
 d3 = +HEAPF32[i1 + 364 >> 2] * +HEAPF32[i1 + 348 >> 2];
 i4 = i1 + 404 | 0;
 HEAPF32[i4 >> 2] = +HEAPF32[i1 + 356 >> 2] * +HEAPF32[i1 + 340 >> 2] + +HEAPF32[i4 >> 2];
 i4 = i1 + 408 | 0;
 HEAPF32[i4 >> 2] = d5 + +HEAPF32[i4 >> 2];
 i1 = i1 + 412 | 0;
 HEAPF32[i1 >> 2] = d3 + +HEAPF32[i1 >> 2];
 STACKTOP = i2;
 return;
}
function __ZNK11btRigidBody21serializeSingleObjectEP12btSerializer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 i5 = FUNCTION_TABLE_iiii[i4 & 31](i2, i5, 1) | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i5 + 8 >> 2] | 0, i2) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i5, i4, 1497645650, i1);
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld12applyGravityEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i2 = i3 + 204 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i3 = i3 + 212 | 0;
 i4 = 0;
 do {
  i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + (i4 << 2) >> 2] | 0;
  i7 = HEAP32[i6 + 216 >> 2] | 0;
  if (!((i7 | 0) == 2 | (i7 | 0) == 5)) {
   __ZN11btRigidBody12applyGravityEv(i6);
   i5 = HEAP32[i2 >> 2] | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i5 | 0));
 STACKTOP = i1;
 return;
}
function __ZNK10btBoxShape8isInsideERK9btVector3f(i10, i5, d2) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 d2 = +d2;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i1 = STACKTOP;
 d4 = +HEAPF32[i10 + 28 >> 2];
 d3 = +HEAPF32[i10 + 32 >> 2];
 d9 = +HEAPF32[i10 + 36 >> 2];
 d8 = +HEAPF32[i5 >> 2];
 if ((((d8 <= d4 + d2 ? d8 >= -d4 - d2 : 0) ? (d7 = +HEAPF32[i5 + 4 >> 2], d7 <= d3 + d2) : 0) ? d7 >= -d3 - d2 : 0) ? (d6 = +HEAPF32[i5 + 8 >> 2], d6 <= d9 + d2) : 0) {
  i5 = d6 >= -d9 - d2;
 } else {
  i5 = 0;
 }
 STACKTOP = i1;
 return i5 | 0;
}
function __ZNK17btCollisionObject21serializeSingleObjectEP12btSerializer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, i5, 1) | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i5 + 8 >> 2] | 0, i2) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i5, i4, 1245859651, i1);
 STACKTOP = i3;
 return;
}
function __ZNK16btCollisionShape20serializeSingleShapeEP12btSerializer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, i5, 1) | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, HEAP32[i5 + 8 >> 2] | 0, i2) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i5, i4, 1346455635, i1);
 STACKTOP = i3;
 return;
}
function __ZN14btAngularLimit3setEfffff(i1, d6, d7, d3, d4, d5) {
 i1 = i1 | 0;
 d6 = +d6;
 d7 = +d7;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 var i2 = 0;
 i2 = STACKTOP;
 d7 = (d7 - d6) * .5;
 HEAPF32[i1 + 4 >> 2] = d7;
 d6 = +_fmod(+(d7 + d6), 6.2831854820251465);
 if (!(d6 < -3.1415927410125732)) {
  if (d6 > 3.1415927410125732) {
   d6 = d6 + -6.2831854820251465;
  }
 } else {
  d6 = d6 + 6.2831854820251465;
 }
 HEAPF32[i1 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = d3;
 HEAPF32[i1 + 12 >> 2] = d4;
 HEAPF32[i1 + 16 >> 2] = d5;
 STACKTOP = i2;
 return;
}
function __ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallback14processOverlapER16btBroadphasePair(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) != (i3 | 0) ? (HEAP32[i4 + 4 >> 2] | 0) != (i3 | 0) : 0) {
  STACKTOP = i2;
  return 0;
 }
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 63](i3, i4, HEAP32[i1 + 12 >> 2] | 0);
 STACKTOP = i2;
 return 0;
}
function _memset(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = i1 + i3 | 0;
 if ((i3 | 0) >= 20) {
  i4 = i4 & 255;
  i7 = i1 & 3;
  i6 = i4 | i4 << 8 | i4 << 16 | i4 << 24;
  i5 = i2 & ~3;
  if (i7) {
   i7 = i1 + 4 - i7 | 0;
   while ((i1 | 0) < (i7 | 0)) {
    HEAP8[i1] = i4;
    i1 = i1 + 1 | 0;
   }
  }
  while ((i1 | 0) < (i5 | 0)) {
   HEAP32[i1 >> 2] = i6;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i2 | 0)) {
  HEAP8[i1] = i4;
  i1 = i1 + 1 | 0;
 }
 return i1 - i3 | 0;
}
function __ZN17btConvexHullShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 451264;
 i4 = i1 + 96 | 0;
 i3 = i1 + 104 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 108 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 100 >> 2] = 0;
 __ZN23btPolyhedralConvexShapeD2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i5;
 return;
}
function __ZNK16btCollisionShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 }
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 STACKTOP = i2;
 return 448648;
}
function __Znwj(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = (i2 | 0) == 0 ? 1 : i2;
 while (1) {
  i3 = _malloc(i2) | 0;
  if ((i3 | 0) != 0) {
   i2 = 6;
   break;
  }
  i3 = HEAP32[115186] | 0;
  HEAP32[115186] = i3 + 0;
  if ((i3 | 0) == 0) {
   i2 = 5;
   break;
  }
  FUNCTION_TABLE_v[i3 & 1]();
 }
 if ((i2 | 0) == 5) {
  i3 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i3 >> 2] = 460760;
  ___cxa_throw(i3 | 0, 460808, 244);
 } else if ((i2 | 0) == 6) {
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}
function __ZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5;
 i7 = HEAP32[i3 + 48 >> 2] | 0;
 HEAP32[i6 >> 2] = 447664;
 HEAP32[i6 + 4 >> 2] = i7;
 HEAP32[i6 + 8 >> 2] = i4;
 __ZNK14btQuantizedBvh26reportAabbOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_(HEAP32[i3 + 52 >> 2] | 0, i6, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = i4 + 40 | 0;
 if ((HEAP32[i3 >> 2] | 0) != 0) {
  __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1, HEAP32[i4 + 36 >> 2] | 0);
  __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1, HEAP32[i3 >> 2] | 0);
 }
 if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) {
  HEAP32[i1 >> 2] = 0;
 }
 i3 = i1 + 4 | 0;
 __Z21btAlignedFreeInternalPv(HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = i4;
 STACKTOP = i2;
 return;
}
function __ZNK17btHingeConstraint8getParamEii(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do {
  if ((i4 | 0) == 5 | (i4 | 0) == -1) {
   if ((i3 | 0) == 4) {
    d5 = +HEAPF32[i2 + 748 >> 2];
    break;
   } else if ((i3 | 0) == 3) {
    d5 = +HEAPF32[i2 + 744 >> 2];
    break;
   } else if ((i3 | 0) == 2) {
    d5 = +HEAPF32[i2 + 752 >> 2];
    break;
   } else {
    d5 = 0.0;
    break;
   }
  } else {
   d5 = 0.0;
  }
 } while (0);
 STACKTOP = i1;
 return +d5;
}
function __ZN16btEmptyAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 8) | 0;
 if ((i3 | 0) == 0) {
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 __ZN16btEmptyAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo(i3, i1);
 i4 = i3;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i7 = HEAP32[i3 + 48 >> 2] | 0;
 HEAP32[i6 >> 2] = 448008;
 HEAP32[i6 + 4 >> 2] = i7;
 HEAP32[i6 + 8 >> 2] = i4;
 __ZNK14btQuantizedBvh25reportRayOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_(HEAP32[i3 + 52 >> 2] | 0, i6, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNodeS2_(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 if ((i3 | 0) == (i4 | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = i1 + 4 | 0;
 i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + 96 >> 2] | 0;
 FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, HEAP32[i3 + 36 >> 2] | 0, HEAP32[i4 + 36 >> 2] | 0) | 0;
 i4 = (HEAP32[i1 >> 2] | 0) + 120 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 STACKTOP = i2;
 return;
}
function __ZN12CProfileNodeD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __ZN12CProfileNodeD2Ev(i3);
  __ZdlPv(i3);
 }
 i2 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __ZN12CProfileNodeD2Ev(i3);
  __ZdlPv(i3);
 }
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __ZN12CProfileNodeD2Ev(i3);
  __ZdlPv(i3);
 }
 __ZdlPv(i2);
 STACKTOP = i1;
 return;
}
function __ZNK13btSphereShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i3 = STACKTOP;
 if ((i2 | 0) > 0) {
  i4 = 0;
 } else {
  STACKTOP = i3;
  return;
 }
 do {
  i6 = i1 + (i4 << 4) | 0;
  i4 = i4 + 1 | 0;
  i5 = (i4 | 0) == (i2 | 0);
  HEAP32[i6 + 0 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
 } while (!i5);
 STACKTOP = i3;
 return;
}
function __ZNK10btBoxShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i5, i3) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var d2 = 0.0, d4 = 0.0, d6 = 0.0;
 d2 = +HEAPF32[i5 + 28 >> 2];
 d4 = +HEAPF32[i5 + 32 >> 2];
 d4 = +HEAPF32[i3 + 4 >> 2] >= 0.0 ? d4 : -d4;
 d6 = +HEAPF32[i5 + 36 >> 2];
 d6 = +HEAPF32[i3 + 8 >> 2] >= 0.0 ? d6 : -d6;
 HEAPF32[i1 >> 2] = +HEAPF32[i3 >> 2] >= 0.0 ? d2 : -d2;
 HEAPF32[i1 + 4 >> 2] = d4;
 HEAPF32[i1 + 8 >> 2] = d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZN21btCollisionDispatcher26allocateCollisionAlgorithmEi(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i5 = HEAP32[i3 + 192 >> 2] | 0;
 i3 = i5 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == 0) {
  i5 = __Z22btAlignedAllocInternalji(i1, 16) | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  i1 = i5 + 12 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i3 >> 2] = i4 + -1;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}
function __ZN26btTriangleIndexVertexArrayD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 457512;
 i4 = i1 + 24 | 0;
 i3 = i1 + 32 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 36 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i5;
 return;
}
function __ZN17btConvexHullShapeD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 451264;
 i4 = i1 + 96 | 0;
 i3 = i1 + 104 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 108 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 100 >> 2] = 0;
 __ZN23btPolyhedralConvexShapeD2Ev(i1);
 STACKTOP = i5;
 return;
}
function __GLOBAL__I_a556() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = __Znwj(8) | 0;
 HEAP32[114952] = i2;
 _gettimeofday(i2 | 0, 0) | 0;
 _atexit(247, 459808, ___dso_handle | 0) | 0;
 HEAP32[114954] = 459848;
 HEAP32[459820 >> 2] = 0;
 HEAP32[459824 >> 2] = 0;
 HEAP32[459828 >> 2] = 0;
 HEAP32[459832 >> 2] = 0;
 HEAP32[459836 >> 2] = 0;
 HEAP32[459840 >> 2] = 0;
 HEAP32[459844 >> 2] = 0;
 __ZN12CProfileNode5ResetEv(459816);
 _atexit(248, 459816, ___dso_handle | 0) | 0;
 STACKTOP = i1;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458592;
 HEAP32[i1 + 12 >> 2] = 458624;
 i4 = i1 + 60 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 76 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 127](i5, HEAP32[i3 >> 2] | 0);
 i4 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, HEAP32[i3 >> 2] | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher14needsCollisionEP17btCollisionObjectS1_(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 216 >> 2] | 0;
 if ((i4 | 0) == 2 | (i4 | 0) == 5 ? (i4 = HEAP32[i3 + 216 >> 2] | 0, (i4 | 0) == 2 | (i4 | 0) == 5) : 0) {
  i1 = 0;
 } else {
  if ((HEAP32[i1 + 252 >> 2] | 0) == 0) {
   i1 = 1;
  } else {
   i1 = FUNCTION_TABLE_iii[HEAP32[HEAP32[i1 >> 2] >> 2] & 31](i1, i3) | 0;
  }
 }
 STACKTOP = i2;
 return i1 | 0;
}
function __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBodyS2_(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 >> 2] = 446800;
 HEAP32[i1 + 8 >> 2] = -1;
 HEAP32[i1 + 12 >> 2] = -1;
 HEAPF32[i1 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i1 + 20 | 0] = 1;
 HEAP8[i1 + 21 | 0] = 0;
 HEAP32[i1 + 24 >> 2] = i3;
 HEAP32[i1 + 28 >> 2] = i2;
 HEAPF32[i1 + 32 >> 2] = 0.0;
 HEAPF32[i1 + 36 >> 2] = .30000001192092896;
 return;
}
function __ZN21btCollisionDispatcher13clearManifoldEP20btPersistentManifold(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i2 = i1 + 1116 | 0;
 if ((HEAP32[i2 >> 2] | 0) > 0) {
  i4 = 0;
 } else {
  HEAP32[i2 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 do {
  __ZN20btPersistentManifold14clearUserCacheER15btManifoldPoint(i1, i1 + (i4 * 276 | 0) + 4 | 0);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i2 >> 2] | 0));
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZN11btRigidBodyD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 445848;
 i4 = i1 + 480 | 0;
 i3 = i1 + 488 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 492 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 484 >> 2] = 0;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i5;
 return;
}
function __ZN16btDbvtBroadphaseD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 451752;
 if ((HEAP8[i1 + 152 | 0] | 0) != 0) {
  i4 = i1 + 96 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 255](i3);
  __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
 }
 i3 = i1 + 4 | 0;
 i4 = i1 + 84 | 0;
 do {
  i4 = i4 + -40 | 0;
  __ZN6btDbvtD2Ev(i4);
 } while ((i4 | 0) != (i3 | 0));
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN34btPolyhedralConvexAabbCachingShapeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN21btConvexInternalShapeC2Ev(i1);
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 >> 2] = 455896;
 HEAPF32[i1 + 56 >> 2] = 1.0;
 HEAPF32[i1 + 60 >> 2] = 1.0;
 HEAPF32[i1 + 64 >> 2] = 1.0;
 HEAPF32[i1 + 68 >> 2] = 0.0;
 HEAPF32[i1 + 72 >> 2] = -1.0;
 HEAPF32[i1 + 76 >> 2] = -1.0;
 HEAPF32[i1 + 80 >> 2] = -1.0;
 HEAPF32[i1 + 84 >> 2] = 0.0;
 HEAP8[i1 + 88 | 0] = 0;
 STACKTOP = i2;
 return;
}
function __ZN28btHashedOverlappingPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i2 = STACKTOP;
 i4 = i3 + 8 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 255](i3);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 60 >> 2] & 127](i1, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK17btConvexHullShape9getVertexEiR9btVector3(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var d4 = 0.0, d5 = 0.0, i6 = 0;
 i6 = HEAP32[i2 + 104 >> 2] | 0;
 d5 = +HEAPF32[i6 + (i3 << 4) + 4 >> 2] * +HEAPF32[i2 + 16 >> 2];
 d4 = +HEAPF32[i6 + (i3 << 4) + 8 >> 2] * +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i6 + (i3 << 4) >> 2] * +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i1 + 4 >> 2] = d5;
 HEAPF32[i1 + 8 >> 2] = d4;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458592;
 HEAP32[i1 + 12 >> 2] = 458624;
 i3 = i1 + 60 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = i1 + 76 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 127](i4, HEAP32[i1 >> 2] | 0);
 i3 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3, HEAP32[i1 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcherD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 448336;
 i4 = i1 + 12 | 0;
 i3 = i1 + 20 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 24 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 __ZdlPv(i1);
 STACKTOP = i5;
 return;
}
function __ZN16btDbvtBroadphaseD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = STACKTOP;
 HEAP32[i3 >> 2] = 451752;
 if ((HEAP8[i3 + 152 | 0] | 0) != 0) {
  i2 = i3 + 96 | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 255](i4);
  __Z21btAlignedFreeInternalPv(HEAP32[i2 >> 2] | 0);
 }
 i2 = i3 + 4 | 0;
 i3 = i3 + 84 | 0;
 do {
  i3 = i3 + -40 | 0;
  __ZN6btDbvtD2Ev(i3);
 } while ((i3 | 0) != (i2 | 0));
 STACKTOP = i1;
 return;
}
function __ZNK16btCollisionShape20getAngularMotionDiscEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i4 + 8 | 0;
 i2 = i4;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 63](i1, i7, i2);
 d6 = +HEAPF32[i7 >> 2];
 d5 = +HEAPF32[i7 + 4 >> 2];
 d3 = +HEAPF32[i7 + 8 >> 2];
 d3 = +Math_sqrt(+(d6 * d6 + d5 * d5 + d3 * d3));
 STACKTOP = i4;
 return +(d3 + +HEAPF32[i2 >> 2]);
}
function __ZN26btTriangleIndexVertexArrayD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 457512;
 i4 = i1 + 24 | 0;
 i3 = i1 + 32 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 36 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 STACKTOP = i5;
 return;
}
function __ZN20btAxisSweep3InternalItE12destroyProxyEP17btBroadphaseProxyP12btDispatcher(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 108 >> 2] | 0;
 if ((i3 | 0) != 0) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3, HEAP32[i4 + 60 >> 2] | 0, i5);
 }
 __ZN20btAxisSweep3InternalItE12removeHandleEtP12btDispatcher(i1, HEAP32[i4 + 12 >> 2] & 65535, i5);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcherD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 448336;
 i4 = i1 + 12 | 0;
 i3 = i1 + 20 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 24 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 STACKTOP = i5;
 return;
}
function __ZNK13btSphereShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 d3 = d3 * .4000000059604645 * +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 7](i2);
 d3 = d3 * +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 7](i2);
 HEAPF32[i1 >> 2] = d3;
 HEAPF32[i1 + 4 >> 2] = d3;
 HEAPF32[i1 + 8 >> 2] = d3;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN21btCollisionDispatcher25dispatchAllCollisionPairsEP22btOverlappingPairCacheRK16btDispatcherInfoP12btDispatcher(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 448448;
 HEAP32[i6 + 4 >> 2] = i4;
 HEAP32[i6 + 8 >> 2] = i3;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 63](i2, i6, i1);
 STACKTOP = i5;
 return;
}
function __ZN24btConvexTriangleCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458624;
 i4 = i1 + 48 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 64 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 127](i5, HEAP32[i3 >> 2] | 0);
 i4 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, HEAP32[i3 >> 2] | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN22btBvhTriangleMeshShapeD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 447488;
 if ((HEAP8[i1 + 61 | 0] | 0) == 0) {
  __ZN19btTriangleMeshShapeD2Ev(i1);
  STACKTOP = i2;
  return;
 }
 i3 = i1 + 52 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 255](i4);
 __Z21btAlignedFreeInternalPv(HEAP32[i3 >> 2] | 0);
 __ZN19btTriangleMeshShapeD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBodyD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 445848;
 i4 = i1 + 480 | 0;
 i3 = i1 + 488 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 492 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 484 >> 2] = 0;
 STACKTOP = i5;
 return;
}
function __ZN15btNullPairCacheD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[i1 >> 2] = 447120;
 i4 = i1 + 8 | 0;
 i3 = i1 + 16 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 20 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld9serializeEP12btSerializer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 255](i1);
 __ZN23btDiscreteDynamicsWorld20serializeRigidBodiesEP12btSerializer(i2, i1);
 __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i2, i1);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1);
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = 455592;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 12 >> 2] = i1;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 63](i2, i5, i1);
 STACKTOP = i4;
 return;
}
function __ZN21btConeTwistConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i5 = HEAP32[i2 + 24 >> 2] | 0;
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 __ZN21btConeTwistConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK11btMatrix3x3S8_(i2, i1, i5 + 4 | 0, i4 + 4 | 0, i5 + 256 | 0, i4 + 256 | 0);
 STACKTOP = i3;
 return;
}
function __ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallback14processOverlapER16btBroadphasePair(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
  i3 = 1;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP32[i1 + 4 >> 2] | 0) == (i3 | 0);
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN24btConvexTriangleCallbackD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458624;
 i3 = i1 + 48 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = i1 + 64 | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 127](i4, HEAP32[i1 >> 2] | 0);
 i3 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3, HEAP32[i1 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN22btVoronoiSimplexSolver7closestER9btVector3(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 i3 = __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i2) | 0;
 i2 = i2 + 276 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i4;
 return i3 | 0;
}
function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr] = HEAP8[i1];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[i1 + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[i1 + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[i1 + 3 | 0];
 HEAP8[tempDoublePtr + 4 | 0] = HEAP8[i1 + 4 | 0];
 HEAP8[tempDoublePtr + 5 | 0] = HEAP8[i1 + 5 | 0];
 HEAP8[tempDoublePtr + 6 | 0] = HEAP8[i1 + 6 | 0];
 HEAP8[tempDoublePtr + 7 | 0] = HEAP8[i1 + 7 | 0];
}
function __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i4, i3, i2, i1, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i5 = STACKTOP;
 __ZN17btGjkPairDetector26getClosestPointsNonVirtualERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDraw(i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld21removeCollisionObjectEP17btCollisionObject(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i3 + 232 >> 2] & 2 | 0) == 0 | (i3 | 0) == 0) {
  __ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject(i1, i3);
  STACKTOP = i2;
  return;
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 88 >> 2] & 127](i1, i3);
  STACKTOP = i2;
  return;
 }
}
function __ZN22btBvhTriangleMeshShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 447488;
 if ((HEAP8[i1 + 61 | 0] | 0) != 0) {
  i3 = i1 + 52 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 255](i4);
  __Z21btAlignedFreeInternalPv(HEAP32[i3 >> 2] | 0);
 }
 __ZN19btTriangleMeshShapeD2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfENK14LocalInfoAdder14needsCollisionE_1P17btBroadphaseProxy(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 12 >> 2] | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function __ZN17btConvexHullShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = i1 + 12 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i3;
 return;
}
function __ZN11btUnionFindD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i4 = i1 + 4 | 0;
 i3 = i1 + 12 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 16 | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2] | 0) != 0) {
   __Z21btAlignedFreeInternalPv(i6);
  }
  HEAP32[i3 >> 2] = 0;
 }
 HEAP8[i2] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i5;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 457064;
 if ((HEAP8[i1 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 456976;
 if ((HEAP8[i1 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN25btSimulationIslandManagerC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 456736;
 __ZN11btUnionFindC2Ev(i1 + 4 | 0);
 HEAP8[i1 + 40 | 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP8[i1 + 60 | 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP8[i1 + 64 | 0] = 1;
 STACKTOP = i2;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 459376;
 if ((HEAP8[i1 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458136;
 if ((HEAP8[i1 + 8 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher13needsResponseEP17btCollisionObjectS1_(i2, i4, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i4 + 204 >> 2] | 0;
 if ((i4 & 4 | 0) == 0 ? (i3 = HEAP32[i1 + 204 >> 2] | 0, (i3 & 4 | 0) == 0) : 0) {
  if ((i4 & 3 | 0) == 0) {
   i1 = 1;
  } else {
   i1 = (i3 & 3 | 0) == 0;
  }
 } else {
  i1 = 0;
 }
 STACKTOP = i2;
 return i1 | 0;
}
function __ZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = 455416;
 HEAP32[i5 + 4 >> 2] = i3;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 63](i2, i5, i1);
 STACKTOP = i4;
 return;
}
function __ZN23btConvexConvexAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458976;
 if ((HEAP8[i1 + 16 | 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN18btConvexPolyhedronC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 459464;
 HEAP8[i1 + 20 | 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP8[i1 + 40 | 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP8[i1 + 60 | 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 return;
}
function __ZN11btRigidBodyC2ERKNS_27btRigidBodyConstructionInfoE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN17btCollisionObjectC2Ev(i2);
 HEAP32[i2 >> 2] = 445848;
 HEAP8[i2 + 492 | 0] = 1;
 HEAP32[i2 + 488 >> 2] = 0;
 HEAP32[i2 + 480 >> 2] = 0;
 HEAP32[i2 + 484 >> 2] = 0;
 __ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE(i2, i1);
 STACKTOP = i3;
 return;
}
function ___muldsi3(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i2 & 65535;
 i4 = i1 & 65535;
 i3 = Math_imul(i4, i6) | 0;
 i5 = i2 >>> 16;
 i4 = (i3 >>> 16) + (Math_imul(i4, i5) | 0) | 0;
 i1 = i1 >>> 16;
 i2 = Math_imul(i1, i6) | 0;
 return (tempRet0 = (i4 >>> 16) + (Math_imul(i1, i5) | 0) + (((i4 & 65535) + i2 | 0) >>> 16) | 0, i4 + i2 << 16 | i3 & 65535 | 0) | 0;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEENK15LocalInfoAdder214needsCollisionEP17btBroadphaseProxy(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function __ZN11btUnionFind5resetEi(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 __ZN11btUnionFind8allocateEi(i3, i1);
 if ((i1 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i3 + 12 >> 2] | 0;
 i4 = 0;
 do {
  HEAP32[i3 + (i4 << 3) >> 2] = i4;
  HEAP32[i3 + (i4 << 3) + 4 >> 2] = 1;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i1 | 0));
 STACKTOP = i2;
 return;
}
function dynCall_iiiiiiiiiiii(i12, i11, i10, i9, i8, i1, i6, i5, i4, i3, i7, i2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iiiiiiiiiiii[i12 & 3](i11 | 0, i10 | 0, i9 | 0, i8 | 0, i1 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i7 | 0, i2 | 0) | 0;
}
function __ZN15CProfileManager20Get_Time_Since_ResetEv() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _gettimeofday(i2 | 0, 0) | 0;
 i1 = HEAP32[114952] | 0;
 STACKTOP = i3;
 return +(+(((HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[i1 + 4 >> 2] | 0) + (((HEAP32[i2 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[114968] | 0) | 0) >>> 0) / 1.0e3);
}
function dynCall_diiiiiiiiiii(i12, i11, i10, i9, i8, i1, i6, i5, i4, i3, i7, i2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 return +FUNCTION_TABLE_diiiiiiiiiii[i12 & 1](i11 | 0, i10 | 0, i9 | 0, i8 | 0, i1 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i7 | 0, i2 | 0);
}
function __ZN21btConvexInternalShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0;
 d5 = +Math_abs(+(+HEAPF32[i2 >> 2]));
 d4 = +Math_abs(+(+HEAPF32[i2 + 4 >> 2]));
 d3 = +Math_abs(+(+HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 + 12 >> 2] = d5;
 HEAPF32[i1 + 16 >> 2] = d4;
 HEAPF32[i1 + 20 >> 2] = d3;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 return;
}
function __ZN27btContinuousConvexCollisionC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i1, i3, i2, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 HEAP32[i1 >> 2] = 451040;
 HEAP32[i1 + 4 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i3;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 457064;
 if ((HEAP8[i1 + 8 | 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 456976;
 if ((HEAP8[i1 + 8 | 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 459376;
 if ((HEAP8[i1 + 8 | 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZL21btAlignedAllocDefaultji(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = i1 + -1 | 0;
 i4 = FUNCTION_TABLE_ii[HEAP32[114948] & 127](i4 + 4 + i3 | 0) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 i3 = i1 - (i4 + 4) & i3;
 HEAP32[i4 + i3 >> 2] = i4;
 i4 = i4 + (i3 + 4) | 0;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN14btCapsuleShapeC2Eff(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0;
 i4 = STACKTOP;
 __ZN21btConvexInternalShapeC2Ev(i1);
 HEAP32[i1 >> 2] = 448152;
 HEAP32[i1 + 4 >> 2] = 10;
 HEAP32[i1 + 52 >> 2] = 1;
 HEAPF32[i1 + 28 >> 2] = d2;
 HEAPF32[i1 + 32 >> 2] = d3 * .5;
 HEAPF32[i1 + 36 >> 2] = d2;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458136;
 if ((HEAP8[i1 + 8 | 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btConvexConvexAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 458976;
 if ((HEAP8[i1 + 16 | 0] | 0) != 0 ? (i3 = HEAP32[i1 + 20 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK16btCollisionWorld20ConvexResultCallback14needsCollisionEP17btBroadphaseProxy(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP16[i3 + 10 >> 1] & HEAP16[i1 + 4 >> 1]) << 16 >> 16 == 0) {
  i3 = 0;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP16[i1 + 6 >> 1] & HEAP16[i3 + 8 >> 1]) << 16 >> 16 != 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i1, i6, i5, i4, i3, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i7 = 0;
 i7 = STACKTOP;
 __ZN20btAxisSweep3InternalItEC2ERK9btVector3S3_tttP22btOverlappingPairCacheb(i1, i6, i5, -2, -1, i4, i3, i2);
 HEAP32[i1 >> 2] = 446880;
 STACKTOP = i7;
 return;
}
function __ZNK16btCollisionWorld17RayResultCallback14needsCollisionEP17btBroadphaseProxy(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP16[i3 + 14 >> 1] & HEAP16[i1 + 4 >> 1]) << 16 >> 16 == 0) {
  i3 = 0;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP16[i1 + 6 >> 1] & HEAP16[i3 + 12 >> 1]) << 16 >> 16 != 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNK15btTriangleShape9getVertexEiR9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 i3 = i3 + (i2 << 4) + 56 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN7btClock19getTimeMillisecondsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 _gettimeofday(i2 | 0, 0) | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 STACKTOP = i3;
 return (((HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[i1 + 4 >> 2] | 0) | 0) / 1e3 | 0) + (((HEAP32[i2 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) | 0) * 1e3 | 0) | 0;
}
function __ZN16btCollisionWorld9serializeEP12btSerializer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 255](i1);
 __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i2, i1);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1);
 STACKTOP = i3;
 return;
}
function _llvm_cttz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[cttz_i8 + (i1 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 8 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 16 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[cttz_i8 + (i1 >>> 24) | 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[ctlz_i8 + (i1 >>> 24) | 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 16 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 8 & 255) | 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[ctlz_i8 + (i1 & 255) | 0] | 0) + 24 | 0;
}
function __ZNK15btTriangleShape7getEdgeEiR9btVector3S1_(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] & 63](i3, i2, i4);
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] & 63](i3, (i2 + 1 | 0) % 3 | 0, i1);
 STACKTOP = i5;
 return;
}
function dynCall_diiiiiiiiii(i11, i10, i9, i8, i7, i1, i5, i4, i3, i6, i2) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 return +FUNCTION_TABLE_diiiiiiiiii[i11 & 3](i10 | 0, i9 | 0, i8 | 0, i7 | 0, i1 | 0, i5 | 0, i4 | 0, i3 | 0, i6 | 0, i2 | 0);
}
function __ZNK14btAngularLimit7getHighEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0;
 i1 = STACKTOP;
 d3 = +_fmod(+(+HEAPF32[i2 >> 2] + +HEAPF32[i2 + 4 >> 2]), 6.2831854820251465);
 if (!(d3 < -3.1415927410125732)) {
  if (d3 > 3.1415927410125732) {
   d3 = d3 + -6.2831854820251465;
  }
 } else {
  d3 = d3 + 6.2831854820251465;
 }
 STACKTOP = i1;
 return +d3;
}
function __ZNK14btAngularLimit6getLowEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0;
 i1 = STACKTOP;
 d3 = +_fmod(+(+HEAPF32[i2 >> 2] - +HEAPF32[i2 + 4 >> 2]), 6.2831854820251465);
 if (!(d3 < -3.1415927410125732)) {
  if (d3 > 3.1415927410125732) {
   d3 = d3 + -6.2831854820251465;
  }
 } else {
  d3 = d3 + 6.2831854820251465;
 }
 STACKTOP = i1;
 return +d3;
}
function dynCall_viiiiddddiid(i12, i11, i10, i9, i8, d1, d6, d5, d4, i3, i7, d2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 d1 = +d1;
 d6 = +d6;
 d5 = +d5;
 d4 = +d4;
 i3 = i3 | 0;
 i7 = i7 | 0;
 d2 = +d2;
 FUNCTION_TABLE_viiiiddddiid[i12 & 0](i11 | 0, i10 | 0, i9 | 0, i8 | 0, +d1, +d6, +d5, +d4, i3 | 0, i7 | 0, +d2);
}
function dynCall_viiiiiiiiii(i11, i10, i9, i8, i7, i1, i5, i4, i3, i6, i2) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_viiiiiiiiii[i11 & 3](i10 | 0, i9 | 0, i8 | 0, i7 | 0, i1 | 0, i5 | 0, i4 | 0, i3 | 0, i6 | 0, i2 | 0);
}
function __ZN6btDbvt6removeEP10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 __ZL10removeleafP6btDbvtP10btDbvtNode(i1, i2) | 0;
 i4 = i1 + 4 | 0;
 __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = i2;
 i2 = i1 + 12 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
 STACKTOP = i3;
 return;
}
function __ZN20btPersistentManifold14clearUserCacheER15btManifoldPoint(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i2 = STACKTOP;
 i4 = i3 + 108 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i1 = HEAP32[113936] | 0, (i1 | 0) != 0) : 0) {
  FUNCTION_TABLE_ii[i1 & 127](i3) | 0;
  HEAP32[i4 >> 2] = 0;
 }
 STACKTOP = i2;
 return;
}
function __ZN17btCollisionObject8activateEb(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!i3 ? (HEAP32[i1 + 204 >> 2] & 3 | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i1 + 216 | 0;
 if (!(((HEAP32[i3 >> 2] | 0) + -4 | 0) >>> 0 < 2)) {
  HEAP32[i3 >> 2] = 1;
 }
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function dynCall_viiiidddddid(i12, i11, i10, i9, i8, d1, d6, d5, d4, d3, i7, d2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 d1 = +d1;
 d6 = +d6;
 d5 = +d5;
 d4 = +d4;
 d3 = +d3;
 i7 = i7 | 0;
 d2 = +d2;
 FUNCTION_TABLE_viiiidddddid[i12 & 0](i11 | 0, i10 | 0, i9 | 0, i8 | 0, +d1, +d6, +d5, +d4, +d3, i7 | 0, +d2);
}
function __ZN23btDiscreteDynamicsWorld19setConstraintSolverEP18btConstraintSolver(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = i4 + 241 | 0;
 i4 = i4 + 172 | 0;
 if ((HEAP8[i3] | 0) != 0) {
  __Z21btAlignedFreeInternalPv(HEAP32[i4 >> 2] | 0);
 }
 HEAP8[i3] = 0;
 HEAP32[i4 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function __ZNK23btDiscreteDynamicsWorld10getGravityEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = i2 + 220 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN23btConvexConvexAlgorithm10CreateFuncC2EP22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 4 | 0] = 0;
 HEAP32[i1 >> 2] = 458952;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 3;
 HEAP32[i1 + 12 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}
function __ZN21btConvexInternalShapeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13btConvexShapeC2Ev(i1);
 HEAP32[i1 >> 2] = 451488;
 HEAPF32[i1 + 12 >> 2] = 1.0;
 HEAPF32[i1 + 16 >> 2] = 1.0;
 HEAPF32[i1 + 20 >> 2] = 1.0;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 HEAPF32[i1 + 44 >> 2] = .03999999910593033;
 STACKTOP = i2;
 return;
}
function __ZN12CProfileNode5ResetEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 do {
  HEAP32[i2 + 4 >> 2] = 0;
  HEAPF32[i2 + 8 >> 2] = 0.0;
  i3 = HEAP32[i2 + 24 >> 2] | 0;
  if ((i3 | 0) != 0) {
   __ZN12CProfileNode5ResetEv(i3);
  }
  i2 = HEAP32[i2 + 28 >> 2] | 0;
 } while ((i2 | 0) != 0);
 STACKTOP = i1;
 return;
}
function __ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = STACKTOP;
 __ZN20btCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo(i1, i2);
 HEAP32[i1 >> 2] = 458048;
 STACKTOP = i4;
 return;
}
function dynCall_iiiiiiiiii(i10, i9, i8, i7, i6, i5, i4, i3, i2, i1) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[i10 & 3](i9 | 0, i8 | 0, i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallbackD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZThn4_N17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 i4 = i4 + -4 | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 63](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN27btContinuousConvexCollisionC2EPK13btConvexShapePK18btStaticPlaneShape(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 451040;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = i3;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = i2;
 return;
}
function __ZN34btPolyhedralConvexAabbCachingShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN21btConvexInternalShape15setLocalScalingERK9btVector3(i1, i2);
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i3;
 return;
}
function __ZN11btRigidBody26predictIntegratedTransformEfR11btTransform(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i3 + 4 | 0, i3 + 304 | 0, i3 + 320 | 0, d2, i1);
 STACKTOP = i4;
 return;
}
function ___uremdi3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i5 = i6 | 0;
 ___udivmoddi4(i4, i3, i2, i1, i5) | 0;
 STACKTOP = i6;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}
function __ZN11btRigidBody10setDampingEff(i1, d3, d2) {
 i1 = i1 | 0;
 d3 = +d3;
 d2 = +d2;
 if (d3 < 0.0) {
  d3 = 0.0;
 } else {
  d3 = d3 > 1.0 ? 1.0 : d3;
 }
 HEAPF32[i1 + 436 >> 2] = d3;
 if (d2 < 0.0) {
  d2 = 0.0;
 } else {
  d2 = d2 > 1.0 ? 1.0 : d2;
 }
 HEAPF32[i1 + 440 >> 2] = d2;
 return;
}
function __ZN16btDbvtBroadphase25calculateOverlappingPairsEP12btDispatcher(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN16btDbvtBroadphase7collideEP12btDispatcher(i2, i1);
 __ZN16btDbvtBroadphase22performDeferredRemovalEP12btDispatcher(i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld18addCollisionObjectEP17btCollisionObjectss(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectss(i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN34btPolyhedralConvexAabbCachingShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 455768;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btCollisionPairCallback14processOverlapER16btBroadphasePair(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[i4 + 188 >> 2] & 63](i2, i4, HEAP32[i1 + 4 >> 2] | 0);
 STACKTOP = i3;
 return 0;
}
function __GLOBAL__I_a() {
 var i1 = 0;
 i1 = STACKTOP;
 __ZN7btClockC2Ev(442576 | 0);
 HEAP32[442556 >> 2] = 0;
 HEAP32[442572 >> 2] = 0;
 HEAP32[442568 >> 2] = 9999;
 HEAP32[442564 >> 2] = 0;
 HEAP32[442560 >> 2] = 0;
 _atexit(246, 402552, ___dso_handle | 0) | 0;
 STACKTOP = i1;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResult20setShapeIdentifiersBEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResult20setShapeIdentifiersAEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK21btConvexInternalShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 72 >> 2] & 63](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN6btDbvtC2Ev(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 36 | 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = -1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}
function __ZN17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 63](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCacheD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 447120;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) != 0 ? (HEAP8[i1 + 20 | 0] | 0) != 0 : 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK13btSphereShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZNK15btTriangleShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 72 >> 2] & 63](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function ___muldi3(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0;
 i5 = i4;
 i6 = i3;
 i4 = ___muldsi3(i5, i6) | 0;
 i3 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i6) | 0) + (Math_imul(i1, i5) | 0) + i3 | i3 & 0, i4 | 0 | 0) | 0;
}
function __ZN20BroadphaseAabbTester7ProcessEPK10btDbvtNode(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, HEAP32[i1 + 36 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}
function __ZN19BroadphaseRayTester7ProcessEPK10btDbvtNode(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, HEAP32[i1 + 36 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}
function __ZN23btPolyhedralConvexShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 455768;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  __Z21btAlignedFreeInternalPv(i3);
 }
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK19btTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 63](i3, i2, i1);
 STACKTOP = i4;
 return;
}
function __ZN22btSubsimplexConvexCastC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolver(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 HEAP32[i1 >> 2] = 457360;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 + 12 >> 2] = i2;
 return;
}
function __ZN34btPolyhedralConvexAabbCachingShapeD1Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 455768;
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 __Z21btAlignedFreeInternalPv(i2);
 STACKTOP = i1;
 return;
}
function __ZN16btEmptyAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN20btCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo(i1, i2);
 HEAP32[i1 >> 2] = 453136;
 STACKTOP = i3;
 return;
}
function dynCall_iiiiiiii(i8, i7, i6, i5, i4, i3, i2, i1) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 0](i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function __ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 63](i1, i2, HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 48 >> 2] | 0);
 STACKTOP = i3;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN14LocalInfoAdderD0E_1v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK19btTriangleMeshShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK15btTriangleShape8getPlaneER9btVector3S1_i(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 116 >> 2] & 63](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN17btCollisionObject18setActivationStateEi(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i3 = i3 + 216 | 0;
 if (((HEAP32[i3 >> 2] | 0) + -4 | 0) >>> 0 < 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function __ZN15btGjkConvexCastC2EPK13btConvexShapeS2_P22btVoronoiSimplexSolver(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 HEAP32[i1 >> 2] = 459512;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 + 12 >> 2] = i2;
 return;
}
function __ZNK15btTriangleShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN22SphereTriangleDetectorC2EP13btSphereShapeP15btTriangleShapef(i1, i4, i3, d2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 HEAP32[i1 >> 2] = 457976;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function __ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btPolyhedralConvexShapeD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 455768;
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 __Z21btAlignedFreeInternalPv(i2);
 STACKTOP = i1;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __Z21btAlignedFreeInternalPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[114942] = (HEAP32[114942] | 0) + 1;
 FUNCTION_TABLE_vi[HEAP32[114946] & 255](i1);
 STACKTOP = i2;
 return;
}
function __ZNK14btOptimizedBvh16serializeInPlaceEPvjb(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 i4 = __ZNK14btQuantizedBvh9serializeEPvjb(i4, i3, i2, i1) | 0;
 STACKTOP = i5;
 return i4 | 0;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult15addContactPointERK9btVector3SA_f(i1, i2, i3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 return;
}
function __ZN7btClockaSERKS_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return i1 | 0;
}
function dynCall_iiiiiii(i7, i6, i5, i4, i3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 3](i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN15LocalInfoAdder2D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld15removeCharacterEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function b15(i2, i6, i3, i4, i5, i1, i7, i8, i9, i10, i11) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 abort(15);
 return 0.0;
}
function __ZN23btDiscreteDynamicsWorld13removeVehicleEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function b11(i2, i6, i3, i4, i5, i1, i7, i8, i9, i10, i11) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 abort(11);
 return 0;
}
function __ZN23btDiscreteDynamicsWorld12addCharacterEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __Z22btAlignedAllocInternalji(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[114940] = (HEAP32[114940] | 0) + 1;
 i2 = FUNCTION_TABLE_iii[HEAP32[114944] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN9RayTesterD0E_1v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld10addVehicleEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZN31btConvexPlaneCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZNK16btCollisionShape27getContactBreakingThresholdEf(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0;
 i3 = STACKTOP;
 d1 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 7](i2) * d1;
 STACKTOP = i3;
 return +d1;
}
function __ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef(i2, i1, d3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 d3 = +d3;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i4;
 return;
}
function dynCall_diiidii(i7, i6, i5, i4, d3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiidii[i7 & 3](i6 | 0, i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function dynCall_viiiiii(i7, i6, i5, i4, i3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 7](i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function __ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResultD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZL20btAlignedFreeDefaultPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[114950] & 255](HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr] = HEAP8[i1];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[i1 + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[i1 + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[i1 + 3 | 0];
}
function _bitshift64Shl(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i3 << i1 | (i2 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i2 << i1;
 }
 tempRet0 = i2 << i1 - 32;
 return 0;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_viiidii(i7, i6, i5, i4, d3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiidii[i7 & 0](i6 | 0, i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersBEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersAEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}
function __ZN11btRigidBody18proceedToTransformERK11btTransform(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN11btRigidBody24setCenterOfMassTransformERK11btTransform(i2, i1);
 STACKTOP = i3;
 return;
}
function b27(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 abort(27);
 return 0.0;
}
function __ZN16btEmptyAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function dynCall_viddiii(i7, i6, d5, d4, i3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 d5 = +d5;
 d4 = +d4;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viddiii[i7 & 0](i6 | 0, +d5, +d4, i3 | 0, i2 | 0, i1 | 0);
}
function __ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b13(i2, i6, i3, i4, d5, d1, d7, d8, i9, i10, d11) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 d1 = +d1;
 d7 = +d7;
 d8 = +d8;
 i9 = i9 | 0;
 i10 = i10 | 0;
 d11 = +d11;
 abort(13);
}
function dynCall_diiiii(i6, i5, i4, i3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiiii[i6 & 15](i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function __ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return;
}
function b22(i2, i6, i3, i4, d5, d1, d7, d8, d9, i10, d11) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 d1 = +d1;
 d7 = +d7;
 d8 = +d8;
 d9 = +d9;
 i10 = i10 | 0;
 d11 = +d11;
 abort(22);
}
function __ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN14LocalInfoAdderD2E_1v(i1) {
 i1 = i1 | 0;
 return;
}
function b24(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 abort(24);
}
function __ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btPolyhedralConvexShapeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN21btConvexInternalShapeC2Ev(i1);
 HEAP32[i1 >> 2] = 455768;
 HEAP32[i1 + 52 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function dynCall_diidii(i6, i5, i4, d3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diidii[i6 & 3](i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function dynCall_viiiii(i6, i5, i4, i3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiiii[i6 & 31](i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function __ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btTypedConstraint21setupSolverConstraintER20btAlignedObjectArrayI18btSolverConstraintEiif(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_viiiid(i6, i5, i4, i3, i2, d1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_viiiid[i6 & 1](i5 | 0, i4 | 0, i3 | 0, i2 | 0, +d1);
}
function dynCall_viidii(i6, i5, i4, d3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viidii[i6 & 0](i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function b30(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(30);
 return 0;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btBoxBoxDetectorC2EP10btBoxShapeS1_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 458216;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolverD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN35btSequentialImpulseConstraintSolverD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function _i64Subtract(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 - i3 - (i1 >>> 0 > i2 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i2 - i1 >>> 0 | 0) | 0;
}
function __ZN20btCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 458280;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 >> 2];
 return;
}
function __ZN20btAxisSweep3InternalItED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function dynCall_iiiii(i5, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 15](i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function _i64Add(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i4 = i1 + i4 >>> 0;
 return (tempRet0 = i3 + i2 + (i4 >>> 0 < i1 >>> 0 | 0) >>> 0, i4 | 0) | 0;
}
function __ZN31btDefaultCollisionConfigurationD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN31btDefaultCollisionConfigurationD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN15LocalInfoAdder2D2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btTriangleShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btPolyhedralConvexShapeD2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN7btClockC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = __Znwj(8) | 0;
 HEAP32[i1 >> 2] = i3;
 _gettimeofday(i3 | 0, 0) | 0;
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN9RayTesterD2E_1v(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN28btHashedOverlappingPairCacheD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN28btHashedOverlappingPairCacheD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN28btCompoundCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN28btCompoundCollisionAlgorithmD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN18btConstraintSolver9allSolvedERK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}
function __ZN12btAxisSweep3D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btManifoldResult20setShapeIdentifiersBEii(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 148 >> 2] = i3;
 HEAP32[i1 + 156 >> 2] = i2;
 return;
}
function __ZN16btManifoldResult20setShapeIdentifiersAEii(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 144 >> 2] = i3;
 HEAP32[i1 + 152 >> 2] = i2;
 return;
}
function dynCall_viiii(i5, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiii[i5 & 63](i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function __ZN10btBoxShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btPolyhedralConvexShapeD2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN28btHashedOverlappingPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 72 >> 2] = i2;
 return;
}
function __ZN15btNullPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}
function dynCall_iidid(i5, i4, d3, i2, d1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 d1 = +d1;
 return FUNCTION_TABLE_iidid[i5 & 1](i4 | 0, +d3, i2 | 0, +d1) | 0;
}
function __ZN17btCollisionObject17setCollisionShapeEP16btCollisionShape(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 192 >> 2] = i2;
 HEAP32[i1 + 200 >> 2] = i2;
 return;
}
function __ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN25btSimulationIslandManagerD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN25btSimulationIslandManagerD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14btQuantizedBvhD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhD2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14btOptimizedBvhD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhD2Ev(i1);
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14btConcaveShapeC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 35;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 >> 2] = 458480;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function dynCall_viiid(i5, i4, i3, i2, d1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_viiid[i5 & 7](i4 | 0, i3 | 0, i2 | 0, +d1);
}
function dynCall_viidi(i5, i4, i3, d2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 FUNCTION_TABLE_viidi[i5 & 3](i4 | 0, i3 | 0, +d2, i1 | 0);
}
function dynCall_vidii(i5, i4, d3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vidii[i5 & 0](i4 | 0, +d3, i2 | 0, i1 | 0);
}
function __ZN28btHashedOverlappingPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 24 >> 2] = i2;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btDiscreteDynamicsWorldD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btDiscreteDynamicsWorldD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN21btCollisionDispatcher26getManifoldByIndexInternalEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function _rand_r(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (Math_imul(HEAP32[i1 >> 2] | 0, 31010991) | 0) + 1735287159 & 2147483647;
 HEAP32[i1 >> 2] = i2;
 return i2 | 0;
}
function __ZN7btClockD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[i2 >> 2] | 0;
 if ((i2 | 0) != 0) {
  __ZdlPv(i2);
 }
 STACKTOP = i1;
 return;
}
function __ZN14btOptimizedBvhC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhC2Ev(i1);
 HEAP32[i1 >> 2] = 454896;
 STACKTOP = i2;
 return;
}
function __ZN11btUnionFindC2Ev(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 16 | 0] = 1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}
function dynCall_iiii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiii[i4 & 31](i3 | 0, i2 | 0, i1 | 0) | 0;
}
function b0(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(0);
 return 0;
}
function __ZNK23btDiscreteDynamicsWorld13getConstraintEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 192 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function __ZN18btConvexPolyhedronD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN18btConvexPolyhedronD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld13getConstraintEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 192 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function __ZN15btNullPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_diii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diii[i4 & 7](i3 | 0, i2 | 0, i1 | 0);
}
function __ZN20btAxisSweep3InternalItED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN17btTypedConstraint23solveConstraintObsoleteER11btRigidBodyS1_f(i1, i2, i3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 return;
}
function __ZN16btCollisionWorldD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN16btCollisionWorldD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_iiid(i4, i3, i2, d1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 return FUNCTION_TABLE_iiid[i4 & 3](i3 | 0, i2 | 0, +d1) | 0;
}
function __ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function ___udivdi3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = ___udivmoddi4(i4, i3, i2, i1, 0) | 0;
 return i4 | 0;
}
function __ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld27ClosestConvexResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN15btNullPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZN14BenchmarkDemo7D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo6D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo5D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo4D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo3D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo2D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo1D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function dynCall_viii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viii[i4 & 63](i3 | 0, i2 | 0, i1 | 0);
}
function __ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN13BenchmarkDemoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN21btConvexInternalShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld24ClosestRayResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt9exceptionD2Ev(i1 | 0);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btTriangleShapeD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btPolyhedralConvexShapeD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN7btClock5resetEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _gettimeofday(HEAP32[i1 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return;
}
function __ZN28btCompoundCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return i2 | 0;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN17btCollisionObjectD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btAxisSweep3D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 STACKTOP = i2;
 return;
}
function b21(i1, i2, i3, d4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(21);
 return 0.0;
}
function dynCall_viid(i4, i3, i2, d1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_viid[i4 & 1](i3 | 0, i2 | 0, +d1);
}
function dynCall_vidi(i4, i3, d2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 FUNCTION_TABLE_vidi[i4 & 7](i3 | 0, +d2, i1 | 0);
}
function b6(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(6);
 return 0;
}
function __ZN10btBoxShapeD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btPolyhedralConvexShapeD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btConvexConvexAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14btCapsuleShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK17btConvexHullShape8getPlaneER9btVector3S1_i(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}
function __ZN34btClosestNotMeConvexResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache18addOverlappingPairEP17btBroadphaseProxyS1_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}
function __ZN13btSphereShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN13btRaycastBar2D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN7btClockD2Ev(i1 + 40024 | 0);
 STACKTOP = i2;
 return;
}
function __ZN13btConvexShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __Z21btAlignedFreeInternalPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN13btConvexShapeC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 35;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 >> 2] = 451624;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolverD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function __ZThn4_N17DebugDrawcallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1 + -4 | 0);
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld14setDebugDrawerEP12btIDebugDraw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 80 >> 2] = i2;
 return;
}
function __ZN14btOptimizedBvhD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZNK23btGeneric6DofConstraint8getAngleEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +(+HEAPF32[i2 + (i1 << 2) + 1184 >> 2]);
}
function __ZN30btGjkEpaPenetrationDepthSolverD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN30btActivatingCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo7D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo6D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo5D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo4D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo3D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo2D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14BenchmarkDemo1D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN7RagDollD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN7RagDollD2Ev(i1);
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZN13BenchmarkDemoD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN13BenchmarkDemoD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN28btTriangleConvexcastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b17(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(17);
}
function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZNSt9exceptionD2Ev(i1 | 0);
 STACKTOP = i2;
 return;
}
function __ZN27btContinuousConvexCollisionD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZL14btAllocDefaultj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = _malloc(i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function dynCall_iii(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iii[i3 & 31](i2 | 0, i1 | 0) | 0;
}
function __ZN25btTriangleRaycastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN24btPerturbedContactResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btConvexCast10CastResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btCollisionPairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache8findPairEP17btBroadphaseProxyS1_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}
function __ZN15btNullPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b4(i1, i2, i3, d4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(4);
}
function b19(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(19);
 return 0.0;
}
function __ZN31btDefaultCollisionConfiguration25getPersistentManifoldPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN31btDefaultCollisionConfiguration25getCollisionAlgorithmPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function __ZN22btSubsimplexConvexCastD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN22btCompoundLeafCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN22SphereTriangleDetectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZdlPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 STACKTOP = i2;
 return;
}
function __ZNK28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN21btSingleSweepCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN21btConeTwistConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN21SupportVertexCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 while (HEAP8[i2] | 0) {
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}
function __ZN28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN20btDefaultMotionStateD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN20btCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN20BroadphaseAabbTesterD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function b9(i1, d2, d3, i4, i5, i6) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(9);
}
function b29(i1, i2, d3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(29);
 return 0.0;
}
function __ZN19btTriangleMeshShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN19btSingleRayCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN19BroadphaseRayTesterD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK26btTriangleIndexVertexArray14hasPremadeAabbEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 48 >> 2] | 0) == 1 | 0;
}
function __ZN18btDbvtTreeColliderD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = i1;
  threwValue = i2;
 }
}
function __ZNK20btPersistentManifold27getContactBreakingThresholdEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 1120 >> 2]);
}
function __ZN17btTypedConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN17btHingeConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN17btGjkPairDetectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN17DebugDrawcallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function dynCall_vii(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vii[i3 & 127](i2 | 0, i1 | 0);
}
function dynCall_did(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 return +FUNCTION_TABLE_did[i3 & 1](i2 | 0, +d1);
}
function __ZNK28btHashedOverlappingPairCache22getNumOverlappingPairsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZN16btPointCollectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btManifoldResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btBoxBoxDetectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN7RagDollD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN7RagDollD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btGjkConvexCastD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btConvexCast10CastResult13reportFailureEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZNK13btSphereShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 28 >> 2] * +HEAPF32[i1 + 12 >> 2]);
}
function __ZN21btConvexInternalShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 44 >> 2] = d2;
 return;
}
function __ZN16btPointCollector20setShapeIdentifiersBEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN16btPointCollector20setShapeIdentifiersAEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN14btConcaveShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZdlPv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK20btAxisSweep3InternalItE23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 92 >> 2] | 0;
}
function __ZNK17btConvexHullShape8isInsideERK9btVector3f(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 return 0;
}
function __ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN31btDefaultCollisionConfiguration17getStackAllocatorEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZN31btDefaultCollisionConfiguration16getSimplexSolverEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 32 >> 2] | 0;
}
function __ZN21btCollisionDispatcher26getInternalManifoldPointerEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 20 >> 2] | 0;
}
function __ZNK21btCollisionDispatcher23getInternalManifoldPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 196 >> 2] | 0;
}
function __ZN20btAxisSweep3InternalItE23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 92 >> 2] | 0;
}
function __ZN12btConvexCast10CastResult15drawCoordSystemERK11btTransform(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZNK19btTriangleMeshShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 48 >> 2] | 0) + 4 | 0;
}
function __ZN21btCollisionDispatcher23getInternalManifoldPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 196 >> 2] | 0;
}
function __ZNK26btTriangleIndexVertexArray24unLockReadOnlyVertexBaseEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function dynCall_vid(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_vid[i3 & 15](i2 | 0, +d1);
}
function __ZN23btDiscreteDynamicsWorld19getConstraintSolverEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 172 >> 2] | 0;
}
function __ZL13btFreeDefaultPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZNK23btDiscreteDynamicsWorld17getNumConstraintsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 184 >> 2] | 0;
}
function __ZNK15btNullPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN35btSequentialImpulseConstraintSolver5resetEv(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 124 >> 2] = 0;
 return;
}
function __ZN18btConstraintSolver12prepareSolveEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN15btNullPairCache20sortOverlappingPairsEP12btDispatcher(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b1(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(1);
}
function __ZNK26btTriangleIndexVertexArray14getNumSubPartsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function __ZN15btNullPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN15CProfileManager23Increment_Frame_CounterEv() {
 HEAP32[114966] = (HEAP32[114966] | 0) + 1;
 return;
}
function __ZN14btConcaveShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function b23(i1, i2, d3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(23);
}
function b20(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 abort(20);
}
function __ZNK16btDbvtBroadphase23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 96 >> 2] | 0;
}
function __ZN13btSphereShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 44 >> 2] = d2;
 return;
}
function __ZN16btDbvtBroadphase23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 96 >> 2] | 0;
}
function __ZN26btTriangleIndexVertexArray19preallocateVerticesEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZN17btCollisionObject24checkCollideWithOverrideEPS_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function __ZNK21btCollisionDispatcher15getNumManifoldsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}
function __ZN28btHashedOverlappingPairCache23getOverlappingPairArrayEv(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function __ZN26btTriangleIndexVertexArray18preallocateIndicesEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b35(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(35);
 return 0;
}
function __ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZN26btTriangleIndexVertexArray16unLockVertexBaseEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 127](i1 | 0) | 0;
}
function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}
function __ZNK17btConvexHullShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 96 >> 2] | 0;
}
function __ZNK21btConvexInternalShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 44 >> 2]);
}
function b36(i1, d2, i3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 d4 = +d4;
 abort(36);
 return 0;
}
function __ZNK23btStridingMeshInterface28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 28;
}
function __ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function __ZN16btCollisionWorld14getDebugDrawerEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 80 >> 2] | 0;
}
function __ZN15DemoApplication16getDynamicsWorldEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}
function __ZNK22btBvhTriangleMeshShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 60;
}
function __ZNK21btConeTwistConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 204;
}
function __ZNK17btConvexHullShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 96 >> 2] | 0;
}
function __ZNK15btTriangleShape36getNumPreferredPenetrationDirectionsEv(i1) {
 i1 = i1 | 0;
 return 2;
}
function dynCall_di(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_di[i2 & 7](i1 | 0);
}
function __ZNK21btConvexInternalShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 52;
}
function __ZN6btDbvt8ICollide7DescentEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function __ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btDiscreteDynamicsWorld11setNumTasksEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b37(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(37);
}
function __ZNK17btHingeConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 212;
}
function __ZNK17btCollisionObject28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 248;
}
function __ZNK21btConvexInternalShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return i1 + 12 | 0;
}
function __ZNK17btTypedConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 44;
}
function __ZNK17btConvexHullShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 68;
}
function __ZNK14btQuantizedBvh31calculateSerializeBufferSizeNewEv(i1) {
 i1 = i1 | 0;
 return 84;
}
function __ZNK14btConcaveShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function __ZNK10btBoxShape36getNumPreferredPenetrationDirectionsEv(i1) {
 i1 = i1 | 0;
 return 6;
}
function __ZN15btNullPairCache23getOverlappingPairArrayEv(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function __ZNK16btCollisionShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 12;
}
function __ZN28btHashedOverlappingPairCache18hasDeferredRemovalEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 255](i1 | 0);
}
function b31(i1, i2, i3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 abort(31);
}
function b10(i1, d2, i3, i4) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(10);
}
function __ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN12btConvexCast10CastResult9DebugDrawEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 return;
}
function __ZNK14btCapsuleShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 60;
}
function __ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b8(i1, i2, d3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 abort(8);
}
function b26(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(26);
 return 0.0;
}
function __ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btCollisionWorld27ClosestConvexResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK11btRigidBody28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 480;
}
function __ZN32btSphereSphereCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b16(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(16);
 return 0;
}
function __ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btCollisionWorld24ClosestRayResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b18(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 abort(18);
 return 0;
}
function __ZNK15btNullPairCache22getNumOverlappingPairsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZN28btCompoundCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK23btDiscreteDynamicsWorld12getWorldTypeEv(i1) {
 i1 = i1 | 0;
 return 2;
}
function __ZN26btBoxBoxCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK22btBvhTriangleMeshShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 447640;
}
function __ZN23btConvexConvexAlgorithm10CreateFuncD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btNullPairCache18hasDeferredRemovalEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZN34btClosestNotMeConvexResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK19btTriangleMeshShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 457744;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolverD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN20btAxisSweep3InternalItE10printStatsEv(i1) {
 i1 = i1 | 0;
 return;
}
function b32(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(32);
}
function __ZNK17btConvexHullShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNK15btTriangleShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return 3;
}
function __ZNK17btConvexHullShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 451472;
}
function __ZN31btInternalTriangleIndexCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK15btTriangleShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZN30btGjkEpaPenetrationDepthSolverD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN30btActivatingCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btTypedConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 return;
}
function b34(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 abort(34);
}
function b12(i1, d2, i3) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 abort(12);
}
function __ZNK15btTriangleShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 456712;
}
function __ZNK15btTriangleShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return 3;
}
function __ZNK14btCapsuleShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 448304;
}
function __ZN28btTriangleConvexcastCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btEmptyAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN13BenchmarkDemo15displayCallbackEv(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK13btSphereShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 444168;
}
function __ZNK10btBoxShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return 8;
}
function __ZN27btContinuousConvexCollisionD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btDbvtBroadphase10printStatsEv(i1) {
 i1 = i1 | 0;
 return;
}
function b25(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(25);
 return 0;
}
function __ZNK10btBoxShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 6;
}
function __ZNK10btBoxShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return 12;
}
function __ZN25btTriangleRaycastCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b28(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(28);
 return 0.0;
}
function __ZNK10btBoxShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 444432;
}
function __ZN24btPerturbedContactResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN12btConvexCast10CastResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btStridingMeshInterfaceD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btCollisionPairCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZThn4_N17DebugDrawcallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN22btSubsimplexConvexCastD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN22btCompoundLeafCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN22SphereTriangleDetectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 460776;
}
function __ZN21btSingleSweepCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN21btConvexInternalShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN21btConeTwistConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN21SupportVertexCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN20btDefaultMotionStateD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN20btCollisionAlgorithmD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN20BroadphaseAabbTesterD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15DemoApplication6myinitEv(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 1]();
}
function __ZN19btTriangleMeshShapeD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN19btSingleRayCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN19BroadphaseRayTesterD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN18btTriangleCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN18btDbvtTreeColliderD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}
function __ZN17btTypedConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btHingeConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btGjkPairDetectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btCollisionObjectD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17DebugDrawcallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btPointCollectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btManifoldResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btEmptyAlgorithmD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btBoxBoxDetectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btGjkConvexCastD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN14btConcaveShapeD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN14btCapsuleShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function runPostSets() {
 HEAP32[115204] = __ZTISt9exception;
}
function __ZN13btSphereShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN13btConvexShapeD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b5(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(5);
}
function __ZN12btDispatcherD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN12btConvexCastD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}
function b2(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(2);
}
function b14(i1) {
 i1 = i1 | 0;
 abort(14);
 return 0.0;
}
function setTempRet9(i1) {
 i1 = i1 | 0;
 tempRet9 = i1;
}
function setTempRet8(i1) {
 i1 = i1 | 0;
 tempRet8 = i1;
}
function setTempRet7(i1) {
 i1 = i1 | 0;
 tempRet7 = i1;
}
function setTempRet6(i1) {
 i1 = i1 | 0;
 tempRet6 = i1;
}
function setTempRet5(i1) {
 i1 = i1 | 0;
 tempRet5 = i1;
}
function setTempRet4(i1) {
 i1 = i1 | 0;
 tempRet4 = i1;
}
function setTempRet3(i1) {
 i1 = i1 | 0;
 tempRet3 = i1;
}
function setTempRet2(i1) {
 i1 = i1 | 0;
 tempRet2 = i1;
}
function setTempRet1(i1) {
 i1 = i1 | 0;
 tempRet1 = i1;
}
function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}
function b7(i1) {
 i1 = i1 | 0;
 abort(7);
 return 0;
}
function _rand() {
 return _rand_r(___rand_seed) | 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b3(i1) {
 i1 = i1 | 0;
 abort(3);
}
function b33() {
 abort(33);
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0];
  var FUNCTION_TABLE_viiiii = [b1,__ZN20btAxisSweep3InternalItE7setAabbEP17btBroadphaseProxyRK9btVector3S5_P12btDispatcher,__ZN16btDbvtBroadphase7setAabbEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher,__ZN16btEmptyAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb,__ZN32btSphereSphereCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN34btSphereTriangleCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN22SphereTriangleDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb,__ZN26btBoxBoxCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb,__ZN28btCompoundCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN33btConvexConcaveCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN31btConvexPlaneCollisionAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,__ZN23btDiscreteDynamicsWorld25predictUnconstraintMotionEf,__ZN23btDiscreteDynamicsWorld19integrateTransformsEf,__ZN23btDiscreteDynamicsWorld22addSpeculativeContactsEf,__ZN23btDiscreteDynamicsWorld28internalSingleStepSimulationEf,__ZN23btDiscreteDynamicsWorld18saveKinematicStateEf,__ZN23btDiscreteDynamicsWorld14updateVehiclesEf,__ZN10btBoxShape9setMarginEf,__ZN14btConcaveShape9setMarginEf,__ZN14btCapsuleShape9setMarginEf,__ZN12btConvexCast10CastResult9DebugDrawEf,__ZN21btConvexInternalShape9setMarginEf,__ZN13btSphereShape9setMarginEf,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN15DemoApplication6myinitEv,__ZN13BenchmarkDemoD1Ev,__ZN13BenchmarkDemoD0Ev,__ZN13BenchmarkDemo20clientMoveAndDisplayEv,__ZN13BenchmarkDemo15displayCallbackEv,__ZN14BenchmarkDemo7D1Ev,__ZN14BenchmarkDemo7D0Ev,__ZN14BenchmarkDemo6D1Ev,__ZN14BenchmarkDemo6D0Ev,__ZN14BenchmarkDemo5D1Ev,__ZN14BenchmarkDemo5D0Ev,__ZN14BenchmarkDemo4D1Ev,__ZN14BenchmarkDemo4D0Ev,__ZN14BenchmarkDemo3D1Ev,__ZN14BenchmarkDemo3D0Ev,__ZN14BenchmarkDemo2D1Ev,__ZN14BenchmarkDemo2D0Ev,__ZN14BenchmarkDemo1D1Ev,__ZN14BenchmarkDemo1D0Ev,__ZN16btCollisionWorld24ClosestRayResultCallbackD1Ev,__ZN16btCollisionWorld24ClosestRayResultCallbackD0Ev,__ZN7RagDollD1Ev,__ZN7RagDollD0Ev,__ZN20btDefaultMotionStateD1Ev,__ZN20btDefaultMotionStateD0Ev,__ZN21btConeTwistConstraintD1Ev,__ZN21btConeTwistConstraintD0Ev,__ZN21btConeTwistConstraint13buildJacobianEv
  ,__ZN23btDiscreteDynamicsWorldD2Ev,__ZN23btDiscreteDynamicsWorldD0Ev,__ZN16btCollisionWorld11updateAabbsEv,__ZN23btDiscreteDynamicsWorld14debugDrawWorldEv,__ZN16btCollisionWorld33performDiscreteCollisionDetectionEv,__ZN23btDiscreteDynamicsWorld23synchronizeMotionStatesEv,__ZN23btDiscreteDynamicsWorld11clearForcesEv,__ZN23btDiscreteDynamicsWorld26calculateSimulationIslandsEv,__ZN23btDiscreteDynamicsWorld12applyGravityEv,__ZN34btClosestNotMeConvexResultCallbackD1Ev,__ZN34btClosestNotMeConvexResultCallbackD0Ev,__ZN16btCollisionWorld27ClosestConvexResultCallbackD1Ev,__ZN16btCollisionWorld27ClosestConvexResultCallbackD0Ev,__ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallbackD2Ev,__ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallbackD0Ev,__ZN17btHingeConstraintD1Ev,__ZN17btHingeConstraintD0Ev,__ZN17btHingeConstraint13buildJacobianEv,__ZN11btRigidBodyD1Ev,__ZN11btRigidBodyD0Ev,__ZN35btSequentialImpulseConstraintSolverD2Ev,__ZN35btSequentialImpulseConstraintSolverD0Ev,__ZN35btSequentialImpulseConstraintSolver5resetEv,__ZN17btTypedConstraintD1Ev,__ZN17btTypedConstraintD0Ev,__ZN17btTypedConstraint13buildJacobianEv,__ZN12btAxisSweep3D1Ev,__ZN12btAxisSweep3D0Ev,__ZN20btAxisSweep3InternalItE10printStatsEv,__ZN20btAxisSweep3InternalItED1Ev
  ,__ZN20btAxisSweep3InternalItED0Ev,__ZN15btNullPairCacheD1Ev,__ZN15btNullPairCacheD0Ev,__ZN10btBoxShapeD1Ev,__ZN10btBoxShapeD0Ev,__ZN22btBvhTriangleMeshShapeD2Ev,__ZN22btBvhTriangleMeshShapeD0Ev,__ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev,__ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev,__ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD2Ev,__ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD0Ev,__ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev,__ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev,__ZN14btCapsuleShapeD1Ev,__ZN14btCapsuleShapeD0Ev,__ZN21btCollisionDispatcherD2Ev,__ZN21btCollisionDispatcherD0Ev,__ZN23btCollisionPairCallbackD1Ev,__ZN23btCollisionPairCallbackD0Ev,__ZN17btCollisionObjectD2Ev,__ZN17btCollisionObjectD0Ev,__ZN16btCollisionWorldD2Ev,__ZN16btCollisionWorldD0Ev,__ZN16btCollisionWorld14debugDrawWorldEv,__ZN17DebugDrawcallbackD1Ev,__ZN17DebugDrawcallbackD0Ev,__ZThn4_N17DebugDrawcallbackD1Ev,__ZThn4_N17DebugDrawcallbackD0Ev,__ZN21btSingleSweepCallbackD1Ev,__ZN21btSingleSweepCallbackD0Ev
  ,__ZN19btSingleRayCallbackD1Ev,__ZN19btSingleRayCallbackD0Ev,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN14LocalInfoAdderD2E_1v,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN14LocalInfoAdderD0E_1v,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2E_0v,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0E_0v,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2Ev,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0Ev,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN15LocalInfoAdder2D2Ev,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN15LocalInfoAdder2D0Ev,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN9RayTesterD2E_1v,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN9RayTesterD0E_1v,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2E_0v,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0E_0v,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2Ev,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0Ev,__ZN12btConvexCast10CastResultD1Ev,__ZN12btConvexCast10CastResultD0Ev,__ZN27btContinuousConvexCollisionD1Ev,__ZN27btContinuousConvexCollisionD0Ev,__ZN16btPointCollectorD1Ev,__ZN16btPointCollectorD0Ev,__ZN17btConvexHullShapeD1Ev,__ZN17btConvexHullShapeD0Ev,__ZN21btConvexInternalShapeD1Ev,__ZN21btConvexInternalShapeD0Ev,__ZN13btConvexShapeD2Ev,__ZN13btConvexShapeD0Ev,__ZN16btDbvtBroadphaseD2Ev,__ZN16btDbvtBroadphaseD0Ev
  ,__ZN16btDbvtBroadphase10printStatsEv,__ZN20BroadphaseAabbTesterD1Ev,__ZN20BroadphaseAabbTesterD0Ev,__ZN19BroadphaseRayTesterD1Ev,__ZN19BroadphaseRayTesterD0Ev,__ZN18btDbvtTreeColliderD1Ev,__ZN18btDbvtTreeColliderD0Ev,__ZN31btDefaultCollisionConfigurationD2Ev,__ZN31btDefaultCollisionConfigurationD0Ev,__ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD1Ev,__ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD0Ev,__ZN26btBoxBoxCollisionAlgorithm10CreateFuncD1Ev,__ZN26btBoxBoxCollisionAlgorithm10CreateFuncD0Ev,__ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD1Ev,__ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD0Ev,__ZN32btSphereSphereCollisionAlgorithm10CreateFuncD1Ev,__ZN32btSphereSphereCollisionAlgorithm10CreateFuncD0Ev,__ZN16btEmptyAlgorithm10CreateFuncD1Ev,__ZN16btEmptyAlgorithm10CreateFuncD0Ev,__ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD1Ev,__ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD0Ev,__ZN28btCompoundCollisionAlgorithm10CreateFuncD1Ev,__ZN28btCompoundCollisionAlgorithm10CreateFuncD0Ev,__ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD1Ev,__ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD0Ev,__ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD1Ev,__ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD0Ev,__ZN16btEmptyAlgorithmD1Ev,__ZN16btEmptyAlgorithmD0Ev,__ZN30btGjkEpaPenetrationDepthSolverD1Ev
  ,__ZN30btGjkEpaPenetrationDepthSolverD0Ev,__ZN17btGjkPairDetectorD1Ev,__ZN17btGjkPairDetectorD0Ev,__ZN16btManifoldResultD1Ev,__ZN16btManifoldResultD0Ev,__ZN33btMinkowskiPenetrationDepthSolverD1Ev,__ZN33btMinkowskiPenetrationDepthSolverD0Ev,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResultD2Ev,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResultD0Ev,__ZN14btOptimizedBvhD2Ev,__ZN14btOptimizedBvhD0Ev,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD2E_0v,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD0E_0v,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD2Ev,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD0Ev,__ZN28btHashedOverlappingPairCacheD2Ev,__ZN28btHashedOverlappingPairCacheD0Ev,__ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD2Ev,__ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD0Ev,__ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD2Ev,__ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD0Ev,__ZN23btPolyhedralConvexShapeD2Ev,__ZN23btPolyhedralConvexShapeD0Ev,__ZN34btPolyhedralConvexAabbCachingShapeD1Ev,__ZN34btPolyhedralConvexAabbCachingShapeD0Ev,__ZN14btQuantizedBvhD2Ev,__ZN14btQuantizedBvhD0Ev,__ZN25btTriangleRaycastCallbackD1Ev,__ZN25btTriangleRaycastCallbackD0Ev,__ZN28btTriangleConvexcastCallbackD1Ev
  ,__ZN28btTriangleConvexcastCallbackD0Ev,__ZN15btTriangleShapeD1Ev,__ZN15btTriangleShapeD0Ev,__ZN25btSimulationIslandManagerD2Ev,__ZN25btSimulationIslandManagerD0Ev,__ZN13btSphereShapeD1Ev,__ZN13btSphereShapeD0Ev,__ZN32btSphereSphereCollisionAlgorithmD2Ev,__ZN32btSphereSphereCollisionAlgorithmD0Ev,__ZN34btSphereTriangleCollisionAlgorithmD2Ev,__ZN34btSphereTriangleCollisionAlgorithmD0Ev,__ZN22btSubsimplexConvexCastD1Ev,__ZN22btSubsimplexConvexCastD0Ev,__ZN26btTriangleIndexVertexArrayD2Ev,__ZN26btTriangleIndexVertexArrayD0Ev,__ZN19btTriangleMeshShapeD2Ev,__ZN19btTriangleMeshShapeD0Ev,__ZN21SupportVertexCallbackD1Ev,__ZN21SupportVertexCallbackD0Ev,__ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD2Ev,__ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD0Ev,__ZN22SphereTriangleDetectorD1Ev,__ZN22SphereTriangleDetectorD0Ev,__ZN30btActivatingCollisionAlgorithmD2Ev,__ZN30btActivatingCollisionAlgorithmD0Ev,__ZN26btBoxBoxCollisionAlgorithmD2Ev,__ZN26btBoxBoxCollisionAlgorithmD0Ev,__ZN16btBoxBoxDetectorD1Ev,__ZN16btBoxBoxDetectorD0Ev,__ZN20btCollisionAlgorithmD1Ev
  ,__ZN20btCollisionAlgorithmD0Ev,__ZN28btCompoundCollisionAlgorithmD2Ev,__ZN28btCompoundCollisionAlgorithmD0Ev,__ZN22btCompoundLeafCallbackD1Ev,__ZN22btCompoundLeafCallbackD0Ev,__ZN14btConcaveShapeD2Ev,__ZN14btConcaveShapeD0Ev,__ZN33btConvexConcaveCollisionAlgorithmD2Ev,__ZN33btConvexConcaveCollisionAlgorithmD0Ev,__ZN24btConvexTriangleCallbackD2Ev,__ZN24btConvexTriangleCallbackD0Ev,__ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD2Ev,__ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD0Ev,__ZN23btConvexConvexAlgorithm10CreateFuncD2Ev,__ZN23btConvexConvexAlgorithm10CreateFuncD0Ev,__ZN23btConvexConvexAlgorithmD2Ev,__ZN23btConvexConvexAlgorithmD0Ev,__ZN24btPerturbedContactResultD1Ev,__ZN24btPerturbedContactResultD0Ev,__ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD2Ev,__ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD0Ev,__ZN31btConvexPlaneCollisionAlgorithmD2Ev,__ZN31btConvexPlaneCollisionAlgorithmD0Ev,__ZN18btConvexPolyhedronD2Ev,__ZN18btConvexPolyhedronD0Ev,__ZN15btGjkConvexCastD1Ev,__ZN15btGjkConvexCastD0Ev,__ZL20btAlignedFreeDefaultPv,__ZL13btFreeDefaultPv,__ZN10__cxxabiv116__shim_type_infoD2Ev
  ,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN13btRaycastBar2D1Ev,__ZN7btClockD2Ev,__ZN12CProfileNodeD2Ev,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_viiidii = [b4];
  var FUNCTION_TABLE_vii = [b5,__ZNK20btDefaultMotionState17getWorldTransformER11btTransform,__ZN20btDefaultMotionState17setWorldTransformERK11btTransform,__ZN21btConeTwistConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN21btConeTwistConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN16btCollisionWorld14setDebugDrawerEP12btIDebugDraw,__ZN23btDiscreteDynamicsWorld21removeCollisionObjectEP17btCollisionObject,__ZN23btDiscreteDynamicsWorld9serializeEP12btSerializer,__ZN23btDiscreteDynamicsWorld16removeConstraintEP17btTypedConstraint,__ZN23btDiscreteDynamicsWorld9addActionEP17btActionInterface,__ZN23btDiscreteDynamicsWorld12removeActionEP17btActionInterface,__ZN23btDiscreteDynamicsWorld10setGravityERK9btVector3,__ZNK23btDiscreteDynamicsWorld10getGravityEv,__ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBody,__ZN23btDiscreteDynamicsWorld15removeRigidBodyEP11btRigidBody,__ZN23btDiscreteDynamicsWorld19setConstraintSolverEP18btConstraintSolver,__ZN23btDiscreteDynamicsWorld10addVehicleEP17btActionInterface,__ZN23btDiscreteDynamicsWorld13removeVehicleEP17btActionInterface,__ZN23btDiscreteDynamicsWorld12addCharacterEP17btActionInterface,__ZN23btDiscreteDynamicsWorld15removeCharacterEP17btActionInterface,__ZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfo,__ZN23btDiscreteDynamicsWorld11setNumTasksEi,__ZN17btHingeConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN17btHingeConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN17btCollisionObject17setCollisionShapeEP16btCollisionShape,__ZNK11btRigidBody21serializeSingleObjectEP12btSerializer,__ZN20btAxisSweep3InternalItE25calculateOverlappingPairsEP12btDispatcher,__ZN20btAxisSweep3InternalItE9resetPoolEP12btDispatcher,__ZN15btNullPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback
  ,__ZN15btNullPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback,__ZN15btNullPairCache20sortOverlappingPairsEP12btDispatcher,__ZN10btBoxShape15setLocalScalingERK9btVector3,__ZNK16btCollisionShape20serializeSingleShapeEP12btSerializer,__ZN22btBvhTriangleMeshShape15setLocalScalingERK9btVector3,__ZNK22btBvhTriangleMeshShape18serializeSingleBvhEP12btSerializer,__ZNK22btBvhTriangleMeshShape30serializeSingleTriangleInfoMapEP12btSerializer,__ZN14btCapsuleShape15setLocalScalingERK9btVector3,__ZN21btCollisionDispatcher15releaseManifoldEP20btPersistentManifold,__ZN21btCollisionDispatcher13clearManifoldEP20btPersistentManifold,__ZN21btCollisionDispatcher22freeCollisionAlgorithmEPv,__ZNK17btCollisionObject21serializeSingleObjectEP12btSerializer,__ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject,__ZN16btCollisionWorld9serializeEP12btSerializer,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN9RayTester7ProcessE_1PK10btDbvtNode,__ZN12btConvexCast10CastResult15drawCoordSystemERK11btTransform,__ZN17btConvexHullShape15setLocalScalingERK9btVector3,__ZN21btConvexInternalShape15setLocalScalingERK9btVector3,__ZN16btDbvtBroadphase25calculateOverlappingPairsEP12btDispatcher,__ZN16btDbvtBroadphase9resetPoolEP12btDispatcher,__ZN20BroadphaseAabbTester7ProcessEPK10btDbvtNode,__ZN19BroadphaseRayTester7ProcessEPK10btDbvtNode,__ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNode,__ZN16btEmptyAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN14btQuantizedBvh16deSerializeFloatER23btQuantizedBvhFloatData,__ZN14btQuantizedBvh17deSerializeDoubleER24btQuantizedBvhDoubleData,__ZN28btHashedOverlappingPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback,__ZN28btHashedOverlappingPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback,__ZN28btHashedOverlappingPairCache20sortOverlappingPairsEP12btDispatcher,__ZN34btPolyhedralConvexAabbCachingShape15setLocalScalingERK9btVector3
  ,__ZN25btSimulationIslandManager26storeIslandActivationStateEP16btCollisionWorld,__ZN32btSphereSphereCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN34btSphereTriangleCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN26btTriangleIndexVertexArray16unLockVertexBaseEi,__ZNK26btTriangleIndexVertexArray24unLockReadOnlyVertexBaseEi,__ZN26btTriangleIndexVertexArray19preallocateVerticesEi,__ZN26btTriangleIndexVertexArray18preallocateIndicesEi,__ZN19btTriangleMeshShape15setLocalScalingERK9btVector3,__ZN26btBoxBoxCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN28btCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN22btCompoundLeafCallback7ProcessEPK10btDbvtNode,__ZN33btConvexConcaveCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN23btConvexConvexAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN31btConvexPlaneCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiiiiii = [b6,__ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE,__ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE,__ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE];
  var FUNCTION_TABLE_ii = [b7,__ZN15DemoApplication16getDynamicsWorldEv,__ZNK21btConeTwistConstraint28calculateSerializeBufferSizeEv,__ZN16btCollisionWorld14getDebugDrawerEv,__ZN23btDiscreteDynamicsWorld19getConstraintSolverEv,__ZNK23btDiscreteDynamicsWorld17getNumConstraintsEv,__ZNK23btDiscreteDynamicsWorld12getWorldTypeEv,__ZNK17btHingeConstraint28calculateSerializeBufferSizeEv,__ZNK11btRigidBody28calculateSerializeBufferSizeEv,__ZNK17btTypedConstraint28calculateSerializeBufferSizeEv,__ZN20btAxisSweep3InternalItE23getOverlappingPairCacheEv,__ZNK20btAxisSweep3InternalItE23getOverlappingPairCacheEv,__ZN15btNullPairCache26getOverlappingPairArrayPtrEv,__ZNK15btNullPairCache26getOverlappingPairArrayPtrEv,__ZN15btNullPairCache23getOverlappingPairArrayEv,__ZNK15btNullPairCache22getNumOverlappingPairsEv,__ZN15btNullPairCache18hasDeferredRemovalEv,__ZNK21btConvexInternalShape15getLocalScalingEv,__ZNK10btBoxShape7getNameEv,__ZNK21btConvexInternalShape28calculateSerializeBufferSizeEv,__ZNK10btBoxShape36getNumPreferredPenetrationDirectionsEv,__ZN23btPolyhedralConvexShape28initializePolyhedralFeaturesEv,__ZNK10btBoxShape14getNumVerticesEv,__ZNK10btBoxShape11getNumEdgesEv,__ZNK10btBoxShape12getNumPlanesEv,__ZNK19btTriangleMeshShape15getLocalScalingEv,__ZNK22btBvhTriangleMeshShape7getNameEv,__ZNK22btBvhTriangleMeshShape28calculateSerializeBufferSizeEv,__ZNK14btCapsuleShape7getNameEv
  ,__ZNK14btCapsuleShape28calculateSerializeBufferSizeEv,__ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv,__ZNK21btCollisionDispatcher15getNumManifoldsEv,__ZN21btCollisionDispatcher26getInternalManifoldPointerEv,__ZN21btCollisionDispatcher23getInternalManifoldPoolEv,__ZNK21btCollisionDispatcher23getInternalManifoldPoolEv,__ZNK17btCollisionObject28calculateSerializeBufferSizeEv,__ZNK17btConvexHullShape7getNameEv,__ZNK17btConvexHullShape28calculateSerializeBufferSizeEv,__ZNK17btConvexHullShape14getNumVerticesEv,__ZNK17btConvexHullShape11getNumEdgesEv,__ZNK17btConvexHullShape12getNumPlanesEv,__ZNK16btCollisionShape28calculateSerializeBufferSizeEv,__ZN16btDbvtBroadphase23getOverlappingPairCacheEv,__ZNK16btDbvtBroadphase23getOverlappingPairCacheEv,__ZN31btDefaultCollisionConfiguration25getPersistentManifoldPoolEv,__ZN31btDefaultCollisionConfiguration25getCollisionAlgorithmPoolEv,__ZN31btDefaultCollisionConfiguration17getStackAllocatorEv,__ZN31btDefaultCollisionConfiguration16getSimplexSolverEv,__ZNK14btQuantizedBvh31calculateSerializeBufferSizeNewEv,__ZN28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv,__ZNK28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv,__ZN28btHashedOverlappingPairCache23getOverlappingPairArrayEv,__ZNK28btHashedOverlappingPairCache22getNumOverlappingPairsEv,__ZN28btHashedOverlappingPairCache18hasDeferredRemovalEv,__ZNK15btTriangleShape7getNameEv,__ZNK15btTriangleShape36getNumPreferredPenetrationDirectionsEv,__ZNK15btTriangleShape14getNumVerticesEv,__ZNK15btTriangleShape11getNumEdgesEv,__ZNK15btTriangleShape12getNumPlanesEv
  ,__ZNK13btSphereShape7getNameEv,__ZNK26btTriangleIndexVertexArray14getNumSubPartsEv,__ZNK26btTriangleIndexVertexArray14hasPremadeAabbEv,__ZNK23btStridingMeshInterface28calculateSerializeBufferSizeEv,__ZNK19btTriangleMeshShape7getNameEv,__ZL14btAllocDefaultj,__ZNKSt9bad_alloc4whatEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viidi = [b8,__ZN21btConeTwistConstraint8setParamEifi,__ZN17btHingeConstraint8setParamEifi,b8];
  var FUNCTION_TABLE_viddiii = [b9];
  var FUNCTION_TABLE_vidii = [b10];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b11,__ZN30btGjkEpaPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAlloc,__ZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAlloc,b11];
  var FUNCTION_TABLE_vidi = [b12,__ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3,__ZNK19btTriangleMeshShape21calculateLocalInertiaEfR9btVector3,__ZNK14btCapsuleShape21calculateLocalInertiaEfR9btVector3,__ZNK23btPolyhedralConvexShape21calculateLocalInertiaEfR9btVector3,__ZNK15btTriangleShape21calculateLocalInertiaEfR9btVector3,__ZNK13btSphereShape21calculateLocalInertiaEfR9btVector3,b12];
  var FUNCTION_TABLE_viiiiddddiid = [b13];
  var FUNCTION_TABLE_di = [b14,__ZNK16btCollisionShape20getAngularMotionDiscEv,__ZNK21btConvexInternalShape9getMarginEv,__ZNK14btConcaveShape9getMarginEv,__ZNK13btSphereShape9getMarginEv,b14,b14,b14];
  var FUNCTION_TABLE_diiiiiiiiiii = [b15,__ZN35btSequentialImpulseConstraintSolver10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAllocP12btDispatcher];
  var FUNCTION_TABLE_iiii = [b16,__ZNK21btConeTwistConstraint9serializeEPvP12btSerializer,__ZNK17btHingeConstraint9serializeEPvP12btSerializer,__ZNK11btRigidBody9serializeEPvP12btSerializer,__ZNK17btTypedConstraint9serializeEPvP12btSerializer,__ZN15btNullPairCache18addOverlappingPairEP17btBroadphaseProxyS1_,__ZN15btNullPairCache8findPairEP17btBroadphaseProxyS1_,__ZNK21btConvexInternalShape9serializeEPvP12btSerializer,__ZNK22btBvhTriangleMeshShape9serializeEPvP12btSerializer,__ZNK14btCapsuleShape9serializeEPvP12btSerializer,__ZN21btCollisionDispatcher14getNewManifoldEPvS0_,__ZN21btCollisionDispatcher14needsCollisionEP17btCollisionObjectS1_,__ZN21btCollisionDispatcher13needsResponseEP17btCollisionObjectS1_,__ZNK17btCollisionObject9serializeEPvP12btSerializer,__ZNK17btConvexHullShape9serializeEPvP12btSerializer,__ZNK16btCollisionShape9serializeEPvP12btSerializer,__ZN31btDefaultCollisionConfiguration31getCollisionAlgorithmCreateFuncEii,__ZNK14btQuantizedBvh9serializeEPvP12btSerializer,__ZN28btHashedOverlappingPairCache18addOverlappingPairEP17btBroadphaseProxyS1_,__ZN28btHashedOverlappingPairCache8findPairEP17btBroadphaseProxyS1_,__ZNK23btStridingMeshInterface9serializeEPvP12btSerializer,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16];
  var FUNCTION_TABLE_viiiiii = [b17,__ZZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfoEN27InplaceSolverIslandCallback13ProcessIslandEPP17btCollisionObjectiPP20btPersistentManifoldii,__ZN20btAxisSweep3InternalItE7rayTestERK9btVector3S3_R23btBroadphaseRayCallbackS3_S3_,__ZN16btDbvtBroadphase7rayTestERK9btVector3S2_R23btBroadphaseRayCallbackS2_S2_,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17];
  var FUNCTION_TABLE_iiid = [b18,__ZNK10btBoxShape8isInsideERK9btVector3f,__ZNK17btConvexHullShape8isInsideERK9btVector3f,__ZNK15btTriangleShape8isInsideERK9btVector3f];
  var FUNCTION_TABLE_diiiii = [b19,__ZN16btEmptyAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN32btSphereSphereCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN34btSphereTriangleCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN26btBoxBoxCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN28btCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN23btConvexConvexAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN31btConvexPlaneCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,b19,b19,b19,b19,b19,b19,b19];
  var FUNCTION_TABLE_viiiid = [b20,__ZN17btTypedConstraint21setupSolverConstraintER20btAlignedObjectArrayI18btSolverConstraintEiif];
  var FUNCTION_TABLE_diiidii = [b21,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitE_0RK9btVector3SG_fii,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitERK9btVector3SG_fii,b21];
  var FUNCTION_TABLE_viiiidddddid = [b22];
  var FUNCTION_TABLE_viidii = [b23];
  var FUNCTION_TABLE_viiiiiiiiii = [b24,__ZN35btSequentialImpulseConstraintSolver45solveGroupCacheFriendlySplitImpulseIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc,__ZN26btTriangleIndexVertexArray24getLockedVertexIndexBaseEPPhRiR14PHY_ScalarTypeS2_S1_S2_S2_S4_i,__ZNK26btTriangleIndexVertexArray32getLockedReadOnlyVertexIndexBaseEPPKhRiR14PHY_ScalarTypeS3_S2_S3_S3_S5_i];
  var FUNCTION_TABLE_iii = [b25,__ZNK16btCollisionWorld17RayResultCallback14needsCollisionEP17btBroadphaseProxy,__ZN23btDiscreteDynamicsWorld13getConstraintEi,__ZNK23btDiscreteDynamicsWorld13getConstraintEi,__ZNK34btClosestNotMeConvexResultCallback14needsCollisionEP17btBroadphaseProxy,__ZNK16btCollisionWorld20ConvexResultCallback14needsCollisionEP17btBroadphaseProxy,__ZN11btRigidBody24checkCollideWithOverrideEP17btCollisionObject,__ZN21btCollisionDispatcher26getManifoldByIndexInternalEi,__ZN21btCollisionDispatcher26allocateCollisionAlgorithmEi,__ZN23btCollisionPairCallback14processOverlapER16btBroadphasePair,__ZN17btCollisionObject24checkCollideWithOverrideEPS_,__ZN21btSingleSweepCallback7processEPK17btBroadphaseProxy,__ZN19btSingleRayCallback7processEPK17btBroadphaseProxy,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfENK14LocalInfoAdder14needsCollisionE_1P17btBroadphaseProxy,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEENK15LocalInfoAdder214needsCollisionEP17btBroadphaseProxy,__ZN6btDbvt8ICollide7DescentEPK10btDbvtNode,__ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode,__ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallback14processOverlapER16btBroadphasePair,__ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallback14processOverlapER16btBroadphasePair,__ZL21btAlignedAllocDefaultji,__ZL8pointCmpRKN20btConvexHullInternal7Point32ES2_,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25];
  var FUNCTION_TABLE_diii = [b26,__ZN16btCollisionWorld24ClosestRayResultCallback15addSingleResultERNS_14LocalRayResultEb,__ZNK21btConeTwistConstraint8getParamEii,__ZN34btClosestNotMeConvexResultCallback15addSingleResultERN16btCollisionWorld17LocalConvexResultEb,__ZN16btCollisionWorld27ClosestConvexResultCallback15addSingleResultERNS_17LocalConvexResultEb,__ZNK17btHingeConstraint8getParamEii,__ZZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfEN14LocalInfoAdder15addSingleResultE_1RNS_17LocalConvexResultEb,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN15LocalInfoAdder215addSingleResultERNS_14LocalRayResultEb];
  var FUNCTION_TABLE_diiiiiiiiii = [b27,__ZN35btSequentialImpulseConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc,__ZN35btSequentialImpulseConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc,__ZN35btSequentialImpulseConstraintSolver33solveGroupCacheFriendlyIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc];
  var FUNCTION_TABLE_did = [b28,__ZNK16btCollisionShape27getContactBreakingThresholdEf];
  var FUNCTION_TABLE_diidii = [b29,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitE_0RK9btVector3fii,__ZZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitERK9btVector3fii,b29];
  var FUNCTION_TABLE_iiiiiiiiii = [b30,__ZN20btAxisSweep3InternalItE11createProxyERK9btVector3S3_iPvssP12btDispatcherS4_,__ZN16btDbvtBroadphase11createProxyERK9btVector3S2_iPvssP12btDispatcherS3_,b30];
  var FUNCTION_TABLE_viiid = [b31,__ZN21btConeTwistConstraint23solveConstraintObsoleteER11btRigidBodyS1_f,__ZN17btTypedConstraint23solveConstraintObsoleteER11btRigidBodyS1_f,__ZN16btPointCollector15addContactPointERK9btVector3S2_f,__ZN16btManifoldResult15addContactPointERK9btVector3S2_f,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResult15addContactPointERKS8_SG_f,__ZN24btPerturbedContactResult15addContactPointERK9btVector3S2_f,__ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult15addContactPointERK9btVector3SA_f];
  var FUNCTION_TABLE_viii = [b32,__ZN21btConeTwistConstraint9setFramesERK11btTransformS2_,__ZN23btDiscreteDynamicsWorld13addConstraintEP17btTypedConstraintb,__ZN18btConstraintSolver12prepareSolveEii,__ZN20btAxisSweep3InternalItE12destroyProxyEP17btBroadphaseProxyP12btDispatcher,__ZNK20btAxisSweep3InternalItE17getBroadphaseAabbER9btVector3S2_,__ZN15btNullPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher,__ZN15btNullPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher,__ZN15btNullPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher,__ZN15btNullPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher,__ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf,__ZNK10btBoxShape24localGetSupportingVertexERK9btVector3,__ZNK10btBoxShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK10btBoxShape32getPreferredPenetrationDirectionEiR9btVector3,__ZNK10btBoxShape9getVertexEiR9btVector3,__ZNK10btBoxShape16getPlaneEquationER9btVector4i,__ZNK19btTriangleMeshShape24localGetSupportingVertexERK9btVector3,__ZNK19btTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii,__ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallback11processNodeEii,__ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii,__ZNK21btConvexInternalShape24localGetSupportingVertexERK9btVector3,__ZNK14btCapsuleShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3,__ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_,__ZN12btConvexCast10CastResult13reportFailureEii,__ZN16btPointCollector20setShapeIdentifiersAEii,__ZN16btPointCollector20setShapeIdentifiersBEii,__ZNK17btConvexHullShape24localGetSupportingVertexERK9btVector3
  ,__ZNK17btConvexHullShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK17btConvexHullShape9getVertexEiR9btVector3,__ZN16btDbvtBroadphase12destroyProxyEP17btBroadphaseProxyP12btDispatcher,__ZNK16btDbvtBroadphase17getBroadphaseAabbER9btVector3S1_,__ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNodeS2_,__ZN16btManifoldResult20setShapeIdentifiersAEii,__ZN16btManifoldResult20setShapeIdentifiersBEii,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResult20setShapeIdentifiersAEii,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawP12btStackAllocEN20btIntermediateResult20setShapeIdentifiersBEii,__ZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher,__ZN28btHashedOverlappingPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher,__ZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher,__ZN28btHashedOverlappingPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher,__ZNK23btPolyhedralConvexShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK15btTriangleShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK15btTriangleShape32getPreferredPenetrationDirectionEiR9btVector3,__ZNK15btTriangleShape9getVertexEiR9btVector3,__ZN25btSimulationIslandManager21updateActivationStateEP16btCollisionWorldP12btDispatcher,__ZNK13btSphereShape24localGetSupportingVertexERK9btVector3,__ZNK13btSphereShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK26btTriangleIndexVertexArray14setPremadeAabbERK9btVector3S2_,__ZNK26btTriangleIndexVertexArray14getPremadeAabbEP9btVector3S1_,__ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersAEii,__ZZN23btConvexConvexAlgorithm16processCollisionEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersBEii,__ZN21btCollisionDispatcher19defaultNearCallbackER16btBroadphasePairRS_RK16btDispatcherInfo,__ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3,__ZNK13btConvexShape31localGetSupportVertexNonVirtualERK9btVector3,b32,b32,b32
  ,b32,b32,b32,b32,b32];
  var FUNCTION_TABLE_v = [b33,___cxa_pure_virtual__wrapper];
  var FUNCTION_TABLE_viid = [b34,__ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef];
  var FUNCTION_TABLE_iiiii = [b35,__ZN15btNullPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher,__ZN21btCollisionDispatcher13findAlgorithmEP17btCollisionObjectS1_P20btPersistentManifold,__ZN31btConvexPlaneCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN26btBoxBoxCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN34btSphereTriangleCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN32btSphereSphereCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN16btEmptyAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN28btCompoundCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN28btCompoundCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZN33btConvexConcaveCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_,__ZNK14btQuantizedBvh9serializeEPvjb,__ZNK14btOptimizedBvh16serializeInPlaceEPvjb,__ZN28btHashedOverlappingPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher,__ZN23btConvexConvexAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_];
  var FUNCTION_TABLE_iidid = [b36,__ZN23btDiscreteDynamicsWorld14stepSimulationEfif];
  var FUNCTION_TABLE_viiii = [b37,__ZN16btCollisionWorld15debugDrawObjectERK11btTransformPK16btCollisionShapeRK9btVector3,__ZNK16btCollisionWorld7rayTestERK9btVector3S2_RNS_17RayResultCallbackE,__ZN23btDiscreteDynamicsWorld18addCollisionObjectEP17btCollisionObjectss,__ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBodyss,__ZN18btConstraintSolver9allSolvedERK19btContactSolverInfoP12btIDebugDrawP12btStackAlloc,__ZNK20btAxisSweep3InternalItE7getAabbEP17btBroadphaseProxyR9btVector3S4_,__ZN20btAxisSweep3InternalItE8aabbTestERK9btVector3S3_R24btBroadphaseAabbCallback,__ZNK10btBoxShape7getAabbERK11btTransformR9btVector3S4_,__ZNK10btBoxShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_,__ZNK10btBoxShape7getEdgeEiR9btVector3S1_,__ZNK10btBoxShape8getPlaneER9btVector3S1_i,__ZNK19btTriangleMeshShape7getAabbERK11btTransformR9btVector3S4_,__ZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,__ZNK14btCapsuleShape7getAabbERK11btTransformR9btVector3S4_,__ZNK14btCapsuleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZN21btCollisionDispatcher25dispatchAllCollisionPairsEP22btOverlappingPairCacheRK16btDispatcherInfoP12btDispatcher,__ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectss,__ZN17DebugDrawcallback15processTriangleEP9btVector3ii,__ZN17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii,__ZThn4_N17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii,__ZN28btTriangleConvexcastCallback15processTriangleEP9btVector3ii,__ZN25btTriangleRaycastCallback15processTriangleEP9btVector3ii,__ZNK34btPolyhedralConvexAabbCachingShape7getAabbERK11btTransformR9btVector3S4_,__ZNK17btConvexHullShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK17btConvexHullShape7getEdgeEiR9btVector3S1_,__ZNK17btConvexHullShape8getPlaneER9btVector3S1_i,__ZNK21btConvexInternalShape7getAabbERK11btTransformR9btVector3S4_
  ,__ZNK16btDbvtBroadphase7getAabbEP17btBroadphaseProxyR9btVector3S3_,__ZN16btDbvtBroadphase8aabbTestERK9btVector3S2_R24btBroadphaseAabbCallback,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallback28internalProcessTriangleIndexE_0PS2_ii,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallback28internalProcessTriangleIndexEPS2_ii,__ZNK23btPolyhedralConvexShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK15btTriangleShape7getAabbERK11btTransformR9btVector3S4_,__ZNK15btTriangleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK15btTriangleShape7getEdgeEiR9btVector3S1_,__ZNK15btTriangleShape8getPlaneER9btVector3S1_i,__ZNK15btTriangleShape16getPlaneEquationEiR9btVector3S1_,__ZNK13btSphereShape7getAabbERK11btTransformR9btVector3S4_,__ZNK13btSphereShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK23btStridingMeshInterface27InternalProcessAllTrianglesEP31btInternalTriangleIndexCallbackRK9btVector3S4_,__ZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,__ZN21SupportVertexCallback15processTriangleEP9btVector3ii,__ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallback28internalProcessTriangleIndexEPS2_ii,__ZN24btConvexTriangleCallback15processTriangleEP9btVector3ii,__ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallback15processTriangleEP9btVector3ii,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b37,b37,b37,b37,b37,b37,b37,b37,b37
  ,b37,b37,b37,b37,b37];

  return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _rand_r: _rand_r, _i64Add: _i64Add, _bitshift64Ashr: _bitshift64Ashr, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _rand: _rand, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a556: __GLOBAL__I_a556, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_viiidii: dynCall_viiidii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viidi: dynCall_viidi, dynCall_viddiii: dynCall_viddiii, dynCall_vidii: dynCall_vidii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vidi: dynCall_vidi, dynCall_viiiiddddiid: dynCall_viiiiddddiid, dynCall_di: dynCall_di, dynCall_diiiiiiiiiii: dynCall_diiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_diiiii: dynCall_diiiii, dynCall_viiiid: dynCall_viiiid, dynCall_diiidii: dynCall_diiidii, dynCall_viiiidddddid: dynCall_viiiidddddid, dynCall_viidii: dynCall_viidii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_diii: dynCall_diii, dynCall_diiiiiiiiii: dynCall_diiiiiiiiii, dynCall_did: dynCall_did, dynCall_diidii: dynCall_diidii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iiiii: dynCall_iiiii, dynCall_iidid: dynCall_iidid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_viiidii": invoke_viiidii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viidi": invoke_viidi, "invoke_viddiii": invoke_viddiii, "invoke_vidii": invoke_vidii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_vidi": invoke_vidi, "invoke_viiiiddddiid": invoke_viiiiddddiid, "invoke_di": invoke_di, "invoke_diiiiiiiiiii": invoke_diiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_diiiii": invoke_diiiii, "invoke_viiiid": invoke_viiiid, "invoke_diiidii": invoke_diiidii, "invoke_viiiidddddid": invoke_viiiidddddid, "invoke_viidii": invoke_viidii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_diii": invoke_diii, "invoke_diiiiiiiiii": invoke_diiiiiiiiii, "invoke_did": invoke_did, "invoke_diidii": invoke_diidii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiii": invoke_iiiii, "invoke_iidid": invoke_iidid, "invoke_viiii": invoke_viiii, "_llvm_bswap_i32": _llvm_bswap_i32, "___cxa_throw": ___cxa_throw, "_cosf": _cosf, "_send": _send, "__ZSt9terminatev": __ZSt9terminatev, "_fmod": _fmod, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "___cxa_is_number_type": ___cxa_is_number_type, "___assert_fail": ___assert_fail, "_atan2f": _atan2f, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "_pwrite": _pwrite, "_acosf": _acosf, "___setErrNo": ___setErrNo, "_fabsf": _fabsf, "_sbrk": _sbrk, "_llvm_pow_f32": _llvm_pow_f32, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "_fileno": _fileno, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_atexit": _atexit, "_puts": _puts, "_mkport": _mkport, "_sqrtf": _sqrtf, "_write": _write, "___errno_location": ___errno_location, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "_printf": _printf, "___cxa_does_inherit": ___cxa_does_inherit, "_fputc": _fputc, "_abort": _abort, "___cxa_allocate_exception": ___cxa_allocate_exception, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_gettimeofday": _gettimeofday, "__formatString": __formatString, "_fputs": _fputs, "___cxa_pure_virtual": ___cxa_pure_virtual, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle }, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _rand = Module["_rand"] = asm["_rand"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a556 = Module["__GLOBAL__I_a556"] = asm["__GLOBAL__I_a556"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiidii = Module["dynCall_viiidii"] = asm["dynCall_viiidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_viddiii = Module["dynCall_viddiii"] = asm["dynCall_viddiii"];
var dynCall_vidii = Module["dynCall_vidii"] = asm["dynCall_vidii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_viiiiddddiid = Module["dynCall_viiiiddddiid"] = asm["dynCall_viiiiddddiid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_diiiiiiiiiii = Module["dynCall_diiiiiiiiiii"] = asm["dynCall_diiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_diiiii = Module["dynCall_diiiii"] = asm["dynCall_diiiii"];
var dynCall_viiiid = Module["dynCall_viiiid"] = asm["dynCall_viiiid"];
var dynCall_diiidii = Module["dynCall_diiidii"] = asm["dynCall_diiidii"];
var dynCall_viiiidddddid = Module["dynCall_viiiidddddid"] = asm["dynCall_viiiidddddid"];
var dynCall_viidii = Module["dynCall_viidii"] = asm["dynCall_viidii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_diiiiiiiiii = Module["dynCall_diiiiiiiiii"] = asm["dynCall_diiiiiiiiii"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_diidii = Module["dynCall_diidii"] = asm["dynCall_diidii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iidid = Module["dynCall_iidid"] = asm["dynCall_iidid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run([].concat(Module["arguments"]));
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run([].concat(Module["arguments"]));

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






